from __future__ import annotations
import numpy
import numpy.typing
import typing
__all__: list[str] = ['Finger', 'Hand', 'Joint']
class Finger:
    def get_joint_lower_limit(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    def get_joint_position(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    def get_joint_upper_limit(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    def joint(self, index: typing.SupportsInt) -> Joint:
        ...
    def read_joint_lower_limit(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    async def read_joint_lower_limit_async(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    def read_joint_lower_limit_unchecked(self) -> None:
        ...
    def read_joint_position(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    async def read_joint_position_async(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    def read_joint_position_unchecked(self) -> None:
        ...
    def read_joint_upper_limit(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    async def read_joint_upper_limit_async(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    def read_joint_upper_limit_unchecked(self) -> None:
        ...
    @typing.overload
    def write_joint_control_mode(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_control_mode(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    async def write_joint_control_mode_async(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    async def write_joint_control_mode_async(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    def write_joint_control_mode_unchecked(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_control_mode_unchecked(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    def write_joint_control_position(self, value: numpy.float64) -> None:
        ...
    @typing.overload
    def write_joint_control_position(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.float64]) -> None:
        ...
    @typing.overload
    async def write_joint_control_position_async(self, value: numpy.float64) -> None:
        ...
    @typing.overload
    async def write_joint_control_position_async(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.float64]) -> None:
        ...
    @typing.overload
    def write_joint_control_position_unchecked(self, value: numpy.float64) -> None:
        ...
    @typing.overload
    def write_joint_control_position_unchecked(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.float64]) -> None:
        ...
    @typing.overload
    def write_joint_control_word(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_control_word(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    async def write_joint_control_word_async(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    async def write_joint_control_word_async(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    def write_joint_control_word_unchecked(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_control_word_unchecked(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    def write_joint_current_limit(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_current_limit(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    async def write_joint_current_limit_async(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    async def write_joint_current_limit_async(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    def write_joint_current_limit_unchecked(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_current_limit_unchecked(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    def write_joint_sin_level(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_sin_level(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    async def write_joint_sin_level_async(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    async def write_joint_sin_level_async(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    def write_joint_sin_level_unchecked(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_sin_level_unchecked(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
class Hand:
    def __init__(self, serial_number: str | None = None, usb_pid: typing.SupportsInt = -1, usb_vid: typing.SupportsInt = 1155, mask: typing.Annotated[numpy.typing.ArrayLike, numpy.bool] | None = None) -> None:
        ...
    def finger(self, index: typing.SupportsInt) -> Finger:
        ...
    def get_firmware_date(self) -> numpy.uint32:
        ...
    def get_firmware_version(self) -> numpy.uint32:
        ...
    def get_input_voltage(self) -> numpy.float32:
        ...
    def get_joint_lower_limit(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    def get_joint_position(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    def get_joint_upper_limit(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    def get_mcu_temperature(self) -> numpy.float32:
        ...
    def get_system_time(self) -> numpy.uint32:
        ...
    @typing.overload
    def pdo_write_unchecked(self, arg0: numpy.float64) -> None:
        ...
    @typing.overload
    def pdo_write_unchecked(self, arg0: typing.Annotated[numpy.typing.ArrayLike, numpy.float64]) -> None:
        ...
    def read_firmware_date(self) -> numpy.uint32:
        ...
    async def read_firmware_date_async(self) -> numpy.uint32:
        ...
    def read_firmware_date_unchecked(self) -> None:
        ...
    def read_firmware_version(self) -> numpy.uint32:
        ...
    async def read_firmware_version_async(self) -> numpy.uint32:
        ...
    def read_firmware_version_unchecked(self) -> None:
        ...
    def read_input_voltage(self) -> numpy.float32:
        ...
    async def read_input_voltage_async(self) -> numpy.float32:
        ...
    def read_input_voltage_unchecked(self) -> None:
        ...
    def read_joint_lower_limit(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    async def read_joint_lower_limit_async(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    def read_joint_lower_limit_unchecked(self) -> None:
        ...
    def read_joint_position(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    async def read_joint_position_async(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    def read_joint_position_unchecked(self) -> None:
        ...
    def read_joint_upper_limit(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    async def read_joint_upper_limit_async(self) -> numpy.typing.NDArray[numpy.float64]:
        ...
    def read_joint_upper_limit_unchecked(self) -> None:
        ...
    def read_mcu_temperature(self) -> numpy.float32:
        ...
    async def read_mcu_temperature_async(self) -> numpy.float32:
        ...
    def read_mcu_temperature_unchecked(self) -> None:
        ...
    def read_system_time(self) -> numpy.uint32:
        ...
    async def read_system_time_async(self) -> numpy.uint32:
        ...
    def read_system_time_unchecked(self) -> None:
        ...
    def write_global_tpdo_id(self, value: numpy.uint16) -> None:
        ...
    async def write_global_tpdo_id_async(self, value: numpy.uint16) -> None:
        ...
    def write_global_tpdo_id_unchecked(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_control_mode(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_control_mode(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    async def write_joint_control_mode_async(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    async def write_joint_control_mode_async(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    def write_joint_control_mode_unchecked(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_control_mode_unchecked(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    def write_joint_control_position(self, value: numpy.float64) -> None:
        ...
    @typing.overload
    def write_joint_control_position(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.float64]) -> None:
        ...
    @typing.overload
    async def write_joint_control_position_async(self, value: numpy.float64) -> None:
        ...
    @typing.overload
    async def write_joint_control_position_async(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.float64]) -> None:
        ...
    @typing.overload
    def write_joint_control_position_unchecked(self, value: numpy.float64) -> None:
        ...
    @typing.overload
    def write_joint_control_position_unchecked(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.float64]) -> None:
        ...
    @typing.overload
    def write_joint_control_word(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_control_word(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    async def write_joint_control_word_async(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    async def write_joint_control_word_async(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    def write_joint_control_word_unchecked(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_control_word_unchecked(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    def write_joint_current_limit(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_current_limit(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    async def write_joint_current_limit_async(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    async def write_joint_current_limit_async(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    def write_joint_current_limit_unchecked(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_current_limit_unchecked(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    def write_joint_sin_level(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_sin_level(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    async def write_joint_sin_level_async(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    async def write_joint_sin_level_async(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    @typing.overload
    def write_joint_sin_level_unchecked(self, value: numpy.uint16) -> None:
        ...
    @typing.overload
    def write_joint_sin_level_unchecked(self, value_array: typing.Annotated[numpy.typing.ArrayLike, numpy.uint16]) -> None:
        ...
    def write_pdo_enabled(self, value: numpy.uint8) -> None:
        ...
    async def write_pdo_enabled_async(self, value: numpy.uint8) -> None:
        ...
    def write_pdo_enabled_unchecked(self, value: numpy.uint8) -> None:
        ...
    def write_pdo_interval(self, value: numpy.uint32) -> None:
        ...
    async def write_pdo_interval_async(self, value: numpy.uint32) -> None:
        ...
    def write_pdo_interval_unchecked(self, value: numpy.uint32) -> None:
        ...
class Joint:
    def get_joint_lower_limit(self) -> numpy.float64:
        ...
    def get_joint_position(self) -> numpy.float64:
        ...
    def get_joint_upper_limit(self) -> numpy.float64:
        ...
    def read_joint_lower_limit(self) -> numpy.float64:
        ...
    async def read_joint_lower_limit_async(self) -> numpy.float64:
        ...
    def read_joint_lower_limit_unchecked(self) -> None:
        ...
    def read_joint_position(self) -> numpy.float64:
        ...
    async def read_joint_position_async(self) -> numpy.float64:
        ...
    def read_joint_position_unchecked(self) -> None:
        ...
    def read_joint_upper_limit(self) -> numpy.float64:
        ...
    async def read_joint_upper_limit_async(self) -> numpy.float64:
        ...
    def read_joint_upper_limit_unchecked(self) -> None:
        ...
    def write_joint_control_mode(self, value: numpy.uint16) -> None:
        ...
    async def write_joint_control_mode_async(self, value: numpy.uint16) -> None:
        ...
    def write_joint_control_mode_unchecked(self, value: numpy.uint16) -> None:
        ...
    def write_joint_control_position(self, value: numpy.float64) -> None:
        ...
    async def write_joint_control_position_async(self, value: numpy.float64) -> None:
        ...
    def write_joint_control_position_unchecked(self, value: numpy.float64) -> None:
        ...
    def write_joint_control_word(self, value: numpy.uint16) -> None:
        ...
    async def write_joint_control_word_async(self, value: numpy.uint16) -> None:
        ...
    def write_joint_control_word_unchecked(self, value: numpy.uint16) -> None:
        ...
    def write_joint_current_limit(self, value: numpy.uint16) -> None:
        ...
    async def write_joint_current_limit_async(self, value: numpy.uint16) -> None:
        ...
    def write_joint_current_limit_unchecked(self, value: numpy.uint16) -> None:
        ...
    def write_joint_sin_level(self, value: numpy.uint16) -> None:
        ...
    async def write_joint_sin_level_async(self, value: numpy.uint16) -> None:
        ...
    def write_joint_sin_level_unchecked(self, value: numpy.uint16) -> None:
        ...
