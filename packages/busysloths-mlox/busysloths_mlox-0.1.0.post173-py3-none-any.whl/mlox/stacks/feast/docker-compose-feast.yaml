version: '3.8'

services:
  feast-redis:
    image: redis:7.2-bookworm
    container_name: "feast_redis"
    # ports:
    #   - "6379:6379"
    volumes:
      - feast_redis_data:/data
    networks:
      - feast_network

  # redis-commander:
  #   image: rediscommander/redis-commander:latest
  #   restart: always
  #   environment:
  #     REDIS_HOSTS: redis
  #     REDIS_HOST: redis
  #     REDIS_PORT: 6379
  #     # REDIS_PASSWORD: ${REDIS_PASSWORD}
  #     HTTP_USER: admin
  #     HTTP_PASSWORD: admin
  #   ports:
  #     - 8081:8081
  #   networks:
  #     - feast_network

  feast-init:
    build:
      context: .  # Use the Dockerfile in the current directory
    container_name: "feast_init"  
    volumes:
      - ./feature_store.yaml:/app/${FEAST_PROJECT_NAME:-my_project}/feature_repo/feature_store_mlox.yaml
      - ./${FEAST_PROJECT_NAME:-my_project}:/app/${FEAST_PROJECT_NAME:-my_project}
    # command: feast init ${FEAST_PROJECT_NAME:-my_project}
    command: >
      bash -c "
      feast init ${FEAST_PROJECT_NAME:-my_project};
      cd /app/${FEAST_PROJECT_NAME:-my_project}/feature_repo/;
      rm -f feature_store.yaml;
      cp feature_store_mlox.yaml feature_store.yaml;
      cd /app/${FEAST_PROJECT_NAME:-my_project}/;
      feast -c feature_repo apply;
      feast -c feature_repo materialize 2020-04-08T00:00:00 2025-04-08T00:00:00"
    networks:
      - feast_network

  # feast-ui:
  #   build:
  #     context: .  # Use the Dockerfile in the current directory
  #   container_name: "feast_ui"  
  #   ports:
  #     - "6563:6563"
  #   volumes:
  #     - ./${FEAST_PROJECT_NAME:-my_project}:/app/${FEAST_PROJECT_NAME:-my_project}
  #   depends_on:
  #     - redis
  #     - feast-init
  #   command: >
  #     bash -c "
  #     cd /app/${FEAST_PROJECT_NAME:-my_project}/feature_repo/;
  #     feast ui -p 6563"
  #   networks:
  #     # feast ui -p 6563 --root_path /app/${FEAST_PROJECT_NAME:-my_project}/feature_repo/"
  #     - feast_network

  feast-registry:
    build:
      context: .  # Use the Dockerfile in the current directory
    container_name: "feast_registry"  
    ports:
      - ${FEAST_REGISTRY_PORT}:6564  # gRPC endpoint for Feast
    volumes:
      - ./${FEAST_PROJECT_NAME:-my_project}:/app/${FEAST_PROJECT_NAME:-my_project}
    depends_on:
      - redis
      - feast-init
    # command: "cd /app/${FEAST_PROJECT_NAME:-my_project}/feature_repo/; feast serve_offline -p 6565"
    command: >
      bash -c "
      cd /app/${FEAST_PROJECT_NAME:-my_project}/;
      feast -c feature_repo serve_registry -p 6564 "
    networks:
      - feast_network

  feast-offline:
    build:
      context: .  # Use the Dockerfile in the current directory
    container_name: "feast_offline"  
    ports:
      - ${FEAST_OFFLINE_PORT}:6565  # gRPC endpoint for Feast
    volumes:
      # - ./feature_repo:/app/feature_repo
      # - ./feature_store.yaml:/app/feature_repo/feature_store.yaml
      # - ./registry.db:/app/registry.db  # works!
      # - ./offline_store:/app/feature_repo/data # For storing Parquet files
      # - ./feature_store.yaml:/app/${FEAST_PROJECT_NAME:-my_project}/feature_repo/feature_store.yaml
      - ./${FEAST_PROJECT_NAME:-my_project}:/app/${FEAST_PROJECT_NAME:-my_project}
    # environment:
    #   - FEAST_PROJECT=${FEAST_PROJECT_NAME:-my_project}
    #   - FEAST_CONFIG=/app/${FEAST_PROJECT_NAME:-my_project}/feature_repo/feature_store.yaml
    depends_on:
      - redis
      - feast-init
    # command: "cd /app/${FEAST_PROJECT_NAME:-my_project}/feature_repo/; feast serve_offline -p 6565"
    command: >
      bash -c "
      cd /app/${FEAST_PROJECT_NAME:-my_project}/;
      feast -c feature_repo serve_offline -p 6565 -h 0.0.0.0"
    networks:
      - feast_network

  feast-online:
    build:
      context: .  # Use the Dockerfile in the current directory
    container_name: "feast_online"  
    ports:
      - ${FEAST_ONLINE_PORT}:6566  # gRPC endpoint for Feast
      # - "8080:8080"  # HTTP endpoint for Feast
    volumes:
      # - ./feature_repo:/app/feature_repo
      # - ./feature_store.yaml:/app/feature_store.yaml
      # - ./feature_store.yaml:/app/feature_repo/feature_store.yaml
      # - ./registry.db:/app/registry.db  # works!
      # - ./offline_store:/app/feature_repo/data # For storing Parquet files
      # - ./feature_store.yaml:/app/${FEAST_PROJECT_NAME:-my_project}/feature_repo/feature_store.yaml
      - ./${FEAST_PROJECT_NAME:-my_project}:/app/${FEAST_PROJECT_NAME:-my_project}
      - ./cert.pem:/etc/ssl/certs/feast.crt
      - ./key.pem:/etc/ssl/private/feast.key
    # environment:
      # - FEAST_PROJECT=${FEAST_PROJECT_NAME:-my_project}
      # - FEAST_CONFIG=/app/${FEAST_PROJECT_NAME:-my_project}/feature_repo/feature_store.yaml
    depends_on:
      - redis
      - feast-init
    # command: "cd /app/${FEAST_PROJECT_NAME:-my_project}/feature_repo/; feast serve -k /etc/ssl/private/feast.key -c /etc/ssl/certs/feast.crt"
    # command: >
    #   bash -c "
    #   cd /app/${FEAST_PROJECT_NAME:-my_project}/;
    #   feast -c feature_repo serve -k /etc/ssl/private/feast.key -c /etc/ssl/certs/feast.crt -h 0.0.0.0"
    command: >
      bash -c "
      cd /app/${FEAST_PROJECT_NAME:-my_project}/;
      feast -c feature_repo serve -p 6566 -h 0.0.0.0"
    networks:
      - feast_network

networks:
  feast_network:

volumes:
  feast_redis_data:
