from collections.abc import Sequence
import enum
from typing import Annotated, overload

import numpy
from numpy.typing import NDArray


class VariableDomain(enum.IntEnum):
    Continuous = 0

    Integer = 1

    Binary = 2

    SemiContinuous = 3

class ConstraintSense(enum.Enum):
    LessEqual = 0

    Equal = 2

    GreaterEqual = 1

class ConstraintType(enum.Enum):
    Linear = 0

    Quadratic = 1

    SOS = 2

    Cone = 3

class SOSType(enum.Enum):
    SOS1 = 0

    SOS2 = 1

class ObjectiveSense(enum.Enum):
    Minimize = 0

    Maximize = 1

class VariableIndex:
    def __init__(self, arg: int, /) -> None: ...

    @property
    def index(self) -> int: ...

    def __neg__(self) -> ScalarAffineFunction: ...

    @overload
    def __add__(self, arg: float, /) -> ScalarAffineFunction: ...

    @overload
    def __add__(self, arg: VariableIndex, /) -> ScalarAffineFunction: ...

    @overload
    def __add__(self, arg: ScalarAffineFunction, /) -> ScalarAffineFunction: ...

    @overload
    def __add__(self, arg: ScalarQuadraticFunction, /) -> ScalarQuadraticFunction: ...

    def __radd__(self, arg: float, /) -> ScalarAffineFunction: ...

    @overload
    def __sub__(self, arg: float, /) -> ScalarAffineFunction: ...

    @overload
    def __sub__(self, arg: VariableIndex, /) -> ScalarAffineFunction: ...

    @overload
    def __sub__(self, arg: ScalarAffineFunction, /) -> ScalarAffineFunction: ...

    @overload
    def __sub__(self, arg: ScalarQuadraticFunction, /) -> ScalarQuadraticFunction: ...

    def __rsub__(self, arg: float, /) -> ScalarAffineFunction: ...

    @overload
    def __mul__(self, arg: float, /) -> ScalarAffineFunction: ...

    @overload
    def __mul__(self, arg: VariableIndex, /) -> ScalarQuadraticFunction: ...

    @overload
    def __mul__(self, arg: ScalarAffineFunction, /) -> ScalarQuadraticFunction: ...

    def __rmul__(self, arg: float, /) -> ScalarAffineFunction: ...

    def __truediv__(self, arg: float, /) -> ScalarAffineFunction: ...

class ConstraintIndex:
    def __init__(self, arg0: ConstraintType, arg1: int, /) -> None: ...

    @property
    def type(self) -> ConstraintType: ...

    @property
    def index(self) -> int: ...

class ScalarAffineFunction:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: float, /) -> None: ...

    @overload
    def __init__(self, arg: VariableIndex, /) -> None: ...

    @overload
    def __init__(self, arg0: VariableIndex, arg1: float, /) -> None: ...

    @overload
    def __init__(self, arg0: VariableIndex, arg1: float, arg2: float, /) -> None: ...

    @overload
    def __init__(self, coefficients: Sequence[float], variables: Sequence[int]) -> None: ...

    @overload
    def __init__(self, coefficients: Sequence[float], variables: Sequence[int], constant: float) -> None: ...

    @overload
    def __init__(self, arg: ExprBuilder, /) -> None: ...

    @overload
    @staticmethod
    def from_numpy(coefficients: Annotated[NDArray[numpy.float64], dict(shape=(None,), order='A', writable=False)], variables: Annotated[NDArray[numpy.int32], dict(shape=(None,), order='A', writable=False)]) -> ScalarAffineFunction: ...

    @overload
    @staticmethod
    def from_numpy(coefficients: Annotated[NDArray[numpy.float64], dict(shape=(None,), order='A', writable=False)], variables: Annotated[NDArray[numpy.int32], dict(shape=(None,), order='A', writable=False)], constant: float) -> ScalarAffineFunction: ...

    @property
    def coefficients(self) -> list[float]: ...

    @property
    def variables(self) -> list[int]: ...

    @property
    def constant(self) -> float | None: ...

    def size(self) -> int: ...

    def canonicalize(self, threshold: float = 1e-12) -> None: ...

    def reserve(self, arg: int, /) -> None: ...

    def add_term(self, arg0: VariableIndex, arg1: float, /) -> None: ...

    def add_constant(self, arg: float, /) -> None: ...

    def __neg__(self) -> ScalarAffineFunction: ...

    @overload
    def __add__(self, arg: float, /) -> ScalarAffineFunction: ...

    @overload
    def __add__(self, arg: VariableIndex, /) -> ScalarAffineFunction: ...

    @overload
    def __add__(self, arg: ScalarAffineFunction, /) -> ScalarAffineFunction: ...

    @overload
    def __add__(self, arg: ScalarQuadraticFunction, /) -> ScalarQuadraticFunction: ...

    def __radd__(self, arg: float, /) -> ScalarAffineFunction: ...

    @overload
    def __sub__(self, arg: float, /) -> ScalarAffineFunction: ...

    @overload
    def __sub__(self, arg: VariableIndex, /) -> ScalarAffineFunction: ...

    @overload
    def __sub__(self, arg: ScalarAffineFunction, /) -> ScalarAffineFunction: ...

    @overload
    def __sub__(self, arg: ScalarQuadraticFunction, /) -> ScalarQuadraticFunction: ...

    def __rsub__(self, arg: float, /) -> ScalarAffineFunction: ...

    @overload
    def __mul__(self, arg: float, /) -> ScalarAffineFunction: ...

    @overload
    def __mul__(self, arg: VariableIndex, /) -> ScalarQuadraticFunction: ...

    @overload
    def __mul__(self, arg: ScalarAffineFunction, /) -> ScalarQuadraticFunction: ...

    def __rmul__(self, arg: float, /) -> ScalarAffineFunction: ...

    def __truediv__(self, arg: float, /) -> ScalarAffineFunction: ...

class ScalarQuadraticFunction:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, coefficients: Sequence[float], var1s: Sequence[int], var2s: Sequence[int]) -> None: ...

    @overload
    def __init__(self, coefficients: Sequence[float], var1s: Sequence[int], var2s: Sequence[int], affine_part: ScalarAffineFunction) -> None: ...

    @overload
    def __init__(self, arg: ExprBuilder, /) -> None: ...

    @property
    def coefficients(self) -> list[float]: ...

    @property
    def variable_1s(self) -> list[int]: ...

    @property
    def variable_2s(self) -> list[int]: ...

    @property
    def affine_part(self) -> ScalarAffineFunction | None: ...

    def size(self) -> int: ...

    def canonicalize(self, threshold: float = 1e-12) -> None: ...

    def reserve_quadratic(self, arg: int, /) -> None: ...

    def reserve_affine(self, arg: int, /) -> None: ...

    def add_quadratic_term(self, arg0: VariableIndex, arg1: VariableIndex, arg2: float, /) -> None: ...

    def add_affine_term(self, arg0: VariableIndex, arg1: float, /) -> None: ...

    def add_constant(self, arg: float, /) -> None: ...

    def __neg__(self) -> ScalarQuadraticFunction: ...

    @overload
    def __add__(self, arg: float, /) -> ScalarQuadraticFunction: ...

    @overload
    def __add__(self, arg: VariableIndex, /) -> ScalarQuadraticFunction: ...

    @overload
    def __add__(self, arg: ScalarAffineFunction, /) -> ScalarQuadraticFunction: ...

    @overload
    def __add__(self, arg: ScalarQuadraticFunction, /) -> ScalarQuadraticFunction: ...

    def __radd__(self, arg: float, /) -> ScalarQuadraticFunction: ...

    @overload
    def __sub__(self, arg: float, /) -> ScalarQuadraticFunction: ...

    @overload
    def __sub__(self, arg: VariableIndex, /) -> ScalarQuadraticFunction: ...

    @overload
    def __sub__(self, arg: ScalarAffineFunction, /) -> ScalarQuadraticFunction: ...

    @overload
    def __sub__(self, arg: ScalarQuadraticFunction, /) -> ScalarQuadraticFunction: ...

    def __rsub__(self, arg: float, /) -> ScalarQuadraticFunction: ...

    def __mul__(self, arg: float, /) -> ScalarQuadraticFunction: ...

    def __rmul__(self, arg: float, /) -> ScalarQuadraticFunction: ...

    def __truediv__(self, arg: float, /) -> ScalarQuadraticFunction: ...

class VariablePair:
    def __init__(self, arg0: int, arg1: int, /) -> None: ...

class ExprBuilder:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, arg: float, /) -> None: ...

    @overload
    def __init__(self, arg: VariableIndex, /) -> None: ...

    @overload
    def __init__(self, arg: ScalarAffineFunction, /) -> None: ...

    @overload
    def __init__(self, arg: ScalarQuadraticFunction, /) -> None: ...

    def empty(self) -> bool: ...

    def degree(self) -> int: ...

    def reserve_quadratic(self, arg: int, /) -> None: ...

    def reserve_affine(self, arg: int, /) -> None: ...

    def clear(self) -> None: ...

    def clean_nearzero_terms(self, threshold: float = 1e-12) -> None: ...

    def add_quadratic_term(self, arg0: VariableIndex, arg1: VariableIndex, arg2: float, /) -> None: ...

    def set_quadratic_coef(self, arg0: VariableIndex, arg1: VariableIndex, arg2: float, /) -> None: ...

    def add_affine_term(self, arg0: VariableIndex, arg1: float, /) -> None: ...

    def set_affine_coef(self, arg0: VariableIndex, arg1: float, /) -> None: ...

    def __neg__(self) -> ExprBuilder: ...

    @overload
    def __iadd__(self, arg: float, /) -> ExprBuilder: ...

    @overload
    def __iadd__(self, arg: VariableIndex, /) -> ExprBuilder: ...

    @overload
    def __iadd__(self, arg: ScalarAffineFunction, /) -> ExprBuilder: ...

    @overload
    def __iadd__(self, arg: ScalarQuadraticFunction, /) -> ExprBuilder: ...

    @overload
    def __iadd__(self, arg: ExprBuilder, /) -> ExprBuilder: ...

    @overload
    def __isub__(self, arg: float, /) -> ExprBuilder: ...

    @overload
    def __isub__(self, arg: VariableIndex, /) -> ExprBuilder: ...

    @overload
    def __isub__(self, arg: ScalarAffineFunction, /) -> ExprBuilder: ...

    @overload
    def __isub__(self, arg: ScalarQuadraticFunction, /) -> ExprBuilder: ...

    @overload
    def __isub__(self, arg: ExprBuilder, /) -> ExprBuilder: ...

    @overload
    def __imul__(self, arg: float, /) -> ExprBuilder: ...

    @overload
    def __imul__(self, arg: VariableIndex, /) -> ExprBuilder: ...

    @overload
    def __imul__(self, arg: ScalarAffineFunction, /) -> ExprBuilder: ...

    @overload
    def __imul__(self, arg: ScalarQuadraticFunction, /) -> ExprBuilder: ...

    @overload
    def __imul__(self, arg: ExprBuilder, /) -> ExprBuilder: ...

    def __itruediv__(self, arg: float, /) -> ExprBuilder: ...

    @overload
    def __add__(self, arg: float, /) -> ExprBuilder: ...

    @overload
    def __add__(self, arg: VariableIndex, /) -> ExprBuilder: ...

    @overload
    def __add__(self, arg: ScalarAffineFunction, /) -> ExprBuilder: ...

    @overload
    def __add__(self, arg: ScalarQuadraticFunction, /) -> ExprBuilder: ...

    @overload
    def __add__(self, arg: ExprBuilder, /) -> ExprBuilder: ...

    @overload
    def __radd__(self, arg: float, /) -> ExprBuilder: ...

    @overload
    def __radd__(self, arg: VariableIndex, /) -> ExprBuilder: ...

    @overload
    def __radd__(self, arg: ScalarAffineFunction, /) -> ExprBuilder: ...

    @overload
    def __radd__(self, arg: ScalarQuadraticFunction, /) -> ExprBuilder: ...

    @overload
    def __sub__(self, arg: float, /) -> ExprBuilder: ...

    @overload
    def __sub__(self, arg: VariableIndex, /) -> ExprBuilder: ...

    @overload
    def __sub__(self, arg: ScalarAffineFunction, /) -> ExprBuilder: ...

    @overload
    def __sub__(self, arg: ScalarQuadraticFunction, /) -> ExprBuilder: ...

    @overload
    def __sub__(self, arg: ExprBuilder, /) -> ExprBuilder: ...

    @overload
    def __rsub__(self, arg: float, /) -> ExprBuilder: ...

    @overload
    def __rsub__(self, arg: VariableIndex, /) -> ExprBuilder: ...

    @overload
    def __rsub__(self, arg: ScalarAffineFunction, /) -> ExprBuilder: ...

    @overload
    def __rsub__(self, arg: ScalarQuadraticFunction, /) -> ExprBuilder: ...

    @overload
    def __mul__(self, arg: float, /) -> ExprBuilder: ...

    @overload
    def __mul__(self, arg: VariableIndex, /) -> ExprBuilder: ...

    @overload
    def __mul__(self, arg: ScalarAffineFunction, /) -> ExprBuilder: ...

    @overload
    def __mul__(self, arg: ScalarQuadraticFunction, /) -> ExprBuilder: ...

    @overload
    def __mul__(self, arg: ExprBuilder, /) -> ExprBuilder: ...

    @overload
    def __rmul__(self, arg: float, /) -> ExprBuilder: ...

    @overload
    def __rmul__(self, arg: VariableIndex, /) -> ExprBuilder: ...

    @overload
    def __rmul__(self, arg: ScalarAffineFunction, /) -> ExprBuilder: ...

    @overload
    def __rmul__(self, arg: ScalarQuadraticFunction, /) -> ExprBuilder: ...

    def __truediv__(self, arg: float, /) -> ExprBuilder: ...

class IntMonotoneIndexer:
    def __init__(self) -> None: ...

    def add_index(self) -> int: ...

    def get_index(self, arg: int, /) -> int: ...

    def delete_index(self, arg: int, /) -> None: ...
