# coding: utf-8

"""
    FINBOURNE ConfigurationService API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictBool, StrictStr, constr, validator 

class CreateConfigurationItem(BaseModel):
    """
    The information required to create a configuration item  # noqa: E501
    """
    key:  StrictStr = Field(...,alias="key", description="The key of the new configuration item") 
    value:  StrictStr = Field(...,alias="value", description="The value of the new configuration item              The maximum size for secrets is 4KB and for text values is 2MB") 
    value_type:  Optional[StrictStr] = Field(None,alias="valueType", description="The type (text, number, boolean, textCollection, numberCollection) of the new configuration item's value. The validation for each type is as follows: - text: any value - number: double (e.g. \"5.5\") - boolean: true/false - textCollection: comma separated list (e.g. \"a,b,c\") - numberCollection: comma separated list of doubles (e.g. \"1,2,3\")") 
    is_secret: StrictBool = Field(..., alias="isSecret", description="Defines whether or not the value is a secret")
    description:  Optional[StrictStr] = Field(None,alias="description", description="The description of the new configuration item") 
    block_reveal: Optional[StrictBool] = Field(None, alias="blockReveal", description="A property to indicate if revealing the value is blocked.")
    __properties = ["key", "value", "valueType", "isSecret", "description", "blockReveal"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateConfigurationItem:
        """Create an instance of CreateConfigurationItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if value_type (nullable) is None
        # and __fields_set__ contains the field
        if self.value_type is None and "value_type" in self.__fields_set__:
            _dict['valueType'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateConfigurationItem:
        """Create an instance of CreateConfigurationItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateConfigurationItem.parse_obj(obj)

        _obj = CreateConfigurationItem.parse_obj({
            "key": obj.get("key"),
            "value": obj.get("value"),
            "value_type": obj.get("valueType"),
            "is_secret": obj.get("isSecret"),
            "description": obj.get("description"),
            "block_reveal": obj.get("blockReveal")
        })
        return _obj
