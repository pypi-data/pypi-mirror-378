# coding: utf-8

"""
    FINBOURNE ConfigurationService API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, conlist, constr 
from lusid_configuration.models.link import Link

class PersonalAccessToken(BaseModel):
    """
    Representation of a Personal Access Token under a Configuration Item format.  # noqa: E501
    """
    value:  StrictStr = Field(...,alias="value", description="Value of the Personal Access Token.") 
    type:  StrictStr = Field(...,alias="type", description="The type of the Personal Access Token.") 
    description:  StrictStr = Field(...,alias="description", description="The description of the Personal Access Token.") 
    ref:  StrictStr = Field(...,alias="ref", description="The reference to the Personal Access Token") 
    links: Optional[conlist(Link)] = None
    __properties = ["value", "type", "description", "ref", "links"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PersonalAccessToken:
        """Create an instance of PersonalAccessToken from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "value",
                            "type",
                            "description",
                            "ref",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # set to None if links (nullable) is None
        # and __fields_set__ contains the field
        if self.links is None and "links" in self.__fields_set__:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PersonalAccessToken:
        """Create an instance of PersonalAccessToken from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PersonalAccessToken.parse_obj(obj)

        _obj = PersonalAccessToken.parse_obj({
            "value": obj.get("value"),
            "type": obj.get("type"),
            "description": obj.get("description"),
            "ref": obj.get("ref"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None
        })
        return _obj
