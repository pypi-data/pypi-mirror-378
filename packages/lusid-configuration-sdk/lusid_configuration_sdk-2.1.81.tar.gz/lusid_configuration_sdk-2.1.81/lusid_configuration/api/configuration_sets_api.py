# coding: utf-8

"""
    FINBOURNE ConfigurationService API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic.v1 import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from pydantic.v1 import Field, StrictBool, StrictStr, constr, validator

from typing import Optional

from lusid_configuration.models.configuration_item import ConfigurationItem
from lusid_configuration.models.configuration_set import ConfigurationSet
from lusid_configuration.models.create_configuration_item import CreateConfigurationItem
from lusid_configuration.models.create_configuration_set import CreateConfigurationSet
from lusid_configuration.models.personal_access_token import PersonalAccessToken
from lusid_configuration.models.resource_list_of_configuration_item import ResourceListOfConfigurationItem
from lusid_configuration.models.resource_list_of_configuration_set import ResourceListOfConfigurationSet
from lusid_configuration.models.resource_list_of_configuration_set_summary import ResourceListOfConfigurationSetSummary
from lusid_configuration.models.update_configuration_item import UpdateConfigurationItem
from lusid_configuration.models.update_configuration_set import UpdateConfigurationSet

from lusid_configuration.api_client import ApiClient
from lusid_configuration.api_response import ApiResponse
from lusid_configuration.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)
from lusid_configuration.extensions.configuration_options import ConfigurationOptions

# ensure templated type usages are imported
from pydantic.v1 import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated

class ConfigurationSetsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @overload
    async def add_configuration_to_set(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], create_configuration_item : Annotated[CreateConfigurationItem, Field(..., description="The data to create a configuration item")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ConfigurationSet:  # noqa: E501
        ...

    @overload
    def add_configuration_to_set(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], create_configuration_item : Annotated[CreateConfigurationItem, Field(..., description="The data to create a configuration item")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=True, **kwargs) -> ConfigurationSet:  # noqa: E501
        ...

    @validate_arguments
    def add_configuration_to_set(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], create_configuration_item : Annotated[CreateConfigurationItem, Field(..., description="The data to create a configuration item")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ConfigurationSet, Awaitable[ConfigurationSet]]:  # noqa: E501
        """[EARLY ACCESS] AddConfigurationToSet: Add a configuration item to an existing set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_configuration_to_set(type, scope, code, create_configuration_item, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared (required)
        :type type: str
        :param scope: The scope that identifies a configuration set (required)
        :type scope: str
        :param code: The code that identifies a configuration set (required)
        :type code: str
        :param create_configuration_item: The data to create a configuration item (required)
        :type create_configuration_item: CreateConfigurationItem
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ConfigurationSet
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the add_configuration_to_set_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.add_configuration_to_set_with_http_info(type, scope, code, create_configuration_item, user_id, **kwargs)  # noqa: E501

    @validate_arguments
    def add_configuration_to_set_with_http_info(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], create_configuration_item : Annotated[CreateConfigurationItem, Field(..., description="The data to create a configuration item")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """[EARLY ACCESS] AddConfigurationToSet: Add a configuration item to an existing set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_configuration_to_set_with_http_info(type, scope, code, create_configuration_item, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared (required)
        :type type: str
        :param scope: The scope that identifies a configuration set (required)
        :type scope: str
        :param code: The code that identifies a configuration set (required)
        :type code: str
        :param create_configuration_item: The data to create a configuration item (required)
        :type create_configuration_item: CreateConfigurationItem
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ConfigurationSet, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'type',
            'scope',
            'code',
            'create_configuration_item',
            'user_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_configuration_to_set" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['type']:
            _path_params['type'] = _params['type']

        if _params['scope']:
            _path_params['scope'] = _params['scope']

        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('userId', _params['user_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_configuration_item'] is not None:
            _body_params = _params['create_configuration_item']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '201': "ConfigurationSet",
            '400': "LusidValidationProblemDetails",
            '404': "str",
        }

        return self.api_client.call_api(
            '/api/sets/{type}/{scope}/{code}/items', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def check_access_token_exists(self, **kwargs) -> None:  # noqa: E501
        ...

    @overload
    def check_access_token_exists(self, async_req: Optional[bool]=True, **kwargs) -> None:  # noqa: E501
        ...

    @validate_arguments
    def check_access_token_exists(self, async_req: Optional[bool]=None, **kwargs) -> Union[None, Awaitable[None]]:  # noqa: E501
        """[DEPRECATED] CheckAccessTokenExists: Check the Personal Access Token exists for the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_access_token_exists(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the check_access_token_exists_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.check_access_token_exists_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def check_access_token_exists_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """[DEPRECATED] CheckAccessTokenExists: Check the Personal Access Token exists for the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_access_token_exists_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_access_token_exists" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/sets/personal/me', 'HEAD',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def create_configuration_set(self, create_configuration_set : Annotated[CreateConfigurationSet, Field(..., description="The data to create a configuration set")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ConfigurationSet:  # noqa: E501
        ...

    @overload
    def create_configuration_set(self, create_configuration_set : Annotated[CreateConfigurationSet, Field(..., description="The data to create a configuration set")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=True, **kwargs) -> ConfigurationSet:  # noqa: E501
        ...

    @validate_arguments
    def create_configuration_set(self, create_configuration_set : Annotated[CreateConfigurationSet, Field(..., description="The data to create a configuration set")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ConfigurationSet, Awaitable[ConfigurationSet]]:  # noqa: E501
        """[EARLY ACCESS] CreateConfigurationSet: Create a configuration set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_configuration_set(create_configuration_set, user_id, async_req=True)
        >>> result = thread.get()

        :param create_configuration_set: The data to create a configuration set (required)
        :type create_configuration_set: CreateConfigurationSet
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ConfigurationSet
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_configuration_set_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.create_configuration_set_with_http_info(create_configuration_set, user_id, **kwargs)  # noqa: E501

    @validate_arguments
    def create_configuration_set_with_http_info(self, create_configuration_set : Annotated[CreateConfigurationSet, Field(..., description="The data to create a configuration set")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """[EARLY ACCESS] CreateConfigurationSet: Create a configuration set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_configuration_set_with_http_info(create_configuration_set, user_id, async_req=True)
        >>> result = thread.get()

        :param create_configuration_set: The data to create a configuration set (required)
        :type create_configuration_set: CreateConfigurationSet
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ConfigurationSet, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_configuration_set',
            'user_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_configuration_set" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('userId', _params['user_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_configuration_set'] is not None:
            _body_params = _params['create_configuration_set']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '201': "ConfigurationSet",
            '400': "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/sets', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def delete_access_token(self, **kwargs) -> None:  # noqa: E501
        ...

    @overload
    def delete_access_token(self, async_req: Optional[bool]=True, **kwargs) -> None:  # noqa: E501
        ...

    @validate_arguments
    def delete_access_token(self, async_req: Optional[bool]=None, **kwargs) -> Union[None, Awaitable[None]]:  # noqa: E501
        """[DEPRECATED] DeleteAccessToken: Delete any stored Personal Access Token for the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_access_token(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_access_token_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.delete_access_token_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def delete_access_token_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """[DEPRECATED] DeleteAccessToken: Delete any stored Personal Access Token for the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_access_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_access_token" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/sets/personal/me', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def delete_configuration_item(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a configuration item")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> None:  # noqa: E501
        ...

    @overload
    def delete_configuration_item(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a configuration item")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=True, **kwargs) -> None:  # noqa: E501
        ...

    @validate_arguments
    def delete_configuration_item(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a configuration item")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[None, Awaitable[None]]:  # noqa: E501
        """[EARLY ACCESS] DeleteConfigurationItem: Remove the specified configuration item from the specified configuration set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_configuration_item(type, scope, code, key, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared (required)
        :type type: str
        :param scope: The scope that identifies a configuration set (required)
        :type scope: str
        :param code: The code that identifies a configuration set (required)
        :type code: str
        :param key: The key that identifies a configuration item (required)
        :type key: str
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_configuration_item_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.delete_configuration_item_with_http_info(type, scope, code, key, user_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_configuration_item_with_http_info(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a configuration item")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """[EARLY ACCESS] DeleteConfigurationItem: Remove the specified configuration item from the specified configuration set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_configuration_item_with_http_info(type, scope, code, key, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared (required)
        :type type: str
        :param scope: The scope that identifies a configuration set (required)
        :type scope: str
        :param code: The code that identifies a configuration set (required)
        :type code: str
        :param key: The key that identifies a configuration item (required)
        :type key: str
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'type',
            'scope',
            'code',
            'key',
            'user_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_configuration_item" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['type']:
            _path_params['type'] = _params['type']

        if _params['scope']:
            _path_params['scope'] = _params['scope']

        if _params['code']:
            _path_params['code'] = _params['code']

        if _params['key']:
            _path_params['key'] = _params['key']


        # process the query parameters
        _query_params = []
        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('userId', _params['user_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/sets/{type}/{scope}/{code}/items/{key}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def delete_configuration_set(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> None:  # noqa: E501
        ...

    @overload
    def delete_configuration_set(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=True, **kwargs) -> None:  # noqa: E501
        ...

    @validate_arguments
    def delete_configuration_set(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[None, Awaitable[None]]:  # noqa: E501
        """[EARLY ACCESS] DeleteConfigurationSet: Deletes a configuration set along with all their configuration items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_configuration_set(type, scope, code, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared (required)
        :type type: str
        :param scope: The scope that identifies a configuration set (required)
        :type scope: str
        :param code: The code that identifies a configuration set (required)
        :type code: str
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_configuration_set_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.delete_configuration_set_with_http_info(type, scope, code, user_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_configuration_set_with_http_info(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """[EARLY ACCESS] DeleteConfigurationSet: Deletes a configuration set along with all their configuration items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_configuration_set_with_http_info(type, scope, code, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared (required)
        :type type: str
        :param scope: The scope that identifies a configuration set (required)
        :type scope: str
        :param code: The code that identifies a configuration set (required)
        :type code: str
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'type',
            'scope',
            'code',
            'user_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_configuration_set" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['type']:
            _path_params['type'] = _params['type']

        if _params['scope']:
            _path_params['scope'] = _params['scope']

        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('userId', _params['user_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/sets/{type}/{scope}/{code}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def generate_access_token(self, action : Annotated[Optional[StrictStr], Field( description="action=regenerate = Even if an existing parameter exists, forcibly regenerate a new one (deleting the old) action=ensure = If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one. action=default = If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour.")] = None, **kwargs) -> PersonalAccessToken:  # noqa: E501
        ...

    @overload
    def generate_access_token(self, action : Annotated[Optional[StrictStr], Field( description="action=regenerate = Even if an existing parameter exists, forcibly regenerate a new one (deleting the old) action=ensure = If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one. action=default = If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour.")] = None, async_req: Optional[bool]=True, **kwargs) -> PersonalAccessToken:  # noqa: E501
        ...

    @validate_arguments
    def generate_access_token(self, action : Annotated[Optional[StrictStr], Field( description="action=regenerate = Even if an existing parameter exists, forcibly regenerate a new one (deleting the old) action=ensure = If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one. action=default = If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[PersonalAccessToken, Awaitable[PersonalAccessToken]]:  # noqa: E501
        """[DEPRECATED] GenerateAccessToken: Generate a Personal Access Token for the current user and stores it in the me token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_access_token(action, async_req=True)
        >>> result = thread.get()

        :param action: action=regenerate = Even if an existing parameter exists, forcibly regenerate a new one (deleting the old) action=ensure = If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one. action=default = If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour.
        :type action: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PersonalAccessToken
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the generate_access_token_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.generate_access_token_with_http_info(action, **kwargs)  # noqa: E501

    @validate_arguments
    def generate_access_token_with_http_info(self, action : Annotated[Optional[StrictStr], Field( description="action=regenerate = Even if an existing parameter exists, forcibly regenerate a new one (deleting the old) action=ensure = If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one. action=default = If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """[DEPRECATED] GenerateAccessToken: Generate a Personal Access Token for the current user and stores it in the me token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_access_token_with_http_info(action, async_req=True)
        >>> result = thread.get()

        :param action: action=regenerate = Even if an existing parameter exists, forcibly regenerate a new one (deleting the old) action=ensure = If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one. action=default = If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour.
        :type action: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PersonalAccessToken, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'action'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_access_token" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('action') is not None:  # noqa: E501
            _query_params.append(('action', _params['action']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "PersonalAccessToken",
            '400': "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/sets/personal/me', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def get_configuration_item(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a configuration item")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets. This is only available when the userId query setting has not been specified.")] = None, user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ConfigurationItem:  # noqa: E501
        ...

    @overload
    def get_configuration_item(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a configuration item")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets. This is only available when the userId query setting has not been specified.")] = None, user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=True, **kwargs) -> ConfigurationItem:  # noqa: E501
        ...

    @validate_arguments
    def get_configuration_item(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a configuration item")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets. This is only available when the userId query setting has not been specified.")] = None, user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ConfigurationItem, Awaitable[ConfigurationItem]]:  # noqa: E501
        """GetConfigurationItem: Get the specific configuration item within an existing set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_configuration_item(type, scope, code, key, reveal, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared (required)
        :type type: str
        :param scope: The scope that identifies a configuration set (required)
        :type scope: str
        :param code: The code that identifies a configuration set (required)
        :type code: str
        :param key: The key that identifies a configuration item (required)
        :type key: str
        :param reveal: Whether to reveal the secrets. This is only available when the userId query setting has not been specified.
        :type reveal: bool
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ConfigurationItem
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_configuration_item_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_configuration_item_with_http_info(type, scope, code, key, reveal, user_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_configuration_item_with_http_info(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a configuration item")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets. This is only available when the userId query setting has not been specified.")] = None, user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """GetConfigurationItem: Get the specific configuration item within an existing set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_configuration_item_with_http_info(type, scope, code, key, reveal, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared (required)
        :type type: str
        :param scope: The scope that identifies a configuration set (required)
        :type scope: str
        :param code: The code that identifies a configuration set (required)
        :type code: str
        :param key: The key that identifies a configuration item (required)
        :type key: str
        :param reveal: Whether to reveal the secrets. This is only available when the userId query setting has not been specified.
        :type reveal: bool
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ConfigurationItem, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'type',
            'scope',
            'code',
            'key',
            'reveal',
            'user_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_configuration_item" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['type']:
            _path_params['type'] = _params['type']

        if _params['scope']:
            _path_params['scope'] = _params['scope']

        if _params['code']:
            _path_params['code'] = _params['code']

        if _params['key']:
            _path_params['key'] = _params['key']


        # process the query parameters
        _query_params = []
        if _params.get('reveal') is not None:  # noqa: E501
            _query_params.append(('reveal', _params['reveal']))

        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('userId', _params['user_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ConfigurationItem",
            '400': "LusidValidationProblemDetails",
            '404': "str",
        }

        return self.api_client.call_api(
            '/api/sets/{type}/{scope}/{code}/items/{key}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def get_configuration_set(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets. This is only available when the userId query setting has not been specified.")] = None, user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ConfigurationSet:  # noqa: E501
        ...

    @overload
    def get_configuration_set(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets. This is only available when the userId query setting has not been specified.")] = None, user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=True, **kwargs) -> ConfigurationSet:  # noqa: E501
        ...

    @validate_arguments
    def get_configuration_set(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets. This is only available when the userId query setting has not been specified.")] = None, user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ConfigurationSet, Awaitable[ConfigurationSet]]:  # noqa: E501
        """GetConfigurationSet: Get a configuration set, including all the associated metadata. By default secrets will not be revealed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_configuration_set(type, scope, code, reveal, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared (required)
        :type type: str
        :param scope: The scope that identifies a configuration set (required)
        :type scope: str
        :param code: The code that identifies a configuration set (required)
        :type code: str
        :param reveal: Whether to reveal the secrets. This is only available when the userId query setting has not been specified.
        :type reveal: bool
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ConfigurationSet
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_configuration_set_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_configuration_set_with_http_info(type, scope, code, reveal, user_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_configuration_set_with_http_info(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets. This is only available when the userId query setting has not been specified.")] = None, user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """GetConfigurationSet: Get a configuration set, including all the associated metadata. By default secrets will not be revealed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_configuration_set_with_http_info(type, scope, code, reveal, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared (required)
        :type type: str
        :param scope: The scope that identifies a configuration set (required)
        :type scope: str
        :param code: The code that identifies a configuration set (required)
        :type code: str
        :param reveal: Whether to reveal the secrets. This is only available when the userId query setting has not been specified.
        :type reveal: bool
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ConfigurationSet, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'type',
            'scope',
            'code',
            'reveal',
            'user_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_configuration_set" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['type']:
            _path_params['type'] = _params['type']

        if _params['scope']:
            _path_params['scope'] = _params['scope']

        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        if _params.get('reveal') is not None:  # noqa: E501
            _query_params.append(('reveal', _params['reveal']))

        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('userId', _params['user_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ConfigurationSet",
            '400': "LusidValidationProblemDetails",
            '404': "str",
        }

        return self.api_client.call_api(
            '/api/sets/{type}/{scope}/{code}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def get_system_configuration_items(self, code : Annotated[StrictStr, Field(..., description="The code that identifies a system configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a system configuration item")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets")] = None, **kwargs) -> ResourceListOfConfigurationItem:  # noqa: E501
        ...

    @overload
    def get_system_configuration_items(self, code : Annotated[StrictStr, Field(..., description="The code that identifies a system configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a system configuration item")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets")] = None, async_req: Optional[bool]=True, **kwargs) -> ResourceListOfConfigurationItem:  # noqa: E501
        ...

    @validate_arguments
    def get_system_configuration_items(self, code : Annotated[StrictStr, Field(..., description="The code that identifies a system configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a system configuration item")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ResourceListOfConfigurationItem, Awaitable[ResourceListOfConfigurationItem]]:  # noqa: E501
        """[EARLY ACCESS] GetSystemConfigurationItems: Get the specific system configuration items within a system set All users have access to this endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_system_configuration_items(code, key, reveal, async_req=True)
        >>> result = thread.get()

        :param code: The code that identifies a system configuration set (required)
        :type code: str
        :param key: The key that identifies a system configuration item (required)
        :type key: str
        :param reveal: Whether to reveal the secrets
        :type reveal: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResourceListOfConfigurationItem
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_system_configuration_items_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_system_configuration_items_with_http_info(code, key, reveal, **kwargs)  # noqa: E501

    @validate_arguments
    def get_system_configuration_items_with_http_info(self, code : Annotated[StrictStr, Field(..., description="The code that identifies a system configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a system configuration item")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """[EARLY ACCESS] GetSystemConfigurationItems: Get the specific system configuration items within a system set All users have access to this endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_system_configuration_items_with_http_info(code, key, reveal, async_req=True)
        >>> result = thread.get()

        :param code: The code that identifies a system configuration set (required)
        :type code: str
        :param key: The key that identifies a system configuration item (required)
        :type key: str
        :param reveal: Whether to reveal the secrets
        :type reveal: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResourceListOfConfigurationItem, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'code',
            'key',
            'reveal'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_configuration_items" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['code']:
            _path_params['code'] = _params['code']

        if _params['key']:
            _path_params['key'] = _params['key']


        # process the query parameters
        _query_params = []
        if _params.get('reveal') is not None:  # noqa: E501
            _query_params.append(('reveal', _params['reveal']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ResourceListOfConfigurationItem",
            '400': "LusidValidationProblemDetails",
            '404': "str",
        }

        return self.api_client.call_api(
            '/api/sets/system/{code}/items/{key}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def get_system_configuration_sets(self, code : Annotated[StrictStr, Field(..., description="The code that identifies a system configuration set")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets")] = None, **kwargs) -> ResourceListOfConfigurationSet:  # noqa: E501
        ...

    @overload
    def get_system_configuration_sets(self, code : Annotated[StrictStr, Field(..., description="The code that identifies a system configuration set")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets")] = None, async_req: Optional[bool]=True, **kwargs) -> ResourceListOfConfigurationSet:  # noqa: E501
        ...

    @validate_arguments
    def get_system_configuration_sets(self, code : Annotated[StrictStr, Field(..., description="The code that identifies a system configuration set")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ResourceListOfConfigurationSet, Awaitable[ResourceListOfConfigurationSet]]:  # noqa: E501
        """GetSystemConfigurationSets: Get the specified system configuration sets, including all their associated metadata. By default secrets will not be revealed All users have access to this endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_system_configuration_sets(code, reveal, async_req=True)
        >>> result = thread.get()

        :param code: The code that identifies a system configuration set (required)
        :type code: str
        :param reveal: Whether to reveal the secrets
        :type reveal: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResourceListOfConfigurationSet
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_system_configuration_sets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_system_configuration_sets_with_http_info(code, reveal, **kwargs)  # noqa: E501

    @validate_arguments
    def get_system_configuration_sets_with_http_info(self, code : Annotated[StrictStr, Field(..., description="The code that identifies a system configuration set")], reveal : Annotated[Optional[StrictBool], Field(description="Whether to reveal the secrets")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """GetSystemConfigurationSets: Get the specified system configuration sets, including all their associated metadata. By default secrets will not be revealed All users have access to this endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_system_configuration_sets_with_http_info(code, reveal, async_req=True)
        >>> result = thread.get()

        :param code: The code that identifies a system configuration set (required)
        :type code: str
        :param reveal: Whether to reveal the secrets
        :type reveal: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResourceListOfConfigurationSet, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'code',
            'reveal'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_configuration_sets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        if _params.get('reveal') is not None:  # noqa: E501
            _query_params.append(('reveal', _params['reveal']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ResourceListOfConfigurationSet",
            '400': "LusidValidationProblemDetails",
            '404': "str",
        }

        return self.api_client.call_api(
            '/api/sets/system/{code}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def list_configuration_sets(self, type : Annotated[Optional[StrictStr], Field( description="Whether the configuration set is Personal or Shared")] = None, user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ResourceListOfConfigurationSetSummary:  # noqa: E501
        ...

    @overload
    def list_configuration_sets(self, type : Annotated[Optional[StrictStr], Field( description="Whether the configuration set is Personal or Shared")] = None, user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=True, **kwargs) -> ResourceListOfConfigurationSetSummary:  # noqa: E501
        ...

    @validate_arguments
    def list_configuration_sets(self, type : Annotated[Optional[StrictStr], Field( description="Whether the configuration set is Personal or Shared")] = None, user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ResourceListOfConfigurationSetSummary, Awaitable[ResourceListOfConfigurationSetSummary]]:  # noqa: E501
        """[EARLY ACCESS] ListConfigurationSets: List all configuration sets summaries (I.e. list of scope/code combinations available)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_configuration_sets(type, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared
        :type type: str
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ResourceListOfConfigurationSetSummary
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_configuration_sets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.list_configuration_sets_with_http_info(type, user_id, **kwargs)  # noqa: E501

    @validate_arguments
    def list_configuration_sets_with_http_info(self, type : Annotated[Optional[StrictStr], Field( description="Whether the configuration set is Personal or Shared")] = None, user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """[EARLY ACCESS] ListConfigurationSets: List all configuration sets summaries (I.e. list of scope/code combinations available)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_configuration_sets_with_http_info(type, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared
        :type type: str
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ResourceListOfConfigurationSetSummary, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'type',
            'user_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_configuration_sets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))

        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('userId', _params['user_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ResourceListOfConfigurationSetSummary",
            '400': "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/sets', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def update_configuration_item(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a configuration item")], update_configuration_item : Annotated[UpdateConfigurationItem, Field(..., description="The data to update a configuration item")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ConfigurationItem:  # noqa: E501
        ...

    @overload
    def update_configuration_item(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a configuration item")], update_configuration_item : Annotated[UpdateConfigurationItem, Field(..., description="The data to update a configuration item")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=True, **kwargs) -> ConfigurationItem:  # noqa: E501
        ...

    @validate_arguments
    def update_configuration_item(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a configuration item")], update_configuration_item : Annotated[UpdateConfigurationItem, Field(..., description="The data to update a configuration item")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ConfigurationItem, Awaitable[ConfigurationItem]]:  # noqa: E501
        """[EARLY ACCESS] UpdateConfigurationItem: Update a configuration item's value and/or description  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_configuration_item(type, scope, code, key, update_configuration_item, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared (required)
        :type type: str
        :param scope: The scope that identifies a configuration set (required)
        :type scope: str
        :param code: The code that identifies a configuration set (required)
        :type code: str
        :param key: The key that identifies a configuration item (required)
        :type key: str
        :param update_configuration_item: The data to update a configuration item (required)
        :type update_configuration_item: UpdateConfigurationItem
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ConfigurationItem
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_configuration_item_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.update_configuration_item_with_http_info(type, scope, code, key, update_configuration_item, user_id, **kwargs)  # noqa: E501

    @validate_arguments
    def update_configuration_item_with_http_info(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], key : Annotated[StrictStr, Field(..., description="The key that identifies a configuration item")], update_configuration_item : Annotated[UpdateConfigurationItem, Field(..., description="The data to update a configuration item")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """[EARLY ACCESS] UpdateConfigurationItem: Update a configuration item's value and/or description  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_configuration_item_with_http_info(type, scope, code, key, update_configuration_item, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared (required)
        :type type: str
        :param scope: The scope that identifies a configuration set (required)
        :type scope: str
        :param code: The code that identifies a configuration set (required)
        :type code: str
        :param key: The key that identifies a configuration item (required)
        :type key: str
        :param update_configuration_item: The data to update a configuration item (required)
        :type update_configuration_item: UpdateConfigurationItem
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ConfigurationItem, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'type',
            'scope',
            'code',
            'key',
            'update_configuration_item',
            'user_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_configuration_item" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['type']:
            _path_params['type'] = _params['type']

        if _params['scope']:
            _path_params['scope'] = _params['scope']

        if _params['code']:
            _path_params['code'] = _params['code']

        if _params['key']:
            _path_params['key'] = _params['key']


        # process the query parameters
        _query_params = []
        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('userId', _params['user_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_configuration_item'] is not None:
            _body_params = _params['update_configuration_item']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ConfigurationItem",
            '400': "LusidValidationProblemDetails",
            '404': "str",
        }

        return self.api_client.call_api(
            '/api/sets/{type}/{scope}/{code}/items/{key}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def update_configuration_set(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], update_configuration_set : Annotated[UpdateConfigurationSet, Field(..., description="The data to update a configuration set")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ConfigurationSet:  # noqa: E501
        ...

    @overload
    def update_configuration_set(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], update_configuration_set : Annotated[UpdateConfigurationSet, Field(..., description="The data to update a configuration set")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=True, **kwargs) -> ConfigurationSet:  # noqa: E501
        ...

    @validate_arguments
    def update_configuration_set(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], update_configuration_set : Annotated[UpdateConfigurationSet, Field(..., description="The data to update a configuration set")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ConfigurationSet, Awaitable[ConfigurationSet]]:  # noqa: E501
        """[EARLY ACCESS] UpdateConfigurationSet: Update the description of a configuration set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_configuration_set(type, scope, code, update_configuration_set, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared (required)
        :type type: str
        :param scope: The scope that identifies a configuration set (required)
        :type scope: str
        :param code: The code that identifies a configuration set (required)
        :type code: str
        :param update_configuration_set: The data to update a configuration set (required)
        :type update_configuration_set: UpdateConfigurationSet
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ConfigurationSet
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_configuration_set_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.update_configuration_set_with_http_info(type, scope, code, update_configuration_set, user_id, **kwargs)  # noqa: E501

    @validate_arguments
    def update_configuration_set_with_http_info(self, type : Annotated[StrictStr, Field(..., description="Whether the configuration set is Personal or Shared")], scope : Annotated[StrictStr, Field(..., description="The scope that identifies a configuration set")], code : Annotated[StrictStr, Field(..., description="The code that identifies a configuration set")], update_configuration_set : Annotated[UpdateConfigurationSet, Field(..., description="The data to update a configuration set")], user_id : Annotated[Optional[StrictStr], Field( description="Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """[EARLY ACCESS] UpdateConfigurationSet: Update the description of a configuration set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_configuration_set_with_http_info(type, scope, code, update_configuration_set, user_id, async_req=True)
        >>> result = thread.get()

        :param type: Whether the configuration set is Personal or Shared (required)
        :type type: str
        :param scope: The scope that identifies a configuration set (required)
        :type scope: str
        :param code: The code that identifies a configuration set (required)
        :type code: str
        :param update_configuration_set: The data to update a configuration set (required)
        :type update_configuration_set: UpdateConfigurationSet
        :param user_id: Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user.
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ConfigurationSet, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'type',
            'scope',
            'code',
            'update_configuration_set',
            'user_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_configuration_set" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['type']:
            _path_params['type'] = _params['type']

        if _params['scope']:
            _path_params['scope'] = _params['scope']

        if _params['code']:
            _path_params['code'] = _params['code']


        # process the query parameters
        _query_params = []
        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('userId', _params['user_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_configuration_set'] is not None:
            _body_params = _params['update_configuration_set']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ConfigurationSet",
            '400': "LusidValidationProblemDetails",
            '404': "str",
        }

        return self.api_client.call_api(
            '/api/sets/{type}/{scope}/{code}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
