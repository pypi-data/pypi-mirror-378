# coding: utf-8

"""
    FINBOURNE ConfigurationService API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictBool, constr, validator 

class UpdateConfigurationItem(BaseModel):
    """
    The information required to update a configuration item  # noqa: E501
    """
    value:  StrictStr = Field(...,alias="value", description="The new value of the configuration item") 
    description:  Optional[StrictStr] = Field(None,alias="description", description="The new description of the configuration item") 
    block_reveal: Optional[StrictBool] = Field(None, alias="blockReveal", description="The requested new state of BlockReveal")
    __properties = ["value", "description", "blockReveal"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateConfigurationItem:
        """Create an instance of UpdateConfigurationItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateConfigurationItem:
        """Create an instance of UpdateConfigurationItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateConfigurationItem.parse_obj(obj)

        _obj = UpdateConfigurationItem.parse_obj({
            "value": obj.get("value"),
            "description": obj.get("description"),
            "block_reveal": obj.get("blockReveal")
        })
        return _obj
