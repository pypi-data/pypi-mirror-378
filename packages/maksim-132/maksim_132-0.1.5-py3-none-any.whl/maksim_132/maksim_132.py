import requests
import json
import logging
from typing import Optional, Dict, Any

class Maksim132:
    def __init__(self):
        self.bot_token = None
        self.chat_id = None
        self.base_url = None
        
    def located(self, bot_token: str, chat_id: Optional[str] = None) -> Dict[str, Any]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram –±–æ—Ç–∞
        
        Args:
            bot_token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            chat_id (str, optional): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ID –∏–∑ getUpdates)
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
        """
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
        location_data = self._get_location()
        
        if not location_data:
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"}
        
        # –ï—Å–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if not chat_id:
            chat_id = self._get_chat_id()
            
        if not chat_id:
            return {"error": "–ù–µ —É–∫–∞–∑–∞–Ω chat_id –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"}
        
        self.chat_id = chat_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
        success = self._send_location_to_telegram(location_data)
        
        if success:
            location_data["status"] = "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram"
        else:
            location_data["status"] = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"
            
        return location_data
    
    def _get_location(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ IP API"""
        try:
            response = requests.get('http://ip-api.com/json/', timeout=10)
            response.raise_for_status()
            data = response.json()
            
            if data['status'] == 'success':
                return {
                    'ip': data.get('query', ''),
                    'country': data.get('country', ''),
                    'region': data.get('regionName', ''),
                    'city': data.get('city', ''),
                    'zip': data.get('zip', ''),
                    'lat': data.get('lat', ''),
                    'lon': data.get('lon', ''),
                    'isp': data.get('isp', ''),
                    'org': data.get('org', ''),
                    'as': data.get('as', '')
                }
            else:
                return None
                
        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")
            return None
    
    def _get_chat_id(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç chat_id –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É"""
        try:
            response = requests.get(f"{self.base_url}/getUpdates", timeout=10)
            response.raise_for_status()
            data = response.json()
            
            if data['ok'] and data['result']:
                # –ë–µ—Ä–µ–º chat_id –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                last_update = data['result'][-1]
                if 'message' in last_update:
                    return str(last_update['message']['chat']['id'])
                elif 'callback_query' in last_update:
                    return str(last_update['callback_query']['message']['chat']['id'])
                    
            return None
            
        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id: {e}")
            return None
    
    def _send_location_to_telegram(self, location_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message = f"üìç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n"
            message += f"üåç –°—Ç—Ä–∞–Ω–∞: {location_data.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            message += f"üèô –†–µ–≥–∏–æ–Ω: {location_data.get('region', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            message += f"üè¢ –ì–æ—Ä–æ–¥: {location_data.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            message += f"üìÆ ZIP: {location_data.get('zip', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            message += f"üì° IP: {location_data.get('ip', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            message += f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location_data.get('lat', '')}, {location_data.get('lon', '')}\n"
            message += f"üì∂ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {location_data.get('isp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            message += f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {location_data.get('org', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text_payload = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(
                f"{self.base_url}/sendMessage",
                json=text_payload,
                timeout=10
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ location
            if location_data.get('lat') and location_data.get('lon'):
                location_payload = {
                    'chat_id': self.chat_id,
                    'latitude': location_data['lat'],
                    'longitude': location_data['lon']
                }
                
                requests.post(
                    f"{self.base_url}/sendLocation",
                    json=location_payload,
                    timeout=10
                )
            
            return response.status_code == 200
            
        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
maksim_132 = Maksim132()