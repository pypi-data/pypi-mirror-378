#!/usr/bin/env python3
import serial
import time
import sys

class ServoController:
    def __init__(self, port='COM4', baudrate=9600):
        """
        –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–µ—Ä–≤–æ–º–æ—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ Arduino
        
        Args:
            port (str): COM –ø–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            baudrate (int): –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
        """
        self.port = port
        self.baudrate = baudrate
        self.ser = None
        self.connected = False
        
        self._connect()
    
    def _connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Arduino"""
        try:
            self.ser = serial.Serial(
                port=self.port,
                baudrate=self.baudrate,
                timeout=1,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE
            )
            
            # –î–∞–µ–º –≤—Ä–µ–º—è Arduino –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            time.sleep(2)
            
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
            self.ser.reset_input_buffer()
            
            self.connected = True
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Arduino –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
            
        except serial.SerialException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.port}: {e}")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ Arduino –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
            print("2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ COM –ø–æ—Ä—Ç")
            print("3. –ó–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Å–∫–µ—Ç—á –Ω–∞ Arduino")
            self.connected = False
            
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.connected = False
    
    def set_angle(self, angle):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å–µ—Ä–≤–æ–º–æ—Ç–æ—Ä–∞
        
        Args:
            angle (int): –£–≥–æ–ª –æ—Ç 0 –¥–æ 180 –≥—Ä–∞–¥—É—Å–æ–≤
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        if not self.connected or self.ser is None:
            print("‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Arduino")
            return False
        
        if angle < 0 or angle > 180:
            print("‚ùå –£–≥–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 180 –≥—Ä–∞–¥—É—Å–æ–≤")
            return False
        
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "ANGLE:90\n"
            command = f"ANGLE:{angle}\n"
            self.ser.write(command.encode('utf-8'))
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Arduino
            time.sleep(0.1)
            
            # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
            if self.ser.in_waiting > 0:
                response = self.ser.readline().decode('utf-8').strip()
                print(f"üì® –û—Ç–≤–µ—Ç Arduino: {response}")
            
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: —É–≥–æ–ª {angle}¬∞")
            return True
            
        except serial.SerialException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Arduino: {e}")
            self.connected = False
            return False
            
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    
    def sweep(self, start=0, end=180, step=10, delay=0.3):
        """
        –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–æ–º–æ—Ç–æ—Ä–∞ –º–µ–∂–¥—É —É–≥–ª–∞–º–∏
        """
        if not self.connected:
            print("‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Arduino")
            return
        
        print(f"üîÑ –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç {start}¬∞ –¥–æ {end}¬∞")
        
        # –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
        for angle in range(start, end + 1, step):
            if self.set_angle(angle):
                time.sleep(delay)
        
        # –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥
        for angle in range(end, start - 1, -step):
            if self.set_angle(angle):
                time.sleep(delay)
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.ser and self.ser.is_open:
            self.ser.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Arduino –∑–∞–∫—Ä—ã—Ç–æ")
        self.connected = False
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.close()