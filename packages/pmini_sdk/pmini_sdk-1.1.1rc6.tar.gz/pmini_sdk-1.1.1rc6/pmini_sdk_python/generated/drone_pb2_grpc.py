# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import drone_pb2 as drone__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in drone_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DroneServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Takeoff = channel.unary_unary(
                '/drone.DroneService/Takeoff',
                request_serializer=drone__pb2.TakeoffRequest.SerializeToString,
                response_deserializer=drone__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.Land = channel.unary_unary(
                '/drone.DroneService/Land',
                request_serializer=drone__pb2.LandRequest.SerializeToString,
                response_deserializer=drone__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.Arm = channel.unary_unary(
                '/drone.DroneService/Arm',
                request_serializer=drone__pb2.ArmRequest.SerializeToString,
                response_deserializer=drone__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.Disarm = channel.unary_unary(
                '/drone.DroneService/Disarm',
                request_serializer=drone__pb2.DisarmRequest.SerializeToString,
                response_deserializer=drone__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.SetMode = channel.unary_unary(
                '/drone.DroneService/SetMode',
                request_serializer=drone__pb2.SetModeRequest.SerializeToString,
                response_deserializer=drone__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.GoTo = channel.unary_unary(
                '/drone.DroneService/GoTo',
                request_serializer=drone__pb2.GoToRequest.SerializeToString,
                response_deserializer=drone__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.MoveVelocity = channel.unary_unary(
                '/drone.DroneService/MoveVelocity',
                request_serializer=drone__pb2.MoveVelocityRequest.SerializeToString,
                response_deserializer=drone__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.SetVelocity = channel.unary_unary(
                '/drone.DroneService/SetVelocity',
                request_serializer=drone__pb2.SetVelocityRequest.SerializeToString,
                response_deserializer=drone__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.EmergencyStop = channel.unary_unary(
                '/drone.DroneService/EmergencyStop',
                request_serializer=drone__pb2.EmergencyStopRequest.SerializeToString,
                response_deserializer=drone__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.Reboot = channel.unary_unary(
                '/drone.DroneService/Reboot',
                request_serializer=drone__pb2.RebootRequest.SerializeToString,
                response_deserializer=drone__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.GetHealth = channel.unary_unary(
                '/drone.DroneService/GetHealth',
                request_serializer=drone__pb2.GetHealthRequest.SerializeToString,
                response_deserializer=drone__pb2.HealthResponse.FromString,
                _registered_method=True)
        self.SubscribePosition = channel.unary_stream(
                '/drone.DroneService/SubscribePosition',
                request_serializer=drone__pb2.SubscribePositionRequest.SerializeToString,
                response_deserializer=drone__pb2.PositionResponse.FromString,
                _registered_method=True)
        self.SubscribeStatusText = channel.unary_stream(
                '/drone.DroneService/SubscribeStatusText',
                request_serializer=drone__pb2.SubscribeStatusTextRequest.SerializeToString,
                response_deserializer=drone__pb2.StatusTextResponse.FromString,
                _registered_method=True)
        self.SubscribeVelocity = channel.unary_stream(
                '/drone.DroneService/SubscribeVelocity',
                request_serializer=drone__pb2.SubscribeVelocityRequest.SerializeToString,
                response_deserializer=drone__pb2.VelocityResponse.FromString,
                _registered_method=True)
        self.SubscribeAttitude = channel.unary_stream(
                '/drone.DroneService/SubscribeAttitude',
                request_serializer=drone__pb2.SubscribeAttitudeRequest.SerializeToString,
                response_deserializer=drone__pb2.AttitudeResponse.FromString,
                _registered_method=True)
        self.SubscribeBatteryStatus = channel.unary_stream(
                '/drone.DroneService/SubscribeBatteryStatus',
                request_serializer=drone__pb2.SubscribeBatteryStatusRequest.SerializeToString,
                response_deserializer=drone__pb2.BatteryStatusResponse.FromString,
                _registered_method=True)
        self.SubscribeAngularVelocity = channel.unary_stream(
                '/drone.DroneService/SubscribeAngularVelocity',
                request_serializer=drone__pb2.SubscribeAngularVelocityRequest.SerializeToString,
                response_deserializer=drone__pb2.AngularVelocityResponse.FromString,
                _registered_method=True)
        self.SubscribeAcceleration = channel.unary_stream(
                '/drone.DroneService/SubscribeAcceleration',
                request_serializer=drone__pb2.SubscribeAccelerationRequest.SerializeToString,
                response_deserializer=drone__pb2.AccelerationResponse.FromString,
                _registered_method=True)
        self.SubscribeLidarRange = channel.unary_stream(
                '/drone.DroneService/SubscribeLidarRange',
                request_serializer=drone__pb2.SubscribeLidarRangeRequest.SerializeToString,
                response_deserializer=drone__pb2.LidarRangeResponse.FromString,
                _registered_method=True)
        self.Status = channel.unary_unary(
                '/drone.DroneService/Status',
                request_serializer=drone__pb2.StatusRequest.SerializeToString,
                response_deserializer=drone__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetPosition = channel.unary_unary(
                '/drone.DroneService/GetPosition',
                request_serializer=drone__pb2.GetPositionRequest.SerializeToString,
                response_deserializer=drone__pb2.PositionResponse.FromString,
                _registered_method=True)
        self.GetVelocity = channel.unary_unary(
                '/drone.DroneService/GetVelocity',
                request_serializer=drone__pb2.GetVelocityRequest.SerializeToString,
                response_deserializer=drone__pb2.VelocityResponse.FromString,
                _registered_method=True)
        self.GetAttitude = channel.unary_unary(
                '/drone.DroneService/GetAttitude',
                request_serializer=drone__pb2.GetAttitudeRequest.SerializeToString,
                response_deserializer=drone__pb2.AttitudeResponse.FromString,
                _registered_method=True)
        self.GetAngularVelocity = channel.unary_unary(
                '/drone.DroneService/GetAngularVelocity',
                request_serializer=drone__pb2.GetAngularVelocityRequest.SerializeToString,
                response_deserializer=drone__pb2.AngularVelocityResponse.FromString,
                _registered_method=True)
        self.GetAcceleration = channel.unary_unary(
                '/drone.DroneService/GetAcceleration',
                request_serializer=drone__pb2.GetAccelerationRequest.SerializeToString,
                response_deserializer=drone__pb2.AccelerationResponse.FromString,
                _registered_method=True)
        self.GetLidarRange = channel.unary_unary(
                '/drone.DroneService/GetLidarRange',
                request_serializer=drone__pb2.GetLidarRangeRequest.SerializeToString,
                response_deserializer=drone__pb2.LidarRangeResponse.FromString,
                _registered_method=True)


class DroneServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Takeoff(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Land(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Arm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disarm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GoTo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MoveVelocity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetVelocity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EmergencyStop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reboot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHealth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribePosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeStatusText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeVelocity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeAttitude(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeBatteryStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeAngularVelocity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeAcceleration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeLidarRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPosition(self, request, context):
        """Unary getters for latest values
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVelocity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAttitude(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAngularVelocity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAcceleration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLidarRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DroneServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Takeoff': grpc.unary_unary_rpc_method_handler(
                    servicer.Takeoff,
                    request_deserializer=drone__pb2.TakeoffRequest.FromString,
                    response_serializer=drone__pb2.CommandResponse.SerializeToString,
            ),
            'Land': grpc.unary_unary_rpc_method_handler(
                    servicer.Land,
                    request_deserializer=drone__pb2.LandRequest.FromString,
                    response_serializer=drone__pb2.CommandResponse.SerializeToString,
            ),
            'Arm': grpc.unary_unary_rpc_method_handler(
                    servicer.Arm,
                    request_deserializer=drone__pb2.ArmRequest.FromString,
                    response_serializer=drone__pb2.CommandResponse.SerializeToString,
            ),
            'Disarm': grpc.unary_unary_rpc_method_handler(
                    servicer.Disarm,
                    request_deserializer=drone__pb2.DisarmRequest.FromString,
                    response_serializer=drone__pb2.CommandResponse.SerializeToString,
            ),
            'SetMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMode,
                    request_deserializer=drone__pb2.SetModeRequest.FromString,
                    response_serializer=drone__pb2.CommandResponse.SerializeToString,
            ),
            'GoTo': grpc.unary_unary_rpc_method_handler(
                    servicer.GoTo,
                    request_deserializer=drone__pb2.GoToRequest.FromString,
                    response_serializer=drone__pb2.CommandResponse.SerializeToString,
            ),
            'MoveVelocity': grpc.unary_unary_rpc_method_handler(
                    servicer.MoveVelocity,
                    request_deserializer=drone__pb2.MoveVelocityRequest.FromString,
                    response_serializer=drone__pb2.CommandResponse.SerializeToString,
            ),
            'SetVelocity': grpc.unary_unary_rpc_method_handler(
                    servicer.SetVelocity,
                    request_deserializer=drone__pb2.SetVelocityRequest.FromString,
                    response_serializer=drone__pb2.CommandResponse.SerializeToString,
            ),
            'EmergencyStop': grpc.unary_unary_rpc_method_handler(
                    servicer.EmergencyStop,
                    request_deserializer=drone__pb2.EmergencyStopRequest.FromString,
                    response_serializer=drone__pb2.CommandResponse.SerializeToString,
            ),
            'Reboot': grpc.unary_unary_rpc_method_handler(
                    servicer.Reboot,
                    request_deserializer=drone__pb2.RebootRequest.FromString,
                    response_serializer=drone__pb2.CommandResponse.SerializeToString,
            ),
            'GetHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHealth,
                    request_deserializer=drone__pb2.GetHealthRequest.FromString,
                    response_serializer=drone__pb2.HealthResponse.SerializeToString,
            ),
            'SubscribePosition': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribePosition,
                    request_deserializer=drone__pb2.SubscribePositionRequest.FromString,
                    response_serializer=drone__pb2.PositionResponse.SerializeToString,
            ),
            'SubscribeStatusText': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeStatusText,
                    request_deserializer=drone__pb2.SubscribeStatusTextRequest.FromString,
                    response_serializer=drone__pb2.StatusTextResponse.SerializeToString,
            ),
            'SubscribeVelocity': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeVelocity,
                    request_deserializer=drone__pb2.SubscribeVelocityRequest.FromString,
                    response_serializer=drone__pb2.VelocityResponse.SerializeToString,
            ),
            'SubscribeAttitude': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeAttitude,
                    request_deserializer=drone__pb2.SubscribeAttitudeRequest.FromString,
                    response_serializer=drone__pb2.AttitudeResponse.SerializeToString,
            ),
            'SubscribeBatteryStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeBatteryStatus,
                    request_deserializer=drone__pb2.SubscribeBatteryStatusRequest.FromString,
                    response_serializer=drone__pb2.BatteryStatusResponse.SerializeToString,
            ),
            'SubscribeAngularVelocity': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeAngularVelocity,
                    request_deserializer=drone__pb2.SubscribeAngularVelocityRequest.FromString,
                    response_serializer=drone__pb2.AngularVelocityResponse.SerializeToString,
            ),
            'SubscribeAcceleration': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeAcceleration,
                    request_deserializer=drone__pb2.SubscribeAccelerationRequest.FromString,
                    response_serializer=drone__pb2.AccelerationResponse.SerializeToString,
            ),
            'SubscribeLidarRange': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeLidarRange,
                    request_deserializer=drone__pb2.SubscribeLidarRangeRequest.FromString,
                    response_serializer=drone__pb2.LidarRangeResponse.SerializeToString,
            ),
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=drone__pb2.StatusRequest.FromString,
                    response_serializer=drone__pb2.StatusResponse.SerializeToString,
            ),
            'GetPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPosition,
                    request_deserializer=drone__pb2.GetPositionRequest.FromString,
                    response_serializer=drone__pb2.PositionResponse.SerializeToString,
            ),
            'GetVelocity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVelocity,
                    request_deserializer=drone__pb2.GetVelocityRequest.FromString,
                    response_serializer=drone__pb2.VelocityResponse.SerializeToString,
            ),
            'GetAttitude': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAttitude,
                    request_deserializer=drone__pb2.GetAttitudeRequest.FromString,
                    response_serializer=drone__pb2.AttitudeResponse.SerializeToString,
            ),
            'GetAngularVelocity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAngularVelocity,
                    request_deserializer=drone__pb2.GetAngularVelocityRequest.FromString,
                    response_serializer=drone__pb2.AngularVelocityResponse.SerializeToString,
            ),
            'GetAcceleration': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAcceleration,
                    request_deserializer=drone__pb2.GetAccelerationRequest.FromString,
                    response_serializer=drone__pb2.AccelerationResponse.SerializeToString,
            ),
            'GetLidarRange': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLidarRange,
                    request_deserializer=drone__pb2.GetLidarRangeRequest.FromString,
                    response_serializer=drone__pb2.LidarRangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'drone.DroneService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('drone.DroneService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DroneService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Takeoff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/Takeoff',
            drone__pb2.TakeoffRequest.SerializeToString,
            drone__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Land(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/Land',
            drone__pb2.LandRequest.SerializeToString,
            drone__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Arm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/Arm',
            drone__pb2.ArmRequest.SerializeToString,
            drone__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Disarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/Disarm',
            drone__pb2.DisarmRequest.SerializeToString,
            drone__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/SetMode',
            drone__pb2.SetModeRequest.SerializeToString,
            drone__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GoTo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/GoTo',
            drone__pb2.GoToRequest.SerializeToString,
            drone__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MoveVelocity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/MoveVelocity',
            drone__pb2.MoveVelocityRequest.SerializeToString,
            drone__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetVelocity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/SetVelocity',
            drone__pb2.SetVelocityRequest.SerializeToString,
            drone__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EmergencyStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/EmergencyStop',
            drone__pb2.EmergencyStopRequest.SerializeToString,
            drone__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Reboot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/Reboot',
            drone__pb2.RebootRequest.SerializeToString,
            drone__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/GetHealth',
            drone__pb2.GetHealthRequest.SerializeToString,
            drone__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribePosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/drone.DroneService/SubscribePosition',
            drone__pb2.SubscribePositionRequest.SerializeToString,
            drone__pb2.PositionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeStatusText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/drone.DroneService/SubscribeStatusText',
            drone__pb2.SubscribeStatusTextRequest.SerializeToString,
            drone__pb2.StatusTextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeVelocity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/drone.DroneService/SubscribeVelocity',
            drone__pb2.SubscribeVelocityRequest.SerializeToString,
            drone__pb2.VelocityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeAttitude(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/drone.DroneService/SubscribeAttitude',
            drone__pb2.SubscribeAttitudeRequest.SerializeToString,
            drone__pb2.AttitudeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeBatteryStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/drone.DroneService/SubscribeBatteryStatus',
            drone__pb2.SubscribeBatteryStatusRequest.SerializeToString,
            drone__pb2.BatteryStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeAngularVelocity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/drone.DroneService/SubscribeAngularVelocity',
            drone__pb2.SubscribeAngularVelocityRequest.SerializeToString,
            drone__pb2.AngularVelocityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeAcceleration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/drone.DroneService/SubscribeAcceleration',
            drone__pb2.SubscribeAccelerationRequest.SerializeToString,
            drone__pb2.AccelerationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeLidarRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/drone.DroneService/SubscribeLidarRange',
            drone__pb2.SubscribeLidarRangeRequest.SerializeToString,
            drone__pb2.LidarRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/Status',
            drone__pb2.StatusRequest.SerializeToString,
            drone__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/GetPosition',
            drone__pb2.GetPositionRequest.SerializeToString,
            drone__pb2.PositionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetVelocity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/GetVelocity',
            drone__pb2.GetVelocityRequest.SerializeToString,
            drone__pb2.VelocityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAttitude(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/GetAttitude',
            drone__pb2.GetAttitudeRequest.SerializeToString,
            drone__pb2.AttitudeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAngularVelocity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/GetAngularVelocity',
            drone__pb2.GetAngularVelocityRequest.SerializeToString,
            drone__pb2.AngularVelocityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAcceleration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/GetAcceleration',
            drone__pb2.GetAccelerationRequest.SerializeToString,
            drone__pb2.AccelerationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLidarRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/drone.DroneService/GetLidarRange',
            drone__pb2.GetLidarRangeRequest.SerializeToString,
            drone__pb2.LidarRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
