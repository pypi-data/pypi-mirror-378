# coding: utf-8

"""
    Pingera API

     The official API for Pingera, a monitoring and status page platform. This API allows you to manage checks, organizations, incidents, and more.   Some useful links: * [Pingera website](https://pingera.ru?utm_source=api_docs) * [API documentation](https://docs.pingera.ru/api/overview) * [Application](https://app.pingera.ru) * [Status page](https://status.pingera.ru) 

    The version of the OpenAPI document: v1
    Contact: privet@pingera.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pingera.models.o_auth_login_response import OAuthLoginResponse

class TestOAuthLoginResponse(unittest.TestCase):
    """OAuthLoginResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OAuthLoginResponse:
        """Test OAuthLoginResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OAuthLoginResponse`
        """
        model = OAuthLoginResponse()
        if include_optional:
            return OAuthLoginResponse(
                auth_method = 'oauth_yandex',
                linked_account = True,
                is_new_user = False,
                user = pingera.models.user.User(
                    first_name = 'John', 
                    org_name = 'My Company', 
                    onboarding_completed = True, 
                    email = 'user@example.com', 
                    email_verified = True, 
                    created_at = '2024-01-15T10:00Z', 
                    onboarding_completed_at = '2024-01-15T11:30Z', 
                    last_name = 'Doe', 
                    last_login = '2024-01-15T14:30Z', 
                    onboarding_step = 'setup_alerts', 
                    verification_token_expires = 2024-01-16T10:00:00Z, 
                    role = 'admin', 
                    password = 'securepassword123', 
                    organization_id = 'org_stellar_solutions', 
                    id = 'user_abc123def456', 
                    is_first_login = False, ),
                access_token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...',
                refresh_token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...'
            )
        else:
            return OAuthLoginResponse(
        )
        """

    def testOAuthLoginResponse(self):
        """Test OAuthLoginResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
