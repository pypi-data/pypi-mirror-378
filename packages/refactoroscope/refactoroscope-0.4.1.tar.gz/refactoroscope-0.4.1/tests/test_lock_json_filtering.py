"""
Test script to verify filtering of .lock and .json files
"""

import tempfile
from pathlib import Path

from codeinsight.scanner import Scanner


def test_lock_and_json_file_filtering():
    """Test filtering of .lock and .json files"""
    # Create a temporary directory with the specific file types mentioned
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)

        # Create actual source files that should be analyzed
        (temp_path / "main.dart").write_text(
            """
void main() {
  print('Hello, World!');
}
"""
        )

        (temp_path / "package.json").write_text(
            """
{
  "name": "test-app",
  "version": "1.0.0",
  "description": "Test application"
}
"""
        )

        # Create .lock files that should be ignored
        (temp_path / "Cargo.lock").write_text(
            """
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
[[package]]
name = "test-package"
version = "1.0.0"
"""
        )

        (temp_path / "yarn.lock").write_text(
            """
# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1
test-package@^1.0.0:
  version "1.0.0"
"""
        )

        # Create regular .json files that should be ignored
        (temp_path / "config.json").write_text(
            """
{
  "setting1": "value1",
  "setting2": "value2"
}
"""
        )

        (temp_path / "data.json").write_text(
            """
[
  {"id": 1, "name": "Item 1"},
  {"id": 2, "name": "Item 2"}
]
"""
        )

        print(f"Created test directory with {len(list(temp_path.rglob('*')))} files")

        # Test the scanner
        scanner = Scanner(temp_path)
        report = scanner.analyze(temp_path)

        print(f"Analysis found {report.total_files} files")
        print(f"Total lines of code: {report.total_lines}")
        print(f"Total size: {report.total_size:,} bytes")
        print(
            "Languages:",
            {lang.value: count for lang, count in report.language_distribution.items()},
        )

        # Check that .lock files are not in the results
        lock_files = [
            f for f in report.top_files if ".lock" in f.file_metrics.relative_path
        ]
        assert (
            len(lock_files) == 0
        ), f"Found lock files in analysis: {[f.file_metrics.relative_path for f in lock_files]}"

        # Check that regular .json files are not in the results
        json_files = [
            f
            for f in report.top_files
            if f.file_metrics.relative_path.endswith(".json")
            and f.file_metrics.relative_path != "package.json"
        ]
        assert (
            len(json_files) == 0
        ), f"Found regular JSON files in analysis: {[f.file_metrics.relative_path for f in json_files]}"

        # Check that package.json is still included
        package_json_files = [
            f
            for f in report.top_files
            if f.file_metrics.relative_path == "package.json"
        ]
        assert (
            len(package_json_files) == 1
        ), "package.json should be included in analysis"

        # Check that source files are included
        source_files = [
            f for f in report.top_files if f.file_metrics.relative_path in ["main.dart"]
        ]
        assert (
            len(source_files) >= 1
        ), f"Source files not properly included: {[f.file_metrics.relative_path for f in source_files]}"

        print("Lock and JSON file filtering test passed!")
        print("Files that were analyzed:")
        for file_insight in report.top_files:
            print(
                f"  {file_insight.file_metrics.relative_path}: {file_insight.file_metrics.lines_of_code} lines"
            )


if __name__ == "__main__":
    test_lock_and_json_file_filtering()
