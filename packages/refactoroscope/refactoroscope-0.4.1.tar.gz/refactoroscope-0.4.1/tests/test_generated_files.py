"""
Test script to verify filtering of generated and build files
"""

import tempfile
from pathlib import Path

from codeinsight.scanner import Scanner


def test_generated_and_build_file_filtering():
    """Test filtering of generated files and build files"""
    # Create a temporary directory with the specific file types mentioned
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)

        # Create actual source files that should be analyzed
        (temp_path / "main.dart").write_text(
            """
void main() {
  print('Hello, World!');
}
"""
        )

        (temp_path / "task.dart").write_text(
            """
class Task {
  String title;
  bool completed;
  
  Task(this.title, this.completed);
}
"""
        )

        # Create generated files that should be ignored
        (temp_path / "task.g.dart").write_text(
            """
// GENERATED CODE - DO NOT MODIFY BY HAND
// This is a generated file
class TaskGenerated {
  // Lots of generated code...
}
"""
        )

        # Create lock files that should be ignored
        (temp_path / "pubspec.lock").write_text(
            """
# Generated by pub
# See https://dart.dev/tools/pub/glossary#lockfile
packages:
  flutter:
    dependency: "direct main"
    description:
      path: "flutter"
      ref: "flutter-3.10.0"
      resolved-ref: "abc123"
"""
        )

        # Create project files that should be ignored
        ios_dir = temp_path / "ios" / "Runner.xcodeproj"
        ios_dir.mkdir(parents=True)
        (ios_dir / "project.pbxproj").write_text(
            """
// !$*UTF8*$!
{
    archiveVersion = 1;
    classes = {
    };
    objectVersion = 55;
    objects = {
    };
}
"""
        )

        # Create XIB files that should be ignored
        macos_dir = temp_path / "macos" / "Runner" / "Base.lproj"
        macos_dir.mkdir(parents=True)
        (macos_dir / "MainMenu.xib").write_text(
            """
<?xml version="1.0" encoding="UTF-8"?>
<document type="com.apple.InterfaceBuilder3.Cocoa.XIB">
</document>
"""
        )

        print(f"Created test directory with {len(list(temp_path.rglob('*')))} files")

        # Test the scanner
        scanner = Scanner(temp_path)
        report = scanner.analyze(temp_path)

        print(f"Analysis found {report.total_files} files")
        print(f"Total lines of code: {report.total_lines}")
        print(f"Total size: {report.total_size:,} bytes")
        print(
            "Languages:",
            {lang.value: count for lang, count in report.language_distribution.items()},
        )

        # Check that generated files are not in the results
        generated_files = [
            f for f in report.top_files if ".g.dart" in f.file_metrics.relative_path
        ]
        assert (
            len(generated_files) == 0
        ), f"Found generated files in analysis: {[f.file_metrics.relative_path for f in generated_files]}"

        # Check that lock files are not in the results
        lock_files = [
            f
            for f in report.top_files
            if "pubspec.lock" in f.file_metrics.relative_path
        ]
        assert (
            len(lock_files) == 0
        ), f"Found lock files in analysis: {[f.file_metrics.relative_path for f in lock_files]}"

        # Check that project files are not in the results
        project_files = [
            f
            for f in report.top_files
            if ".pbxproj" in f.file_metrics.relative_path
            or ".xib" in f.file_metrics.relative_path
        ]
        assert (
            len(project_files) == 0
        ), f"Found project files in analysis: {[f.file_metrics.relative_path for f in project_files]}"

        # Check that source files are included
        source_files = [
            f
            for f in report.top_files
            if f.file_metrics.relative_path in ["main.dart", "task.dart"]
        ]
        assert (
            len(source_files) >= 1
        ), f"Source files not properly included: {[f.file_metrics.relative_path for f in source_files]}"

        print("Generated and build file filtering test passed!")
        print("Files that were analyzed:")
        for file_insight in report.top_files:
            print(
                f"  {file_insight.file_metrics.relative_path}: {file_insight.file_metrics.lines_of_code} lines"
            )


if __name__ == "__main__":
    test_generated_and_build_file_filtering()
