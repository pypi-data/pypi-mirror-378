[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aiiware-cli"
version = "0.3.0"
description = "aii — AI × Intelligence companion for translate, code, write, explain & automate."
authors = [
    {name = "aii Dev", email = "aii-dev@aiiware.com"}
]
license = {text = "Apache-2.0"}
readme = "README.md"
keywords = [
    "ai",
    "assistant",
    "cli",
    "translation",
    "coding",
    "shell",
    "automation",
    "gemini",
    "pydantic-ai"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Shells",
    "Topic :: Utilities",
    "Typing :: Typed"
]
requires-python = ">=3.10"
dependencies = [
    "pydantic-ai[anthropic,openai]>=1.0.6",
    "typing-extensions>=4.0.0; python_version<'3.11'",
    "importlib-metadata>=1.0; python_version<'3.8'",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "black",
    "isort",
    "mypy",
    "ruff",
    "types-psutil"
]

[project.scripts]
aii = "aii.cli:main"
aiit = "aii.cli:main_translate"

[tool.hatch.build.targets.wheel]
packages = ["aii"]
include = ["aii.py"]

[tool.hatch.build.targets.sdist]
include = [
    "aii/",
    "aii.py",
    "README.md",
    "LICENSE"
]

# Test configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings"
]

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "setup.py",
    "venv/*",
    ".venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

# Ruff configuration for linting
[tool.ruff]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[dependency-groups]
dev = [
    "black>=25.1.0",
    "pytest>=8.4.2",
    "twine>=6.2.0",
]
