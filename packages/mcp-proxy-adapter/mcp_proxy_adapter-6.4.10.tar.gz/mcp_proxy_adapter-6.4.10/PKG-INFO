Metadata-Version: 2.4
Name: mcp-proxy-adapter
Version: 6.4.10
Summary: Powerful JSON-RPC microservices framework with built-in security, authentication, and proxy registration
Home-page: https://github.com/maverikod/mcp-proxy-adapter
Author: Vasiliy Zdanovskiy
Author-email: Vasiliy Zdanovskiy <vasilyvz@gmail.com>
Maintainer-email: Vasiliy Zdanovskiy <vasilyvz@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/maverikod/mcp-proxy-adapter
Project-URL: Documentation, https://github.com/maverikod/mcp-proxy-adapter#readme
Project-URL: Source, https://github.com/maverikod/mcp-proxy-adapter
Project-URL: Tracker, https://github.com/maverikod/mcp-proxy-adapter/issues
Project-URL: PyPI, https://pypi.org/project/mcp-proxy-adapter/
Keywords: json-rpc,microservices,fastapi,security,authentication,authorization,proxy,mcp,mtls,ssl,rest,api
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Framework :: FastAPI
Classifier: Topic :: Internet :: WWW/HTTP :: HTTP Servers
Classifier: Topic :: Security
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: fastapi<1.0.0,>=0.95.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: hypercorn<1.0.0,>=0.15.0
Requires-Dist: docstring-parser<1.0.0,>=0.15
Requires-Dist: typing-extensions<5.0.0,>=4.5.0
Requires-Dist: jsonrpc>=1.2.0
Requires-Dist: psutil>=5.9.0
Requires-Dist: mcp_security_framework>=1.1.2
Requires-Dist: packaging>=20.0
Requires-Dist: aiohttp<4.0.0,>=3.8.0
Requires-Dist: requests<3.0.0,>=2.28.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.20.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: uvicorn<1.0.0,>=0.22.0; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=7.0.0; extra == "test"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "test"
Requires-Dist: pytest-cov>=4.0.0; extra == "test"
Requires-Dist: httpx>=0.24.0; extra == "test"
Requires-Dist: pytest-mock>=3.10.0; extra == "test"
Provides-Extra: examples
Requires-Dist: uvicorn<1.0.0,>=0.22.0; extra == "examples"
Dynamic: author
Dynamic: home-page
Dynamic: requires-python

# MCP Proxy Adapter

[![PyPI version](https://badge.fury.io/py/mcp-proxy-adapter.svg)](https://pypi.org/project/mcp-proxy-adapter/)
[![Python versions](https://img.shields.io/pypi/pyversions/mcp-proxy-adapter.svg)](https://pypi.org/project/mcp-proxy-adapter/)
[![License](https://img.shields.io/pypi/l/mcp-proxy-adapter.svg)](https://github.com/maverikod/mcp-proxy-adapter/blob/main/LICENSE)

A powerful framework for creating JSON-RPC-enabled microservices with built-in security, authentication, and proxy registration capabilities.

## üöÄ Quick Install

```bash
pip install mcp-proxy-adapter
```

## ‚ú® Key Features

- **üîí Security First**: Built-in mTLS, JWT, API Key authentication
- **üåê JSON-RPC 2.0**: Complete protocol implementation
- **üîÑ Proxy Registration**: Automatic service discovery and registration
- **‚ö° High Performance**: Built on FastAPI with async support
- **üõ°Ô∏è Role-Based Access**: Fine-grained permission control
- **üì° Universal Client**: Supports all authentication methods

## üèÉ‚Äç‚ôÇÔ∏è Quick Example

Create a secure JSON-RPC microservice in minutes:

```python
from mcp_proxy_adapter import create_app, Command, SuccessResult

# Create a custom command
class HelloCommand(Command):
    name = "hello"
    description = "Say hello"

    async def execute(self, **kwargs) -> SuccessResult:
        name = kwargs.get("name", "World")
        return SuccessResult(f"Hello, {name}!")

# Create and run the application
app = create_app()
```

**üìñ [Full Documentation](https://github.com/maverikod/mcp-proxy-adapter#readme)** - Complete usage guide, examples, and API reference.

## üìã Usage Examples

### Basic Server Setup

```python
from mcp_proxy_adapter import create_app
import uvicorn

app = create_app()

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

### With Security Configuration

```python
from mcp_proxy_adapter import create_app
from mcp_proxy_adapter.config import Config

# Load configuration
config = Config.from_file("config.json")
app = create_app(config)
```

### Client Usage

```python
from mcp_proxy_adapter.core.client import UniversalClient

async def main():
    async with UniversalClient({"server_url": "http://localhost:8000"}) as client:
        result = await client.execute_command("help")
        print(result)

import asyncio
asyncio.run(main())
```

## üîß Requirements

- **Python**: 3.9+
- **Dependencies**:
  - `fastapi` - Web framework
  - `pydantic` - Data validation
  - `hypercorn` - ASGI server
  - `mcp_security_framework` - Security components
  - `jsonrpc` - JSON-RPC protocol

## Features

- **JSON-RPC Framework**: Complete JSON-RPC 2.0 implementation
- **Security Integration**: Built-in support for mcp_security_framework
- **Authentication**: Multiple auth methods (API Key, JWT, Certificate, Basic Auth)
- **Proxy Registration**: Automatic registration and discovery of services
- **Command System**: Extensible command framework with role-based access control
- **SSL/TLS Support**: Full SSL/TLS support including mTLS
- **Async Support**: Built on FastAPI with full async support
- **Extensible**: Plugin system for custom commands and middleware

## Quick Start

### Installation

```bash
pip install mcp-proxy-adapter
```

## Detailed Usage Guide

### Step 1: Initialize Working Environment

–ü–µ—Ä–≤—ã–π —à–∞–≥ - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Å–∫—Ä–∏–ø—Ç–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:

```bash
# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
python scripts/init_working_environment.py my_test_env

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ–∑–¥–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
cd my_test_env
```

**–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç `init_working_environment.py`:**

1. **–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é** —Å –∏–º–µ–Ω–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —É–∫–∞–∑–∞–ª–∏
2. **–ö–æ–ø–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã** –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞:
   - `basic_framework/` - –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   - `full_application/` - –ø–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å proxy endpoints
   - `universal_client.py` - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
3. **–ö–æ–ø–∏—Ä—É–µ—Ç —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã**:
   - `config_generator.py` - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
   - `create_certificates_simple.py` - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
4. **–ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã**:
   - `generate_certificates_and_tokens.py` - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏ —Ç–æ–∫–µ–Ω–æ–≤
   - `setup_test_environment.py` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
   - `test_config.py` - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
   - `generate_test_configs.py` - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
   - `test_proxy_registration.py` - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ proxy registration
5. **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏** –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã
6. **–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã** –¥–ª—è SSL –∏ mTLS —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
7. **–°–æ–∑–¥–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é** –≤ –≤–∏–¥–µ README.md

### Step 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π

–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:

```bash
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
python scripts/generate_test_configs.py --output-dir configs

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
ls -la configs/
```

**–°–æ–∑–¥–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**

- `http_simple.json` - HTTP –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
- `http_token.json` - HTTP —Å —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
- `https_simple.json` - HTTPS –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
- `https_token.json` - HTTPS —Å —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
- `mtls_no_roles.json` - mTLS –±–µ–∑ —Ä–æ–ª–µ–π
- `mtls_with_roles.json` - mTLS —Å —Ä–æ–ª—è–º–∏
- `roles.json` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π

### Step 3: –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞

–ù–∞—á–Ω–∏—Ç–µ —Å —Å–∞–º–æ–≥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ - HTTP –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:

```bash
# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å HTTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
python examples/basic_framework/main.py --config configs/http_simple.json
```

–í –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:

```bash
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
python scripts/test_config.py --config configs/http_simple.json
```

### Step 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

#### HTTP —Å —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π

```bash
# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
python examples/basic_framework/main.py --config configs/http_token.json

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
python scripts/test_config.py --config configs/http_token.json
```

#### HTTPS —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏

```bash
# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
python examples/basic_framework/main.py --config configs/https_simple.json

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
python scripts/test_config.py --config configs/https_simple.json
```

#### mTLS (Mutual TLS) –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è

```bash
# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å mTLS
python examples/basic_framework/main.py --config configs/mtls_no_roles.json

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
python scripts/test_config.py --config configs/mtls_no_roles.json
```

### Step 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Proxy Registration

–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ proxy registration:

```bash
# –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç proxy registration –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
python scripts/test_proxy_registration.py
```

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç:
- ‚úÖ HTTP –±–µ–∑ —Ä–æ–ª–µ–π
- ‚úÖ HTTP —Å —Ä–æ–ª—è–º–∏
- ‚úÖ HTTPS –±–µ–∑ —Ä–æ–ª–µ–π
- ‚úÖ HTTPS —Å —Ä–æ–ª—è–º–∏
- ‚úÖ mTLS –±–µ–∑ —Ä–æ–ª–µ–π
- ‚úÖ mTLS —Å —Ä–æ–ª—è–º–∏

### Step 6: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞

–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ä–µ–∂–∏–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:

#### –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞

```bash
# –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è mTLS
cat > client_config.json << 'EOF'
{
  "server_url": "https://127.0.0.1:8443",
  "timeout": 30,
  "retry_attempts": 3,
  "retry_delay": 1,
  "security": {
    "auth_method": "certificate",
    "ssl": {
      "enabled": true,
      "check_hostname": false,
      "verify": false,
      "ca_cert_file": "./certs/ca_cert.pem"
    },
    "certificate": {
      "enabled": true,
      "cert_file": "./certs/admin_cert.pem",
      "key_file": "./certs/admin_key.pem"
    }
  }
}
EOF
```

#### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–ª–∏–µ–Ω—Ç–∞

```bash
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
python examples/universal_client.py --config client_config.json --test-connection

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã help
python examples/universal_client.py --config client_config.json --method help

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ proxy
python examples/universal_client.py --config client_config.json --method proxy_register --params '{"server_id": "test-server", "server_url": "http://127.0.0.1:8001", "server_name": "Test Server"}'
```

### Step 7: –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –ø—Ä–∏–º–µ—Ä–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å proxy endpoints:

```bash
# –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
python examples/full_application/main.py --config configs/mtls_with_roles.json
```

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –≤–∫–ª—é—á–∞–µ—Ç:
- Proxy discovery endpoint (`/proxy/discover`)
- Server registration endpoint (`/proxy/register`)
- Heartbeat endpoint (`/proxy/heartbeat`)
- Server unregistration endpoint (`/proxy/unregister`)

#### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ proxy endpoints

```bash
# Discovery - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ proxy
curl -X GET "https://127.0.0.1:8443/proxy/discover" \
  --cert ./certs/admin_cert.pem \
  --key ./certs/admin_key.pem \
  --cacert ./certs/ca_cert.pem

# Registration - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
curl -X POST "https://127.0.0.1:8443/proxy/register" \
  -H "Content-Type: application/json" \
  -d '{
    "server_id": "test-server-1",
    "server_url": "http://127.0.0.1:8001",
    "server_name": "Test Server",
    "description": "Test server for proxy registration",
    "version": "1.0.0",
    "capabilities": ["jsonrpc", "rest"],
    "endpoints": {
      "jsonrpc": "/api/jsonrpc",
      "rest": "/cmd",
      "health": "/health"
    },
    "auth_method": "certificate",
    "security_enabled": true
  }' \
  --cert ./certs/admin_cert.pem \
  --key ./certs/admin_key.pem \
  --cacert ./certs/ca_cert.pem

# Heartbeat - –æ—Ç–ø—Ä–∞–≤–∫–∞ heartbeat
curl -X POST "https://127.0.0.1:8443/proxy/heartbeat" \
  -H "Content-Type: application/json" \
  -d '{
    "server_id": "test-server-1",
    "server_key": "returned_server_key",
    "timestamp": 1234567890,
    "status": "healthy"
  }' \
  --cert ./certs/admin_cert.pem \
  --key ./certs/admin_key.pem \
  --cacert ./certs/ca_cert.pem
```

### Step 8: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

–°–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –Ω–∞—Å–ª–µ–¥—É—è—Å—å –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞:

```python
from mcp_proxy_adapter.commands.base import Command
from mcp_proxy_adapter.core.result import SuccessResult, ErrorResult

class MyCustomCommand(Command):
    name = "my_command"
    description = "–ú–æ—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
    
    async def execute(self, **kwargs) -> SuccessResult:
        param1 = kwargs.get("param1", "default_value")

        # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –∑–¥–µ—Å—å
        result = f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: {param1}"

        return SuccessResult(result)
```

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è

–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è `init_working_environment.py` —É –≤–∞—Å –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:

```
my_test_env/
‚îú‚îÄ‚îÄ examples/                    # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
‚îÇ   ‚îú‚îÄ‚îÄ basic_framework/
‚îÇ   ‚îú‚îÄ‚îÄ full_application/
‚îÇ   ‚îî‚îÄ‚îÄ universal_client.py
‚îú‚îÄ‚îÄ scripts/                     # –°–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ generate_test_configs.py
‚îÇ   ‚îú‚îÄ‚îÄ test_proxy_registration.py
‚îÇ   ‚îú‚îÄ‚îÄ test_config.py
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ configs/                     # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
‚îÇ   ‚îú‚îÄ‚îÄ http_simple.json
‚îÇ   ‚îú‚îÄ‚îÄ https_simple.json
‚îÇ   ‚îú‚îÄ‚îÄ mtls_no_roles.json
‚îÇ   ‚îú‚îÄ‚îÄ mtls_with_roles.json
‚îÇ   ‚îî‚îÄ‚îÄ roles.json
‚îú‚îÄ‚îÄ certs/                       # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è SSL/mTLS
‚îÇ   ‚îú‚îÄ‚îÄ ca_cert.pem
‚îÇ   ‚îú‚îÄ‚îÄ server_cert.pem
‚îÇ   ‚îú‚îÄ‚îÄ admin_cert.pem
‚îÇ   ‚îú‚îÄ‚îÄ user_cert.pem
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ keys/                        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏
‚îÇ   ‚îú‚îÄ‚îÄ server_key.pem
‚îÇ   ‚îú‚îÄ‚îÄ admin_key.pem
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îî‚îÄ‚îÄ README.md                    # –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
```

### Troubleshooting

#### –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è

**1. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ mTLS:**

```bash
# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
ls -la certs/
ls -la keys/

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
openssl x509 -in certs/admin_cert.pem -text -noout
openssl x509 -in certs/ca_cert.pem -text -noout
```

**2. –û—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**

```bash
# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
netstat -tlnp | grep :8443

# –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ lsof
lsof -i :8443
```

**3. –û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤:**

```bash
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ
source .venv/bin/activate

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
pip list | grep mcp
pip list | grep hypercorn
```

**4. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞:**

```bash
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —á—Ç–µ–Ω–∏—è
chmod 644 certs/*.pem
chmod 600 keys/*.pem
```

### –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

#### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞

```json
{
  "server": {
    "host": "127.0.0.1",
    "port": 8000
  },
  "ssl": {
    "enabled": true,
    "cert_file": "./certs/server_cert.pem",
    "key_file": "./certs/server_key.pem",
    "ca_cert": "./certs/ca_cert.pem",
    "verify_client": true
  },
  "security": {
    "enabled": true,
    "auth": {
      "enabled": true,
      "methods": ["certificate"]
    },
    "permissions": {
      "enabled": true,
      "roles_file": "./configs/roles.json"
    }
  },
  "commands": {
    "auto_discovery": true,
    "builtin_commands": ["echo", "health", "config"]
  },
  "logging": {
    "level": "INFO",
    "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  }
}
```

#### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞

```json
{
  "server_url": "https://127.0.0.1:8443",
  "timeout": 30,
  "retry_attempts": 3,
  "retry_delay": 1,
  "security": {
    "auth_method": "certificate",
    "ssl": {
      "enabled": true,
      "check_hostname": false,
      "verify": false,
      "ca_cert_file": "./certs/ca_cert.pem"
    },
    "certificate": {
      "enabled": true,
      "cert_file": "./certs/admin_cert.pem",
      "key_file": "./certs/admin_key.pem"
    }
  }
}
```

### API Reference

#### –û—Å–Ω–æ–≤–Ω—ã–µ endpoints

- `GET /health` - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
- `POST /api/jsonrpc` - JSON-RPC endpoint
- `GET /proxy/discover` - Proxy discovery (—Ç–æ–ª—å–∫–æ –≤ full_application)
- `POST /proxy/register` - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ proxy
- `POST /proxy/heartbeat` - –û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat
- `POST /proxy/unregister` - –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞

#### JSON-RPC –º–µ—Ç–æ–¥—ã

- `echo` - –í–æ–∑–≤—Ä–∞—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- `help` - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
- `config` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- `proxy_discover` - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ proxy
- `proxy_register` - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ proxy
- `proxy_heartbeat` - –û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat

### Development

#### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

```bash
# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
git clone https://github.com/maverikod/mcp-proxy-adapter.git
cd mcp-proxy-adapter

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
python -m venv .venv
source .venv/bin/activate  # Windows: .venv\Scripts\activate

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
pip install -e ".[dev]"
```

#### –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤

```bash
# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
pytest tests/

# –ó–∞–ø—É—Å–∫ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
pytest --cov=mcp_proxy_adapter tests/

# –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
pytest tests/test_proxy_registration.py -v
```

#### –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

```bash
# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
python -m mcp_proxy_adapter.main --config examples/server_configs/config_simple.json --reload

# –ó–∞–ø—É—Å–∫ —Å –æ—Ç–ª–∞–¥–∫–æ–π
PYTHONPATH=. python examples/basic_framework/main.py --config configs/http_simple.json --debug
```

### Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

### License

MIT License - see LICENSE file for details.

## Author

**Vasiliy Zdanovskiy** - vasilyvz@gmail.com

## ü§ù Support & Contributing

- **üìß Email**: vasilyvz@gmail.com
- **üêõ Issues**: [GitHub Issues](https://github.com/maverikod/mcp-proxy-adapter/issues)
- **üìö Documentation**: [GitHub Wiki](https://github.com/maverikod/mcp-proxy-adapter/wiki)
- **üí¨ Discussions**: [GitHub Discussions](https://github.com/maverikod/mcp-proxy-adapter/discussions)

## üìÑ License

MIT License - see [LICENSE](https://github.com/maverikod/mcp-proxy-adapter/blob/main/LICENSE) file for details.

## üìä Version

**6.2.9** - Production-ready release with comprehensive security, proxy registration, and PyPI optimization.

---

*Built with ‚ù§Ô∏è for secure microservices development*

---

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç (–±—ã—Å—Ç—Ä–∞—è —Å–ø—Ä–∞–≤–∫–∞)

```bash
# 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
python scripts/init_working_environment.py test_env
cd test_env

# 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
python scripts/generate_test_configs.py --output-dir configs

# 3. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
python examples/basic_framework/main.py --config configs/http_simple.json

# 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ)
python scripts/test_config.py --config configs/http_simple.json

# 5. –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç proxy registration
python scripts/test_proxy_registration.py
```

üéâ **–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MCP Proxy Adapter –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö JSON-RPC –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ proxy registration.** 
