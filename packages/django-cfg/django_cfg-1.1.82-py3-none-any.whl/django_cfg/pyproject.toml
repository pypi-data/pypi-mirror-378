[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "django-cfg"
version = "1.1.64"
description = "ðŸš€ Production-ready Django configuration framework with type-safe settings, smart automation, and modern developer experience"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "ReformsAI Team", email = "dev@reforms.ai"},
]
maintainers = [
    {name = "ReformsAI Team", email = "dev@reforms.ai"},
]
keywords = [
    "django",
    "configuration",
    "pydantic",
    "settings",
    "developer-experience",
    "type-safety",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Django",
    "Framework :: Django :: 5.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Typing :: Typed",
]
requires-python = ">=3.12,<4.0"

# Core dependencies - minimal and essential only
# Note: Django is a peer dependency - users should install it themselves
dependencies = [
    # Core configuration
    "pydantic>=2.11,<3.0",
    "pydantic[email]>=2.11,<3.0",
    "PyYAML>=6.0",
    "pydantic-yaml>=1.6.0",
    
    # CLI and utilities
    "click>=8.2.0",
    "questionary>=2.1.0",
    "rich>=14.1.0",
    "loguru>=0.7.0",
    "colorlog>=6.9.0",
    "cachetools>=6.1.0",
    
    # Development tools (Python 3.12+ only)
    "ngrok>=1.5.1; python_version>='3.12'",
    
    # Database utilities - using psycopg3 with connection pooling support
    "psycopg[binary,pool]>=3.2.0",
    "dj-database-url>=3.0.0",
    
    # Django packages (require Django as peer dependency)
    "whitenoise>=6.8.0",
    "django-cors-headers>=4.7.0",
    "djangorestframework>=3.16.0",
    "djangorestframework-simplejwt>=5.5.0",
    "djangorestframework-simplejwt[token-blacklist]>=5.5.0",
    "drf-nested-routers>=0.94.2",
    "django-filter>=25.0",
    "django-ratelimit (>=4.1.0,<5.0.0)",
    "drf-spectacular>=0.28.0",
    "drf-spectacular-sidecar>=2025.8.1",
    "django-json-widget>=2.0.3",
    "django-extensions>=4.1",
    "django-constance>=4.3.2",
    "django-revolution>=1.0.34",
    "django-unfold>=0.64.0",
    "django-redis>=6.0.0",
    "redis>=6.4.0",
    "hiredis>=2.0.0",
    
    # Optional services
    "pyTelegramBotAPI>=4.28.0",
    "coolname>=2.2.0,<3.0.0",
    "django-admin-rangefilter>=0.13.3,<0.14.0",
    "python-json-logger>=3.3.0,<4.0.0",
    "requests (>=2.32.5,<3.0.0)",
    "currencyconverter (>=0.18.9,<0.19.0)",
    "tiktoken (>=0.11.0,<0.12.0)",
    "openai (>=1.107.1,<2.0.0)",
    "twilio (>=9.8.0,<10.0.0)",
    "sendgrid (>=6.12.4,<7.0.0)",

    # Knowbase
    "beautifulsoup4 (>=4.13.5,<5.0.0)",
    "lxml (>=6.0.1,<7.0.0)",
    "pgvector (>=0.4.1,<0.5.0)",
    "toml (>=0.10.2,<0.11.0)",
]

[project.optional-dependencies]

# Django compatibility - users should install one of these (minimum 5.2)
django52 = ["django>=5.2,<6.0"]

# Development dependencies
dev = [
    # Django for development
    "django>=5.2,<6.0",
    # Testing
    "pytest>=7.0",
    "pytest-django>=4.5.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "factory-boy>=3.2.0",
    # Code quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    # Build and publish tools
    "build>=1.0.0",
    "twine>=4.0.0",
    "tomlkit>=0.13.3",
    "questionary>=2.1.0",
    "rich>=13.0.0",
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
    # Task processing for development
    "dramatiq[redis]>=1.18.0,<2.0",
    "django-dramatiq>=0.14.0,<1.0",
    "redis>=6.4.0,<7.0",
]


# Testing dependencies
test = [
    "django>=5.2,<6.0",
    "pytest>=7.0",
    "pytest-django>=4.5.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "factory-boy>=3.2.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
    "pymdown-extensions>=10.0.0",
]

# Background task processing dependencies
tasks = [
    "dramatiq[redis]>=1.18.0,<2.0",
    "django-dramatiq>=0.14.0,<1.0",
    "redis>=6.4.0,<7.0",
]

# Full feature set (includes all optional dependencies)
full = [
    "django>=5.2,<6.0",
    # Task processing
    "dramatiq[redis]>=1.18.0,<2.0",
    "django-dramatiq>=0.14.0,<1.0",
    "redis>=6.4.0,<7.0",
]

[project.urls]
Homepage = "https://github.com/markolofsen/django-cfg"
Documentation = "https://django-cfg.readthedocs.io"
Repository = "https://github.com/markolofsen/django-cfg.git"
Issues = "https://github.com/markolofsen/django-cfg/issues"
Changelog = "https://github.com/markolofsen/django-cfg/blob/main/CHANGELOG.md"

[project.scripts]
django-cfg = "django_cfg.cli.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/django_cfg"]
exclude = [
    "django_sample",        # Exclude django_sample directory (use archive instead)
    "scripts/",  # Exclude scripts from wheel package
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
include = [
    "src/django_cfg",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
    "requirements*.txt",
    "MANIFEST.in",
]
exclude = [
    "@*",
    "tests",
    "scripts",             # Exclude development scripts
    "*.log",
    ".env*",
    "django_sample",        # Exclude django_sample directory (use archive instead)
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_django = ["django"]
known_first_party = ["django_cfg"]
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
strict_optional = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "django.*",
    "rest_framework.*",
    "django_redis.*",
    "yaml.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
addopts = [
    "--cov=django_cfg",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=50",
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "django_db: marks tests that require database access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/django_cfg"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Ruff configuration (alternative to flake8)
[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert
    "S311",  # pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S106"]  # Allow assert and hardcoded passwords in tests
"*/migrations/*" = ["N806"]  # Allow non-lowercase variable names in migrations

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection (handled by other tools)

[tool.poetry.group.dev.dependencies]
tomlkit = "^0.13.3"
build = "^1.3.0"
rich = "^14.1.0"
questionary = "^2.1.0"
psutil = "^7.0.0"
aiohttp = "^3.12.15"
pytest-asyncio = "^1.2.0"
pillow = "^11.3.0"

