# Generated by Django 5.2.6 on 2025-09-22 17:18

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CloudflareSite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Friendly site name for identification", max_length=100
                    ),
                ),
                (
                    "domain",
                    models.CharField(
                        help_text="Domain name (e.g., example.com)", max_length=253, unique=True
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Site description or notes"),
                ),
                (
                    "zone_id",
                    models.CharField(help_text="Cloudflare Zone ID", max_length=32, unique=True),
                ),
                ("account_id", models.CharField(help_text="Cloudflare Account ID", max_length=32)),
                (
                    "api_token",
                    models.CharField(
                        help_text="Site-specific or account API token", max_length=200
                    ),
                ),
                (
                    "environment",
                    models.CharField(
                        choices=[
                            ("production", "Production"),
                            ("staging", "Staging"),
                            ("development", "Development"),
                            ("testing", "Testing"),
                        ],
                        default="production",
                        help_text="Site environment type",
                        max_length=20,
                    ),
                ),
                (
                    "project",
                    models.CharField(
                        blank=True, help_text="Project or client name", max_length=100
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Custom tags for filtering and organization",
                    ),
                ),
                (
                    "current_status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("maintenance", "Under Maintenance"),
                            ("offline", "Offline"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        help_text="Current operational status",
                        max_length=20,
                    ),
                ),
                (
                    "maintenance_active",
                    models.BooleanField(
                        default=False, help_text="Whether maintenance mode is currently active"
                    ),
                ),
                (
                    "last_status_check",
                    models.DateTimeField(
                        blank=True, help_text="When status was last checked", null=True
                    ),
                ),
                (
                    "worker_name",
                    models.CharField(
                        default="maintenance-mode",
                        help_text="Cloudflare Worker name for maintenance mode",
                        max_length=100,
                    ),
                ),
                (
                    "maintenance_template",
                    models.CharField(
                        default="modern", help_text="Maintenance page template", max_length=50
                    ),
                ),
                (
                    "custom_maintenance_message",
                    models.TextField(
                        blank=True, help_text="Custom maintenance message for this site"
                    ),
                ),
                (
                    "monitoring_enabled",
                    models.BooleanField(
                        default=True, help_text="Enable health monitoring for this site"
                    ),
                ),
                (
                    "health_check_url",
                    models.URLField(
                        blank=True, help_text="Custom health check URL (defaults to domain/health/)"
                    ),
                ),
                (
                    "check_interval",
                    models.PositiveIntegerField(
                        default=300, help_text="Health check interval in seconds"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_maintenance_at",
                    models.DateTimeField(
                        blank=True, help_text="When maintenance was last activated", null=True
                    ),
                ),
                (
                    "allowed_users",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Users with access to manage this site",
                        related_name="accessible_sites",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="Site owner",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owned_sites",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Cloudflare Site",
                "verbose_name_plural": "Cloudflare Sites",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="MaintenanceEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Human-readable maintenance event title", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed description of maintenance work"
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("manual", "Manual Activation"),
                            ("server_down", "Server Unreachable"),
                            ("high_error_rate", "High Error Rate"),
                            ("database_issues", "Database Issues"),
                            ("deployment", "Deployment"),
                            ("security_update", "Security Update"),
                            ("scheduled", "Scheduled Maintenance"),
                            ("emergency", "Emergency Maintenance"),
                        ],
                        default="manual",
                        help_text="Reason for maintenance activation",
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="active",
                        help_text="Current maintenance status",
                        max_length=20,
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, help_text="When maintenance was started"
                    ),
                ),
                (
                    "ended_at",
                    models.DateTimeField(
                        blank=True, help_text="When maintenance was completed", null=True
                    ),
                ),
                (
                    "estimated_duration",
                    models.DurationField(
                        blank=True, help_text="Estimated maintenance duration", null=True
                    ),
                ),
                (
                    "cloudflare_worker_deployed",
                    models.BooleanField(
                        default=False, help_text="Whether Cloudflare Worker was deployed"
                    ),
                ),
                (
                    "cloudflare_deployment_id",
                    models.CharField(
                        blank=True, help_text="Cloudflare deployment identifier", max_length=100
                    ),
                ),
                (
                    "worker_deployment_success",
                    models.BooleanField(
                        default=False, help_text="Whether Worker deployment was successful"
                    ),
                ),
                (
                    "affected_requests",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of requests affected during maintenance"
                    ),
                ),
                (
                    "error_count_before",
                    models.PositiveIntegerField(
                        default=0, help_text="Error count before maintenance"
                    ),
                ),
                (
                    "error_count_during",
                    models.PositiveIntegerField(
                        default=0, help_text="Error count during maintenance"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "completed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who completed maintenance",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="completed_maintenance_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "initiated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who initiated maintenance",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="initiated_maintenance_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sites",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Sites affected by this maintenance event",
                        related_name="maintenance_events",
                        to="django_cfg_maintenance.cloudflaresite",
                    ),
                ),
            ],
            options={
                "verbose_name": "Maintenance Event",
                "verbose_name_plural": "Maintenance Events",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="CloudflareDeployment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "deployment_type",
                    models.CharField(
                        choices=[
                            ("worker", "Cloudflare Worker"),
                            ("page_rule", "Page Rule"),
                            ("dns_record", "DNS Record"),
                            ("ssl_setting", "SSL Setting"),
                            ("custom_error_page", "Custom Error Page"),
                        ],
                        default="worker",
                        help_text="Type of Cloudflare resource being deployed",
                        max_length=50,
                    ),
                ),
                (
                    "resource_name",
                    models.CharField(
                        help_text="Name of the deployed resource (Worker name, Page Rule, etc.)",
                        max_length=200,
                    ),
                ),
                (
                    "resource_id",
                    models.CharField(
                        blank=True,
                        help_text="Cloudflare resource ID after deployment",
                        max_length=100,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("deploying", "Deploying"),
                            ("deployed", "Deployed"),
                            ("failed", "Failed"),
                            ("rolled_back", "Rolled Back"),
                        ],
                        default="pending",
                        help_text="Current deployment status",
                        max_length=20,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When deployment was initiated"
                    ),
                ),
                (
                    "deployed_at",
                    models.DateTimeField(
                        blank=True, help_text="When deployment completed successfully", null=True
                    ),
                ),
                (
                    "failed_at",
                    models.DateTimeField(blank=True, help_text="When deployment failed", null=True),
                ),
                (
                    "configuration",
                    models.JSONField(
                        default=dict,
                        help_text="Deployment configuration (Worker script, Page Rule settings, etc.)",
                    ),
                ),
                (
                    "cloudflare_response",
                    models.JSONField(
                        blank=True, default=dict, help_text="Full response from Cloudflare API"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, help_text="Error message if deployment failed"),
                ),
                (
                    "rollback_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Data needed for rollback (previous configuration, etc.)",
                    ),
                ),
                (
                    "previous_deployment",
                    models.ForeignKey(
                        blank=True,
                        help_text="Previous deployment for rollback",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rollback_deployments",
                        to="django_cfg_maintenance.cloudflaredeployment",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        help_text="Site this deployment belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="deployments",
                        to="django_cfg_maintenance.cloudflaresite",
                    ),
                ),
                (
                    "maintenance_event",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related maintenance event",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cloudflare_deployments",
                        to="django_cfg_maintenance.maintenanceevent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cloudflare Deployment",
                "verbose_name_plural": "Cloudflare Deployments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MaintenanceLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("debug", "Debug"),
                            ("info", "Info"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                            ("critical", "Critical"),
                        ],
                        default="info",
                        help_text="Log level",
                        max_length=20,
                    ),
                ),
                ("message", models.TextField(help_text="Log message")),
                (
                    "details",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional log details (JSON)"
                    ),
                ),
                (
                    "component",
                    models.CharField(
                        blank=True,
                        help_text="Component that generated the log (e.g., 'cloudflare', 'monitoring')",
                        max_length=100,
                    ),
                ),
                (
                    "operation",
                    models.CharField(
                        blank=True,
                        help_text="Operation being performed (e.g., 'deploy_worker', 'health_check')",
                        max_length=100,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the log entry was created",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        help_text="Related maintenance event",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logs",
                        to="django_cfg_maintenance.maintenanceevent",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User associated with this log entry",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Maintenance Log",
                "verbose_name_plural": "Maintenance Logs",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="MonitoringTarget",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("check_url", models.URLField(help_text="URL to check for health status")),
                (
                    "check_interval",
                    models.PositiveIntegerField(default=60, help_text="Check interval in seconds"),
                ),
                (
                    "timeout",
                    models.PositiveIntegerField(default=10, help_text="Request timeout in seconds"),
                ),
                (
                    "expected_status_codes",
                    models.JSONField(
                        default=list, help_text="Expected HTTP status codes (e.g., [200, 201])"
                    ),
                ),
                (
                    "expected_response_time_ms",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum expected response time in milliseconds",
                        null=True,
                    ),
                ),
                (
                    "expected_content",
                    models.TextField(
                        blank=True, help_text="Expected content in response body (substring match)"
                    ),
                ),
                (
                    "failure_threshold",
                    models.PositiveIntegerField(
                        default=3, help_text="Consecutive failures before triggering maintenance"
                    ),
                ),
                (
                    "recovery_threshold",
                    models.PositiveIntegerField(
                        default=2, help_text="Consecutive successes before disabling maintenance"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("paused", "Paused"),
                            ("disabled", "Disabled"),
                            ("error", "Error"),
                        ],
                        default="active",
                        help_text="Current monitoring status",
                        max_length=20,
                    ),
                ),
                (
                    "consecutive_failures",
                    models.PositiveIntegerField(
                        default=0, help_text="Current consecutive failure count"
                    ),
                ),
                (
                    "consecutive_successes",
                    models.PositiveIntegerField(
                        default=0, help_text="Current consecutive success count"
                    ),
                ),
                (
                    "last_check_at",
                    models.DateTimeField(
                        blank=True, help_text="When last health check was performed", null=True
                    ),
                ),
                (
                    "last_check_success",
                    models.BooleanField(
                        default=True, help_text="Whether last check was successful"
                    ),
                ),
                (
                    "last_response_time_ms",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Response time of last check in milliseconds",
                        null=True,
                    ),
                ),
                (
                    "auto_enable_maintenance",
                    models.BooleanField(
                        default=True,
                        help_text="Automatically enable maintenance on failure threshold",
                    ),
                ),
                (
                    "auto_disable_maintenance",
                    models.BooleanField(
                        default=True,
                        help_text="Automatically disable maintenance on recovery threshold",
                    ),
                ),
                (
                    "maintenance_triggered_at",
                    models.DateTimeField(
                        blank=True, help_text="When maintenance was last auto-triggered", null=True
                    ),
                ),
                (
                    "user_agent",
                    models.CharField(
                        default="Django-CFG-Monitor/1.0",
                        help_text="User agent for health checks",
                        max_length=200,
                    ),
                ),
                (
                    "follow_redirects",
                    models.BooleanField(
                        default=True, help_text="Follow HTTP redirects during checks"
                    ),
                ),
                (
                    "verify_ssl",
                    models.BooleanField(default=True, help_text="Verify SSL certificates"),
                ),
                (
                    "custom_headers",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Custom headers for health check requests",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "site",
                    models.OneToOneField(
                        help_text="Site being monitored",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="monitoring_target",
                        to="django_cfg_maintenance.cloudflaresite",
                    ),
                ),
            ],
            options={
                "verbose_name": "Monitoring Target",
                "verbose_name_plural": "Monitoring Targets",
            },
        ),
        migrations.CreateModel(
            name="HealthCheckResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now, help_text="When the check was performed"
                    ),
                ),
                ("success", models.BooleanField(help_text="Whether the check was successful")),
                (
                    "status_code",
                    models.PositiveIntegerField(
                        blank=True, help_text="HTTP response status code", null=True
                    ),
                ),
                (
                    "response_time_ms",
                    models.PositiveIntegerField(
                        blank=True, help_text="Response time in milliseconds", null=True
                    ),
                ),
                (
                    "response_size_bytes",
                    models.PositiveIntegerField(
                        blank=True, help_text="Response size in bytes", null=True
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, help_text="Error message if check failed"),
                ),
                (
                    "error_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of error (timeout, connection, etc.)",
                        max_length=100,
                    ),
                ),
                (
                    "details",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional check details (headers, content, etc.)",
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        help_text="Monitoring target this result belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="django_cfg_maintenance.monitoringtarget",
                    ),
                ),
            ],
            options={
                "verbose_name": "Health Check Result",
                "verbose_name_plural": "Health Check Results",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="SiteGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(help_text="Group name", max_length=100)),
                ("description", models.TextField(blank=True, help_text="Group description")),
                (
                    "auto_maintenance_rules",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Automatic maintenance rules for this group",
                    ),
                ),
                (
                    "notification_settings",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Notification preferences for group events",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="Group owner",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sites",
                    models.ManyToManyField(
                        help_text="Sites in this group",
                        related_name="groups",
                        to="django_cfg_maintenance.cloudflaresite",
                    ),
                ),
            ],
            options={
                "verbose_name": "Site Group",
                "verbose_name_plural": "Site Groups",
                "ordering": ["name"],
            },
        ),
        migrations.AddIndex(
            model_name="cloudflaresite",
            index=models.Index(
                fields=["owner", "environment"], name="django_cfg__owner_i_5d4060_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cloudflaresite",
            index=models.Index(
                fields=["project", "environment"], name="django_cfg__project_9a07f1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cloudflaresite",
            index=models.Index(fields=["current_status"], name="django_cfg__current_fcca20_idx"),
        ),
        migrations.AddIndex(
            model_name="cloudflaresite",
            index=models.Index(
                fields=["maintenance_active"], name="django_cfg__mainten_0c725d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cloudflaresite",
            index=models.Index(fields=["domain"], name="django_cfg__domain_179845_idx"),
        ),
        migrations.AddIndex(
            model_name="maintenanceevent",
            index=models.Index(
                fields=["status", "-started_at"], name="django_cfg__status_a7d5f3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="maintenanceevent",
            index=models.Index(
                fields=["reason", "-started_at"], name="django_cfg__reason_214648_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="maintenanceevent",
            index=models.Index(
                fields=["initiated_by", "-started_at"], name="django_cfg__initiat_7ad0ad_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cloudflaredeployment",
            index=models.Index(
                fields=["site", "-created_at"], name="django_cfg__site_id_7414e8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cloudflaredeployment",
            index=models.Index(
                fields=["status", "-created_at"], name="django_cfg__status_ee1f80_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cloudflaredeployment",
            index=models.Index(
                fields=["deployment_type", "-created_at"], name="django_cfg__deploym_bc24ff_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cloudflaredeployment",
            index=models.Index(fields=["resource_id"], name="django_cfg__resourc_fab8ca_idx"),
        ),
        migrations.AddIndex(
            model_name="maintenancelog",
            index=models.Index(
                fields=["event", "-timestamp"], name="django_cfg__event_i_b03d81_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="maintenancelog",
            index=models.Index(fields=["level", "-timestamp"], name="django_cfg__level_b66e18_idx"),
        ),
        migrations.AddIndex(
            model_name="maintenancelog",
            index=models.Index(
                fields=["component", "-timestamp"], name="django_cfg__compone_35dbe4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="monitoringtarget",
            index=models.Index(
                fields=["status", "last_check_at"], name="django_cfg__status_e57085_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="monitoringtarget",
            index=models.Index(
                fields=["site", "-last_check_at"], name="django_cfg__site_id_37651c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="healthcheckresult",
            index=models.Index(
                fields=["target", "-timestamp"], name="django_cfg__target__1a3262_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="healthcheckresult",
            index=models.Index(
                fields=["success", "-timestamp"], name="django_cfg__success_6181d8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="healthcheckresult",
            index=models.Index(fields=["-timestamp"], name="django_cfg__timesta_ba6784_idx"),
        ),
        migrations.AddIndex(
            model_name="sitegroup",
            index=models.Index(fields=["owner", "name"], name="django_cfg__owner_i_6ba808_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="sitegroup",
            unique_together={("name", "owner")},
        ),
    ]
