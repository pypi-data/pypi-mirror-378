[project]
name = "gh-toolkit"
version = "0.10.3"
description = "GitHub repository portfolio management and presentation toolkit"
readme = "README.md"
authors = [
    { name = "Michael Borck", email = "michael.borck@curtin.edu.au" }
]
requires-python = ">=3.12"
dependencies = [
    "requests>=2.31.0",
    "anthropic>=0.25.0",
    "pyyaml>=6.0",
    "typer>=0.12.0",
    "rich>=13.0.0",
    "pathlib-mate>=1.0.0",
    "mistune>=3.0.0",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Version Control :: Git",
]
keywords = ["github", "repository", "management", "portfolio", "cli"]

[project.urls]
Homepage = "https://github.com/michael-borck/gh-toolkit"
Repository = "https://github.com/michael-borck/gh-toolkit"
Issues = "https://github.com/michael-borck/gh-toolkit/issues"

[project.optional-dependencies]
dev = [
    "ruff>=0.4.0",
    "basedpyright>=1.12.0",
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pre-commit>=3.7.0",
]

[project.scripts]
gh-toolkit = "gh_toolkit.cli:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings  
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.basedpyright]
pythonVersion = "3.12"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedVariable = true
reportUnnecessaryTypeIgnoreComment = true
reportPrivateUsage = true
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportUninitializedInstanceVariable = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "responses>=0.25.7",
    "twine>=6.1.0",
]
