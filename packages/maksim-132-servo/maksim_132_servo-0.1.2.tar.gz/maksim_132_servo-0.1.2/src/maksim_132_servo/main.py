#!/usr/bin/env python3
import serial
import time
import sys
import logging
from typing import Optional, List
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

class ServoController:
    def __init__(self, port='COM3', baudrate=9600):
        """
        –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–µ—Ä–≤–æ–º–æ—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ Arduino
        –†–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Arduino (—Ä–µ–∂–∏–º —ç–º—É–ª—è—Ü–∏–∏)
        """
        self.port = port
        self.baudrate = baudrate
        self.ser = None
        self.connected = False
        self.emulation_mode = False
        self.current_angle = 90  # –¢–µ–∫—É—â–∏–π —É–≥–æ–ª –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏
        
        self._connect()
    
    def _connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Arduino –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —ç–º—É–ª—è—Ü–∏–∏"""
        try:
            self.ser = serial.Serial(
                port=self.port,
                baudrate=self.baudrate,
                timeout=1,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE
            )
            
            # –î–∞–µ–º –≤—Ä–µ–º—è Arduino –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            time.sleep(2)
            
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
            self.ser.reset_input_buffer()
            
            self.connected = True
            self.emulation_mode = False
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Arduino –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
            
        except serial.SerialException as e:
            print(f"‚ö†Ô∏è  Arduino –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É {self.port}: {e}")
            print("üîß –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —ç–º—É–ª—è—Ü–∏–∏")
            self.connected = False
            self.emulation_mode = True
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            print("üîß –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —ç–º—É–ª—è—Ü–∏–∏")
            self.connected = False
            self.emulation_mode = True
    
    def auto_detect_port(self):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ Arduino
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
        """
        available_ports = []
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°
        ports_to_check = []
        if sys.platform.startswith('win'):
            ports_to_check = [f'COM{i}' for i in range(1, 21)]
        elif sys.platform.startswith('linux') or sys.platform.startswith('darwin'):
            ports_to_check = [f'/dev/ttyUSB{i}' for i in range(10)] + [f'/dev/ttyACM{i}' for i in range(10)]
        
        print("üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤...")
        
        for port in ports_to_check:
            try:
                ser = serial.Serial(port, self.baudrate, timeout=0.1)
                ser.close()
                available_ports.append(port)
                print(f"   –ù–∞–π–¥–µ–Ω –ø–æ—Ä—Ç: {port}")
            except (serial.SerialException, OSError):
                pass
        
        return available_ports
    
    def try_reconnect(self, port=None):
        """
        –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Arduino
        """
        if port:
            self.port = port
        
        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.port}...")
        self._connect()
        return self.connected
    
    def set_angle(self, angle):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å–µ—Ä–≤–æ–º–æ—Ç–æ—Ä–∞
        –†–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö (—Ä–µ–∞–ª—å–Ω–æ–º –∏ —ç–º—É–ª—è—Ü–∏–∏)
        """
        if angle < 0 or angle > 180:
            print("‚ùå –£–≥–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 180 –≥—Ä–∞–¥—É—Å–æ–≤")
            return False
        
        if self.connected and self.ser is not None:
            # –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            try:
                command = f"ANGLE:{angle}\n"
                self.ser.write(command.encode('utf-8'))
                
                time.sleep(0.1)
                
                if self.ser.in_waiting > 0:
                    response = self.ser.readline().decode('utf-8').strip()
                    print(f"üì® –û—Ç–≤–µ—Ç Arduino: {response}")
                
                self.current_angle = angle
                print(f"‚úÖ –†–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–æ–º–æ—Ç–æ—Ä: —É–≥–æ–ª {angle}¬∞")
                return True
                
            except serial.SerialException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Arduino: {e}")
                self.connected = False
                self.emulation_mode = True
                return self.set_angle(angle)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏
                
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                return False
        
        else:
            # –†–µ–∂–∏–º —ç–º—É–ª—è—Ü–∏–∏
            self.current_angle = angle
            print(f"üéÆ –≠–º—É–ª—è—Ü–∏—è —Å–µ—Ä–≤–æ–º–æ—Ç–æ—Ä–∞: —É–≥–æ–ª {angle}¬∞")
            time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
            return True
    
    def sweep(self, start=0, end=180, step=10, delay=0.3):
        """
        –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–æ–º–æ—Ç–æ—Ä–∞ –º–µ–∂–¥—É —É–≥–ª–∞–º–∏
        –†–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö
        """
        print(f"üîÑ –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç {start}¬∞ –¥–æ {end}¬∞")
        
        # –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
        for angle in range(start, end + 1, step):
            if self.set_angle(angle):
                time.sleep(delay)
        
        # –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥
        for angle in range(end, start - 1, -step):
            if self.set_angle(angle):
                time.sleep(delay)
    
    def get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.connected:
            return f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Arduino –Ω–∞ –ø–æ—Ä—Ç—É {self.port}"
        elif self.emulation_mode:
            return "üéÆ –†–µ–∂–∏–º —ç–º—É–ª—è—Ü–∏–∏ (Arduino –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)"
        else:
            return "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.ser and self.ser.is_open:
            self.ser.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Arduino –∑–∞–∫—Ä—ã—Ç–æ")
        self.connected = False
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.close()


class TelegramServoBot:
    def __init__(self, token: str, servo_controller: ServoController):
        """
        Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–æ–º–æ—Ç–æ—Ä–æ–º
        """
        self.token = token
        self.servo = servo_controller
        self.application = Application.builder().token(token).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.setup_handlers()
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        self.keyboard = ReplyKeyboardMarkup(
            [
                ["0¬∞", "45¬∞", "90¬∞", "135¬∞", "180¬∞"],
                ["–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", "–°—Ç–∞—Ç—É—Å", "–ü–æ–º–æ—â—å", "–ü–æ–∏—Å–∫ Arduino"]
            ],
            resize_keyboard=True
        )
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("scan", self.scan_command))
        self.application.add_handler(CommandHandler("angle", self.angle_command))
        self.application.add_handler(CommandHandler("find_arduino", self.find_arduino_command))
        self.application.add_handler(CommandHandler("reconnect", self.reconnect_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = f"""
        ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Servo Control Bot!
        
        {self.servo.get_status()}
        
        üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
        /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
        /status - –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        /scan - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å (0¬∞-180¬∞-0¬∞)
        /angle [–∑–Ω–∞—á–µ–Ω–∏–µ] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≥–æ–ª (0-180)
        /find_arduino - –ù–∞–π—Ç–∏ Arduino –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        /reconnect - –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        
        üéÆ –†–µ–∂–∏–º —ç–º—É–ª—è—Ü–∏–∏: –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –±–µ–∑ Arduino!
        
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚¨áÔ∏è
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=self.keyboard
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = f"""
        üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:
        
        {self.servo.get_status()}
        
        –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
        /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
        /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        /scan - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (0¬∞-180¬∞-0¬∞)
        /angle [–∑–Ω–∞—á–µ–Ω–∏–µ] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É–≥–æ–ª
        /find_arduino - –ê–≤—Ç–æ–ø–æ–∏—Å–∫ Arduino
        /reconnect - –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ—Ä—Ç—É
        
        üéÆ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
        - –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏ –µ—Å–ª–∏ Arduino –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        - –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ
        - –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ Arduino –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        
        –ü—Ä–∏–º–µ—Ä—ã:
        /angle 90 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≥–æ–ª 90 –≥—Ä–∞–¥—É—Å–æ–≤
        /scan - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        
        await update.message.reply_text(help_text)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        status_text = f"""
        üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:
        
        {self.servo.get_status()}
        –¢–µ–∫—É—â–∏–π —É–≥–æ–ª: {self.servo.current_angle}¬∞
        
        üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find_arduino –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        –∏–ª–∏ /reconnect COM3 –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ COM3 –Ω–∞ –≤–∞—à –ø–æ—Ä—Ç)
        """
        
        await update.message.reply_text(status_text)
    
    async def scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan"""
        mode = "–†–µ–∞–ª—å–Ω—ã–π" if self.servo.connected else "–≠–º—É–ª—è—Ü–∏—è"
        await update.message.reply_text(f"üîÑ –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ({mode} —Ä–µ–∂–∏–º)...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def scan():
            self.servo.sweep()
        
        import threading
        thread = threading.Thread(target=scan)
        thread.start()
        
        await update.message.reply_text("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    async def angle_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /angle"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —É–≥–æ–ª: /angle 90")
            return
        
        try:
            angle = int(context.args[0])
            success = self.servo.set_angle(angle)
            
            mode = "–†–µ–∞–ª—å–Ω—ã–π" if self.servo.connected else "–≠–º—É–ª—è—Ü–∏—è"
            if success:
                await update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É–≥–æ–ª: {angle}¬∞ ({mode} —Ä–µ–∂–∏–º)")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≥–æ–ª")
        except ValueError:
            await update.message.reply_text("‚ùå –£–≥–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    
    async def find_arduino_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_arduino"""
        await update.message.reply_text("üîç –ò—â—É Arduino –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö...")
        
        available_ports = self.servo.auto_detect_port()
        
        if available_ports:
            response = "üìã –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ä—Ç—ã:\n" + "\n".join([f"‚Ä¢ {port}" for port in available_ports])
            response += f"\n\nüîÑ –ü—Ä–æ–±—É—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {available_ports[0]}..."
            
            await update.message.reply_text(response)
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–µ—Ä–≤–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –ø–æ—Ä—Ç—É
            if self.servo.try_reconnect(available_ports[0]):
                await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {available_ports[0]}!")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. –û—Å—Ç–∞—é—Å—å –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏.")
        else:
            await update.message.reply_text("‚ùå Arduino –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Å—Ç–∞—é—Å—å –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏.")
    
    async def reconnect_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reconnect"""
        port = context.args[0] if context.args else self.servo.port
        
        await update.message.reply_text(f"üîÑ –ü—Ä–æ–±—É—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {port}...")
        
        if self.servo.try_reconnect(port):
            await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {port}!")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {port}. –û—Å—Ç–∞—é—Å—å –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏.")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.lower()
        
        if text == "—Å—Ç–∞—Ç—É—Å":
            await self.status_command(update, context)
        elif text == "—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å":
            await self.scan_command(update, context)
        elif text == "–ø–æ–º–æ—â—å":
            await self.help_command(update, context)
        elif text == "–ø–æ–∏—Å–∫ arduino":
            await self.find_arduino_command(update, context)
        elif text.endswith("¬∞"):
            try:
                angle = int(text.replace("¬∞", "").strip())
                success = self.servo.set_angle(angle)
                
                mode = "–†–µ–∞–ª—å–Ω—ã–π" if self.servo.connected else "–≠–º—É–ª—è—Ü–∏—è"
                if success:
                    await update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É–≥–æ–ª: {angle}¬∞ ({mode} —Ä–µ–∂–∏–º)")
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≥–æ–ª")
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–≥–ª–∞")
        else:
            await update.message.reply_text(
                "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
                reply_markup=self.keyboard
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {self.servo.get_status()}")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)