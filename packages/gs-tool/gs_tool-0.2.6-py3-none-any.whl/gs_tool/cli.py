"""
GS Tool CLI
===========

–£—Ç–∏–ª–∏—Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ (GS scripts):

- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ (`gs create <name>`)
- –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–∫–ª—é–¥–∞ (`gs preprocess`)
- –°–±–æ—Ä–∫–∞ (–∫–æ–º–ø–∏–ª—è—Ü–∏—è) —Å–∫—Ä–∏–ø—Ç–∞ (`gs build`)
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ (`gs release`)
- –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (`gs push`)
- –í—ã–ø—É—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ application tokens / PAT (`gs token ...`)

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–ª—è –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç Jinja2
  (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ).
- –î–ª—è —Å–±–æ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä pawncc; –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞ macOS/Linux
  –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω dummy AMX –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞.
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫–ª—é—á–µ–π —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ `~/.gs_tool/config.json`.

–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã:
  $ gs create my_script
  $ cd my_script && gs build
  $ gs release && gs push --company-id=<COMPANY_ID>
  $ gs token create --email you@example.com  # –≤—ã–ø—É—Å–∫ PAT –∏ –∑–∞–ø–∏—Å—å –≤ –∫–æ–Ω—Ñ–∏–≥
"""

import click
import os
import json
import requests
import datetime
import shutil
import uuid
import subprocess
import tempfile
import struct
import binascii
import re
import zipfile
import sys
import hashlib  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è SHA-256
from typing import Optional
from pathlib import Path
from .config import load_config
from getpass import getpass
import io

PROJECT_FILE = 'gs_project.json'
HISTORY_DIR = '.gs_history'

def _mask_secret(value: Optional[str]) -> Optional[str]:
    if not isinstance(value, str):
        return value
    if len(value) <= 8:
        return "***"
    return f"{value[:6]}...{value[-4:]}"

def _debug_print_request(method: str, url: str, headers: dict):
    try:
        sanitized = dict(headers or {})
        if 'Authorization' in sanitized and isinstance(sanitized['Authorization'], str):
            # Mask Bearer token
            parts = sanitized['Authorization'].split(" ", 1)
            if len(parts) == 2 and parts[0].lower() == 'bearer':
                sanitized['Authorization'] = f"Bearer {_mask_secret(parts[1])}"
            else:
                sanitized['Authorization'] = _mask_secret(sanitized['Authorization'])
        if 'X-Api-Key' in sanitized:
            sanitized['X-Api-Key'] = _mask_secret(sanitized.get('X-Api-Key'))
        click.echo("\nüîé HTTP Debug: preparing request")
        click.echo(f"  ‚Üí {method.upper()} {url}")
        click.echo(f"  ‚Üí Headers: {json.dumps(sanitized, ensure_ascii=False)}")
    except Exception:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –æ—Ç–ª–∞–¥–∫–∏
        pass

def extract_field_signature(field):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—É –ø–æ–ª—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (idx, type, name, ui.options –¥–ª—è enum)."""
    signature = {
        'idx': field.get('idx'),
        'type': field.get('type'),
        'name': field.get('name')
    }
    # –î–ª—è enum —Ç–∞–∫–∂–µ –≤–∞–∂–Ω—ã –æ–ø—Ü–∏–∏
    if field.get('type') == 'ENUM':
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ enum: –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º enum_values (–∫–∞–Ω–æ–Ω–∏–∫–∞)
        enum_values = field.get('enum_values')
        if isinstance(enum_values, dict):
            # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            signature['enum_options'] = sorted(enum_values.items())
        else:
            # fallback: ui.options
            ui = field.get('ui') or {}
            if isinstance(ui.get('options'), list):
                signature['enum_options'] = [(opt.get('name'), opt.get('value')) for opt in ui['options']]
    return signature

def check_config_compatibility(current_config, previous_configs):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–ª–∏–∑–∞–º–∏.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (entry_compatible, descriptor_compatible, changes_description)
    –≥–¥–µ:
    - entry_compatible: bool - –Ω—É–∂–Ω–æ –ª–∏ –º–µ–Ω—è—Ç—å uuid_cfg_entry
    - descriptor_compatible: bool - –Ω—É–∂–Ω–æ –ª–∏ –º–µ–Ω—è—Ç—å uuid_cfg_descriptor  
    - changes_description: str - –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    changes = []
    entry_breaking_changes = False
    descriptor_breaking_changes = False
    
    current_fields = {f['name']: f for f in current_config.get('fields', [])}
    
    for prev_config in previous_configs:
        prev_fields = {f['name']: f for f in prev_config.get('fields', [])}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—è—Ö
        for field_name, prev_field in prev_fields.items():
            if field_name in current_fields:
                current_field = current_fields[field_name]
                prev_sig = extract_field_signature(prev_field)
                curr_sig = extract_field_signature(current_field)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–∞—Ä—É—à–∞—é—â–∏—Ö entry compatibility
                if prev_sig != curr_sig:
                    entry_breaking_changes = True
                    changes.append(f"–ü–æ–ª–µ '{field_name}' –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {prev_sig} -> {curr_sig}")
                
                # –õ—é–±–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø–æ–ª—è—Ö –Ω–∞—Ä—É—à–∞–µ—Ç descriptor compatibility
                if prev_field != current_field:
                    descriptor_breaking_changes = True
                    if prev_sig == curr_sig:
                        changes.append(f"–ü–æ–ª–µ '{field_name}' –∏–∑–º–µ–Ω–∏–ª–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (ui, default, etc)")
            else:
                # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—è - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                entry_breaking_changes = True
                descriptor_breaking_changes = True
                changes.append(f"–ü–æ–ª–µ '{field_name}' –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è (—ç—Ç–æ –∏–∑–º–µ–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ descriptor, –Ω–µ entry)
        for field_name in current_fields:
            if field_name not in prev_fields:
                descriptor_breaking_changes = True
                changes.append(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–ª–µ '{field_name}'")
    
    return entry_breaking_changes, descriptor_breaking_changes, '\n'.join(changes)

def get_previous_releases():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–ª–∏–∑–æ–≤."""
    if not os.path.exists(HISTORY_DIR):
        return []
    
    previous_configs = []
    releases = [f for f in os.listdir(HISTORY_DIR) if f.startswith('release_v') and f.endswith('.zip')]
    
    for release in sorted(releases):
        try:
            with zipfile.ZipFile(os.path.join(HISTORY_DIR, release), 'r') as zf:
                with zf.open(PROJECT_FILE) as f:
                    data = json.load(f)
                    previous_configs.append(data.get('config', {}))
        except:
            continue
    
    return previous_configs

def crc32(data: bytes) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç CRC32 –¥–ª—è –¥–∞–Ω–Ω—ã—Ö."""
    polynom = 0xEDB88320
    sum_value = 0xFFFFFFFF
    
    for byte in data:
        sum_value ^= byte
        for _ in range(8):
            sum_value = ((-(sum_value & 1) & polynom) ^ (sum_value >> 1)) & 0xFFFFFFFF
    
    return sum_value & 0xFFFFFFFF

def debug_amx_header(bytecode_data: bytes) -> None:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥–æ–ª–æ–≤–∫–µ AMX –±–∞–π—Ç–∫–æ–¥–∞."""
    if len(bytecode_data) < 56:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä AMX_HEADER
        click.echo("‚ùå –ë–∞–π—Ç–∫–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ AMX –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º AMX_HEADER —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        size = struct.unpack('<I', bytecode_data[0:4])[0]
        magic = struct.unpack('<H', bytecode_data[4:6])[0]
        file_version = bytecode_data[6]
        amx_version = bytecode_data[7]
        flags = struct.unpack('<h', bytecode_data[8:10])[0]
        defsize = struct.unpack('<h', bytecode_data[10:12])[0]
        cod = struct.unpack('<i', bytecode_data[12:16])[0]
        dat = struct.unpack('<i', bytecode_data[16:20])[0]
        hea = struct.unpack('<i', bytecode_data[20:24])[0]
        stp = struct.unpack('<i', bytecode_data[24:28])[0]
        cip = struct.unpack('<i', bytecode_data[28:32])[0]
        publics = struct.unpack('<i', bytecode_data[32:36])[0]
        natives = struct.unpack('<i', bytecode_data[36:40])[0]
        libraries = struct.unpack('<i', bytecode_data[40:44])[0]
        pubvars = struct.unpack('<i', bytecode_data[44:48])[0]
        tags = struct.unpack('<i', bytecode_data[48:52])[0]
        nametable = struct.unpack('<i', bytecode_data[52:56])[0]
        
        click.echo("üîç === –ê–Ω–∞–ª–∏–∑ AMX –∑–∞–≥–æ–ª–æ–≤–∫–∞ ===")
        click.echo(f"üì¶ –ü–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size} –±–∞–π—Ç")
        click.echo(f"üîÆ –ú–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ: 0x{magic:04X} {'‚úÖ' if magic == 0xF1E0 else '‚ùå (–æ–∂–∏–¥–∞–µ—Ç—Å—è 0xF1E0)'}")
        click.echo(f"üìÑ –í–µ—Ä—Å–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞: {file_version}")
        click.echo(f"‚öôÔ∏è  –í–µ—Ä—Å–∏—è AMX –¥–≤–∏–∂–∫–∞: {amx_version}")
        click.echo(f"üèÅ –§–ª–∞–≥–∏: 0x{flags:04X}")
        click.echo(f"üìè –†–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã: {defsize} –±–∞–π—Ç")
        click.echo(f"üíæ Offset –±–∞–π—Ç–∫–æ–¥–∞ (cod): 0x{cod:04X} ({cod})")
        click.echo(f"üìä Offset –¥–∞–Ω–Ω—ã—Ö (dat): 0x{dat:04X} ({dat})")
        click.echo(f"üóÑÔ∏è  –ù–∞—á–∞–ª—å–Ω—ã–π heap (hea): 0x{hea:04X} ({hea})")
        click.echo(f"üìö Stack top (stp): 0x{stp:04X} ({stp})")
        click.echo(f"üéØ Instruction pointer (cip): 0x{cip:04X} ({cip})")
        click.echo(f"üîß Public —Ñ—É–Ω–∫—Ü–∏–∏: 0x{publics:04X} ({publics})")
        click.echo(f"üõ†Ô∏è  Native —Ñ—É–Ω–∫—Ü–∏–∏: 0x{natives:04X} ({natives})")
        click.echo(f"üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏: 0x{libraries:04X} ({libraries})")
        click.echo(f"üåç Public –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: 0x{pubvars:04X} ({pubvars})")
        click.echo(f"üè∑Ô∏è  –¢–µ–≥–∏: 0x{tags:04X} ({tags})")
        click.echo(f"üìù –¢–∞–±–ª–∏—Ü–∞ –∏–º—ë–Ω: 0x{nametable:04X} ({nametable})")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if size != len(bytecode_data):
            click.echo(f"‚ö†Ô∏è  –†–∞–∑–º–µ—Ä –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ ({size}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É ({len(bytecode_data)})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ offset'—ã
        if cod > len(bytecode_data):
            click.echo(f"‚ùå Offset –±–∞–π—Ç–∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Ñ–∞–π–ª–∞")
        if dat > len(bytecode_data):
            click.echo(f"‚ùå Offset –¥–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Ñ–∞–π–ª–∞")
            
        click.echo("üîç === –ö–æ–Ω–µ—Ü –∞–Ω–∞–ª–∏–∑–∞ ===")
        
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ AMX –∑–∞–≥–æ–ª–æ–≤–∫–∞: {str(e)}")

def create_binary_header(name: str, script_uuid_str: str, config_uuid_str: str, desc_uuid_str: str, version: str, data: bytes, desc_bytes: bytes) -> bytes:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π DataHeader (256 –±–∞–π—Ç).

    –û–±–Ω–æ–≤–ª–µ–Ω–∏—è:
    - –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ descSize (4 –±–∞–π—Ç–∞, little-endian) ‚Äî —Ä–∞–∑–º–µ—Ä zip-–¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥—É–µ—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –±–∞–π—Ç–∫–æ–¥–∞
    - –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞ –¥–æ 24 –±–∞–π—Ç, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è 256 –±–∞–π—Ç
    """
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    MAX_SCRIPT_NAME_SIZE = 128
    MAX_VERSION_SIZE = 12
    MAX_DATA_SIZE = 1024 * 1024
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    if len(name.encode('utf-8')) >= MAX_SCRIPT_NAME_SIZE:
        raise ValueError(f"–ò–º—è —Å–∫—Ä–∏–ø—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {len(name)} —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º {MAX_SCRIPT_NAME_SIZE-1}")
    if len(version.encode('utf-8')) >= MAX_VERSION_SIZE:
        raise ValueError(f"–í–µ—Ä—Å–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è: {len(version)} —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º {MAX_VERSION_SIZE-1}")
    if len(data) > MAX_DATA_SIZE:
        raise ValueError(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º: {len(data)} > {MAX_DATA_SIZE}")
    
    header = bytearray(256)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä 256 –±–∞–π—Ç
    offset = 0
    
    # 1. scriptUuid (16 –±–∞–π—Ç –±–∏–Ω–∞—Ä–Ω–æ)
    script_uuid_bytes = uuid.UUID(script_uuid_str).bytes
    header[offset:offset + 16] = script_uuid_bytes
    offset += 16
    
    # 2. commitHash (32 –±–∞–π—Ç–∞, SHA-256 –æ—Ç –¥–∞–Ω–Ω—ã—Ö)
    commit_hash = hashlib.sha256(data).digest()
    header[offset:offset + 32] = commit_hash
    offset += 32
    
    # 3. configUuid (16 –±–∞–π—Ç –±–∏–Ω–∞—Ä–Ω–æ)
    config_uuid_bytes = uuid.UUID(config_uuid_str).bytes
    header[offset:offset + 16] = config_uuid_bytes
    offset += 16
    
    # 4. descUuid (16 –±–∞–π—Ç –±–∏–Ω–∞—Ä–Ω–æ)
    desc_uuid_bytes = uuid.UUID(desc_uuid_str).bytes
    header[offset:offset + 16] = desc_uuid_bytes
    offset += 16
    
    # 5. name (128 –±–∞–π—Ç, —Å –Ω—É–ª—å-—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–µ–π)
    name_bytes = name.encode('utf-8')[:MAX_SCRIPT_NAME_SIZE - 1] + b'\0'
    header[offset:offset + MAX_SCRIPT_NAME_SIZE] = name_bytes.ljust(MAX_SCRIPT_NAME_SIZE, b'\0')
    offset += MAX_SCRIPT_NAME_SIZE
    
    # 6. version (12 –±–∞–π—Ç, —Å –Ω—É–ª—å-—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–µ–π)
    version_bytes = version.encode('utf-8')[:MAX_VERSION_SIZE - 1] + b'\0'
    header[offset:offset + MAX_VERSION_SIZE] = version_bytes.ljust(MAX_VERSION_SIZE, b'\0')
    offset += MAX_VERSION_SIZE
    
    # 7. size (4 –±–∞–π—Ç–∞, little-endian) ‚Äî —Å—É–º–º–∞—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä p-–∫–æ–¥–∞ –∏ zip-–¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞
    desc_size_value = len(desc_bytes) if desc_bytes is not None else 0

    struct.pack_into('<I', header, offset, len(data) + desc_size_value)
    offset += 4
    
    # 8. crc32 (4 –±–∞–π—Ç–∞, little-endian)
    crc = crc32(data + (desc_bytes or b""))
    struct.pack_into('<I', header, offset, crc)
    offset += 4
    
    # 9. descSize (4 –±–∞–π—Ç–∞, little-endian) ‚Äî —Ä–∞–∑–º–µ—Ä zip –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–¥—ë—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ p-–∫–æ–¥–∞
    struct.pack_into('<I', header, offset, desc_size_value)
    offset += 4

    # 10. reserved (24 –±–∞–π—Ç–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω—É–ª—è–º–∏)
    # –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –Ω—É–ª—è–º–∏ –≤ bytearray
    
    return bytes(header)


def build_descriptor_zip(project_data: dict) -> bytes:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç zip (DEFLATED) —Å —Ñ–∞–π–ª–æ–º descriptor.json –∏–∑ —Ç–µ—Ö –∂–µ –¥–∞–Ω–Ω—ã—Ö,
    —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –ø–æ–ª–µ descriptor_schema.

    –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: –æ–¥–∏–Ω —Ñ–∞–π–ª 'descriptor.json' (UTF-8), –±–µ–∑ BOM.
    """
    ds = {
        "config": project_data.get("config", {}),
        "datasources": project_data.get("datasources", {}),
        "subscriptions": project_data.get("subscriptions", []),
        "api": project_data.get("api", {}),
    }
    json_bytes = json.dumps(ds, ensure_ascii=False, separators=(",", ":")).encode("utf-8")
    buffer = io.BytesIO()
    with zipfile.ZipFile(buffer, mode='w', compression=zipfile.ZIP_DEFLATED) as zf:
        zf.writestr('descriptor.json', json_bytes)
    return buffer.getvalue()

@click.group()
def main():
    """GS Tool ‚Äî —É—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞–º–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏.

    –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    - create: —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
    - preprocess: –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è `project.inc`
    - build: –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ + –∫–æ–º–ø–∏–ª—è—Ü–∏—è (AMX) + —É–ø–∞–∫–æ–≤–∫–∞ BIN
    - release: —Å–æ–∑–¥–∞—Ç—å zip-–∞—Ä—Ö–∏–≤ —Ä–µ–ª–∏–∑–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    - push: –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ä–µ–ª–∏–∑—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä rmt-cfg
    - token: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ (PAT)

    –ó–∞–ø—É—Å—Ç–∏—Ç–µ `gs --help` –∏–ª–∏ `gs <command> --help` –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.
    """
    pass

@main.command()
@click.argument('name')
def create(name):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–∫—Ä–∏–ø—Ç–∞ –≤ –ø–∞–ø–∫–µ <name>.

    –î–µ–π—Å—Ç–≤–∏—è:
    - —Å–æ–∑–¥–∞—ë—Ç –∫–∞—Ä–∫–∞—Å –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ñ–∞–π–ª `gs_project.json`
    - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç UUID-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏ –∑–∞–≥–æ—Ç–æ–≤–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    - –∫–æ–ø–∏—Ä—É–µ—Ç `gs_natives.inc` –∏ —Å–æ–∑–¥–∞—ë—Ç `main.p` –∏–∑ —à–∞–±–ª–æ–Ω–∞

    –ü—Ä–∏–º–µ—Ä:
      gs create my_script
    """
    if os.path.exists(name):
        click.echo(f"–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ {name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    
    os.makedirs(name, exist_ok=True)
    project_path = os.path.join(name, PROJECT_FILE)
    history_path = os.path.join(name, HISTORY_DIR)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
    template_path = os.path.join(os.path.dirname(__file__), 'project_template.json')
    with open(template_path, 'r', encoding='utf-8') as f:
        project_data = json.load(f)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    script_uuid = str(uuid.uuid4())
    project_data['script_id'] = script_uuid
    project_data['script_commit'] = str(uuid.uuid4())
    project_data['project_name'] = name
    project_data['version'] = '0.0.1'

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º uuid_ui_descriptor/descriptor_uuid (–æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)
    new_desc_uuid = str(uuid.uuid4())
    project_data['uuid_ui_descriptor'] = new_desc_uuid
    project_data['descriptor_uuid'] = new_desc_uuid  # fallback field

    # –û–±–Ω–æ–≤–ª—è–µ–º UUID'—ã —Ä–∞–∑–¥–µ–ª–æ–≤
    project_data['config']['name'] = f"{name}"

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç–∞
    is_public = click.confirm("–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –ø—É–±–ª–∏—á–Ω—ã–º?", default=False)
    project_data['is_public'] = is_public

    # –û–±–Ω–æ–≤–ª—è–µ–º UUID'—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∞—Ç–∞—Å–æ—Ä—Å–∞ (—Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å)
    if 'datasources' in project_data:
        if isinstance(project_data['datasources'], list):
            for ds in project_data['datasources']:
                ds['uuid'] = str(uuid.uuid4())
        elif isinstance(project_data['datasources'], dict):
            for key, ds in project_data['datasources'].items():
                ds['uuid'] = ds.get('uuid', str(uuid.uuid4()))
    
    project_data['api']['uuid'] = str(uuid.uuid4())
    project_data['template']['uuid'] = str(uuid.uuid4())

    # –û–±–Ω–æ–≤–ª—è–µ–º UUID'—ã —Ä–∞–∑–¥–µ–ª–æ–≤
    project_data['config']['uuid_cfg_entry'] = str(uuid.uuid4())
    # –î–µ–ª–∞–µ–º uuid_cfg_descriptor —Ä–∞–≤–Ω—ã–º uuid_ui_descriptor, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
    project_data['config']['uuid_cfg_descriptor'] = new_desc_uuid
    project_data['config']['name'] = f"{name}"

    # UUID –ø–æ–¥–ø–∏—Å–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è script_id –∏–∑ —à–∞–±–ª–æ–Ω–∞

    with open(project_path, 'w', encoding='utf-8') as f:
        json.dump(project_data, f, indent=2, ensure_ascii=False)
    
    os.makedirs(history_path, exist_ok=True)
    visibility_status = "–ø—É–±–ª–∏—á–Ω—ã–π" if is_public else "–ø—Ä–∏–≤–∞—Ç–Ω—ã–π"
    click.echo(f"–ü—Ä–æ–µ–∫—Ç {name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–∑–¥–∞–Ω: {project_path}")
    click.echo(f"–°—Ç–∞—Ç—É—Å –≤–∏–¥–∏–º–æ—Å—Ç–∏: {visibility_status}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª gs_natives.inc –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    natives_src = os.path.join(os.path.dirname(__file__), 'templates', 'gs_natives.inc')
    natives_dst = os.path.join(name, 'gs_natives.inc')
    try:
        shutil.copy2(natives_src, natives_dst)
        click.echo('–§–∞–π–ª gs_natives.inc —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–æ–µ–∫—Ç.')
    except FileNotFoundError:
        click.echo('–û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω gs_natives.inc –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–Ω—É—Ç—Ä–∏ –ø–∞–∫–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É gs_tool.')
        return False

    # –°–æ–∑–¥–∞–µ–º main.p –∏–∑ —à–∞–±–ª–æ–Ω–∞
    main_template = os.path.join(os.path.dirname(__file__), 'templates', 'main.p.j2')
    main_dst = os.path.join(name, 'main.p')
    try:
        from jinja2 import Environment, FileSystemLoader
        env = Environment(
            loader=FileSystemLoader(os.path.join(os.path.dirname(__file__), 'templates')),
            trim_blocks=True,
            lstrip_blocks=True
        )
        template = env.get_template('main.p.j2')
        rendered_main = template.render(
            config_name=project_data['config'].get('name', 'Config')
        )
        with open(main_dst, 'w', encoding='utf-8') as f_dst:
            f_dst.write(rendered_main)
        click.echo("–§–∞–π–ª main.p —Å–æ–∑–¥–∞–Ω.")
    except ImportError:
        # Fallback –µ—Å–ª–∏ Jinja2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        with open(main_template, 'r', encoding='utf-8') as f_tpl, open(main_dst, 'w', encoding='utf-8') as f_dst:
            f_dst.write(f_tpl.read())
        click.echo("–§–∞–π–ª main.p —Å–æ–∑–¥–∞–Ω (–±–µ–∑ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞).")
    except FileNotFoundError:
        click.echo("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —à–∞–±–ª–æ–Ω main.p.j2 –Ω–µ –Ω–∞–π–¥–µ–Ω, main.p –Ω–µ —Å–æ–∑–¥–∞–Ω.")

def run_preprocess() -> bool:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–∞: –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è `project.inc`.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å `config`, `datasources`, API endpoints –∏ –ø–æ–¥–ø–∏—Å–æ–∫.
    –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ `gs_natives.inc`. –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Jinja2.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, –∏–Ω–∞—á–µ False.
    """

    if not os.path.exists(PROJECT_FILE):
        click.echo(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {PROJECT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é 'gs init'.")
        return False

    click.echo("–ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–∞...")

    # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    with open(PROJECT_FILE, 'r', encoding='utf-8') as f:
        project_data = json.load(f)

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç gs_natives.inc
    natives_dst = os.path.join(os.getcwd(), 'gs_natives.inc')
    if not os.path.exists(natives_dst):
        natives_src = os.path.join(os.path.dirname(__file__), 'templates', 'gs_natives.inc')
        if os.path.exists(natives_src):
            try:
                shutil.copy2(natives_src, natives_dst)
                click.echo('–§–∞–π–ª gs_natives.inc —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–æ–µ–∫—Ç.')
            except FileNotFoundError:
                click.echo('–û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω gs_natives.inc –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ "gs create" –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é.')
                return False
        else:
            click.echo('–û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω gs_natives.inc –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ "gs create" –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é.')
            return False

    # --- –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
    if 'config' not in project_data or 'fields' not in project_data['config']:
        click.echo("–û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–π.")
        return False

    if 'name' not in project_data['config'] or not project_data['config']['name']:
        click.echo("–û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º–µ–Ω–∏ (config.name).")
        return False
    
    if not isinstance(project_data['config']['name'], str) or not project_data['config']['name'].isidentifier():
        click.echo(f"–û—à–∏–±–∫–∞: –ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '{project_data['config'].get('name', '')}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤).")
        return False

    for field in project_data['config']['fields']:
        if 'name' not in field or not field['name']:
            click.echo("–û—à–∏–±–∫–∞: –ü–æ–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º–µ–Ω–∏.")
            return False
        if not isinstance(field['name'], str) or not field['name'].isidentifier():
            click.echo(f"–û—à–∏–±–∫–∞: –ò–º—è –ø–æ–ª—è '{field.get('name', '')}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤).")
            return False
        if 'type' not in field or field['type'] not in ['INT8','INT16','INT32','UINT8','UINT16','UINT32','FLOAT','DOUBLE','STRING','ENUM','ARRAY','BOOL']:
            click.echo(f"–û—à–∏–±–∫–∞: –ü–æ–ª–µ '{field.get('name', '')}' –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø.")
            return False
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ min/max –∫ —á–∏—Å–ª–∞–º, –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'min' in field and isinstance(field['min'], str):
            try:
                field['min'] = int(field['min']) if field['type'] != 'FLOAT' else float(field['min'])
            except Exception:
                pass
        if 'max' in field and isinstance(field['max'], str):
            try:
                field['max'] = int(field['max']) if field['type'] != 'FLOAT' else float(field['max'])
            except Exception:
                pass
        # ARRAY: —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–¥–∞–Ω item_type –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        if field['type'] == 'ARRAY':
            if 'item_type' not in field:
                # –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–µ—Å—Ç–∏ –∏–∑ min/max
                try:
                    mn = int(field.get('min', 0))
                    mx = int(field.get('max', 0))
                    if mn >= 0 and mx <= 255:
                        field['item_type'] = 'UINT8'
                    elif mn >= 0 and mx <= 65535:
                        field['item_type'] = 'UINT16'
                    elif mn >= 0 and mx <= 4294967295:
                        field['item_type'] = 'UINT32'
                    else:
                        field['item_type'] = 'INT32'
                except Exception:
                    field['item_type'] = 'INT32'
        # ENUM: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º enum_values –∏–∑ ui.options –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
        if field['type'] == 'ENUM' and 'enum_values' not in field:
            ui = field.get('ui') or {}
            opts = ui.get('options')
            if isinstance(opts, list):
                enum_values = {}
                for opt in opts:
                    name = opt.get('name')
                    val = opt.get('value')
                    if name is None:
                        continue
                    enum_values[str(name)] = int(val) if val is not None else len(enum_values)
                if enum_values:
                    field['enum_values'] = enum_values

    # --- –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç–∞—Å–æ—Ä—Å–æ–≤ ---
    if 'datasources' not in project_data:
        click.echo("–û—à–∏–±–∫–∞: Datasources –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ.")
        return False

    # –î–æ–ø—É—Å–∫–∞–µ–º –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å {name: {...}}
    if isinstance(project_data['datasources'], dict):
        ds_list = []
        for ds_name, ds_data in project_data['datasources'].items():
            if not isinstance(ds_data, dict):
                click.echo(f"–û—à–∏–±–∫–∞: Datasource '{ds_name}' –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–∂–∏–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç).")
                return False
            if 'name' not in ds_data:
                ds_data = {**ds_data, 'name': ds_name}
            ds_list.append(ds_data)
        project_data['datasources'] = ds_list
    elif not isinstance(project_data['datasources'], list):
        click.echo("–û—à–∏–±–∫–∞: Datasources –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç).")
        return False

    if not project_data['datasources']:
        click.echo("–û—à–∏–±–∫–∞: –°–ø–∏—Å–æ–∫ –¥–∞—Ç–∞—Å–æ—Ä—Å–æ–≤ –ø—É—Å—Ç.")
        return False

    for datasource in project_data['datasources']:
        if 'name' not in datasource or not datasource['name']:
            click.echo("–û—à–∏–±–∫–∞: –î–∞—Ç–∞—Å–æ—Ä—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º–µ–Ω–∏.")
            return False
        if not isinstance(datasource['name'], str) or not datasource['name'].isidentifier():
            click.echo(f"–û—à–∏–±–∫–∞: –ò–º—è –¥–∞—Ç–∞—Å–æ—Ä—Å–∞ '{datasource.get('name', '')}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            return False
        if 'uuid' not in datasource or not datasource['uuid']:
            click.echo(f"–û—à–∏–±–∫–∞: –î–∞—Ç–∞—Å–æ—Ä—Å '{datasource.get('name', '')}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç UUID.")
            return False
        if 'fields' not in datasource or not isinstance(datasource['fields'], list):
            click.echo(f"–û—à–∏–±–∫–∞: –î–∞—Ç–∞—Å–æ—Ä—Å '{datasource.get('name', '')}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–π –∏–ª–∏ –ø–æ–ª—è –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.")
            return False

        for field in datasource['fields']:
            if 'name' not in field or not field['name']:
                click.echo(f"–û—à–∏–±–∫–∞: –ü–æ–ª–µ –¥–∞—Ç–∞—Å–æ—Ä—Å–∞ '{datasource.get('name', '')}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º–µ–Ω–∏.")
                return False
            if not isinstance(field['name'], str) or not field['name'].isidentifier():
                click.echo(f"–û—à–∏–±–∫–∞: –ò–º—è –ø–æ–ª—è –¥–∞—Ç–∞—Å–æ—Ä—Å–∞ '{datasource.get('name', '')}.{field.get('name', '')}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
                return False
            if 'type' not in field or field['type'] not in ['INT8','INT16','INT32','UINT8','UINT16','UINT32','FLOAT','STRING','ENUM','ARRAY','BOOL']:
                click.echo(f"–û—à–∏–±–∫–∞: –ü–æ–ª–µ –¥–∞—Ç–∞—Å–æ—Ä—Å–∞ '{datasource.get('name', '')}.{field.get('name', '')}' –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø.")
                return False

    # --- –í–∞–ª–∏–¥–∞—Ü–∏—è API endpoints ---
    if 'api' in project_data and 'endpoints' in project_data['api']:
        for endpoint in project_data['api']['endpoints']:
            if 'name' not in endpoint or not endpoint['name']:
                click.echo("–û—à–∏–±–∫–∞: API endpoint –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º–µ–Ω–∏.")
                return False
            if not isinstance(endpoint['name'], str) or not endpoint['name'].isidentifier():
                click.echo(f"–û—à–∏–±–∫–∞: –ò–º—è API endpoint '{endpoint.get('name', '')}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
                return False
            if 'signature' not in endpoint or not isinstance(endpoint['signature'], list):
                click.echo(f"–û—à–∏–±–∫–∞: API endpoint '{endpoint.get('name', '')}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä—ã.")
                return False
            for sig in endpoint['signature']:
                if 'type' not in sig or sig['type'] not in ['FST_CELL', 'FST_ARRAY', 'FST_STRING', 'FST_FLOAT', 'FST_FIXED']:
                    click.echo(f"–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –≤ API endpoint '{endpoint.get('name', '')}': {sig.get('type', '')}")
                    return False

    # --- –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ ---
    if 'subscriptions' in project_data:
        for sub in project_data['subscriptions']:
            if 'path' not in sub or not sub['path']:
                click.echo("–û—à–∏–±–∫–∞: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç–∏.")
                return False
            if 'function' not in sub or not sub['function']:
                click.echo("–û—à–∏–±–∫–∞: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏.")
                return False

    click.echo("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –¥–∞—Ç–∞—Å–æ—Ä—Å–æ–≤, API endpoints –∏ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")

    # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Pawn-–∫–æ–¥–∞ —á–µ—Ä–µ–∑ Jinja2 ---
    try:
        from jinja2 import Environment, FileSystemLoader
    except ImportError:
        click.echo("–û—à–∏–±–∫–∞: –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Jinja2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'pip install jinja2'.")
        return False

    env = Environment(
        loader=FileSystemLoader(os.path.join(os.path.dirname(__file__), 'templates')),
        trim_blocks=True,
        lstrip_blocks=True
    )
    template = env.get_template('project.inc.j2')

    rendered_code = template.render(
        script_id=project_data['script_id'],
        version=project_data.get('version', '0.0.1'),
        fields=project_data['config']['fields'],
        config_uuid_cfg_entry=project_data['config'].get('uuid_cfg_entry', project_data['config'].get('uuid', '')),
        config_uuid_cfg_descriptor=project_data['config'].get('uuid_cfg_descriptor', project_data['config'].get('uuid', '')),
        config_name=project_data['config'].get('name', 'Config'),
        datasources=project_data['datasources'],
        functions=project_data.get('api', {}).get('endpoints', []),
        subscriptions=project_data.get('subscriptions', [])
    )

    with open('project.inc', 'w', encoding='utf-8') as f:
        f.write(rendered_code)

    click.echo("–ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –§–∞–π–ª project.inc —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
    return True

@main.command(name='preprocess')
def preprocess_cmd():
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ (–≤–∞–ª–∏–¥–∞—Ü–∏—è + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è `project.inc`).

    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –±–µ–∑ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏.
    """
    run_preprocess()

@main.command()
def build():
    """–°–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç: –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ + –∫–æ–º–ø–∏–ª—è—Ü–∏—è + —É–ø–∞–∫–æ–≤–∫–∞ BIN.

    –≠—Ç–∞–ø—ã:
    1) –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è `project.inc`
    2) –ö–æ–º–ø–∏–ª—è—Ü–∏—è `main.p` —Å –∞–Ω–∞–ª–∏–∑–æ–º/–ø–æ–¥–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–µ–∫–∞
    3) –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–Ω–∞—Ä—è `<script_uuid>` (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + AMX)

    –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
    - –ï—Å–ª–∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä pawncc –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω dummy AMX.
    - –¢—Ä–µ–±—É–µ—Ç `gs_project.json` –∏ `main.p` –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.
    """
    click.echo("–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞
    if not os.path.exists(PROJECT_FILE):
        click.echo(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {PROJECT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é 'gs create'.")
        return

    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
    with open(PROJECT_FILE, 'r', encoding='utf-8') as f:
        project_data = json.load(f)

    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥. –ï—Å–ª–∏ –æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π ‚Äî –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–±–æ—Ä–∫—É.
    if not run_preprocess():
        click.echo("–°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ main.p
    if not os.path.exists("main.p"):
        click.echo("–û—à–∏–±–∫–∞: –§–∞–π–ª main.p –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ò—â–µ–º –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä —Å–Ω–∞—á–∞–ª–∞ –≤ –ø–∞–∫–µ—Ç–µ, –∑–∞—Ç–µ–º –≤ PATH
    package_dir = os.path.dirname(__file__)
    compiler_name = "pawncc.exe" if sys.platform == "win32" else "pawncc"
    package_compiler = os.path.join(package_dir, "bin", compiler_name)
    
    if os.path.exists(package_compiler):
        compiler = package_compiler
        click.echo(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä: {compiler}")
    else:
        # Fallback: –∏—â–µ–º –≤ PATH
        compiler = "pawnccsdf"
        if shutil.which(compiler) is None:
            # –ü—Ä–æ–±—É–µ–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .exe –¥–ª—è Windows
            compiler = "pawncc.exe"
            if shutil.which(compiler) is None:
                # Fallback: —Å–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–µ—á–Ω—ã–π AMX, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ macOS/Linux
                click.echo("‚ö†Ô∏è  –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä pawncc –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –∑–∞–≥–ª—É—à–µ—á–Ω—ã–π –±–∞–π—Ç–∫–æ–¥ main.amx.")

                dummy_amx = Path("main.amx")
                if not dummy_amx.exists():
                    # –ü–∏—à–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (56 –±–∞–π—Ç) + —Å—Ç—Ä–æ–∫—É-–º–µ—Ç–∫—É
                    # AMX header –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (uint32). –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
                    payload = b"DUMMY"  # –Ω–µ–±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ
                    size = 56 + len(payload)
                    hdr = bytearray(56)
                    # size (uint32 little-endian)
                    struct.pack_into('<I', hdr, 0, size)
                    # magic 0xF1E0
                    struct.pack_into('<H', hdr, 4, 0xF1E0)
                    # versions, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω—É–ª–µ–≤—ã–º–∏
                    dummy_amx.write_bytes(hdr + payload)
                    click.echo("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª main.amx-–∑–∞–≥–ª—É—à–∫–∞.")

                # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ—Ç —Ñ–∞–π–ª
                bytecode_data = dummy_amx.read_bytes()

                # –§–æ—Ä–º–∏—Ä—É–µ–º zip-–¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
                descriptor_zip = build_descriptor_zip(project_data)

                # –í—ã—á–∏—Å–ª—è–µ–º CRC32 –ø–æ p-–∫–æ–¥—É –∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—É –≤–º–µ—Å—Ç–µ
                crc = crc32(bytecode_data + descriptor_zip)

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ project.json
                project_name = project_data.get('project_name', 'unknown')
                script_uuid = project_data.get('script_id', str(uuid.uuid4()))
                config_uuid = project_data['config'].get('uuid_cfg_entry', str(uuid.uuid4()))
                desc_uuid = project_data['config'].get('uuid_cfg_descriptor', str(uuid.uuid4()))
                version = project_data.get('version', '0.0.1')

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å descSize
                header = create_binary_header(
                    name=project_name,
                    script_uuid_str=script_uuid,
                    config_uuid_str=config_uuid,
                    desc_uuid_str=desc_uuid,
                    version=version,
                    data=bytecode_data,
                    desc_bytes=descriptor_zip,
                )

                final_data = header + bytecode_data + descriptor_zip
                output_filename = f"{script_uuid}"
                with open(output_filename, 'wb') as f_out:
                    f_out.write(final_data)

                click.echo(f"‚úÖ –°–æ–∑–¥–∞–Ω dummy-script —Ñ–∞–π–ª: {output_filename} (header + {len(bytecode_data)} –±–∞–π—Ç dummy)")
                click.echo(f"üîí CRC32: 0x{crc:08X}")

                # –•—ç—à –≤–µ—Ä—Å–∏–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ release, –∞ –Ω–µ build

                return

    # –≠—Ç–∞–ø 1: –ü–µ—Ä–≤–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–µ–∫–∞
    click.echo("–≠—Ç–∞–ø 1: –ü–µ—Ä–≤–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–µ–∫–∞...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞:
    # -v2 = verbose level 2
    # -d3 = debug level 3
    result1 = subprocess.run([compiler, "main.p", "-S=4096", "-O3", "-v2", "-d3"], 
                           capture_output=True, text=True)
    
    if result1.returncode != 0:
        click.echo("–û—à–∏–±–∫–∏ –ø–µ—Ä–≤–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:")
        if result1.stdout:
            click.echo(result1.stdout)
        if result1.stderr:
            click.echo(result1.stderr)
        click.echo(f"–ü–µ—Ä–≤–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥ {result1.returncode}).")
        return
    
    # –ü–∞—Ä—Å–∏–º estimated max use –∏–∑ –≤—ã–≤–æ–¥–∞
    estimated_cells = None
    combined_output = (result1.stdout or "") + "\n" + (result1.stderr or "")
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    click.echo("\nüîç === –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–∞ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ ===")
    click.echo("üìã –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ (stdout):")
    click.echo("---")
    if result1.stdout:
        click.echo(result1.stdout)
    else:
        click.echo("(–ø—É—Å—Ç–æ)")
    click.echo("---")
    click.echo("üìã –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ (stderr):")
    click.echo("---")
    if result1.stderr:
        click.echo(result1.stderr)
    else:
        click.echo("(–ø—É—Å—Ç–æ)")
    click.echo("---")
    click.echo("üîç === –ö–æ–Ω–µ—Ü –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ–∫—É—Ä—Å–∏—é
    if "due to recursion" in combined_output:
        click.echo("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏—è! –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç —Ç–æ—á–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–µ–∫–∞.")
        if "recursive function" in combined_output:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            recursive_functions = re.findall(r'recursive function "([^"]+)"', combined_output)
            if recursive_functions:
                click.echo(f"üìã –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {', '.join(recursive_functions)}")
        
        click.echo("üîß –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞ –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–∏")
        click.echo("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Å–±–æ—Ä–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ - —Ç–∞–º —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞
        result = result1
    else:
        # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–µ–∫–∞
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—â–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Stack/heap size: XXXX bytes; estimated max. use=YY cells"
        match = re.search(r'estimated max\.\s*use=(\d+)\s*cells', combined_output)
        if match:
            estimated_cells = int(match.group(1))
            click.echo(f"üìä –ù–∞–π–¥–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–µ–∫–∞: {estimated_cells} cells")
        else:
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ estimated use, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞
            match = re.search(r'Stack/heap size:\s*(\d+)\s*bytes', combined_output)
            if match:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ cells (1 cell = 4 bytes –¥–ª—è 32-–±–∏—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã)
                stack_bytes = int(match.group(1))
                # –ò—â–µ–º —Ç–∞–∫–∂–µ estimated use –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
                est_match = re.search(r'Stack/heap size:\s*\d+\s*bytes;\s*estimated max\.\s*use=(\d+)\s*cells', combined_output)
                if est_match:
                    estimated_cells = int(est_match.group(1))
                    click.echo(f"üìä –ù–∞–π–¥–µ–Ω —Ä–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞: {stack_bytes} –±–∞–π—Ç, –ø—Ä–æ–≥–Ω–æ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {estimated_cells} cells")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç estimated use, –∏—Å–ø–æ–ª—å–∑—É–µ–º 10% –æ—Ç –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–∫ –æ—Ü–µ–Ω–∫—É
                    estimated_cells = stack_bytes // 40  # 10% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤ –±–∞–π—Ç–∞—Ö, –¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞ 4
                    click.echo(f"üìä –ù–∞–π–¥–µ–Ω —Ä–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞: {stack_bytes} –±–∞–π—Ç, —Ä–∞—Å—á–µ—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {estimated_cells} cells")
        
        if not match:
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ò—â–µ–º –ª—é–±–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å—Ç–µ–∫–µ
            stack_mentions = re.findall(r'(?:stack|heap).*?(\d+).*?(?:bytes|cells)', combined_output, re.IGNORECASE)
            if stack_mentions:
                click.echo(f"üîç –ù–∞–π–¥–µ–Ω—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å—Ç–µ–∫–µ: {stack_mentions}")
        
        if estimated_cells is not None:
            optimal_stack = estimated_cells + 32
            click.echo(f"üìä –ù–∞–π–¥–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–µ–∫–∞: {estimated_cells} cells")
            click.echo(f"‚ö° –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞: {optimal_stack} cells")
            
            # –≠—Ç–∞–ø 2: –ü–µ—Ä–µ–∫–æ–º–ø–∏–ª—è—Ü–∏—è —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Å—Ç–µ–∫–∞
            click.echo("–≠—Ç–∞–ø 2: –ü–µ—Ä–µ–∫–æ–º–ø–∏–ª—è—Ü–∏—è —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Å—Ç–µ–∫–∞...")
            
            result = subprocess.run([compiler, "main.p", f"-S={optimal_stack}", "-O3", "-d2"], 
                                  capture_output=True, text=True)
        else:
            click.echo("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–µ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
            click.echo("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–ª–∞–≥")
            result = result1
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    if result.stdout:
        click.echo("–í—ã–≤–æ–¥ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞:")
        click.echo(result.stdout)
    if result.stderr:
        click.echo("–û—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞:")
        click.echo(result.stderr)
    
    if result.returncode != 0:
        click.echo(f"–ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥ {result.returncode}).")
        return

    # –ò—â–µ–º —Ñ–∞–π–ª main.amx, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–º
    amx_file = "main.amx"
    
    if not os.path.exists(amx_file):
        click.echo("–û—à–∏–±–∫–∞: –§–∞–π–ª main.amx –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–≥–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–∞–º–∏.")
        return

    # –ß–∏—Ç–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ main.amx
    with open(amx_file, 'rb') as f:
        bytecode_data = f.read()

    click.echo(f"–†–∞–∑–º–µ—Ä —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {len(bytecode_data)} –±–∞–π—Ç")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º AMX –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–∞–π—Ç–∫–æ–¥–∞
    debug_amx_header(bytecode_data)

    # –°–æ–∑–¥–∞–µ–º zip-–¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã CRC —Å—á–∏—Ç–∞–ª—Å—è –ø–æ p-–∫–æ–¥—É –∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—É –≤–º–µ—Å—Ç–µ
    descriptor_zip = build_descriptor_zip(project_data)
    
    # –í—ã—á–∏—Å–ª—è–µ–º CRC32 –ø–æ p-–∫–æ–¥—É –∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—É
    crc = crc32(bytecode_data + descriptor_zip)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    project_name = project_data.get('project_name', 'unknown')
    script_uuid = project_data.get('script_id', str(uuid.uuid4()))
    config_uuid = project_data['config'].get('uuid_cfg_entry', str(uuid.uuid4()))
    desc_uuid = project_data['config'].get('uuid_cfg_descriptor', str(uuid.uuid4()))
    version = project_data.get('version', '0.0.1')

    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–æ–ª–µ–º descSize
    header = create_binary_header(
        name=project_name,
        script_uuid_str=script_uuid,
        config_uuid_str=config_uuid,
        desc_uuid_str=desc_uuid,
        version=version,
        data=bytecode_data,  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è hash –∏ crc
        desc_bytes=descriptor_zip,
    )

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, p-–∫–æ–¥ –∏ zip-–¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
    final_data = header + bytecode_data + descriptor_zip

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    output_filename = f"{script_uuid}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
    with open(output_filename, 'wb') as f:
        f.write(final_data)

    click.echo(f"–ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    click.echo(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {output_filename}")
    click.echo(f"üì¶ –†–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {len(final_data)} –±–∞–π—Ç (–∑–∞–≥–æ–ª–æ–≤–æ–∫: {len(header)} –±–∞–π—Ç + –¥–∞–Ω–Ω—ã–µ: {len(bytecode_data)} –±–∞–π—Ç)")
    click.echo(f"üîí CRC32: 0x{crc:08X}")

@main.command()
def release():
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑–Ω—ã–π zip-–∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞.

    - –ò–º—è –∞—Ä—Ö–∏–≤–∞: `.gs_history/release_v<version>.zip`
    - –í–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç `<script_id>.bin`
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–ª–∏–∑–∞–º–∏ –∏
      –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ UUID'—ã.

    –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω `gs build`.
    """
    if not os.path.exists(PROJECT_FILE):
        click.echo(f"–û—à–∏–±–∫–∞: –§–∞–π–ª {PROJECT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é 'gs create'.")
        return
    
    with open(PROJECT_FILE, 'r', encoding='utf-8') as f:
        project_data = json.load(f)
    
    project_name = project_data.get('project_name', 'unknown')
    version = project_data.get('version', '0.0.0')
    script_uuid = project_data.get('script_id')
    if not script_uuid:
        click.echo(f"–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω script_id –≤ {PROJECT_FILE}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(HISTORY_DIR, exist_ok=True)
    
    # –ò–º—è –∞—Ä—Ö–∏–≤–∞ —Ä–µ–ª–∏–∑–∞
    archive_name = f"release_v{version}.zip"
    archive_path = os.path.join(HISTORY_DIR, archive_name)
    
    if os.path.exists(archive_path):
        click.echo(f"–û—à–∏–±–∫–∞: –†–µ–ª–∏–∑ –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {archive_path}.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–ª–∏–∑–∞–º–∏
    previous_configs = get_previous_releases()
    if previous_configs:
        current_config = project_data.get('config', {})
        entry_breaking, descriptor_breaking, changes = check_config_compatibility(current_config, previous_configs)
        
        if entry_breaking or descriptor_breaking:
            click.echo("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            click.echo(changes)
            
            config_changed = False
            
            if entry_breaking:
                click.echo("\n‚ùó –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏!")
                click.echo("–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π (idx, type, name –∏–ª–∏ enum options).")
                if click.confirm("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π UUID_CFG_ENTRY?"):
                    new_uuid = str(uuid.uuid4())
                    project_data['config']['uuid_cfg_entry'] = new_uuid
                    config_changed = True
                    click.echo(f"‚úÖ –ù–æ–≤—ã–π UUID_CFG_ENTRY: {new_uuid}")
            
            if descriptor_breaking:
                click.echo("\nüìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
                if click.confirm("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π UUID_CFG_DESCRIPTOR?"):
                    new_uuid = str(uuid.uuid4())
                    project_data['config']['uuid_cfg_descriptor'] = new_uuid
                    config_changed = True
                    click.echo(f"‚úÖ –ù–æ–≤—ã–π UUID_CFG_DESCRIPTOR: {new_uuid}")
            
            if config_changed:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π project.json
                with open(PROJECT_FILE, 'w', encoding='utf-8') as f:
                    json.dump(project_data, f, indent=2, ensure_ascii=False)
                click.echo("üíæ –§–∞–π–ª gs_project.json –æ–±–Ω–æ–≤–ª–µ–Ω.")
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥
                click.echo("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞...")
                if not run_preprocess():
                    click.echo("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–µ. –†–µ–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
                    return
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é
                click.echo("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏...")
                # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã build
                package_dir = os.path.dirname(__file__)
                compiler_name = "pawncc.exe" if sys.platform == "win32" else "pawncc"
                package_compiler = os.path.join(package_dir, "bin", compiler_name)
                
                if os.path.exists(package_compiler):
                    compiler = package_compiler
                else:
                    compiler = "pawncc"
                    if shutil.which(compiler) is None:
                        compiler = "pawncc.exe"
                        if shutil.which(compiler) is None:
                            click.echo("‚ùå –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä pawncc –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–µ–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
                            return
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –∫–æ–º–ø–∏–ª—è—Ü–∏–∏, —á—Ç–æ –∏ –≤ build
                result1 = subprocess.run([compiler, "main.p", "-S=4096", "-O3", "-v2", "-d3"], 
                                      capture_output=True, text=True)
                
                if result1.returncode != 0:
                    click.echo("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:")
                    if result1.stdout:
                        click.echo(result1.stdout)
                    if result1.stderr:
                        click.echo(result1.stderr)
                    return
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–µ–∫–∞
                combined_output = (result1.stdout or "") + "\n" + (result1.stderr or "")
                estimated_cells = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ–∫—É—Ä—Å–∏—é
                if "due to recursion" in combined_output:
                    result = result1
                else:
                    # –ò—â–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–µ–∫–∞
                    match = re.search(r'estimated max\.\s*use=(\d+)\s*cells', combined_output)
                    if match:
                        estimated_cells = int(match.group(1))
                    else:
                        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
                        est_match = re.search(r'Stack/heap size:\s*\d+\s*bytes;\s*estimated max\.\s*use=(\d+)\s*cells', combined_output)
                        if est_match:
                            estimated_cells = int(est_match.group(1))
                    
                    if estimated_cells is not None:
                        optimal_stack = estimated_cells + 32
                        # –ü–µ—Ä–µ–∫–æ–º–ø–∏–ª—è—Ü–∏—è —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
                        result = subprocess.run([compiler, "main.p", f"-S={optimal_stack}", "-O3", "-d2"], 
                                              capture_output=True, text=True)
                    else:
                        result = result1
                
                if result.returncode != 0:
                    click.echo("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:")
                    if result.stdout:
                        click.echo(result.stdout)
                    if result.stderr:
                        click.echo(result.stderr)
                    return
                
                # –°–æ–∑–¥–∞–µ–º .bin —Ñ–∞–π–ª
                if not os.path.exists("main.amx"):
                    click.echo("‚ùå –§–∞–π–ª main.amx –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏.")
                    return
                
                with open("main.amx", 'rb') as f:
                    bytecode_data = f.read()
                
                crc_val = crc32(bytecode_data)
                config_data = project_data.get('config', {})
                descriptor_zip = build_descriptor_zip(project_data)
                header = create_binary_header(
                    name=project_name,
                    script_uuid_str=project_data.get('script_id'),
                    config_uuid_str=config_data.get('uuid_cfg_entry', str(uuid.uuid4())),
                    desc_uuid_str=config_data.get('uuid_cfg_descriptor', str(uuid.uuid4())),
                    version=version,
                    data=bytecode_data,
                    desc_bytes=descriptor_zip,
                )
                
                final_data = header + bytecode_data + descriptor_zip
                bin_filename = f"{script_uuid}"
                
                with open(bin_filename, 'wb') as f:
                    f.write(final_data)
                
                click.echo(f"‚úÖ –§–∞–π–ª {bin_filename} –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .bin —Ñ–∞–π–ª–∞
    bin_filename = f"{script_uuid}"
    if not os.path.exists(bin_filename):
        click.echo(f"‚ö†Ô∏è  –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª {bin_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        click.echo("üî® –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'gs build' –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–ª–∏–∑–∞.")
        return
    
    # –ü–µ—Ä–µ–¥ —É–ø–∞–∫–æ–≤–∫–æ–π: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π 256-–±–∏—Ç–Ω—ã–π —Ö—ç—à –∫–æ–º–º–∏—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ project.json
    try:
        with open(PROJECT_FILE, 'r', encoding='utf-8') as f:
            current_project = json.load(f)
    except Exception:
        current_project = project_data

    # 256-–±–∏—Ç–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Ö—ç—à (64 hex —Å–∏–º–≤–æ–ª–∞)
    random_commit = hashlib.sha256(os.urandom(32)).hexdigest()
    current_project['script_commit'] = random_commit
    with open(PROJECT_FILE, 'w', encoding='utf-8') as f:
        json.dump(current_project, f, indent=2, ensure_ascii=False)
    click.echo(f"üß¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω script_commit: {random_commit}")

    # –°–æ–∑–¥–∞–µ–º zip –∞—Ä—Ö–∏–≤
    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        for item in os.listdir('.'):
            if item in [HISTORY_DIR, '.git']:
                continue
            
            item_path = Path(item)
            if item_path.is_file():
                zipf.write(item, item)
                click.echo(f"üìÑ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {item}")
            elif item_path.is_dir() and item not in [HISTORY_DIR, '.git', '__pycache__', '.venv', 'venv']:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
                for root, dirs, files in os.walk(item):
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
                    dirs[:] = [d for d in dirs if d not in ['__pycache__', '.git', '.venv', 'venv']]
                    for file in files:
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, '.')
                        zipf.write(file_path, arcname)
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π .bin —Ñ–∞–π–ª
        zipf.write(bin_filename, bin_filename) 
        click.echo(f"üöÄ –î–æ–±–∞–≤–ª–µ–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: {bin_filename}")
    
    click.echo(f"üéâ –†–µ–ª–∏–∑ –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version} —Å–æ–∑–¥–∞–Ω: {archive_path}")
    click.echo(f"üìä –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {os.path.getsize(archive_path)} –±–∞–π—Ç")

@main.command()
@click.option('--company-id', default=None, help='Company ID –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Company-ID')
@click.option('--dry-run', is_flag=True, help='–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å JSON –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏')
def push(company_id, dry_run):
    """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–ª–∏–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä rmt-cfg (–Ω–æ–≤—ã–π –∞—Ç–æ–º–∞—Ä–Ω—ã–π API).

    - –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞ (–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤ .gs_history).
    - –§–æ—Ä–º–∏—Ä—É–µ—Ç –µ–¥–∏–Ω—ã–π JSON-–∑–∞–ø—Ä–æ—Å.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç /scripts/publish.
    """
    config = load_config()
    server_url = config.get('server_url')
    if not server_url:
        raise click.ClickException("server_url –Ω–µ —É–∫–∞–∑–∞–Ω –≤ ~/.gs_tool/config.json")

    # company_id –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º CLI –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    target_company_id = company_id or config.get('company_id')
    if not target_company_id:
        raise click.ClickException(
            '–ù–µ —É–∫–∞–∑–∞–Ω company_id (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --company-id –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ ~/.gs_tool/config.json)'
        )

    # –ò—â–µ–º –≤—Å–µ –∞—Ä—Ö–∏–≤—ã —Ä–µ–ª–∏–∑–æ–≤ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
    if not os.path.exists(HISTORY_DIR):
        raise click.ClickException(f"–ü–∞–ø–∫–∞ {HISTORY_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ª–∏–∑: gs release")
    
    release_archives = sorted([
        f for f in os.listdir(HISTORY_DIR)
        if f.startswith('release_v') and f.endswith('.zip')
    ])
    if not release_archives:
        raise click.ClickException("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞ –≤ .gs_history")

    success_count = 0
    fail_count = 0
    for archive_name in release_archives:
        archive_path = os.path.join(HISTORY_DIR, archive_name)
        click.echo(f"\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞ {archive_name}")

        # --- –ò–∑–≤–ª–µ–∫–∞–µ–º project.json –∏ –±–∏–Ω–∞—Ä—å ---
        try:
            with zipfile.ZipFile(archive_path, 'r') as zf:
                project_bytes = zf.read(PROJECT_FILE)
                project = json.loads(project_bytes.decode('utf-8'))
                script_id = project.get('script_id')
                if not script_id:
                    click.echo('‚ö†Ô∏è  script_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é –∞—Ä—Ö–∏–≤.')
                    fail_count += 1
                    continue
                try:
                    bin_content = zf.read(script_id)
                except KeyError:
                    click.echo('‚ö†Ô∏è  –ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é –∞—Ä—Ö–∏–≤.')
                    fail_count += 1
                    continue
        except (KeyError, zipfile.BadZipFile) as e:
            click.echo(f'‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {e}')
            fail_count += 1
            continue

        # --- –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π JSON payload ---
        sm = {
            "script_id": project.get("script_id"),
            "name": project.get("project_name") or project.get("name"),
            "description": project.get("description"),
            "is_public": project.get("is_public", False),
        }
        # commit_hash: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ project.json; –µ—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω hex-64 ‚Äî fallback –∫ SHA256(binary)
        commit_hash = project.get("script_commit")
        if not (isinstance(commit_hash, str) and re.fullmatch(r"^[0-9a-fA-F]{64}$", commit_hash or "")):
            commit_hash = hashlib.sha256(bin_content).hexdigest()
        svm = {
            "version": project.get("version"),
            "commit_hash": commit_hash,
            "descriptor_id": (
                project.get("uuid_ui_descriptor")
                or project.get("descriptor_uuid")
                or (project.get("config") or {}).get("uuid_cfg_descriptor")
            )
        }
        ds = {
            "config": project.get("config", {}),
            "datasources": project.get("datasources", {}),
            "subscriptions": project.get("subscriptions", []),
            "api": project.get("api", {}),
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
        if not all([sm.get('script_id'), svm.get('version'), svm.get('commit_hash'), svm.get('descriptor_id')]):
            click.echo("‚ùå –í project.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (script_id, version, script_commit/sha256, uuid_ui_descriptor). –ü—Ä–æ–ø—É—Å–∫.")
            fail_count += 1
            continue

        payload = {
            "script_metadata": sm,
            "script_version_metadata": svm,
            "descriptor_schema": ds,
            "binary_payload": binascii.b2a_base64(bin_content).decode('ascii').strip(),
        }

        if dry_run:
            click.echo("--- Dry Run: JSON Payload ---")
            click.echo(json.dumps(payload, indent=2, ensure_ascii=False))
            continue

        # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å ---
        api_key = config.get('api_key')
        headers = {'X-Company-ID': target_company_id, 'Content-Type': 'application/json'}
        if api_key:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PAT –≤ X-Api-Key
            headers['X-Api-Key'] = api_key

        try:
            url = f"{server_url.rstrip('/')}/scripts/publish"
            _debug_print_request('POST', url, headers)
            resp = requests.post(url, json=payload, headers=headers)

            if resp.status_code in (200, 201):
                data = resp.json()
                status = "—Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è" if data.get('is_new') else "–≤–µ—Ä—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                click.echo(f"‚úÖ {archive_name}: {status}")
                click.echo(f"  - script_id: {data.get('script_id')}")
                click.echo(f"  - version_id: {data.get('version_id')}")
                success_count += 1
            else:
                click.echo(f"‚ùå {archive_name}: –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {resp.status_code}")
                try:
                    click.echo(resp.json())
                except:
                    click.echo(resp.text)
                fail_count += 1

        except requests.exceptions.RequestException as e:
            click.echo(f"‚ùå {archive_name}: –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
            fail_count += 1

    click.echo(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {success_count} —Ä–µ–ª–∏–∑(–æ–≤), –æ—à–∏–±–æ–∫: {fail_count}.")

@main.group()
def token():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ application tokens (Personal Access Tokens).

    –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–æ–º–∞–Ω–¥—ã:
    - create: –≤—ã–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω (PAT) –∏, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –∫–æ–Ω—Ñ–∏–≥
    - list: –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - revoke: –æ—Ç–æ–∑–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –ø–æ `token_id`
    """
    pass


def _get_auth_headers_for_admin_ops(server_url: str, company_id: Optional[str], prefer_api_key: bool = True,
                                    email: Optional[str] = None, password: Optional[str] = None) -> dict:
    config = load_config()
    headers = {}
    if company_id:
        headers['X-Company-ID'] = company_id
    # Prefer API key (PAT) if present
    if prefer_api_key and config.get('api_key'):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PAT —á–µ—Ä–µ–∑ X-Api-Key
        headers['X-Api-Key'] = config['api_key']
        return headers

    # Otherwise login with email/password to get JWT
    if not email:
        email = click.prompt('Email', type=str)
    if not password:
        password = getpass('Password: ')
    try:
        resp = requests.post(f"{server_url.rstrip('/')}/api/v1/auth/login", json={'email': email, 'password': password})
        if resp.status_code not in (200, 201):
            raise click.ClickException(f"Auth failed: {resp.status_code} {resp.text}")
        access_token = resp.json().get('access_token')
        if not access_token:
            raise click.ClickException('Auth response does not contain access_token')
        headers['Authorization'] = f"Bearer {access_token}"
        return headers
    except requests.exceptions.RequestException as e:
        raise click.ClickException(f"Network error during auth: {e}")


@token.command('create')
@click.option('--name', default=None, help='–ò–º—è —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)')
@click.option('--company-id', default=None, help='Company ID (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å ‚Äî –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä)')
@click.option('--scope', 'scopes', multiple=True, help='–ü—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω—ã –¥–ª—è CLI).')
@click.option('--never-expires/--expires', default=True, help='–ë–µ—Å—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ)')
@click.option('--expires-at', default=None, help='–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è (ISO-8601), –µ—Å–ª–∏ --expires')
@click.option('--email', default=None, help='Email –¥–ª—è –≤—Ö–æ–¥–∞ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ —Å–ø—Ä–æ—Å–∏–º, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å)')
@click.option('--password', default=None, help='–ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ —Å–ø—Ä–æ—Å–∏–º, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å)')
def token_create(name, company_id, scopes, never_expires, expires_at, email, password):
    """–í—ã–ø—É—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω (PAT) –¥–ª—è CLI –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –∫–æ–Ω—Ñ–∏–≥.

    –ü—Ä–æ—Ü–µ—Å—Å:
    1) –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ email/–ø–∞—Ä–æ–ª—é (–ø–æ–ª—É—á–µ–Ω–∏–µ JWT)
    2) –í—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞)
    3) –í—ã–ø—É—Å–∫ —Ç–æ–∫–µ–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ scope'–∞–º–∏
    4) –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞—Ç—å —Ç–æ–∫–µ–Ω –≤ `~/.gs_tool/config.json` –∫–∞–∫ `api_key`

    –ü—Ä–∏–º–µ—Ä—ã:
      gs token create --email you@example.com
      gs token create --name ci-bot --scope scripts:write --scope descriptors:write \
        --never-expires --email you@example.com
    """
    config = load_config()
    server_url = config.get('server_url')
    if not server_url:
        raise click.ClickException('server_url –Ω–µ —É–∫–∞–∑–∞–Ω –≤ ~/.gs_tool/config.json')

    # –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏–Ω–∏–º—Å—è email/password –¥–ª—è –≤—ã–ø—É—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞
    headers = _get_auth_headers_for_admin_ops(server_url, None, prefer_api_key=False, email=email, password=password)

    # –®–∞–≥ 1: —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
    chosen_company_id = company_id
    if not chosen_company_id:
        try:
            resp = requests.get(f"{server_url.rstrip('/')}/api/v1/companies", headers=headers)
        except requests.exceptions.RequestException as e:
            raise click.ClickException(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π: {e}")
        if resp.status_code != 200:
            raise click.ClickException(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π: {resp.status_code} {resp.text}")
        companies = resp.json() or []
        if not companies:
            raise click.ClickException('–ó–∞ –≤–∞—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–ø—É—Å–∫–∞—Ç—å —Ç–æ–∫–µ–Ω.')
        if len(companies) == 1:
            company = companies[0]
            chosen_company_id = company.get('id')
            click.echo(f"–ö–æ–º–ø–∞–Ω–∏—è: {company.get('name')} ({chosen_company_id})")
        else:
            click.echo('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:')
            for idx, comp in enumerate(companies, start=1):
                click.echo(f"  {idx}) {comp.get('name')} [{comp.get('id')}]")
            idx = click.prompt('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏', type=int)
            if idx < 1 or idx > len(companies):
                raise click.ClickException('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏')
            chosen_company_id = companies[idx - 1].get('id')
    
    # –®–∞–≥ 2: –∏–º—è —Ç–æ–∫–µ–Ω–∞
    token_name = name or click.prompt('–ò–º—è —Ç–æ–∫–µ–Ω–∞', default='gs-cli')

    payload = {
        'name': token_name,
        'company_id': chosen_company_id,
        # –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ —Å–∫–æ—É–ø—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π CLI (–ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –∏ —Å–∫—Ä–∏–ø—Ç–æ–≤)
        'scopes': list(scopes) if scopes else ['scripts:write', 'descriptors:write'],
        'never_expires': bool(never_expires),
        'expires_at': expires_at,
    }

    try:
        resp = requests.post(f"{server_url.rstrip('/')}/api/v1/tokens", json=payload, headers=headers)
        if resp.status_code not in (200, 201):
            raise click.ClickException(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {resp.status_code} {resp.text}")
        data = resp.json()
        raw = data.get('token')
        if not raw:
            raise click.ClickException('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–ª–µ token')
        click.echo('\n‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:')
        click.echo(f"token_id: {data.get('token_id')}")
        click.echo(f"created_at: {data.get('created_at')}")
        click.echo('\n–í–ù–ò–ú–ê–ù–ò–ï! –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å–µ–π—á–∞—Å, –æ–Ω –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑:')
        click.echo(raw)

        if click.confirm('\n–ó–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –≤ ~/.gs_tool/config.json –∫–∞–∫ api_key?'):
            config['api_key'] = raw
            # ensure company_id stored if provided
            if chosen_company_id:
                config['company_id'] = chosen_company_id
            cfg_path = os.path.expanduser('~/.gs_tool/config.json')
            os.makedirs(os.path.dirname(cfg_path), exist_ok=True)
            with open(cfg_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            click.echo('‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥.')
    except requests.exceptions.RequestException as e:
        raise click.ClickException(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")


@token.command('list')
@click.option('--company-id', default=None, help='Company ID –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
@click.option('--email', default=None, help='Email –¥–ª—è –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –Ω–µ—Ç api_key')
@click.option('--password', default=None, help='–ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –Ω–µ—Ç api_key')
def token_list(company_id, email, password):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ï—Å–ª–∏ `api_key` –Ω–µ –∑–∞–¥–∞–Ω, –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥ (email/–ø–∞—Ä–æ–ª—å).
    """
    config = load_config()
    server_url = config.get('server_url')
    if not server_url:
        raise click.ClickException('server_url –Ω–µ —É–∫–∞–∑–∞–Ω –≤ ~/.gs_tool/config.json')

    headers = _get_auth_headers_for_admin_ops(server_url, company_id, True, email, password)

    try:
        resp = requests.get(f"{server_url.rstrip('/')}/api/v1/tokens", headers=headers)
        if resp.status_code != 200:
            raise click.ClickException(f"–û—à–∏–±–∫–∞: {resp.status_code} {resp.text}")
        items = resp.json()
        if not items:
            click.echo('–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤.')
            return
        for t in items:
            click.echo(f"- token_id={t.get('token_id')} active={t.get('is_active')} created_at={t.get('created_at')} expires_at={t.get('expires_at')}")
    except requests.exceptions.RequestException as e:
        raise click.ClickException(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")


@token.command('revoke')
@click.argument('token_id')
@click.option('--company-id', default=None, help='Company ID –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
@click.option('--email', default=None, help='Email –¥–ª—è –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –Ω–µ—Ç api_key')
@click.option('--password', default=None, help='–ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –Ω–µ—Ç api_key')
def token_revoke(token_id, company_id, email, password):
    """–û—Ç–æ–∑–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –ø–æ `token_id`.

    –ï—Å–ª–∏ `api_key` –Ω–µ –∑–∞–¥–∞–Ω, –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥ (email/–ø–∞—Ä–æ–ª—å).
    """
    config = load_config()
    server_url = config.get('server_url')
    if not server_url:
        raise click.ClickException('server_url –Ω–µ —É–∫–∞–∑–∞–Ω –≤ ~/.gs_tool/config.json')

    headers = _get_auth_headers_for_admin_ops(server_url, company_id, True, email, password)

    try:
        resp = requests.delete(f"{server_url.rstrip('/')}/api/v1/tokens/{token_id}", headers=headers)
        if resp.status_code not in (200, 204):
            raise click.ClickException(f"–û—à–∏–±–∫–∞: {resp.status_code} {resp.text}")
        click.echo('‚úÖ –¢–æ–∫–µ–Ω –æ—Ç–æ–∑–≤–∞–Ω')
    except requests.exceptions.RequestException as e:
        raise click.ClickException(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main() 