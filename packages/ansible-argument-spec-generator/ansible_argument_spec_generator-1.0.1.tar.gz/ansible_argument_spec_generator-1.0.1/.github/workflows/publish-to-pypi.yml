# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: write  # Allow committing version updates
  id-token: write  # For PyPI trusted publishing

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Extract version from release tag
        id: get_version
        run: |
          # Extract version from tag (remove 'v' prefix if present)
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Update version in pyproject.toml
        run: |
          sed -i 's/^version = ".*"/version = "${{ steps.get_version.outputs.version }}"/' pyproject.toml
          echo "Updated pyproject.toml version to ${{ steps.get_version.outputs.version }}"

      - name: Update version in __init__.py
        run: |
          sed -i 's/^__version__ = ".*"/__version__ = "${{ steps.get_version.outputs.version }}"/' __init__.py
          echo "Updated __init__.py version to ${{ steps.get_version.outputs.version }}"

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Checkout the target branch
          git checkout ${{ github.event.release.target_commitish }}

          git add pyproject.toml __init__.py
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "Update version to ${{ steps.get_version.outputs.version }}"
          git push

      - name: Build release distributions
        run: |
          python -m pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build

    environment:
      name: pypi
      url: https://pypi.org/p/ansible-argument-spec-generator

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
