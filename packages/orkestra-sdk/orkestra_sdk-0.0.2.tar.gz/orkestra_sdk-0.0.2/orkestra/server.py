from __future__ import annotations
from typing import TYPE_CHECKING, Dict, Optional
import uvicorn
from fastapi import FastAPI
from pydantic import BaseModel

if TYPE_CHECKING:
    from .orkestra import Orkestra
    from .core.workflow import Workflow


class PromptRequest(BaseModel):
    """Request body for workflow endpoints.

    Attributes:
        prompt (str): The input prompt forwarded to the first step in the workflow.

    Example:
        >>> {"prompt": "Summarize the latest AI advancements"}
    """
    prompt: str


class OrkestraServer:
    """Expose workflows as HTTP endpoints with automatic OpenAPI/Swagger/ReDoc docs.

    Parameters:
        orkestra_client (Orkestra): The client associated with the server.
        host (str): Host interface to bind (default: 127.0.0.1).
        port (int): Port to bind (default: 8000).

    Example:
        >>> from orkestra import Orkestra, OrkestraServer
        >>> client = Orkestra(api_key="YOUR_ORKESTRA_API_KEY")
        >>> server = OrkestraServer(client)
        >>> wf = client.Workflow().add(client.Agent(...))
        >>> server.add_workflow("summarize", wf, summary="Summarize text")
        >>> server.run()
    """
    def __init__(
        self,
        orkestra_client: Orkestra,
        host: str = "127.0.0.1",
        port: int = 8000,
    ):
        self.orkestra_client = orkestra_client
        self.host = host
        self.port = port
        self.app = FastAPI(
            title="Orkestra Workflow Server",
            description="API endpoints for deployed Orkestra workflows.",
            version="1.0.0",
        )
        self.workflows: Dict[str, Workflow] = {}

    def add_workflow(
        self,
        endpoint_name: str,
        workflow: Workflow,
        description: Optional[str] = None,
        summary: Optional[str] = None,
    ):
        """
        Register a workflow as an API endpoint and attach documentation.

        Parameters:
            endpoint_name (str): Slug for the endpoint (e.g., "summarize"). Must be a valid identifier.
            workflow (Workflow): The workflow instance to execute when this endpoint is called.
            description (str | None): Optional long-form description shown in ReDoc/Swagger.
            summary (str | None): Optional short summary shown in method list.

        Notes:
            If `description` is not provided, a readable description is auto-generated by
            inspecting the workflow's steps (agent names and descriptions).
        """
        if not endpoint_name.isidentifier():
            raise ValueError("Endpoint name must be a valid Python identifier.")

        self.workflows[endpoint_name] = workflow

        docstring = description
        if not docstring:
            agent_descriptions = []
            for i, step in enumerate(workflow.steps):
                agent_name = step.agent.config.name
                agent_desc = step.agent.config.description
                agent_descriptions.append(
                    f"{i + 1}. **{agent_name}**: {agent_desc}"
                )
            steps_summary = "\n".join(agent_descriptions)
            docstring = f"""Executes the **{endpoint_name}** workflow.

This workflow consists of the following agents in sequence:
<br>
{steps_summary}
"""

        endpoint_summary = summary or f"Run the {endpoint_name} workflow"

        def create_endpoint_function(wf: Workflow):
            async def endpoint(request: PromptRequest):
                result = wf.run(request.prompt)
                return {"output": result}

            endpoint.__doc__ = docstring
            return endpoint

        endpoint_func = create_endpoint_function(workflow)
        endpoint_func.__name__ = f"run_{endpoint_name}_workflow"
        self.app.post(
            f"/workflows/{endpoint_name}",
            tags=[f"Workflow: {endpoint_name}"],
            summary=endpoint_summary,
        )(endpoint_func)

    def run(self):
        """Start the Uvicorn server and serve the FastAPI app.

        After starting, visit `/docs` (Swagger UI) or `/redoc` (ReDoc) in your browser
        to explore and test your workflow endpoints interactively.
        """
        if not self.workflows:
            print("Warning: No workflows have been added to the server.")

        print(f"Starting Orkestra server at http://{self.host}:{self.port}")
        print(f"Access Swagger UI at http://{self.host}:{self.port}/docs")
        uvicorn.run(self.app, host=self.host, port=self.port) 