# SPDX-FileCopyrightText: 2025-present Erik Abair <erik.abair@bearbrains.work>
#
# SPDX-License-Identifier: MIT

# ruff: noqa: PLR2004 Magic value used in comparison

from __future__ import annotations

import logging
import os
import re
from typing import TextIO

from nxdk_pgraph_test_runner._nxdk_pgraph_tester_test_output import NxdkPgraphTesterTestOutput

logger = logging.getLogger(__name__)

# START: "Lighting normals::Nz_-100-inlinearrays"
# - OUTPUT: "Lighting normals::Nz_-100-inlinearrays.png"
# - MISSING: "Lighting normals::Nz_-100-inlinearrays.png"
# END: "Lighting normals::Nz_-100-inlinearrays" IN 99 MS

_START_MESSAGE = re.compile(r'^START: "([^"]+)"\s*$')
_ARTIFACT_MESSAGE = re.compile(r'^-\s+OUTPUT: "([^"]+)"\s*$')
_MISSING_ARTIFACT_MESSAGE = re.compile(r'^-\s+MISSING: "([^"]+)"\s*$')
# TODO: Fix the nxdk_pgraph_tests error that allows the duration to be negative.
_COMPLETE_MESSAGE = re.compile(r'^END: "([^"]+)" IN -?(\d+) MS\s*$')


class NxdkPgraphTesterProgressLog:
    """Processes the progress log generated by the nxdk_pgraph_tester program."""

    def __init__(self, progress_log_path: str, artifact_path: str) -> None:
        finished_tests: list[NxdkPgraphTesterTestOutput] = []
        maybe_failed: str | None = None

        if os.path.isfile(progress_log_path):
            with open(progress_log_path) as progress_file:
                finished_tests, maybe_failed = _parse_log(progress_file, artifact_path)

        self.completed_tests: list[NxdkPgraphTesterTestOutput] = finished_tests
        self.last_failed_test: str | None = maybe_failed

    def update(self, progress_log_path: str, artifact_path: str) -> None:
        """Updates the set of completed tests."""
        with open(progress_log_path) as progress_file:
            finished_tests, maybe_failed = _parse_log(progress_file, artifact_path)

        self.completed_tests.extend(finished_tests)
        self.last_failed_test = maybe_failed

    @property
    def completed_and_failed_fully_qualified_test_names(self) -> set[str]:
        """Returns a set of the fully qualified names of all completed and failed tests."""
        ret = {output.fully_qualified_name for output in self.completed_tests}
        if self.last_failed_test:
            ret.add(self.last_failed_test)
        return ret


def _parse_log(progress_file: TextIO, artifact_dir: str) -> tuple[list[NxdkPgraphTesterTestOutput], str | None]:
    """Processes the given progress_file into a list of completed tests and an optional test that failed to complete."""

    completed_tests: list[NxdkPgraphTesterTestOutput] = []
    last_started_test: str | None = None
    artifacts: list[str] = []
    missing: list[str] = []

    for line in progress_file:
        match = _START_MESSAGE.match(line)
        if match:
            artifacts.clear()
            missing.clear()
            last_started_test = match.group(1)
            continue

        match = _ARTIFACT_MESSAGE.match(line)
        if match:
            artifacts.append(match.group(1))
            continue

        match = _MISSING_ARTIFACT_MESSAGE.match(line)
        if match:
            missing.append(match.group(1))
            continue

        match = _COMPLETE_MESSAGE.match(line)
        if match:
            completed_test = match.group(1)
            duration_milliseconds = int(match.group(2))

            if completed_test != last_started_test:
                msg = f"Mismatched test result {last_started_test} != completed {completed_test}"
                raise NotImplementedError(msg)

            last_started_test = None
            completed_tests.append(
                NxdkPgraphTesterTestOutput.create(
                    completed_test, duration_milliseconds, artifact_dir, artifacts, missing
                )
            )
            continue

        logger.warning("Unexpected line '%s'", line.strip())

    return completed_tests, last_started_test
