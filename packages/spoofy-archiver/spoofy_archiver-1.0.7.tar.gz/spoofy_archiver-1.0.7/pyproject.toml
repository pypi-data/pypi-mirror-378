#:schema None

[project]
name = "spoofy-archiver"
version = "1.0.7"
description = "Archiver for popular streaming service Spoofy"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "colorama>=0.4.6",
    "duckdb>=1.3.2",
    # Hecked section
    # "librespot @ git+https://github.com/kokarare1212/librespot-python@1ad1e40b5adeab6c185c7abc4cca3489d5711906",
    # "mutagen @ git+https://github.com/quodlibet/mutagen@9e3ff54b7413b36046754d06f7c50a110ee8327b",
    # "mutagen>=1.47.0",
    "defusedxml>=0.7.1",
    "protobuf==3.20.1",
    "pycryptodomex>=3.22.0",
    "pyogg>=0.6.14a.1",
    "websocket-client>=1.8.0",
    "zeroconf>=0.146.4",
    # End hecked section
    "pathvalidate>=3.3.1",
    "pydantic>=2.11.7",
    "python-dotenv>=1.1.1",
    "requests>=2.30.0",
    "spotipy>=2.25.1",
    "tqdm>=4.67.1",
]

[dependency-groups]
dev = ["pyright>=1.1.394"]
type = [
    "mypy>=1.17.0",
    "ty>=0.0.1a16",
    "types-colorama>=0.4.15.20240311",
    "types-requests>=2.32.0.20241016",
    "types-tqdm>=4.67.0.20250516",
]
lint = ["ruff>=0.12.7"]
test = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-random-order>=1.1.1",
    "tomlkit>=0.13.2",
    "detect-test-pollution>=1.2.0",
]

[project.urls]
repository = "https://github.com/kism/spoofy-archiver"

[build-system]
requires = ["uv_build>=0.8.4,<0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = ["spoofy_archiver", "librespot", "mutagen"]
module-root = ""

[project.scripts]
spoofy-archiver = "spoofy_archiver:__main__.main"

[tool.uv]
default-groups = ["dev", "type", "test", "lint"]

[tool.ruff]
cache-dir = "~/.cache/ruff"
target-version = "py311"
line-length = 120

[tool.ruff.lint]
extend-fixable = ["B", "I001"] # KG I think this means something...
extend-unsafe-fixes = [
    "F401",
] # KG I don't like that this is fixed automatically (this doesn't work?)
select = ["ALL"] # KG Include absolutely all of Ruff's rules.
ignore = [
    # Modules
    "DJ",  # KG Django not required
    "DTZ", # KG no need to specify timezone for time objects

    # Specific rules
    # "ANN101", # KG Why define self type for object functions...
    "TD002",  # KG Verbose TODO, only I work on this project
    "TD003",  # KG Verbose TODO, only I work on this project
    "ISC001", # KG conflict in the formatter
    "COM812", # KG conflict in the formatter
]

[tool.ruff.lint.per-file-ignores]
"librespot/*" = ["ALL"]
"mutagen/*" = ["ALL"]
"tests/*.py" = [
    # Modules
    "ARG", # KG Unused function args -> fixtures nevertheless are functionally relevant
    "FBT", # KG Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "ANN", # KG Don't care about annotations in tests
    "D",   # KG Don't care about docstrings in tests

    # Specific rules
    "S101",    # KG asserts allowed in tests.
    "SLF001",  # KG Accessing private members is needed for testing.
    "INP001",  # KG __init__.py not needed for PyTest.
    "PT004",   # KG monkeypatch doesn't return.
    "S311",    # KG I'll assume no real crypto will be done in PyTest.
    "S105",    # KG Hardcoded fake passwords are fine in tests.
    "PLR0913", # KG Tests can have as many arguments as they want.
    "BLE001",  # KG Tests can use BaseException.
    "TRY002",  # KG Tests can use bare except.
    "PLR2004", # KG Tests can use magic comparisons.
    "S106",    # KG Hardcoded passwords are fine in tests.
]


[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
docstring-code-line-length = 40

[tool.pytest.ini_options]
addopts = [
    "--cov-context=test",
    "--cov=spoofy_archiver",
    "--cov-report=term",
    "--cov-report=html",
]
testpaths = ["tests"]
filterwarnings = [ # These are out of my control
    "ignore::DeprecationWarning:google.protobuf.*",
]

[tool.coverage.html]
show_contexts = true

[tool.mypy]
plugins = ["pydantic.mypy"]
files = ["spoofy_archiver", "tests"]
show_error_codes = true
strict = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
    "type-arg",
    "unused-awaitable",
    "possibly-undefined",
    "redundant-self",
]
warn_unreachable = true
warn_redundant_casts = true
warn_no_return = true

[[tool.mypy.overrides]]
module = ['librespot.*', 'spotipy.*']
ignore_missing_imports = true

[tool.ty.rules]
missing-argument = "ignore"
