Metadata-Version: 2.4
Name: ophyd-async
Version: 0.13.3
Summary: Asynchronous Bluesky hardware abstraction code, compatible with control systems like EPICS and Tango
Author-email: Tom Cobb <tom.cobb@diamond.ac.uk>
License: BSD 3-Clause License
        
        Copyright (c) 2014, Brookhaven National Laboratory
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
        
        1. Redistributions of source code must retain the above copyright notice, this
           list of conditions and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        
        3. Neither the name of the copyright holder nor the names of its
           contributors may be used to endorse or promote products derived from
           this software without specific prior written permission.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
Project-URL: GitHub, https://github.com/bluesky/ophyd-async
Classifier: Development Status :: 3 - Alpha
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy
Requires-Dist: bluesky>=1.13.1rc2
Requires-Dist: event-model>=1.23
Requires-Dist: pyyaml
Requires-Dist: colorlog
Requires-Dist: pydantic>=2.0
Requires-Dist: pydantic-numpy
Requires-Dist: stamina>=23.1.0
Requires-Dist: scanspec>=0.8
Requires-Dist: velocity-profile
Provides-Extra: sim
Requires-Dist: h5py; extra == "sim"
Provides-Extra: ca
Requires-Dist: aioca>=2.0a4; extra == "ca"
Provides-Extra: pva
Requires-Dist: p4p>=4.2.0; extra == "pva"
Provides-Extra: tango
Requires-Dist: pytango==10.0.2; extra == "tango"
Provides-Extra: demo
Requires-Dist: ipython; extra == "demo"
Requires-Dist: matplotlib; extra == "demo"
Requires-Dist: pyqt6; extra == "demo"
Provides-Extra: dev
Requires-Dist: ophyd_async[sim]; extra == "dev"
Requires-Dist: ophyd_async[ca]; extra == "dev"
Requires-Dist: ophyd_async[pva]; extra == "dev"
Requires-Dist: ophyd_async[tango]; extra == "dev"
Requires-Dist: ophyd_async[demo]; extra == "dev"
Requires-Dist: inflection; extra == "dev"
Requires-Dist: import-linter; extra == "dev"
Requires-Dist: myst-parser; extra == "dev"
Requires-Dist: numpydoc; extra == "dev"
Requires-Dist: ophyd>=1.10.7; extra == "dev"
Requires-Dist: pickleshare; extra == "dev"
Requires-Dist: pipdeptree; extra == "dev"
Requires-Dist: pre-commit; extra == "dev"
Requires-Dist: pydata-sphinx-theme>=0.12; extra == "dev"
Requires-Dist: pyepics>=3.4.2; extra == "dev"
Requires-Dist: pyright; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-asyncio; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: pytest-faulthandler; extra == "dev"
Requires-Dist: pytest-forked; extra == "dev"
Requires-Dist: pytest-rerunfailures; extra == "dev"
Requires-Dist: pytest-timeout; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Requires-Dist: scanspec>=1.0a1; extra == "dev"
Requires-Dist: sphinx-autobuild; extra == "dev"
Requires-Dist: sphinx-autodoc2; extra == "dev"
Requires-Dist: sphinxcontrib-mermaid; extra == "dev"
Requires-Dist: sphinx-copybutton; extra == "dev"
Requires-Dist: sphinx-design; extra == "dev"
Requires-Dist: tox-direct; extra == "dev"
Requires-Dist: types-mock; extra == "dev"
Requires-Dist: types-pyyaml; extra == "dev"
Dynamic: license-file

[![CI](https://github.com/bluesky/ophyd-async/actions/workflows/ci.yml/badge.svg)](https://github.com/bluesky/ophyd-async/actions/workflows/ci.yml)
[![Coverage](https://codecov.io/gh/bluesky/ophyd-async/branch/main/graph/badge.svg)](https://codecov.io/gh/bluesky/ophyd-async)
[![PyPI](https://img.shields.io/pypi/v/ophyd-async.svg)](https://pypi.org/project/ophyd-async)
[![License](https://img.shields.io/badge/License-BSD_3--Clause-blue.svg)](https://choosealicense.com/licenses/bsd-3-clause)

# ![ophyd-async](https://raw.githubusercontent.com/bluesky/ophyd-async/main/docs/images/ophyd-async-logo.svg)

Asynchronous Bluesky hardware abstraction code, compatible with control systems like EPICS and Tango.

|    Source     |     <https://github.com/bluesky/ophyd-async>      |
| :-----------: | :-----------------------------------------------: |
|     PyPI      |             `pip install ophyd-async`             |
| Documentation |      <https://bluesky.github.io/ophyd-async>      |
|   Releases    | <https://github.com/bluesky/ophyd-async/releases> |

Ophyd-async is a Python library for asynchronously interfacing with hardware, intended to be used as an abstraction layer that enables experiment orchestration and data acquisition code to operate above the specifics of particular devices and control systems.

Both ophyd sync and ophyd-async are typically used with the [Bluesky Run Engine][] for experiment orchestration and data acquisition.

The main differences from ophyd sync are:

- Asynchronous Signal access, simplifying the parallel control of multiple Signals
- Support for [EPICS][] PVA and [Tango][] as well as the traditional EPICS CA
- Better library support for splitting the logic from the hardware interface to avoid complex class heirarchies

It was written with the aim of implementing fly scanning in a generic and extensible way with highly customizable devices like PandABox and the Delta Tau PMAC products. Using async code makes it possible to do the "put 3 PVs in parallel, then get from another PV" logic that is common in fly scanning without the performance and complexity overhead of multiple threads.

Devices from both ophyd sync and ophyd-async can be used in the same RunEngine and even in the same scan. This allows a per-device migration where devices are reimplemented in ophyd-async one by one.

[Bluesky Run Engine]: http://blueskyproject.io/bluesky
[EPICS]: http://www.aps.anl.gov/epics/
[Tango]: https://www.tango-controls.org/

<!-- README only content. Anything below this line won't be included in index.md -->

See https://bluesky.github.io/ophyd-async for more detailed documentation.
