[project]
name = "celeste-ai"
version = "0.0.2"
description = "Celeste AI Framework - Multi-modal AI interface (placeholder)"
authors = [{name = "agent-kai", email = "kai@celeste-ai.co"}]
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["ai", "ml", "multimodal", "openai", "anthropic", "google"]
dependencies = [
    "pydantic>=2.0",
    "pydantic-settings>=2.0",
]

[project.urls]
Homepage = "https://celeste-ai.co"
Repository = "https://github.com/celeste-kai/celeste-ai"

[project.optional-dependencies]
dev = [
    "pytest>=8.0",
    "pytest-cov>=7.0",
    "pytest-randomly>=4.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "types-requests>=2.31.0",
    "bandit[toml]>=1.7.5",
    "pre-commit>=3.5.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/celeste"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
addopts = "-ra --strict-markers --strict-config"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "smoke: quick checks for critical paths",
]

[tool.coverage.run]
branch = true
dynamic_context = "test_function"

[tool.coverage.report]
show_missing = true
fail_under = 90

[tool.ruff]
# Same as Black's default
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # Pyflakes (unused imports, undefined names)
    "I",    # isort (import sorting)
    "UP",   # pyupgrade (upgrade syntax for newer Python)
    "B",    # flake8-bugbear (catches common bugs)
    "SIM",  # flake8-simplify (code simplification)
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",  # Line too long - trust formatter's judgment
    "SIM108", # Use ternary operator instead of if-else-block (sometimes less readable)
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Match Black's style
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint.isort]
known-first-party = ["celeste"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]  # No docstrings required in tests

[tool.mypy]
python_version = "3.9"
# Strict type checking for production code
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true  # Require type hints
disallow_any_unimported = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false  # Relax for tests
disallow_incomplete_defs = false

[tool.bandit]
exclude_dirs = [".venv", "__pycache__"]
skips = ["B101"] # Skip B101 (assert_used) since we use pytest

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*_test.py"] # Allow assertions in test files
