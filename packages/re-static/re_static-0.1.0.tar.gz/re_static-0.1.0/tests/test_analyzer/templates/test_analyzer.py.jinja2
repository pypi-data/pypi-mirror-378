from __future__ import annotations

from dataclasses import dataclass

from re_static.analyzer import Group, get_groups

# Generated by generate.py and manually reviewed


@dataclass(frozen=True)
class GroupDescription:
    name: str | None
    always_present: bool

    def with_index(self, index: int) -> Group:
        return Group(
            index=index,
            name=self.name,
            always_present=self.always_present,
        )


def always_present(name: str | None = None) -> GroupDescription:
    return GroupDescription(name=name, always_present=True)


def optional(name: str | None = None) -> GroupDescription:
    return GroupDescription(name=name, always_present=False)


def check(pattern: str, *want_groups: GroupDescription, flags: int = 0) -> None:
    got_groups = get_groups(pattern, flags=flags)
    _want_groups = [Group(index=0, name=None, always_present=True)] + [
        it.with_index(idx + 1) for idx, it in enumerate(want_groups)
    ]
    assert got_groups == _want_groups, pattern
{% for test_suite in test_suites %}

async def test_get_groups_suite_{{ loop.index }}():
    # {{ test_suite.base_regex }}
{% for case in test_suite.cases %}
{{ case }}
{% endfor -%}

{% endfor -%}
