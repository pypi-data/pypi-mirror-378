# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ListGuidances200ResponseAllOfDiscoveriesInnerAnyOfConfig(BaseModel):
    """
    ListGuidances200ResponseAllOfDiscoveriesInnerAnyOfConfig
    """ # noqa: E501
    exists: Optional[StrictBool] = None
    object_id: Optional[StrictInt] = Field(default=None, alias="objectId")
    cpu_total_time_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuTotalTimeCount")
    cpu_total_time_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuTotalTimeMin")
    cpu_total_time_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuTotalTimeMax")
    cpu_total_time_avg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuTotalTimeAvg")
    cpu_total_time_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuTotalTimeSum")
    cpu_idle_time_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuIdleTimeCount")
    cpu_idle_time_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuIdleTimeMin")
    cpu_idle_time_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuIdleTimeMax")
    cpu_idle_time_avg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuIdleTimeAvg")
    cpu_idle_time_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuIdleTimeSum")
    cpu_usage_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuUsageCount")
    cpu_usage_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuUsageMin")
    cpu_usage_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuUsageMax")
    cpu_usage_avg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuUsageAvg")
    cpu_usage_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuUsageSum")
    max_memory_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxMemoryCount")
    max_memory_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxMemoryMin")
    max_memory_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxMemoryMax")
    max_memory_avg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxMemoryAvg")
    max_memory_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxMemorySum")
    cpu_user_time_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuUserTimeCount")
    cpu_user_time_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuUserTimeMin")
    cpu_user_time_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuUserTimeMax")
    cpu_user_time_avg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuUserTimeAvg")
    cpu_user_time_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuUserTimeSum")
    cpu_system_time_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuSystemTimeCount")
    cpu_system_time_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuSystemTimeMin")
    cpu_system_time_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuSystemTimeMax")
    cpu_system_time_avg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuSystemTimeAvg")
    cpu_system_time_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cpuSystemTimeSum")
    used_memory_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="usedMemoryCount")
    used_memory_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="usedMemoryMin")
    used_memory_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="usedMemoryMax")
    used_memory_avg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="usedMemoryAvg")
    used_memory_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="usedMemorySum")
    free_memory_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="freeMemoryCount")
    free_memory_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="freeMemoryMin")
    free_memory_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="freeMemoryMax")
    free_memory_avg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="freeMemoryAvg")
    free_memory_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="freeMemorySum")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["exists", "objectId", "cpuTotalTimeCount", "cpuTotalTimeMin", "cpuTotalTimeMax", "cpuTotalTimeAvg", "cpuTotalTimeSum", "cpuIdleTimeCount", "cpuIdleTimeMin", "cpuIdleTimeMax", "cpuIdleTimeAvg", "cpuIdleTimeSum", "cpuUsageCount", "cpuUsageMin", "cpuUsageMax", "cpuUsageAvg", "cpuUsageSum", "maxMemoryCount", "maxMemoryMin", "maxMemoryMax", "maxMemoryAvg", "maxMemorySum", "cpuUserTimeCount", "cpuUserTimeMin", "cpuUserTimeMax", "cpuUserTimeAvg", "cpuUserTimeSum", "cpuSystemTimeCount", "cpuSystemTimeMin", "cpuSystemTimeMax", "cpuSystemTimeAvg", "cpuSystemTimeSum", "usedMemoryCount", "usedMemoryMin", "usedMemoryMax", "usedMemoryAvg", "usedMemorySum", "freeMemoryCount", "freeMemoryMin", "freeMemoryMax", "freeMemoryAvg", "freeMemorySum"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListGuidances200ResponseAllOfDiscoveriesInnerAnyOfConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if cpu_total_time_count (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_total_time_count is None and "cpu_total_time_count" in self.model_fields_set:
            _dict['cpuTotalTimeCount'] = None

        # set to None if cpu_total_time_min (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_total_time_min is None and "cpu_total_time_min" in self.model_fields_set:
            _dict['cpuTotalTimeMin'] = None

        # set to None if cpu_total_time_max (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_total_time_max is None and "cpu_total_time_max" in self.model_fields_set:
            _dict['cpuTotalTimeMax'] = None

        # set to None if cpu_total_time_avg (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_total_time_avg is None and "cpu_total_time_avg" in self.model_fields_set:
            _dict['cpuTotalTimeAvg'] = None

        # set to None if cpu_total_time_sum (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_total_time_sum is None and "cpu_total_time_sum" in self.model_fields_set:
            _dict['cpuTotalTimeSum'] = None

        # set to None if cpu_idle_time_count (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_idle_time_count is None and "cpu_idle_time_count" in self.model_fields_set:
            _dict['cpuIdleTimeCount'] = None

        # set to None if cpu_idle_time_min (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_idle_time_min is None and "cpu_idle_time_min" in self.model_fields_set:
            _dict['cpuIdleTimeMin'] = None

        # set to None if cpu_idle_time_max (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_idle_time_max is None and "cpu_idle_time_max" in self.model_fields_set:
            _dict['cpuIdleTimeMax'] = None

        # set to None if cpu_idle_time_avg (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_idle_time_avg is None and "cpu_idle_time_avg" in self.model_fields_set:
            _dict['cpuIdleTimeAvg'] = None

        # set to None if cpu_idle_time_sum (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_idle_time_sum is None and "cpu_idle_time_sum" in self.model_fields_set:
            _dict['cpuIdleTimeSum'] = None

        # set to None if cpu_usage_count (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_usage_count is None and "cpu_usage_count" in self.model_fields_set:
            _dict['cpuUsageCount'] = None

        # set to None if cpu_usage_min (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_usage_min is None and "cpu_usage_min" in self.model_fields_set:
            _dict['cpuUsageMin'] = None

        # set to None if cpu_usage_max (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_usage_max is None and "cpu_usage_max" in self.model_fields_set:
            _dict['cpuUsageMax'] = None

        # set to None if cpu_usage_avg (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_usage_avg is None and "cpu_usage_avg" in self.model_fields_set:
            _dict['cpuUsageAvg'] = None

        # set to None if cpu_usage_sum (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_usage_sum is None and "cpu_usage_sum" in self.model_fields_set:
            _dict['cpuUsageSum'] = None

        # set to None if max_memory_count (nullable) is None
        # and model_fields_set contains the field
        if self.max_memory_count is None and "max_memory_count" in self.model_fields_set:
            _dict['maxMemoryCount'] = None

        # set to None if max_memory_min (nullable) is None
        # and model_fields_set contains the field
        if self.max_memory_min is None and "max_memory_min" in self.model_fields_set:
            _dict['maxMemoryMin'] = None

        # set to None if max_memory_max (nullable) is None
        # and model_fields_set contains the field
        if self.max_memory_max is None and "max_memory_max" in self.model_fields_set:
            _dict['maxMemoryMax'] = None

        # set to None if max_memory_avg (nullable) is None
        # and model_fields_set contains the field
        if self.max_memory_avg is None and "max_memory_avg" in self.model_fields_set:
            _dict['maxMemoryAvg'] = None

        # set to None if max_memory_sum (nullable) is None
        # and model_fields_set contains the field
        if self.max_memory_sum is None and "max_memory_sum" in self.model_fields_set:
            _dict['maxMemorySum'] = None

        # set to None if cpu_user_time_count (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_user_time_count is None and "cpu_user_time_count" in self.model_fields_set:
            _dict['cpuUserTimeCount'] = None

        # set to None if cpu_user_time_min (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_user_time_min is None and "cpu_user_time_min" in self.model_fields_set:
            _dict['cpuUserTimeMin'] = None

        # set to None if cpu_user_time_max (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_user_time_max is None and "cpu_user_time_max" in self.model_fields_set:
            _dict['cpuUserTimeMax'] = None

        # set to None if cpu_user_time_avg (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_user_time_avg is None and "cpu_user_time_avg" in self.model_fields_set:
            _dict['cpuUserTimeAvg'] = None

        # set to None if cpu_user_time_sum (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_user_time_sum is None and "cpu_user_time_sum" in self.model_fields_set:
            _dict['cpuUserTimeSum'] = None

        # set to None if cpu_system_time_count (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_system_time_count is None and "cpu_system_time_count" in self.model_fields_set:
            _dict['cpuSystemTimeCount'] = None

        # set to None if cpu_system_time_min (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_system_time_min is None and "cpu_system_time_min" in self.model_fields_set:
            _dict['cpuSystemTimeMin'] = None

        # set to None if cpu_system_time_max (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_system_time_max is None and "cpu_system_time_max" in self.model_fields_set:
            _dict['cpuSystemTimeMax'] = None

        # set to None if cpu_system_time_sum (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_system_time_sum is None and "cpu_system_time_sum" in self.model_fields_set:
            _dict['cpuSystemTimeSum'] = None

        # set to None if used_memory_count (nullable) is None
        # and model_fields_set contains the field
        if self.used_memory_count is None and "used_memory_count" in self.model_fields_set:
            _dict['usedMemoryCount'] = None

        # set to None if used_memory_min (nullable) is None
        # and model_fields_set contains the field
        if self.used_memory_min is None and "used_memory_min" in self.model_fields_set:
            _dict['usedMemoryMin'] = None

        # set to None if used_memory_max (nullable) is None
        # and model_fields_set contains the field
        if self.used_memory_max is None and "used_memory_max" in self.model_fields_set:
            _dict['usedMemoryMax'] = None

        # set to None if used_memory_avg (nullable) is None
        # and model_fields_set contains the field
        if self.used_memory_avg is None and "used_memory_avg" in self.model_fields_set:
            _dict['usedMemoryAvg'] = None

        # set to None if used_memory_sum (nullable) is None
        # and model_fields_set contains the field
        if self.used_memory_sum is None and "used_memory_sum" in self.model_fields_set:
            _dict['usedMemorySum'] = None

        # set to None if free_memory_count (nullable) is None
        # and model_fields_set contains the field
        if self.free_memory_count is None and "free_memory_count" in self.model_fields_set:
            _dict['freeMemoryCount'] = None

        # set to None if free_memory_min (nullable) is None
        # and model_fields_set contains the field
        if self.free_memory_min is None and "free_memory_min" in self.model_fields_set:
            _dict['freeMemoryMin'] = None

        # set to None if free_memory_max (nullable) is None
        # and model_fields_set contains the field
        if self.free_memory_max is None and "free_memory_max" in self.model_fields_set:
            _dict['freeMemoryMax'] = None

        # set to None if free_memory_avg (nullable) is None
        # and model_fields_set contains the field
        if self.free_memory_avg is None and "free_memory_avg" in self.model_fields_set:
            _dict['freeMemoryAvg'] = None

        # set to None if free_memory_sum (nullable) is None
        # and model_fields_set contains the field
        if self.free_memory_sum is None and "free_memory_sum" in self.model_fields_set:
            _dict['freeMemorySum'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListGuidances200ResponseAllOfDiscoveriesInnerAnyOfConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exists": obj.get("exists"),
            "objectId": obj.get("objectId"),
            "cpuTotalTimeCount": obj.get("cpuTotalTimeCount"),
            "cpuTotalTimeMin": obj.get("cpuTotalTimeMin"),
            "cpuTotalTimeMax": obj.get("cpuTotalTimeMax"),
            "cpuTotalTimeAvg": obj.get("cpuTotalTimeAvg"),
            "cpuTotalTimeSum": obj.get("cpuTotalTimeSum"),
            "cpuIdleTimeCount": obj.get("cpuIdleTimeCount"),
            "cpuIdleTimeMin": obj.get("cpuIdleTimeMin"),
            "cpuIdleTimeMax": obj.get("cpuIdleTimeMax"),
            "cpuIdleTimeAvg": obj.get("cpuIdleTimeAvg"),
            "cpuIdleTimeSum": obj.get("cpuIdleTimeSum"),
            "cpuUsageCount": obj.get("cpuUsageCount"),
            "cpuUsageMin": obj.get("cpuUsageMin"),
            "cpuUsageMax": obj.get("cpuUsageMax"),
            "cpuUsageAvg": obj.get("cpuUsageAvg"),
            "cpuUsageSum": obj.get("cpuUsageSum"),
            "maxMemoryCount": obj.get("maxMemoryCount"),
            "maxMemoryMin": obj.get("maxMemoryMin"),
            "maxMemoryMax": obj.get("maxMemoryMax"),
            "maxMemoryAvg": obj.get("maxMemoryAvg"),
            "maxMemorySum": obj.get("maxMemorySum"),
            "cpuUserTimeCount": obj.get("cpuUserTimeCount"),
            "cpuUserTimeMin": obj.get("cpuUserTimeMin"),
            "cpuUserTimeMax": obj.get("cpuUserTimeMax"),
            "cpuUserTimeAvg": obj.get("cpuUserTimeAvg"),
            "cpuUserTimeSum": obj.get("cpuUserTimeSum"),
            "cpuSystemTimeCount": obj.get("cpuSystemTimeCount"),
            "cpuSystemTimeMin": obj.get("cpuSystemTimeMin"),
            "cpuSystemTimeMax": obj.get("cpuSystemTimeMax"),
            "cpuSystemTimeAvg": obj.get("cpuSystemTimeAvg"),
            "cpuSystemTimeSum": obj.get("cpuSystemTimeSum"),
            "usedMemoryCount": obj.get("usedMemoryCount"),
            "usedMemoryMin": obj.get("usedMemoryMin"),
            "usedMemoryMax": obj.get("usedMemoryMax"),
            "usedMemoryAvg": obj.get("usedMemoryAvg"),
            "usedMemorySum": obj.get("usedMemorySum"),
            "freeMemoryCount": obj.get("freeMemoryCount"),
            "freeMemoryMin": obj.get("freeMemoryMin"),
            "freeMemoryMax": obj.get("freeMemoryMax"),
            "freeMemoryAvg": obj.get("freeMemoryAvg"),
            "freeMemorySum": obj.get("freeMemorySum")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


