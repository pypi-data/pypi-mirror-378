# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from morpheus.models.add_blueprint_request_one_of1_cloud_formation_git import AddBlueprintRequestOneOf1CloudFormationGit
from typing import Optional, Set
from typing_extensions import Self

class AddBlueprintRequestOneOf1CloudFormation(BaseModel):
    """
    AddBlueprintRequestOneOf1CloudFormation
    """ # noqa: E501
    config_type: StrictStr = Field(description="Configuration Type", alias="configType")
    var_json: Optional[StrictStr] = Field(default=None, description="CloudFormation Template in JSON", alias="json")
    yaml: Optional[StrictStr] = Field(default=None, description="CloudFormation Template in YAML")
    git: Optional[AddBlueprintRequestOneOf1CloudFormationGit] = None
    iam: Optional[StrictBool] = Field(default=False, description="CloudFormation Attribute CAPABILITY_IAM", alias="IAM")
    capability_named_iam: Optional[StrictBool] = Field(default=False, description="CloudFormation Attribute CAPABILITY_NAMED_IAM", alias="CAPABILITY_NAMED_IAM")
    capability_auto_expand: Optional[StrictBool] = Field(default=False, description="CloudFormation Attribute CAPABILITY_AUTO_EXPAND", alias="CAPABILITY_AUTO_EXPAND")
    install_agent: Optional[StrictBool] = Field(default=False, description="Install Morpheus Agent", alias="installAgent")
    cloud_init_enabled: Optional[StrictBool] = Field(default=False, description="Cloud Init Enabled", alias="cloudInitEnabled")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["configType", "json", "yaml", "git", "IAM", "CAPABILITY_NAMED_IAM", "CAPABILITY_AUTO_EXPAND", "installAgent", "cloudInitEnabled"]

    @field_validator('config_type')
    def config_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['json', 'yaml', 'git']):
            raise ValueError("must be one of enum values ('json', 'yaml', 'git')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddBlueprintRequestOneOf1CloudFormation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of git
        if self.git:
            _dict['git'] = self.git.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddBlueprintRequestOneOf1CloudFormation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configType": obj.get("configType"),
            "json": obj.get("json"),
            "yaml": obj.get("yaml"),
            "git": AddBlueprintRequestOneOf1CloudFormationGit.from_dict(obj["git"]) if obj.get("git") is not None else None,
            "IAM": obj.get("IAM") if obj.get("IAM") is not None else False,
            "CAPABILITY_NAMED_IAM": obj.get("CAPABILITY_NAMED_IAM") if obj.get("CAPABILITY_NAMED_IAM") is not None else False,
            "CAPABILITY_AUTO_EXPAND": obj.get("CAPABILITY_AUTO_EXPAND") if obj.get("CAPABILITY_AUTO_EXPAND") is not None else False,
            "installAgent": obj.get("installAgent") if obj.get("installAgent") is not None else False,
            "cloudInitEnabled": obj.get("cloudInitEnabled") if obj.get("cloudInitEnabled") is not None else False
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


