# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from morpheus.models.update_whitelabel_settings_request_whitelabel_settings_support_menu_links_inner import UpdateWhitelabelSettingsRequestWhitelabelSettingsSupportMenuLinksInner
from typing import Optional, Set
from typing_extensions import Self

class WhitelabelSettingsUpdate(BaseModel):
    """
    WhitelabelSettingsUpdate
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="Can be used to enable / disable whitelabel feature")
    appliance_name: Optional[StrictStr] = Field(default=None, description="Appliance name. Master account only", alias="applianceName")
    disable_support_menu: Optional[StrictBool] = Field(default=None, description="Can be used to disable support menu", alias="disableSupportMenu")
    reset_header_logo: Optional[StrictBool] = Field(default=None, description="Resets header logo to default header logo", alias="resetHeaderLogo")
    reset_footer_logo: Optional[StrictBool] = Field(default=None, description="Resets footer logo to default footer logo", alias="resetFooterLogo")
    reset_login_logo: Optional[StrictBool] = Field(default=None, description="Resets login logo to default login logo", alias="resetLoginLogo")
    reset_favicon: Optional[StrictBool] = Field(default=None, description="Resets favicon to default favicon", alias="resetFavicon")
    header_bg_color: Optional[StrictStr] = Field(default=None, description="Header background color", alias="headerBgColor")
    header_fg_color: Optional[StrictStr] = Field(default=None, description="Header foreground color", alias="headerFgColor")
    nav_bg_color: Optional[StrictStr] = Field(default=None, description="Nav background color", alias="navBgColor")
    nav_fg_color: Optional[StrictStr] = Field(default=None, description="Nav foreground color", alias="navFgColor")
    nav_hover_color: Optional[StrictStr] = Field(default=None, description="Nav hover color", alias="navHoverColor")
    primary_button_bg_color: Optional[StrictStr] = Field(default=None, description="Primary button background color", alias="primaryButtonBgColor")
    primary_button_fg_color: Optional[StrictStr] = Field(default=None, description="Primary button foreground color", alias="primaryButtonFgColor")
    primary_button_hover_bg_color: Optional[StrictStr] = Field(default=None, description="Primary button hover background color", alias="primaryButtonHoverBgColor")
    primary_button_hover_fg_color: Optional[StrictStr] = Field(default=None, description="Primary button hover foreground color", alias="primaryButtonHoverFgColor")
    footer_bg_color: Optional[StrictStr] = Field(default=None, description="Footer background color", alias="footerBgColor")
    footer_fg_color: Optional[StrictStr] = Field(default=None, description="Footer foreground color", alias="footerFgColor")
    login_bg_color: Optional[StrictStr] = Field(default=None, description="Login background color", alias="loginBgColor")
    copyright_string: Optional[StrictStr] = Field(default=None, description="Copyright String", alias="copyrightString")
    override_css: Optional[StrictStr] = Field(default=None, description="Override CSS", alias="overrideCss")
    terms_of_use: Optional[StrictStr] = Field(default=None, description="Terms of use content", alias="termsOfUse")
    privacy_policy: Optional[StrictStr] = Field(default=None, description="Privacy policy content", alias="privacyPolicy")
    support_menu_links: Optional[List[UpdateWhitelabelSettingsRequestWhitelabelSettingsSupportMenuLinksInner]] = Field(default=None, alias="supportMenuLinks")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["enabled", "applianceName", "disableSupportMenu", "resetHeaderLogo", "resetFooterLogo", "resetLoginLogo", "resetFavicon", "headerBgColor", "headerFgColor", "navBgColor", "navFgColor", "navHoverColor", "primaryButtonBgColor", "primaryButtonFgColor", "primaryButtonHoverBgColor", "primaryButtonHoverFgColor", "footerBgColor", "footerFgColor", "loginBgColor", "copyrightString", "overrideCss", "termsOfUse", "privacyPolicy", "supportMenuLinks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WhitelabelSettingsUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in support_menu_links (list)
        _items = []
        if self.support_menu_links:
            for _item_support_menu_links in self.support_menu_links:
                if _item_support_menu_links:
                    _items.append(_item_support_menu_links.to_dict())
            _dict['supportMenuLinks'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WhitelabelSettingsUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "applianceName": obj.get("applianceName"),
            "disableSupportMenu": obj.get("disableSupportMenu"),
            "resetHeaderLogo": obj.get("resetHeaderLogo"),
            "resetFooterLogo": obj.get("resetFooterLogo"),
            "resetLoginLogo": obj.get("resetLoginLogo"),
            "resetFavicon": obj.get("resetFavicon"),
            "headerBgColor": obj.get("headerBgColor"),
            "headerFgColor": obj.get("headerFgColor"),
            "navBgColor": obj.get("navBgColor"),
            "navFgColor": obj.get("navFgColor"),
            "navHoverColor": obj.get("navHoverColor"),
            "primaryButtonBgColor": obj.get("primaryButtonBgColor"),
            "primaryButtonFgColor": obj.get("primaryButtonFgColor"),
            "primaryButtonHoverBgColor": obj.get("primaryButtonHoverBgColor"),
            "primaryButtonHoverFgColor": obj.get("primaryButtonHoverFgColor"),
            "footerBgColor": obj.get("footerBgColor"),
            "footerFgColor": obj.get("footerFgColor"),
            "loginBgColor": obj.get("loginBgColor"),
            "copyrightString": obj.get("copyrightString"),
            "overrideCss": obj.get("overrideCss"),
            "termsOfUse": obj.get("termsOfUse"),
            "privacyPolicy": obj.get("privacyPolicy"),
            "supportMenuLinks": [UpdateWhitelabelSettingsRequestWhitelabelSettingsSupportMenuLinksInner.from_dict(_item) for _item in obj["supportMenuLinks"]] if obj.get("supportMenuLinks") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


