# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from morpheus.models.list_guidances200_response_all_of_discoveries_inner_any_of1_config_detail_list_inner import ListGuidances200ResponseAllOfDiscoveriesInnerAnyOf1ConfigDetailListInner
from morpheus.models.list_guidances200_response_all_of_discoveries_inner_any_of1_config_services import ListGuidances200ResponseAllOfDiscoveriesInnerAnyOf1ConfigServices
from morpheus.models.list_guidances200_response_all_of_discoveries_inner_any_of1_config_services_azure_vms_payment_options_value_term_options_value_summary import ListGuidances200ResponseAllOfDiscoveriesInnerAnyOf1ConfigServicesAzureVmsPaymentOptionsValueTermOptionsValueSummary
from typing import Optional, Set
from typing_extensions import Self

class ListGuidances200ResponseAllOfDiscoveriesInnerAnyOf1Config(BaseModel):
    """
    ListGuidances200ResponseAllOfDiscoveriesInnerAnyOf1Config
    """ # noqa: E501
    success: Optional[StrictBool] = None
    detail_list: Optional[List[ListGuidances200ResponseAllOfDiscoveriesInnerAnyOf1ConfigDetailListInner]] = Field(default=None, alias="detailList")
    services: Optional[ListGuidances200ResponseAllOfDiscoveriesInnerAnyOf1ConfigServices] = None
    summary: Optional[ListGuidances200ResponseAllOfDiscoveriesInnerAnyOf1ConfigServicesAzureVmsPaymentOptionsValueTermOptionsValueSummary] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["success", "detailList", "services", "summary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListGuidances200ResponseAllOfDiscoveriesInnerAnyOf1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in detail_list (list)
        _items = []
        if self.detail_list:
            for _item_detail_list in self.detail_list:
                if _item_detail_list:
                    _items.append(_item_detail_list.to_dict())
            _dict['detailList'] = _items
        # override the default output from pydantic by calling `to_dict()` of services
        if self.services:
            _dict['services'] = self.services.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListGuidances200ResponseAllOfDiscoveriesInnerAnyOf1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "success": obj.get("success"),
            "detailList": [ListGuidances200ResponseAllOfDiscoveriesInnerAnyOf1ConfigDetailListInner.from_dict(_item) for _item in obj["detailList"]] if obj.get("detailList") is not None else None,
            "services": ListGuidances200ResponseAllOfDiscoveriesInnerAnyOf1ConfigServices.from_dict(obj["services"]) if obj.get("services") is not None else None,
            "summary": ListGuidances200ResponseAllOfDiscoveriesInnerAnyOf1ConfigServicesAzureVmsPaymentOptionsValueTermOptionsValueSummary.from_dict(obj["summary"]) if obj.get("summary") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


