# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from morpheus.models.allocate_network_floating_ip200_response_all_of_network_floating_ip_cloud import AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIpCloud
from morpheus.models.allocate_network_floating_ip200_response_all_of_network_floating_ip_server import AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIpServer
from morpheus.models.list_backup_results200_response_all_of_results_inner_created_by import ListBackupResults200ResponseAllOfResultsInnerCreatedBy
from morpheus.models.list_networks200_response_all_of_networks_inner_network_domain import ListNetworks200ResponseAllOfNetworksInnerNetworkDomain
from typing import Optional, Set
from typing_extensions import Self

class AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIp(BaseModel):
    """
    AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIp
    """ # noqa: E501
    id: Optional[StrictInt] = None
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    cloud: Optional[AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIpCloud] = None
    server: Optional[AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIpServer] = None
    ip_status: Optional[StrictStr] = Field(default=None, alias="ipStatus")
    ip_address: Optional[StrictStr] = Field(default=None, description="IP Address", alias="ipAddress")
    ip_range: Optional[StrictStr] = Field(default=None, alias="ipRange")
    ptr_id: Optional[StrictStr] = Field(default=None, alias="ptrId")
    network_domain: Optional[ListNetworks200ResponseAllOfNetworksInnerNetworkDomain] = Field(default=None, alias="networkDomain")
    created_by: Optional[ListBackupResults200ResponseAllOfResultsInnerCreatedBy] = Field(default=None, alias="createdBy")
    date_created: Optional[datetime] = Field(default=None, alias="dateCreated")
    last_updated: Optional[datetime] = Field(default=None, alias="lastUpdated")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "externalId", "cloud", "server", "ipStatus", "ipAddress", "ipRange", "ptrId", "networkDomain", "createdBy", "dateCreated", "lastUpdated"]

    @field_validator('ip_status')
    def ip_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['assigned', 'free', 'pending']):
            raise ValueError("must be one of enum values ('assigned', 'free', 'pending')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloud
        if self.cloud:
            _dict['cloud'] = self.cloud.to_dict()
        # override the default output from pydantic by calling `to_dict()` of server
        if self.server:
            _dict['server'] = self.server.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_domain
        if self.network_domain:
            _dict['networkDomain'] = self.network_domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if ip_range (nullable) is None
        # and model_fields_set contains the field
        if self.ip_range is None and "ip_range" in self.model_fields_set:
            _dict['ipRange'] = None

        # set to None if ptr_id (nullable) is None
        # and model_fields_set contains the field
        if self.ptr_id is None and "ptr_id" in self.model_fields_set:
            _dict['ptrId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "externalId": obj.get("externalId"),
            "cloud": AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIpCloud.from_dict(obj["cloud"]) if obj.get("cloud") is not None else None,
            "server": AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIpServer.from_dict(obj["server"]) if obj.get("server") is not None else None,
            "ipStatus": obj.get("ipStatus"),
            "ipAddress": obj.get("ipAddress"),
            "ipRange": obj.get("ipRange"),
            "ptrId": obj.get("ptrId"),
            "networkDomain": ListNetworks200ResponseAllOfNetworksInnerNetworkDomain.from_dict(obj["networkDomain"]) if obj.get("networkDomain") is not None else None,
            "createdBy": ListBackupResults200ResponseAllOfResultsInnerCreatedBy.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None,
            "dateCreated": obj.get("dateCreated"),
            "lastUpdated": obj.get("lastUpdated")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


