# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from morpheus.models.add_identity_sources_request_user_source_config_one_of import AddIdentitySourcesRequestUserSourceConfigOneOf
from morpheus.models.add_identity_sources_request_user_source_config_one_of1 import AddIdentitySourcesRequestUserSourceConfigOneOf1
from morpheus.models.add_identity_sources_request_user_source_config_one_of2 import AddIdentitySourcesRequestUserSourceConfigOneOf2
from morpheus.models.add_identity_sources_request_user_source_config_one_of3 import AddIdentitySourcesRequestUserSourceConfigOneOf3
from morpheus.models.add_identity_sources_request_user_source_config_one_of4 import AddIdentitySourcesRequestUserSourceConfigOneOf4
from morpheus.models.add_identity_sources_request_user_source_config_one_of5 import AddIdentitySourcesRequestUserSourceConfigOneOf5
from morpheus.models.add_identity_sources_request_user_source_config_one_of6 import AddIdentitySourcesRequestUserSourceConfigOneOf6
from morpheus.models.add_identity_sources_request_user_source_config_one_of7 import AddIdentitySourcesRequestUserSourceConfigOneOf7
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ADDIDENTITYSOURCESREQUESTUSERSOURCECONFIG_ONE_OF_SCHEMAS = ["AddIdentitySourcesRequestUserSourceConfigOneOf", "AddIdentitySourcesRequestUserSourceConfigOneOf1", "AddIdentitySourcesRequestUserSourceConfigOneOf2", "AddIdentitySourcesRequestUserSourceConfigOneOf3", "AddIdentitySourcesRequestUserSourceConfigOneOf4", "AddIdentitySourcesRequestUserSourceConfigOneOf5", "AddIdentitySourcesRequestUserSourceConfigOneOf6", "AddIdentitySourcesRequestUserSourceConfigOneOf7"]

class AddIdentitySourcesRequestUserSourceConfig(BaseModel):
    """
    AddIdentitySourcesRequestUserSourceConfig
    """
    # data type: AddIdentitySourcesRequestUserSourceConfigOneOf
    oneof_schema_1_validator: Optional[AddIdentitySourcesRequestUserSourceConfigOneOf] = None
    # data type: AddIdentitySourcesRequestUserSourceConfigOneOf1
    oneof_schema_2_validator: Optional[AddIdentitySourcesRequestUserSourceConfigOneOf1] = None
    # data type: AddIdentitySourcesRequestUserSourceConfigOneOf2
    oneof_schema_3_validator: Optional[AddIdentitySourcesRequestUserSourceConfigOneOf2] = None
    # data type: AddIdentitySourcesRequestUserSourceConfigOneOf3
    oneof_schema_4_validator: Optional[AddIdentitySourcesRequestUserSourceConfigOneOf3] = None
    # data type: AddIdentitySourcesRequestUserSourceConfigOneOf4
    oneof_schema_5_validator: Optional[AddIdentitySourcesRequestUserSourceConfigOneOf4] = None
    # data type: AddIdentitySourcesRequestUserSourceConfigOneOf5
    oneof_schema_6_validator: Optional[AddIdentitySourcesRequestUserSourceConfigOneOf5] = None
    # data type: AddIdentitySourcesRequestUserSourceConfigOneOf6
    oneof_schema_7_validator: Optional[AddIdentitySourcesRequestUserSourceConfigOneOf6] = None
    # data type: AddIdentitySourcesRequestUserSourceConfigOneOf7
    oneof_schema_8_validator: Optional[AddIdentitySourcesRequestUserSourceConfigOneOf7] = None
    actual_instance: Optional[Union[AddIdentitySourcesRequestUserSourceConfigOneOf, AddIdentitySourcesRequestUserSourceConfigOneOf1, AddIdentitySourcesRequestUserSourceConfigOneOf2, AddIdentitySourcesRequestUserSourceConfigOneOf3, AddIdentitySourcesRequestUserSourceConfigOneOf4, AddIdentitySourcesRequestUserSourceConfigOneOf5, AddIdentitySourcesRequestUserSourceConfigOneOf6, AddIdentitySourcesRequestUserSourceConfigOneOf7]] = None
    one_of_schemas: Set[str] = { "AddIdentitySourcesRequestUserSourceConfigOneOf", "AddIdentitySourcesRequestUserSourceConfigOneOf1", "AddIdentitySourcesRequestUserSourceConfigOneOf2", "AddIdentitySourcesRequestUserSourceConfigOneOf3", "AddIdentitySourcesRequestUserSourceConfigOneOf4", "AddIdentitySourcesRequestUserSourceConfigOneOf5", "AddIdentitySourcesRequestUserSourceConfigOneOf6", "AddIdentitySourcesRequestUserSourceConfigOneOf7" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = AddIdentitySourcesRequestUserSourceConfig.model_construct()
        error_messages = []
        match = 0
        # validate data type: AddIdentitySourcesRequestUserSourceConfigOneOf
        if not isinstance(v, AddIdentitySourcesRequestUserSourceConfigOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddIdentitySourcesRequestUserSourceConfigOneOf`")
        else:
            match += 1
        # validate data type: AddIdentitySourcesRequestUserSourceConfigOneOf1
        if not isinstance(v, AddIdentitySourcesRequestUserSourceConfigOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddIdentitySourcesRequestUserSourceConfigOneOf1`")
        else:
            match += 1
        # validate data type: AddIdentitySourcesRequestUserSourceConfigOneOf2
        if not isinstance(v, AddIdentitySourcesRequestUserSourceConfigOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddIdentitySourcesRequestUserSourceConfigOneOf2`")
        else:
            match += 1
        # validate data type: AddIdentitySourcesRequestUserSourceConfigOneOf3
        if not isinstance(v, AddIdentitySourcesRequestUserSourceConfigOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddIdentitySourcesRequestUserSourceConfigOneOf3`")
        else:
            match += 1
        # validate data type: AddIdentitySourcesRequestUserSourceConfigOneOf4
        if not isinstance(v, AddIdentitySourcesRequestUserSourceConfigOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddIdentitySourcesRequestUserSourceConfigOneOf4`")
        else:
            match += 1
        # validate data type: AddIdentitySourcesRequestUserSourceConfigOneOf5
        if not isinstance(v, AddIdentitySourcesRequestUserSourceConfigOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddIdentitySourcesRequestUserSourceConfigOneOf5`")
        else:
            match += 1
        # validate data type: AddIdentitySourcesRequestUserSourceConfigOneOf6
        if not isinstance(v, AddIdentitySourcesRequestUserSourceConfigOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddIdentitySourcesRequestUserSourceConfigOneOf6`")
        else:
            match += 1
        # validate data type: AddIdentitySourcesRequestUserSourceConfigOneOf7
        if not isinstance(v, AddIdentitySourcesRequestUserSourceConfigOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddIdentitySourcesRequestUserSourceConfigOneOf7`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in AddIdentitySourcesRequestUserSourceConfig with oneOf schemas: AddIdentitySourcesRequestUserSourceConfigOneOf, AddIdentitySourcesRequestUserSourceConfigOneOf1, AddIdentitySourcesRequestUserSourceConfigOneOf2, AddIdentitySourcesRequestUserSourceConfigOneOf3, AddIdentitySourcesRequestUserSourceConfigOneOf4, AddIdentitySourcesRequestUserSourceConfigOneOf5, AddIdentitySourcesRequestUserSourceConfigOneOf6, AddIdentitySourcesRequestUserSourceConfigOneOf7. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in AddIdentitySourcesRequestUserSourceConfig with oneOf schemas: AddIdentitySourcesRequestUserSourceConfigOneOf, AddIdentitySourcesRequestUserSourceConfigOneOf1, AddIdentitySourcesRequestUserSourceConfigOneOf2, AddIdentitySourcesRequestUserSourceConfigOneOf3, AddIdentitySourcesRequestUserSourceConfigOneOf4, AddIdentitySourcesRequestUserSourceConfigOneOf5, AddIdentitySourcesRequestUserSourceConfigOneOf6, AddIdentitySourcesRequestUserSourceConfigOneOf7. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AddIdentitySourcesRequestUserSourceConfigOneOf
        try:
            instance.actual_instance = AddIdentitySourcesRequestUserSourceConfigOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddIdentitySourcesRequestUserSourceConfigOneOf1
        try:
            instance.actual_instance = AddIdentitySourcesRequestUserSourceConfigOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddIdentitySourcesRequestUserSourceConfigOneOf2
        try:
            instance.actual_instance = AddIdentitySourcesRequestUserSourceConfigOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddIdentitySourcesRequestUserSourceConfigOneOf3
        try:
            instance.actual_instance = AddIdentitySourcesRequestUserSourceConfigOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddIdentitySourcesRequestUserSourceConfigOneOf4
        try:
            instance.actual_instance = AddIdentitySourcesRequestUserSourceConfigOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddIdentitySourcesRequestUserSourceConfigOneOf5
        try:
            instance.actual_instance = AddIdentitySourcesRequestUserSourceConfigOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddIdentitySourcesRequestUserSourceConfigOneOf6
        try:
            instance.actual_instance = AddIdentitySourcesRequestUserSourceConfigOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddIdentitySourcesRequestUserSourceConfigOneOf7
        try:
            instance.actual_instance = AddIdentitySourcesRequestUserSourceConfigOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into AddIdentitySourcesRequestUserSourceConfig with oneOf schemas: AddIdentitySourcesRequestUserSourceConfigOneOf, AddIdentitySourcesRequestUserSourceConfigOneOf1, AddIdentitySourcesRequestUserSourceConfigOneOf2, AddIdentitySourcesRequestUserSourceConfigOneOf3, AddIdentitySourcesRequestUserSourceConfigOneOf4, AddIdentitySourcesRequestUserSourceConfigOneOf5, AddIdentitySourcesRequestUserSourceConfigOneOf6, AddIdentitySourcesRequestUserSourceConfigOneOf7. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AddIdentitySourcesRequestUserSourceConfig with oneOf schemas: AddIdentitySourcesRequestUserSourceConfigOneOf, AddIdentitySourcesRequestUserSourceConfigOneOf1, AddIdentitySourcesRequestUserSourceConfigOneOf2, AddIdentitySourcesRequestUserSourceConfigOneOf3, AddIdentitySourcesRequestUserSourceConfigOneOf4, AddIdentitySourcesRequestUserSourceConfigOneOf5, AddIdentitySourcesRequestUserSourceConfigOneOf6, AddIdentitySourcesRequestUserSourceConfigOneOf7. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AddIdentitySourcesRequestUserSourceConfigOneOf, AddIdentitySourcesRequestUserSourceConfigOneOf1, AddIdentitySourcesRequestUserSourceConfigOneOf2, AddIdentitySourcesRequestUserSourceConfigOneOf3, AddIdentitySourcesRequestUserSourceConfigOneOf4, AddIdentitySourcesRequestUserSourceConfigOneOf5, AddIdentitySourcesRequestUserSourceConfigOneOf6, AddIdentitySourcesRequestUserSourceConfigOneOf7]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


