# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from morpheus.models.add_blueprint200_response_all_of_blueprint_config_one_of import AddBlueprint200ResponseAllOfBlueprintConfigOneOf
from morpheus.models.add_blueprint200_response_all_of_blueprint_config_one_of1 import AddBlueprint200ResponseAllOfBlueprintConfigOneOf1
from morpheus.models.add_blueprint200_response_all_of_blueprint_config_one_of2 import AddBlueprint200ResponseAllOfBlueprintConfigOneOf2
from morpheus.models.add_blueprint200_response_all_of_blueprint_config_one_of3 import AddBlueprint200ResponseAllOfBlueprintConfigOneOf3
from morpheus.models.add_blueprint200_response_all_of_blueprint_config_one_of4 import AddBlueprint200ResponseAllOfBlueprintConfigOneOf4
from morpheus.models.add_blueprint200_response_all_of_blueprint_config_one_of5 import AddBlueprint200ResponseAllOfBlueprintConfigOneOf5
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ADDBLUEPRINT200RESPONSEALLOFBLUEPRINTCONFIG_ONE_OF_SCHEMAS = ["AddBlueprint200ResponseAllOfBlueprintConfigOneOf", "AddBlueprint200ResponseAllOfBlueprintConfigOneOf1", "AddBlueprint200ResponseAllOfBlueprintConfigOneOf2", "AddBlueprint200ResponseAllOfBlueprintConfigOneOf3", "AddBlueprint200ResponseAllOfBlueprintConfigOneOf4", "AddBlueprint200ResponseAllOfBlueprintConfigOneOf5"]

class AddBlueprint200ResponseAllOfBlueprintConfig(BaseModel):
    """
    AddBlueprint200ResponseAllOfBlueprintConfig
    """
    # data type: AddBlueprint200ResponseAllOfBlueprintConfigOneOf
    oneof_schema_1_validator: Optional[AddBlueprint200ResponseAllOfBlueprintConfigOneOf] = None
    # data type: AddBlueprint200ResponseAllOfBlueprintConfigOneOf1
    oneof_schema_2_validator: Optional[AddBlueprint200ResponseAllOfBlueprintConfigOneOf1] = None
    # data type: AddBlueprint200ResponseAllOfBlueprintConfigOneOf2
    oneof_schema_3_validator: Optional[AddBlueprint200ResponseAllOfBlueprintConfigOneOf2] = None
    # data type: AddBlueprint200ResponseAllOfBlueprintConfigOneOf3
    oneof_schema_4_validator: Optional[AddBlueprint200ResponseAllOfBlueprintConfigOneOf3] = None
    # data type: AddBlueprint200ResponseAllOfBlueprintConfigOneOf4
    oneof_schema_5_validator: Optional[AddBlueprint200ResponseAllOfBlueprintConfigOneOf4] = None
    # data type: AddBlueprint200ResponseAllOfBlueprintConfigOneOf5
    oneof_schema_6_validator: Optional[AddBlueprint200ResponseAllOfBlueprintConfigOneOf5] = None
    actual_instance: Optional[Union[AddBlueprint200ResponseAllOfBlueprintConfigOneOf, AddBlueprint200ResponseAllOfBlueprintConfigOneOf1, AddBlueprint200ResponseAllOfBlueprintConfigOneOf2, AddBlueprint200ResponseAllOfBlueprintConfigOneOf3, AddBlueprint200ResponseAllOfBlueprintConfigOneOf4, AddBlueprint200ResponseAllOfBlueprintConfigOneOf5]] = None
    one_of_schemas: Set[str] = { "AddBlueprint200ResponseAllOfBlueprintConfigOneOf", "AddBlueprint200ResponseAllOfBlueprintConfigOneOf1", "AddBlueprint200ResponseAllOfBlueprintConfigOneOf2", "AddBlueprint200ResponseAllOfBlueprintConfigOneOf3", "AddBlueprint200ResponseAllOfBlueprintConfigOneOf4", "AddBlueprint200ResponseAllOfBlueprintConfigOneOf5" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = AddBlueprint200ResponseAllOfBlueprintConfig.model_construct()
        error_messages = []
        match = 0
        # validate data type: AddBlueprint200ResponseAllOfBlueprintConfigOneOf
        if not isinstance(v, AddBlueprint200ResponseAllOfBlueprintConfigOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddBlueprint200ResponseAllOfBlueprintConfigOneOf`")
        else:
            match += 1
        # validate data type: AddBlueprint200ResponseAllOfBlueprintConfigOneOf1
        if not isinstance(v, AddBlueprint200ResponseAllOfBlueprintConfigOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddBlueprint200ResponseAllOfBlueprintConfigOneOf1`")
        else:
            match += 1
        # validate data type: AddBlueprint200ResponseAllOfBlueprintConfigOneOf2
        if not isinstance(v, AddBlueprint200ResponseAllOfBlueprintConfigOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddBlueprint200ResponseAllOfBlueprintConfigOneOf2`")
        else:
            match += 1
        # validate data type: AddBlueprint200ResponseAllOfBlueprintConfigOneOf3
        if not isinstance(v, AddBlueprint200ResponseAllOfBlueprintConfigOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddBlueprint200ResponseAllOfBlueprintConfigOneOf3`")
        else:
            match += 1
        # validate data type: AddBlueprint200ResponseAllOfBlueprintConfigOneOf4
        if not isinstance(v, AddBlueprint200ResponseAllOfBlueprintConfigOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddBlueprint200ResponseAllOfBlueprintConfigOneOf4`")
        else:
            match += 1
        # validate data type: AddBlueprint200ResponseAllOfBlueprintConfigOneOf5
        if not isinstance(v, AddBlueprint200ResponseAllOfBlueprintConfigOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddBlueprint200ResponseAllOfBlueprintConfigOneOf5`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in AddBlueprint200ResponseAllOfBlueprintConfig with oneOf schemas: AddBlueprint200ResponseAllOfBlueprintConfigOneOf, AddBlueprint200ResponseAllOfBlueprintConfigOneOf1, AddBlueprint200ResponseAllOfBlueprintConfigOneOf2, AddBlueprint200ResponseAllOfBlueprintConfigOneOf3, AddBlueprint200ResponseAllOfBlueprintConfigOneOf4, AddBlueprint200ResponseAllOfBlueprintConfigOneOf5. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in AddBlueprint200ResponseAllOfBlueprintConfig with oneOf schemas: AddBlueprint200ResponseAllOfBlueprintConfigOneOf, AddBlueprint200ResponseAllOfBlueprintConfigOneOf1, AddBlueprint200ResponseAllOfBlueprintConfigOneOf2, AddBlueprint200ResponseAllOfBlueprintConfigOneOf3, AddBlueprint200ResponseAllOfBlueprintConfigOneOf4, AddBlueprint200ResponseAllOfBlueprintConfigOneOf5. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AddBlueprint200ResponseAllOfBlueprintConfigOneOf
        try:
            instance.actual_instance = AddBlueprint200ResponseAllOfBlueprintConfigOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddBlueprint200ResponseAllOfBlueprintConfigOneOf1
        try:
            instance.actual_instance = AddBlueprint200ResponseAllOfBlueprintConfigOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddBlueprint200ResponseAllOfBlueprintConfigOneOf2
        try:
            instance.actual_instance = AddBlueprint200ResponseAllOfBlueprintConfigOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddBlueprint200ResponseAllOfBlueprintConfigOneOf3
        try:
            instance.actual_instance = AddBlueprint200ResponseAllOfBlueprintConfigOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddBlueprint200ResponseAllOfBlueprintConfigOneOf4
        try:
            instance.actual_instance = AddBlueprint200ResponseAllOfBlueprintConfigOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddBlueprint200ResponseAllOfBlueprintConfigOneOf5
        try:
            instance.actual_instance = AddBlueprint200ResponseAllOfBlueprintConfigOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into AddBlueprint200ResponseAllOfBlueprintConfig with oneOf schemas: AddBlueprint200ResponseAllOfBlueprintConfigOneOf, AddBlueprint200ResponseAllOfBlueprintConfigOneOf1, AddBlueprint200ResponseAllOfBlueprintConfigOneOf2, AddBlueprint200ResponseAllOfBlueprintConfigOneOf3, AddBlueprint200ResponseAllOfBlueprintConfigOneOf4, AddBlueprint200ResponseAllOfBlueprintConfigOneOf5. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AddBlueprint200ResponseAllOfBlueprintConfig with oneOf schemas: AddBlueprint200ResponseAllOfBlueprintConfigOneOf, AddBlueprint200ResponseAllOfBlueprintConfigOneOf1, AddBlueprint200ResponseAllOfBlueprintConfigOneOf2, AddBlueprint200ResponseAllOfBlueprintConfigOneOf3, AddBlueprint200ResponseAllOfBlueprintConfigOneOf4, AddBlueprint200ResponseAllOfBlueprintConfigOneOf5. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AddBlueprint200ResponseAllOfBlueprintConfigOneOf, AddBlueprint200ResponseAllOfBlueprintConfigOneOf1, AddBlueprint200ResponseAllOfBlueprintConfigOneOf2, AddBlueprint200ResponseAllOfBlueprintConfigOneOf3, AddBlueprint200ResponseAllOfBlueprintConfigOneOf4, AddBlueprint200ResponseAllOfBlueprintConfigOneOf5]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


