# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of import ListTasks200ResponseAllOfTasksInnerAnyOf
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of1 import ListTasks200ResponseAllOfTasksInnerAnyOf1
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of10 import ListTasks200ResponseAllOfTasksInnerAnyOf10
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of11 import ListTasks200ResponseAllOfTasksInnerAnyOf11
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of12 import ListTasks200ResponseAllOfTasksInnerAnyOf12
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of13 import ListTasks200ResponseAllOfTasksInnerAnyOf13
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of14 import ListTasks200ResponseAllOfTasksInnerAnyOf14
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of15 import ListTasks200ResponseAllOfTasksInnerAnyOf15
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of16 import ListTasks200ResponseAllOfTasksInnerAnyOf16
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of2 import ListTasks200ResponseAllOfTasksInnerAnyOf2
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of3 import ListTasks200ResponseAllOfTasksInnerAnyOf3
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of4 import ListTasks200ResponseAllOfTasksInnerAnyOf4
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of5 import ListTasks200ResponseAllOfTasksInnerAnyOf5
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of6 import ListTasks200ResponseAllOfTasksInnerAnyOf6
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of7 import ListTasks200ResponseAllOfTasksInnerAnyOf7
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of8 import ListTasks200ResponseAllOfTasksInnerAnyOf8
from morpheus.models.list_tasks200_response_all_of_tasks_inner_any_of9 import ListTasks200ResponseAllOfTasksInnerAnyOf9
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ADDTASKS200RESPONSEALLOFTASK_ONE_OF_SCHEMAS = ["ListTasks200ResponseAllOfTasksInnerAnyOf", "ListTasks200ResponseAllOfTasksInnerAnyOf1", "ListTasks200ResponseAllOfTasksInnerAnyOf10", "ListTasks200ResponseAllOfTasksInnerAnyOf11", "ListTasks200ResponseAllOfTasksInnerAnyOf12", "ListTasks200ResponseAllOfTasksInnerAnyOf13", "ListTasks200ResponseAllOfTasksInnerAnyOf14", "ListTasks200ResponseAllOfTasksInnerAnyOf15", "ListTasks200ResponseAllOfTasksInnerAnyOf16", "ListTasks200ResponseAllOfTasksInnerAnyOf2", "ListTasks200ResponseAllOfTasksInnerAnyOf3", "ListTasks200ResponseAllOfTasksInnerAnyOf4", "ListTasks200ResponseAllOfTasksInnerAnyOf5", "ListTasks200ResponseAllOfTasksInnerAnyOf6", "ListTasks200ResponseAllOfTasksInnerAnyOf7", "ListTasks200ResponseAllOfTasksInnerAnyOf8", "ListTasks200ResponseAllOfTasksInnerAnyOf9"]

class AddTasks200ResponseAllOfTask(BaseModel):
    """
    AddTasks200ResponseAllOfTask
    """
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf
    oneof_schema_1_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf1
    oneof_schema_2_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf1] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf2
    oneof_schema_3_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf2] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf3
    oneof_schema_4_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf3] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf4
    oneof_schema_5_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf4] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf5
    oneof_schema_6_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf5] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf6
    oneof_schema_7_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf6] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf7
    oneof_schema_8_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf7] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf8
    oneof_schema_9_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf8] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf9
    oneof_schema_10_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf9] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf10
    oneof_schema_11_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf10] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf11
    oneof_schema_12_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf11] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf12
    oneof_schema_13_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf12] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf13
    oneof_schema_14_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf13] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf14
    oneof_schema_15_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf14] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf15
    oneof_schema_16_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf15] = None
    # data type: ListTasks200ResponseAllOfTasksInnerAnyOf16
    oneof_schema_17_validator: Optional[ListTasks200ResponseAllOfTasksInnerAnyOf16] = None
    actual_instance: Optional[Union[ListTasks200ResponseAllOfTasksInnerAnyOf, ListTasks200ResponseAllOfTasksInnerAnyOf1, ListTasks200ResponseAllOfTasksInnerAnyOf10, ListTasks200ResponseAllOfTasksInnerAnyOf11, ListTasks200ResponseAllOfTasksInnerAnyOf12, ListTasks200ResponseAllOfTasksInnerAnyOf13, ListTasks200ResponseAllOfTasksInnerAnyOf14, ListTasks200ResponseAllOfTasksInnerAnyOf15, ListTasks200ResponseAllOfTasksInnerAnyOf16, ListTasks200ResponseAllOfTasksInnerAnyOf2, ListTasks200ResponseAllOfTasksInnerAnyOf3, ListTasks200ResponseAllOfTasksInnerAnyOf4, ListTasks200ResponseAllOfTasksInnerAnyOf5, ListTasks200ResponseAllOfTasksInnerAnyOf6, ListTasks200ResponseAllOfTasksInnerAnyOf7, ListTasks200ResponseAllOfTasksInnerAnyOf8, ListTasks200ResponseAllOfTasksInnerAnyOf9]] = None
    one_of_schemas: Set[str] = { "ListTasks200ResponseAllOfTasksInnerAnyOf", "ListTasks200ResponseAllOfTasksInnerAnyOf1", "ListTasks200ResponseAllOfTasksInnerAnyOf10", "ListTasks200ResponseAllOfTasksInnerAnyOf11", "ListTasks200ResponseAllOfTasksInnerAnyOf12", "ListTasks200ResponseAllOfTasksInnerAnyOf13", "ListTasks200ResponseAllOfTasksInnerAnyOf14", "ListTasks200ResponseAllOfTasksInnerAnyOf15", "ListTasks200ResponseAllOfTasksInnerAnyOf16", "ListTasks200ResponseAllOfTasksInnerAnyOf2", "ListTasks200ResponseAllOfTasksInnerAnyOf3", "ListTasks200ResponseAllOfTasksInnerAnyOf4", "ListTasks200ResponseAllOfTasksInnerAnyOf5", "ListTasks200ResponseAllOfTasksInnerAnyOf6", "ListTasks200ResponseAllOfTasksInnerAnyOf7", "ListTasks200ResponseAllOfTasksInnerAnyOf8", "ListTasks200ResponseAllOfTasksInnerAnyOf9" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = AddTasks200ResponseAllOfTask.model_construct()
        error_messages = []
        match = 0
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf1
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf1`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf2
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf2`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf3
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf3`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf4
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf4`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf5
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf5`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf6
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf6`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf7
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf7`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf8
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf8`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf9
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf9):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf9`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf10
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf10):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf10`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf11
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf11):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf11`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf12
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf12):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf12`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf13
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf13):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf13`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf14
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf14):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf14`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf15
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf15):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf15`")
        else:
            match += 1
        # validate data type: ListTasks200ResponseAllOfTasksInnerAnyOf16
        if not isinstance(v, ListTasks200ResponseAllOfTasksInnerAnyOf16):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListTasks200ResponseAllOfTasksInnerAnyOf16`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in AddTasks200ResponseAllOfTask with oneOf schemas: ListTasks200ResponseAllOfTasksInnerAnyOf, ListTasks200ResponseAllOfTasksInnerAnyOf1, ListTasks200ResponseAllOfTasksInnerAnyOf10, ListTasks200ResponseAllOfTasksInnerAnyOf11, ListTasks200ResponseAllOfTasksInnerAnyOf12, ListTasks200ResponseAllOfTasksInnerAnyOf13, ListTasks200ResponseAllOfTasksInnerAnyOf14, ListTasks200ResponseAllOfTasksInnerAnyOf15, ListTasks200ResponseAllOfTasksInnerAnyOf16, ListTasks200ResponseAllOfTasksInnerAnyOf2, ListTasks200ResponseAllOfTasksInnerAnyOf3, ListTasks200ResponseAllOfTasksInnerAnyOf4, ListTasks200ResponseAllOfTasksInnerAnyOf5, ListTasks200ResponseAllOfTasksInnerAnyOf6, ListTasks200ResponseAllOfTasksInnerAnyOf7, ListTasks200ResponseAllOfTasksInnerAnyOf8, ListTasks200ResponseAllOfTasksInnerAnyOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in AddTasks200ResponseAllOfTask with oneOf schemas: ListTasks200ResponseAllOfTasksInnerAnyOf, ListTasks200ResponseAllOfTasksInnerAnyOf1, ListTasks200ResponseAllOfTasksInnerAnyOf10, ListTasks200ResponseAllOfTasksInnerAnyOf11, ListTasks200ResponseAllOfTasksInnerAnyOf12, ListTasks200ResponseAllOfTasksInnerAnyOf13, ListTasks200ResponseAllOfTasksInnerAnyOf14, ListTasks200ResponseAllOfTasksInnerAnyOf15, ListTasks200ResponseAllOfTasksInnerAnyOf16, ListTasks200ResponseAllOfTasksInnerAnyOf2, ListTasks200ResponseAllOfTasksInnerAnyOf3, ListTasks200ResponseAllOfTasksInnerAnyOf4, ListTasks200ResponseAllOfTasksInnerAnyOf5, ListTasks200ResponseAllOfTasksInnerAnyOf6, ListTasks200ResponseAllOfTasksInnerAnyOf7, ListTasks200ResponseAllOfTasksInnerAnyOf8, ListTasks200ResponseAllOfTasksInnerAnyOf9. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf1
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf2
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf3
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf4
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf5
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf6
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf7
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf8
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf9
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf9.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf10
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf10.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf11
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf11.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf12
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf12.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf13
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf13.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf14
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf14.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf15
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf15.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListTasks200ResponseAllOfTasksInnerAnyOf16
        try:
            instance.actual_instance = ListTasks200ResponseAllOfTasksInnerAnyOf16.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into AddTasks200ResponseAllOfTask with oneOf schemas: ListTasks200ResponseAllOfTasksInnerAnyOf, ListTasks200ResponseAllOfTasksInnerAnyOf1, ListTasks200ResponseAllOfTasksInnerAnyOf10, ListTasks200ResponseAllOfTasksInnerAnyOf11, ListTasks200ResponseAllOfTasksInnerAnyOf12, ListTasks200ResponseAllOfTasksInnerAnyOf13, ListTasks200ResponseAllOfTasksInnerAnyOf14, ListTasks200ResponseAllOfTasksInnerAnyOf15, ListTasks200ResponseAllOfTasksInnerAnyOf16, ListTasks200ResponseAllOfTasksInnerAnyOf2, ListTasks200ResponseAllOfTasksInnerAnyOf3, ListTasks200ResponseAllOfTasksInnerAnyOf4, ListTasks200ResponseAllOfTasksInnerAnyOf5, ListTasks200ResponseAllOfTasksInnerAnyOf6, ListTasks200ResponseAllOfTasksInnerAnyOf7, ListTasks200ResponseAllOfTasksInnerAnyOf8, ListTasks200ResponseAllOfTasksInnerAnyOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AddTasks200ResponseAllOfTask with oneOf schemas: ListTasks200ResponseAllOfTasksInnerAnyOf, ListTasks200ResponseAllOfTasksInnerAnyOf1, ListTasks200ResponseAllOfTasksInnerAnyOf10, ListTasks200ResponseAllOfTasksInnerAnyOf11, ListTasks200ResponseAllOfTasksInnerAnyOf12, ListTasks200ResponseAllOfTasksInnerAnyOf13, ListTasks200ResponseAllOfTasksInnerAnyOf14, ListTasks200ResponseAllOfTasksInnerAnyOf15, ListTasks200ResponseAllOfTasksInnerAnyOf16, ListTasks200ResponseAllOfTasksInnerAnyOf2, ListTasks200ResponseAllOfTasksInnerAnyOf3, ListTasks200ResponseAllOfTasksInnerAnyOf4, ListTasks200ResponseAllOfTasksInnerAnyOf5, ListTasks200ResponseAllOfTasksInnerAnyOf6, ListTasks200ResponseAllOfTasksInnerAnyOf7, ListTasks200ResponseAllOfTasksInnerAnyOf8, ListTasks200ResponseAllOfTasksInnerAnyOf9. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ListTasks200ResponseAllOfTasksInnerAnyOf, ListTasks200ResponseAllOfTasksInnerAnyOf1, ListTasks200ResponseAllOfTasksInnerAnyOf10, ListTasks200ResponseAllOfTasksInnerAnyOf11, ListTasks200ResponseAllOfTasksInnerAnyOf12, ListTasks200ResponseAllOfTasksInnerAnyOf13, ListTasks200ResponseAllOfTasksInnerAnyOf14, ListTasks200ResponseAllOfTasksInnerAnyOf15, ListTasks200ResponseAllOfTasksInnerAnyOf16, ListTasks200ResponseAllOfTasksInnerAnyOf2, ListTasks200ResponseAllOfTasksInnerAnyOf3, ListTasks200ResponseAllOfTasksInnerAnyOf4, ListTasks200ResponseAllOfTasksInnerAnyOf5, ListTasks200ResponseAllOfTasksInnerAnyOf6, ListTasks200ResponseAllOfTasksInnerAnyOf7, ListTasks200ResponseAllOfTasksInnerAnyOf8, ListTasks200ResponseAllOfTasksInnerAnyOf9]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


