# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from morpheus.models.list_identity_sources200_response_all_of_user_sources_inner_any_of import ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf
from morpheus.models.list_identity_sources200_response_all_of_user_sources_inner_any_of1 import ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1
from morpheus.models.list_identity_sources200_response_all_of_user_sources_inner_any_of2 import ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2
from morpheus.models.list_identity_sources200_response_all_of_user_sources_inner_any_of3 import ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3
from morpheus.models.list_identity_sources200_response_all_of_user_sources_inner_any_of4 import ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4
from morpheus.models.list_identity_sources200_response_all_of_user_sources_inner_any_of5 import ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5
from morpheus.models.list_identity_sources200_response_all_of_user_sources_inner_any_of6 import ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6
from morpheus.models.list_identity_sources200_response_all_of_user_sources_inner_any_of7 import ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ADDIDENTITYSOURCES200RESPONSEALLOFTASK_ONE_OF_SCHEMAS = ["ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf", "ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1", "ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2", "ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3", "ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4", "ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5", "ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6", "ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7"]

class AddIdentitySources200ResponseAllOfTask(BaseModel):
    """
    AddIdentitySources200ResponseAllOfTask
    """
    # data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf
    oneof_schema_1_validator: Optional[ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf] = None
    # data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1
    oneof_schema_2_validator: Optional[ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1] = None
    # data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2
    oneof_schema_3_validator: Optional[ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2] = None
    # data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3
    oneof_schema_4_validator: Optional[ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3] = None
    # data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4
    oneof_schema_5_validator: Optional[ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4] = None
    # data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5
    oneof_schema_6_validator: Optional[ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5] = None
    # data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6
    oneof_schema_7_validator: Optional[ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6] = None
    # data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7
    oneof_schema_8_validator: Optional[ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7] = None
    actual_instance: Optional[Union[ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7]] = None
    one_of_schemas: Set[str] = { "ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf", "ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1", "ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2", "ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3", "ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4", "ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5", "ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6", "ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = AddIdentitySources200ResponseAllOfTask.model_construct()
        error_messages = []
        match = 0
        # validate data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf
        if not isinstance(v, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf`")
        else:
            match += 1
        # validate data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1
        if not isinstance(v, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1`")
        else:
            match += 1
        # validate data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2
        if not isinstance(v, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2`")
        else:
            match += 1
        # validate data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3
        if not isinstance(v, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3`")
        else:
            match += 1
        # validate data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4
        if not isinstance(v, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4`")
        else:
            match += 1
        # validate data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5
        if not isinstance(v, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5`")
        else:
            match += 1
        # validate data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6
        if not isinstance(v, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6`")
        else:
            match += 1
        # validate data type: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7
        if not isinstance(v, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in AddIdentitySources200ResponseAllOfTask with oneOf schemas: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in AddIdentitySources200ResponseAllOfTask with oneOf schemas: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf
        try:
            instance.actual_instance = ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1
        try:
            instance.actual_instance = ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2
        try:
            instance.actual_instance = ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3
        try:
            instance.actual_instance = ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4
        try:
            instance.actual_instance = ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5
        try:
            instance.actual_instance = ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6
        try:
            instance.actual_instance = ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7
        try:
            instance.actual_instance = ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into AddIdentitySources200ResponseAllOfTask with oneOf schemas: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AddIdentitySources200ResponseAllOfTask with oneOf schemas: ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf1, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf2, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf3, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf4, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf5, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf6, ListIdentitySources200ResponseAllOfUserSourcesInnerAnyOf7]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


