# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ListInstances200ResponseAllOfInstancesInnerVolumesInner(BaseModel):
    """
    ListInstances200ResponseAllOfInstancesInnerVolumesInner
    """ # noqa: E501
    controller_id: Optional[StrictInt] = Field(default=None, alias="controllerId")
    datastore_id: Optional[StrictStr] = Field(default=None, alias="datastoreId")
    display_order: Optional[StrictInt] = Field(default=None, alias="displayOrder")
    id: Optional[StrictInt] = None
    uuid: Optional[StrictStr] = None
    max_iops: Optional[StrictStr] = Field(default=None, alias="maxIOPS")
    max_storage: Optional[StrictInt] = Field(default=None, alias="maxStorage")
    name: Optional[StrictStr] = None
    short_name: Optional[StrictStr] = Field(default=None, alias="shortName")
    resizeable: Optional[StrictBool] = None
    plan_resizable: Optional[StrictBool] = Field(default=None, alias="planResizable")
    root_volume: Optional[StrictBool] = Field(default=None, alias="rootVolume")
    size: Optional[StrictInt] = None
    storage_type: Optional[StrictInt] = Field(default=None, alias="storageType")
    unit_number: Optional[StrictStr] = Field(default=None, alias="unitNumber")
    controller_mount_point: Optional[StrictStr] = Field(default=None, alias="controllerMountPoint")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["controllerId", "datastoreId", "displayOrder", "id", "uuid", "maxIOPS", "maxStorage", "name", "shortName", "resizeable", "planResizable", "rootVolume", "size", "storageType", "unitNumber", "controllerMountPoint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListInstances200ResponseAllOfInstancesInnerVolumesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if controller_id (nullable) is None
        # and model_fields_set contains the field
        if self.controller_id is None and "controller_id" in self.model_fields_set:
            _dict['controllerId'] = None

        # set to None if datastore_id (nullable) is None
        # and model_fields_set contains the field
        if self.datastore_id is None and "datastore_id" in self.model_fields_set:
            _dict['datastoreId'] = None

        # set to None if max_iops (nullable) is None
        # and model_fields_set contains the field
        if self.max_iops is None and "max_iops" in self.model_fields_set:
            _dict['maxIOPS'] = None

        # set to None if unit_number (nullable) is None
        # and model_fields_set contains the field
        if self.unit_number is None and "unit_number" in self.model_fields_set:
            _dict['unitNumber'] = None

        # set to None if controller_mount_point (nullable) is None
        # and model_fields_set contains the field
        if self.controller_mount_point is None and "controller_mount_point" in self.model_fields_set:
            _dict['controllerMountPoint'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListInstances200ResponseAllOfInstancesInnerVolumesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "controllerId": obj.get("controllerId"),
            "datastoreId": obj.get("datastoreId"),
            "displayOrder": obj.get("displayOrder"),
            "id": obj.get("id"),
            "uuid": obj.get("uuid"),
            "maxIOPS": obj.get("maxIOPS"),
            "maxStorage": obj.get("maxStorage"),
            "name": obj.get("name"),
            "shortName": obj.get("shortName"),
            "resizeable": obj.get("resizeable"),
            "planResizable": obj.get("planResizable"),
            "rootVolume": obj.get("rootVolume"),
            "size": obj.get("size"),
            "storageType": obj.get("storageType"),
            "unitNumber": obj.get("unitNumber"),
            "controllerMountPoint": obj.get("controllerMountPoint")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


