# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of1 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf1
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of10 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf10
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of11 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf11
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of12 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf12
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of13 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf13
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of14 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf14
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of15 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf15
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of16 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf16
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of2 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf2
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of3 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf3
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of4 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf4
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of5 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf5
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of6 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf6
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of7 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf7
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of8 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf8
from morpheus.models.list_integrations200_response_any_of_integrations_inner_any_of9 import ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf9
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

LISTINTEGRATIONS200RESPONSEANYOFINTEGRATIONSINNER_ANY_OF_SCHEMAS = ["ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf1", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf10", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf11", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf12", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf13", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf14", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf15", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf16", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf2", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf3", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf4", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf5", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf6", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf7", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf8", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf9"]

class ListIntegrations200ResponseAnyOfIntegrationsInner(BaseModel):
    """
    ListIntegrations200ResponseAnyOfIntegrationsInner
    """

    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf
    anyof_schema_1_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf1
    anyof_schema_2_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf1] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf2
    anyof_schema_3_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf2] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf3
    anyof_schema_4_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf3] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf4
    anyof_schema_5_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf4] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf5
    anyof_schema_6_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf5] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf6
    anyof_schema_7_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf6] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf7
    anyof_schema_8_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf7] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf8
    anyof_schema_9_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf8] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf9
    anyof_schema_10_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf9] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf10
    anyof_schema_11_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf10] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf11
    anyof_schema_12_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf11] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf12
    anyof_schema_13_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf12] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf13
    anyof_schema_14_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf13] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf14
    anyof_schema_15_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf14] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf15
    anyof_schema_16_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf15] = None
    # data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf16
    anyof_schema_17_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf16] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf1, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf10, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf11, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf12, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf13, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf14, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf15, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf16, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf2, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf3, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf4, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf5, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf6, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf7, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf8, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf9]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf1", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf10", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf11", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf12", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf13", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf14", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf15", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf16", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf2", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf3", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf4", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf5", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf6", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf7", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf8", "ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf9" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = ListIntegrations200ResponseAnyOfIntegrationsInner.model_construct()
        error_messages = []
        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf1
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf1`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf2
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf2`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf3
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf3`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf4
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf4`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf5
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf5`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf6
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf6`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf7
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf7`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf8
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf8`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf9
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf9):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf9`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf10
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf10):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf10`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf11
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf11):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf11`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf12
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf12):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf12`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf13
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf13):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf13`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf14
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf14):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf14`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf15
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf15):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf15`")
        else:
            return v

        # validate data type: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf16
        if not isinstance(v, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf16):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf16`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in ListIntegrations200ResponseAnyOfIntegrationsInner with anyOf schemas: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf1, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf10, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf11, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf12, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf13, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf14, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf15, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf16, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf2, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf3, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf4, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf5, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf6, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf7, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf8, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf9. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf1] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf1.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf2] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf2.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf3] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf3.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf4] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf4.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf5] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf5.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf6] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf6.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf7] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf7.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf8] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf8.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf9] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf9.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf10] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf10.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf11] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf11.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf12] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf12.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_14_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf13] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf13.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_15_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf14] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf14.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_16_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf15] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf15.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_17_validator: Optional[ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf16] = None
        try:
            instance.actual_instance = ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf16.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ListIntegrations200ResponseAnyOfIntegrationsInner with anyOf schemas: ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf1, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf10, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf11, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf12, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf13, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf14, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf15, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf16, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf2, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf3, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf4, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf5, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf6, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf7, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf8, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf9. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf1, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf10, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf11, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf12, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf13, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf14, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf15, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf16, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf2, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf3, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf4, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf5, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf6, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf7, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf8, ListIntegrations200ResponseAnyOfIntegrationsInnerAnyOf9]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


