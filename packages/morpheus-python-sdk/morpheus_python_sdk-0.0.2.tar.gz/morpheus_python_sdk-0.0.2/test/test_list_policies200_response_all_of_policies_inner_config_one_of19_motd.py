# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from morpheus.models.list_policies200_response_all_of_policies_inner_config_one_of19_motd import ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf19Motd

class TestListPolicies200ResponseAllOfPoliciesInnerConfigOneOf19Motd(unittest.TestCase):
    """ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf19Motd unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf19Motd:
        """Test ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf19Motd
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf19Motd`
        """
        model = ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf19Motd()
        if include_optional:
            return ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf19Motd(
                title = '',
                message = '',
                type = '',
                full_page = None
            )
        else:
            return ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf19Motd(
        )
        """

    def testListPolicies200ResponseAllOfPoliciesInnerConfigOneOf19Motd(self):
        """Test ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf19Motd"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
