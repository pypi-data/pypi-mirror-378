# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from morpheus.models.get_network_subnets200_response_all_of_subnets_inner import GetNetworkSubnets200ResponseAllOfSubnetsInner

class TestGetNetworkSubnets200ResponseAllOfSubnetsInner(unittest.TestCase):
    """GetNetworkSubnets200ResponseAllOfSubnetsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetNetworkSubnets200ResponseAllOfSubnetsInner:
        """Test GetNetworkSubnets200ResponseAllOfSubnetsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetNetworkSubnets200ResponseAllOfSubnetsInner`
        """
        model = GetNetworkSubnets200ResponseAllOfSubnetsInner()
        if include_optional:
            return GetNetworkSubnets200ResponseAllOfSubnetsInner(
                id = 56,
                code = '',
                name = '',
                labels = [
                    ''
                    ],
                active = True,
                description = '',
                external_id = '',
                unique_id = '',
                address_prefix = '',
                cidr = '',
                gateway = '',
                netmask = '',
                subnet_address = '',
                tftp_server = '',
                boot_file = '',
                pool = '',
                dhcp_server = True,
                has_floating_ips = True,
                dhcp_ip = '',
                dns_primary = '',
                dns_secondary = '',
                dhcp_start = '',
                dhcp_end = '',
                dhcp_range = '',
                network_proxy = '',
                network_domain = '',
                search_domains = '',
                default_network = True,
                assign_public_ip = True,
                visibility = '',
                status = morpheus.models.get_app_state_200_response_all_of_input_providers_inner.getAppState_200_response_allOf_input_providers_inner(
                    name = '', ),
                network = morpheus.models.get_alerts_200_response_all_of_check_groups_inner_instance.getAlerts_200_response_allOf_checkGroups_inner_instance(
                    id = 56, 
                    name = '', ),
                type = morpheus.models.list_backup_settings_200_response_backup_settings_default_schedule.listBackupSettings_200_response_backupSettings_defaultSchedule(
                    id = 56, 
                    code = '', 
                    name = '', ),
                account = morpheus.models.get_alerts_200_response_all_of_check_groups_inner_instance.getAlerts_200_response_allOf_checkGroups_inner_instance(
                    id = 56, 
                    name = '', ),
                security_groups = [
                    None
                    ],
                tenants = [
                    morpheus.models.get_alerts_200_response_all_of_check_groups_inner_instance.getAlerts_200_response_allOf_checkGroups_inner_instance(
                        id = 56, 
                        name = '', )
                    ],
                resource_permission = morpheus.models.get_network_subnets_200_response_all_of_subnets_inner_resource_permission.getNetworkSubnets_200_response_allOf_subnets_inner_resourcePermission(
                    all = True, 
                    sites = [
                        None
                        ], 
                    all_plans = True, 
                    plans = [
                        None
                        ], )
            )
        else:
            return GetNetworkSubnets200ResponseAllOfSubnetsInner(
        )
        """

    def testGetNetworkSubnets200ResponseAllOfSubnetsInner(self):
        """Test GetNetworkSubnets200ResponseAllOfSubnetsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
