# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from morpheus.models.add_policies200_response_all_of_policy_config_one_of1_motd import AddPolicies200ResponseAllOfPolicyConfigOneOf1Motd

class TestAddPolicies200ResponseAllOfPolicyConfigOneOf1Motd(unittest.TestCase):
    """AddPolicies200ResponseAllOfPolicyConfigOneOf1Motd unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AddPolicies200ResponseAllOfPolicyConfigOneOf1Motd:
        """Test AddPolicies200ResponseAllOfPolicyConfigOneOf1Motd
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AddPolicies200ResponseAllOfPolicyConfigOneOf1Motd`
        """
        model = AddPolicies200ResponseAllOfPolicyConfigOneOf1Motd()
        if include_optional:
            return AddPolicies200ResponseAllOfPolicyConfigOneOf1Motd(
                title = '',
                message = '',
                type = '',
                full_page = None
            )
        else:
            return AddPolicies200ResponseAllOfPolicyConfigOneOf1Motd(
        )
        """

    def testAddPolicies200ResponseAllOfPolicyConfigOneOf1Motd(self):
        """Test AddPolicies200ResponseAllOfPolicyConfigOneOf1Motd"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
