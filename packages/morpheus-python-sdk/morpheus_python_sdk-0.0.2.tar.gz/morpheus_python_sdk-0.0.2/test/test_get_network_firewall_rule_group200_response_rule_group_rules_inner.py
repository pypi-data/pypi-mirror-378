# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from morpheus.models.get_network_firewall_rule_group200_response_rule_group_rules_inner import GetNetworkFirewallRuleGroup200ResponseRuleGroupRulesInner

class TestGetNetworkFirewallRuleGroup200ResponseRuleGroupRulesInner(unittest.TestCase):
    """GetNetworkFirewallRuleGroup200ResponseRuleGroupRulesInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetNetworkFirewallRuleGroup200ResponseRuleGroupRulesInner:
        """Test GetNetworkFirewallRuleGroup200ResponseRuleGroupRulesInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetNetworkFirewallRuleGroup200ResponseRuleGroupRulesInner`
        """
        model = GetNetworkFirewallRuleGroup200ResponseRuleGroupRulesInner()
        if include_optional:
            return GetNetworkFirewallRuleGroup200ResponseRuleGroupRulesInner(
                id = 56,
                direction = '',
                source_type = '',
                destination_type = '',
                name = '',
                policy = '',
                priority = 56,
                enabled = True,
                rule_group = morpheus.models.get_alerts_200_response_all_of_check_groups_inner_instance.getAlerts_200_response_allOf_checkGroups_inner_instance(
                    id = 56, 
                    name = '', ),
                group_name = '',
                config = None,
                sources = [
                    morpheus.models.list_instance_service_plans_200_response_plans_inner_auto_options_inner.listInstanceServicePlans_200_response_plans_inner_autoOptions_inner(
                        id = '', 
                        name = '', )
                    ],
                destinations = [
                    morpheus.models.list_instance_service_plans_200_response_plans_inner_auto_options_inner.listInstanceServicePlans_200_response_plans_inner_autoOptions_inner(
                        id = '', 
                        name = '', )
                    ],
                applications = [
                    morpheus.models.list_instance_service_plans_200_response_plans_inner_auto_options_inner.listInstanceServicePlans_200_response_plans_inner_autoOptions_inner(
                        id = '', 
                        name = '', )
                    ],
                scopes = [
                    morpheus.models.list_instance_service_plans_200_response_plans_inner_auto_options_inner.listInstanceServicePlans_200_response_plans_inner_autoOptions_inner(
                        id = '', 
                        name = '', )
                    ],
                profiles = [
                    morpheus.models.list_instance_service_plans_200_response_plans_inner_auto_options_inner.listInstanceServicePlans_200_response_plans_inner_autoOptions_inner(
                        id = '', 
                        name = '', )
                    ],
                applied_targets = [
                    None
                    ]
            )
        else:
            return GetNetworkFirewallRuleGroup200ResponseRuleGroupRulesInner(
        )
        """

    def testGetNetworkFirewallRuleGroup200ResponseRuleGroupRulesInner(self):
        """Test GetNetworkFirewallRuleGroup200ResponseRuleGroupRulesInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
