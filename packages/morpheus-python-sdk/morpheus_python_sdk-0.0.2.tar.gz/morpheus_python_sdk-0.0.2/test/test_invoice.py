# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from morpheus.models.invoice import Invoice

class TestInvoice(unittest.TestCase):
    """Invoice unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Invoice:
        """Test Invoice
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Invoice`
        """
        model = Invoice()
        if include_optional:
            return Invoice(
                id = 56,
                owner_id = 56,
                account = morpheus.models.get_alerts_200_response_all_of_check_groups_inner_instance.getAlerts_200_response_allOf_checkGroups_inner_instance(
                    id = 56, 
                    name = '', ),
                group = None,
                cloud = morpheus.models.list_invoices_200_response_all_of_invoices_inner_cloud.listInvoices_200_response_allOf_invoices_inner_cloud(
                    id = 56, 
                    name = '', 
                    uuid = '', ),
                instance = None,
                server = '',
                cluster = '',
                user = None,
                plan = None,
                tags = [
                    None
                    ],
                project = '',
                ref_type = '',
                ref_id = 56,
                ref_uuid = '',
                ref_name = '',
                ref_category = '',
                resource_id = '',
                resource_uuid = '',
                resource_type = '',
                resource_name = '',
                resource_external_id = '',
                resource_internal_id = '',
                interval = '',
                period = '',
                estimate = True,
                summary_invoice = True,
                active = True,
                start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                ref_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                ref_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                estimated_compute_price = 1.337,
                estimated_compute_cost = 1.337,
                estimated_memory_price = 1.337,
                estimated_memory_cost = 1.337,
                estimated_storage_price = 1.337,
                estimated_storage_cost = 1.337,
                estimated_network_price = 1.337,
                estimated_network_cost = 1.337,
                estimated_license_price = 1.337,
                estimated_license_cost = 1.337,
                estimated_extra_price = 1.337,
                estimated_extra_cost = 1.337,
                estimated_total_price = 1.337,
                estimated_total_cost = 1.337,
                estimated_running_price = 1.337,
                estimated_running_cost = 1.337,
                estimated_currency = '',
                estimated_conversion_rate = 1.337,
                actual_compute_price = 1.337,
                actual_compute_cost = 1.337,
                actual_memory_price = 1.337,
                actual_memory_cost = 1.337,
                actual_storage_price = 1.337,
                actual_storage_cost = 1.337,
                actual_network_price = 1.337,
                actual_network_cost = 1.337,
                actual_license_price = 1.337,
                actual_license_cost = 1.337,
                actual_extra_price = 1.337,
                actual_extra_cost = 1.337,
                actual_total_price = 1.337,
                actual_total_cost = 1.337,
                actual_running_price = 1.337,
                actual_running_cost = 1.337,
                actual_currency = '',
                actual_conversion_rate = 1.337,
                compute_price = 1.337,
                compute_cost = 1.337,
                memory_price = 1.337,
                memory_cost = 1.337,
                storage_price = 1.337,
                storage_cost = 1.337,
                network_price = 1.337,
                network_cost = 1.337,
                license_price = 1.337,
                license_cost = 1.337,
                extra_price = 1.337,
                extra_cost = 1.337,
                total_price = 1.337,
                total_cost = 1.337,
                running_price = 1.337,
                running_cost = 1.337,
                currency = '',
                conversion_rate = 1.337,
                cost_type = '',
                off_time = 56,
                power_state = '',
                power_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                running_multiplier = 1.337,
                usage_type = '',
                usage_category = '',
                last_cost_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_actual_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                date_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                line_item_count = 56,
                line_items = [
                    morpheus.models.list_invoices_200_response_all_of_invoices_inner_line_items_inner.listInvoices_200_response_allOf_invoices_inner_lineItems_inner(
                        id = 56, 
                        invoice_id = 56, 
                        ref_type = '', 
                        ref_id = 56, 
                        ref_name = '', 
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        item_id = '', 
                        item_type = '', 
                        item_name = '', 
                        item_description = '', 
                        product_id = '', 
                        product_code = '', 
                        product_name = '', 
                        item_seller = '', 
                        item_action = '', 
                        external_id = '', 
                        rate_id = '', 
                        rate_class = '', 
                        rate_unit = '', 
                        rate_term = '', 
                        usage_type = '', 
                        usage_category = '', 
                        usage_service = '', 
                        item_usage = 1.337, 
                        item_rate = 1.337, 
                        item_cost = 1.337, 
                        item_price = 1.337, 
                        item_tax = 56, 
                        item_term = '', 
                        tax_type = '', 
                        region_code = '', 
                        currency = '', 
                        conversion_rate = 56, 
                        date_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return Invoice(
        )
        """

    def testInvoice(self):
        """Test Invoice"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
