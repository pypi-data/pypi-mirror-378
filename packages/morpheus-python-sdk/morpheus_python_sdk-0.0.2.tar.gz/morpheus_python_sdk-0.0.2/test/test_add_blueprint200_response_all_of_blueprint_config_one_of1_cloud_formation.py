# coding: utf-8

"""
    Morpheus API

    Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

    The version of the OpenAPI document: 8.0.8
    Contact: dev@morpheusdata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from morpheus.models.add_blueprint200_response_all_of_blueprint_config_one_of1_cloud_formation import AddBlueprint200ResponseAllOfBlueprintConfigOneOf1CloudFormation

class TestAddBlueprint200ResponseAllOfBlueprintConfigOneOf1CloudFormation(unittest.TestCase):
    """AddBlueprint200ResponseAllOfBlueprintConfigOneOf1CloudFormation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AddBlueprint200ResponseAllOfBlueprintConfigOneOf1CloudFormation:
        """Test AddBlueprint200ResponseAllOfBlueprintConfigOneOf1CloudFormation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AddBlueprint200ResponseAllOfBlueprintConfigOneOf1CloudFormation`
        """
        model = AddBlueprint200ResponseAllOfBlueprintConfigOneOf1CloudFormation()
        if include_optional:
            return AddBlueprint200ResponseAllOfBlueprintConfigOneOf1CloudFormation(
                config_type = 'json',
                var_json = '',
                yaml = '',
                git = morpheus.models.add_blueprint_request_one_of_1_cloud_formation_git.addBlueprint_request_oneOf_1_cloudFormation_git(
                    repo_id = 56, 
                    path = '', 
                    integration_id = 56, 
                    branch = '', ),
                iam = None,
                capability_named_iam = None,
                capability_auto_expand = None,
                install_agent = None,
                cloud_init_enabled = None
            )
        else:
            return AddBlueprint200ResponseAllOfBlueprintConfigOneOf1CloudFormation(
                config_type = 'json',
        )
        """

    def testAddBlueprint200ResponseAllOfBlueprintConfigOneOf1CloudFormation(self):
        """Test AddBlueprint200ResponseAllOfBlueprintConfigOneOf1CloudFormation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
