[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-diagrams"
version = "1.5.0"
description = "Create infrastructure and architecture diagrams via MCP"
readme = "README.md"
authors = [
    {name = "Ravi Kiran", email = "vrknetha@gmail.com"}
]
license = {file = "LICENSE"}
requires-python = ">=3.10"
keywords = ["mcp", "diagrams", "architecture", "infrastructure", "cloud", "aws", "azure", "gcp", "kubernetes"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: System :: Systems Administration",
]

dependencies = [
    "fastmcp>=0.1.0",
    "diagrams>=0.23.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
]

[project.urls]
Homepage = "https://github.com/vrknetha/mcp-diagrams"
Documentation = "https://github.com/vrknetha/mcp-diagrams#readme"
Repository = "https://github.com/vrknetha/mcp-diagrams.git"
"Bug Tracker" = "https://github.com/vrknetha/mcp-diagrams/issues"

[project.scripts]
mcp-diagrams = "mcp_diagrams.__main__:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
mcp_diagrams = ["*.json"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["src"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py310"
select = ["E", "F", "I", "N", "W", "B", "C90", "D"]
ignore = ["D100", "D101", "D102", "D103", "D104", "D107"]
exclude = [
    ".git",
    ".venv",
    "build",
    "dist",
    "__pycache__",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true