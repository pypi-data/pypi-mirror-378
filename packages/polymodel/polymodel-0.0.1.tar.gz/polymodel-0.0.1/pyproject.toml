[project]
name = "polymodel"
version = "0.0.1"
description = "PolyModel, a modern, flexible ORM with full Pydantic compatibility"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    { name = "RamÃ³n Vila Ferreres", email = "ramonvilafer@proton.me" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP",
    "Typing :: Typed",
]
dependencies = [
    "SQLAlchemy >=2.0.14,<2.1.0",
    "pydantic >=1.10.13,<3.0.0",
]

[project.urls]
Homepage = "https://github.com/rmonvfer/polymodel"
Source = "https://github.com/rmonvfer/polymodel"
Issues = "https://github.com/rmonvfer/polymodel/issues"
Upstream = "https://github.com/sqlmodel/sqlmodel"

[build-system]
requires = ["uv_build>=0.8.19,<0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-root = ""
module-name = "polymodel"
source-include = [
  "tests/**",
  "scripts/**",
]

[tool.coverage.run]
parallel = true
data_file = "coverage/.coverage"
source = [
    "tests",
    "polymodel"
]
context = '${CONTEXT}'
dynamic_context = "test_function"

[tool.coverage.report]
show_missing = true
sort = "-Cover"
exclude_lines = [
    "pragma: no cover",
    "@overload",
    'if __name__ == "__main__":',
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
show_contexts = true

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = "sqlmodel.sql._expression_select_gen"
warn_unused_ignores = false

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.isort]
known-third-party = [
    "polymodel",
    "sqlalchemy",
    "pydantic",
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
