from ..object import Object
from ..reference import Reference
from .. import domainfile_generator
from pathlib import Path


def generate(objects: list[Object], paths: dict):
    basePath = paths['domain'] + 'base\\'
    modelPath = paths['domain'] + 'model\\'
    logicPath = paths['logic']
    basePackage = domainfile_generator.getPackage(basePath)
    modelPackage = domainfile_generator.getPackage(modelPath)
    logicPackage = domainfile_generator.getPackage(logicPath)
    for uniquePackage in set([object.package for object in objects]):
        Path('.' + logicPath + uniquePackage + '\\impl').mkdir(parents=True, exist_ok=True)
    for object in objects:
        generateBaseLogic(object, logicPath, logicPackage, modelPackage)
        generateBaseLogicImpl(object, logicPath, logicPackage, basePackage, modelPackage)
        generateLogic(object, logicPath, logicPackage)
        generateLogicImpl(object, logicPath, logicPackage)

def generateLogicImpl(object, logicPath, logicPackage):
    path = '.' + logicPath + object.package + '\\impl\\' + object.name + 'LogicImpl.java'
    if not Path(path).exists():
        with open(path, 'w') as file:
            file.write(f'package {logicPackage + object.package}.impl;\n\n')
            file.write('import io.quarkus.arc.Unremovable;\n')
            file.write('import jakarta.enterprise.context.ApplicationScoped;\n')
            file.write('import jakarta.enterprise.inject.Specializes;\n')
            file.write(f'import {logicPackage + object.package}.{object.name}Logic;\n\n')
            file.write('@Unremovable\n')
            file.write('@Specializes\n')
            file.write('@ApplicationScoped\n')
            file.write(f'public class {object.name}LogicImpl extends Base{object.name}LogicImpl implements {object.name}Logic {{\n')
            file.write('}')


def generateLogic(object, logicPath, logicPackage):
    path = '.' + logicPath + object.package + '\\' + object.name + 'Logic.java'
    if not Path(path).exists():
        with open(path, 'w') as file:
            file.write(f'package {logicPackage + object.package};\n\n')
            file.write(f'public interface {object.name}Logic extends Base{object.name}Logic {{\n')
            file.write('}')


def generateBaseLogicImpl(object, logicPath, logicPackage, basePackage, modelPackage):
    oneToNReferences = [field for field in object.fields.values() if type(field.fieldType) == Reference and field.fieldType.multiple]
    with open('.' + logicPath + object.package + '\\impl\\Base' + object.name + 'LogicImpl.java', 'w') as file:
        file.write('// generated\n')
        file.write(f'package {logicPackage + object.package}.impl;\n\n')
        file.write('import jakarta.inject.Inject;\n')
        file.write('import jakarta.persistence.EntityManager;\n')
        file.write('import jakarta.persistence.TypedQuery;\n')
        file.write('import jakarta.persistence.criteria.CriteriaBuilder;\n')
        file.write('import jakarta.persistence.criteria.CriteriaQuery;\n')
        file.write('import jakarta.persistence.criteria.Root;\n')
        file.write('import jakarta.validation.ConstraintViolation;\n')
        file.write('import jakarta.validation.ValidationException;\n')
        file.write('import jakarta.validation.Validator;\n')
        file.write(f'import {basePackage}exception.ObjectNotFoundException;\n')
        file.write(f'import {modelPackage + object.package}.{object.name};\n')
        file.write(f'import {modelPackage + object.package}.transfer.{object.name}Bto;\n')
        file.write(f'import {modelPackage + object.package}.transfer.{object.name}BtoMapper;\n')
        for imp in sorted([f'{logicPackage}{ref.fieldType.package}.{ref.fieldType.target}Logic' for ref in oneToNReferences] + [f'{logicPackage}{object.package}.Base{object.name}Logic']):
            file.write(f'import {imp};\n')
        file.write('import org.jboss.logging.Logger;\n\n')
        file.write('import java.util.List;\n')
        file.write('import java.util.Set;\n')
        file.write('import java.util.UUID;\n')
        file.write('import java.util.stream.Collectors;\n\n')
        file.write(f'public class Base{object.name}LogicImpl implements Base{object.name}Logic {{\n\n')
        file.write('  @Inject\n')
        file.write(f'  {object.name}BtoMapper btoMapper;\n')
        file.write('  @Inject\n')
        file.write('  EntityManager entityManager;\n')
        file.write('  @Inject\n')
        file.write('  Logger log;\n')
        file.write('  @Inject\n')
        file.write('  Validator validator;\n\n')
        for inject in sorted([f'  {ref.fieldType.target}Logic {ref.fieldType.target.lower()}Logic;\n' for ref in oneToNReferences]):
            file.write('@Inject;\n')
            file.write(inject)
        if len(oneToNReferences):
            file.write('\n')
        file.write('  @Override\n')
        file.write(f'  public {object.name}Bto instantiate() {{\n')
        file.write(f'    {object.name}Bto bto = new {object.name}Bto();\n')
        file.write('    // override in logic to insert default parameters\n')
        file.write('    return bto;\n')
        file.write('  }\n\n')
        file.write('  @Override\n')
        file.write('  @Transactional\n')
        file.write(f'  public {object.name}Bto get(String id) {{\n')
        file.write(f'    {object.name} bo = getBo(id);\n')
        file.write('    if (bo == null) {\n')
        file.write(f'      throw new ObjectNotFoundException(String.format(\"{object.name} with id %s not found.\", id));\n')
        file.write('    }\n')
        file.write('    return btoMapper.toBto(bo);\n')
        file.write('  }\n\n')
        file.write('  @Override\n')
        file.write('  @Transactional')
        file.write(f'  public List<{object.name}Bto> getList(List<String> ids) {{\n')
        file.write('    List<UUID> idList = ids.stream().map(UUID::fromString).toList();\n')
        file.write('    CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n')
        file.write(f'    CriteriaQuery<{object.name}> query = cb.createQuery({object.name}.class);\n')
        file.write(f'    Root<{object.name}> root = query.from({object.name}.class);\n')
        file.write(f'    query.where(root.get({object.name}.ID).in(idList));\n')
        file.write(f'    TypedQuery<{object.name}> result = entityManager.createQuery(query);\n')
        file.write('    return result.getResultStream().map(btoMapper::toBto).toList();\n')
        file.write('  }\n\n')
        file.write('  @Override\n')
        file.write('  @Transactional')
        file.write(f'  public List<{object.name}Bto> getAll() {{\n')
        file.write('    CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n')
        file.write(f'    CriteriaQuery<{object.name}> query = cb.createQuery({object.name}.class);\n')
        file.write(f'    Root<{object.name}> root = query.from({object.name}.class);\n')
        file.write(f'    TypedQuery<{object.name}> result = entityManager.createQuery(query);\n')
        file.write('    return result.getResultStream().map(btoMapper::toBto).toList();\n')
        file.write('  }\n\n')
        file.write('  @Override\n')
        file.write(f'  public Set<ConstraintViolation<{object.name}Bto>> validate({object.name}Bto bto) {{\n')
        file.write('    return validator.validate(bto);\n')
        file.write('  }\n\n')
        file.write('  @Override\n')
        file.write('  @Transactional\n')
        file.write(f'  public boolean save({object.name}Bto bto) {{\n')
        file.write('    Set<? extends ConstraintViolation<?>> validationResult = validate(bto);\n')
        file.write('    if (!validationResult.isEmpty()) {\n')
        file.write('      String message = validationResult.stream()\n')
        file.write('                         .map(val -> String.valueOf(val.getPropertyPath()).concat(\": \").concat(val.getMessage()))\n')
        file.write('                         .collect(Collectors.joining(\"\\n\"));\n')
        file.write('      throw new ValidationException(message);\n')
        file.write('    }\n')
        file.write('    if (bto.getId() == null || bto.getId().isEmpty()) {\n')
        file.write(f'      {object.name} bo = new {object.name}();\n')
        file.write('      btoMapper.mapToBo(bo, bto);\n')
        file.write('      entityManager.persist(bo);\n')
        file.write('      bto.setId(bo.getId().toString());\n')
        file.write('      bto.setCreation(bo.getCreation());\n')
        file.write('      bto.setCreationUser(bo.getCreationUser());\n')
        file.write('      bto.setLastUpdate(bo.getLastUpdate());\n')
        file.write('      bto.setLastUpdateUser(bo.getLastUpdateUser());\n')
        file.write('      handleConnectedObjects(bo, bto);\n')
        file.write('      log.info(String.format(\"%s created\", bo));\n')
        file.write('      return true;\n')
        file.write('    } else {\n')
        file.write(f'      {object.name} bo = getBo(bto.getId());\n')
        file.write('      boolean changes = btoMapper.mapToBo(bo, bto);\n')
        file.write('      handleConnectedObjects(bo, bto);\n')
        file.write('      if (changes) {\n')
        file.write('        entityManager.merge(bo);\n')
        file.write('        bto.setLastUpdate(bo.getLastUpdate());\n')
        file.write('        bto.setLastUpdateUser(bo.getLastUpdateUser());\n')
        file.write('        log.info(String.format(\"%s updated.\", bo));\n')
        file.write('        return true;\n')
        file.write('      }\n')
        file.write('      return false;\n')
        file.write('    }\n')
        file.write('  }\n\n')
        file.write('  @Override')
        file.write(f'  public boolean delete({object.name}Bto bto) {{\n')
        file.write('    if (bto == null) {\n')
        file.write('      log.warn(\"Person not found for deletion.\");\n')
        file.write('    }\n')
        file.write('    return delete(bto.getId());\n')
        file.write('  }\n\n')
        file.write('  @Override\n')
        file.write('  @Transactional\n')
        file.write(f'  public boolean delete(String id) {{\n')
        file.write(f'    {object.name} bo = getBo(id);\n')
        file.write('    if (bo != null) {\n')
        file.write('      entityManager.remove(bo);\n')
        file.write('      log.info(String.format(\"%s deleted.\", bo));\n')
        file.write('      return true;\n')
        file.write('    } else {\n')
        file.write(f'      log.warn(String.format(\"{object.name} with id %s not found for deletion.\", id));\n')
        file.write('      return false;\n')
        file.write('    }\n')
        file.write('  }\n\n')
        file.write(f'  protected {object.name} getBo(String id) {{\n')
        file.write(f'    return entityManager.find({object.name}.class, UUID.fromString(id));\n')
        file.write('  }\n\n')
        file.write(f'  protected void handleConnectedObjects({object.name} bo, {object.name}Bto bto) {{\n')
        for ref in oneToNReferences:
            file.write(f'    handle{ref.name[0].upper() + ref.name[1:]}(bo, bto);\n')
        file.write('  }\n')
        for ref in oneToNReferences:
            refName = ref.name[0].upper() + ref.name[1:]
            refLower = ref.fieldType.target.lower()
            file.write('\n')
            file.write(f'  private void handle{refName}({object.name} bo, {object.name}Bto bto) {{\n')
            file.write('    // Existing Bos without Bto are outdated and should be deleted\n')
            file.write(f'    List<String> {ref.name}InBto = bto.get{refName}().stream().map({ref.fieldType.target}Bto::getId).toList();\n')
            file.write(f'    bo.get{refName}().stream().map({refLower}Bo -> {refLower}Bo.getId().toString))\n')
            file.write(f'      .filter({refLower} -> !{ref.name}InBto.contains({refLower}))\n')
            file.write(f'      .forEach({refLower} -> {refLower}Logic.delete({refLower}));\n\n')
            file.write(f'    bto.get{refName}().forEach({refLower}Bto -> {{\n')
            file.write(f'      if ({refLower}Bto.get{object.name}() == null) {{\n')
            file.write(f'        {refLower}Bto.set{object.name}(bto);\n')
            file.write('      }\n')
            file.write(f'      {refLower}Logic.save({refLower}Bto);\n')
            file.write('    });\n')
            file.write('  }\n')
        file.write('}')

        

def generateBaseLogic(object, logicPath, logicPackage, modelPackage):
    with open('.' + logicPath + object.package + '\\Base' + object.name + 'Logic.java', 'w') as file:
        file.write('// generated\n')
        file.write(f'package {logicPackage + object.package};\n\n')
        file.write('import jakarta.validation.ConstraintViolation;\n')
        file.write(f'import {modelPackage + object.package}.transfer.{object.name}Bto;\n\n')
        file.write('import java.util.List;\n')
        file.write('import java.util.Set;\n\n')
        file.write(f'public interface Base{object.name}Logic {{\n\n')
        file.write(f'  {object.name}Bto instantiate();\n\n')
        file.write(f'  {object.name}Bto get(String id);\n\n')
        file.write(f'  List<{object.name}Bto> getList(List<String> ids);\n\n')
        file.write(f'  List<{object.name}Bto> getAll();\n\n')
        file.write(f'  Set<ConstraintViolation<{object.name}Bto>> validate({object.name}Bto bto);\n\n')
        file.write(f'  boolean save({object.name}Bto bto);\n\n')
        file.write(f'  boolean delete({object.name}Bto bto);\n\n')
        file.write(f'  boolean delete(String id);\n')
        file.write('}')