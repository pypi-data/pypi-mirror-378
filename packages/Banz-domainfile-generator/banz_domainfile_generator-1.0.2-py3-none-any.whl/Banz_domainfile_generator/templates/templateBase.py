from .. import domainfile_generator
from pathlib import Path


def generate(paths: dict):
    basePath = paths['domain'] + 'base\\'
    generateAbstractBusinessObject(basePath)
    generateI18n(basePath)
    generateException(basePath + 'exception\\')
    generateBaseBto(basePath + 'transfer\\')
    generateBaseBtoMapper(basePath)
    generateBaseDto(basePath + 'dto\\')
    generateBaseDtoMapper(basePath)


def generateAbstractBusinessObject(basePath):
    objectName = 'AbstractBusinessObject'
    package = domainfile_generator.getPackage(basePath)
    Path('.' + basePath).mkdir(parents=True, exist_ok=True)
    with open('.' + basePath + '\\' + objectName + '.java', 'w') as file:
        file.write('// generated\n')
        file.write(f'package {package[:-1]};\n\n')
        file.write('import jakarta.persistence.*;\n')
        file.write('import org.hibernate.Hibernate;\n')
        file.write('import org.hibernate.annotations.UuidGenerator;\n\n')
        file.write('import java.io.Serializable;\n')
        file.write('import java.sql.Timestamp;\n')
        file.write('import java.time.Instant;\n')
        file.write('import java.util.Objects;\n')
        file.write('import java.util.UUID;\n\n')
        file.write('@MappedSuperclass\n')
        file.write(f'public class {objectName} implements Serializable {{\n\n')
        file.write('  public static final String ID = \"id\";\n')
        file.write('  public static final String VERSION = \"version\";\n')
        file.write('  public static final String CREATION = \"creation\";\n')
        file.write('  public static final String CREATION_USER = \"creationUser\";\n')
        file.write('  public static final String LAST_UPDATE = \"lastUpdate\";\n')
        file.write('  public static final String LAST_UPDATE_USER = \"lastUpdateUser\";\n\n')
        file.write('  @Id\n')
        file.write('  @GeneratedValue\n')
        file.write('  @UuidGenerator\n')
        file.write('  private UUID id;\n\n')
        file.write('  @Version\n')
        file.write('  private int version;\n\n')
        file.write('  @Basic\n')
        file.write('  private Timestamp creation;\n\n')
        file.write('  @Basic\n')
        file.write('  private String creationUser;\n\n')
        file.write('  @Basic\n')
        file.write('  private Timestamp lastUpdate;\n\n')
        file.write('  @Basic\n')
        file.write('  private String lastUpdateUser;\n\n')
        file.write(f'  public {objectName}() {{\n')
        file.write('  }\n\n')
        file.write('  @PrePersist\n')
        file.write('  protected void onCreate() {\n')
        file.write('    this.creation = Timestamp.from(Instant.now());\n')
        file.write('    this.lastUpdate = Timestamp.from(Instant.now());\n')
        file.write('    this.creationUser = getCurrentUsername();\n')
        file.write('    this.lastUpdateUser = getCurrentUsername();\n')
        file.write('  }\n\n')
        file.write('  @PreUpdate\n')
        file.write('  protected void onUpdate() {\n')
        file.write('    this.lastUpdate = Timestamp.from(Instant.now());\n')
        file.write('    this.lastUpdateUser = getCurrentUsername();\n')
        file.write('  }\n\n')
        writeGetterSetter(file, 'id', 'UUID')
        writeGetterSetter(file, 'version', 'int')
        writeGetterSetter(file, 'creation', 'Timestamp')
        writeGetterSetter(file, 'creationUser', 'String')
        writeGetterSetter(file, 'lastUpdate', 'Timestamp')
        writeGetterSetter(file, 'lastUpdateUser', 'String')
        file.write('  @Override\n')
        file.write('  public boolean equals(Object object) {\n')
        file.write('    if (this == object) {\n')
        file.write('      return true;\n')
        file.write('    }\n')
        file.write('    if (object == null || !Hibernate.getClass(this).equals(Hibernate.getClass(object))) {\n')
        file.write('      return false;\n')
        file.write('    }\n')
        file.write('    AbstractBusinessObject other = (AbstractBusinessObject) object;\n')
        file.write('    return Objects.equals(this.getId(), other.getId());\n')
        file.write('  }\n\n')
        file.write('  private String getCurrentUsername() {\n')
        file.write('    return "system";\n') #todo
        file.write('  }\n')
        file.write('}')

def generateI18n(basePath):
    objectName = 'I18N'
    package = domainfile_generator.getPackage(basePath)
    Path('.' + basePath).mkdir(parents=True, exist_ok=True)
    with open('.' + basePath + '\\' + objectName + '.java', 'w') as file:
        file.write('// generated\n')
        file.write(f'package {package[:-1]};\n\n')
        file.write('import jakarta.enterprise.context.ApplicationScoped;\n')
        file.write('import jakarta.ws.rs.core.Context;\n')
        file.write('import jakarta.ws.rs.core.HttpHeaders;\n\n')
        file.write('import java.util.Locale;\n')
        file.write('import java.util.ResourceBundle;\n\n')
        file.write('@ApplicationScoped\n')
        file.write(f'public class {objectName} {{\n\n')
        file.write('  @Context\n')
        file.write('  HttpHeaders headers;\n\n')
        file.write('  public String getLocalizedValue(String key) {\n')
        file.write('    Locale locale = getCurrentLocale();\n')
        file.write('    ResourceBundle bundle = ResourceBundle.getBundle(\"constants.i18n\", locale);\n')
        file.write('    return bundle.getString(key);\n')
        file.write('  }\n\n')
        file.write('  private Locale getCurrentLocale() {\n')
        file.write('    Locale locale = Locale.getDefault();\n')
        file.write('    if (headers != null && !headers.getAcceptableLanguages().isEmpty()) {\n')
        file.write('      locale = headers.getAcceptableLanguages().getFirst();\n')
        file.write('    }\n')
        file.write('    return locale;\n')
        file.write('  }\n')
        file.write('}')

def generateException(path):
    objectName = 'ObjectNotFoundException'
    package = domainfile_generator.getPackage(path)
    Path('.' + path).mkdir(parents=True, exist_ok=True)
    with open('.' + path + '\\' + objectName + '.java', 'w') as file:
        file.write('// generated\n')
        file.write(f'package {package[:-1]};\n\n')
        file.write(f'public class {objectName} extends RuntimeException {{\n\n')
        file.write('  public ObjectNotFoundException() {\n')
        file.write('  }\n\n')
        file.write('  public ObjectNotFoundException(String message) {\n')
        file.write('    super(message);\n')
        file.write('  }\n\n')
        file.write('  public ObjectNotFoundException(String message, Throwable cause) {\n')
        file.write('    super(message, cause);\n')
        file.write('  }\n\n')
        file.write('  public ObjectNotFoundException(Throwable cause) {\n')
        file.write('    super(cause);\n')
        file.write('  }\n')
        file.write('}')

def generateBaseBto(path):
    objectName = 'BaseBto'
    package = domainfile_generator.getPackage(path)
    Path('.' + path).mkdir(parents=True, exist_ok=True)
    with open('.' + path + '\\' + objectName + '.java', 'w') as file:
        file.write('// generated\n')
        file.write(f'package {package[:-1]};\n\n')
        file.write('import java.sql.Timestamp;\n\n')
        file.write(f'public class {objectName} {{\n\n')
        file.write('  private String id;\n')
        file.write('  private Timestamp creation;\n')
        file.write('  private String creationUser;\n')
        file.write('  private Timestamp lastUpdate;\n')
        file.write('  private String lastUpdateUser;\n\n')
        writeGetterSetter(file, 'id', 'String')
        writeGetterSetter(file, 'creation', 'Timestamp')
        writeGetterSetter(file, 'creationUser', 'String')
        writeGetterSetter(file, 'lastUpdate', 'Timestamp')
        writeGetterSetter(file, 'lastUpdateUser', 'String')
        file.write('}')

def generateBaseBtoMapper(path):
    objectName = 'BaseBtoMapper'
    transferPath = path + 'transfer\\'
    package = domainfile_generator.getPackage(transferPath)
    basePackage = domainfile_generator.getPackage(path)
    Path('.' + transferPath).mkdir(parents=True, exist_ok=True)
    with open('.' + transferPath + '\\' + objectName + '.java', 'w') as file:
        file.write('// generated\n')
        file.write(f'package {package[:-1]};\n\n')
        file.write(f'import {basePackage}AbstractBusinessObject;\n\n')
        file.write(f'public class {objectName} {{\n\n')
        file.write('  protected void mapBasePropertiesToBto(AbstractBusinessObject bo, BaseBto bto) {\n')
        file.write('    bto.setCreation(bo.getCreation());\n')
        file.write('    bto.setCreationUser(bo.getCreationUser());\n')
        file.write('    bto.setLastUpdate(bo.getLastUpdate());\n')
        file.write('    bto.setLastUpdateUser(bo.getCreationUser());\n')
        file.write('    bto.setId(bo.getId().toString());\n')
        file.write('  }\n')
        file.write('}')

def generateBaseDto(path):
    objectName = 'BaseDto'
    package = domainfile_generator.getPackage(path)
    Path('.' + path).mkdir(parents=True, exist_ok=True)
    with open('.' + path + '\\' + objectName + '.java', 'w') as file:
        file.write('// generated\n')
        file.write(f'package {package[:-1]};\n\n')
        file.write('import java.sql.Timestamp;\n\n')
        file.write(f'public class {objectName} {{\n\n')
        file.write('  private String id;\n')
        file.write('  private Timestamp creation;\n')
        file.write('  private String creationUser;\n')
        file.write('  private Timestamp lastUpdate;\n')
        file.write('  private String lastUpdateUser;\n\n')
        writeGetterSetter(file, 'id', 'String')
        writeGetterSetter(file, 'creation', 'Timestamp')
        writeGetterSetter(file, 'creationUser', 'String')
        writeGetterSetter(file, 'lastUpdate', 'Timestamp')
        writeGetterSetter(file, 'lastUpdateUser', 'String')
        file.write('}')

def generateBaseDtoMapper(path):
    objectName = 'BaseDtoMapper'
    utilPath = path + 'util\\'
    package = domainfile_generator.getPackage(utilPath)
    transferPackage = domainfile_generator.getPackage(path + 'transfer\\')
    dtoPackage = domainfile_generator.getPackage(path + 'dto\\')
    Path('.' + utilPath).mkdir(parents=True, exist_ok=True)
    with open('.' + utilPath + '\\' + objectName + '.java', 'w') as file:
        file.write('// generated\n')
        file.write(f'package {package[:-1]};\n\n')
        file.write(f'import {dtoPackage}BaseDto;\n\n')
        file.write(f'import {transferPackage}BaseBto;\n\n')
        file.write(f'public class {objectName} {{\n\n')
        file.write('  protected void mapBaseBtoToDto(BaseBto bto, BaseDto dto) {\n')
        file.write('    dto.setId(bto.getId());\n')
        file.write('    dto.setCreation(bto.getCreation());\n')
        file.write('    dto.setCreationUser(bto.getCreationUser());\n')
        file.write('    dto.setLastUpdate(bto.getLastUpdate());\n')
        file.write('    dto.setLastUpdateUser(bto.getCreationUser());\n')
        file.write('  }\n\n')
        file.write('  protected void mapBaseDtoToBto(BaseDto bto, BaseBto dto) {\n')
        file.write('    bto.setId(dto.getId());\n')
        file.write('    bto.setCreation(dto.getCreation());\n')
        file.write('    bto.setCreationUser(dto.getCreationUser());\n')
        file.write('    bto.setLastUpdate(dto.getLastUpdate());\n')
        file.write('    bto.setLastUpdateUser(dto.getCreationUser());\n')
        file.write('  }\n')
        file.write('}')
    

def writeGetterSetter(file, name, dataType):
    file.write(f'  public {dataType} get{name[0].upper() + name[1:]}() {{\n')
    file.write(f'    return this.{name};\n')
    file.write('  }\n\n')
    file.write(f'  public void set{name[0].upper() + name[1:]}({dataType} {name}) {{\n')
    file.write(f'    this.{name} = {name};\n')
    file.write('  }\n\n')