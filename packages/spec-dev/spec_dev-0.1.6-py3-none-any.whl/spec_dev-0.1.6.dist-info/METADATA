Metadata-Version: 2.4
Name: spec-dev
Version: 0.1.6
Summary: Bundle of the .spec-dev workspace template.
Author: Spec Dev
Project-URL: Homepage, https://example.com/spec-dev
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.9
Description-Content-Type: text/markdown

# spec-dev

A small helper package that bundles the `.spec-dev` workspace template so it can be
installed with `pip` and copied into new projects.

## Installation

```bash
pip install spec-dev
```

If you are working from the repository source, you can install it locally instead:

```bash
pip install .
```

## CLI Usage

```bash
spec-dev init               # copy .spec-dev into the current directory
spec-dev init path/to/app   # copy into a specific directory
spec-dev init --force       # overwrite an existing .spec-dev folder
spec-dev memory T-123       # scaffold .spec-dev/active-memories/T-123-memory.md
spec-dev cycle --label release-qa  # archive active artifacts and reset templates
# template lives at .spec-dev/templates/memories/task-memory-template.md
```

The CLI defaults to `init` when you omit the subcommand, so `spec-dev` keeps the
original behaviour.

## Python API

```python
from spec_dev import copy, create_memory

copy("/path/to/project", overwrite=True)
create_memory("T-123", "/path/to/project")
```

Both helpers return a `Path` to the created resources.

## Templates

All starter files live under `.spec-dev/templates/`. Use `templates/active/` for
phase artifacts (copy into `.spec-dev/active-dev/` and rename), and `templates/memories/`
for archival notes. Fill templates out before advancing gates; refer to the included
example for memory expectations.
Task memories live under `.spec-dev/active-memories/` and follow a lightweight playbook—why it mattered, what changed, how it shipped, validation, artifacts, ripple effects, and any lessons learned—trim sections that do not apply.
When a cycle is complete, run `spec-dev cycle [--label <name>]` to archive the active artifacts under `.spec-dev/history/` and repopulate `active-dev/` with fresh templates.
