# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IamServiceAccountAccessCredentialArgs', 'IamServiceAccountAccessCredential']

@pulumi.input_type
class IamServiceAccountAccessCredentialArgs:
    def __init__(__self__, *,
                 service_account_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 expires_at: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a IamServiceAccountAccessCredential resource.
        :param pulumi.Input[_builtins.str] service_account_id: Identity of the service account
        :param pulumi.Input[_builtins.str] description: Description of the access credential
        :param pulumi.Input[_builtins.str] expires_at: Expiration timestamp of the access credential (RFC3339 format)
        :param pulumi.Input[_builtins.str] name: Name of the access credential
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scopes: List of scopes for the access credential
        """
        pulumi.set(__self__, "service_account_id", service_account_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @_builtins.property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> pulumi.Input[_builtins.str]:
        """
        Identity of the service account
        """
        return pulumi.get(self, "service_account_id")

    @service_account_id.setter
    def service_account_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_account_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the access credential
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Expiration timestamp of the access credential (RFC3339 format)
        """
        return pulumi.get(self, "expires_at")

    @expires_at.setter
    def expires_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expires_at", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the access credential
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of scopes for the access credential
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "scopes", value)


@pulumi.input_type
class _IamServiceAccountAccessCredentialState:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[_builtins.str]] = None,
                 access_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 expires_at: Optional[pulumi.Input[_builtins.str]] = None,
                 last_used_at: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_account_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamServiceAccountAccessCredential resources.
        :param pulumi.Input[_builtins.str] access_key: Access key for the credential
        :param pulumi.Input[_builtins.str] access_secret: Access secret for the credential
        :param pulumi.Input[_builtins.str] created_at: Creation timestamp of the access credential
        :param pulumi.Input[_builtins.str] description: Description of the access credential
        :param pulumi.Input[_builtins.str] expires_at: Expiration timestamp of the access credential (RFC3339 format)
        :param pulumi.Input[_builtins.str] last_used_at: Last used timestamp of the access credential
        :param pulumi.Input[_builtins.str] name: Name of the access credential
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scopes: List of scopes for the access credential
        :param pulumi.Input[_builtins.str] service_account_id: Identity of the service account
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if access_secret is not None:
            pulumi.set(__self__, "access_secret", access_secret)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if last_used_at is not None:
            pulumi.set(__self__, "last_used_at", last_used_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Access key for the credential
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_key", value)

    @_builtins.property
    @pulumi.getter(name="accessSecret")
    def access_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Access secret for the credential
        """
        return pulumi.get(self, "access_secret")

    @access_secret.setter
    def access_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_secret", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creation timestamp of the access credential
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the access credential
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Expiration timestamp of the access credential (RFC3339 format)
        """
        return pulumi.get(self, "expires_at")

    @expires_at.setter
    def expires_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expires_at", value)

    @_builtins.property
    @pulumi.getter(name="lastUsedAt")
    def last_used_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last used timestamp of the access credential
        """
        return pulumi.get(self, "last_used_at")

    @last_used_at.setter
    def last_used_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_used_at", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the access credential
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of scopes for the access credential
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "scopes", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identity of the service account
        """
        return pulumi.get(self, "service_account_id")

    @service_account_id.setter
    def service_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_account_id", value)


@pulumi.type_token("thalassa:index/iamServiceAccountAccessCredential:IamServiceAccountAccessCredential")
class IamServiceAccountAccessCredential(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 expires_at: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manage access credentials for a service account in Thalassa Cloud

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a service account first
        example = thalassa.IamServiceAccount("example",
            name="example-service-account",
            description="An example service account for demonstration purposes",
            labels={
                "environment": "development",
                "project": "example",
                "type": "automation",
            })
        # Create access credentials for the service account
        api_credential = thalassa.IamServiceAccountAccessCredential("api_credential",
            service_account_id=example.id,
            name="api-access-credential",
            description="API access credential for automation",
            scopes=[
                "api:read",
                "api:write",
            ])
        # Create object storage access credentials
        storage_credential = thalassa.IamServiceAccountAccessCredential("storage_credential",
            service_account_id=example.id,
            name="object-storage-credential",
            description="Object storage access credential",
            scopes=["objectStorage"])
        pulumi.export("apiCredentialId", api_credential.id)
        pulumi.export("apiCredentialAccessKey", api_credential.access_key)
        pulumi.export("apiCredentialAccessSecret", api_credential.access_secret)
        pulumi.export("storageCredentialId", storage_credential.id)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of the access credential
        :param pulumi.Input[_builtins.str] expires_at: Expiration timestamp of the access credential (RFC3339 format)
        :param pulumi.Input[_builtins.str] name: Name of the access credential
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scopes: List of scopes for the access credential
        :param pulumi.Input[_builtins.str] service_account_id: Identity of the service account
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamServiceAccountAccessCredentialArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage access credentials for a service account in Thalassa Cloud

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a service account first
        example = thalassa.IamServiceAccount("example",
            name="example-service-account",
            description="An example service account for demonstration purposes",
            labels={
                "environment": "development",
                "project": "example",
                "type": "automation",
            })
        # Create access credentials for the service account
        api_credential = thalassa.IamServiceAccountAccessCredential("api_credential",
            service_account_id=example.id,
            name="api-access-credential",
            description="API access credential for automation",
            scopes=[
                "api:read",
                "api:write",
            ])
        # Create object storage access credentials
        storage_credential = thalassa.IamServiceAccountAccessCredential("storage_credential",
            service_account_id=example.id,
            name="object-storage-credential",
            description="Object storage access credential",
            scopes=["objectStorage"])
        pulumi.export("apiCredentialId", api_credential.id)
        pulumi.export("apiCredentialAccessKey", api_credential.access_key)
        pulumi.export("apiCredentialAccessSecret", api_credential.access_secret)
        pulumi.export("storageCredentialId", storage_credential.id)
        ```

        :param str resource_name: The name of the resource.
        :param IamServiceAccountAccessCredentialArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamServiceAccountAccessCredentialArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 expires_at: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamServiceAccountAccessCredentialArgs.__new__(IamServiceAccountAccessCredentialArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["expires_at"] = expires_at
            __props__.__dict__["name"] = name
            __props__.__dict__["scopes"] = scopes
            if service_account_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_account_id'")
            __props__.__dict__["service_account_id"] = service_account_id
            __props__.__dict__["access_key"] = None
            __props__.__dict__["access_secret"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["last_used_at"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accessKey", "accessSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(IamServiceAccountAccessCredential, __self__).__init__(
            'thalassa:index/iamServiceAccountAccessCredential:IamServiceAccountAccessCredential',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_key: Optional[pulumi.Input[_builtins.str]] = None,
            access_secret: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            expires_at: Optional[pulumi.Input[_builtins.str]] = None,
            last_used_at: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            scopes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            service_account_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamServiceAccountAccessCredential':
        """
        Get an existing IamServiceAccountAccessCredential resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_key: Access key for the credential
        :param pulumi.Input[_builtins.str] access_secret: Access secret for the credential
        :param pulumi.Input[_builtins.str] created_at: Creation timestamp of the access credential
        :param pulumi.Input[_builtins.str] description: Description of the access credential
        :param pulumi.Input[_builtins.str] expires_at: Expiration timestamp of the access credential (RFC3339 format)
        :param pulumi.Input[_builtins.str] last_used_at: Last used timestamp of the access credential
        :param pulumi.Input[_builtins.str] name: Name of the access credential
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] scopes: List of scopes for the access credential
        :param pulumi.Input[_builtins.str] service_account_id: Identity of the service account
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamServiceAccountAccessCredentialState.__new__(_IamServiceAccountAccessCredentialState)

        __props__.__dict__["access_key"] = access_key
        __props__.__dict__["access_secret"] = access_secret
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["expires_at"] = expires_at
        __props__.__dict__["last_used_at"] = last_used_at
        __props__.__dict__["name"] = name
        __props__.__dict__["scopes"] = scopes
        __props__.__dict__["service_account_id"] = service_account_id
        return IamServiceAccountAccessCredential(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Output[_builtins.str]:
        """
        Access key for the credential
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter(name="accessSecret")
    def access_secret(self) -> pulumi.Output[_builtins.str]:
        """
        Access secret for the credential
        """
        return pulumi.get(self, "access_secret")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Creation timestamp of the access credential
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the access credential
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Expiration timestamp of the access credential (RFC3339 format)
        """
        return pulumi.get(self, "expires_at")

    @_builtins.property
    @pulumi.getter(name="lastUsedAt")
    def last_used_at(self) -> pulumi.Output[_builtins.str]:
        """
        Last used timestamp of the access credential
        """
        return pulumi.get(self, "last_used_at")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the access credential
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of scopes for the access credential
        """
        return pulumi.get(self, "scopes")

    @_builtins.property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> pulumi.Output[_builtins.str]:
        """
        Identity of the service account
        """
        return pulumi.get(self, "service_account_id")

