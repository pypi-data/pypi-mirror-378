# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['IamRoleBindingArgs', 'IamRoleBinding']

@pulumi.input_type
class IamRoleBindingArgs:
    def __init__(__self__, *,
                 role_id: pulumi.Input[_builtins.str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 team_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a IamRoleBinding resource.
        :param pulumi.Input[_builtins.str] role_id: Identity of the role to bind
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the role binding
        :param pulumi.Input[_builtins.str] description: Description of the role binding
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the role binding
        :param pulumi.Input[_builtins.str] name: Name of the role binding
        :param pulumi.Input[_builtins.str] service_account_id: Identity of the service account to bind to this role
        :param pulumi.Input[_builtins.str] team_id: Identity of the team to bind to this role
        :param pulumi.Input[_builtins.str] user_id: Identity of the user to bind to this role
        """
        pulumi.set(__self__, "role_id", role_id)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[_builtins.str]:
        """
        Identity of the role to bind
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the role binding
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the role binding
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the role binding
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the role binding
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identity of the service account to bind to this role
        """
        return pulumi.get(self, "service_account_id")

    @service_account_id.setter
    def service_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_account_id", value)

    @_builtins.property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identity of the team to bind to this role
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "team_id", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identity of the user to bind to this role
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class _IamRoleBindingState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 team_id: Optional[pulumi.Input[_builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering IamRoleBinding resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the role binding
        :param pulumi.Input[_builtins.str] created_at: Creation timestamp of the role binding
        :param pulumi.Input[_builtins.str] description: Description of the role binding
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the role binding
        :param pulumi.Input[_builtins.str] name: Name of the role binding
        :param pulumi.Input[_builtins.str] role_id: Identity of the role to bind
        :param pulumi.Input[_builtins.str] service_account_id: Identity of the service account to bind to this role
        :param pulumi.Input[_builtins.str] team_id: Identity of the team to bind to this role
        :param pulumi.Input[_builtins.str] updated_at: Last update timestamp of the role binding
        :param pulumi.Input[_builtins.str] user_id: Identity of the user to bind to this role
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Annotations for the role binding
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creation timestamp of the role binding
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the role binding
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels for the role binding
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the role binding
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identity of the role to bind
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identity of the service account to bind to this role
        """
        return pulumi.get(self, "service_account_id")

    @service_account_id.setter
    def service_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_account_id", value)

    @_builtins.property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identity of the team to bind to this role
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "team_id", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last update timestamp of the role binding
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identity of the user to bind to this role
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)


@pulumi.type_token("thalassa:index/iamRoleBinding:IamRoleBinding")
class IamRoleBinding(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 team_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manage a role binding in Thalassa Cloud

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a role first
        example = thalassa.IamRole("example",
            name="example-role",
            description="An example organisation role for demonstration purposes",
            labels={
                "environment": "development",
                "project": "example",
            },
            annotations={
                "example.com/created-by": "terraform",
            },
            rules=[{
                "resources": [
                    "cloud_vpc",
                    "cloud_subnet",
                ],
                "permissions": [
                    "read",
                    "list",
                ],
                "note": "Allow read access to VPCs and subnets",
            }])
        # Create a role binding for a user
        user_binding = thalassa.IamRoleBinding("user_binding",
            role_id=example.id,
            name="admin-user-binding",
            description="Bind admin user to the example role",
            user_id="user-id-123",
            labels={
                "purpose": "admin-access",
            },
            annotations={
                "example.com/binding-type": "user",
            })
        # Create a role binding for a team
        team_binding = thalassa.IamRoleBinding("team_binding",
            role_id=example.id,
            name="devops-team-binding",
            description="Bind devops team to the example role",
            team_id="team-id-456",
            labels={
                "purpose": "team-access",
            },
            annotations={
                "example.com/binding-type": "team",
            })
        pulumi.export("userBindingId", user_binding.id)
        pulumi.export("userBindingName", user_binding.name)
        pulumi.export("teamBindingId", team_binding.id)
        pulumi.export("teamBindingName", team_binding.name)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the role binding
        :param pulumi.Input[_builtins.str] description: Description of the role binding
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the role binding
        :param pulumi.Input[_builtins.str] name: Name of the role binding
        :param pulumi.Input[_builtins.str] role_id: Identity of the role to bind
        :param pulumi.Input[_builtins.str] service_account_id: Identity of the service account to bind to this role
        :param pulumi.Input[_builtins.str] team_id: Identity of the team to bind to this role
        :param pulumi.Input[_builtins.str] user_id: Identity of the user to bind to this role
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IamRoleBindingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage a role binding in Thalassa Cloud

        ## Example Usage

        ```python
        import pulumi
        import pulumi_thalassa as thalassa

        # Create a role first
        example = thalassa.IamRole("example",
            name="example-role",
            description="An example organisation role for demonstration purposes",
            labels={
                "environment": "development",
                "project": "example",
            },
            annotations={
                "example.com/created-by": "terraform",
            },
            rules=[{
                "resources": [
                    "cloud_vpc",
                    "cloud_subnet",
                ],
                "permissions": [
                    "read",
                    "list",
                ],
                "note": "Allow read access to VPCs and subnets",
            }])
        # Create a role binding for a user
        user_binding = thalassa.IamRoleBinding("user_binding",
            role_id=example.id,
            name="admin-user-binding",
            description="Bind admin user to the example role",
            user_id="user-id-123",
            labels={
                "purpose": "admin-access",
            },
            annotations={
                "example.com/binding-type": "user",
            })
        # Create a role binding for a team
        team_binding = thalassa.IamRoleBinding("team_binding",
            role_id=example.id,
            name="devops-team-binding",
            description="Bind devops team to the example role",
            team_id="team-id-456",
            labels={
                "purpose": "team-access",
            },
            annotations={
                "example.com/binding-type": "team",
            })
        pulumi.export("userBindingId", user_binding.id)
        pulumi.export("userBindingName", user_binding.name)
        pulumi.export("teamBindingId", team_binding.id)
        pulumi.export("teamBindingName", team_binding.name)
        ```

        :param str resource_name: The name of the resource.
        :param IamRoleBindingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IamRoleBindingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 team_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IamRoleBindingArgs.__new__(IamRoleBindingArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["description"] = description
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            if role_id is None and not opts.urn:
                raise TypeError("Missing required property 'role_id'")
            __props__.__dict__["role_id"] = role_id
            __props__.__dict__["service_account_id"] = service_account_id
            __props__.__dict__["team_id"] = team_id
            __props__.__dict__["user_id"] = user_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(IamRoleBinding, __self__).__init__(
            'thalassa:index/iamRoleBinding:IamRoleBinding',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            role_id: Optional[pulumi.Input[_builtins.str]] = None,
            service_account_id: Optional[pulumi.Input[_builtins.str]] = None,
            team_id: Optional[pulumi.Input[_builtins.str]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            user_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'IamRoleBinding':
        """
        Get an existing IamRoleBinding resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] annotations: Annotations for the role binding
        :param pulumi.Input[_builtins.str] created_at: Creation timestamp of the role binding
        :param pulumi.Input[_builtins.str] description: Description of the role binding
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels for the role binding
        :param pulumi.Input[_builtins.str] name: Name of the role binding
        :param pulumi.Input[_builtins.str] role_id: Identity of the role to bind
        :param pulumi.Input[_builtins.str] service_account_id: Identity of the service account to bind to this role
        :param pulumi.Input[_builtins.str] team_id: Identity of the team to bind to this role
        :param pulumi.Input[_builtins.str] updated_at: Last update timestamp of the role binding
        :param pulumi.Input[_builtins.str] user_id: Identity of the user to bind to this role
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IamRoleBindingState.__new__(_IamRoleBindingState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["service_account_id"] = service_account_id
        __props__.__dict__["team_id"] = team_id
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["user_id"] = user_id
        return IamRoleBinding(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Annotations for the role binding
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Creation timestamp of the role binding
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the role binding
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Labels for the role binding
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the role binding
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[_builtins.str]:
        """
        Identity of the role to bind
        """
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Identity of the service account to bind to this role
        """
        return pulumi.get(self, "service_account_id")

    @_builtins.property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Identity of the team to bind to this role
        """
        return pulumi.get(self, "team_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        Last update timestamp of the role binding
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Identity of the user to bind to this role
        """
        return pulumi.get(self, "user_id")

