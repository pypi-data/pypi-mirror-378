# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamServiceAccountResult',
    'AwaitableGetIamServiceAccountResult',
    'get_iam_service_account',
    'get_iam_service_account_output',
]

@pulumi.output_type
class GetIamServiceAccountResult:
    """
    A collection of values returned by getIamServiceAccount.
    """
    def __init__(__self__, annotations=None, created_at=None, description=None, id=None, labels=None, name=None, object_version=None, role_bindings=None, slug=None, updated_at=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if object_version and not isinstance(object_version, int):
            raise TypeError("Expected argument 'object_version' to be a int")
        pulumi.set(__self__, "object_version", object_version)
        if role_bindings and not isinstance(role_bindings, list):
            raise TypeError("Expected argument 'role_bindings' to be a list")
        pulumi.set(__self__, "role_bindings", role_bindings)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Mapping[str, _builtins.str]:
        """
        Annotations for the service account
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Creation timestamp of the service account
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Description of the service account
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Identity of the service account
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Mapping[str, _builtins.str]:
        """
        Labels for the service account
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Name of the service account
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> _builtins.int:
        """
        Object version of the service account
        """
        return pulumi.get(self, "object_version")

    @_builtins.property
    @pulumi.getter(name="roleBindings")
    def role_bindings(self) -> Sequence['outputs.GetIamServiceAccountRoleBindingResult']:
        """
        Role bindings for the service account
        """
        return pulumi.get(self, "role_bindings")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[_builtins.str]:
        """
        Slug of the service account
        """
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        Last update timestamp of the service account
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetIamServiceAccountResult(GetIamServiceAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamServiceAccountResult(
            annotations=self.annotations,
            created_at=self.created_at,
            description=self.description,
            id=self.id,
            labels=self.labels,
            name=self.name,
            object_version=self.object_version,
            role_bindings=self.role_bindings,
            slug=self.slug,
            updated_at=self.updated_at)


def get_iam_service_account(description: Optional[_builtins.str] = None,
                            name: Optional[_builtins.str] = None,
                            slug: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamServiceAccountResult:
    """
    Get a service account


    :param _builtins.str description: Description of the service account
    :param _builtins.str name: Name of the service account
    :param _builtins.str slug: Slug of the service account
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['name'] = name
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('thalassa:index/getIamServiceAccount:getIamServiceAccount', __args__, opts=opts, typ=GetIamServiceAccountResult).value

    return AwaitableGetIamServiceAccountResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        object_version=pulumi.get(__ret__, 'object_version'),
        role_bindings=pulumi.get(__ret__, 'role_bindings'),
        slug=pulumi.get(__ret__, 'slug'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_iam_service_account_output(description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   slug: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamServiceAccountResult]:
    """
    Get a service account


    :param _builtins.str description: Description of the service account
    :param _builtins.str name: Name of the service account
    :param _builtins.str slug: Slug of the service account
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['name'] = name
    __args__['slug'] = slug
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('thalassa:index/getIamServiceAccount:getIamServiceAccount', __args__, opts=opts, typ=GetIamServiceAccountResult)
    return __ret__.apply(lambda __response__: GetIamServiceAccountResult(
        annotations=pulumi.get(__response__, 'annotations'),
        created_at=pulumi.get(__response__, 'created_at'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        name=pulumi.get(__response__, 'name'),
        object_version=pulumi.get(__response__, 'object_version'),
        role_bindings=pulumi.get(__response__, 'role_bindings'),
        slug=pulumi.get(__response__, 'slug'),
        updated_at=pulumi.get(__response__, 'updated_at')))
