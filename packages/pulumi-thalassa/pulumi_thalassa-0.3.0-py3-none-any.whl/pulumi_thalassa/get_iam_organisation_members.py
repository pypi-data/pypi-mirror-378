# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetIamOrganisationMembersResult',
    'AwaitableGetIamOrganisationMembersResult',
    'get_iam_organisation_members',
    'get_iam_organisation_members_output',
]

@pulumi.output_type
class GetIamOrganisationMembersResult:
    """
    A collection of values returned by getIamOrganisationMembers.
    """
    def __init__(__self__, email_filter=None, id=None, members=None, organisation_id=None):
        if email_filter and not isinstance(email_filter, str):
            raise TypeError("Expected argument 'email_filter' to be a str")
        pulumi.set(__self__, "email_filter", email_filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)
        if organisation_id and not isinstance(organisation_id, str):
            raise TypeError("Expected argument 'organisation_id' to be a str")
        pulumi.set(__self__, "organisation_id", organisation_id)

    @_builtins.property
    @pulumi.getter(name="emailFilter")
    def email_filter(self) -> Optional[_builtins.str]:
        """
        Filter members by email address. If provided, only members with matching email addresses will be returned.
        """
        return pulumi.get(self, "email_filter")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetIamOrganisationMembersMemberResult']:
        """
        List of organisation members
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter(name="organisationId")
    def organisation_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "organisation_id")


class AwaitableGetIamOrganisationMembersResult(GetIamOrganisationMembersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamOrganisationMembersResult(
            email_filter=self.email_filter,
            id=self.id,
            members=self.members,
            organisation_id=self.organisation_id)


def get_iam_organisation_members(email_filter: Optional[_builtins.str] = None,
                                 organisation_id: Optional[_builtins.str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamOrganisationMembersResult:
    """
    Get all members of an organisation, optionally filtered by email address


    :param _builtins.str email_filter: Filter members by email address. If provided, only members with matching email addresses will be returned.
    """
    __args__ = dict()
    __args__['emailFilter'] = email_filter
    __args__['organisationId'] = organisation_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('thalassa:index/getIamOrganisationMembers:getIamOrganisationMembers', __args__, opts=opts, typ=GetIamOrganisationMembersResult).value

    return AwaitableGetIamOrganisationMembersResult(
        email_filter=pulumi.get(__ret__, 'email_filter'),
        id=pulumi.get(__ret__, 'id'),
        members=pulumi.get(__ret__, 'members'),
        organisation_id=pulumi.get(__ret__, 'organisation_id'))
def get_iam_organisation_members_output(email_filter: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        organisation_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamOrganisationMembersResult]:
    """
    Get all members of an organisation, optionally filtered by email address


    :param _builtins.str email_filter: Filter members by email address. If provided, only members with matching email addresses will be returned.
    """
    __args__ = dict()
    __args__['emailFilter'] = email_filter
    __args__['organisationId'] = organisation_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('thalassa:index/getIamOrganisationMembers:getIamOrganisationMembers', __args__, opts=opts, typ=GetIamOrganisationMembersResult)
    return __ret__.apply(lambda __response__: GetIamOrganisationMembersResult(
        email_filter=pulumi.get(__response__, 'email_filter'),
        id=pulumi.get(__response__, 'id'),
        members=pulumi.get(__response__, 'members'),
        organisation_id=pulumi.get(__response__, 'organisation_id')))
