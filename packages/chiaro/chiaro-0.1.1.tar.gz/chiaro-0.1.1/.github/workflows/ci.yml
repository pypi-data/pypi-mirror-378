name: CI

on:
  push:
    tags:
      - "v*"
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v5
        if: ${{ matrix.os != 'windows-latest' || startsWith(github.ref, 'refs/tags/v') }}

      - name: Install pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        if: ${{ matrix.os != 'windows-latest' || startsWith(github.ref, 'refs/tags/v') }}
        with:
          pixi-version: v0.53.0
          manifest-path: pyproject.toml
          run-install: false
          cache: false

      - name: Install dependencies
        if: ${{ matrix.os != 'windows-latest' || startsWith(github.ref, 'refs/tags/v') }}
        run: pixi install --all -vv

      - name: Run CI pipeline
        if: ${{ matrix.os != 'windows-latest' || startsWith(github.ref, 'refs/tags/v') }}
        run: pixi run -e ci ci

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: matrix.os == 'ubuntu-latest'
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Install pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: v0.53.0
          manifest-path: pyproject.toml
          run-install: false
          cache: false

      - name: Install dependencies
        run: pixi install --all -vv

      - name: Build docs with examples
        run: pixi run -e dev docs-build-with-examples

      - name: Upload docs artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: docs/_build/html

  deploy-docs:
    name: Deploy Documentation
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    needs: [test, docs]
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build:
    name: Build Package
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    needs: test

    steps:
      - uses: actions/checkout@v5

      - name: Install pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: v0.53.0
          manifest-path: pyproject.toml
          run-install: false
          cache: false

      - name: Install dependencies
        run: pixi install --all -vv

      - name: Build wheel + conda
        run: pixi run -e build build-all

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            dist/*.conda
            dist/*.whl
            dist/*.tar.gz

      - name: Move Conda packages out of dist
        run: mkdir -p conda_dist && mv dist/*.conda conda_dist/ || true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: dist
        if: startsWith(github.ref, 'refs/tags/v')

      - name: Publish Conda package to prefix.dev
        run: |
          pixi auth login prefix.dev --token ${{ secrets.PREFIX_DEV_TOKEN }}
          pixi upload https://prefix.dev/api/v1/upload/rabeez conda_dist/*.conda
        if: startsWith(github.ref, 'refs/tags/v')

      - name: Publish Conda package to anaconda.org
        run: |
          pixi auth login anaconda.org --token ${{ secrets.CONDA_TOKEN }}
          pixi upload https://api.anaconda.org/upload/ruoter conda_dist/*.conda
        if: startsWith(github.ref, 'refs/tags/v')
