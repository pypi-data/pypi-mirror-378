[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-for-code-quality-security"
version = "0.3.2"
description = "Python security scanner with Model Context Protocol (MCP) integration for AI assistants"
authors = [
    {name = "MCP Security Scanner Contributors", email = "security@mcp-scanner.dev"}
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.12"
keywords = [
    "security", "scanner", "mcp", "fastapi", "ai", "llm",
    "owasp", "vulnerability", "analysis", "enterprise", "claude-code"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Security",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Environment :: Console",
    "Framework :: FastAPI",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
dependencies = [
    "mcp[cli]>=1.4.0",
    "ruff>=0.6.0",
    "mypy>=1.8.0",
    "bandit>=1.7.5",
    "safety>=2.3.0,<3.0.0",
    "pylint>=3.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pytest>=7.4.0",
    "coverage>=7.3.0",
    "pydantic>=2.5.0",
    "pyyaml>=6.0.1",
    "rich>=13.7.0",
    "click>=8.1.7",
    "httpx>=0.25.0",
    "aiofiles>=23.2.1",
]

[project.optional-dependencies]
dev = [
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pre-commit>=3.6.0",
    "tox>=4.11.0",
]

[project.scripts]
mcp-for-code-quality-security = "mcp_code_scanner.cli.main:main"
mcpcqs = "mcp_code_scanner.cli.main:main"  # Short alias for convenience

[project.entry-points."mcp.servers"]
security-scanner = "mcp_code_scanner.mcp.server:mcp"

[project.urls]
Homepage = "https://github.com/lgtkgtv/lgtkgtv-code_quality_security_tools_v4_mcp_agent"
Repository = "https://github.com/lgtkgtv/lgtkgtv-code_quality_security_tools_v4_mcp_agent"
Issues = "https://github.com/lgtkgtv/lgtkgtv-code_quality_security_tools_v4_mcp_agent/issues"
Documentation = "https://github.com/lgtkgtv/lgtkgtv-code_quality_security_tools_v4_mcp_agent#readme"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_code_scanner"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/configs",
    "/README.md",
    "/LICENSE",
]

# Tool configurations
[tool.ruff]
target-version = "py312"
line-length = 88
extend-select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert in tests

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/mcp_code_scanner",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test

[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "line-too-long",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "duplicate-code",
]

[tool.pylint.format]
max-line-length = 88