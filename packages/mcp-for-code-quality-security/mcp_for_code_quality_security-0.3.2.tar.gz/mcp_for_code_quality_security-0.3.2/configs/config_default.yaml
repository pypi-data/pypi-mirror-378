# Default configuration for MCP Code Scanner
# This provides a balanced approach to code quality scanning

# Tool selection - which tools to run
enabled_tools:
  - ruff
  - mypy
  - bandit
  - safety
  - pylint

# Scan options
include_tests: true
auto_fix: false
safe_fixes_only: true
max_line_length: 88

# Output options
output_format: json  # json, yaml, text, markdown
show_source: true
group_by_file: true

# Severity filtering
min_severity: info  # info, warning, error, critical
exclude_rules: []

# Performance settings
parallel_execution: true
timeout_seconds: 300

# Tool-specific configurations
tool_configs:
  ruff:
    target_version: py312
    line_length: 88
    select:
      - E  # pycodestyle errors
      - W  # pycodestyle warnings
      - F  # pyflakes
      - I  # isort
      - B  # flake8-bugbear
      - C4 # flake8-comprehensions
      - UP # pyupgrade
      - S  # bandit
    ignore:
      - E501  # line too long, handled by black
      - B008  # do not perform function calls in argument defaults
    
  mypy:
    python_version: "3.12"
    warn_return_any: true
    warn_unused_configs: true
    disallow_untyped_defs: true
    check_untyped_defs: true
    no_implicit_optional: true
    
  bandit:
    exclude_dirs:
      - tests
    skips:
      - B101  # Skip assert_used test
    confidence: medium
    severity: medium
    
  pylint:
    disable:
      - missing-docstring
      - line-too-long
      - too-few-public-methods
      - too-many-arguments
    max_line_length: 88
    
  black:
    line_length: 88
    target_version:
      - py312
    
  isort:
    profile: black
    multi_line_output: 3
    line_length: 88

# Project structure settings
project_structure:
  source_dirs:
    - src
    - lib
  test_dirs:
    - tests
    - test
  exclude_dirs:
    - __pycache__
    - .pytest_cache
    - .mypy_cache
    - .ruff_cache
    - .venv
    - venv
    - env
    - .env
    - .git
    - .tox
    - node_modules
    - build
    - dist