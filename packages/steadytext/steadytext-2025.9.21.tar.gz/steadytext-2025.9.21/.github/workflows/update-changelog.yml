name: Update CHANGELOG

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  update-changelog:
    # Only run on merged PRs or direct pushes to main
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Validate environment
        run: |
          if [ -z "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "::error::ANTHROPIC_API_KEY secret is required"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 50  # Limited history for better performance
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get recent commits
        id: commits
        run: |
          # Get commits from the last merged PR or last 10 commits
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For merged PRs, get all commits in the PR
            COMMITS=$(git log --format="%H %s" "${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}")
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_BODY="${{ github.event.pull_request.body }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
          else
            # For direct pushes, get the last 10 commits
            COMMITS=$(git log --format="%H %s" -10)
            PR_TITLE=""
            PR_BODY=""
            PR_NUMBER=""
          fi
          
          # Export for use in next steps
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_body<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Check if CHANGELOG needs updating
        id: check
        run: |
          # Check if any of the recent commits contain keywords that suggest changelog-worthy changes
          KEYWORDS="feat|fix|breaking|perf|refactor|docs|test|chore|build|ci|style"
          NEEDS_UPDATE=false
          
          # Check commit messages
          while IFS= read -r line; do
            if echo "$line" | grep -E -i "($KEYWORDS)" > /dev/null; then
              NEEDS_UPDATE=true
              break
            fi
          done <<< "${{ steps.commits.outputs.commits }}"
          
          # Check PR title and body for conventional commit patterns
          if [ -n "${{ steps.commits.outputs.pr_title }}" ]; then
            if echo "${{ steps.commits.outputs.pr_title }}" | grep -E -i "^($KEYWORDS)" > /dev/null; then
              NEEDS_UPDATE=true
            fi
          fi
          
          # Skip if the commit is from the changelog update bot itself
          LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          if echo "$LAST_COMMIT_MESSAGE" | grep -i "update changelog.*\[skip ci\]" > /dev/null; then
            NEEDS_UPDATE=false
          fi
          
          echo "needs_update=$NEEDS_UPDATE" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG with Claude
        if: steps.check.outputs.needs_update == 'true'
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: "${{ vars.CLAUDE_MODEL || 'claude-opus-4-20250514' }}"
          trigger_phrase: "@claude"
          allowed_tools: "Read,Write,Bash(git add:*),Bash(git commit:*),Bash(git push:*)"
          custom_instructions: |
            You are updating the CHANGELOG.md file for the SteadyText project.
            
            Context:
            - Recent commits: ${{ steps.commits.outputs.commits }}
            - PR Title: ${{ steps.commits.outputs.pr_title }}
            - PR Body: ${{ steps.commits.outputs.pr_body }}
            - PR Number: ${{ steps.commits.outputs.pr_number }}
            
            Instructions:
            1. Read the current CHANGELOG.md file
            2. Analyze the recent commits and PR information to determine what changes need to be documented
            3. Update the CHANGELOG.md file following the existing format:
               - Keep the "Unreleased" section if it exists
               - Group changes by category: New Features, Bug Fixes, Breaking Changes, Documentation, Internal Changes, etc.
               - Use clear, user-facing descriptions (not just commit messages)
               - Reference PR numbers when available (#${{ steps.commits.outputs.pr_number }})
            4. Only add entries for meaningful changes (skip minor refactoring, typo fixes, etc.)
            5. Commit the changes with message: "chore: update CHANGELOG.md [skip ci]"
            6. Push the changes
            
            IMPORTANT: 
            - Do not create a new version entry unless explicitly stated in commits
            - Keep all existing content intact
            - Only add new entries to the appropriate section
            - If no meaningful changes are found, do not update the file
          github_comment_mode: "none"  # Don't post comments for automated runs

      - name: Create summary
        if: steps.check.outputs.needs_update == 'true'
        run: |
          echo "## CHANGELOG Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f CHANGELOG.md ]; then
            echo "✅ CHANGELOG.md was updated based on recent changes" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No updates were needed for CHANGELOG.md" >> $GITHUB_STEP_SUMMARY
          fi
