name: DevContainer Simple CI

on:
  push:
    branches: ["main", "work", "x/*"]
    paths:
      - '.devcontainer/**'
      - 'pg_steadytext/**'
      - '.github/workflows/devcontainer-simple.yml'
  pull_request:
    branches: ["main", "work"]
    paths:
      - '.devcontainer/**'
      - 'pg_steadytext/**'
      - '.github/workflows/devcontainer-simple.yml'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read

jobs:
  test-devcontainer-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build PostgreSQL image locally
        run: |
          echo "Building PostgreSQL extension image..."
          docker buildx build \
            --load \
            --tag steadytext_devcontainer-postgres:latest \
            --build-arg STEADYTEXT_USE_FALLBACK_MODEL=true \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            ./pg_steadytext

      - name: Create test script
        run: |
          cat > .devcontainer/test-in-container.sh << 'SCRIPT_END'
          #!/bin/bash
          set -e
          
          echo "=== DevContainer Test Suite ==="
          
          # Color codes for output
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          NC='\033[0m'
          
          # Test function
          test_command() {
            local description="$1"
            local command="$2"
            echo -n "Testing: $description... "
            if eval "$command" >/dev/null 2>&1; then
              echo -e "${GREEN}✓${NC}"
              return 0
            else
              echo -e "${RED}✗${NC}"
              return 1
            fi
          }
          
          # Run tests
          test_command "UV package manager" "uv --version"
          test_command "Python installation" "python --version"
          test_command "Docker CLI" "docker --version"
          test_command "Git" "git --version"
          test_command "PostgreSQL client" "psql --version"
          test_command "Node.js" "node --version"
          
          # Test Python packages
          echo -e "\n--- Python Environment ---"
          test_command "SteadyText package" "python -c 'import steadytext'"
          test_command "NumPy" "python -c 'import numpy'"
          test_command "PyTorch availability" "python -c 'import torch'" || echo "  (PyTorch optional)"
          
          # PostgreSQL tests need the service running
          echo -e "\n--- PostgreSQL Service ---"
          
          # Wait for postgres with timeout
          echo -n "Waiting for PostgreSQL service... "
          for i in {1..30}; do
            if docker exec pg_steadytext_db pg_isready -U postgres >/dev/null 2>&1; then
              echo -e "${GREEN}ready${NC}"
              break
            fi
            if [ $i -eq 30 ]; then
              echo -e "${RED}timeout${NC}"
              echo "PostgreSQL container logs:"
              docker logs pg_steadytext_db --tail 50
              exit 1
            fi
            sleep 1
          done
          
          # Test database connection
          export PGPASSWORD=password
          test_command "Database connection" "psql -h localhost -U postgres -d postgres -c 'SELECT 1'"
          
          # Test extension
          echo -e "\n--- pg_steadytext Extension ---"
          psql -h localhost -U postgres -d postgres -c "CREATE EXTENSION IF NOT EXISTS pg_steadytext;"
          VERSION=$(psql -h localhost -U postgres -d postgres -tAc "SELECT steadytext_version();" 2>/dev/null || echo "")
          if [ -n "$VERSION" ]; then
            echo -e "Extension version: ${GREEN}$VERSION${NC}"
          else
            echo -e "Extension version: ${RED}not found${NC}"
          fi
          
          # Simple functional test
          echo -e "\n--- Functional Test ---"
          echo "Testing basic text generation (with mini models for speed)..."
          export STEADYTEXT_USE_MINI_MODELS=true
          if python -c "from steadytext import generate; print(generate('Test', max_new_tokens=5))" 2>/dev/null; then
            echo -e "${GREEN}Text generation works${NC}"
          else
            echo -e "Text generation skipped (models not loaded)"
          fi
          
          echo -e "\n=== All critical tests passed ==="
          SCRIPT_END
          chmod +x .devcontainer/test-in-container.sh

      - name: Run devcontainer with tests
        uses: devcontainers/ci@v0.3
        with:
          configFile: .devcontainer/devcontainer.json
          push: never
          runCmd: |
            # First ensure postgres service is started
            docker compose up -d postgres || true
            
            # Run the test script
            bash .devcontainer/test-in-container.sh
          env:
            DOCKER_BUILDKIT: 1
            COMPOSE_DOCKER_CLI_BUILD: 1
            STEADYTEXT_USE_MINI_MODELS: true
            STEADYTEXT_USE_FALLBACK_MODEL: true