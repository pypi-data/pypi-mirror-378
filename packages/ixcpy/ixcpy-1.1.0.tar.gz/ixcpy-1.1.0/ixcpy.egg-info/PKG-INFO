Metadata-Version: 2.4
Name: ixcpy
Version: 1.1.0
Summary: Wrapper n√£o oficial para conex√£o com a API do sistema IXC Provedor
Home-page: https://github.com/SousaFelipe/ixcpy
Author: Felipe Sousa
Author-email: sousa.felipe@outlook.com
License: MIT License
Keywords: ixc,ixcsoft,api ixc,ixc python
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests
Dynamic: author
Dynamic: author-email
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: license-file
Dynamic: requires-dist
Dynamic: summary


# ixcpy [![PyPI downloads](https://img.shields.io/pypi/dm/ixcpy.svg)](https://pypi.org/project/ixcpy/)

Wrapper n√£o oficial para conex√£o com a API do sistema IXC Provedor

Esta biblioteca n√£o faz parte das bibliotecas oficiais do <a href="https://ixcsoft.com/ixc-provedor" target="_blank">IXC Provedor.</a>\
O desenvolvimento √© feito de forma independente e utiliza apenas uma "interface" de conex√£o com as funcionalidades providas pela API oficial do IXC.\
Voc√™ poder√° encontrar orienta√ß√µes de como parametrizar as requisi√ß√µes na <a href="https://wikiapiprovedor.ixcsoft.com.br/" target="_blank">WIKI oficial</a>, disponilizada pela pr√≥pria <a href="https://ixcsoft.com/" target="_blank">IXC Soft.</a>

## Dispon√≠vel no repos√≠torio PyPI

Esta biblioteca pode ser adicionada de foma simples ao seu projeto, utilizando o comando <a href="https://pypi.org/project/pip/" target="_blank">pip install</a>

```bash
pip install ixcpy
```


## Do jeito mais din√¢mico üòé

Para estabelecer uma conex√£o corretamente, √© necess√°rio fornecer o token de autentica√ß√£o da API do IXC Provedor e o dom√≠nio do seu servidor, nos par√¢metros do construtor da classe Connection.

```python
from ixcpy import Connection, Query

connection = Connection(
    server='seu_dom√≠nio_ixc.com.br',    # Pode ser substitu√≠do por um endere√ßo IP (n√£o recomendado)
    token='seu_token_ixc',              # Verificar a √∫ltima refer√™ncia no final deste README
    table='cliente',                    # Exemplo de requisi√ß√£o de busca na tabela "cliente"
    ssl=True                            # Ativar https ou n√£o (o padr√£o √© True)
)

# O operador "%" far√° a busca em todos os clientes que possuem "Jo√£o" no campo "razao".
connection.where(query=Query(arg='razao % "Jo√£o"'))

# Para encontrar um registro pelo nome que seja exatamente igual ao que voc√™ busca,
# substitua o operador "%" pelo "=".
connection.where(query=Query(arg='razao = "Nome Completo do Jo√£o"'))

# Para realizar a busca em qualquer outro campo, basta alterar a query,
# como no exemplo abaixo.O campo deve corresponder a uma coluna da tabela
# que voc√™ est√° buscando, no IXC (nesse caso, o campo "cnpj_cpf", na tabela "cliente")
connection.where(query=Query(arg='cnpj_cpf = "123.456.789-10"'))

```

> Depois de invocar o m√©todo `where()` uma ou mais vezes, basta invocar o m√©todo `many()` na sua inst√¢ncia de `Connection`\
> Ent√£o voc√™ ir√° obter a inst√¢ncia de um objeto do tipo `Response`, de onde poder√° acessar a quantidade de registros retornados, atrav√©s do m√©todo `total()`.\
> E uma lista dos objetos, a partir do m√©todo `records()`, tudo atrav√©s da inst√¢ncia de `Response`.


## Do jeito mais simples üéØ

Agora vamos supor que voc√™ possua o ID de um determinado registro e queira busc√°-lo no IXC. Isso significa que seria contraproducente encadear "chamadas where". Nesse caso, basta invocar o m√©todo `one()` em uma inst√¢ncia de `Connection`, passando o ID como par√¢metro, da seguinte forma...

```python
from ixcpy import Connection, Query

connection = Connection(
    server='seu_dom√≠nio_ixc.com.br',    # Pode ser substitu√≠do por um endere√ßo IP (n√£o recomendado)
    token='seu_token_ixc',              # Verificar a √∫ltima refer√™ncia no final deste README
    table='cliente',                    # Exemplo de requisi√ß√£o de busca na tabela "cliente"
    ssl=True                            # Ativar https ou n√£o (o padr√£o √© True)
)

# Se o IXC encontrar um registro (na tabela "cliente" nesse caso), o m√©todo "one" retornar√° um 'dict'
# onde as chaves ser√£o do tipo 'str' e o valor de cada campo podendo ser 'str', 'int' ou 'bool',
# dependendo do formato retornado pelo IXC Provedor. Se nenhum registro for encontrado,
# o m√©todo "one" retornar√° um 'None'
cliente = connection.one(record_id=12345)
```

## Clone & Setup

```bash
git clone https://github.com/SousaFelipe/ixcpy.git
```
```bash
cd ixcpy
```
```bash
python -m venv .venv
```
```bash
.venv\Scripts\activate
```
```bash
python -m pip install -r requirements.txt
```


## Refer√™ncias

  - [Site da IXCsoft](https://ixcsoft.com/)
  - [Wiki oficial da API do IXC Provedor](https://wikiapiprovedor.ixcsoft.com.br/)
  - [Tutorial de como gerar um Token de API no IXC](https://wiki.ixcsoft.com.br/pt-br/API/como_gerar_um_token_para_integra%C3%A7%C3%B5es_API)
