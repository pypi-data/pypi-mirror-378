# coding: utf-8

"""
    CyPerf Application API

    CyPerf REST API

    The version of the OpenAPI document: 1.0.0
    Contact: support@keysight.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set, Union, GenericAlias, get_args
from typing_extensions import Self
from pydantic import Field, PrivateAttr

class TcpProfile(BaseModel):
    """
    TcpProfile
    """ # noqa: E501
    close_with_reset: Optional[StrictBool] = Field(default=None, alias="CloseWithReset")
    defer_accept: Optional[StrictBool] = Field(default=None, alias="DeferAccept")
    ecn_enabled: Optional[StrictBool] = Field(default=None, alias="EcnEnabled")
    max_rto: StrictInt = Field(alias="MaxRto")
    max_src_port: StrictInt = Field(alias="MaxSrcPort")
    min_rto: StrictInt = Field(alias="MinRto")
    min_src_port: StrictInt = Field(alias="MinSrcPort")
    ping_pong: Optional[StrictBool] = Field(default=None, alias="PingPong")
    pmtu_disc_disabled: Optional[StrictBool] = Field(default=None, alias="PmtuDiscDisabled")
    recycle_tw_enabled: Optional[StrictBool] = Field(default=None, alias="RecycleTwEnabled")
    reordering: Optional[StrictBool] = Field(default=None, alias="Reordering")
    reuse_tw_enabled: Optional[StrictBool] = Field(default=None, alias="ReuseTwEnabled")
    rx_buffer: StrictInt = Field(alias="RxBuffer")
    sack_enabled: Optional[StrictBool] = Field(default=None, alias="SackEnabled")
    sock_group: Optional[StrictStr] = Field(default=None, alias="SockGroup")
    timestamp_hdr_enabled: Optional[StrictBool] = Field(default=None, alias="TimestampHdrEnabled")
    tx_buffer: StrictInt = Field(alias="TxBuffer")
    user_mss: Optional[StrictInt] = Field(default=None, alias="UserMss")
    wscale_enabled: Optional[StrictBool] = Field(default=None, alias="WscaleEnabled")
    __properties: ClassVar[List[str]] = ["CloseWithReset", "DeferAccept", "EcnEnabled", "MaxRto", "MaxSrcPort", "MinRto", "MinSrcPort", "PingPong", "PmtuDiscDisabled", "RecycleTwEnabled", "Reordering", "ReuseTwEnabled", "RxBuffer", "SackEnabled", "SockGroup", "TimestampHdrEnabled", "TxBuffer", "UserMss", "WscaleEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TcpProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TcpProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            _obj = cls.model_validate(obj)
#            _obj.api_client = client
            return _obj

        _obj = cls.model_validate({
            "CloseWithReset": obj.get("CloseWithReset"),
                        "DeferAccept": obj.get("DeferAccept"),
                        "EcnEnabled": obj.get("EcnEnabled"),
                        "MaxRto": obj.get("MaxRto"),
                        "MaxSrcPort": obj.get("MaxSrcPort"),
                        "MinRto": obj.get("MinRto"),
                        "MinSrcPort": obj.get("MinSrcPort"),
                        "PingPong": obj.get("PingPong"),
                        "PmtuDiscDisabled": obj.get("PmtuDiscDisabled"),
                        "RecycleTwEnabled": obj.get("RecycleTwEnabled"),
                        "Reordering": obj.get("Reordering"),
                        "ReuseTwEnabled": obj.get("ReuseTwEnabled"),
                        "RxBuffer": obj.get("RxBuffer"),
                        "SackEnabled": obj.get("SackEnabled"),
                        "SockGroup": obj.get("SockGroup"),
                        "TimestampHdrEnabled": obj.get("TimestampHdrEnabled"),
                        "TxBuffer": obj.get("TxBuffer"),
                        "UserMss": obj.get("UserMss"),
                        "WscaleEnabled": obj.get("WscaleEnabled")
            ,
            "links": obj.get("links")
        })
        return _obj


