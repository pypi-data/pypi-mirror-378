# coding: utf-8

"""
    CyPerf Application API

    CyPerf REST API

    The version of the OpenAPI document: 1.0.0
    Contact: support@keysight.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cyperf.models.type_info_metadata import TypeInfoMetadata

class TestTypeInfoMetadata(unittest.TestCase):
    """TypeInfoMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TypeInfoMetadata:
        """Test TypeInfoMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TypeInfoMetadata`
        """
        model = TypeInfoMetadata()
        if include_optional:
            return TypeInfoMetadata(
                array_v2 = cyperf.models.type_array_v2_metadata.TypeArrayV2Metadata(
                    elements = [
                        cyperf.models.array_v2_element_metadata.ArrayV2ElementMetadata(
                            id = '', 
                            type = '', )
                        ], ),
                int = cyperf.models.type_int_metadata.TypeIntMetadata(
                    max_value = 56, 
                    min_value = 56, ),
                media = cyperf.models.type_media_metadata.TypeMediaMetadata(
                    track_id = '', 
                    track_type = '', ),
                string = cyperf.models.type_string_metadata.TypeStringMetadata(
                    charset = '', 
                    max_length = 56, 
                    min_length = 56, )
            )
        else:
            return TypeInfoMetadata(
        )
        """

    def testTypeInfoMetadata(self):
        """Test TypeInfoMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
