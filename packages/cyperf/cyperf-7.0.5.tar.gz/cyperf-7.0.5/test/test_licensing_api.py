# coding: utf-8

"""
    CyPerf Application API

    CyPerf REST API

    The version of the OpenAPI document: 1.0.0
    Contact: support@keysight.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cyperf.api.licensing_api import LicensingApi


class TestLicensingApi(unittest.TestCase):
    """LicensingApi unit test stubs"""

    def setUp(self) -> None:
        self.api = LicensingApi()

    def tearDown(self) -> None:
        pass

    def test_activate_licenses(self) -> None:
        """Test case for activate_licenses

        Performs an online request to KSM and activates the requested licenses.
        """
        pass

    def test_deactivate_licenses(self) -> None:
        """Test case for deactivate_licenses

        Performs an online request to KSM to deactivate the requested licenses.
        """
        pass

    def test_generate_offline_request(self) -> None:
        """Test case for generate_offline_request

        Generates an offline request that can be used on the offline licensing portal.
        """
        pass

    def test_get_activation_code_info(self) -> None:
        """Test case for get_activation_code_info

        Retrieves the activation code info from KSM.
        """
        pass

    def test_get_activation_code_info_list(self) -> None:
        """Test case for get_activation_code_info_list

        Retrieves the activation code info list from KSM.
        """
        pass

    def test_get_async_operation_result(self) -> None:
        """Test case for get_async_operation_result

        Returns the result of async operation.
        """
        pass

    def test_get_async_operation_status(self) -> None:
        """Test case for get_async_operation_status

        Returns the status of an ongoing async operation.
        """
        pass

    def test_get_counted_feature_stats(self) -> None:
        """Test case for get_counted_feature_stats

        Retrieves the counted feature stats.
        """
        pass

    def test_get_entitlement_code_info(self) -> None:
        """Test case for get_entitlement_code_info

        Retrieves the activations codes of the supplied entitlement code from KSM.
        """
        pass

    def test_get_hostid(self) -> None:
        """Test case for get_hostid

        Retrieves the host ID of the license server.
        """
        pass

    def test_get_installed_licenses(self) -> None:
        """Test case for get_installed_licenses

        Returns the installed licenses.
        """
        pass

    def test_get_license(self) -> None:
        """Test case for get_license

        Returns the requested license.
        """
        pass

    def test_get_license_async_operation_result(self) -> None:
        """Test case for get_license_async_operation_result

        Returns the result of async operation.
        """
        pass

    def test_get_license_async_operation_status(self) -> None:
        """Test case for get_license_async_operation_status

        Returns the status of an ongoing async operation. 
        """
        pass

    def test_import_offline_license(self) -> None:
        """Test case for import_offline_license

        Installs the offline license.
        """
        pass

    def test_remove_reservation(self) -> None:
        """Test case for remove_reservation

        Remove previously reserved features, thus making them available for checkout by other users. 
        """
        pass

    def test_sync_licenses(self) -> None:
        """Test case for sync_licenses

        Synchronize local licenses with KSM.
        """
        pass

    def test_test_backend_connectivity(self) -> None:
        """Test case for test_backend_connectivity

        Tests connection of the license server with KSM.
        """
        pass

    def test_update_reservation(self) -> None:
        """Test case for update_reservation

        Retain over a period of time specific counts of installed features, that can be consumed only by current user. 
        """
        pass


if __name__ == '__main__':
    unittest.main()
