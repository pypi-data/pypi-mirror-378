# coding: utf-8

"""
    CyPerf Application API

    CyPerf REST API

    The version of the OpenAPI document: 1.0.0
    Contact: support@keysight.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cyperf.models.ip_sec_range import IPSecRange

class TestIPSecRange(unittest.TestCase):
    """IPSecRange unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IPSecRange:
        """Test IPSecRange
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IPSecRange`
        """
        model = IPSecRange()
        if include_optional:
            return IPSecRange(
                var_auth_settings = cyperf.models.authentication_settings.AuthenticationSettings(
                    auth_method = 'PRE-SHARED-KEY', 
                    certificate_file = null, 
                    key_file = null, 
                    key_file_password = '', 
                    shared_key = '', 
                    links = [
                        cyperf.models.api_link.APILink(
                            content_type = '', 
                            href = '', 
                            method = '', 
                            name = '', 
                            references_count = 56, 
                            rel = '', 
                            type = '', )
                        ], ),
                ike_phase1_config = cyperf.models.p1_config.P1Config(
                    dh_group = null, 
                    enc_algorithm = null, 
                    hash_algorithm = null, 
                    initial_contact = True, 
                    lifetime = 56, 
                    prf_algorithm = null, ),
                ike_phase2_config = cyperf.models.p2_config.P2Config(
                    enc_algorithm = null, 
                    hash_algorithm = null, 
                    lifetime = 56, 
                    nat_enabled = True, 
                    pfs_enabled = True, 
                    pfs_group = null, ),
                ip_sec_range_name = 'YBuLd',
                multi_p2_over_p1 = True,
                protected_sub_config = cyperf.models.protected_subnet_config.ProtectedSubnetConfig(
                    automatic = True, 
                    hosts_increment = '::02:84:9:0cc0:F:CCf', 
                    hosts_prefix = 56, 
                    increment = '::02:84:9:0cc0:F:CCf', 
                    prefix = 56, 
                    single_protected_subnet = True, 
                    start = '::02:84:9:0cc0:F:CCf', ),
                public_peer = '02::84',
                public_peer_increment = '02::84',
                remote_access = cyperf.models.remote_access.RemoteAccess(
                    mode_cfg_increment = '::02:84:9:0cc0:F:CCf', 
                    mode_cfg_start = '::02:84:9:0cc0:F:CCf', 
                    mode_cfg_suffix = 56, ),
                remote_sub_config = cyperf.models.remote_subnet_config.RemoteSubnetConfig(
                    automatic = True, 
                    hosts_increment = '::02:84:9:0cc0:F:CCf', 
                    hosts_prefix = 56, 
                    increment = '::02:84:9:0cc0:F:CCf', 
                    prefix = 56, 
                    single_remote_subnet = True, 
                    start = '::02:84:9:0cc0:F:CCf', ),
                test_scenario = 'REMOTE-ACCESS',
                timers = cyperf.models.timers.Timers(
                    dpd_enabled = True, 
                    dpd_idle_period = 56, 
                    dpd_timeout = 56, ),
                tunnel_count_per_outer_ip = 56,
                id = '',
                links = [
                    cyperf.models.api_link.APILink(
                        content_type = '', 
                        href = '', 
                        method = '', 
                        name = '', 
                        references_count = 56, 
                        rel = '', 
                        type = '', )
                    ]
            )
        else:
            return IPSecRange(
                ip_sec_range_name = 'YBuLd',
                public_peer = '02::84',
                public_peer_increment = '02::84',
                test_scenario = 'REMOTE-ACCESS',
                tunnel_count_per_outer_ip = 56,
                id = '',
        )
        """

    def testIPSecRange(self):
        """Test IPSecRange"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
