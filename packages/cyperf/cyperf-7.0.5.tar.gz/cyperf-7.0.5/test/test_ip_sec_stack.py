# coding: utf-8

"""
    CyPerf Application API

    CyPerf REST API

    The version of the OpenAPI document: 1.0.0
    Contact: support@keysight.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from cyperf.models.ip_sec_stack import IPSecStack

class TestIPSecStack(unittest.TestCase):
    """IPSecStack unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IPSecStack:
        """Test IPSecStack
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IPSecStack`
        """
        model = IPSecStack()
        if include_optional:
            return IPSecStack(
                ca_certificate_file = cyperf.models.params.Params(
                    array_element_type = '', 
                    array_elements = [
                        {
                            'key' : ''
                            }
                        ], 
                    category = '', 
                    category_index = 56, 
                    deprecated_previous_source = '', 
                    description = '', 
                    dictionary_value = {
                        'key' : ''
                        }, 
                    enum = cyperf.models.params_enum.Params_Enum(
                        choices = [
                            cyperf.models.choice.Choice(
                                description = '', 
                                hidden = True, 
                                name = '', 
                                value = '', )
                            ], ), 
                    file_value = null, 
                    flow_identifier = True, 
                    is_deprecated = True, 
                    is_modified = True, 
                    media_files = [
                        cyperf.models.media_file.MediaFile(
                            file_value = null, 
                            media_tracks = [
                                cyperf.models.media_track.MediaTrack(
                                    bitrate = 56, 
                                    bitrate_kbps = 56, 
                                    codec = '', 
                                    codec_description = '', 
                                    track_id = '', 
                                    track_type = null, 
                                    id = '', )
                                ], 
                            id = '', 
                            links = [
                                cyperf.models.api_link.APILink(
                                    content_type = '', 
                                    href = '', 
                                    method = '', 
                                    name = '', 
                                    references_count = 56, 
                                    rel = '', 
                                    type = '', )
                                ], )
                        ], 
                    metadata = cyperf.models.param_metadata.ParamMetadata(
                        type_info = cyperf.models.param_metadata_type_info.ParamMetadata_TypeInfo(
                            array_v2 = cyperf.models.param_metadata_type_info_array_v2.ParamMetadata_TypeInfo_arrayV2(
                                elements = [
                                    cyperf.models.param_metadata_type_info_array_v2_elements_inner.ParamMetadata_TypeInfo_arrayV2_elements_inner(
                                        type = '', )
                                    ], ), 
                            int = cyperf.models.param_metadata_type_info_int.ParamMetadata_TypeInfo_int(
                                max_value = 56, 
                                min_value = 56, ), 
                            media = cyperf.models.param_metadata_type_info_media.ParamMetadata_TypeInfo_media(
                                track_id = '', 
                                track_type = '', ), 
                            string = cyperf.models.param_metadata_type_info_string.ParamMetadata_TypeInfo_string(
                                charset = '', 
                                max_length = 56, 
                                min_length = 56, ), ), ), 
                    name = '', 
                    param_id = '', 
                    readonly = True, 
                    source = '', 
                    supported_sources = [
                        ''
                        ], 
                    type = '', 
                    value = '', 
                    file_upload = [
                        'YQ=='
                        ], 
                    id = , 
                    links = [
                        cyperf.models.api_link.APILink(
                            content_type = '', 
                            href = '', 
                            method = '', 
                            name = '', 
                            references_count = 56, 
                            rel = '', 
                            type = '', )
                        ], 
                    supports_dynamic_payload = True, 
                    upload_url = '', ),
                emulated_sub_config = cyperf.models.emulated_subnet_config.EmulatedSubnetConfig(
                    host_count_per_tunnel = 56, 
                    hosts_increment = '::02:84:9:0cc0:F:CCf', 
                    hosts_prefix = 56, 
                    increment = '::02:84:9:0cc0:F:CCf', 
                    prefix = 56, 
                    start = '::02:84:9:0cc0:F:CCf', 
                    total_host_count = '', 
                    network_tags = [
                        ''
                        ], ),
                enable_rekey = True,
                ip_sec_range = cyperf.models.ip_sec_range.IPSecRange(
                    auth_settings = null, 
                    ike_phase1_config = null, 
                    ike_phase2_config = null, 
                    ip_sec_range_name = 'YBuLd', 
                    multi_p2_over_p1 = True, 
                    protected_sub_config = null, 
                    public_peer = '02::84', 
                    public_peer_increment = '02::84', 
                    remote_access = null, 
                    remote_sub_config = null, 
                    test_scenario = 'REMOTE-ACCESS', 
                    timers = null, 
                    tunnel_count_per_outer_ip = 56, 
                    id = '', 
                    links = [
                        cyperf.models.api_link.APILink(
                            content_type = '', 
                            href = '', 
                            method = '', 
                            name = '', 
                            references_count = 56, 
                            rel = '', 
                            type = '', )
                        ], ),
                ip_sec_stack_name = 'YBuLd',
                local_sub_config = cyperf.models.local_subnet_config.LocalSubnetConfig(
                    host_count_per_tunnel = 56, 
                    hosts_increment = '::02:84:9:0cc0:F:CCf', 
                    hosts_prefix = 56, 
                    increment = '::02:84:9:0cc0:F:CCf', 
                    prefix = 56, 
                    start = '::02:84:9:0cc0:F:CCf', 
                    total_host_count = '', 
                    network_tags = [
                        ''
                        ], ),
                log_keys = True,
                max_initiation_rate = 56,
                max_pending = 56,
                outer_ip_range = cyperf.models.ip_range.IPRange(
                    automatic_ip_type = null, 
                    count = 56, 
                    gw_auto = True, 
                    gw_start = '::02:84:9:0cc0:F:CCf', 
                    host_count = 56, 
                    inner_vlan_range = null, 
                    ip_auto = True, 
                    ip_incr = '::02:84:9:0cc0:F:CCf', 
                    ip_range_name = 'YBuLd', 
                    ip_start = '::02:84:9:0cc0:F:CCf', 
                    ip_ver = null, 
                    is_emulated_router = True, 
                    mss = 56, 
                    mss_auto = True, 
                    net_mask = 56, 
                    net_mask_auto = True, 
                    id = '', 
                    links = [
                        cyperf.models.api_link.APILink(
                            content_type = '', 
                            href = '', 
                            method = '', 
                            name = '', 
                            references_count = 56, 
                            rel = '', 
                            type = '', )
                        ], 
                    max_count_per_agent = 56, 
                    network_tags = [
                        ''
                        ], ),
                rekey_margin = 56,
                rekey_retry_count = 56,
                retransmission_timeout = 56,
                retry_count = 56,
                retry_interval = 56,
                retry_interval_increment = 56,
                setup_timeout = 56,
                stack_role = 'INITIATOR',
                id = '',
                links = [
                    cyperf.models.api_link.APILink(
                        content_type = '', 
                        href = '', 
                        method = '', 
                        name = '', 
                        references_count = 56, 
                        rel = '', 
                        type = '', )
                    ]
            )
        else:
            return IPSecStack(
                enable_rekey = True,
                ip_sec_stack_name = 'YBuLd',
                log_keys = True,
                max_initiation_rate = 56,
                max_pending = 56,
                rekey_margin = 56,
                rekey_retry_count = 56,
                retransmission_timeout = 56,
                retry_count = 56,
                setup_timeout = 56,
                stack_role = 'INITIATOR',
                id = '',
        )
        """

    def testIPSecStack(self):
        """Test IPSecStack"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
