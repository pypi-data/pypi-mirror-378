# coding: utf-8

"""
    CyPerf Application API

    CyPerf REST API

    The version of the OpenAPI document: 1.0.0
    Contact: support@keysight.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set, Union, GenericAlias, get_args
from typing_extensions import Self
from pydantic import Field, PrivateAttr

class Port(BaseModel):
    """
    Port
    """ # noqa: E501
    disabled: Optional[StrictBool] = Field(default=None, description="Whether the port is disabled or not")
    id: Optional[StrictStr] = Field(default=None, description="The port's unique identifier")
    link: Optional[StrictStr] = Field(default=None, description="The link state of the port: up or down")
    name: Optional[StrictStr] = Field(default=None, description="A user-friendly display name for the port")
    reserved_by: Optional[StrictStr] = Field(default=None, description="The owner of the port", alias="reservedBy")
    speed: Optional[StrictStr] = Field(default=None, description="The port's speed")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the port: ready or not ready")
    traffic_status: Optional[StrictStr] = Field(default=None, description="The traffic status of the port", alias="trafficStatus")
    __properties: ClassVar[List[str]] = ["disabled", "id", "link", "name", "reservedBy", "speed", "status", "trafficStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Port from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Port from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            _obj = cls.model_validate(obj)
#            _obj.api_client = client
            return _obj

        _obj = cls.model_validate({
            "disabled": obj.get("disabled"),
                        "id": obj.get("id"),
                        "link": obj.get("link"),
                        "name": obj.get("name"),
                        "reservedBy": obj.get("reservedBy"),
                        "speed": obj.get("speed"),
                        "status": obj.get("status"),
                        "trafficStatus": obj.get("trafficStatus")
            ,
            "links": obj.get("links")
        })
        return _obj


