---
variables:
  GITLAB_CI_IMAGE_ALPINE: "alpine:3.16.2"
  GITLAB_CI_IMAGE_EPHEMERISTA: "registry.gitlab.com/librespacefoundation/ephemerista/docker-ephemerista"

stages:
  - static
  - test
  - build
  - deploy

default:
  image: ${GITLAB_CI_IMAGE_EPHEMERISTA}

.uv:
  variables:
    UV_CACHE_DIR: .uv-cache
  cache:
    - key:
        files:
          - uv.lock
      paths:
        - $UV_CACHE_DIR

sign_off:
  stage: static
  needs: []
  image: ${GITLAB_CI_IMAGE_ALPINE}
  before_script:
    - apk add --no-cache git
  script: >-
    git log
    --grep "^Signed-off-by: .\+<.\+\(@\| at \).\+\(\.\| dot \).\+>$"
    --invert-grep
    --format="Detected commit '%h' with missing or bad sign-off! Please read 'CONTRIBUTING.md'."
    --exit-code

lint:
  stage: static
  needs: []
  script:
    - just lint
    - uv cache prune --ci

test:
  extends: .uv
  stage: test
  needs: []
  script:
    - just build
    - just test-ci --junitxml=junit.xml
    - uv cache prune --ci
  artifacts:
    reports:
      junit: junit.xml

coverage:
  extends: .uv
  stage: test
  needs: []
  script:
    - just build
    - just cov-ci
    - uv cache prune --ci
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov

build:
  extends: .uv
  stage: build
  needs:
    - test
  script:
    - just build
  artifacts:
    paths:
      - dist

pages:
  extends: .uv
  stage: deploy
  needs:
    - coverage
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - just docs-ci
    - cp -r htmlcov public/coverage
    - uv cache prune --ci
  artifacts:
    paths:
      - public

release:
  extends: .uv
  stage: deploy
  needs:
    - build
  environment: release
  rules:
    - if: $CI_COMMIT_TAG
  id_tokens:
    PYPI_ID_TOKEN:
      aud: pypi
  script:
    # Retrieve the OIDC token from GitLab CI/CD, and exchange it for a PyPI API token
    - oidc_token=$(uv run --with id python -m id PYPI)
    - resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\":\"${oidc_token}\"}")
    - api_token=$(jq --raw-output '.token' <<< "${resp}")

    # Upload to PyPI authenticating via the newly-minted token
    - uv publish --token "${api_token}"
    - uv cache prune --ci

.windows:
  tags:
    - saas-windows-medium-amd64
  before_script:
    - powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
    - $env:Path = "C:\Git\usr\bin;C:\Users\gitlab_runner\.local\bin;$env:Path"
    - uv tool install rust-just 

.macos:
  tags:
    - saas-macos-medium-m1
  image: macos-14-xcode-15
  before_script:
    - brew update
    - brew install just uv

.test-release:
  stage: deploy
  needs:
    - release
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - just test-release

test-release-macos:
  extends:
    - .macos
    - .test-release

test-release-windows:
  extends:
    - .windows
    - .test-release

test-release-linux:
  extends:
    - .test-release
  
