# coding: utf-8

"""
    CUA API

    Documentation of API endpoints of CUA

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from robotnikai.models.paginated_integration_list import PaginatedIntegrationList

class TestPaginatedIntegrationList(unittest.TestCase):
    """PaginatedIntegrationList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaginatedIntegrationList:
        """Test PaginatedIntegrationList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaginatedIntegrationList`
        """
        model = PaginatedIntegrationList()
        if include_optional:
            return PaginatedIntegrationList(
                count = 123,
                next = 'http://api.example.org/accounts/?page=4',
                previous = 'http://api.example.org/accounts/?page=2',
                results = [
                    robotnikai.models.integration.Integration(
                        integration_id = '', 
                        type = null, 
                        name = '', 
                        tags = [
                            ''
                            ], 
                        version = '', 
                        icon = '', 
                        description = '', 
                        account_fields = null, 
                        dependencies = null, 
                        configuration_form = null, 
                        activated = True, 
                        owner = '', 
                        connected_accounts = null, 
                        client_id = '', 
                        secret = '', 
                        access_token_url = '', 
                        authorize_url = '', 
                        identity_url = '', 
                        scope = '', 
                        basic_auth = True, 
                        accept_header = '', 
                        fetch_userinfo = '', 
                        api_key = '', 
                        api_auth_header_name = '', 
                        api_auth_header_key = '', 
                        api_base_url = '', 
                        account = null, )
                    ]
            )
        else:
            return PaginatedIntegrationList(
                count = 123,
                results = [
                    robotnikai.models.integration.Integration(
                        integration_id = '', 
                        type = null, 
                        name = '', 
                        tags = [
                            ''
                            ], 
                        version = '', 
                        icon = '', 
                        description = '', 
                        account_fields = null, 
                        dependencies = null, 
                        configuration_form = null, 
                        activated = True, 
                        owner = '', 
                        connected_accounts = null, 
                        client_id = '', 
                        secret = '', 
                        access_token_url = '', 
                        authorize_url = '', 
                        identity_url = '', 
                        scope = '', 
                        basic_auth = True, 
                        accept_header = '', 
                        fetch_userinfo = '', 
                        api_key = '', 
                        api_auth_header_name = '', 
                        api_auth_header_key = '', 
                        api_base_url = '', 
                        account = null, )
                    ],
        )
        """

    def testPaginatedIntegrationList(self):
        """Test PaginatedIntegrationList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
