# coding: utf-8

"""
    CUA API

    Documentation of API endpoints of CUA

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from robotnikai.models.graph_ql_request import GraphQLRequest

class TestGraphQLRequest(unittest.TestCase):
    """GraphQLRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GraphQLRequest:
        """Test GraphQLRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GraphQLRequest`
        """
        model = GraphQLRequest()
        if include_optional:
            return GraphQLRequest(
                query = 'query {
  listCities(page: 1, limit: 10) {
    items {
      id
      name
      area
    }
    paginationInfo {
      page
      totalItems
    }
  }
}
',
                variables = robotnikai.models.graph_ql_request_variables.GraphQLRequest_variables(
                    app = '3', 
                    table = 'cities', 
                    criteria = {"area":{"$gte":100}}, ),
                operation_name = ''
            )
        else:
            return GraphQLRequest(
                query = 'query {
  listCities(page: 1, limit: 10) {
    items {
      id
      name
      area
    }
    paginationInfo {
      page
      totalItems
    }
  }
}
',
                variables = robotnikai.models.graph_ql_request_variables.GraphQLRequest_variables(
                    app = '3', 
                    table = 'cities', 
                    criteria = {"area":{"$gte":100}}, ),
        )
        """

    def testGraphQLRequest(self):
        """Test GraphQLRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
