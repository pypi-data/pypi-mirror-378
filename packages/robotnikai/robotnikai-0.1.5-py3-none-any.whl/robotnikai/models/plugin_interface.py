# coding: utf-8

"""
    RobotnikAI API

    Documentation of API endpoints of RobotnikAI for SDK

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PluginInterface(BaseModel):
    """
    PluginInterface
    """ # noqa: E501
    id: Optional[StrictInt] = None
    organization: Optional[StrictInt] = None
    app: StrictInt
    integrations: Optional[StrictStr] = None
    plugins: Optional[StrictStr] = None
    title: Annotated[str, Field(strict=True, max_length=70)]
    namespace: Annotated[str, Field(strict=True, max_length=70)]
    description: Optional[StrictStr] = None
    capabilities: Optional[List[Annotated[str, Field(strict=True, max_length=70)]]] = None
    is_visible: Optional[StrictBool] = None
    json_schema: Optional[Any] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    tables: Optional[List[StrictInt]] = None
    __properties: ClassVar[List[str]] = ["id", "organization", "app", "integrations", "plugins", "title", "namespace", "description", "capabilities", "is_visible", "json_schema", "created_at", "updated_at", "tables"]

    @field_validator('namespace')
    def namespace_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[-a-zA-Z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[-a-zA-Z0-9_]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PluginInterface from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "organization",
            "integrations",
            "plugins",
            "created_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if json_schema (nullable) is None
        # and model_fields_set contains the field
        if self.json_schema is None and "json_schema" in self.model_fields_set:
            _dict['json_schema'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PluginInterface from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "organization": obj.get("organization"),
            "app": obj.get("app"),
            "integrations": obj.get("integrations"),
            "plugins": obj.get("plugins"),
            "title": obj.get("title"),
            "namespace": obj.get("namespace"),
            "description": obj.get("description"),
            "capabilities": obj.get("capabilities"),
            "is_visible": obj.get("is_visible"),
            "json_schema": obj.get("json_schema"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "tables": obj.get("tables")
        })
        return _obj


