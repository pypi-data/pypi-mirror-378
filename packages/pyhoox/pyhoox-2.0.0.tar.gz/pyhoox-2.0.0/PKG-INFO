Metadata-Version: 2.1
Name: pyhoox
Version: 2.0.0
Summary: Advanced Python Hook System - Modular, type-safe, and feature-rich event management library
Home-page: https://github.com/techatlasdev/pyhoox
License: MIT
Keywords: hooks,events,callbacks,async,middleware,plugins
Author: techatlasdev
Author-email: srgoqui@gmail.com
Requires-Python: >=3.9,<4.0
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Logging
Classifier: Typing :: Typed
Project-URL: Repository, https://github.com/techatlasdev/pyhoox
Description-Content-Type: text/markdown

# üé£ PyHook

[![Python Version](https://img.shields.io/badge/python-3.9+-blue.svg)](https://python.org)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Version](https://img.shields.io/badge/version-2.0.0-green.svg)](https://github.com/techatlasdev/pyhook)
[![Type Hints](https://img.shields.io/badge/type--hints-‚úì-brightgreen.svg)](https://mypy.readthedocs.io/)

> **Advanced Python Hook System** - Modular, type-safe, and feature-rich event management library

PyHook es una librer√≠a de hooks/eventos moderna y potente que permite crear sistemas extensibles y modulares en Python con soporte completo para programaci√≥n as√≠ncrona, validaci√≥n de datos, middlewares, persistencia y mucho m√°s.

## ‚ú® Caracter√≠sticas Principales

- üöÄ **Hooks S√≠ncronos y As√≠ncronos** - Soporte completo para async/await
- üéØ **Sistema de Prioridades** - Controla el orden de ejecuci√≥n de tus hooks
- üîß **Decoradores Potentes** - `@hook`, `@before`, `@after`, `@hookable` y m√°s
- üõ°Ô∏è **Validaci√≥n Robusta** - Schemas JSON, validadores de tipos y personalizados
- üèóÔ∏è **Middlewares y Filtros** - Transforma datos antes y despu√©s de la ejecuci√≥n
- üì¶ **Namespaces/Contextos** - Organiza hooks en espacios aislados
- üíæ **Persistencia** - M√∫ltiples backends: JSON, SQLite, Pickle
- üìä **Monitoreo y Stats** - Estad√≠sticas detalladas y debugging
- ‚ö° **Estrategias de Ejecuci√≥n** - Secuencial, paralelo, fail-fast, ignore-errors
- üé≠ **Hooks Condicionales** - Ejecuci√≥n basada en condiciones
- üîÑ **Hooks de Una Vez** - Auto-eliminaci√≥n despu√©s de ejecutarse
- üè∑Ô∏è **Sistema de Tags** - Organizaci√≥n y filtrado avanzado

## üöÄ Instalaci√≥n

```bash
pip install pyhook
```

O usando Poetry:
```bash
poetry add pyhook
```

## ‚ö° Quick Start

### Uso B√°sico

```python
import pyhook

# Registrar un hook
def mi_callback(data):
    print(f"Datos recibidos: {data}")

pyhook.use("mi_evento", mi_callback)

# Disparar el hook
pyhook.trigger("mi_evento", "¬°Hola PyHook!")
```

### Con Decoradores

```python
import pyhook

@pyhook.hook("usuario_login")
def validar_usuario(usuario_id):
    print(f"Validando usuario: {usuario_id}")

@pyhook.before("procesar_datos")
def antes_procesar(datos):
    print(f"Preparando datos: {datos}")

@pyhook.after("procesar_datos")
def despues_procesar(resultado):
    print(f"Datos procesados: {resultado}")

# Los hooks se ejecutan autom√°ticamente
pyhook.trigger("usuario_login", 123)
```

### Hooks As√≠ncronos

```python
import asyncio
import pyhook

@pyhook.hook("evento_async")
async def procesar_async(data):
    await asyncio.sleep(0.1)  # Simular trabajo async
    print(f"Procesado async: {data}")

async def main():
    await pyhook.async_trigger("evento_async", "datos")

asyncio.run(main())
```

## üéØ Ejemplos Avanzados

### Sistema de Prioridades

```python
import pyhook
from pyhook import HookPriority

# Los hooks se ejecutan por orden de prioridad
pyhook.use("proceso", cleanup, priority=HookPriority.BACKGROUND)      # √öltimo
pyhook.use("proceso", validar, priority=HookPriority.CRITICAL)        # Primero  
pyhook.use("proceso", procesar, priority=HookPriority.NORMAL)         # Medio

pyhook.trigger("proceso", datos)  # Ejecuta: validar ‚Üí procesar ‚Üí cleanup
```

### Validaci√≥n de Datos

```python
import pyhook

# Validaci√≥n con schema JSON-like
user_schema = {
    "type": "object",
    "required": ["name", "age"],
    "properties": {
        "name": {"type": "string", "minLength": 2},
        "age": {"type": "integer", "minimum": 0, "maximum": 120}
    }
}

@pyhook.hook("registro_usuario", validator=user_schema)
def procesar_usuario(user_data):
    print(f"Usuario v√°lido: {user_data}")

# ‚úÖ Funciona
pyhook.trigger("registro_usuario", {"name": "Ana", "age": 25})

# ‚ùå Falla validaci√≥n  
pyhook.trigger("registro_usuario", {"name": "X"})  # Falta age
```

### Namespaces y Contextos

```python
import pyhook

# Hooks globales
pyhook.use("evento_global", lambda x: print(f"Global: {x}"))

# Hooks en namespace espec√≠fico
with pyhook.namespace("database"):
    pyhook.use("create", lambda data: print(f"DB Create: {data}"))
    pyhook.use("update", lambda data: print(f"DB Update: {data}"))
    
    # Solo ejecuta dentro del namespace
    pyhook.trigger("create", {"user": "Ana"})

# El evento global sigue funcionando
pyhook.trigger("evento_global", "funciona en todas partes")
```

### Hooks Condicionales y Filtros

```python
import pyhook

# Solo ejecuta si el n√∫mero es mayor a 10
@pyhook.conditional_hook(lambda x: x > 10)
def procesar_numero_grande(numero):
    print(f"N√∫mero grande: {numero}")

# Hook con filtro que transforma los datos
pyhook.use("multiplicar", 
           lambda x: print(f"Resultado: {x}"),
           filter=lambda x: x * 2)

pyhook.trigger("multiplicar", 5)      # Imprime: "Resultado: 10"
pyhook.trigger("procesar_numero_grande", 15)  # ‚úÖ Se ejecuta
pyhook.trigger("procesar_numero_grande", 5)   # ‚ùå No se ejecuta
```

### Estrategias de Ejecuci√≥n

```python
import pyhook
from pyhook import ExecutionStrategy

# Registrar m√∫ltiples processors
pyhook.use("datos", processor_a)
pyhook.use("datos", processor_b) 
pyhook.use("datos", processor_c)

# Ejecuci√≥n secuencial (por defecto)
pyhook.trigger("datos", "test")

# Ejecuci√≥n en paralelo
pyhook.trigger("datos", "test", _strategy=ExecutionStrategy.PARALLEL)

# Parar en el primer error
pyhook.trigger("datos", "test", _strategy=ExecutionStrategy.FAIL_FAST)

# Ignorar errores
pyhook.trigger("datos", "test", _strategy=ExecutionStrategy.IGNORE_ERRORS)
```

## üìä Monitoreo y Debugging

```python
import pyhook

# Habilitar modo debug
pyhook.enable_debug()

# Registrar algunos hooks
pyhook.use("test", lambda x: print(f"Test: {x}"))
pyhook.trigger("test", "datos")

# Ver estad√≠sticas
pyhook.print_stats()  # Muestra estad√≠sticas de todos los hooks
pyhook.print_stats("test")  # Estad√≠sticas de un hook espec√≠fico

# Acceso program√°tico a estad√≠sticas
instance = pyhook.get_global_instance()
stats = instance.get_stats("test")
print(f"Total llamadas: {stats.total_calls}")
```

## üíæ Persistencia

```python
import pyhook
from pyhook.features.persistence import JsonPersistenceBackend

# Configurar persistencia
backend = JsonPersistenceBackend("./hooks.json")
instance = pyhook.get_global_instance()
instance.enable_persistence(backend, auto_save=True, interval=60.0)

# Los hooks se guardan autom√°ticamente
pyhook.use("evento_persistente", lambda x: print(x))

# Guardar manualmente
instance.save_hooks()
```

## üé≠ Ejemplo Completo: Sistema E-commerce

```python
import asyncio
import pyhook
from pyhook import HookPriority

class Order:
    def __init__(self, order_id, user_id, total):
        self.order_id = order_id
        self.user_id = user_id
        self.total = total

@pyhook.hook("order_validation", priority=HookPriority.CRITICAL)
def validate_order(order):
    if order.total <= 0:
        raise ValueError("Total inv√°lido")
    print(f"‚úì Orden {order.order_id} validada")

@pyhook.hook("order_processing")
async def process_payment(order):
    print(f"üí≥ Procesando pago: ${order.total}")
    await asyncio.sleep(0.1)  # Simular API de pago
    print(f"‚úì Pago procesado")

@pyhook.hook("order_processing") 
def update_inventory(order):
    print(f"üì¶ Actualizando inventario para orden {order.order_id}")

@pyhook.conditional_hook(lambda order: order.total > 100)
def vip_processing(order):
    print(f"üåü Orden VIP: {order.order_id}")

@pyhook.hookable(
    before_hooks=["order_validation"],
    after_hooks=["order_completion"]
)
async def process_order(order):
    print(f"üõçÔ∏è Procesando orden {order.order_id}")
    
    # Procesamiento con ejecuci√≥n paralela
    await pyhook.async_trigger("order_processing", order, 
                              _strategy=ExecutionStrategy.PARALLEL)
    
    return order

# Usar el sistema
async def main():
    order = Order("ORD-001", "user123", 299.99)
    
    processed_order = await process_order(order)
    pyhook.trigger("vip_processing", order)  # Se ejecuta porque total > 100
    
    # Ver estad√≠sticas
    pyhook.print_stats()

asyncio.run(main())
```

## üß™ Ejecutar Tests de Demostraci√≥n

El proyecto incluye 10 tests completos que demuestran todas las funcionalidades:

```bash
# Ejecutar test espec√≠fico
python -m tests.test1  # Hook b√°sico
python -m tests.test2  # Sistema de prioridades  
python -m tests.test3_async  # Hooks as√≠ncronos
python -m tests.test4_validation  # Validaci√≥n
python -m tests.test5_decorators  # Decoradores
python -m tests.test6_namespaces  # Namespaces
python -m tests.test7_monitoring  # Monitoreo
python -m tests.test8_strategies  # Estrategias de ejecuci√≥n
python -m tests.test9_persistence  # Persistencia
python -m tests.test10_complete_demo  # Demo completo

# Ejecutar todos los tests
python run_all_tests.py
```

## üìö API Reference

### Funciones Principales

- `use(name, callback, **options)` - Registrar hook
- `use_once(name, callback, **options)` - Hook de una sola ejecuci√≥n
- `remove(name, callback=None)` - Eliminar hook(s)
- `trigger(name, *args, **kwargs)` - Disparar hooks s√≠ncronos
- `async_trigger(name, *args, **kwargs)` - Disparar hooks as√≠ncronos
- `trigger_with_return(name, *args, **kwargs)` - Obtener valores de retorno
- `list_hooks(name=None)` - Listar hooks registrados
- `clear_hooks(name=None)` - Limpiar hooks

### Decoradores

- `@hook(name, **options)` - Decorador b√°sico de hook
- `@before(hook_name)` - Ejecutar antes de un evento
- `@after(hook_name)` - Ejecutar despu√©s de un evento
- `@around(hook_name)` - Ejecutar antes y despu√©s
- `@hookable(**options)` - Hacer funci√≥n "hookeable"
- `@conditional_hook(condition)` - Hook condicional
- `@once_hook(name)` - Hook de una vez
- `@priority_hook(name, priority)` - Hook con prioridad

### Opciones de Configuraci√≥n

- `priority`: `HookPriority.CRITICAL`, `HIGH`, `NORMAL`, `LOW`, `BACKGROUND`
- `once`: `bool` - Hook de una sola ejecuci√≥n
- `condition`: `Callable` - Condici√≥n para ejecutar
- `filter`: `Callable` - Transformar datos antes de ejecutar
- `validator`: `Callable|dict|type` - Validar datos
- `tags`: `List[str]` - Tags para organizaci√≥n

## ü§ù Contribuir

1. Fork el repositorio
2. Crea una rama para tu feature (`git checkout -b feature/amazing-feature`)
3. Commit tus cambios (`git commit -m 'Add amazing feature'`)
4. Push a la rama (`git push origin feature/amazing-feature`)
5. Abre un Pull Request

## üìÑ Licencia

Este proyecto est√° bajo la Licencia MIT - ver el archivo [LICENSE](LICENSE) para detalles.

## üë®‚Äçüíª Autor

**techatlasdev** - [gjimenezdeza@gmail.com](mailto:gjimenezdeza@gmail.com)

- GitHub: [@techatlasdev](https://github.com/techatlasdev)
- Proyecto: [https://github.com/techatlasdev/pyhook](https://github.com/techatlasdev/pyhook)

## üôè Reconocimientos

- Inspirado en sistemas de hooks de frameworks modernos
- Construido con tipado est√°tico completo
- Dise√±ado para alta performance y extensibilidad

---

‚≠ê **¬°Dale una estrella si te gusta PyHook!** ‚≠ê
