[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "langgraph-distributed-utils"
dynamic = ["version"]
description = "LangGraph Distributed Runtime utilities shared by langgraph-executor and langgraph-runtime-integration."
readme = "README.md"
# TODO: License
requires-python = ">=3.11"
dependencies = [
    "grpcio>=1.73.1",
    "protobuf>=4.25.0",
    "langgraph>=0.6.5",
]

[project.packages]
find = { where = ["."] }

[tool.hatch.version]
path = "langgraph_distributed_utils/__init__.py"

[dependency-groups]
dev = [
    "ruff>=0.11.12",
    "pytest>=8.3.5",
    "protobuf>=6.31.1",
    "grpcio-tools>=1.73.1",
    "pytest-watcher>=0.4.3",
    "pytest-repeat>=0.9.4",
]


[tool.ruff]
exclude = [
    "venv",
    "build",
    "dist",
    "langgraph_distributed_utils/proto",
]
[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "F",      # pyflakes
    "I",      # isort (import sorting)
    "TID251", # banned imports
    "UP",     # pyupgrade (Python version-specific fixes)
    "B",      # flake8-bugbear (common bugs)
    "SIM",    # flake8-simplify (code simplification)
    "RUF",    # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B006",   # mutable default arguments (sometimes intentional)
    "B904",   # raise without from inside except (sometimes intentional)
    "SIM102", # nested if statements (sometimes clearer)
]
[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.TypedDict".msg = "Use typing_extensions.TypedDict instead."
"langgraph.graph.state.CompiledStateGraph".msg = "Use langgraph.pregel.Pregel instead."

[tool.hatch.build]
include = ["langgraph_distributed_utils"]
exclude = ["protos/", "docs/"]

[tool.hatch.build.targets.sdist]
exclude = [
    "tests/",
    "protos/",
    "docs/",
    ".github/",
    "dist/",
    "dist*/**",
    "examples.py",
    "examples/",
    ".editorconfig",
    ".langgraph_api",
    "*.ipynb",
    ".python-version",
    ".editorconfig",
    ".venv*/**",
    "pytest.ini",
    ".dockerignore",
]

[tool.pytest-watcher]
now = true
delay = 3
patterns = ["*.py", "../api/**/*.py"]

[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
addopts = "--strict-markers --strict-config --durations=5 -vv"