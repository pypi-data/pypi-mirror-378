# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import runtime_pb2 as runtime__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in runtime_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LangGraphRuntimeStub(object):
    """Runtime service for executing graphs
    RUNTIME UTILS 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddExecutor = channel.unary_unary(
                '/runtime.LangGraphRuntime/AddExecutor',
                request_serializer=runtime__pb2.AddExecutorRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.AddGraph = channel.unary_unary(
                '/runtime.LangGraphRuntime/AddGraph',
                request_serializer=runtime__pb2.AddGraphRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Invoke = channel.unary_unary(
                '/runtime.LangGraphRuntime/Invoke',
                request_serializer=runtime__pb2.InvokeRequest.SerializeToString,
                response_deserializer=runtime__pb2.OutputChunk.FromString,
                _registered_method=True)
        self.Stream = channel.unary_stream(
                '/runtime.LangGraphRuntime/Stream',
                request_serializer=runtime__pb2.StreamRequest.SerializeToString,
                response_deserializer=runtime__pb2.OutputChunk.FromString,
                _registered_method=True)
        self.GetState = channel.unary_unary(
                '/runtime.LangGraphRuntime/GetState',
                request_serializer=runtime__pb2.GetStateRequest.SerializeToString,
                response_deserializer=runtime__pb2.GetStateResponse.FromString,
                _registered_method=True)
        self.GetStateHistory = channel.unary_unary(
                '/runtime.LangGraphRuntime/GetStateHistory',
                request_serializer=runtime__pb2.GetStateHistoryRequest.SerializeToString,
                response_deserializer=runtime__pb2.GetStateHistoryResponse.FromString,
                _registered_method=True)
        self.UpdateState = channel.unary_unary(
                '/runtime.LangGraphRuntime/UpdateState',
                request_serializer=runtime__pb2.UpdateStateRequest.SerializeToString,
                response_deserializer=runtime__pb2.UpdateStateResponse.FromString,
                _registered_method=True)
        self.BulkUpdateState = channel.unary_unary(
                '/runtime.LangGraphRuntime/BulkUpdateState',
                request_serializer=runtime__pb2.BulkUpdateStateRequest.SerializeToString,
                response_deserializer=runtime__pb2.BulkUpdateStateResponse.FromString,
                _registered_method=True)
        self.CheckpointerList = channel.unary_unary(
                '/runtime.LangGraphRuntime/CheckpointerList',
                request_serializer=runtime__pb2.CheckpointerListRequest.SerializeToString,
                response_deserializer=runtime__pb2.CheckpointerListResponse.FromString,
                _registered_method=True)
        self.CheckpointerGetTuple = channel.unary_unary(
                '/runtime.LangGraphRuntime/CheckpointerGetTuple',
                request_serializer=runtime__pb2.CheckpointerGetTupleRequest.SerializeToString,
                response_deserializer=runtime__pb2.CheckpointerGetTupleResponse.FromString,
                _registered_method=True)
        self.CheckpointerDeleteThread = channel.unary_unary(
                '/runtime.LangGraphRuntime/CheckpointerDeleteThread',
                request_serializer=runtime__pb2.CheckpointerDeleteThreadRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.BatchStoreOperation = channel.unary_unary(
                '/runtime.LangGraphRuntime/BatchStoreOperation',
                request_serializer=runtime__pb2.BatchStoreOperationRequest.SerializeToString,
                response_deserializer=runtime__pb2.BatchStoreOperationResponse.FromString,
                _registered_method=True)


class LangGraphRuntimeServicer(object):
    """Runtime service for executing graphs
    RUNTIME UTILS 
    """

    def AddExecutor(self, request, context):
        """Add executors to pool 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddGraph(self, request, context):
        """Add graph to runtime
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Invoke(self, request, context):
        """PREGEL METHODS

        Invoke a graph synchronously
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stream(self, request, context):
        """Stream graph execution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetState(self, request, context):
        """State 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStateHistory(self, request, context):
        """State history
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateState(self, request, context):
        """Update state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BulkUpdateState(self, request, context):
        """Bulk update state 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckpointerList(self, request, context):
        """CHECKPOINTER METHODS
        TODO where should these live? Ideally in separate checkpointer service.

        List checkpoint tuples
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckpointerGetTuple(self, request, context):
        """Get checkpoint tuple
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckpointerDeleteThread(self, request, context):
        """Delete thread 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchStoreOperation(self, request, context):
        """Put store item
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LangGraphRuntimeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddExecutor': grpc.unary_unary_rpc_method_handler(
                    servicer.AddExecutor,
                    request_deserializer=runtime__pb2.AddExecutorRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'AddGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.AddGraph,
                    request_deserializer=runtime__pb2.AddGraphRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Invoke': grpc.unary_unary_rpc_method_handler(
                    servicer.Invoke,
                    request_deserializer=runtime__pb2.InvokeRequest.FromString,
                    response_serializer=runtime__pb2.OutputChunk.SerializeToString,
            ),
            'Stream': grpc.unary_stream_rpc_method_handler(
                    servicer.Stream,
                    request_deserializer=runtime__pb2.StreamRequest.FromString,
                    response_serializer=runtime__pb2.OutputChunk.SerializeToString,
            ),
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=runtime__pb2.GetStateRequest.FromString,
                    response_serializer=runtime__pb2.GetStateResponse.SerializeToString,
            ),
            'GetStateHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStateHistory,
                    request_deserializer=runtime__pb2.GetStateHistoryRequest.FromString,
                    response_serializer=runtime__pb2.GetStateHistoryResponse.SerializeToString,
            ),
            'UpdateState': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateState,
                    request_deserializer=runtime__pb2.UpdateStateRequest.FromString,
                    response_serializer=runtime__pb2.UpdateStateResponse.SerializeToString,
            ),
            'BulkUpdateState': grpc.unary_unary_rpc_method_handler(
                    servicer.BulkUpdateState,
                    request_deserializer=runtime__pb2.BulkUpdateStateRequest.FromString,
                    response_serializer=runtime__pb2.BulkUpdateStateResponse.SerializeToString,
            ),
            'CheckpointerList': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckpointerList,
                    request_deserializer=runtime__pb2.CheckpointerListRequest.FromString,
                    response_serializer=runtime__pb2.CheckpointerListResponse.SerializeToString,
            ),
            'CheckpointerGetTuple': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckpointerGetTuple,
                    request_deserializer=runtime__pb2.CheckpointerGetTupleRequest.FromString,
                    response_serializer=runtime__pb2.CheckpointerGetTupleResponse.SerializeToString,
            ),
            'CheckpointerDeleteThread': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckpointerDeleteThread,
                    request_deserializer=runtime__pb2.CheckpointerDeleteThreadRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'BatchStoreOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchStoreOperation,
                    request_deserializer=runtime__pb2.BatchStoreOperationRequest.FromString,
                    response_serializer=runtime__pb2.BatchStoreOperationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'runtime.LangGraphRuntime', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('runtime.LangGraphRuntime', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LangGraphRuntime(object):
    """Runtime service for executing graphs
    RUNTIME UTILS 
    """

    @staticmethod
    def AddExecutor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.LangGraphRuntime/AddExecutor',
            runtime__pb2.AddExecutorRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.LangGraphRuntime/AddGraph',
            runtime__pb2.AddGraphRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Invoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.LangGraphRuntime/Invoke',
            runtime__pb2.InvokeRequest.SerializeToString,
            runtime__pb2.OutputChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/runtime.LangGraphRuntime/Stream',
            runtime__pb2.StreamRequest.SerializeToString,
            runtime__pb2.OutputChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.LangGraphRuntime/GetState',
            runtime__pb2.GetStateRequest.SerializeToString,
            runtime__pb2.GetStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStateHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.LangGraphRuntime/GetStateHistory',
            runtime__pb2.GetStateHistoryRequest.SerializeToString,
            runtime__pb2.GetStateHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.LangGraphRuntime/UpdateState',
            runtime__pb2.UpdateStateRequest.SerializeToString,
            runtime__pb2.UpdateStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BulkUpdateState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.LangGraphRuntime/BulkUpdateState',
            runtime__pb2.BulkUpdateStateRequest.SerializeToString,
            runtime__pb2.BulkUpdateStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckpointerList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.LangGraphRuntime/CheckpointerList',
            runtime__pb2.CheckpointerListRequest.SerializeToString,
            runtime__pb2.CheckpointerListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckpointerGetTuple(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.LangGraphRuntime/CheckpointerGetTuple',
            runtime__pb2.CheckpointerGetTupleRequest.SerializeToString,
            runtime__pb2.CheckpointerGetTupleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckpointerDeleteThread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.LangGraphRuntime/CheckpointerDeleteThread',
            runtime__pb2.CheckpointerDeleteThreadRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchStoreOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/runtime.LangGraphRuntime/BatchStoreOperation',
            runtime__pb2.BatchStoreOperationRequest.SerializeToString,
            runtime__pb2.BatchStoreOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
