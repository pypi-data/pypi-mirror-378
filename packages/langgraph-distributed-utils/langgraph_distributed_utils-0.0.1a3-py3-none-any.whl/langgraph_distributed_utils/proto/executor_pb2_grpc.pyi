"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import executor_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class LangGraphExecutorStub:
    """Main service for LangGraph runtime operations"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListGraphs: grpc.UnaryUnaryMultiCallable[
        executor_pb2.ListGraphsRequest,
        executor_pb2.ListGraphsResponse,
    ]
    """List available graphs"""

    GetGraph: grpc.UnaryUnaryMultiCallable[
        executor_pb2.GetGraphRequest,
        executor_pb2.GetGraphResponse,
    ]
    """Get graph definition"""

    GetAllGraphs: grpc.UnaryStreamMultiCallable[
        executor_pb2.GetAllGraphsRequest,
        executor_pb2.GetGraphResponse,
    ]
    """Get all supported graph definitions"""

    ChannelsFromCheckpoint: grpc.UnaryUnaryMultiCallable[
        executor_pb2.ChannelsFromCheckpointRequest,
        executor_pb2.ChannelsFromCheckpointResponse,
    ]
    """Get channels initialized from checkpoint"""

    ExecuteTask: grpc.StreamStreamMultiCallable[
        executor_pb2.ExecuteTaskRequest,
        executor_pb2.ExecuteTaskResponse,
    ]
    """Execute a node - bidirectional streaming for interactive execution"""

    ApplyWrites: grpc.UnaryUnaryMultiCallable[
        executor_pb2.ApplyWritesRequest,
        executor_pb2.ApplyWritesResponse,
    ]
    """Update channel values with writes"""

    GenerateCacheKey: grpc.UnaryUnaryMultiCallable[
        executor_pb2.GenerateCacheKeyRequest,
        executor_pb2.GenerateCacheKeyResponse,
    ]
    """Generate cache key for a node execution"""

    StateUpdate: grpc.UnaryUnaryMultiCallable[
        executor_pb2.StateUpdateRequest,
        executor_pb2.TaskResult,
    ]
    """State update"""

class LangGraphExecutorAsyncStub:
    """Main service for LangGraph runtime operations"""

    ListGraphs: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.ListGraphsRequest,
        executor_pb2.ListGraphsResponse,
    ]
    """List available graphs"""

    GetGraph: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.GetGraphRequest,
        executor_pb2.GetGraphResponse,
    ]
    """Get graph definition"""

    GetAllGraphs: grpc.aio.UnaryStreamMultiCallable[
        executor_pb2.GetAllGraphsRequest,
        executor_pb2.GetGraphResponse,
    ]
    """Get all supported graph definitions"""

    ChannelsFromCheckpoint: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.ChannelsFromCheckpointRequest,
        executor_pb2.ChannelsFromCheckpointResponse,
    ]
    """Get channels initialized from checkpoint"""

    ExecuteTask: grpc.aio.StreamStreamMultiCallable[
        executor_pb2.ExecuteTaskRequest,
        executor_pb2.ExecuteTaskResponse,
    ]
    """Execute a node - bidirectional streaming for interactive execution"""

    ApplyWrites: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.ApplyWritesRequest,
        executor_pb2.ApplyWritesResponse,
    ]
    """Update channel values with writes"""

    GenerateCacheKey: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.GenerateCacheKeyRequest,
        executor_pb2.GenerateCacheKeyResponse,
    ]
    """Generate cache key for a node execution"""

    StateUpdate: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.StateUpdateRequest,
        executor_pb2.TaskResult,
    ]
    """State update"""

class LangGraphExecutorServicer(metaclass=abc.ABCMeta):
    """Main service for LangGraph runtime operations"""

    @abc.abstractmethod
    def ListGraphs(
        self,
        request: executor_pb2.ListGraphsRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.ListGraphsResponse, collections.abc.Awaitable[executor_pb2.ListGraphsResponse]]:
        """List available graphs"""

    @abc.abstractmethod
    def GetGraph(
        self,
        request: executor_pb2.GetGraphRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.GetGraphResponse, collections.abc.Awaitable[executor_pb2.GetGraphResponse]]:
        """Get graph definition"""

    @abc.abstractmethod
    def GetAllGraphs(
        self,
        request: executor_pb2.GetAllGraphsRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[executor_pb2.GetGraphResponse], collections.abc.AsyncIterator[executor_pb2.GetGraphResponse]]:
        """Get all supported graph definitions"""

    @abc.abstractmethod
    def ChannelsFromCheckpoint(
        self,
        request: executor_pb2.ChannelsFromCheckpointRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.ChannelsFromCheckpointResponse, collections.abc.Awaitable[executor_pb2.ChannelsFromCheckpointResponse]]:
        """Get channels initialized from checkpoint"""

    @abc.abstractmethod
    def ExecuteTask(
        self,
        request_iterator: _MaybeAsyncIterator[executor_pb2.ExecuteTaskRequest],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[executor_pb2.ExecuteTaskResponse], collections.abc.AsyncIterator[executor_pb2.ExecuteTaskResponse]]:
        """Execute a node - bidirectional streaming for interactive execution"""

    @abc.abstractmethod
    def ApplyWrites(
        self,
        request: executor_pb2.ApplyWritesRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.ApplyWritesResponse, collections.abc.Awaitable[executor_pb2.ApplyWritesResponse]]:
        """Update channel values with writes"""

    @abc.abstractmethod
    def GenerateCacheKey(
        self,
        request: executor_pb2.GenerateCacheKeyRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.GenerateCacheKeyResponse, collections.abc.Awaitable[executor_pb2.GenerateCacheKeyResponse]]:
        """Generate cache key for a node execution"""

    @abc.abstractmethod
    def StateUpdate(
        self,
        request: executor_pb2.StateUpdateRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.TaskResult, collections.abc.Awaitable[executor_pb2.TaskResult]]:
        """State update"""

def add_LangGraphExecutorServicer_to_server(servicer: LangGraphExecutorServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
