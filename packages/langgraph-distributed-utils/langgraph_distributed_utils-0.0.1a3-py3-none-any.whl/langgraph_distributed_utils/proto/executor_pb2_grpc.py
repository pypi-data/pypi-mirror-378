# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import executor_pb2 as executor__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in executor_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LangGraphExecutorStub(object):
    """Main service for LangGraph runtime operations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListGraphs = channel.unary_unary(
                '/executor.LangGraphExecutor/ListGraphs',
                request_serializer=executor__pb2.ListGraphsRequest.SerializeToString,
                response_deserializer=executor__pb2.ListGraphsResponse.FromString,
                _registered_method=True)
        self.GetGraph = channel.unary_unary(
                '/executor.LangGraphExecutor/GetGraph',
                request_serializer=executor__pb2.GetGraphRequest.SerializeToString,
                response_deserializer=executor__pb2.GetGraphResponse.FromString,
                _registered_method=True)
        self.GetAllGraphs = channel.unary_stream(
                '/executor.LangGraphExecutor/GetAllGraphs',
                request_serializer=executor__pb2.GetAllGraphsRequest.SerializeToString,
                response_deserializer=executor__pb2.GetGraphResponse.FromString,
                _registered_method=True)
        self.ChannelsFromCheckpoint = channel.unary_unary(
                '/executor.LangGraphExecutor/ChannelsFromCheckpoint',
                request_serializer=executor__pb2.ChannelsFromCheckpointRequest.SerializeToString,
                response_deserializer=executor__pb2.ChannelsFromCheckpointResponse.FromString,
                _registered_method=True)
        self.ExecuteTask = channel.stream_stream(
                '/executor.LangGraphExecutor/ExecuteTask',
                request_serializer=executor__pb2.ExecuteTaskRequest.SerializeToString,
                response_deserializer=executor__pb2.ExecuteTaskResponse.FromString,
                _registered_method=True)
        self.ApplyWrites = channel.unary_unary(
                '/executor.LangGraphExecutor/ApplyWrites',
                request_serializer=executor__pb2.ApplyWritesRequest.SerializeToString,
                response_deserializer=executor__pb2.ApplyWritesResponse.FromString,
                _registered_method=True)
        self.GenerateCacheKey = channel.unary_unary(
                '/executor.LangGraphExecutor/GenerateCacheKey',
                request_serializer=executor__pb2.GenerateCacheKeyRequest.SerializeToString,
                response_deserializer=executor__pb2.GenerateCacheKeyResponse.FromString,
                _registered_method=True)
        self.StateUpdate = channel.unary_unary(
                '/executor.LangGraphExecutor/StateUpdate',
                request_serializer=executor__pb2.StateUpdateRequest.SerializeToString,
                response_deserializer=executor__pb2.TaskResult.FromString,
                _registered_method=True)


class LangGraphExecutorServicer(object):
    """Main service for LangGraph runtime operations
    """

    def ListGraphs(self, request, context):
        """List available graphs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGraph(self, request, context):
        """Get graph definition
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllGraphs(self, request, context):
        """Get all supported graph definitions 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChannelsFromCheckpoint(self, request, context):
        """Get channels initialized from checkpoint
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteTask(self, request_iterator, context):
        """Execute a node - bidirectional streaming for interactive execution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyWrites(self, request, context):
        """Update channel values with writes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateCacheKey(self, request, context):
        """Generate cache key for a node execution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StateUpdate(self, request, context):
        """State update 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LangGraphExecutorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListGraphs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGraphs,
                    request_deserializer=executor__pb2.ListGraphsRequest.FromString,
                    response_serializer=executor__pb2.ListGraphsResponse.SerializeToString,
            ),
            'GetGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGraph,
                    request_deserializer=executor__pb2.GetGraphRequest.FromString,
                    response_serializer=executor__pb2.GetGraphResponse.SerializeToString,
            ),
            'GetAllGraphs': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAllGraphs,
                    request_deserializer=executor__pb2.GetAllGraphsRequest.FromString,
                    response_serializer=executor__pb2.GetGraphResponse.SerializeToString,
            ),
            'ChannelsFromCheckpoint': grpc.unary_unary_rpc_method_handler(
                    servicer.ChannelsFromCheckpoint,
                    request_deserializer=executor__pb2.ChannelsFromCheckpointRequest.FromString,
                    response_serializer=executor__pb2.ChannelsFromCheckpointResponse.SerializeToString,
            ),
            'ExecuteTask': grpc.stream_stream_rpc_method_handler(
                    servicer.ExecuteTask,
                    request_deserializer=executor__pb2.ExecuteTaskRequest.FromString,
                    response_serializer=executor__pb2.ExecuteTaskResponse.SerializeToString,
            ),
            'ApplyWrites': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyWrites,
                    request_deserializer=executor__pb2.ApplyWritesRequest.FromString,
                    response_serializer=executor__pb2.ApplyWritesResponse.SerializeToString,
            ),
            'GenerateCacheKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateCacheKey,
                    request_deserializer=executor__pb2.GenerateCacheKeyRequest.FromString,
                    response_serializer=executor__pb2.GenerateCacheKeyResponse.SerializeToString,
            ),
            'StateUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.StateUpdate,
                    request_deserializer=executor__pb2.StateUpdateRequest.FromString,
                    response_serializer=executor__pb2.TaskResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'executor.LangGraphExecutor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('executor.LangGraphExecutor', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LangGraphExecutor(object):
    """Main service for LangGraph runtime operations
    """

    @staticmethod
    def ListGraphs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/executor.LangGraphExecutor/ListGraphs',
            executor__pb2.ListGraphsRequest.SerializeToString,
            executor__pb2.ListGraphsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/executor.LangGraphExecutor/GetGraph',
            executor__pb2.GetGraphRequest.SerializeToString,
            executor__pb2.GetGraphResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllGraphs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/executor.LangGraphExecutor/GetAllGraphs',
            executor__pb2.GetAllGraphsRequest.SerializeToString,
            executor__pb2.GetGraphResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChannelsFromCheckpoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/executor.LangGraphExecutor/ChannelsFromCheckpoint',
            executor__pb2.ChannelsFromCheckpointRequest.SerializeToString,
            executor__pb2.ChannelsFromCheckpointResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteTask(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/executor.LangGraphExecutor/ExecuteTask',
            executor__pb2.ExecuteTaskRequest.SerializeToString,
            executor__pb2.ExecuteTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ApplyWrites(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/executor.LangGraphExecutor/ApplyWrites',
            executor__pb2.ApplyWritesRequest.SerializeToString,
            executor__pb2.ApplyWritesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateCacheKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/executor.LangGraphExecutor/GenerateCacheKey',
            executor__pb2.GenerateCacheKeyRequest.SerializeToString,
            executor__pb2.GenerateCacheKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StateUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/executor.LangGraphExecutor/StateUpdate',
            executor__pb2.StateUpdateRequest.SerializeToString,
            executor__pb2.TaskResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
