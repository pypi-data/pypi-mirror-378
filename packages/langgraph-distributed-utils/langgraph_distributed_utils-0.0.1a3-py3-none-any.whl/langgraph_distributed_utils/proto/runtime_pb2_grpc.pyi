"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import runtime_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class LangGraphRuntimeStub:
    """Runtime service for executing graphs
    RUNTIME UTILS
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    AddExecutor: grpc.UnaryUnaryMultiCallable[
        runtime_pb2.AddExecutorRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Add executors to pool"""

    AddGraph: grpc.UnaryUnaryMultiCallable[
        runtime_pb2.AddGraphRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Add graph to runtime"""

    Invoke: grpc.UnaryUnaryMultiCallable[
        runtime_pb2.InvokeRequest,
        runtime_pb2.OutputChunk,
    ]
    """PREGEL METHODS

    Invoke a graph synchronously
    """

    Stream: grpc.UnaryStreamMultiCallable[
        runtime_pb2.StreamRequest,
        runtime_pb2.OutputChunk,
    ]
    """Stream graph execution"""

    GetState: grpc.UnaryUnaryMultiCallable[
        runtime_pb2.GetStateRequest,
        runtime_pb2.GetStateResponse,
    ]
    """State"""

    GetStateHistory: grpc.UnaryUnaryMultiCallable[
        runtime_pb2.GetStateHistoryRequest,
        runtime_pb2.GetStateHistoryResponse,
    ]
    """State history"""

    UpdateState: grpc.UnaryUnaryMultiCallable[
        runtime_pb2.UpdateStateRequest,
        runtime_pb2.UpdateStateResponse,
    ]
    """Update state"""

    BulkUpdateState: grpc.UnaryUnaryMultiCallable[
        runtime_pb2.BulkUpdateStateRequest,
        runtime_pb2.BulkUpdateStateResponse,
    ]
    """Bulk update state"""

    CheckpointerList: grpc.UnaryUnaryMultiCallable[
        runtime_pb2.CheckpointerListRequest,
        runtime_pb2.CheckpointerListResponse,
    ]
    """CHECKPOINTER METHODS
    TODO where should these live? Ideally in separate checkpointer service.

    List checkpoint tuples
    """

    CheckpointerGetTuple: grpc.UnaryUnaryMultiCallable[
        runtime_pb2.CheckpointerGetTupleRequest,
        runtime_pb2.CheckpointerGetTupleResponse,
    ]
    """Get checkpoint tuple"""

    CheckpointerDeleteThread: grpc.UnaryUnaryMultiCallable[
        runtime_pb2.CheckpointerDeleteThreadRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Delete thread"""

    BatchStoreOperation: grpc.UnaryUnaryMultiCallable[
        runtime_pb2.BatchStoreOperationRequest,
        runtime_pb2.BatchStoreOperationResponse,
    ]
    """Put store item"""

class LangGraphRuntimeAsyncStub:
    """Runtime service for executing graphs
    RUNTIME UTILS
    """

    AddExecutor: grpc.aio.UnaryUnaryMultiCallable[
        runtime_pb2.AddExecutorRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Add executors to pool"""

    AddGraph: grpc.aio.UnaryUnaryMultiCallable[
        runtime_pb2.AddGraphRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Add graph to runtime"""

    Invoke: grpc.aio.UnaryUnaryMultiCallable[
        runtime_pb2.InvokeRequest,
        runtime_pb2.OutputChunk,
    ]
    """PREGEL METHODS

    Invoke a graph synchronously
    """

    Stream: grpc.aio.UnaryStreamMultiCallable[
        runtime_pb2.StreamRequest,
        runtime_pb2.OutputChunk,
    ]
    """Stream graph execution"""

    GetState: grpc.aio.UnaryUnaryMultiCallable[
        runtime_pb2.GetStateRequest,
        runtime_pb2.GetStateResponse,
    ]
    """State"""

    GetStateHistory: grpc.aio.UnaryUnaryMultiCallable[
        runtime_pb2.GetStateHistoryRequest,
        runtime_pb2.GetStateHistoryResponse,
    ]
    """State history"""

    UpdateState: grpc.aio.UnaryUnaryMultiCallable[
        runtime_pb2.UpdateStateRequest,
        runtime_pb2.UpdateStateResponse,
    ]
    """Update state"""

    BulkUpdateState: grpc.aio.UnaryUnaryMultiCallable[
        runtime_pb2.BulkUpdateStateRequest,
        runtime_pb2.BulkUpdateStateResponse,
    ]
    """Bulk update state"""

    CheckpointerList: grpc.aio.UnaryUnaryMultiCallable[
        runtime_pb2.CheckpointerListRequest,
        runtime_pb2.CheckpointerListResponse,
    ]
    """CHECKPOINTER METHODS
    TODO where should these live? Ideally in separate checkpointer service.

    List checkpoint tuples
    """

    CheckpointerGetTuple: grpc.aio.UnaryUnaryMultiCallable[
        runtime_pb2.CheckpointerGetTupleRequest,
        runtime_pb2.CheckpointerGetTupleResponse,
    ]
    """Get checkpoint tuple"""

    CheckpointerDeleteThread: grpc.aio.UnaryUnaryMultiCallable[
        runtime_pb2.CheckpointerDeleteThreadRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Delete thread"""

    BatchStoreOperation: grpc.aio.UnaryUnaryMultiCallable[
        runtime_pb2.BatchStoreOperationRequest,
        runtime_pb2.BatchStoreOperationResponse,
    ]
    """Put store item"""

class LangGraphRuntimeServicer(metaclass=abc.ABCMeta):
    """Runtime service for executing graphs
    RUNTIME UTILS
    """

    @abc.abstractmethod
    def AddExecutor(
        self,
        request: runtime_pb2.AddExecutorRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Add executors to pool"""

    @abc.abstractmethod
    def AddGraph(
        self,
        request: runtime_pb2.AddGraphRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Add graph to runtime"""

    @abc.abstractmethod
    def Invoke(
        self,
        request: runtime_pb2.InvokeRequest,
        context: _ServicerContext,
    ) -> typing.Union[runtime_pb2.OutputChunk, collections.abc.Awaitable[runtime_pb2.OutputChunk]]:
        """PREGEL METHODS

        Invoke a graph synchronously
        """

    @abc.abstractmethod
    def Stream(
        self,
        request: runtime_pb2.StreamRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[runtime_pb2.OutputChunk], collections.abc.AsyncIterator[runtime_pb2.OutputChunk]]:
        """Stream graph execution"""

    @abc.abstractmethod
    def GetState(
        self,
        request: runtime_pb2.GetStateRequest,
        context: _ServicerContext,
    ) -> typing.Union[runtime_pb2.GetStateResponse, collections.abc.Awaitable[runtime_pb2.GetStateResponse]]:
        """State"""

    @abc.abstractmethod
    def GetStateHistory(
        self,
        request: runtime_pb2.GetStateHistoryRequest,
        context: _ServicerContext,
    ) -> typing.Union[runtime_pb2.GetStateHistoryResponse, collections.abc.Awaitable[runtime_pb2.GetStateHistoryResponse]]:
        """State history"""

    @abc.abstractmethod
    def UpdateState(
        self,
        request: runtime_pb2.UpdateStateRequest,
        context: _ServicerContext,
    ) -> typing.Union[runtime_pb2.UpdateStateResponse, collections.abc.Awaitable[runtime_pb2.UpdateStateResponse]]:
        """Update state"""

    @abc.abstractmethod
    def BulkUpdateState(
        self,
        request: runtime_pb2.BulkUpdateStateRequest,
        context: _ServicerContext,
    ) -> typing.Union[runtime_pb2.BulkUpdateStateResponse, collections.abc.Awaitable[runtime_pb2.BulkUpdateStateResponse]]:
        """Bulk update state"""

    @abc.abstractmethod
    def CheckpointerList(
        self,
        request: runtime_pb2.CheckpointerListRequest,
        context: _ServicerContext,
    ) -> typing.Union[runtime_pb2.CheckpointerListResponse, collections.abc.Awaitable[runtime_pb2.CheckpointerListResponse]]:
        """CHECKPOINTER METHODS
        TODO where should these live? Ideally in separate checkpointer service.

        List checkpoint tuples
        """

    @abc.abstractmethod
    def CheckpointerGetTuple(
        self,
        request: runtime_pb2.CheckpointerGetTupleRequest,
        context: _ServicerContext,
    ) -> typing.Union[runtime_pb2.CheckpointerGetTupleResponse, collections.abc.Awaitable[runtime_pb2.CheckpointerGetTupleResponse]]:
        """Get checkpoint tuple"""

    @abc.abstractmethod
    def CheckpointerDeleteThread(
        self,
        request: runtime_pb2.CheckpointerDeleteThreadRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Delete thread"""

    @abc.abstractmethod
    def BatchStoreOperation(
        self,
        request: runtime_pb2.BatchStoreOperationRequest,
        context: _ServicerContext,
    ) -> typing.Union[runtime_pb2.BatchStoreOperationResponse, collections.abc.Awaitable[runtime_pb2.BatchStoreOperationResponse]]:
        """Put store item"""

def add_LangGraphRuntimeServicer_to_server(servicer: LangGraphRuntimeServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
