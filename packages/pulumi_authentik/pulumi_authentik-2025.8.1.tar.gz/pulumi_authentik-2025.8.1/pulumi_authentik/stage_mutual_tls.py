# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['StageMutualTlsArgs', 'StageMutualTls']

@pulumi.input_type
class StageMutualTlsArgs:
    def __init__(__self__, *,
                 cert_attribute: Optional[pulumi.Input[builtins.str]] = None,
                 certificate_authorities: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 stage_mutual_tls_id: Optional[pulumi.Input[builtins.str]] = None,
                 user_attribute: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a StageMutualTls resource.
        :param pulumi.Input[builtins.str] cert_attribute: Allowed values: - `subject` - `common_name` - `email` Defaults to `email`.
        :param pulumi.Input[builtins.str] mode: Allowed values: - `optional` - `required` Defaults to `optional`.
        :param pulumi.Input[builtins.str] user_attribute: Allowed values: - `username` - `email` Defaults to `email`.
        """
        if cert_attribute is not None:
            pulumi.set(__self__, "cert_attribute", cert_attribute)
        if certificate_authorities is not None:
            pulumi.set(__self__, "certificate_authorities", certificate_authorities)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stage_mutual_tls_id is not None:
            pulumi.set(__self__, "stage_mutual_tls_id", stage_mutual_tls_id)
        if user_attribute is not None:
            pulumi.set(__self__, "user_attribute", user_attribute)

    @property
    @pulumi.getter(name="certAttribute")
    def cert_attribute(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `subject` - `common_name` - `email` Defaults to `email`.
        """
        return pulumi.get(self, "cert_attribute")

    @cert_attribute.setter
    def cert_attribute(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cert_attribute", value)

    @property
    @pulumi.getter(name="certificateAuthorities")
    def certificate_authorities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "certificate_authorities")

    @certificate_authorities.setter
    def certificate_authorities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "certificate_authorities", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `optional` - `required` Defaults to `optional`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="stageMutualTlsId")
    def stage_mutual_tls_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "stage_mutual_tls_id")

    @stage_mutual_tls_id.setter
    def stage_mutual_tls_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "stage_mutual_tls_id", value)

    @property
    @pulumi.getter(name="userAttribute")
    def user_attribute(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `username` - `email` Defaults to `email`.
        """
        return pulumi.get(self, "user_attribute")

    @user_attribute.setter
    def user_attribute(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_attribute", value)


@pulumi.input_type
class _StageMutualTlsState:
    def __init__(__self__, *,
                 cert_attribute: Optional[pulumi.Input[builtins.str]] = None,
                 certificate_authorities: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 stage_mutual_tls_id: Optional[pulumi.Input[builtins.str]] = None,
                 user_attribute: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering StageMutualTls resources.
        :param pulumi.Input[builtins.str] cert_attribute: Allowed values: - `subject` - `common_name` - `email` Defaults to `email`.
        :param pulumi.Input[builtins.str] mode: Allowed values: - `optional` - `required` Defaults to `optional`.
        :param pulumi.Input[builtins.str] user_attribute: Allowed values: - `username` - `email` Defaults to `email`.
        """
        if cert_attribute is not None:
            pulumi.set(__self__, "cert_attribute", cert_attribute)
        if certificate_authorities is not None:
            pulumi.set(__self__, "certificate_authorities", certificate_authorities)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stage_mutual_tls_id is not None:
            pulumi.set(__self__, "stage_mutual_tls_id", stage_mutual_tls_id)
        if user_attribute is not None:
            pulumi.set(__self__, "user_attribute", user_attribute)

    @property
    @pulumi.getter(name="certAttribute")
    def cert_attribute(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `subject` - `common_name` - `email` Defaults to `email`.
        """
        return pulumi.get(self, "cert_attribute")

    @cert_attribute.setter
    def cert_attribute(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cert_attribute", value)

    @property
    @pulumi.getter(name="certificateAuthorities")
    def certificate_authorities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "certificate_authorities")

    @certificate_authorities.setter
    def certificate_authorities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "certificate_authorities", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `optional` - `required` Defaults to `optional`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="stageMutualTlsId")
    def stage_mutual_tls_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "stage_mutual_tls_id")

    @stage_mutual_tls_id.setter
    def stage_mutual_tls_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "stage_mutual_tls_id", value)

    @property
    @pulumi.getter(name="userAttribute")
    def user_attribute(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `username` - `email` Defaults to `email`.
        """
        return pulumi.get(self, "user_attribute")

    @user_attribute.setter
    def user_attribute(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_attribute", value)


@pulumi.type_token("authentik:index/stageMutualTls:StageMutualTls")
class StageMutualTls(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cert_attribute: Optional[pulumi.Input[builtins.str]] = None,
                 certificate_authorities: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 stage_mutual_tls_id: Optional[pulumi.Input[builtins.str]] = None,
                 user_attribute: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a StageMutualTls resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] cert_attribute: Allowed values: - `subject` - `common_name` - `email` Defaults to `email`.
        :param pulumi.Input[builtins.str] mode: Allowed values: - `optional` - `required` Defaults to `optional`.
        :param pulumi.Input[builtins.str] user_attribute: Allowed values: - `username` - `email` Defaults to `email`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[StageMutualTlsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StageMutualTls resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StageMutualTlsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StageMutualTlsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cert_attribute: Optional[pulumi.Input[builtins.str]] = None,
                 certificate_authorities: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 stage_mutual_tls_id: Optional[pulumi.Input[builtins.str]] = None,
                 user_attribute: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StageMutualTlsArgs.__new__(StageMutualTlsArgs)

            __props__.__dict__["cert_attribute"] = cert_attribute
            __props__.__dict__["certificate_authorities"] = certificate_authorities
            __props__.__dict__["mode"] = mode
            __props__.__dict__["name"] = name
            __props__.__dict__["stage_mutual_tls_id"] = stage_mutual_tls_id
            __props__.__dict__["user_attribute"] = user_attribute
        super(StageMutualTls, __self__).__init__(
            'authentik:index/stageMutualTls:StageMutualTls',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cert_attribute: Optional[pulumi.Input[builtins.str]] = None,
            certificate_authorities: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            mode: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            stage_mutual_tls_id: Optional[pulumi.Input[builtins.str]] = None,
            user_attribute: Optional[pulumi.Input[builtins.str]] = None) -> 'StageMutualTls':
        """
        Get an existing StageMutualTls resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] cert_attribute: Allowed values: - `subject` - `common_name` - `email` Defaults to `email`.
        :param pulumi.Input[builtins.str] mode: Allowed values: - `optional` - `required` Defaults to `optional`.
        :param pulumi.Input[builtins.str] user_attribute: Allowed values: - `username` - `email` Defaults to `email`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StageMutualTlsState.__new__(_StageMutualTlsState)

        __props__.__dict__["cert_attribute"] = cert_attribute
        __props__.__dict__["certificate_authorities"] = certificate_authorities
        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["stage_mutual_tls_id"] = stage_mutual_tls_id
        __props__.__dict__["user_attribute"] = user_attribute
        return StageMutualTls(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certAttribute")
    def cert_attribute(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Allowed values: - `subject` - `common_name` - `email` Defaults to `email`.
        """
        return pulumi.get(self, "cert_attribute")

    @property
    @pulumi.getter(name="certificateAuthorities")
    def certificate_authorities(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "certificate_authorities")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Allowed values: - `optional` - `required` Defaults to `optional`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stageMutualTlsId")
    def stage_mutual_tls_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "stage_mutual_tls_id")

    @property
    @pulumi.getter(name="userAttribute")
    def user_attribute(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Allowed values: - `username` - `email` Defaults to `email`.
        """
        return pulumi.get(self, "user_attribute")

