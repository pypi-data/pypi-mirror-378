# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetRbacPermissionResult',
    'AwaitableGetRbacPermissionResult',
    'get_rbac_permission',
    'get_rbac_permission_output',
]

@pulumi.output_type
class GetRbacPermissionResult:
    """
    A collection of values returned by getRbacPermission.
    """
    def __init__(__self__, app=None, codename=None, id=None, model=None):
        if app and not isinstance(app, str):
            raise TypeError("Expected argument 'app' to be a str")
        pulumi.set(__self__, "app", app)
        if codename and not isinstance(codename, str):
            raise TypeError("Expected argument 'codename' to be a str")
        pulumi.set(__self__, "codename", codename)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if model and not isinstance(model, str):
            raise TypeError("Expected argument 'model' to be a str")
        pulumi.set(__self__, "model", model)

    @property
    @pulumi.getter
    def app(self) -> builtins.str:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter
    def codename(self) -> builtins.str:
        return pulumi.get(self, "codename")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def model(self) -> builtins.str:
        return pulumi.get(self, "model")


class AwaitableGetRbacPermissionResult(GetRbacPermissionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRbacPermissionResult(
            app=self.app,
            codename=self.codename,
            id=self.id,
            model=self.model)


def get_rbac_permission(codename: Optional[builtins.str] = None,
                        id: Optional[builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRbacPermissionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['codename'] = codename
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('authentik:index/getRbacPermission:getRbacPermission', __args__, opts=opts, typ=GetRbacPermissionResult, package_ref=_utilities.get_package()).value

    return AwaitableGetRbacPermissionResult(
        app=pulumi.get(__ret__, 'app'),
        codename=pulumi.get(__ret__, 'codename'),
        id=pulumi.get(__ret__, 'id'),
        model=pulumi.get(__ret__, 'model'))
def get_rbac_permission_output(codename: Optional[pulumi.Input[builtins.str]] = None,
                               id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRbacPermissionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['codename'] = codename
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('authentik:index/getRbacPermission:getRbacPermission', __args__, opts=opts, typ=GetRbacPermissionResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetRbacPermissionResult(
        app=pulumi.get(__response__, 'app'),
        codename=pulumi.get(__response__, 'codename'),
        id=pulumi.get(__response__, 'id'),
        model=pulumi.get(__response__, 'model')))
