# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['EventRuleArgs', 'EventRule']

@pulumi.input_type
class EventRuleArgs:
    def __init__(__self__, *,
                 transports: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 destination_event_user: Optional[pulumi.Input[builtins.bool]] = None,
                 destination_group: Optional[pulumi.Input[builtins.str]] = None,
                 event_rule_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 severity: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a EventRule resource.
        :param pulumi.Input[builtins.bool] destination_event_user: Send notification to event user Defaults to `false`.
        :param pulumi.Input[builtins.str] destination_group: Group to send notification to
        :param pulumi.Input[builtins.str] severity: Allowed values: - `notice` - `warning` - `alert` Defaults to `warning`.
        """
        pulumi.set(__self__, "transports", transports)
        if destination_event_user is not None:
            pulumi.set(__self__, "destination_event_user", destination_event_user)
        if destination_group is not None:
            pulumi.set(__self__, "destination_group", destination_group)
        if event_rule_id is not None:
            pulumi.set(__self__, "event_rule_id", event_rule_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def transports(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        return pulumi.get(self, "transports")

    @transports.setter
    def transports(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "transports", value)

    @property
    @pulumi.getter(name="destinationEventUser")
    def destination_event_user(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Send notification to event user Defaults to `false`.
        """
        return pulumi.get(self, "destination_event_user")

    @destination_event_user.setter
    def destination_event_user(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "destination_event_user", value)

    @property
    @pulumi.getter(name="destinationGroup")
    def destination_group(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Group to send notification to
        """
        return pulumi.get(self, "destination_group")

    @destination_group.setter
    def destination_group(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "destination_group", value)

    @property
    @pulumi.getter(name="eventRuleId")
    def event_rule_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "event_rule_id")

    @event_rule_id.setter
    def event_rule_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "event_rule_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `notice` - `warning` - `alert` Defaults to `warning`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class _EventRuleState:
    def __init__(__self__, *,
                 destination_event_user: Optional[pulumi.Input[builtins.bool]] = None,
                 destination_group: Optional[pulumi.Input[builtins.str]] = None,
                 event_rule_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 severity: Optional[pulumi.Input[builtins.str]] = None,
                 transports: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering EventRule resources.
        :param pulumi.Input[builtins.bool] destination_event_user: Send notification to event user Defaults to `false`.
        :param pulumi.Input[builtins.str] destination_group: Group to send notification to
        :param pulumi.Input[builtins.str] severity: Allowed values: - `notice` - `warning` - `alert` Defaults to `warning`.
        """
        if destination_event_user is not None:
            pulumi.set(__self__, "destination_event_user", destination_event_user)
        if destination_group is not None:
            pulumi.set(__self__, "destination_group", destination_group)
        if event_rule_id is not None:
            pulumi.set(__self__, "event_rule_id", event_rule_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if transports is not None:
            pulumi.set(__self__, "transports", transports)

    @property
    @pulumi.getter(name="destinationEventUser")
    def destination_event_user(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Send notification to event user Defaults to `false`.
        """
        return pulumi.get(self, "destination_event_user")

    @destination_event_user.setter
    def destination_event_user(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "destination_event_user", value)

    @property
    @pulumi.getter(name="destinationGroup")
    def destination_group(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Group to send notification to
        """
        return pulumi.get(self, "destination_group")

    @destination_group.setter
    def destination_group(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "destination_group", value)

    @property
    @pulumi.getter(name="eventRuleId")
    def event_rule_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "event_rule_id")

    @event_rule_id.setter
    def event_rule_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "event_rule_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `notice` - `warning` - `alert` Defaults to `warning`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def transports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "transports")

    @transports.setter
    def transports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "transports", value)


@pulumi.type_token("authentik:index/eventRule:EventRule")
class EventRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_event_user: Optional[pulumi.Input[builtins.bool]] = None,
                 destination_group: Optional[pulumi.Input[builtins.str]] = None,
                 event_rule_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 severity: Optional[pulumi.Input[builtins.str]] = None,
                 transports: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        Create a EventRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] destination_event_user: Send notification to event user Defaults to `false`.
        :param pulumi.Input[builtins.str] destination_group: Group to send notification to
        :param pulumi.Input[builtins.str] severity: Allowed values: - `notice` - `warning` - `alert` Defaults to `warning`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EventRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EventRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_event_user: Optional[pulumi.Input[builtins.bool]] = None,
                 destination_group: Optional[pulumi.Input[builtins.str]] = None,
                 event_rule_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 severity: Optional[pulumi.Input[builtins.str]] = None,
                 transports: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventRuleArgs.__new__(EventRuleArgs)

            __props__.__dict__["destination_event_user"] = destination_event_user
            __props__.__dict__["destination_group"] = destination_group
            __props__.__dict__["event_rule_id"] = event_rule_id
            __props__.__dict__["name"] = name
            __props__.__dict__["severity"] = severity
            if transports is None and not opts.urn:
                raise TypeError("Missing required property 'transports'")
            __props__.__dict__["transports"] = transports
        super(EventRule, __self__).__init__(
            'authentik:index/eventRule:EventRule',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            destination_event_user: Optional[pulumi.Input[builtins.bool]] = None,
            destination_group: Optional[pulumi.Input[builtins.str]] = None,
            event_rule_id: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            severity: Optional[pulumi.Input[builtins.str]] = None,
            transports: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None) -> 'EventRule':
        """
        Get an existing EventRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] destination_event_user: Send notification to event user Defaults to `false`.
        :param pulumi.Input[builtins.str] destination_group: Group to send notification to
        :param pulumi.Input[builtins.str] severity: Allowed values: - `notice` - `warning` - `alert` Defaults to `warning`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventRuleState.__new__(_EventRuleState)

        __props__.__dict__["destination_event_user"] = destination_event_user
        __props__.__dict__["destination_group"] = destination_group
        __props__.__dict__["event_rule_id"] = event_rule_id
        __props__.__dict__["name"] = name
        __props__.__dict__["severity"] = severity
        __props__.__dict__["transports"] = transports
        return EventRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="destinationEventUser")
    def destination_event_user(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Send notification to event user Defaults to `false`.
        """
        return pulumi.get(self, "destination_event_user")

    @property
    @pulumi.getter(name="destinationGroup")
    def destination_group(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Group to send notification to
        """
        return pulumi.get(self, "destination_group")

    @property
    @pulumi.getter(name="eventRuleId")
    def event_rule_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "event_rule_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Allowed values: - `notice` - `warning` - `alert` Defaults to `warning`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def transports(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "transports")

