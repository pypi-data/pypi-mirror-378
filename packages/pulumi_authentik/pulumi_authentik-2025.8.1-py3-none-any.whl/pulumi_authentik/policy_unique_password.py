# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['PolicyUniquePasswordArgs', 'PolicyUniquePassword']

@pulumi.input_type
class PolicyUniquePasswordArgs:
    def __init__(__self__, *,
                 execution_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 num_historical_passwords: Optional[pulumi.Input[builtins.float]] = None,
                 password_field: Optional[pulumi.Input[builtins.str]] = None,
                 policy_unique_password_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a PolicyUniquePassword resource.
        :param pulumi.Input[builtins.bool] execution_logging: Defaults to `false`.
        :param pulumi.Input[builtins.float] num_historical_passwords: Defaults to `1`.
        :param pulumi.Input[builtins.str] password_field: Defaults to `password`.
        """
        if execution_logging is not None:
            pulumi.set(__self__, "execution_logging", execution_logging)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if num_historical_passwords is not None:
            pulumi.set(__self__, "num_historical_passwords", num_historical_passwords)
        if password_field is not None:
            pulumi.set(__self__, "password_field", password_field)
        if policy_unique_password_id is not None:
            pulumi.set(__self__, "policy_unique_password_id", policy_unique_password_id)

    @property
    @pulumi.getter(name="executionLogging")
    def execution_logging(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "execution_logging")

    @execution_logging.setter
    def execution_logging(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "execution_logging", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="numHistoricalPasswords")
    def num_historical_passwords(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Defaults to `1`.
        """
        return pulumi.get(self, "num_historical_passwords")

    @num_historical_passwords.setter
    def num_historical_passwords(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "num_historical_passwords", value)

    @property
    @pulumi.getter(name="passwordField")
    def password_field(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Defaults to `password`.
        """
        return pulumi.get(self, "password_field")

    @password_field.setter
    def password_field(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password_field", value)

    @property
    @pulumi.getter(name="policyUniquePasswordId")
    def policy_unique_password_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "policy_unique_password_id")

    @policy_unique_password_id.setter
    def policy_unique_password_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy_unique_password_id", value)


@pulumi.input_type
class _PolicyUniquePasswordState:
    def __init__(__self__, *,
                 execution_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 num_historical_passwords: Optional[pulumi.Input[builtins.float]] = None,
                 password_field: Optional[pulumi.Input[builtins.str]] = None,
                 policy_unique_password_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering PolicyUniquePassword resources.
        :param pulumi.Input[builtins.bool] execution_logging: Defaults to `false`.
        :param pulumi.Input[builtins.float] num_historical_passwords: Defaults to `1`.
        :param pulumi.Input[builtins.str] password_field: Defaults to `password`.
        """
        if execution_logging is not None:
            pulumi.set(__self__, "execution_logging", execution_logging)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if num_historical_passwords is not None:
            pulumi.set(__self__, "num_historical_passwords", num_historical_passwords)
        if password_field is not None:
            pulumi.set(__self__, "password_field", password_field)
        if policy_unique_password_id is not None:
            pulumi.set(__self__, "policy_unique_password_id", policy_unique_password_id)

    @property
    @pulumi.getter(name="executionLogging")
    def execution_logging(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "execution_logging")

    @execution_logging.setter
    def execution_logging(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "execution_logging", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="numHistoricalPasswords")
    def num_historical_passwords(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Defaults to `1`.
        """
        return pulumi.get(self, "num_historical_passwords")

    @num_historical_passwords.setter
    def num_historical_passwords(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "num_historical_passwords", value)

    @property
    @pulumi.getter(name="passwordField")
    def password_field(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Defaults to `password`.
        """
        return pulumi.get(self, "password_field")

    @password_field.setter
    def password_field(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password_field", value)

    @property
    @pulumi.getter(name="policyUniquePasswordId")
    def policy_unique_password_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "policy_unique_password_id")

    @policy_unique_password_id.setter
    def policy_unique_password_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy_unique_password_id", value)


@pulumi.type_token("authentik:index/policyUniquePassword:PolicyUniquePassword")
class PolicyUniquePassword(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 execution_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 num_historical_passwords: Optional[pulumi.Input[builtins.float]] = None,
                 password_field: Optional[pulumi.Input[builtins.str]] = None,
                 policy_unique_password_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a PolicyUniquePassword resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] execution_logging: Defaults to `false`.
        :param pulumi.Input[builtins.float] num_historical_passwords: Defaults to `1`.
        :param pulumi.Input[builtins.str] password_field: Defaults to `password`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PolicyUniquePasswordArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PolicyUniquePassword resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PolicyUniquePasswordArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyUniquePasswordArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 execution_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 num_historical_passwords: Optional[pulumi.Input[builtins.float]] = None,
                 password_field: Optional[pulumi.Input[builtins.str]] = None,
                 policy_unique_password_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyUniquePasswordArgs.__new__(PolicyUniquePasswordArgs)

            __props__.__dict__["execution_logging"] = execution_logging
            __props__.__dict__["name"] = name
            __props__.__dict__["num_historical_passwords"] = num_historical_passwords
            __props__.__dict__["password_field"] = password_field
            __props__.__dict__["policy_unique_password_id"] = policy_unique_password_id
        super(PolicyUniquePassword, __self__).__init__(
            'authentik:index/policyUniquePassword:PolicyUniquePassword',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            execution_logging: Optional[pulumi.Input[builtins.bool]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            num_historical_passwords: Optional[pulumi.Input[builtins.float]] = None,
            password_field: Optional[pulumi.Input[builtins.str]] = None,
            policy_unique_password_id: Optional[pulumi.Input[builtins.str]] = None) -> 'PolicyUniquePassword':
        """
        Get an existing PolicyUniquePassword resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] execution_logging: Defaults to `false`.
        :param pulumi.Input[builtins.float] num_historical_passwords: Defaults to `1`.
        :param pulumi.Input[builtins.str] password_field: Defaults to `password`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyUniquePasswordState.__new__(_PolicyUniquePasswordState)

        __props__.__dict__["execution_logging"] = execution_logging
        __props__.__dict__["name"] = name
        __props__.__dict__["num_historical_passwords"] = num_historical_passwords
        __props__.__dict__["password_field"] = password_field
        __props__.__dict__["policy_unique_password_id"] = policy_unique_password_id
        return PolicyUniquePassword(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="executionLogging")
    def execution_logging(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "execution_logging")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numHistoricalPasswords")
    def num_historical_passwords(self) -> pulumi.Output[Optional[builtins.float]]:
        """
        Defaults to `1`.
        """
        return pulumi.get(self, "num_historical_passwords")

    @property
    @pulumi.getter(name="passwordField")
    def password_field(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Defaults to `password`.
        """
        return pulumi.get(self, "password_field")

    @property
    @pulumi.getter(name="policyUniquePasswordId")
    def policy_unique_password_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "policy_unique_password_id")

