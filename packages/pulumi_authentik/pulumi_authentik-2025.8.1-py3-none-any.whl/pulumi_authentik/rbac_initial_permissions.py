# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['RbacInitialPermissionsArgs', 'RbacInitialPermissions']

@pulumi.input_type
class RbacInitialPermissionsArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[builtins.str],
                 permissions: pulumi.Input[Sequence[pulumi.Input[builtins.float]]],
                 role: pulumi.Input[builtins.str],
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 rbac_initial_permissions_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a RbacInitialPermissions resource.
        :param pulumi.Input[builtins.str] mode: Allowed values: - `user` - `role`
        """
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "role", role)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rbac_initial_permissions_id is not None:
            pulumi.set(__self__, "rbac_initial_permissions_id", rbac_initial_permissions_id)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[builtins.str]:
        """
        Allowed values: - `user` - `role`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.float]]]:
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.float]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="rbacInitialPermissionsId")
    def rbac_initial_permissions_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rbac_initial_permissions_id")

    @rbac_initial_permissions_id.setter
    def rbac_initial_permissions_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rbac_initial_permissions_id", value)


@pulumi.input_type
class _RbacInitialPermissionsState:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]] = None,
                 rbac_initial_permissions_id: Optional[pulumi.Input[builtins.str]] = None,
                 role: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering RbacInitialPermissions resources.
        :param pulumi.Input[builtins.str] mode: Allowed values: - `user` - `role`
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if rbac_initial_permissions_id is not None:
            pulumi.set(__self__, "rbac_initial_permissions_id", rbac_initial_permissions_id)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `user` - `role`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]]:
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter(name="rbacInitialPermissionsId")
    def rbac_initial_permissions_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "rbac_initial_permissions_id")

    @rbac_initial_permissions_id.setter
    def rbac_initial_permissions_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "rbac_initial_permissions_id", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "role", value)


@pulumi.type_token("authentik:index/rbacInitialPermissions:RbacInitialPermissions")
class RbacInitialPermissions(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]] = None,
                 rbac_initial_permissions_id: Optional[pulumi.Input[builtins.str]] = None,
                 role: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a RbacInitialPermissions resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] mode: Allowed values: - `user` - `role`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RbacInitialPermissionsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RbacInitialPermissions resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RbacInitialPermissionsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RbacInitialPermissionsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 mode: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]] = None,
                 rbac_initial_permissions_id: Optional[pulumi.Input[builtins.str]] = None,
                 role: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RbacInitialPermissionsArgs.__new__(RbacInitialPermissionsArgs)

            if mode is None and not opts.urn:
                raise TypeError("Missing required property 'mode'")
            __props__.__dict__["mode"] = mode
            __props__.__dict__["name"] = name
            if permissions is None and not opts.urn:
                raise TypeError("Missing required property 'permissions'")
            __props__.__dict__["permissions"] = permissions
            __props__.__dict__["rbac_initial_permissions_id"] = rbac_initial_permissions_id
            if role is None and not opts.urn:
                raise TypeError("Missing required property 'role'")
            __props__.__dict__["role"] = role
        super(RbacInitialPermissions, __self__).__init__(
            'authentik:index/rbacInitialPermissions:RbacInitialPermissions',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            mode: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]] = None,
            rbac_initial_permissions_id: Optional[pulumi.Input[builtins.str]] = None,
            role: Optional[pulumi.Input[builtins.str]] = None) -> 'RbacInitialPermissions':
        """
        Get an existing RbacInitialPermissions resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] mode: Allowed values: - `user` - `role`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RbacInitialPermissionsState.__new__(_RbacInitialPermissionsState)

        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["permissions"] = permissions
        __props__.__dict__["rbac_initial_permissions_id"] = rbac_initial_permissions_id
        __props__.__dict__["role"] = role
        return RbacInitialPermissions(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[builtins.str]:
        """
        Allowed values: - `user` - `role`
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Sequence[builtins.float]]:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter(name="rbacInitialPermissionsId")
    def rbac_initial_permissions_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "rbac_initial_permissions_id")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "role")

