# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetServiceConnectionKubernetesResult',
    'AwaitableGetServiceConnectionKubernetesResult',
    'get_service_connection_kubernetes',
    'get_service_connection_kubernetes_output',
]

@pulumi.output_type
class GetServiceConnectionKubernetesResult:
    """
    A collection of values returned by getServiceConnectionKubernetes.
    """
    def __init__(__self__, id=None, kubeconfig=None, local=None, name=None, verify_ssl=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kubeconfig and not isinstance(kubeconfig, str):
            raise TypeError("Expected argument 'kubeconfig' to be a str")
        pulumi.set(__self__, "kubeconfig", kubeconfig)
        if local and not isinstance(local, bool):
            raise TypeError("Expected argument 'local' to be a bool")
        pulumi.set(__self__, "local", local)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if verify_ssl and not isinstance(verify_ssl, bool):
            raise TypeError("Expected argument 'verify_ssl' to be a bool")
        pulumi.set(__self__, "verify_ssl", verify_ssl)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kubeconfig(self) -> builtins.str:
        return pulumi.get(self, "kubeconfig")

    @property
    @pulumi.getter
    def local(self) -> builtins.bool:
        return pulumi.get(self, "local")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="verifySsl")
    def verify_ssl(self) -> builtins.bool:
        return pulumi.get(self, "verify_ssl")


class AwaitableGetServiceConnectionKubernetesResult(GetServiceConnectionKubernetesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceConnectionKubernetesResult(
            id=self.id,
            kubeconfig=self.kubeconfig,
            local=self.local,
            name=self.name,
            verify_ssl=self.verify_ssl)


def get_service_connection_kubernetes(id: Optional[builtins.str] = None,
                                      kubeconfig: Optional[builtins.str] = None,
                                      local: Optional[builtins.bool] = None,
                                      name: Optional[builtins.str] = None,
                                      verify_ssl: Optional[builtins.bool] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceConnectionKubernetesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['kubeconfig'] = kubeconfig
    __args__['local'] = local
    __args__['name'] = name
    __args__['verifySsl'] = verify_ssl
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('authentik:index/getServiceConnectionKubernetes:getServiceConnectionKubernetes', __args__, opts=opts, typ=GetServiceConnectionKubernetesResult, package_ref=_utilities.get_package()).value

    return AwaitableGetServiceConnectionKubernetesResult(
        id=pulumi.get(__ret__, 'id'),
        kubeconfig=pulumi.get(__ret__, 'kubeconfig'),
        local=pulumi.get(__ret__, 'local'),
        name=pulumi.get(__ret__, 'name'),
        verify_ssl=pulumi.get(__ret__, 'verify_ssl'))
def get_service_connection_kubernetes_output(id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                             kubeconfig: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                             local: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                                             name: Optional[pulumi.Input[builtins.str]] = None,
                                             verify_ssl: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceConnectionKubernetesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['kubeconfig'] = kubeconfig
    __args__['local'] = local
    __args__['name'] = name
    __args__['verifySsl'] = verify_ssl
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('authentik:index/getServiceConnectionKubernetes:getServiceConnectionKubernetes', __args__, opts=opts, typ=GetServiceConnectionKubernetesResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetServiceConnectionKubernetesResult(
        id=pulumi.get(__response__, 'id'),
        kubeconfig=pulumi.get(__response__, 'kubeconfig'),
        local=pulumi.get(__response__, 'local'),
        name=pulumi.get(__response__, 'name'),
        verify_ssl=pulumi.get(__response__, 'verify_ssl')))
