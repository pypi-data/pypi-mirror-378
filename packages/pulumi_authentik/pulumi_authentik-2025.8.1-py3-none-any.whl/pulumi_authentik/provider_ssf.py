# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProviderSsfArgs', 'ProviderSsf']

@pulumi.input_type
class ProviderSsfArgs:
    def __init__(__self__, *,
                 event_retention: Optional[pulumi.Input[builtins.str]] = None,
                 jwt_federation_providers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 provider_ssf_id: Optional[pulumi.Input[builtins.str]] = None,
                 signing_key: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ProviderSsf resource.
        :param pulumi.Input[builtins.str] event_retention: Format: hours=1;minutes=2;seconds=3. Defaults to `days=30`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.float]]] jwt_federation_providers: JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
        """
        if event_retention is not None:
            pulumi.set(__self__, "event_retention", event_retention)
        if jwt_federation_providers is not None:
            pulumi.set(__self__, "jwt_federation_providers", jwt_federation_providers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_ssf_id is not None:
            pulumi.set(__self__, "provider_ssf_id", provider_ssf_id)
        if signing_key is not None:
            pulumi.set(__self__, "signing_key", signing_key)

    @property
    @pulumi.getter(name="eventRetention")
    def event_retention(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Format: hours=1;minutes=2;seconds=3. Defaults to `days=30`.
        """
        return pulumi.get(self, "event_retention")

    @event_retention.setter
    def event_retention(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "event_retention", value)

    @property
    @pulumi.getter(name="jwtFederationProviders")
    def jwt_federation_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]]:
        """
        JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
        """
        return pulumi.get(self, "jwt_federation_providers")

    @jwt_federation_providers.setter
    def jwt_federation_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]]):
        pulumi.set(self, "jwt_federation_providers", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="providerSsfId")
    def provider_ssf_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "provider_ssf_id")

    @provider_ssf_id.setter
    def provider_ssf_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "provider_ssf_id", value)

    @property
    @pulumi.getter(name="signingKey")
    def signing_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "signing_key")

    @signing_key.setter
    def signing_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "signing_key", value)


@pulumi.input_type
class _ProviderSsfState:
    def __init__(__self__, *,
                 event_retention: Optional[pulumi.Input[builtins.str]] = None,
                 jwt_federation_providers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 provider_ssf_id: Optional[pulumi.Input[builtins.str]] = None,
                 signing_key: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering ProviderSsf resources.
        :param pulumi.Input[builtins.str] event_retention: Format: hours=1;minutes=2;seconds=3. Defaults to `days=30`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.float]]] jwt_federation_providers: JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
        """
        if event_retention is not None:
            pulumi.set(__self__, "event_retention", event_retention)
        if jwt_federation_providers is not None:
            pulumi.set(__self__, "jwt_federation_providers", jwt_federation_providers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_ssf_id is not None:
            pulumi.set(__self__, "provider_ssf_id", provider_ssf_id)
        if signing_key is not None:
            pulumi.set(__self__, "signing_key", signing_key)

    @property
    @pulumi.getter(name="eventRetention")
    def event_retention(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Format: hours=1;minutes=2;seconds=3. Defaults to `days=30`.
        """
        return pulumi.get(self, "event_retention")

    @event_retention.setter
    def event_retention(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "event_retention", value)

    @property
    @pulumi.getter(name="jwtFederationProviders")
    def jwt_federation_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]]:
        """
        JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
        """
        return pulumi.get(self, "jwt_federation_providers")

    @jwt_federation_providers.setter
    def jwt_federation_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]]):
        pulumi.set(self, "jwt_federation_providers", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="providerSsfId")
    def provider_ssf_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "provider_ssf_id")

    @provider_ssf_id.setter
    def provider_ssf_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "provider_ssf_id", value)

    @property
    @pulumi.getter(name="signingKey")
    def signing_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "signing_key")

    @signing_key.setter
    def signing_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "signing_key", value)


@pulumi.type_token("authentik:index/providerSsf:ProviderSsf")
class ProviderSsf(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_retention: Optional[pulumi.Input[builtins.str]] = None,
                 jwt_federation_providers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 provider_ssf_id: Optional[pulumi.Input[builtins.str]] = None,
                 signing_key: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a ProviderSsf resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] event_retention: Format: hours=1;minutes=2;seconds=3. Defaults to `days=30`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.float]]] jwt_federation_providers: JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderSsfArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ProviderSsf resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProviderSsfArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderSsfArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_retention: Optional[pulumi.Input[builtins.str]] = None,
                 jwt_federation_providers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 provider_ssf_id: Optional[pulumi.Input[builtins.str]] = None,
                 signing_key: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderSsfArgs.__new__(ProviderSsfArgs)

            __props__.__dict__["event_retention"] = event_retention
            __props__.__dict__["jwt_federation_providers"] = jwt_federation_providers
            __props__.__dict__["name"] = name
            __props__.__dict__["provider_ssf_id"] = provider_ssf_id
            __props__.__dict__["signing_key"] = signing_key
        super(ProviderSsf, __self__).__init__(
            'authentik:index/providerSsf:ProviderSsf',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            event_retention: Optional[pulumi.Input[builtins.str]] = None,
            jwt_federation_providers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            provider_ssf_id: Optional[pulumi.Input[builtins.str]] = None,
            signing_key: Optional[pulumi.Input[builtins.str]] = None) -> 'ProviderSsf':
        """
        Get an existing ProviderSsf resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] event_retention: Format: hours=1;minutes=2;seconds=3. Defaults to `days=30`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.float]]] jwt_federation_providers: JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProviderSsfState.__new__(_ProviderSsfState)

        __props__.__dict__["event_retention"] = event_retention
        __props__.__dict__["jwt_federation_providers"] = jwt_federation_providers
        __props__.__dict__["name"] = name
        __props__.__dict__["provider_ssf_id"] = provider_ssf_id
        __props__.__dict__["signing_key"] = signing_key
        return ProviderSsf(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="eventRetention")
    def event_retention(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Format: hours=1;minutes=2;seconds=3. Defaults to `days=30`.
        """
        return pulumi.get(self, "event_retention")

    @property
    @pulumi.getter(name="jwtFederationProviders")
    def jwt_federation_providers(self) -> pulumi.Output[Optional[Sequence[builtins.float]]]:
        """
        JWTs issued by any of the configured providers can be used to authenticate on behalf of this provider.
        """
        return pulumi.get(self, "jwt_federation_providers")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerSsfId")
    def provider_ssf_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "provider_ssf_id")

    @property
    @pulumi.getter(name="signingKey")
    def signing_key(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "signing_key")

