# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SourceOauthArgs', 'SourceOauth']

@pulumi.input_type
class SourceOauthArgs:
    def __init__(__self__, *,
                 consumer_key: pulumi.Input[builtins.str],
                 consumer_secret: pulumi.Input[builtins.str],
                 provider_type: pulumi.Input[builtins.str],
                 slug: pulumi.Input[builtins.str],
                 access_token_url: Optional[pulumi.Input[builtins.str]] = None,
                 additional_scopes: Optional[pulumi.Input[builtins.str]] = None,
                 authentication_flow: Optional[pulumi.Input[builtins.str]] = None,
                 authorization_code_auth_method: Optional[pulumi.Input[builtins.str]] = None,
                 authorization_url: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 enrollment_flow: Optional[pulumi.Input[builtins.str]] = None,
                 group_matching_mode: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 oidc_jwks: Optional[pulumi.Input[builtins.str]] = None,
                 oidc_jwks_url: Optional[pulumi.Input[builtins.str]] = None,
                 oidc_well_known_url: Optional[pulumi.Input[builtins.str]] = None,
                 policy_engine_mode: Optional[pulumi.Input[builtins.str]] = None,
                 profile_url: Optional[pulumi.Input[builtins.str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 property_mappings_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 request_token_url: Optional[pulumi.Input[builtins.str]] = None,
                 source_oauth_id: Optional[pulumi.Input[builtins.str]] = None,
                 user_matching_mode: Optional[pulumi.Input[builtins.str]] = None,
                 user_path_template: Optional[pulumi.Input[builtins.str]] = None,
                 uuid: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a SourceOauth resource.
        :param pulumi.Input[builtins.str] provider_type: Allowed values: - `apple` - `openidconnect` - `entraid` - `azuread` - `discord` - `facebook` - `github` - `gitlab` -
               `google` - `mailcow` - `okta` - `patreon` - `reddit` - `twitch` - `twitter`
        :param pulumi.Input[builtins.str] access_token_url: Only required for OAuth1.
        :param pulumi.Input[builtins.str] authorization_code_auth_method: Allowed values: - `basic_auth` - `post_body` Defaults to `basic_auth`.
        :param pulumi.Input[builtins.str] authorization_url: Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        :param pulumi.Input[builtins.bool] enabled: Defaults to `true`.
        :param pulumi.Input[builtins.str] group_matching_mode: Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        :param pulumi.Input[builtins.str] oidc_jwks: Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
               pass objects. Generated.
        :param pulumi.Input[builtins.str] oidc_jwks_url: Automatically configure JWKS if not specified by `oidc_well_known_url`.
        :param pulumi.Input[builtins.str] oidc_well_known_url: Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
               `.well-known/openid-configuration`.
        :param pulumi.Input[builtins.str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[builtins.str] profile_url: Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        :param pulumi.Input[builtins.str] request_token_url: Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        :param pulumi.Input[builtins.str] user_matching_mode: Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
               `identifier`.
        :param pulumi.Input[builtins.str] user_path_template: Defaults to `goauthentik.io/sources/%(slug)s`.
        :param pulumi.Input[builtins.str] uuid: Generated.
        """
        pulumi.set(__self__, "consumer_key", consumer_key)
        pulumi.set(__self__, "consumer_secret", consumer_secret)
        pulumi.set(__self__, "provider_type", provider_type)
        pulumi.set(__self__, "slug", slug)
        if access_token_url is not None:
            pulumi.set(__self__, "access_token_url", access_token_url)
        if additional_scopes is not None:
            pulumi.set(__self__, "additional_scopes", additional_scopes)
        if authentication_flow is not None:
            pulumi.set(__self__, "authentication_flow", authentication_flow)
        if authorization_code_auth_method is not None:
            pulumi.set(__self__, "authorization_code_auth_method", authorization_code_auth_method)
        if authorization_url is not None:
            pulumi.set(__self__, "authorization_url", authorization_url)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enrollment_flow is not None:
            pulumi.set(__self__, "enrollment_flow", enrollment_flow)
        if group_matching_mode is not None:
            pulumi.set(__self__, "group_matching_mode", group_matching_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oidc_jwks is not None:
            pulumi.set(__self__, "oidc_jwks", oidc_jwks)
        if oidc_jwks_url is not None:
            pulumi.set(__self__, "oidc_jwks_url", oidc_jwks_url)
        if oidc_well_known_url is not None:
            pulumi.set(__self__, "oidc_well_known_url", oidc_well_known_url)
        if policy_engine_mode is not None:
            pulumi.set(__self__, "policy_engine_mode", policy_engine_mode)
        if profile_url is not None:
            pulumi.set(__self__, "profile_url", profile_url)
        if property_mappings is not None:
            pulumi.set(__self__, "property_mappings", property_mappings)
        if property_mappings_groups is not None:
            pulumi.set(__self__, "property_mappings_groups", property_mappings_groups)
        if request_token_url is not None:
            pulumi.set(__self__, "request_token_url", request_token_url)
        if source_oauth_id is not None:
            pulumi.set(__self__, "source_oauth_id", source_oauth_id)
        if user_matching_mode is not None:
            pulumi.set(__self__, "user_matching_mode", user_matching_mode)
        if user_path_template is not None:
            pulumi.set(__self__, "user_path_template", user_path_template)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "consumer_key")

    @consumer_key.setter
    def consumer_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "consumer_key", value)

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "consumer_secret")

    @consumer_secret.setter
    def consumer_secret(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "consumer_secret", value)

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> pulumi.Input[builtins.str]:
        """
        Allowed values: - `apple` - `openidconnect` - `entraid` - `azuread` - `discord` - `facebook` - `github` - `gitlab` -
        `google` - `mailcow` - `okta` - `patreon` - `reddit` - `twitch` - `twitter`
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "provider_type", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="accessTokenUrl")
    def access_token_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Only required for OAuth1.
        """
        return pulumi.get(self, "access_token_url")

    @access_token_url.setter
    def access_token_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "access_token_url", value)

    @property
    @pulumi.getter(name="additionalScopes")
    def additional_scopes(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "additional_scopes")

    @additional_scopes.setter
    def additional_scopes(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "additional_scopes", value)

    @property
    @pulumi.getter(name="authenticationFlow")
    def authentication_flow(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authentication_flow")

    @authentication_flow.setter
    def authentication_flow(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authentication_flow", value)

    @property
    @pulumi.getter(name="authorizationCodeAuthMethod")
    def authorization_code_auth_method(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `basic_auth` - `post_body` Defaults to `basic_auth`.
        """
        return pulumi.get(self, "authorization_code_auth_method")

    @authorization_code_auth_method.setter
    def authorization_code_auth_method(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authorization_code_auth_method", value)

    @property
    @pulumi.getter(name="authorizationUrl")
    def authorization_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        """
        return pulumi.get(self, "authorization_url")

    @authorization_url.setter
    def authorization_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authorization_url", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="enrollmentFlow")
    def enrollment_flow(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "enrollment_flow")

    @enrollment_flow.setter
    def enrollment_flow(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enrollment_flow", value)

    @property
    @pulumi.getter(name="groupMatchingMode")
    def group_matching_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        """
        return pulumi.get(self, "group_matching_mode")

    @group_matching_mode.setter
    def group_matching_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "group_matching_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oidcJwks")
    def oidc_jwks(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
        pass objects. Generated.
        """
        return pulumi.get(self, "oidc_jwks")

    @oidc_jwks.setter
    def oidc_jwks(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "oidc_jwks", value)

    @property
    @pulumi.getter(name="oidcJwksUrl")
    def oidc_jwks_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Automatically configure JWKS if not specified by `oidc_well_known_url`.
        """
        return pulumi.get(self, "oidc_jwks_url")

    @oidc_jwks_url.setter
    def oidc_jwks_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "oidc_jwks_url", value)

    @property
    @pulumi.getter(name="oidcWellKnownUrl")
    def oidc_well_known_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
        `.well-known/openid-configuration`.
        """
        return pulumi.get(self, "oidc_well_known_url")

    @oidc_well_known_url.setter
    def oidc_well_known_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "oidc_well_known_url", value)

    @property
    @pulumi.getter(name="policyEngineMode")
    def policy_engine_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `all` - `any` Defaults to `any`.
        """
        return pulumi.get(self, "policy_engine_mode")

    @policy_engine_mode.setter
    def policy_engine_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy_engine_mode", value)

    @property
    @pulumi.getter(name="profileUrl")
    def profile_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        """
        return pulumi.get(self, "profile_url")

    @profile_url.setter
    def profile_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "profile_url", value)

    @property
    @pulumi.getter(name="propertyMappings")
    def property_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "property_mappings")

    @property_mappings.setter
    def property_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "property_mappings", value)

    @property
    @pulumi.getter(name="propertyMappingsGroups")
    def property_mappings_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "property_mappings_groups")

    @property_mappings_groups.setter
    def property_mappings_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "property_mappings_groups", value)

    @property
    @pulumi.getter(name="requestTokenUrl")
    def request_token_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        """
        return pulumi.get(self, "request_token_url")

    @request_token_url.setter
    def request_token_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "request_token_url", value)

    @property
    @pulumi.getter(name="sourceOauthId")
    def source_oauth_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "source_oauth_id")

    @source_oauth_id.setter
    def source_oauth_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "source_oauth_id", value)

    @property
    @pulumi.getter(name="userMatchingMode")
    def user_matching_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
        `identifier`.
        """
        return pulumi.get(self, "user_matching_mode")

    @user_matching_mode.setter
    def user_matching_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_matching_mode", value)

    @property
    @pulumi.getter(name="userPathTemplate")
    def user_path_template(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Defaults to `goauthentik.io/sources/%(slug)s`.
        """
        return pulumi.get(self, "user_path_template")

    @user_path_template.setter
    def user_path_template(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_path_template", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Generated.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uuid", value)


@pulumi.input_type
class _SourceOauthState:
    def __init__(__self__, *,
                 access_token_url: Optional[pulumi.Input[builtins.str]] = None,
                 additional_scopes: Optional[pulumi.Input[builtins.str]] = None,
                 authentication_flow: Optional[pulumi.Input[builtins.str]] = None,
                 authorization_code_auth_method: Optional[pulumi.Input[builtins.str]] = None,
                 authorization_url: Optional[pulumi.Input[builtins.str]] = None,
                 callback_uri: Optional[pulumi.Input[builtins.str]] = None,
                 consumer_key: Optional[pulumi.Input[builtins.str]] = None,
                 consumer_secret: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 enrollment_flow: Optional[pulumi.Input[builtins.str]] = None,
                 group_matching_mode: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 oidc_jwks: Optional[pulumi.Input[builtins.str]] = None,
                 oidc_jwks_url: Optional[pulumi.Input[builtins.str]] = None,
                 oidc_well_known_url: Optional[pulumi.Input[builtins.str]] = None,
                 policy_engine_mode: Optional[pulumi.Input[builtins.str]] = None,
                 profile_url: Optional[pulumi.Input[builtins.str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 property_mappings_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 provider_type: Optional[pulumi.Input[builtins.str]] = None,
                 request_token_url: Optional[pulumi.Input[builtins.str]] = None,
                 slug: Optional[pulumi.Input[builtins.str]] = None,
                 source_oauth_id: Optional[pulumi.Input[builtins.str]] = None,
                 user_matching_mode: Optional[pulumi.Input[builtins.str]] = None,
                 user_path_template: Optional[pulumi.Input[builtins.str]] = None,
                 uuid: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering SourceOauth resources.
        :param pulumi.Input[builtins.str] access_token_url: Only required for OAuth1.
        :param pulumi.Input[builtins.str] authorization_code_auth_method: Allowed values: - `basic_auth` - `post_body` Defaults to `basic_auth`.
        :param pulumi.Input[builtins.str] authorization_url: Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        :param pulumi.Input[builtins.str] callback_uri: Generated.
        :param pulumi.Input[builtins.bool] enabled: Defaults to `true`.
        :param pulumi.Input[builtins.str] group_matching_mode: Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        :param pulumi.Input[builtins.str] oidc_jwks: Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
               pass objects. Generated.
        :param pulumi.Input[builtins.str] oidc_jwks_url: Automatically configure JWKS if not specified by `oidc_well_known_url`.
        :param pulumi.Input[builtins.str] oidc_well_known_url: Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
               `.well-known/openid-configuration`.
        :param pulumi.Input[builtins.str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[builtins.str] profile_url: Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        :param pulumi.Input[builtins.str] provider_type: Allowed values: - `apple` - `openidconnect` - `entraid` - `azuread` - `discord` - `facebook` - `github` - `gitlab` -
               `google` - `mailcow` - `okta` - `patreon` - `reddit` - `twitch` - `twitter`
        :param pulumi.Input[builtins.str] request_token_url: Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        :param pulumi.Input[builtins.str] user_matching_mode: Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
               `identifier`.
        :param pulumi.Input[builtins.str] user_path_template: Defaults to `goauthentik.io/sources/%(slug)s`.
        :param pulumi.Input[builtins.str] uuid: Generated.
        """
        if access_token_url is not None:
            pulumi.set(__self__, "access_token_url", access_token_url)
        if additional_scopes is not None:
            pulumi.set(__self__, "additional_scopes", additional_scopes)
        if authentication_flow is not None:
            pulumi.set(__self__, "authentication_flow", authentication_flow)
        if authorization_code_auth_method is not None:
            pulumi.set(__self__, "authorization_code_auth_method", authorization_code_auth_method)
        if authorization_url is not None:
            pulumi.set(__self__, "authorization_url", authorization_url)
        if callback_uri is not None:
            pulumi.set(__self__, "callback_uri", callback_uri)
        if consumer_key is not None:
            pulumi.set(__self__, "consumer_key", consumer_key)
        if consumer_secret is not None:
            pulumi.set(__self__, "consumer_secret", consumer_secret)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enrollment_flow is not None:
            pulumi.set(__self__, "enrollment_flow", enrollment_flow)
        if group_matching_mode is not None:
            pulumi.set(__self__, "group_matching_mode", group_matching_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oidc_jwks is not None:
            pulumi.set(__self__, "oidc_jwks", oidc_jwks)
        if oidc_jwks_url is not None:
            pulumi.set(__self__, "oidc_jwks_url", oidc_jwks_url)
        if oidc_well_known_url is not None:
            pulumi.set(__self__, "oidc_well_known_url", oidc_well_known_url)
        if policy_engine_mode is not None:
            pulumi.set(__self__, "policy_engine_mode", policy_engine_mode)
        if profile_url is not None:
            pulumi.set(__self__, "profile_url", profile_url)
        if property_mappings is not None:
            pulumi.set(__self__, "property_mappings", property_mappings)
        if property_mappings_groups is not None:
            pulumi.set(__self__, "property_mappings_groups", property_mappings_groups)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)
        if request_token_url is not None:
            pulumi.set(__self__, "request_token_url", request_token_url)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if source_oauth_id is not None:
            pulumi.set(__self__, "source_oauth_id", source_oauth_id)
        if user_matching_mode is not None:
            pulumi.set(__self__, "user_matching_mode", user_matching_mode)
        if user_path_template is not None:
            pulumi.set(__self__, "user_path_template", user_path_template)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="accessTokenUrl")
    def access_token_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Only required for OAuth1.
        """
        return pulumi.get(self, "access_token_url")

    @access_token_url.setter
    def access_token_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "access_token_url", value)

    @property
    @pulumi.getter(name="additionalScopes")
    def additional_scopes(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "additional_scopes")

    @additional_scopes.setter
    def additional_scopes(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "additional_scopes", value)

    @property
    @pulumi.getter(name="authenticationFlow")
    def authentication_flow(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "authentication_flow")

    @authentication_flow.setter
    def authentication_flow(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authentication_flow", value)

    @property
    @pulumi.getter(name="authorizationCodeAuthMethod")
    def authorization_code_auth_method(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `basic_auth` - `post_body` Defaults to `basic_auth`.
        """
        return pulumi.get(self, "authorization_code_auth_method")

    @authorization_code_auth_method.setter
    def authorization_code_auth_method(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authorization_code_auth_method", value)

    @property
    @pulumi.getter(name="authorizationUrl")
    def authorization_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        """
        return pulumi.get(self, "authorization_url")

    @authorization_url.setter
    def authorization_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "authorization_url", value)

    @property
    @pulumi.getter(name="callbackUri")
    def callback_uri(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Generated.
        """
        return pulumi.get(self, "callback_uri")

    @callback_uri.setter
    def callback_uri(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "callback_uri", value)

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "consumer_key")

    @consumer_key.setter
    def consumer_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "consumer_key", value)

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "consumer_secret")

    @consumer_secret.setter
    def consumer_secret(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "consumer_secret", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="enrollmentFlow")
    def enrollment_flow(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "enrollment_flow")

    @enrollment_flow.setter
    def enrollment_flow(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enrollment_flow", value)

    @property
    @pulumi.getter(name="groupMatchingMode")
    def group_matching_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        """
        return pulumi.get(self, "group_matching_mode")

    @group_matching_mode.setter
    def group_matching_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "group_matching_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oidcJwks")
    def oidc_jwks(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
        pass objects. Generated.
        """
        return pulumi.get(self, "oidc_jwks")

    @oidc_jwks.setter
    def oidc_jwks(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "oidc_jwks", value)

    @property
    @pulumi.getter(name="oidcJwksUrl")
    def oidc_jwks_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Automatically configure JWKS if not specified by `oidc_well_known_url`.
        """
        return pulumi.get(self, "oidc_jwks_url")

    @oidc_jwks_url.setter
    def oidc_jwks_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "oidc_jwks_url", value)

    @property
    @pulumi.getter(name="oidcWellKnownUrl")
    def oidc_well_known_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
        `.well-known/openid-configuration`.
        """
        return pulumi.get(self, "oidc_well_known_url")

    @oidc_well_known_url.setter
    def oidc_well_known_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "oidc_well_known_url", value)

    @property
    @pulumi.getter(name="policyEngineMode")
    def policy_engine_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `all` - `any` Defaults to `any`.
        """
        return pulumi.get(self, "policy_engine_mode")

    @policy_engine_mode.setter
    def policy_engine_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy_engine_mode", value)

    @property
    @pulumi.getter(name="profileUrl")
    def profile_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        """
        return pulumi.get(self, "profile_url")

    @profile_url.setter
    def profile_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "profile_url", value)

    @property
    @pulumi.getter(name="propertyMappings")
    def property_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "property_mappings")

    @property_mappings.setter
    def property_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "property_mappings", value)

    @property
    @pulumi.getter(name="propertyMappingsGroups")
    def property_mappings_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "property_mappings_groups")

    @property_mappings_groups.setter
    def property_mappings_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "property_mappings_groups", value)

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `apple` - `openidconnect` - `entraid` - `azuread` - `discord` - `facebook` - `github` - `gitlab` -
        `google` - `mailcow` - `okta` - `patreon` - `reddit` - `twitch` - `twitter`
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "provider_type", value)

    @property
    @pulumi.getter(name="requestTokenUrl")
    def request_token_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        """
        return pulumi.get(self, "request_token_url")

    @request_token_url.setter
    def request_token_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "request_token_url", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="sourceOauthId")
    def source_oauth_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "source_oauth_id")

    @source_oauth_id.setter
    def source_oauth_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "source_oauth_id", value)

    @property
    @pulumi.getter(name="userMatchingMode")
    def user_matching_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
        `identifier`.
        """
        return pulumi.get(self, "user_matching_mode")

    @user_matching_mode.setter
    def user_matching_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_matching_mode", value)

    @property
    @pulumi.getter(name="userPathTemplate")
    def user_path_template(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Defaults to `goauthentik.io/sources/%(slug)s`.
        """
        return pulumi.get(self, "user_path_template")

    @user_path_template.setter
    def user_path_template(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_path_template", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Generated.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uuid", value)


@pulumi.type_token("authentik:index/sourceOauth:SourceOauth")
class SourceOauth(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token_url: Optional[pulumi.Input[builtins.str]] = None,
                 additional_scopes: Optional[pulumi.Input[builtins.str]] = None,
                 authentication_flow: Optional[pulumi.Input[builtins.str]] = None,
                 authorization_code_auth_method: Optional[pulumi.Input[builtins.str]] = None,
                 authorization_url: Optional[pulumi.Input[builtins.str]] = None,
                 consumer_key: Optional[pulumi.Input[builtins.str]] = None,
                 consumer_secret: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 enrollment_flow: Optional[pulumi.Input[builtins.str]] = None,
                 group_matching_mode: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 oidc_jwks: Optional[pulumi.Input[builtins.str]] = None,
                 oidc_jwks_url: Optional[pulumi.Input[builtins.str]] = None,
                 oidc_well_known_url: Optional[pulumi.Input[builtins.str]] = None,
                 policy_engine_mode: Optional[pulumi.Input[builtins.str]] = None,
                 profile_url: Optional[pulumi.Input[builtins.str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 property_mappings_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 provider_type: Optional[pulumi.Input[builtins.str]] = None,
                 request_token_url: Optional[pulumi.Input[builtins.str]] = None,
                 slug: Optional[pulumi.Input[builtins.str]] = None,
                 source_oauth_id: Optional[pulumi.Input[builtins.str]] = None,
                 user_matching_mode: Optional[pulumi.Input[builtins.str]] = None,
                 user_path_template: Optional[pulumi.Input[builtins.str]] = None,
                 uuid: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a SourceOauth resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] access_token_url: Only required for OAuth1.
        :param pulumi.Input[builtins.str] authorization_code_auth_method: Allowed values: - `basic_auth` - `post_body` Defaults to `basic_auth`.
        :param pulumi.Input[builtins.str] authorization_url: Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        :param pulumi.Input[builtins.bool] enabled: Defaults to `true`.
        :param pulumi.Input[builtins.str] group_matching_mode: Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        :param pulumi.Input[builtins.str] oidc_jwks: Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
               pass objects. Generated.
        :param pulumi.Input[builtins.str] oidc_jwks_url: Automatically configure JWKS if not specified by `oidc_well_known_url`.
        :param pulumi.Input[builtins.str] oidc_well_known_url: Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
               `.well-known/openid-configuration`.
        :param pulumi.Input[builtins.str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[builtins.str] profile_url: Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        :param pulumi.Input[builtins.str] provider_type: Allowed values: - `apple` - `openidconnect` - `entraid` - `azuread` - `discord` - `facebook` - `github` - `gitlab` -
               `google` - `mailcow` - `okta` - `patreon` - `reddit` - `twitch` - `twitter`
        :param pulumi.Input[builtins.str] request_token_url: Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        :param pulumi.Input[builtins.str] user_matching_mode: Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
               `identifier`.
        :param pulumi.Input[builtins.str] user_path_template: Defaults to `goauthentik.io/sources/%(slug)s`.
        :param pulumi.Input[builtins.str] uuid: Generated.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SourceOauthArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SourceOauth resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SourceOauthArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SourceOauthArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token_url: Optional[pulumi.Input[builtins.str]] = None,
                 additional_scopes: Optional[pulumi.Input[builtins.str]] = None,
                 authentication_flow: Optional[pulumi.Input[builtins.str]] = None,
                 authorization_code_auth_method: Optional[pulumi.Input[builtins.str]] = None,
                 authorization_url: Optional[pulumi.Input[builtins.str]] = None,
                 consumer_key: Optional[pulumi.Input[builtins.str]] = None,
                 consumer_secret: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 enrollment_flow: Optional[pulumi.Input[builtins.str]] = None,
                 group_matching_mode: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 oidc_jwks: Optional[pulumi.Input[builtins.str]] = None,
                 oidc_jwks_url: Optional[pulumi.Input[builtins.str]] = None,
                 oidc_well_known_url: Optional[pulumi.Input[builtins.str]] = None,
                 policy_engine_mode: Optional[pulumi.Input[builtins.str]] = None,
                 profile_url: Optional[pulumi.Input[builtins.str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 property_mappings_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 provider_type: Optional[pulumi.Input[builtins.str]] = None,
                 request_token_url: Optional[pulumi.Input[builtins.str]] = None,
                 slug: Optional[pulumi.Input[builtins.str]] = None,
                 source_oauth_id: Optional[pulumi.Input[builtins.str]] = None,
                 user_matching_mode: Optional[pulumi.Input[builtins.str]] = None,
                 user_path_template: Optional[pulumi.Input[builtins.str]] = None,
                 uuid: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SourceOauthArgs.__new__(SourceOauthArgs)

            __props__.__dict__["access_token_url"] = access_token_url
            __props__.__dict__["additional_scopes"] = additional_scopes
            __props__.__dict__["authentication_flow"] = authentication_flow
            __props__.__dict__["authorization_code_auth_method"] = authorization_code_auth_method
            __props__.__dict__["authorization_url"] = authorization_url
            if consumer_key is None and not opts.urn:
                raise TypeError("Missing required property 'consumer_key'")
            __props__.__dict__["consumer_key"] = consumer_key
            if consumer_secret is None and not opts.urn:
                raise TypeError("Missing required property 'consumer_secret'")
            __props__.__dict__["consumer_secret"] = None if consumer_secret is None else pulumi.Output.secret(consumer_secret)
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["enrollment_flow"] = enrollment_flow
            __props__.__dict__["group_matching_mode"] = group_matching_mode
            __props__.__dict__["name"] = name
            __props__.__dict__["oidc_jwks"] = oidc_jwks
            __props__.__dict__["oidc_jwks_url"] = oidc_jwks_url
            __props__.__dict__["oidc_well_known_url"] = oidc_well_known_url
            __props__.__dict__["policy_engine_mode"] = policy_engine_mode
            __props__.__dict__["profile_url"] = profile_url
            __props__.__dict__["property_mappings"] = property_mappings
            __props__.__dict__["property_mappings_groups"] = property_mappings_groups
            if provider_type is None and not opts.urn:
                raise TypeError("Missing required property 'provider_type'")
            __props__.__dict__["provider_type"] = provider_type
            __props__.__dict__["request_token_url"] = request_token_url
            if slug is None and not opts.urn:
                raise TypeError("Missing required property 'slug'")
            __props__.__dict__["slug"] = slug
            __props__.__dict__["source_oauth_id"] = source_oauth_id
            __props__.__dict__["user_matching_mode"] = user_matching_mode
            __props__.__dict__["user_path_template"] = user_path_template
            __props__.__dict__["uuid"] = uuid
            __props__.__dict__["callback_uri"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["consumerSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SourceOauth, __self__).__init__(
            'authentik:index/sourceOauth:SourceOauth',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_token_url: Optional[pulumi.Input[builtins.str]] = None,
            additional_scopes: Optional[pulumi.Input[builtins.str]] = None,
            authentication_flow: Optional[pulumi.Input[builtins.str]] = None,
            authorization_code_auth_method: Optional[pulumi.Input[builtins.str]] = None,
            authorization_url: Optional[pulumi.Input[builtins.str]] = None,
            callback_uri: Optional[pulumi.Input[builtins.str]] = None,
            consumer_key: Optional[pulumi.Input[builtins.str]] = None,
            consumer_secret: Optional[pulumi.Input[builtins.str]] = None,
            enabled: Optional[pulumi.Input[builtins.bool]] = None,
            enrollment_flow: Optional[pulumi.Input[builtins.str]] = None,
            group_matching_mode: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            oidc_jwks: Optional[pulumi.Input[builtins.str]] = None,
            oidc_jwks_url: Optional[pulumi.Input[builtins.str]] = None,
            oidc_well_known_url: Optional[pulumi.Input[builtins.str]] = None,
            policy_engine_mode: Optional[pulumi.Input[builtins.str]] = None,
            profile_url: Optional[pulumi.Input[builtins.str]] = None,
            property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            property_mappings_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            provider_type: Optional[pulumi.Input[builtins.str]] = None,
            request_token_url: Optional[pulumi.Input[builtins.str]] = None,
            slug: Optional[pulumi.Input[builtins.str]] = None,
            source_oauth_id: Optional[pulumi.Input[builtins.str]] = None,
            user_matching_mode: Optional[pulumi.Input[builtins.str]] = None,
            user_path_template: Optional[pulumi.Input[builtins.str]] = None,
            uuid: Optional[pulumi.Input[builtins.str]] = None) -> 'SourceOauth':
        """
        Get an existing SourceOauth resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] access_token_url: Only required for OAuth1.
        :param pulumi.Input[builtins.str] authorization_code_auth_method: Allowed values: - `basic_auth` - `post_body` Defaults to `basic_auth`.
        :param pulumi.Input[builtins.str] authorization_url: Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        :param pulumi.Input[builtins.str] callback_uri: Generated.
        :param pulumi.Input[builtins.bool] enabled: Defaults to `true`.
        :param pulumi.Input[builtins.str] group_matching_mode: Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        :param pulumi.Input[builtins.str] oidc_jwks: Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
               pass objects. Generated.
        :param pulumi.Input[builtins.str] oidc_jwks_url: Automatically configure JWKS if not specified by `oidc_well_known_url`.
        :param pulumi.Input[builtins.str] oidc_well_known_url: Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
               `.well-known/openid-configuration`.
        :param pulumi.Input[builtins.str] policy_engine_mode: Allowed values: - `all` - `any` Defaults to `any`.
        :param pulumi.Input[builtins.str] profile_url: Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        :param pulumi.Input[builtins.str] provider_type: Allowed values: - `apple` - `openidconnect` - `entraid` - `azuread` - `discord` - `facebook` - `github` - `gitlab` -
               `google` - `mailcow` - `okta` - `patreon` - `reddit` - `twitch` - `twitter`
        :param pulumi.Input[builtins.str] request_token_url: Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        :param pulumi.Input[builtins.str] user_matching_mode: Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
               `identifier`.
        :param pulumi.Input[builtins.str] user_path_template: Defaults to `goauthentik.io/sources/%(slug)s`.
        :param pulumi.Input[builtins.str] uuid: Generated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SourceOauthState.__new__(_SourceOauthState)

        __props__.__dict__["access_token_url"] = access_token_url
        __props__.__dict__["additional_scopes"] = additional_scopes
        __props__.__dict__["authentication_flow"] = authentication_flow
        __props__.__dict__["authorization_code_auth_method"] = authorization_code_auth_method
        __props__.__dict__["authorization_url"] = authorization_url
        __props__.__dict__["callback_uri"] = callback_uri
        __props__.__dict__["consumer_key"] = consumer_key
        __props__.__dict__["consumer_secret"] = consumer_secret
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["enrollment_flow"] = enrollment_flow
        __props__.__dict__["group_matching_mode"] = group_matching_mode
        __props__.__dict__["name"] = name
        __props__.__dict__["oidc_jwks"] = oidc_jwks
        __props__.__dict__["oidc_jwks_url"] = oidc_jwks_url
        __props__.__dict__["oidc_well_known_url"] = oidc_well_known_url
        __props__.__dict__["policy_engine_mode"] = policy_engine_mode
        __props__.__dict__["profile_url"] = profile_url
        __props__.__dict__["property_mappings"] = property_mappings
        __props__.__dict__["property_mappings_groups"] = property_mappings_groups
        __props__.__dict__["provider_type"] = provider_type
        __props__.__dict__["request_token_url"] = request_token_url
        __props__.__dict__["slug"] = slug
        __props__.__dict__["source_oauth_id"] = source_oauth_id
        __props__.__dict__["user_matching_mode"] = user_matching_mode
        __props__.__dict__["user_path_template"] = user_path_template
        __props__.__dict__["uuid"] = uuid
        return SourceOauth(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessTokenUrl")
    def access_token_url(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Only required for OAuth1.
        """
        return pulumi.get(self, "access_token_url")

    @property
    @pulumi.getter(name="additionalScopes")
    def additional_scopes(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "additional_scopes")

    @property
    @pulumi.getter(name="authenticationFlow")
    def authentication_flow(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "authentication_flow")

    @property
    @pulumi.getter(name="authorizationCodeAuthMethod")
    def authorization_code_auth_method(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Allowed values: - `basic_auth` - `post_body` Defaults to `basic_auth`.
        """
        return pulumi.get(self, "authorization_code_auth_method")

    @property
    @pulumi.getter(name="authorizationUrl")
    def authorization_url(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        """
        return pulumi.get(self, "authorization_url")

    @property
    @pulumi.getter(name="callbackUri")
    def callback_uri(self) -> pulumi.Output[builtins.str]:
        """
        Generated.
        """
        return pulumi.get(self, "callback_uri")

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "consumer_key")

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "consumer_secret")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="enrollmentFlow")
    def enrollment_flow(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "enrollment_flow")

    @property
    @pulumi.getter(name="groupMatchingMode")
    def group_matching_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Allowed values: - `identifier` - `name_link` - `name_deny` Defaults to `identifier`.
        """
        return pulumi.get(self, "group_matching_mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oidcJwks")
    def oidc_jwks(self) -> pulumi.Output[builtins.str]:
        """
        Manually configure JWKS keys for use with machine-to-machine authentication. JSON format expected. Use jsonencode() to
        pass objects. Generated.
        """
        return pulumi.get(self, "oidc_jwks")

    @property
    @pulumi.getter(name="oidcJwksUrl")
    def oidc_jwks_url(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Automatically configure JWKS if not specified by `oidc_well_known_url`.
        """
        return pulumi.get(self, "oidc_jwks_url")

    @property
    @pulumi.getter(name="oidcWellKnownUrl")
    def oidc_well_known_url(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Automatically configure source from OIDC well-known endpoint. URL is taken as is, and should end with
        `.well-known/openid-configuration`.
        """
        return pulumi.get(self, "oidc_well_known_url")

    @property
    @pulumi.getter(name="policyEngineMode")
    def policy_engine_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Allowed values: - `all` - `any` Defaults to `any`.
        """
        return pulumi.get(self, "policy_engine_mode")

    @property
    @pulumi.getter(name="profileUrl")
    def profile_url(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        """
        return pulumi.get(self, "profile_url")

    @property
    @pulumi.getter(name="propertyMappings")
    def property_mappings(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "property_mappings")

    @property
    @pulumi.getter(name="propertyMappingsGroups")
    def property_mappings_groups(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "property_mappings_groups")

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> pulumi.Output[builtins.str]:
        """
        Allowed values: - `apple` - `openidconnect` - `entraid` - `azuread` - `discord` - `facebook` - `github` - `gitlab` -
        `google` - `mailcow` - `okta` - `patreon` - `reddit` - `twitch` - `twitter`
        """
        return pulumi.get(self, "provider_type")

    @property
    @pulumi.getter(name="requestTokenUrl")
    def request_token_url(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Manually configure OAuth2 URLs when `oidc_well_known_url` is not set.
        """
        return pulumi.get(self, "request_token_url")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="sourceOauthId")
    def source_oauth_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "source_oauth_id")

    @property
    @pulumi.getter(name="userMatchingMode")
    def user_matching_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Allowed values: - `identifier` - `email_link` - `email_deny` - `username_link` - `username_deny` Defaults to
        `identifier`.
        """
        return pulumi.get(self, "user_matching_mode")

    @property
    @pulumi.getter(name="userPathTemplate")
    def user_path_template(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Defaults to `goauthentik.io/sources/%(slug)s`.
        """
        return pulumi.get(self, "user_path_template")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[builtins.str]:
        """
        Generated.
        """
        return pulumi.get(self, "uuid")

