# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['PolicyGeoipArgs', 'PolicyGeoip']

@pulumi.input_type
class PolicyGeoipArgs:
    def __init__(__self__, *,
                 asns: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]] = None,
                 check_history_distance: Optional[pulumi.Input[builtins.bool]] = None,
                 check_impossible_travel: Optional[pulumi.Input[builtins.bool]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 distance_tolerance_km: Optional[pulumi.Input[builtins.float]] = None,
                 execution_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 history_login_count: Optional[pulumi.Input[builtins.float]] = None,
                 history_max_distance_km: Optional[pulumi.Input[builtins.float]] = None,
                 impossible_tolerance_km: Optional[pulumi.Input[builtins.float]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 policy_geoip_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a PolicyGeoip resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] countries: Allowed values: - `AF` - `AX` - `AL` - `DZ` - `AS` - `AD` - `AO` - `AI` - `AQ` - `AG` - `AR` - `AM` - `AW` - `AU` - `AT`
               - `AZ` - `BS` - `BH` - `BD` - `BB` - `BY` - `BE` - `BZ` - `BJ` - `BM` - `BT` - `BO` - `BQ` - `BA` - `BW` - `BV` - `BR` -
               `IO` - `BN` - `BG` - `BF` - `BI` - `CV` - `KH` - `CM` - `CA` - `KY` - `CF` - `TD` - `CL` - `CN` - `CX` - `CC` - `CO` -
               `KM` - `CG` - `CD` - `CK` - `CR` - `CI` - `HR` - `CU` - `CW` - `CY` - `CZ` - `DK` - `DJ` - `DM` - `DO` - `EC` - `EG` -
               `SV` - `GQ` - `ER` - `EE` - `SZ` - `ET` - `FK` - `FO` - `FJ` - `FI` - `FR` - `GF` - `PF` - `TF` - `GA` - `GM` - `GE` -
               `DE` - `GH` - `GI` - `GR` - `GL` - `GD` - `GP` - `GU` - `GT` - `GG` - `GN` - `GW` - `GY` - `HT` - `HM` - `VA` - `HN` -
               `HK` - `HU` - `IS` - `IN` - `ID` - `IR` - `IQ` - `IE` - `IM` - `IL` - `IT` - `JM` - `JP` - `JE` - `JO` - `KZ` - `KE` -
               `KI` - `KW` - `KG` - `LA` - `LV` - `LB` - `LS` - `LR` - `LY` - `LI` - `LT` - `LU` - `MO` - `MG` - `MW` - `MY` - `MV` -
               `ML` - `MT` - `MH` - `MQ` - `MR` - `MU` - `YT` - `MX` - `FM` - `MD` - `MC` - `MN` - `ME` - `MS` - `MA` - `MZ` - `MM` -
               `NA` - `NR` - `NP` - `NL` - `NC` - `NZ` - `NI` - `NE` - `NG` - `NU` - `NF` - `KP` - `MK` - `MP` - `NO` - `OM` - `PK` -
               `PW` - `PS` - `PA` - `PG` - `PY` - `PE` - `PH` - `PN` - `PL` - `PT` - `PR` - `QA` - `RE` - `RO` - `RU` - `RW` - `BL` -
               `SH` - `KN` - `LC` - `MF` - `PM` - `VC` - `WS` - `SM` - `ST` - `SA` - `SN` - `RS` - `SC` - `SL` - `SG` - `SX` - `SK` -
               `SI` - `SB` - `SO` - `ZA` - `GS` - `KR` - `SS` - `ES` - `LK` - `SD` - `SR` - `SJ` - `SE` - `CH` - `SY` - `TW` - `TJ` -
               `TZ` - `TH` - `TL` - `TG` - `TK` - `TO` - `TT` - `TN` - `TR` - `TM` - `TC` - `TV` - `UG` - `UA` - `AE` - `GB` - `UM` -
               `US` - `UY` - `UZ` - `VU` - `VE` - `VN` - `VG` - `VI` - `WF` - `EH` - `YE` - `ZM` - `ZW`
        :param pulumi.Input[builtins.float] distance_tolerance_km: Defaults to `50`.
        :param pulumi.Input[builtins.bool] execution_logging: Defaults to `false`.
        :param pulumi.Input[builtins.float] history_login_count: Defaults to `5`.
        :param pulumi.Input[builtins.float] history_max_distance_km: Defaults to `100`.
        :param pulumi.Input[builtins.float] impossible_tolerance_km: Defaults to `100`.
        """
        if asns is not None:
            pulumi.set(__self__, "asns", asns)
        if check_history_distance is not None:
            pulumi.set(__self__, "check_history_distance", check_history_distance)
        if check_impossible_travel is not None:
            pulumi.set(__self__, "check_impossible_travel", check_impossible_travel)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if distance_tolerance_km is not None:
            pulumi.set(__self__, "distance_tolerance_km", distance_tolerance_km)
        if execution_logging is not None:
            pulumi.set(__self__, "execution_logging", execution_logging)
        if history_login_count is not None:
            pulumi.set(__self__, "history_login_count", history_login_count)
        if history_max_distance_km is not None:
            pulumi.set(__self__, "history_max_distance_km", history_max_distance_km)
        if impossible_tolerance_km is not None:
            pulumi.set(__self__, "impossible_tolerance_km", impossible_tolerance_km)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_geoip_id is not None:
            pulumi.set(__self__, "policy_geoip_id", policy_geoip_id)

    @property
    @pulumi.getter
    def asns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]]:
        return pulumi.get(self, "asns")

    @asns.setter
    def asns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]]):
        pulumi.set(self, "asns", value)

    @property
    @pulumi.getter(name="checkHistoryDistance")
    def check_history_distance(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "check_history_distance")

    @check_history_distance.setter
    def check_history_distance(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "check_history_distance", value)

    @property
    @pulumi.getter(name="checkImpossibleTravel")
    def check_impossible_travel(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "check_impossible_travel")

    @check_impossible_travel.setter
    def check_impossible_travel(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "check_impossible_travel", value)

    @property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Allowed values: - `AF` - `AX` - `AL` - `DZ` - `AS` - `AD` - `AO` - `AI` - `AQ` - `AG` - `AR` - `AM` - `AW` - `AU` - `AT`
        - `AZ` - `BS` - `BH` - `BD` - `BB` - `BY` - `BE` - `BZ` - `BJ` - `BM` - `BT` - `BO` - `BQ` - `BA` - `BW` - `BV` - `BR` -
        `IO` - `BN` - `BG` - `BF` - `BI` - `CV` - `KH` - `CM` - `CA` - `KY` - `CF` - `TD` - `CL` - `CN` - `CX` - `CC` - `CO` -
        `KM` - `CG` - `CD` - `CK` - `CR` - `CI` - `HR` - `CU` - `CW` - `CY` - `CZ` - `DK` - `DJ` - `DM` - `DO` - `EC` - `EG` -
        `SV` - `GQ` - `ER` - `EE` - `SZ` - `ET` - `FK` - `FO` - `FJ` - `FI` - `FR` - `GF` - `PF` - `TF` - `GA` - `GM` - `GE` -
        `DE` - `GH` - `GI` - `GR` - `GL` - `GD` - `GP` - `GU` - `GT` - `GG` - `GN` - `GW` - `GY` - `HT` - `HM` - `VA` - `HN` -
        `HK` - `HU` - `IS` - `IN` - `ID` - `IR` - `IQ` - `IE` - `IM` - `IL` - `IT` - `JM` - `JP` - `JE` - `JO` - `KZ` - `KE` -
        `KI` - `KW` - `KG` - `LA` - `LV` - `LB` - `LS` - `LR` - `LY` - `LI` - `LT` - `LU` - `MO` - `MG` - `MW` - `MY` - `MV` -
        `ML` - `MT` - `MH` - `MQ` - `MR` - `MU` - `YT` - `MX` - `FM` - `MD` - `MC` - `MN` - `ME` - `MS` - `MA` - `MZ` - `MM` -
        `NA` - `NR` - `NP` - `NL` - `NC` - `NZ` - `NI` - `NE` - `NG` - `NU` - `NF` - `KP` - `MK` - `MP` - `NO` - `OM` - `PK` -
        `PW` - `PS` - `PA` - `PG` - `PY` - `PE` - `PH` - `PN` - `PL` - `PT` - `PR` - `QA` - `RE` - `RO` - `RU` - `RW` - `BL` -
        `SH` - `KN` - `LC` - `MF` - `PM` - `VC` - `WS` - `SM` - `ST` - `SA` - `SN` - `RS` - `SC` - `SL` - `SG` - `SX` - `SK` -
        `SI` - `SB` - `SO` - `ZA` - `GS` - `KR` - `SS` - `ES` - `LK` - `SD` - `SR` - `SJ` - `SE` - `CH` - `SY` - `TW` - `TJ` -
        `TZ` - `TH` - `TL` - `TG` - `TK` - `TO` - `TT` - `TN` - `TR` - `TM` - `TC` - `TV` - `UG` - `UA` - `AE` - `GB` - `UM` -
        `US` - `UY` - `UZ` - `VU` - `VE` - `VN` - `VG` - `VI` - `WF` - `EH` - `YE` - `ZM` - `ZW`
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "countries", value)

    @property
    @pulumi.getter(name="distanceToleranceKm")
    def distance_tolerance_km(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Defaults to `50`.
        """
        return pulumi.get(self, "distance_tolerance_km")

    @distance_tolerance_km.setter
    def distance_tolerance_km(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "distance_tolerance_km", value)

    @property
    @pulumi.getter(name="executionLogging")
    def execution_logging(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "execution_logging")

    @execution_logging.setter
    def execution_logging(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "execution_logging", value)

    @property
    @pulumi.getter(name="historyLoginCount")
    def history_login_count(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Defaults to `5`.
        """
        return pulumi.get(self, "history_login_count")

    @history_login_count.setter
    def history_login_count(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "history_login_count", value)

    @property
    @pulumi.getter(name="historyMaxDistanceKm")
    def history_max_distance_km(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Defaults to `100`.
        """
        return pulumi.get(self, "history_max_distance_km")

    @history_max_distance_km.setter
    def history_max_distance_km(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "history_max_distance_km", value)

    @property
    @pulumi.getter(name="impossibleToleranceKm")
    def impossible_tolerance_km(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Defaults to `100`.
        """
        return pulumi.get(self, "impossible_tolerance_km")

    @impossible_tolerance_km.setter
    def impossible_tolerance_km(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "impossible_tolerance_km", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyGeoipId")
    def policy_geoip_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "policy_geoip_id")

    @policy_geoip_id.setter
    def policy_geoip_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy_geoip_id", value)


@pulumi.input_type
class _PolicyGeoipState:
    def __init__(__self__, *,
                 asns: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]] = None,
                 check_history_distance: Optional[pulumi.Input[builtins.bool]] = None,
                 check_impossible_travel: Optional[pulumi.Input[builtins.bool]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 distance_tolerance_km: Optional[pulumi.Input[builtins.float]] = None,
                 execution_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 history_login_count: Optional[pulumi.Input[builtins.float]] = None,
                 history_max_distance_km: Optional[pulumi.Input[builtins.float]] = None,
                 impossible_tolerance_km: Optional[pulumi.Input[builtins.float]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 policy_geoip_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering PolicyGeoip resources.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] countries: Allowed values: - `AF` - `AX` - `AL` - `DZ` - `AS` - `AD` - `AO` - `AI` - `AQ` - `AG` - `AR` - `AM` - `AW` - `AU` - `AT`
               - `AZ` - `BS` - `BH` - `BD` - `BB` - `BY` - `BE` - `BZ` - `BJ` - `BM` - `BT` - `BO` - `BQ` - `BA` - `BW` - `BV` - `BR` -
               `IO` - `BN` - `BG` - `BF` - `BI` - `CV` - `KH` - `CM` - `CA` - `KY` - `CF` - `TD` - `CL` - `CN` - `CX` - `CC` - `CO` -
               `KM` - `CG` - `CD` - `CK` - `CR` - `CI` - `HR` - `CU` - `CW` - `CY` - `CZ` - `DK` - `DJ` - `DM` - `DO` - `EC` - `EG` -
               `SV` - `GQ` - `ER` - `EE` - `SZ` - `ET` - `FK` - `FO` - `FJ` - `FI` - `FR` - `GF` - `PF` - `TF` - `GA` - `GM` - `GE` -
               `DE` - `GH` - `GI` - `GR` - `GL` - `GD` - `GP` - `GU` - `GT` - `GG` - `GN` - `GW` - `GY` - `HT` - `HM` - `VA` - `HN` -
               `HK` - `HU` - `IS` - `IN` - `ID` - `IR` - `IQ` - `IE` - `IM` - `IL` - `IT` - `JM` - `JP` - `JE` - `JO` - `KZ` - `KE` -
               `KI` - `KW` - `KG` - `LA` - `LV` - `LB` - `LS` - `LR` - `LY` - `LI` - `LT` - `LU` - `MO` - `MG` - `MW` - `MY` - `MV` -
               `ML` - `MT` - `MH` - `MQ` - `MR` - `MU` - `YT` - `MX` - `FM` - `MD` - `MC` - `MN` - `ME` - `MS` - `MA` - `MZ` - `MM` -
               `NA` - `NR` - `NP` - `NL` - `NC` - `NZ` - `NI` - `NE` - `NG` - `NU` - `NF` - `KP` - `MK` - `MP` - `NO` - `OM` - `PK` -
               `PW` - `PS` - `PA` - `PG` - `PY` - `PE` - `PH` - `PN` - `PL` - `PT` - `PR` - `QA` - `RE` - `RO` - `RU` - `RW` - `BL` -
               `SH` - `KN` - `LC` - `MF` - `PM` - `VC` - `WS` - `SM` - `ST` - `SA` - `SN` - `RS` - `SC` - `SL` - `SG` - `SX` - `SK` -
               `SI` - `SB` - `SO` - `ZA` - `GS` - `KR` - `SS` - `ES` - `LK` - `SD` - `SR` - `SJ` - `SE` - `CH` - `SY` - `TW` - `TJ` -
               `TZ` - `TH` - `TL` - `TG` - `TK` - `TO` - `TT` - `TN` - `TR` - `TM` - `TC` - `TV` - `UG` - `UA` - `AE` - `GB` - `UM` -
               `US` - `UY` - `UZ` - `VU` - `VE` - `VN` - `VG` - `VI` - `WF` - `EH` - `YE` - `ZM` - `ZW`
        :param pulumi.Input[builtins.float] distance_tolerance_km: Defaults to `50`.
        :param pulumi.Input[builtins.bool] execution_logging: Defaults to `false`.
        :param pulumi.Input[builtins.float] history_login_count: Defaults to `5`.
        :param pulumi.Input[builtins.float] history_max_distance_km: Defaults to `100`.
        :param pulumi.Input[builtins.float] impossible_tolerance_km: Defaults to `100`.
        """
        if asns is not None:
            pulumi.set(__self__, "asns", asns)
        if check_history_distance is not None:
            pulumi.set(__self__, "check_history_distance", check_history_distance)
        if check_impossible_travel is not None:
            pulumi.set(__self__, "check_impossible_travel", check_impossible_travel)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if distance_tolerance_km is not None:
            pulumi.set(__self__, "distance_tolerance_km", distance_tolerance_km)
        if execution_logging is not None:
            pulumi.set(__self__, "execution_logging", execution_logging)
        if history_login_count is not None:
            pulumi.set(__self__, "history_login_count", history_login_count)
        if history_max_distance_km is not None:
            pulumi.set(__self__, "history_max_distance_km", history_max_distance_km)
        if impossible_tolerance_km is not None:
            pulumi.set(__self__, "impossible_tolerance_km", impossible_tolerance_km)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_geoip_id is not None:
            pulumi.set(__self__, "policy_geoip_id", policy_geoip_id)

    @property
    @pulumi.getter
    def asns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]]:
        return pulumi.get(self, "asns")

    @asns.setter
    def asns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]]):
        pulumi.set(self, "asns", value)

    @property
    @pulumi.getter(name="checkHistoryDistance")
    def check_history_distance(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "check_history_distance")

    @check_history_distance.setter
    def check_history_distance(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "check_history_distance", value)

    @property
    @pulumi.getter(name="checkImpossibleTravel")
    def check_impossible_travel(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "check_impossible_travel")

    @check_impossible_travel.setter
    def check_impossible_travel(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "check_impossible_travel", value)

    @property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Allowed values: - `AF` - `AX` - `AL` - `DZ` - `AS` - `AD` - `AO` - `AI` - `AQ` - `AG` - `AR` - `AM` - `AW` - `AU` - `AT`
        - `AZ` - `BS` - `BH` - `BD` - `BB` - `BY` - `BE` - `BZ` - `BJ` - `BM` - `BT` - `BO` - `BQ` - `BA` - `BW` - `BV` - `BR` -
        `IO` - `BN` - `BG` - `BF` - `BI` - `CV` - `KH` - `CM` - `CA` - `KY` - `CF` - `TD` - `CL` - `CN` - `CX` - `CC` - `CO` -
        `KM` - `CG` - `CD` - `CK` - `CR` - `CI` - `HR` - `CU` - `CW` - `CY` - `CZ` - `DK` - `DJ` - `DM` - `DO` - `EC` - `EG` -
        `SV` - `GQ` - `ER` - `EE` - `SZ` - `ET` - `FK` - `FO` - `FJ` - `FI` - `FR` - `GF` - `PF` - `TF` - `GA` - `GM` - `GE` -
        `DE` - `GH` - `GI` - `GR` - `GL` - `GD` - `GP` - `GU` - `GT` - `GG` - `GN` - `GW` - `GY` - `HT` - `HM` - `VA` - `HN` -
        `HK` - `HU` - `IS` - `IN` - `ID` - `IR` - `IQ` - `IE` - `IM` - `IL` - `IT` - `JM` - `JP` - `JE` - `JO` - `KZ` - `KE` -
        `KI` - `KW` - `KG` - `LA` - `LV` - `LB` - `LS` - `LR` - `LY` - `LI` - `LT` - `LU` - `MO` - `MG` - `MW` - `MY` - `MV` -
        `ML` - `MT` - `MH` - `MQ` - `MR` - `MU` - `YT` - `MX` - `FM` - `MD` - `MC` - `MN` - `ME` - `MS` - `MA` - `MZ` - `MM` -
        `NA` - `NR` - `NP` - `NL` - `NC` - `NZ` - `NI` - `NE` - `NG` - `NU` - `NF` - `KP` - `MK` - `MP` - `NO` - `OM` - `PK` -
        `PW` - `PS` - `PA` - `PG` - `PY` - `PE` - `PH` - `PN` - `PL` - `PT` - `PR` - `QA` - `RE` - `RO` - `RU` - `RW` - `BL` -
        `SH` - `KN` - `LC` - `MF` - `PM` - `VC` - `WS` - `SM` - `ST` - `SA` - `SN` - `RS` - `SC` - `SL` - `SG` - `SX` - `SK` -
        `SI` - `SB` - `SO` - `ZA` - `GS` - `KR` - `SS` - `ES` - `LK` - `SD` - `SR` - `SJ` - `SE` - `CH` - `SY` - `TW` - `TJ` -
        `TZ` - `TH` - `TL` - `TG` - `TK` - `TO` - `TT` - `TN` - `TR` - `TM` - `TC` - `TV` - `UG` - `UA` - `AE` - `GB` - `UM` -
        `US` - `UY` - `UZ` - `VU` - `VE` - `VN` - `VG` - `VI` - `WF` - `EH` - `YE` - `ZM` - `ZW`
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "countries", value)

    @property
    @pulumi.getter(name="distanceToleranceKm")
    def distance_tolerance_km(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Defaults to `50`.
        """
        return pulumi.get(self, "distance_tolerance_km")

    @distance_tolerance_km.setter
    def distance_tolerance_km(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "distance_tolerance_km", value)

    @property
    @pulumi.getter(name="executionLogging")
    def execution_logging(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "execution_logging")

    @execution_logging.setter
    def execution_logging(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "execution_logging", value)

    @property
    @pulumi.getter(name="historyLoginCount")
    def history_login_count(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Defaults to `5`.
        """
        return pulumi.get(self, "history_login_count")

    @history_login_count.setter
    def history_login_count(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "history_login_count", value)

    @property
    @pulumi.getter(name="historyMaxDistanceKm")
    def history_max_distance_km(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Defaults to `100`.
        """
        return pulumi.get(self, "history_max_distance_km")

    @history_max_distance_km.setter
    def history_max_distance_km(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "history_max_distance_km", value)

    @property
    @pulumi.getter(name="impossibleToleranceKm")
    def impossible_tolerance_km(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Defaults to `100`.
        """
        return pulumi.get(self, "impossible_tolerance_km")

    @impossible_tolerance_km.setter
    def impossible_tolerance_km(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "impossible_tolerance_km", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyGeoipId")
    def policy_geoip_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "policy_geoip_id")

    @policy_geoip_id.setter
    def policy_geoip_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy_geoip_id", value)


@pulumi.type_token("authentik:index/policyGeoip:PolicyGeoip")
class PolicyGeoip(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asns: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]] = None,
                 check_history_distance: Optional[pulumi.Input[builtins.bool]] = None,
                 check_impossible_travel: Optional[pulumi.Input[builtins.bool]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 distance_tolerance_km: Optional[pulumi.Input[builtins.float]] = None,
                 execution_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 history_login_count: Optional[pulumi.Input[builtins.float]] = None,
                 history_max_distance_km: Optional[pulumi.Input[builtins.float]] = None,
                 impossible_tolerance_km: Optional[pulumi.Input[builtins.float]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 policy_geoip_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a PolicyGeoip resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] countries: Allowed values: - `AF` - `AX` - `AL` - `DZ` - `AS` - `AD` - `AO` - `AI` - `AQ` - `AG` - `AR` - `AM` - `AW` - `AU` - `AT`
               - `AZ` - `BS` - `BH` - `BD` - `BB` - `BY` - `BE` - `BZ` - `BJ` - `BM` - `BT` - `BO` - `BQ` - `BA` - `BW` - `BV` - `BR` -
               `IO` - `BN` - `BG` - `BF` - `BI` - `CV` - `KH` - `CM` - `CA` - `KY` - `CF` - `TD` - `CL` - `CN` - `CX` - `CC` - `CO` -
               `KM` - `CG` - `CD` - `CK` - `CR` - `CI` - `HR` - `CU` - `CW` - `CY` - `CZ` - `DK` - `DJ` - `DM` - `DO` - `EC` - `EG` -
               `SV` - `GQ` - `ER` - `EE` - `SZ` - `ET` - `FK` - `FO` - `FJ` - `FI` - `FR` - `GF` - `PF` - `TF` - `GA` - `GM` - `GE` -
               `DE` - `GH` - `GI` - `GR` - `GL` - `GD` - `GP` - `GU` - `GT` - `GG` - `GN` - `GW` - `GY` - `HT` - `HM` - `VA` - `HN` -
               `HK` - `HU` - `IS` - `IN` - `ID` - `IR` - `IQ` - `IE` - `IM` - `IL` - `IT` - `JM` - `JP` - `JE` - `JO` - `KZ` - `KE` -
               `KI` - `KW` - `KG` - `LA` - `LV` - `LB` - `LS` - `LR` - `LY` - `LI` - `LT` - `LU` - `MO` - `MG` - `MW` - `MY` - `MV` -
               `ML` - `MT` - `MH` - `MQ` - `MR` - `MU` - `YT` - `MX` - `FM` - `MD` - `MC` - `MN` - `ME` - `MS` - `MA` - `MZ` - `MM` -
               `NA` - `NR` - `NP` - `NL` - `NC` - `NZ` - `NI` - `NE` - `NG` - `NU` - `NF` - `KP` - `MK` - `MP` - `NO` - `OM` - `PK` -
               `PW` - `PS` - `PA` - `PG` - `PY` - `PE` - `PH` - `PN` - `PL` - `PT` - `PR` - `QA` - `RE` - `RO` - `RU` - `RW` - `BL` -
               `SH` - `KN` - `LC` - `MF` - `PM` - `VC` - `WS` - `SM` - `ST` - `SA` - `SN` - `RS` - `SC` - `SL` - `SG` - `SX` - `SK` -
               `SI` - `SB` - `SO` - `ZA` - `GS` - `KR` - `SS` - `ES` - `LK` - `SD` - `SR` - `SJ` - `SE` - `CH` - `SY` - `TW` - `TJ` -
               `TZ` - `TH` - `TL` - `TG` - `TK` - `TO` - `TT` - `TN` - `TR` - `TM` - `TC` - `TV` - `UG` - `UA` - `AE` - `GB` - `UM` -
               `US` - `UY` - `UZ` - `VU` - `VE` - `VN` - `VG` - `VI` - `WF` - `EH` - `YE` - `ZM` - `ZW`
        :param pulumi.Input[builtins.float] distance_tolerance_km: Defaults to `50`.
        :param pulumi.Input[builtins.bool] execution_logging: Defaults to `false`.
        :param pulumi.Input[builtins.float] history_login_count: Defaults to `5`.
        :param pulumi.Input[builtins.float] history_max_distance_km: Defaults to `100`.
        :param pulumi.Input[builtins.float] impossible_tolerance_km: Defaults to `100`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PolicyGeoipArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PolicyGeoip resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PolicyGeoipArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyGeoipArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asns: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]] = None,
                 check_history_distance: Optional[pulumi.Input[builtins.bool]] = None,
                 check_impossible_travel: Optional[pulumi.Input[builtins.bool]] = None,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 distance_tolerance_km: Optional[pulumi.Input[builtins.float]] = None,
                 execution_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 history_login_count: Optional[pulumi.Input[builtins.float]] = None,
                 history_max_distance_km: Optional[pulumi.Input[builtins.float]] = None,
                 impossible_tolerance_km: Optional[pulumi.Input[builtins.float]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 policy_geoip_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyGeoipArgs.__new__(PolicyGeoipArgs)

            __props__.__dict__["asns"] = asns
            __props__.__dict__["check_history_distance"] = check_history_distance
            __props__.__dict__["check_impossible_travel"] = check_impossible_travel
            __props__.__dict__["countries"] = countries
            __props__.__dict__["distance_tolerance_km"] = distance_tolerance_km
            __props__.__dict__["execution_logging"] = execution_logging
            __props__.__dict__["history_login_count"] = history_login_count
            __props__.__dict__["history_max_distance_km"] = history_max_distance_km
            __props__.__dict__["impossible_tolerance_km"] = impossible_tolerance_km
            __props__.__dict__["name"] = name
            __props__.__dict__["policy_geoip_id"] = policy_geoip_id
        super(PolicyGeoip, __self__).__init__(
            'authentik:index/policyGeoip:PolicyGeoip',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            asns: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.float]]]] = None,
            check_history_distance: Optional[pulumi.Input[builtins.bool]] = None,
            check_impossible_travel: Optional[pulumi.Input[builtins.bool]] = None,
            countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            distance_tolerance_km: Optional[pulumi.Input[builtins.float]] = None,
            execution_logging: Optional[pulumi.Input[builtins.bool]] = None,
            history_login_count: Optional[pulumi.Input[builtins.float]] = None,
            history_max_distance_km: Optional[pulumi.Input[builtins.float]] = None,
            impossible_tolerance_km: Optional[pulumi.Input[builtins.float]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            policy_geoip_id: Optional[pulumi.Input[builtins.str]] = None) -> 'PolicyGeoip':
        """
        Get an existing PolicyGeoip resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] countries: Allowed values: - `AF` - `AX` - `AL` - `DZ` - `AS` - `AD` - `AO` - `AI` - `AQ` - `AG` - `AR` - `AM` - `AW` - `AU` - `AT`
               - `AZ` - `BS` - `BH` - `BD` - `BB` - `BY` - `BE` - `BZ` - `BJ` - `BM` - `BT` - `BO` - `BQ` - `BA` - `BW` - `BV` - `BR` -
               `IO` - `BN` - `BG` - `BF` - `BI` - `CV` - `KH` - `CM` - `CA` - `KY` - `CF` - `TD` - `CL` - `CN` - `CX` - `CC` - `CO` -
               `KM` - `CG` - `CD` - `CK` - `CR` - `CI` - `HR` - `CU` - `CW` - `CY` - `CZ` - `DK` - `DJ` - `DM` - `DO` - `EC` - `EG` -
               `SV` - `GQ` - `ER` - `EE` - `SZ` - `ET` - `FK` - `FO` - `FJ` - `FI` - `FR` - `GF` - `PF` - `TF` - `GA` - `GM` - `GE` -
               `DE` - `GH` - `GI` - `GR` - `GL` - `GD` - `GP` - `GU` - `GT` - `GG` - `GN` - `GW` - `GY` - `HT` - `HM` - `VA` - `HN` -
               `HK` - `HU` - `IS` - `IN` - `ID` - `IR` - `IQ` - `IE` - `IM` - `IL` - `IT` - `JM` - `JP` - `JE` - `JO` - `KZ` - `KE` -
               `KI` - `KW` - `KG` - `LA` - `LV` - `LB` - `LS` - `LR` - `LY` - `LI` - `LT` - `LU` - `MO` - `MG` - `MW` - `MY` - `MV` -
               `ML` - `MT` - `MH` - `MQ` - `MR` - `MU` - `YT` - `MX` - `FM` - `MD` - `MC` - `MN` - `ME` - `MS` - `MA` - `MZ` - `MM` -
               `NA` - `NR` - `NP` - `NL` - `NC` - `NZ` - `NI` - `NE` - `NG` - `NU` - `NF` - `KP` - `MK` - `MP` - `NO` - `OM` - `PK` -
               `PW` - `PS` - `PA` - `PG` - `PY` - `PE` - `PH` - `PN` - `PL` - `PT` - `PR` - `QA` - `RE` - `RO` - `RU` - `RW` - `BL` -
               `SH` - `KN` - `LC` - `MF` - `PM` - `VC` - `WS` - `SM` - `ST` - `SA` - `SN` - `RS` - `SC` - `SL` - `SG` - `SX` - `SK` -
               `SI` - `SB` - `SO` - `ZA` - `GS` - `KR` - `SS` - `ES` - `LK` - `SD` - `SR` - `SJ` - `SE` - `CH` - `SY` - `TW` - `TJ` -
               `TZ` - `TH` - `TL` - `TG` - `TK` - `TO` - `TT` - `TN` - `TR` - `TM` - `TC` - `TV` - `UG` - `UA` - `AE` - `GB` - `UM` -
               `US` - `UY` - `UZ` - `VU` - `VE` - `VN` - `VG` - `VI` - `WF` - `EH` - `YE` - `ZM` - `ZW`
        :param pulumi.Input[builtins.float] distance_tolerance_km: Defaults to `50`.
        :param pulumi.Input[builtins.bool] execution_logging: Defaults to `false`.
        :param pulumi.Input[builtins.float] history_login_count: Defaults to `5`.
        :param pulumi.Input[builtins.float] history_max_distance_km: Defaults to `100`.
        :param pulumi.Input[builtins.float] impossible_tolerance_km: Defaults to `100`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyGeoipState.__new__(_PolicyGeoipState)

        __props__.__dict__["asns"] = asns
        __props__.__dict__["check_history_distance"] = check_history_distance
        __props__.__dict__["check_impossible_travel"] = check_impossible_travel
        __props__.__dict__["countries"] = countries
        __props__.__dict__["distance_tolerance_km"] = distance_tolerance_km
        __props__.__dict__["execution_logging"] = execution_logging
        __props__.__dict__["history_login_count"] = history_login_count
        __props__.__dict__["history_max_distance_km"] = history_max_distance_km
        __props__.__dict__["impossible_tolerance_km"] = impossible_tolerance_km
        __props__.__dict__["name"] = name
        __props__.__dict__["policy_geoip_id"] = policy_geoip_id
        return PolicyGeoip(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def asns(self) -> pulumi.Output[Optional[Sequence[builtins.float]]]:
        return pulumi.get(self, "asns")

    @property
    @pulumi.getter(name="checkHistoryDistance")
    def check_history_distance(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "check_history_distance")

    @property
    @pulumi.getter(name="checkImpossibleTravel")
    def check_impossible_travel(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "check_impossible_travel")

    @property
    @pulumi.getter
    def countries(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        Allowed values: - `AF` - `AX` - `AL` - `DZ` - `AS` - `AD` - `AO` - `AI` - `AQ` - `AG` - `AR` - `AM` - `AW` - `AU` - `AT`
        - `AZ` - `BS` - `BH` - `BD` - `BB` - `BY` - `BE` - `BZ` - `BJ` - `BM` - `BT` - `BO` - `BQ` - `BA` - `BW` - `BV` - `BR` -
        `IO` - `BN` - `BG` - `BF` - `BI` - `CV` - `KH` - `CM` - `CA` - `KY` - `CF` - `TD` - `CL` - `CN` - `CX` - `CC` - `CO` -
        `KM` - `CG` - `CD` - `CK` - `CR` - `CI` - `HR` - `CU` - `CW` - `CY` - `CZ` - `DK` - `DJ` - `DM` - `DO` - `EC` - `EG` -
        `SV` - `GQ` - `ER` - `EE` - `SZ` - `ET` - `FK` - `FO` - `FJ` - `FI` - `FR` - `GF` - `PF` - `TF` - `GA` - `GM` - `GE` -
        `DE` - `GH` - `GI` - `GR` - `GL` - `GD` - `GP` - `GU` - `GT` - `GG` - `GN` - `GW` - `GY` - `HT` - `HM` - `VA` - `HN` -
        `HK` - `HU` - `IS` - `IN` - `ID` - `IR` - `IQ` - `IE` - `IM` - `IL` - `IT` - `JM` - `JP` - `JE` - `JO` - `KZ` - `KE` -
        `KI` - `KW` - `KG` - `LA` - `LV` - `LB` - `LS` - `LR` - `LY` - `LI` - `LT` - `LU` - `MO` - `MG` - `MW` - `MY` - `MV` -
        `ML` - `MT` - `MH` - `MQ` - `MR` - `MU` - `YT` - `MX` - `FM` - `MD` - `MC` - `MN` - `ME` - `MS` - `MA` - `MZ` - `MM` -
        `NA` - `NR` - `NP` - `NL` - `NC` - `NZ` - `NI` - `NE` - `NG` - `NU` - `NF` - `KP` - `MK` - `MP` - `NO` - `OM` - `PK` -
        `PW` - `PS` - `PA` - `PG` - `PY` - `PE` - `PH` - `PN` - `PL` - `PT` - `PR` - `QA` - `RE` - `RO` - `RU` - `RW` - `BL` -
        `SH` - `KN` - `LC` - `MF` - `PM` - `VC` - `WS` - `SM` - `ST` - `SA` - `SN` - `RS` - `SC` - `SL` - `SG` - `SX` - `SK` -
        `SI` - `SB` - `SO` - `ZA` - `GS` - `KR` - `SS` - `ES` - `LK` - `SD` - `SR` - `SJ` - `SE` - `CH` - `SY` - `TW` - `TJ` -
        `TZ` - `TH` - `TL` - `TG` - `TK` - `TO` - `TT` - `TN` - `TR` - `TM` - `TC` - `TV` - `UG` - `UA` - `AE` - `GB` - `UM` -
        `US` - `UY` - `UZ` - `VU` - `VE` - `VN` - `VG` - `VI` - `WF` - `EH` - `YE` - `ZM` - `ZW`
        """
        return pulumi.get(self, "countries")

    @property
    @pulumi.getter(name="distanceToleranceKm")
    def distance_tolerance_km(self) -> pulumi.Output[Optional[builtins.float]]:
        """
        Defaults to `50`.
        """
        return pulumi.get(self, "distance_tolerance_km")

    @property
    @pulumi.getter(name="executionLogging")
    def execution_logging(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "execution_logging")

    @property
    @pulumi.getter(name="historyLoginCount")
    def history_login_count(self) -> pulumi.Output[Optional[builtins.float]]:
        """
        Defaults to `5`.
        """
        return pulumi.get(self, "history_login_count")

    @property
    @pulumi.getter(name="historyMaxDistanceKm")
    def history_max_distance_km(self) -> pulumi.Output[Optional[builtins.float]]:
        """
        Defaults to `100`.
        """
        return pulumi.get(self, "history_max_distance_km")

    @property
    @pulumi.getter(name="impossibleToleranceKm")
    def impossible_tolerance_km(self) -> pulumi.Output[Optional[builtins.float]]:
        """
        Defaults to `100`.
        """
        return pulumi.get(self, "impossible_tolerance_km")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyGeoipId")
    def policy_geoip_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "policy_geoip_id")

