# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProviderScimArgs', 'ProviderScim']

@pulumi.input_type
class ProviderScimArgs:
    def __init__(__self__, *,
                 token: pulumi.Input[builtins.str],
                 url: pulumi.Input[builtins.str],
                 compatibility_mode: Optional[pulumi.Input[builtins.str]] = None,
                 dry_run: Optional[pulumi.Input[builtins.bool]] = None,
                 exclude_users_service_account: Optional[pulumi.Input[builtins.bool]] = None,
                 filter_group: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 property_mappings_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 provider_scim_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ProviderScim resource.
        :param pulumi.Input[builtins.str] compatibility_mode: Allowed values: - `default` - `aws` - `slack` Defaults to `default`.
        :param pulumi.Input[builtins.bool] dry_run: Defaults to `false`.
        """
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "url", url)
        if compatibility_mode is not None:
            pulumi.set(__self__, "compatibility_mode", compatibility_mode)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if exclude_users_service_account is not None:
            pulumi.set(__self__, "exclude_users_service_account", exclude_users_service_account)
        if filter_group is not None:
            pulumi.set(__self__, "filter_group", filter_group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if property_mappings is not None:
            pulumi.set(__self__, "property_mappings", property_mappings)
        if property_mappings_groups is not None:
            pulumi.set(__self__, "property_mappings_groups", property_mappings_groups)
        if provider_scim_id is not None:
            pulumi.set(__self__, "provider_scim_id", provider_scim_id)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="compatibilityMode")
    def compatibility_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `default` - `aws` - `slack` Defaults to `default`.
        """
        return pulumi.get(self, "compatibility_mode")

    @compatibility_mode.setter
    def compatibility_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "compatibility_mode", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter(name="excludeUsersServiceAccount")
    def exclude_users_service_account(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "exclude_users_service_account")

    @exclude_users_service_account.setter
    def exclude_users_service_account(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "exclude_users_service_account", value)

    @property
    @pulumi.getter(name="filterGroup")
    def filter_group(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "filter_group")

    @filter_group.setter
    def filter_group(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "filter_group", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="propertyMappings")
    def property_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "property_mappings")

    @property_mappings.setter
    def property_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "property_mappings", value)

    @property
    @pulumi.getter(name="propertyMappingsGroups")
    def property_mappings_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "property_mappings_groups")

    @property_mappings_groups.setter
    def property_mappings_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "property_mappings_groups", value)

    @property
    @pulumi.getter(name="providerScimId")
    def provider_scim_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "provider_scim_id")

    @provider_scim_id.setter
    def provider_scim_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "provider_scim_id", value)


@pulumi.input_type
class _ProviderScimState:
    def __init__(__self__, *,
                 compatibility_mode: Optional[pulumi.Input[builtins.str]] = None,
                 dry_run: Optional[pulumi.Input[builtins.bool]] = None,
                 exclude_users_service_account: Optional[pulumi.Input[builtins.bool]] = None,
                 filter_group: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 property_mappings_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 provider_scim_id: Optional[pulumi.Input[builtins.str]] = None,
                 token: Optional[pulumi.Input[builtins.str]] = None,
                 url: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering ProviderScim resources.
        :param pulumi.Input[builtins.str] compatibility_mode: Allowed values: - `default` - `aws` - `slack` Defaults to `default`.
        :param pulumi.Input[builtins.bool] dry_run: Defaults to `false`.
        """
        if compatibility_mode is not None:
            pulumi.set(__self__, "compatibility_mode", compatibility_mode)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if exclude_users_service_account is not None:
            pulumi.set(__self__, "exclude_users_service_account", exclude_users_service_account)
        if filter_group is not None:
            pulumi.set(__self__, "filter_group", filter_group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if property_mappings is not None:
            pulumi.set(__self__, "property_mappings", property_mappings)
        if property_mappings_groups is not None:
            pulumi.set(__self__, "property_mappings_groups", property_mappings_groups)
        if provider_scim_id is not None:
            pulumi.set(__self__, "provider_scim_id", provider_scim_id)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="compatibilityMode")
    def compatibility_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Allowed values: - `default` - `aws` - `slack` Defaults to `default`.
        """
        return pulumi.get(self, "compatibility_mode")

    @compatibility_mode.setter
    def compatibility_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "compatibility_mode", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter(name="excludeUsersServiceAccount")
    def exclude_users_service_account(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "exclude_users_service_account")

    @exclude_users_service_account.setter
    def exclude_users_service_account(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "exclude_users_service_account", value)

    @property
    @pulumi.getter(name="filterGroup")
    def filter_group(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "filter_group")

    @filter_group.setter
    def filter_group(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "filter_group", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="propertyMappings")
    def property_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "property_mappings")

    @property_mappings.setter
    def property_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "property_mappings", value)

    @property
    @pulumi.getter(name="propertyMappingsGroups")
    def property_mappings_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "property_mappings_groups")

    @property_mappings_groups.setter
    def property_mappings_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "property_mappings_groups", value)

    @property
    @pulumi.getter(name="providerScimId")
    def provider_scim_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "provider_scim_id")

    @provider_scim_id.setter
    def provider_scim_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "provider_scim_id", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "url", value)


@pulumi.type_token("authentik:index/providerScim:ProviderScim")
class ProviderScim(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compatibility_mode: Optional[pulumi.Input[builtins.str]] = None,
                 dry_run: Optional[pulumi.Input[builtins.bool]] = None,
                 exclude_users_service_account: Optional[pulumi.Input[builtins.bool]] = None,
                 filter_group: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 property_mappings_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 provider_scim_id: Optional[pulumi.Input[builtins.str]] = None,
                 token: Optional[pulumi.Input[builtins.str]] = None,
                 url: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a ProviderScim resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] compatibility_mode: Allowed values: - `default` - `aws` - `slack` Defaults to `default`.
        :param pulumi.Input[builtins.bool] dry_run: Defaults to `false`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderScimArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ProviderScim resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProviderScimArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderScimArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compatibility_mode: Optional[pulumi.Input[builtins.str]] = None,
                 dry_run: Optional[pulumi.Input[builtins.bool]] = None,
                 exclude_users_service_account: Optional[pulumi.Input[builtins.bool]] = None,
                 filter_group: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 property_mappings_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 provider_scim_id: Optional[pulumi.Input[builtins.str]] = None,
                 token: Optional[pulumi.Input[builtins.str]] = None,
                 url: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderScimArgs.__new__(ProviderScimArgs)

            __props__.__dict__["compatibility_mode"] = compatibility_mode
            __props__.__dict__["dry_run"] = dry_run
            __props__.__dict__["exclude_users_service_account"] = exclude_users_service_account
            __props__.__dict__["filter_group"] = filter_group
            __props__.__dict__["name"] = name
            __props__.__dict__["property_mappings"] = property_mappings
            __props__.__dict__["property_mappings_groups"] = property_mappings_groups
            __props__.__dict__["provider_scim_id"] = provider_scim_id
            if token is None and not opts.urn:
                raise TypeError("Missing required property 'token'")
            __props__.__dict__["token"] = None if token is None else pulumi.Output.secret(token)
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["token"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ProviderScim, __self__).__init__(
            'authentik:index/providerScim:ProviderScim',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compatibility_mode: Optional[pulumi.Input[builtins.str]] = None,
            dry_run: Optional[pulumi.Input[builtins.bool]] = None,
            exclude_users_service_account: Optional[pulumi.Input[builtins.bool]] = None,
            filter_group: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            property_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            property_mappings_groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            provider_scim_id: Optional[pulumi.Input[builtins.str]] = None,
            token: Optional[pulumi.Input[builtins.str]] = None,
            url: Optional[pulumi.Input[builtins.str]] = None) -> 'ProviderScim':
        """
        Get an existing ProviderScim resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] compatibility_mode: Allowed values: - `default` - `aws` - `slack` Defaults to `default`.
        :param pulumi.Input[builtins.bool] dry_run: Defaults to `false`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProviderScimState.__new__(_ProviderScimState)

        __props__.__dict__["compatibility_mode"] = compatibility_mode
        __props__.__dict__["dry_run"] = dry_run
        __props__.__dict__["exclude_users_service_account"] = exclude_users_service_account
        __props__.__dict__["filter_group"] = filter_group
        __props__.__dict__["name"] = name
        __props__.__dict__["property_mappings"] = property_mappings
        __props__.__dict__["property_mappings_groups"] = property_mappings_groups
        __props__.__dict__["provider_scim_id"] = provider_scim_id
        __props__.__dict__["token"] = token
        __props__.__dict__["url"] = url
        return ProviderScim(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compatibilityMode")
    def compatibility_mode(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Allowed values: - `default` - `aws` - `slack` Defaults to `default`.
        """
        return pulumi.get(self, "compatibility_mode")

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter(name="excludeUsersServiceAccount")
    def exclude_users_service_account(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "exclude_users_service_account")

    @property
    @pulumi.getter(name="filterGroup")
    def filter_group(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "filter_group")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="propertyMappings")
    def property_mappings(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "property_mappings")

    @property
    @pulumi.getter(name="propertyMappingsGroups")
    def property_mappings_groups(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "property_mappings_groups")

    @property
    @pulumi.getter(name="providerScimId")
    def provider_scim_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "provider_scim_id")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "url")

