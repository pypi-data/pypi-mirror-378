# If you want to use this file outside of this project, remove all model references
from owasp_dt_sync import models
from test.plugins import filter

def process_finding(finding):
    return filter.process_finding(finding)

def format_project(finding):
    return f"{finding.component.project_name}:{finding.component.project_version if isinstance(finding.component.project_version, str) else None}"

def new_work_item(work_item_adapter: models.WorkItemAdapter):
    finding = work_item_adapter.finding
    vulnerability = finding.vulnerability
    cvss = vulnerability.cvss_v3_base_score
    if not cvss:
        cvss = vulnerability.cvss_v2_base_score

    work_item_adapter.title = f"Vulnerability in {format_project(finding)} component {finding.component.name}:{finding.component.version}"
    work_item_adapter.description = f"This is an automated report from OWASP Dependency Track project: <a href='{work_item_adapter.owasp_dt_project_url}/findings'>{format_project(finding)}</a>"

    if cvss > 0:
        work_item_adapter.set_field('Custom.CVSSScore', cvss)

    if vulnerability.cwe_name:
        work_item_adapter.set_field('Custom.CWE', vulnerability.cwe_name)

    if vulnerability.vuln_id:
        work_item_adapter.set_field('Custom.CVE', vulnerability.vuln_id)

    if vulnerability.description:
        work_item_adapter.set_field('Custom.HighLevelSummary', vulnerability.description)

    work_item_adapter.set_field('Custom.AffectedInternalService', format_project(finding))
    work_item_adapter.set_field('Custom.Affected3rdparty', f"{finding.component.name}:{finding.component.version}")


def map_work_item_to_analysis(work_item_adapter: models.WorkItemAdapter, analysis_adapter: models.AnalysisAdapter):
    analysis_adapter.suppressed = False

    if work_item_adapter.state == "New":
        analysis_adapter.state = "NOT_SET"
    elif work_item_adapter.state in ["Closed", "Removed"]:
        analysis_adapter.state = "RESOLVED"
        analysis_adapter.suppressed = True
    else:
        analysis_adapter.state = "IN_TRIAGE"

    final_solution = str(work_item_adapter.get_field('Custom.FinalSolution2')).strip()
    if len(final_solution) > 0:
        analysis_adapter.details = final_solution
    else:
        no_solution = str(work_item_adapter.get_field('Custom.NoSolutionavailableornecessary')).strip()
        if len(no_solution) > 0:
            analysis_adapter.details = no_solution
            analysis_adapter.state = 'NOT_AFFECTED'


def map_analysis_to_work_item(analysis_adapter: models.AnalysisAdapter, work_item_adapter: models.WorkItemAdapter):
    if analysis_adapter.state == "IN_TRIAGE":
        work_item_adapter.state = "Investigation"
    elif analysis_adapter.state in [
        "RESOLVED",
        "FALSE_POSITIVE",
        "NOT_AFFECTED",
    ]:
        work_item_adapter.state = "Closed"
    else:
        work_item_adapter.state = "New"
