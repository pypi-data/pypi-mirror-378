Program(
  body: [    
    VariableDeclaration(
      constant: False,
      identifier: Identifier(
        position: (          
          1,
          5,
          1
        ),
        symbol: "x"
      ),
      position: (        
        1,
        3,
        3
      ),
      value: NumericLiteral(
        position: (          
          1,
          9,
          1
        ),
        value: 0.0
      )
    ),
    
    LoopStatement(
      body: [        
        AssignmentExpression(
          assigne: Identifier(
            position: (              
              3,
              6,
              1
            ),
            symbol: "x"
          ),
          operator: None,
          position: (            
            3,
            6,
            1
          ),
          value: BinaryExpression(
            left: Identifier(
              position: (                
                3,
                10,
                1
              ),
              symbol: "x"
            ),
            operator: "+",
            position: (              
              3,
              10,
              1
            ),
            right: NumericLiteral(
              position: (                
                3,
                14,
                1
              ),
              value: 1.0
            )
          )
        ),
        
        IfStatement(
          condition: BinaryExpression(
            left: BinaryExpression(
              left: Identifier(
                position: (                  
                  5,
                  10,
                  1
                ),
                symbol: "x"
              ),
              operator: "%",
              position: (                
                5,
                10,
                1
              ),
              right: NumericLiteral(
                position: (                  
                  5,
                  14,
                  1
                ),
                value: 2.0
              )
            ),
            operator: "==",
            position: (              
              5,
              10,
              1
            ),
            right: NumericLiteral(
              position: (                
                5,
                19,
                1
              ),
              value: 0.0
            )
          ),
          else_: [            
          ],
          position: (            
            5,
            7,
            2
          ),
          then: [            
            ContinueLiteral(
              position: (                
                6,
                17,
                8
              )
            )
          ]
        ),
        
        IfStatement(
          condition: BinaryExpression(
            left: Identifier(
              position: (                
                9,
                10,
                1
              ),
              symbol: "x"
            ),
            operator: ">",
            position: (              
              9,
              10,
              1
            ),
            right: NumericLiteral(
              position: (                
                9,
                15,
                2
              ),
              value: 10.0
            )
          ),
          else_: [            
          ],
          position: (            
            9,
            7,
            2
          ),
          then: [            
            BreakLiteral(
              position: (                
                10,
                14,
                5
              )
            )
          ]
        ),
        
        CallExpression(
          arguments: [            
            Identifier(
              position: (                
                13,
                12,
                1
              ),
              symbol: "x"
            )
          ],
          caller: Identifier(
            position: (              
              13,
              10,
              5
            ),
            symbol: "print"
          ),
          position: (            
            13,
            10,
            5
          )
        )
      ],
      position: (        
        2,
        5,
        4
      )
    )
  ],
  position: (    
    0,
    0,
    0
  )
)