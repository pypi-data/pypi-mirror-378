workflows:
  main_workflow:
    - id: bigquery_search_workflow
      description: "Universal workflow for all BigQuery vector search operations with intelligent routing"
      inputs:
        - user_input
        - user_query
      steps:
        - id: normalize_input
          agent: input_normalizer
          input: |
            user_input: ${user_input}
            user_query: ${user_query}
          output:
            to: classify_intent

        - id: classify_intent
          agent: search_intent_classifier
          input: |
            User request: ${context.step_outputs.normalize_input}
            
            Classify this request as one of:
            - similarity_search: Semantic search for information
            - get_content: Retrieve specific document by ID
            - list_datasets: Browse available knowledge sources
            - dataset_info: Get metadata about specific dataset/table
            
            Return ONLY the operation name (e.g., "similarity_search").
          output:
            to: clean_intent

        - id: clean_intent
          agent: intent_cleaner
          input: |
            ${context.step_outputs.classify_intent}
          output:
            to: extract_parameters

        - id: extract_parameters
          agent: query_extractor
          input: |
            User request: ${context.step_outputs.normalize_input}
            Operation type: ${context.step_outputs.clean_intent}
            
            Extract the relevant parameters for this operation.
          output:
            to:
              - condition:
                  if: "${context.step_outputs.classify_intent.type} == 'similarity_search'"
                  then: enhance_query
                  else: build_tool_parameters

        - id: enhance_query
          agent: context_enhancer
          input: |
            Original query: ${context.step_outputs.extract_parameters.query}
            
            Enhance this query for better vector search results by:
            1. Adding relevant context and synonyms
            2. Expanding abbreviations
            3. Including related terms
            4. Optimizing for semantic similarity
          output:
            to: build_tool_parameters

        - id: build_tool_parameters
          agent: parameter_builder
          input: |
            Operation: ${context.step_outputs.clean_intent}
            Extracted params: ${context.step_outputs.extract_parameters}
            Enhanced query: ${context.step_outputs.enhance_query}
            
            Build the exact parameters needed for the BigQuery vector search tool call.
            Use the enhanced query if available, otherwise use extracted parameters directly.
          output:
            to: execute_search

        - id: execute_search
          function: langswarm.core.utils.workflows.functions.mcp_call
          args:
            mcp_url: "local://bigquery_vector_search"
            payload:
              name: ${context.step_outputs.clean_intent}
              arguments: ${context.step_outputs.build_tool_parameters}
          output:
            to:
              - condition:
                  if: "${context.step_outputs.execute_search.success} == true"
                  then: format_response
                  else: handle_error

        - id: format_response
          agent: search_response_formatter
          input: |
            Operation: ${context.step_outputs.clean_intent}
            Raw results: ${context.step_outputs.execute_search}
            Original request: ${context.step_outputs.normalize_input}
            
            Format this into a comprehensive, user-friendly response.
          output:
            to: user

        - id: handle_error
          agent: error_handler
          input: |
            Error details: ${context.step_outputs.execute_search}
            User request: ${context.step_outputs.normalize_input}
            Attempted operation: ${context.step_outputs.clean_intent}
            
            Provide helpful error guidance and suggest alternatives.
          output:
            to: user