version: "1.0"

workflows:
  main_workflow:
    - id: execute_existing_workflow
      description: "Universal workflow for executing and managing other workflows"
      inputs:
        - user_input
        - user_query
      steps:
        - id: normalize_input
          agent: input_normalizer
          input: |
            user_input: ${user_input}
            user_query: ${user_query}
          output:
            to: classify_workflow_intent

        - id: classify_workflow_intent
          agent: workflow_intent_classifier
          input: |
            User request: ${context.step_outputs.normalize_input}
            
            Classify this workflow execution request as one of:
            - execute_workflow: Run a specific existing workflow
            - create_workflow: Generate and execute a new workflow
            - workflow_status: Check status of running workflows
            - workflow_management: Start, stop, or modify workflows
            - batch_execution: Execute multiple workflows
            - workflow_monitoring: Monitor workflow performance
            
            Return the classification and specific parameters.
          output:
            to: extract_workflow_details

        - id: extract_workflow_details
          agent: workflow_analyzer
          input: |
            Operation: ${context.step_outputs.classify_workflow_intent}
            User request: ${context.step_outputs.normalize_input}
            
            Extract workflow execution details.
          output:
            to: validate_workflow_request

        - id: validate_workflow_request
          agent: workflow_validator
          input: |
            Operation: ${context.step_outputs.classify_workflow_intent.type}
            Workflow params: ${context.step_outputs.extract_workflow_details}
            
            Validate the workflow execution request.
          output:
            to:
              - condition:
                  if: "${context.step_outputs.validate_workflow_request.valid} == true"
                  then: coordinate_execution
                  else: request_workflow_correction

        - id: request_workflow_correction
          agent: workflow_correction_agent
          input: |
            Validation errors: ${context.step_outputs.validate_workflow_request.errors}
            Original request: ${context.step_outputs.normalize_input}
            
            Request corrections for workflow execution parameters.
          output:
            to: user

        - id: coordinate_execution
          agent: workflow_orchestrator
          input: |
            Operation: ${context.step_outputs.classify_workflow_intent.type}
            Validated request: ${context.step_outputs.validate_workflow_request}
            
            Coordinate the workflow execution.
          output:
            to: execute_workflow_operation

        - id: execute_workflow_operation
          function: langswarm.core.utils.workflows.functions.mcp_call
          args:
            mcp_url: "local://workflow_executor"
            payload: ${context.step_outputs.coordinate_execution}
          output:
            to:
              - condition:
                  if: "${context.step_outputs.execute_workflow_operation.success} == true"
                  then: format_execution_response
                  else: handle_execution_error

        - id: format_execution_response
          agent: execution_response_formatter
          input: |
            Operation: ${context.step_outputs.classify_workflow_intent.type}
            Execution result: ${context.step_outputs.execute_workflow_operation}
            Original request: ${context.step_outputs.normalize_input}
            
            Format the workflow execution response.
          output:
            to: user

        - id: handle_execution_error
          agent: workflow_error_handler
          input: |
            Error details: ${context.step_outputs.execute_workflow_operation}
            Operation attempted: ${context.step_outputs.classify_workflow_intent.type}
            User request: ${context.step_outputs.normalize_input}
            
            Provide helpful error guidance and recovery options.
          output:
            to: user