version: '3.8'

services:
  # Self-hosted Daytona server
  daytona-server:
    image: daytonaio/daytona:latest
    container_name: daytona-server
    ports:
      - "8080:8080"
    volumes:
      - daytona_data:/data
      - daytona_workspaces:/workspaces
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DAYTONA_WORKSPACE_DIR=/workspaces
      - DAYTONA_DATA_DIR=/data
      - DAYTONA_LOG_LEVEL=info
    command: ["daytona", "server", "--host", "0.0.0.0", "--port", "8080"]
    restart: unless-stopped
    networks:
      - daytona-network

  # Self-hosted Daytona MCP Server
  daytona-mcp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: daytona-mcp-server
    ports:
      - "8001:8001"
    depends_on:
      - daytona-server
    environment:
      - DAYTONA_SERVER_URL=http://daytona-server:8080
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8001
      - PYTHONUNBUFFERED=1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # For CLI access to Docker
      - daytona_mcp_logs:/app/logs
    restart: unless-stopped
    networks:
      - daytona-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/schema"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: daytona-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - daytona-server
      - daytona-mcp
    restart: unless-stopped
    networks:
      - daytona-network

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: daytona-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - daytona-network

  # Optional: Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: daytona-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - daytona-network

volumes:
  daytona_data:
    driver: local
  daytona_workspaces:
    driver: local
  daytona_mcp_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  daytona-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16


