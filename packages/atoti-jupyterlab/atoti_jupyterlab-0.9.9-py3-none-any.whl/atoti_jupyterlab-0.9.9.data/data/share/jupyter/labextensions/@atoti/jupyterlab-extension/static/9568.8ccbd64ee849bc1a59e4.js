"use strict";(self.webpackChunk_atoti_jupyterlab_extension=self.webpackChunk_atoti_jupyterlab_extension||[]).push([[9568],{9568:(e,n,t)=>{t.d(n,{Position:()=>r});class r{constructor(e,n){this.lineNumber=e,this.column=n}with(e=this.lineNumber,n=this.column){return e===this.lineNumber&&n===this.column?this:new r(e,n)}delta(e=0,n=0){return this.with(this.lineNumber+e,this.column+n)}equals(e){return r.equals(this,e)}static equals(e,n){return!e&&!n||!!e&&!!n&&e.lineNumber===n.lineNumber&&e.column===n.column}isBefore(e){return r.isBefore(this,e)}static isBefore(e,n){return e.lineNumber<n.lineNumber||!(n.lineNumber<e.lineNumber)&&e.column<n.column}isBeforeOrEqual(e){return r.isBeforeOrEqual(this,e)}static isBeforeOrEqual(e,n){return e.lineNumber<n.lineNumber||!(n.lineNumber<e.lineNumber)&&e.column<=n.column}static compare(e,n){let t=0|e.lineNumber,r=0|n.lineNumber;return t===r?(0|e.column)-(0|n.column):t-r}clone(){return new r(this.lineNumber,this.column)}toString(){return"("+this.lineNumber+","+this.column+")"}static lift(e){return new r(e.lineNumber,e.column)}static isIPosition(e){return e&&"number"==typeof e.lineNumber&&"number"==typeof e.column}}}}]);