[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mediallm"
dynamic = ["version"]
description = "Natural language to FFmpeg, instantly and privately"
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.10"
authors = [
    { name = "Arun Brahma", email = "mithubrahma94@gmail.com" }
]
maintainers = [
    { name = "Arun Brahma", email = "mithubrahma94@gmail.com" }
]
keywords = [
    "ai",
    "audio", 
    "automation",
    "cli",
    "conversion",
    "ffmpeg",
    "llm",
    "local-ai",
    "media-processing",
    "natural-language",
    "ollama",
    "privacy",
    "video"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Multimedia :: Video :: Conversion",
    "Topic :: Multimedia :: Sound/Audio :: Conversion",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Shells",
    "Topic :: Utilities"
]

dependencies = [
    "rich==14.1.0",
    "typer==0.16.1", 
    "prompt-toolkit==3.0.48",
    "pydantic==2.11.0",
    "python-dotenv==1.0.1",
    "ollama==0.5.3"
]

[project.optional-dependencies]
docs = [
    "mkdocs==1.6.1",
    "mkdocs-material==9.5.44",
    "mkdocstrings[python]==0.26.1",
    "pymdown-extensions==10.11.2",
    "mkdocs-mermaid2-plugin==1.1.1"
]

[dependency-groups]
dev = [
    "black==25.1.0",
    "ruff==0.8.4",
    "twine==6.1.0",
    "build==1.2.2",
    "pytest==8.3.4",
    "pytest-timeout==2.3.1"
]

docs = [
    "mkdocs==1.6.1",
    "mkdocs-material==9.5.44",
    "mkdocstrings[python]==0.26.1",
    "pymdown-extensions==10.11.2",
    "mkdocs-mermaid2-plugin==1.1.1"
]

[project.urls]
"Homepage" = "https://github.com/iamarunbrahma/mediallm"
"Repository" = "https://github.com/iamarunbrahma/mediallm.git"
"Bug Tracker" = "https://github.com/iamarunbrahma/mediallm/issues"
"Documentation" = "https://github.com/iamarunbrahma/mediallm/blob/main/README.md"
"Changelog" = "https://github.com/iamarunbrahma/mediallm/releases"

[project.scripts]
mediallm = "mediallm.main:main"

# Hatchling configuration for dynamic versioning
[tool.hatch.version]
path = "src/mediallm/utils/version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/mediallm"]

[tool.uv]
dev-dependencies = [
    "black==25.1.0",
    "ruff==0.8.4",
    "twine==6.1.0",
    "build==1.2.2",
    "pytest==8.3.4",
    "pytest-timeout==2.3.1"
]


# Black formatting configuration
[tool.black]
line-length = 120
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff linting and formatting configuration (2025 best practices)
[tool.ruff]
line-length = 120
target-version = "py310"
src = ["src", "tests"]

[tool.ruff.lint]
# Enable comprehensive linting rules
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings  
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "RET",    # flake8-return
    "ARG",    # flake8-unused-arguments
    "ERA",    # eradicate
    "PL",     # pylint
    "PERF",   # perflint
    "RUF",    # ruff-specific rules
]

ignore = [
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR2004", # magic value comparison
    "S101",    # use of assert detected  
]

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ["mediallm"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",
    "PLR2004",
    "ARG",
    "PLC0415",  # allow local imports in tests
    "SIM117",   # nested with statements in tests
    "PT011",    # pytest.raises(Exception) too broad
    "PT017",    # assertions on exception in except blocks
    "B017"      # blind except assertions in tests
]
"src/mediallm/constants/prompts.py" = [
    "E501"  # allow long lines for documentation-like content
]
"src/mediallm/utils/config.py" = [
    "PLC0415"  # allow local imports for optional dependencies
]
"src/mediallm/utils/model_manager.py" = [
    "PLC0415"  # allow local imports in spinner-integrated path
]
"src/mediallm/core/action_inference.py" = [
    "PLR0911",  # too many return statements (pattern matching function)
    "PLR0915",  # too many statements
]
"src/mediallm/analysis/prompt_enhancer.py" = [
    "PLR0911",  # too many return statements
]
"src/mediallm/core/output_generator.py" = [
    "PLR0911"  # multiple return branches by design
]
"src/mediallm/interface/interactive_prompt.py" = [
    "PLR0915"  # too many statements (UI glue code)
]
"src/mediallm/core/task_router.py" = [
    "PLR0911"  # multiple return statements by design for summary builders
]

# Pytest configuration (2025 modern best practices)
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Modern pytest execution options
addopts = [
    "-ra",                      # Show extra test summary info for all except passed
    "--strict-markers",         # Treat unknown markers as errors
    "--strict-config",          # Treat config errors as errors  
    "--tb=short",              # Short traceback format
    "--import-mode=importlib", # Modern import mode (2025 recommendation)
    "-v",                      # Verbose output
    "--durations=10",          # Show 10 slowest tests
    "--showlocals"             # Show local variables in tracebacks
]

# Comprehensive test markers for organization
markers = [
    "unit: Unit tests - fast, isolated, no external dependencies",
    "integration: Integration tests - use real file system, slower execution", 
    "cli: CLI tests - test command-line interface functionality",
    "slow: Slow running tests - performance or comprehensive tests",
    "requires_ollama: Tests requiring Ollama server to be running",
    "requires_ffmpeg: Tests requiring FFmpeg to be available",
    "security: Security-focused tests - input validation, injection prevention",
    "performance: Performance benchmarking and profiling tests"
]

# Test discovery and filtering
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*distutils.*:UserWarning",
    "ignore:.*pkg_resources.*:DeprecationWarning"
]

# Logging configuration for tests
log_cli = false
log_cli_level = "INFO" 
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Test timeout settings
timeout = 300
timeout_method = "thread"