Metadata-Version: 2.4
Name: mcp-plots
Version: 0.0.0
Summary: MCP server for data visualization with Mermaid-first approach for Cursor and other MCP clients
Author: MCP Plots Team
License: MIT
Keywords: ai-tools,charts,cursor,data-analysis,mcp,mermaid,plotting,visualization
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Visualization
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Text Processing :: Markup
Requires-Python: >=3.8
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: mcp>=1.0.0
Requires-Dist: numpy>=1.21.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: seaborn>=0.11.0
Requires-Dist: tabulate>=0.9.0
Provides-Extra: dev
Requires-Dist: black>=22.0.0; extra == 'dev'
Requires-Dist: isort>=5.10.0; extra == 'dev'
Requires-Dist: mypy>=0.950; extra == 'dev'
Requires-Dist: pytest>=7.0.0; extra == 'dev'
Description-Content-Type: text/markdown

# Plots MCP Server

A lightweight Model Context Protocol (MCP) server for data visualization. It exposes tools to render charts (line, bar, pie, scatter, heatmap, etc.) from tabular data and returns MCP-compatible image/text content.

## üöÄ Quick Start

### üì¶ PyPI Installation (Recommended)
```bash
pip install mcp-plots
mcp-plots  # Start the server
```

### üéØ For Cursor Users
1. Install the package: `pip install mcp-plots`
2. Add to your Cursor MCP config (`~/.cursor/mcp.json`):
   ```json
   {
     "mcpServers": {
       "plots": {
         "command": "mcp-plots",
         "args": ["--transport", "stdio"]
       }
     }
   }
   ```
3. Restart Cursor
4. Ask: *"Create a bar chart showing sales: A=100, B=150, C=80"*

### üõ†Ô∏è Development Installation
```bash
uvx --from git+https://github.com/mr901/mcp-plots.git run-server.py
```

üìñ **[Documentation ‚Üí](docs/README.md)** | **[Quick Start ‚Üí](docs/quickstart.md)** | **[API Reference ‚Üí](docs/api.md)**

## Project layout

```
src/
  app/                # Server construction and runtime
    server.py
  capabilities/       # MCP tools and prompts
    tools.py
    prompts.py
  visualization/      # Plotting engines and configurations
    chart_config.py
    generator.py
```

## Requirements

- Python 3.10+
- See `requirements.txt`

## Installation & Usage

### üöÄ Quick Start with uvx (Recommended)

The easiest way to run the MCP server without managing Python environments:

```bash
# Run directly with uvx (no installation needed)
uvx --from git+https://github.com/mr901/mcp-plots.git run-server.py

# Or install and run the command
uvx --from git+https://github.com/mr901/mcp-plots.git mcp-plots

# With custom options
uvx --from git+https://github.com/mr901/mcp-plots.git mcp-plots --port 8080 --log-level DEBUG
```

**Why uvx?**
- ‚úÖ **No Environment Management**: Automatically handles Python dependencies
- ‚úÖ **Isolated Execution**: Runs in its own virtual environment
- ‚úÖ **Always Latest**: Pulls fresh code from repository
- ‚úÖ **Zero Setup**: Works immediately without pip install
- ‚úÖ **Cross-Platform**: Same command works on Windows, macOS, Linux

### üì¶ Traditional Installation

1) **Install dependencies**
```bash
pip install -r requirements.txt
```

2) **Run the server (HTTP transport, default port 8000)**
```bash
python -m src --transport streamable-http --host 0.0.0.0 --port 8000 --log-level INFO
```

3) **Run with stdio (for MCP clients that spawn processes)**
```bash
python -m src --transport stdio
```

### üê≥ Docker

```bash
docker build -t mcp-plots .
docker run -p 8000:8000 mcp-plots
```

Environment variables (optional):
- `MCP_TRANSPORT` (streamable-http|stdio)
- `MCP_HOST` (default 0.0.0.0)
- `MCP_PORT` (default 8000)
- `LOG_LEVEL` (default INFO)

## Tools

- `list_chart_types()` ‚Üí returns available chart types
- `list_themes()` ‚Üí returns available themes
- `suggest_fields(sample_rows)` ‚Üí suggests field roles based on data samples
- `render_chart(chart_type, data, field_map, config_overrides?, options?, output_format?)` ‚Üí returns MCP content
- `generate_test_image()` ‚Üí generates a test image (red circle) to verify MCP image support

### üéØ Cursor Integration

This MCP server is **fully compatible with Cursor's image support**! When you use the `render_chart` tool:

- **Charts appear directly in chat** - No need to save files or open separate windows
- **AI can analyze your charts** - Vision-enabled models can discuss and interpret your visualizations
- **Perfect MCP format** - Uses the exact base64 PNG format that Cursor expects

The server returns images in the MCP format Cursor requires:
```json
{
  "content": [
    {
      "type": "image", 
      "data": "<base64-encoded-png>",
      "mimeType": "image/png"
    }
  ]
}
```

Example call (pseudo):
```
render_chart(
  chart_type="bar",
  data=[{"category":"A","value":10},{"category":"B","value":20}],
  field_map={"category_field":"category","value_field":"value"},
  config_overrides={"title":"Example Bar","width":800,"height":600,"output_format":"MCP_IMAGE"}
)
```

Return shape (PNG):
```
{
  "status": "success",
  "content": [{"type":"image","data":"<base64>","mimeType":"image/png"}]
}
```

## Configuration

The server can be configured via environment variables or command line arguments:

### Server Settings
- `MCP_TRANSPORT` - Transport type: `streamable-http` or `stdio` (default: `streamable-http`)
- `MCP_HOST` - Host address (default: `0.0.0.0`)
- `MCP_PORT` - Port number (default: `8000`)
- `LOG_LEVEL` - Logging level: `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL` (default: `INFO`)
- `MCP_DEBUG` - Enable debug mode: `true` or `false` (default: `false`)

### Chart Settings
- `CHART_DEFAULT_WIDTH` - Default chart width in pixels (default: `800`)
- `CHART_DEFAULT_HEIGHT` - Default chart height in pixels (default: `600`)
- `CHART_DEFAULT_DPI` - Default chart DPI (default: `100`)
- `CHART_MAX_DATA_POINTS` - Maximum data points per chart (default: `10000`)

### Command Line Usage

**With uvx (recommended):**
```bash
uvx --from git+https://github.com/mr901/mcp-plots.git mcp-plots --help

# Examples:
uvx --from git+https://github.com/mr901/mcp-plots.git mcp-plots --port 8080 --log-level DEBUG
uvx --from git+https://github.com/mr901/mcp-plots.git mcp-plots --chart-width 1200 --chart-height 800
```

**Traditional Python:**
```bash
python -m src --help

# Examples:
python -m src --transport streamable-http --host 0.0.0.0 --port 8000
python -m src --log-level DEBUG --chart-width 1200 --chart-height 800
```

## Docker

Build image:
```
docker build -t mcp-plots .
```

Run container with custom configuration:
```bash
docker run --rm -p 8000:8000 \
  -e MCP_TRANSPORT=streamable-http \
  -e MCP_HOST=0.0.0.0 \
  -e MCP_PORT=8000 \
  -e LOG_LEVEL=INFO \
  -e CHART_DEFAULT_WIDTH=1000 \
  -e CHART_DEFAULT_HEIGHT=700 \
  -e CHART_DEFAULT_DPI=150 \
  -e CHART_MAX_DATA_POINTS=5000 \
  mcp-plots
```

## üéØ Cursor MCP Integration

### Quick Setup for Cursor

The Plots MCP Server is designed to work seamlessly with Cursor's MCP support. Here's how to integrate it:

#### 1. **Add to Cursor's MCP Configuration**

Add this to your Cursor MCP configuration file (`~/.cursor/mcp.json` or similar):

```json
{
  "mcpServers": {
    "plots": {
      "command": "uvx",
      "args": [
        "--from", 
        "git+https://github.com/mr901/mcp-plots.git@main",
        "mcp-plots",
        "--transport", 
        "stdio"
      ],
      "env": {
        "LOG_LEVEL": "INFO",
        "CHART_DEFAULT_WIDTH": "800",
        "CHART_DEFAULT_HEIGHT": "600"
      }
    }
  }
}
```

#### 2. **Alternative: HTTP Transport**

For HTTP-based integration:

```json
{
  "mcpServers": {
    "plots-http": {
      "command": "uvx",
      "args": [
        "--from", 
        "git+https://github.com/mr901/mcp-plots.git@main", 
        "mcp-plots",
        "--transport", 
        "streamable-http",
        "--host", 
        "127.0.0.1",
        "--port", 
        "8000"
      ]
    }
  }
}
```

#### 3. **Local Development Setup**

For local development (if you have the code cloned):

```json
{
  "mcpServers": {
    "plots-dev": {
      "command": "python",
      "args": ["-m", "src", "--transport", "stdio"],
      "cwd": "/path/to/mcp-plots",
      "env": {
        "LOG_LEVEL": "DEBUG"
      }
    }
  }
}
```

#### 4. **Verify Integration**

After adding the configuration:
1. **Restart Cursor**
2. **Check MCP connection** in Cursor's MCP panel
3. **Test with a simple chart**:
   ```
   Create a bar chart showing sales data: A=100, B=150, C=80
   ```

### üé® **MERMAID-First Approach**

This server prioritizes **MERMAID output by default** because:
- ‚úÖ **Renders instantly in Cursor** - No external viewers needed
- ‚úÖ **Interactive** - Cursor can analyze and discuss the diagrams  
- ‚úÖ **Lightweight** - Fast generation and display
- ‚úÖ **Scalable** - Vector-based, works at any zoom level

**Chart Types with Native MERMAID Support:**
- `line`, `bar`, `pie`, `area` ‚Üí `xychart-beta` format
- `histogram` ‚Üí `xychart-beta` with automatic binning  
- `funnel` ‚Üí Styled flowchart with color gradients
- `gauge` ‚Üí Flowchart with color-coded value indicators
- `sankey` ‚Üí Flow diagrams with source/target styling

## üìä Available Tools

### `render_chart`
Main chart generation tool with MERMAID-first approach.

**Parameters:**
- `chart_type` - Chart type (`line`, `bar`, `pie`, `scatter`, `heatmap`, etc.)
- `data` - List of data objects
- `field_map` - Field mappings (`x_field`, `y_field`, `category_field`, etc.)
- `config_overrides` - Chart configuration overrides
- `output_format` - Output format (`mermaid` [default], `mcp_image`, `mcp_text`)

**Special Modes:**
- `chart_type="help"` - Show available chart types and themes
- `chart_type="suggest"` - Analyze data and suggest field mappings

### `configure_preferences`
Interactive configuration tool for setting user preferences.

**Parameters:**
- `output_format` - Default output format (`mermaid`, `mcp_image`, `mcp_text`)
- `theme` - Default theme (`default`, `dark`, `seaborn`, `minimal`)
- `chart_width` - Default chart width in pixels
- `chart_height` - Default chart height in pixels
- `reset_to_defaults` - Reset all preferences to system defaults

**Features:**
- ‚úÖ **Persistent Settings** - Saved to `~/.plots_mcp_config.json`
- ‚úÖ **Live Preview** - Shows sample chart with current settings
- ‚úÖ **Override Support** - Use `config_overrides` for one-off changes

## üìö Documentation

### Additional Resources
- **[üìñ Complete Documentation](docs/README.md)** - Technical documentation hub
- **[üöÄ Quick Start](docs/quickstart.md)** - 5-minute setup guide
- **[üîß Integration Guide](docs/integration.md)** - MCP client setup and configuration
- **[üìã API Reference](docs/api.md)** - Complete tool specifications and examples
- **[‚öôÔ∏è Advanced Guide](docs/advanced.md)** - Architecture, deployment, and development
- **[üìä Sample Prompts](docs/sample-prompts.md)** - Ready-to-use testing examples

### Chart Examples

**Basic Bar Chart:**
```json
{
  "chart_type": "bar",
  "data": [
    {"category": "Sales", "value": 120},
    {"category": "Marketing", "value": 80},
    {"category": "Support", "value": 60}
  ],
  "field_map": {
    "category_field": "category", 
    "value_field": "value"
  }
}
```

**Time Series Line Chart:**
```json
{
  "chart_type": "line",
  "data": [
    {"date": "2024-01", "revenue": 1000},
    {"date": "2024-02", "revenue": 1200},
    {"date": "2024-03", "revenue": 1100}
  ],
  "field_map": {
    "x_field": "date",
    "y_field": "revenue"
  }
}
```

**Funnel Chart:**
```json
{
  "chart_type": "funnel",
  "data": [
    {"stage": "Awareness", "value": 1000},
    {"stage": "Interest", "value": 500}, 
    {"stage": "Purchase", "value": 100}
  ],
  "field_map": {
    "category_field": "stage",
    "value_field": "value"
  }
}
```

## üîß Configuration

### Environment Variables
- `MCP_TRANSPORT` - Transport type (`streamable-http` | `stdio`)
- `MCP_HOST` - Host address (default: `0.0.0.0`)
- `MCP_PORT` - Port number (default: `8000`)
- `LOG_LEVEL` - Logging level (default: `INFO`)
- `MCP_DEBUG` - Enable debug mode (`true` | `false`)
- `CHART_DEFAULT_WIDTH` - Default chart width in pixels (default: `800`)
- `CHART_DEFAULT_HEIGHT` - Default chart height in pixels (default: `600`)
- `CHART_DEFAULT_DPI` - Default chart DPI (default: `100`)
- `CHART_MAX_DATA_POINTS` - Maximum data points per chart (default: `10000`)

### User Preferences
Personal preferences are stored in `~/.plots_mcp_config.json`:
```json
{
  "defaults": {
    "output_format": "mermaid",
    "theme": "default",
    "chart_width": 800,
    "chart_height": 600
  },
  "user_preferences": {
    "output_format": "mcp_image",
    "theme": "dark"
  }
}
```

## üöÄ Advanced Usage

### Custom Themes
Available themes: `default`, `dark`, `seaborn`, `minimal`, `whitegrid`, `darkgrid`, `ticks`

### High-Resolution Charts
```bash
uvx --from git+https://github.com/mr901/mcp-plots.git mcp-plots \
  --chart-width 1920 \
  --chart-height 1080 \
  --chart-dpi 300
```

### Performance Optimization
- Use `max_data_points` to limit large datasets
- MERMAID output is fastest for quick visualization
- PNG output for high-quality static images
- SVG output for scalable vector graphics

## üêõ Troubleshooting

### Common Issues

**Issue**: Charts not rendering in Cursor
- **Solution**: Ensure `output_format="mermaid"` (default)
- **Check**: MCP server connection in Cursor

**Issue**: `uvx` command not found
- **Solution**: Install uv: `curl -LsSf https://astral.sh/uv/install.sh | sh`

**Issue**: Port already in use
- **Solution**: Use different port: `--port 8001`

**Issue**: Large datasets slow
- **Solution**: Sample data or increase `--max-data-points`

### Debug Mode
```bash
uvx --from git+https://github.com/mr901/mcp-plots.git mcp-plots \
  --debug \
  --log-level DEBUG
```

## üìù Notes

- Matplotlib runs headless (Agg backend) in the container
- For large datasets, sample your data for responsiveness  
- Chart defaults can be overridden per-request via `config_overrides`
- MERMAID charts render instantly in Cursor for the best user experience
- User preferences persist across sessions and apply to all charts by default
