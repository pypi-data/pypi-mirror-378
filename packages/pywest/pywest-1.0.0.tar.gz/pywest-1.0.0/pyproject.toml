[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pywest"
version = "1.0.0"
description = "pybox - No Code Obfuscation, No Compiled PYCs, Open Python Projects"
authors = [
    {name = "pybox Community", email = "community@pybox.dev"},
]
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
dependencies = [
    "tomli>=1.2.0; python_version < '3.11'",
    "tomli-w>=1.0.0",
]
keywords = ["python", "portable", "embeddable", "development", "cli", "uv", "package-manager"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Build Tools",
    "Topic :: System :: Software Distribution",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# CLI Entry point - Fixed to use proper module path
[project.scripts]
pybox = "pybox:main"

[project.urls]
Homepage = "https://github.com/pybox-community/pybox"
Documentation = "https://pybox.dev/docs"
Repository = "https://github.com/pybox-community/pybox.git"
"Bug Tracker" = "https://github.com/pybox-community/pybox/issues"

# Tool configurations
[tool.pybox]
python_version = "3.12.10"

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "ruff>=0.1.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]

# Fixed package discovery
[tool.setuptools.packages.find]
where = ["."]
include = ["pybox*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.ruff]
line-length = 88
target-version = "py38"
extend-exclude = [
    ".venv",
    ".env",
    "dist",
    "build",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "C90", # mccabe complexity
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (we'll handle this case by case)
    "A003",  # builtin attribute shadowing
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["pybox"]
force-single-line = false