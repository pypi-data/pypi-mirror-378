from typing import Dict, List, Union
import numpy as np
from pathlib import Path

from ._metadata import *


class Cryptomatte:
    """
    A cryptomatte file loaded from disk or memory storing the channels as compressed buffer
    """

    def __init__(self) -> None: ...
    def __init__(self, channels: Dict[str, ChannelFloat32], metadata: Metadata) -> None: ...
    def __init__(self, channels: Dict[str, np.ndarray], width: int, height: int, metadata: Metadata) -> None: ...

    @staticmethod
    def load(file: Union[str, Path], load_preview: bool = False) -> List["Cryptomatte"]: ...

    def width(self) -> int: ...
    def height(self) -> int: ...

    def has_preview(self) -> bool: ...
    def preview(self) -> List[np.ndarray]: ...
    def extract_preview_compressed(self) -> Dict[str, ChannelFloat32]: ...

    def mask(self, name: str) -> np.ndarray: ...
    def mask(self, hash: int) -> np.ndarray: ...

    def mask_compressed(self, name: str) -> ChannelFloat32: ...
    def mask_compressed(self, hash: int) -> ChannelFloat32: ...

    def masks(self, names: List[str]) -> Dict[str, np.ndarray]: ...
    def masks(self, hashes: List[int]) -> Dict[str, np.ndarray]: ...
    def masks(self) -> Dict[str, np.ndarray]: ...

    def masks_compressed(self, names: List[str]) -> Dict[str, ChannelFloat32]: ...
    def masks_compressed(self, hashes: List[int]) -> Dict[str, ChannelFloat32]: ...
    def masks_compressed(self) -> Dict[str, ChannelFloat32]: ...

    def num_levels(self) -> int: ...
    def metadata(self) -> Metadata: ...