# ==============================================================================
#  Rolesnap - Role-Based Configuration
# ==============================================================================
# This file defines the architectural components ("Roles") of your project.
# A role represents a logical unit of functionality, like a microservice,
# a feature slice, or an infrastructure layer.
#
# The tool uses this configuration to create focused "snapshots" of your
# codebase, which is useful for generating context for LLMs, onboarding new
# developers, or conducting architectural reviews.
# ==============================================================================


settings:
  # --- Project Paths ---
  # REQUIRED: The absolute path to the root of your source code repository.
  # The tool will resolve all relative paths inside 'roles' against this root.
  # Example: "/home/user/my-awesome-project/src"
  project_root: "/path/to/your/project"
  # OPTIONAL: The absolute path to your documentation folder, if it lives
  # outside the project_root (e.g., in a sibling directory).
  # Example: "/home/user/my-awesome-project/docs"
  docs_root: "/path/to/your/docs"
  # --- Global Exclusions ---
  # A list of directory or file names to ALWAYS ignore during scanning.
  exclude_dirs:
    - ".git"
    - ".venv"
    - "node_modules"
    - "__pycache__"
    - "build"
    - "dist"
    - "*.egg-info"
    - "logs"
    - "__pycache__"
    - ".mypy_cache"
    - ".pytest_cache"
    - ".ruff_cache"
    - ".idea"
    - ".vscode"

  # --- Shared Code ---
  # A list of common utility directories that can be optionally included
  # in a role's 'Internal Logic' by using the '--include-utils' flag.
  utils_dirs:
    - "shared/utils"
    - "common/helpers"

# ==============================================================================
#  Role Definitions
# ==============================================================================
roles:
# --- Example 1: A backend service with dependencies ---
  auth_service:
    # A brief, human-readable description of the role's purpose.
    help: "Handles user authentication, authorization, and session management."

    # --- API Surface ---
    # The public contract of this role. What other components can import/call.
    # Typically contains abstract classes, interfaces, or DTOs.
    external_ports:
      - "services/auth/ports/"
      - "services/auth/interfaces.py"
    # The core domain models and business objects this role exposes.
    external_domain:
      - "domain/user_model.py"
      - "domain/session.py"
      - "shared/dtos/auth_events.py"

    # --- Implementation Details ---
    # The internal code that implements the role's logic. This should not be
    # directly imported by other roles.
    internal_logic:
      - "services/auth/"

    # --- Tasks & Entrypoints ---
    # Scripts or tasks that are considered stable, foundational examples.
    base_tasks:
      - "tasks/run_auth_service.py"
    # More complex, experimental, or specialized tasks.
    advanced_tasks:
      - "tasks/migrate_user_db_schema.py"

    # --- Documentation ---
    # Relevant documentation files. Paths are resolved against 'docs_root' if
    # it's defined, otherwise against 'project_root'.
    docs:
      - "architecture/auth_service.md"
      - "guides/user_onboarding_flow.md"

    # --- Dependencies ---
    # A list of other roles that this role depends on. The tool will automatically
    # include the 'external_ports' and 'external_domain' of these imported roles
    # when creating a snapshot. This prevents context duplication.
    imports:
      - "shared_kernel" # Assumes a 'shared_kernel' role is defined below.

  # --- Example 2: A data processing role ---
  reporting_engine:
    help: "Generates daily and monthly business reports from raw data."
    external_ports:
      - "pipelines/reporting/entrypoint.py"
    external_domain:
      - "domain/report_model.py"
    internal_logic:
      - "pipelines/reporting/"
    base_tasks:
      - "tasks/generate_daily_report.py"
    advanced_tasks: []
    docs:
      - "reports/definitions.md"
    imports:
      - "shared_kernel"
      - "data_warehouse_adapter"

  # --- Example 3: A foundational role with no dependencies ---
  shared_kernel:
    help: "Core, stable domain models and interfaces used across the application."
    external_ports:
      - "shared/ports/"
    external_domain:
      - "shared/dtos/"
      - "shared/models/"
    internal_logic: [] # A purely declarative role might have no internal logic.
    base_tasks: []
    advanced_tasks: []
    docs:
      - "architecture/shared_kernel.md"
    imports: [] # This role is a foundational block, so it imports nothing.

  # --- Add your own project-specific roles below ---
