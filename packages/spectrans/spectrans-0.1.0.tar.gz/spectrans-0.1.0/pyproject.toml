[build-system]
requires = ["setuptools>=70.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "spectrans"
version = "0.1.0"
description = "Modular spectral transformer implementations in PyTorch"
readme = "README.md"
requires-python = ">=3.13"
license = "MIT"
authors = [
    {name = "Aaron Steven White", email = "aaronstevenwhite@gmail.com"},
]
keywords = [
    "deep-learning",
    "transformers",
    "pytorch",
    "neural-networks",
    "fft",
    "wavelets",
    "spectral-methods",
    "sequence-modeling",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "torch>=2.5.0",
    "numpy>=2.0.0",
    "scipy>=1.16.1",
    "pyyaml>=6.0.2",
    "einops>=0.8.0",
    "PyWavelets>=1.6.0",
    "pydantic>=2.11.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-cov>=5.0.0",
    "pytest-benchmark>=4.0.0",
    "mypy>=1.11.0",
    "types-PyYAML>=6.0.0",
    "ruff>=0.6.0",
    "black>=24.8.0",
    "isort>=5.13.0",
    "pre-commit>=3.8.0",
]
examples = [
    "tqdm>=4.66.0",
]
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
    "pymdown-extensions>=10.0",
    "mike>=2.1.0",
]

[project.urls]
Repository = "https://github.com/aaronstevenwhite/spectrans"
Documentation = "https://spectrans.readthedocs.io"

[tool.setuptools.packages.find]
where = ["src"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[tool.ruff]
target-version = "py313"
line-length = 100

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "NPY",  # numpy specific rules
    "PD",   # pandas-vet
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports
"tests/*" = ["ARG"]  # unused arguments in tests

[tool.ruff.lint.isort]
known-first-party = ["spectrans"]


[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = [
    "--verbose",
    "--cov=spectrans",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src/spectrans"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]
