[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "python-dart-sass"
version = "0.1.0"
description = "Python implementation of the Embedded Sass Host using the Dart Sass embedded protocol"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Harvey McQueen", email = "hmcqueen@gmail.com" },
]
maintainers = [
    { name = "Harvey McQueen", email = "hmcqueen@gmail.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Pre-processors",
]
keywords = ["sass", "scss", "css", "stylesheet", "embedded", "dart-sass", "compiler"]
requires-python = ">=3.10"
dependencies = [
    "protobuf>=4.21.0",
    "reactivex>=4.0.0",
    "colorspacious>=1.1.0",
    "immutables>=0.15",
    "varint>=1.0.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "grpcio-tools>=1.70.0",
    "mypy-protobuf>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/hmcqueen/python-dart-sass"
Repository = "https://github.com/hmcqueen/python-dart-sass"
Documentation = "https://github.com/hmcqueen/python-dart-sass#readme"
"Bug Tracker" = "https://github.com/hmcqueen/python-dart-sass/issues"
Changelog = "https://github.com/hmcqueen/python-dart-sass/blob/main/CHANGELOG.md"

[project.scripts]
python-dart-sass = "dart_sass.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/dart_sass"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/CONTRIBUTING.md",
    "/CHANGELOG.md",
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=dart_sass --cov-report=term-missing --cov-report=html"

[tool.ruff]
line-length = 88
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
