from typing import Callable


class ktuple(tuple):
    def foreach(self, f: Callable) -> 'ktuple': ...
    def where(self, f: Callable) -> 'ktuple': ...
    def reduce(self, f: Callable) -> object: ...
    def flatten(self) -> 'ktuple': ...
    def length(self) -> int: ...
    def zip_map(self, f: Callable[[tuple[object]], object], *args: tuple[object]) -> 'ktuple': ...
    def addition(self, *args: tuple[object]) -> 'ktuple': ...
    def subtraction(self, *args: tuple[object]) -> 'ktuple': ...
    def multiplication(self, *args: tuple[object]) -> 'ktuple': ...
    def division(self, *args: tuple[object]) -> 'ktuple': ...
    def floor_division(self, *args: tuple[object]) -> 'ktuple': ...
    def modulo(self, *args: tuple[object]) -> 'ktuple': ...
    def __match_lengths(self, kargs: tuple[tuple[object]]) -> Exception | None: ...
