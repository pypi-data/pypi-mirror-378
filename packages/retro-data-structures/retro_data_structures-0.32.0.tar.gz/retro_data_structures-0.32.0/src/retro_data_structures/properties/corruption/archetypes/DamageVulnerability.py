# Generated File
from __future__ import annotations

import dataclasses
import struct
import typing
import typing_extensions

from retro_data_structures import json_util
from retro_data_structures.game_check import Game
from retro_data_structures.properties.base_property import BaseProperty
from retro_data_structures.properties.field_reflection import FieldReflection
from retro_data_structures.properties.corruption.archetypes.WeaponVulnerability import WeaponVulnerability

if typing.TYPE_CHECKING:
    class DamageVulnerabilityJson(typing_extensions.TypedDict):
        power: json_util.JsonObject
        plasma: json_util.JsonObject
        nova: json_util.JsonObject
        phazon: json_util.JsonObject
        power_charge: json_util.JsonObject
        plasma_charge: json_util.JsonObject
        nova_charge: json_util.JsonObject
        phazon_charge: json_util.JsonObject
        missile: json_util.JsonObject
        ice_missile: json_util.JsonObject
        phazon_missile: json_util.JsonObject
        bomb: json_util.JsonObject
        grapple_upgrade: json_util.JsonObject
        phazon_grapple: json_util.JsonObject
        boost_ball: json_util.JsonObject
        phazon_ball: json_util.JsonObject
        screw_attack: json_util.JsonObject
        poison_water: json_util.JsonObject
        ai: json_util.JsonObject
        friendly_ai: json_util.JsonObject
        weapon_vulnerability: json_util.JsonObject
        electrical: json_util.JsonObject
    

@dataclasses.dataclass()
class DamageVulnerability(BaseProperty):
    power: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0xac8bb2a7, original_name='Power', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    plasma: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0xe446a4fc, original_name='Plasma', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    nova: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0xd2ea25a6, original_name='Nova', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    phazon: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0xbb70093f, original_name='Phazon', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    power_charge: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0xa442b4a3, original_name='PowerCharge', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    plasma_charge: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0xd705c416, original_name='PlasmaCharge', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    nova_charge: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0xd1cd493a, original_name='NovaCharge', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    phazon_charge: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0x7a6e3ddb, original_name='PhazonCharge', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    missile: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0x00efe8cb, original_name='Missile', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    ice_missile: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0x57a4dff2, original_name='IceMissile', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    phazon_missile: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0x185a88ad, original_name='PhazonMissile', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    bomb: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0x68ae13a0, original_name='Bomb', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    grapple_upgrade: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0x39444bdd, original_name='GrappleUpgrade', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    phazon_grapple: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0xcee16e7a, original_name='PhazonGrapple', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    boost_ball: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0xd99c0400, original_name='BoostBall', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    phazon_ball: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0x784625bd, original_name='PhazonBall', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    screw_attack: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0x866f91bf, original_name='ScrewAttack', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    poison_water: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0x50dde891, original_name='PoisonWater', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    ai: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0xbfac229f, original_name='Ai', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    friendly_ai: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0xda422ae5, original_name='FriendlyAi', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    weapon_vulnerability: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0x89d25df4, original_name='WeaponVulnerability', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })
    electrical: WeaponVulnerability = dataclasses.field(default_factory=WeaponVulnerability, metadata={
        'reflection': FieldReflection[WeaponVulnerability](
            WeaponVulnerability, id=0xc2beb229, original_name='Electrical', from_json=WeaponVulnerability.from_json, to_json=WeaponVulnerability.to_json
        ),
    })

    @classmethod
    def game(cls) -> Game:
        return Game.CORRUPTION

    @classmethod
    def from_stream(cls, data: typing.BinaryIO, size: int | None = None, default_override: dict | None = None) -> typing_extensions.Self:
        property_count = struct.unpack(">H", data.read(2))[0]
        if (result := cls._fast_decode(data, property_count)) is not None:
            return result

        present_fields = default_override or {}
        for _ in range(property_count):
            property_id, property_size = struct.unpack(">LH", data.read(6))
            start = data.tell()
            try:
                property_name, decoder = _property_decoder[property_id]
                present_fields[property_name] = decoder(data, property_size)
            except KeyError:
                raise RuntimeError(f"Unknown property: 0x{property_id:08x}")
            assert data.tell() - start == property_size

        return cls(**present_fields)

    @classmethod
    def _fast_decode(cls, data: typing.BinaryIO, property_count: int) -> typing_extensions.Self | None:
        if property_count != 22:
            return None
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0xac8bb2a7
        power = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0xe446a4fc
        plasma = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0xd2ea25a6
        nova = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0xbb70093f
        phazon = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0xa442b4a3
        power_charge = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0xd705c416
        plasma_charge = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0xd1cd493a
        nova_charge = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0x7a6e3ddb
        phazon_charge = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0x00efe8cb
        missile = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0x57a4dff2
        ice_missile = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0x185a88ad
        phazon_missile = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0x68ae13a0
        bomb = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0x39444bdd
        grapple_upgrade = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0xcee16e7a
        phazon_grapple = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0xd99c0400
        boost_ball = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0x784625bd
        phazon_ball = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0x866f91bf
        screw_attack = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0x50dde891
        poison_water = WeaponVulnerability.from_stream(data, property_size)
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0xbfac229f
        ai = WeaponVulnerability.from_stream(data, property_size, default_override={'damage_multiplier': 0.0})
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0xda422ae5
        friendly_ai = WeaponVulnerability.from_stream(data, property_size, default_override={'damage_multiplier': 0.0})
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0x89d25df4
        weapon_vulnerability = WeaponVulnerability.from_stream(data, property_size, default_override={'damage_multiplier': 0.0})
    
        property_id, property_size = struct.unpack(">LH", data.read(6))
        assert property_id == 0xc2beb229
        electrical = WeaponVulnerability.from_stream(data, property_size)
    
        return cls(power, plasma, nova, phazon, power_charge, plasma_charge, nova_charge, phazon_charge, missile, ice_missile, phazon_missile, bomb, grapple_upgrade, phazon_grapple, boost_ball, phazon_ball, screw_attack, poison_water, ai, friendly_ai, weapon_vulnerability, electrical)

    def to_stream(self, data: typing.BinaryIO, default_override: dict | None = None) -> None:
        default_override = default_override or {}
        data.write(b'\x00\x16')  # 22 properties

        data.write(b'\xac\x8b\xb2\xa7')  # 0xac8bb2a7
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.power.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'\xe4F\xa4\xfc')  # 0xe446a4fc
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.plasma.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'\xd2\xea%\xa6')  # 0xd2ea25a6
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.nova.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'\xbbp\t?')  # 0xbb70093f
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.phazon.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'\xa4B\xb4\xa3')  # 0xa442b4a3
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.power_charge.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'\xd7\x05\xc4\x16')  # 0xd705c416
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.plasma_charge.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'\xd1\xcdI:')  # 0xd1cd493a
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.nova_charge.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'zn=\xdb')  # 0x7a6e3ddb
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.phazon_charge.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'\x00\xef\xe8\xcb')  # 0xefe8cb
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.missile.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'W\xa4\xdf\xf2')  # 0x57a4dff2
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.ice_missile.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'\x18Z\x88\xad')  # 0x185a88ad
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.phazon_missile.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'h\xae\x13\xa0')  # 0x68ae13a0
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.bomb.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'9DK\xdd')  # 0x39444bdd
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.grapple_upgrade.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'\xce\xe1nz')  # 0xcee16e7a
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.phazon_grapple.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'\xd9\x9c\x04\x00')  # 0xd99c0400
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.boost_ball.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'xF%\xbd')  # 0x784625bd
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.phazon_ball.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'\x86o\x91\xbf')  # 0x866f91bf
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.screw_attack.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'P\xdd\xe8\x91')  # 0x50dde891
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.poison_water.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'\xbf\xac"\x9f')  # 0xbfac229f
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.ai.to_stream(data, default_override={'damage_multiplier': 0.0})
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'\xdaB*\xe5')  # 0xda422ae5
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.friendly_ai.to_stream(data, default_override={'damage_multiplier': 0.0})
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'\x89\xd2]\xf4')  # 0x89d25df4
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.weapon_vulnerability.to_stream(data, default_override={'damage_multiplier': 0.0})
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

        data.write(b'\xc2\xbe\xb2)')  # 0xc2beb229
        before = data.tell()
        data.write(b'\x00\x00')  # size placeholder
        self.electrical.to_stream(data)
        after = data.tell()
        data.seek(before)
        data.write(struct.pack(">H", after - before - 2))
        data.seek(after)

    @classmethod
    def from_json(cls, data: json_util.JsonValue) -> typing_extensions.Self:
        json_data = typing.cast("DamageVulnerabilityJson", data)
        return cls(
            power=WeaponVulnerability.from_json(json_data['power']),
            plasma=WeaponVulnerability.from_json(json_data['plasma']),
            nova=WeaponVulnerability.from_json(json_data['nova']),
            phazon=WeaponVulnerability.from_json(json_data['phazon']),
            power_charge=WeaponVulnerability.from_json(json_data['power_charge']),
            plasma_charge=WeaponVulnerability.from_json(json_data['plasma_charge']),
            nova_charge=WeaponVulnerability.from_json(json_data['nova_charge']),
            phazon_charge=WeaponVulnerability.from_json(json_data['phazon_charge']),
            missile=WeaponVulnerability.from_json(json_data['missile']),
            ice_missile=WeaponVulnerability.from_json(json_data['ice_missile']),
            phazon_missile=WeaponVulnerability.from_json(json_data['phazon_missile']),
            bomb=WeaponVulnerability.from_json(json_data['bomb']),
            grapple_upgrade=WeaponVulnerability.from_json(json_data['grapple_upgrade']),
            phazon_grapple=WeaponVulnerability.from_json(json_data['phazon_grapple']),
            boost_ball=WeaponVulnerability.from_json(json_data['boost_ball']),
            phazon_ball=WeaponVulnerability.from_json(json_data['phazon_ball']),
            screw_attack=WeaponVulnerability.from_json(json_data['screw_attack']),
            poison_water=WeaponVulnerability.from_json(json_data['poison_water']),
            ai=WeaponVulnerability.from_json(json_data['ai']),
            friendly_ai=WeaponVulnerability.from_json(json_data['friendly_ai']),
            weapon_vulnerability=WeaponVulnerability.from_json(json_data['weapon_vulnerability']),
            electrical=WeaponVulnerability.from_json(json_data['electrical']),
        )

    def to_json(self) -> json_util.JsonObject:
        return {
            'power': self.power.to_json(),
            'plasma': self.plasma.to_json(),
            'nova': self.nova.to_json(),
            'phazon': self.phazon.to_json(),
            'power_charge': self.power_charge.to_json(),
            'plasma_charge': self.plasma_charge.to_json(),
            'nova_charge': self.nova_charge.to_json(),
            'phazon_charge': self.phazon_charge.to_json(),
            'missile': self.missile.to_json(),
            'ice_missile': self.ice_missile.to_json(),
            'phazon_missile': self.phazon_missile.to_json(),
            'bomb': self.bomb.to_json(),
            'grapple_upgrade': self.grapple_upgrade.to_json(),
            'phazon_grapple': self.phazon_grapple.to_json(),
            'boost_ball': self.boost_ball.to_json(),
            'phazon_ball': self.phazon_ball.to_json(),
            'screw_attack': self.screw_attack.to_json(),
            'poison_water': self.poison_water.to_json(),
            'ai': self.ai.to_json(),
            'friendly_ai': self.friendly_ai.to_json(),
            'weapon_vulnerability': self.weapon_vulnerability.to_json(),
            'electrical': self.electrical.to_json(),
        }


def _decode_ai(data: typing.BinaryIO, property_size: int) -> WeaponVulnerability:
    return WeaponVulnerability.from_stream(data, property_size, default_override={'damage_multiplier': 0.0})


def _decode_friendly_ai(data: typing.BinaryIO, property_size: int) -> WeaponVulnerability:
    return WeaponVulnerability.from_stream(data, property_size, default_override={'damage_multiplier': 0.0})


def _decode_weapon_vulnerability(data: typing.BinaryIO, property_size: int) -> WeaponVulnerability:
    return WeaponVulnerability.from_stream(data, property_size, default_override={'damage_multiplier': 0.0})


_property_decoder: dict[int, tuple[str, typing.Callable[[typing.BinaryIO, int], typing.Any]]] = {
    0xac8bb2a7: ('power', WeaponVulnerability.from_stream),
    0xe446a4fc: ('plasma', WeaponVulnerability.from_stream),
    0xd2ea25a6: ('nova', WeaponVulnerability.from_stream),
    0xbb70093f: ('phazon', WeaponVulnerability.from_stream),
    0xa442b4a3: ('power_charge', WeaponVulnerability.from_stream),
    0xd705c416: ('plasma_charge', WeaponVulnerability.from_stream),
    0xd1cd493a: ('nova_charge', WeaponVulnerability.from_stream),
    0x7a6e3ddb: ('phazon_charge', WeaponVulnerability.from_stream),
    0xefe8cb: ('missile', WeaponVulnerability.from_stream),
    0x57a4dff2: ('ice_missile', WeaponVulnerability.from_stream),
    0x185a88ad: ('phazon_missile', WeaponVulnerability.from_stream),
    0x68ae13a0: ('bomb', WeaponVulnerability.from_stream),
    0x39444bdd: ('grapple_upgrade', WeaponVulnerability.from_stream),
    0xcee16e7a: ('phazon_grapple', WeaponVulnerability.from_stream),
    0xd99c0400: ('boost_ball', WeaponVulnerability.from_stream),
    0x784625bd: ('phazon_ball', WeaponVulnerability.from_stream),
    0x866f91bf: ('screw_attack', WeaponVulnerability.from_stream),
    0x50dde891: ('poison_water', WeaponVulnerability.from_stream),
    0xbfac229f: ('ai', _decode_ai),
    0xda422ae5: ('friendly_ai', _decode_friendly_ai),
    0x89d25df4: ('weapon_vulnerability', _decode_weapon_vulnerability),
    0xc2beb229: ('electrical', WeaponVulnerability.from_stream),
}
