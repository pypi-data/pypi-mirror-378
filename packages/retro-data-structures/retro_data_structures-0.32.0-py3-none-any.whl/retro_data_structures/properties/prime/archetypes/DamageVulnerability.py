# Generated File
from __future__ import annotations

import dataclasses
import struct
import typing
import typing_extensions

from retro_data_structures import json_util
from retro_data_structures.game_check import Game
from retro_data_structures.properties.base_property import BaseProperty
from retro_data_structures.properties.field_reflection import FieldReflection
import retro_data_structures.enums.prime as enums
from retro_data_structures.properties.prime.archetypes.BeamCombos import BeamCombos
from retro_data_structures.properties.prime.archetypes.ChargedBeams import ChargedBeams

if typing.TYPE_CHECKING:
    from retro_data_structures.asset_manager import AssetManager
    from retro_data_structures.base_resource import Dependency

    class DamageVulnerabilityJson(typing_extensions.TypedDict):
        power: int
        ice: int
        wave: int
        plasma: int
        bomb: int
        power_bomb: int
        missile: int
        boost_ball: int
        phazon: int
        ai: int
        poison_water: int
        lava: int
        hot: int
        unused_weapon_1: int
        unused_weapon_2: int
        unused_weapon_3: int
        unnamed_0x00000010: json_util.JsonObject
        unnamed_0x00000011: json_util.JsonObject
    

@dataclasses.dataclass()
class DamageVulnerability(BaseProperty):
    power: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x00000000, original_name='Power', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    ice: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x00000001, original_name='Ice', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    wave: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x00000002, original_name='Wave', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    plasma: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x00000003, original_name='Plasma', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    bomb: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x00000004, original_name='Bomb', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    power_bomb: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x00000005, original_name='Power Bomb', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    missile: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x00000006, original_name='Missile', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    boost_ball: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x00000007, original_name='Boost Ball', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    phazon: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x00000008, original_name='Phazon', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    ai: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x00000009, original_name='AI', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    poison_water: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x0000000a, original_name='Poison Water', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    lava: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x0000000b, original_name='Lava', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    hot: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x0000000c, original_name='Hot', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    unused_weapon_1: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x0000000d, original_name='Unused Weapon 1', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    unused_weapon_2: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x0000000e, original_name='Unused Weapon 2', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    unused_weapon_3: enums.VulnerabilityTypeEnum = dataclasses.field(default=enums.VulnerabilityTypeEnum.DoubleDamage, metadata={
        'reflection': FieldReflection[enums.VulnerabilityTypeEnum](
            enums.VulnerabilityTypeEnum, id=0x0000000f, original_name='Unused Weapon 3', from_json=enums.VulnerabilityTypeEnum.from_json, to_json=enums.VulnerabilityTypeEnum.to_json
        ),
    })
    unnamed_0x00000010: ChargedBeams = dataclasses.field(default_factory=ChargedBeams, metadata={
        'reflection': FieldReflection[ChargedBeams](
            ChargedBeams, id=0x00000010, original_name='16', from_json=ChargedBeams.from_json, to_json=ChargedBeams.to_json
        ),
    })
    unnamed_0x00000011: BeamCombos = dataclasses.field(default_factory=BeamCombos, metadata={
        'reflection': FieldReflection[BeamCombos](
            BeamCombos, id=0x00000011, original_name='17', from_json=BeamCombos.from_json, to_json=BeamCombos.to_json
        ),
    })

    @classmethod
    def game(cls) -> Game:
        return Game.PRIME

    @classmethod
    def from_stream(cls, data: typing.BinaryIO, size: int | None = None, default_override: dict | None = None) -> typing_extensions.Self:
        property_size = None  # Atomic
        power = enums.VulnerabilityTypeEnum.from_stream(data)
        ice = enums.VulnerabilityTypeEnum.from_stream(data)
        wave = enums.VulnerabilityTypeEnum.from_stream(data)
        plasma = enums.VulnerabilityTypeEnum.from_stream(data)
        bomb = enums.VulnerabilityTypeEnum.from_stream(data)
        power_bomb = enums.VulnerabilityTypeEnum.from_stream(data)
        missile = enums.VulnerabilityTypeEnum.from_stream(data)
        boost_ball = enums.VulnerabilityTypeEnum.from_stream(data)
        phazon = enums.VulnerabilityTypeEnum.from_stream(data)
        ai = enums.VulnerabilityTypeEnum.from_stream(data)
        poison_water = enums.VulnerabilityTypeEnum.from_stream(data)
        lava = enums.VulnerabilityTypeEnum.from_stream(data)
        hot = enums.VulnerabilityTypeEnum.from_stream(data)
        unused_weapon_1 = enums.VulnerabilityTypeEnum.from_stream(data)
        unused_weapon_2 = enums.VulnerabilityTypeEnum.from_stream(data)
        unused_weapon_3 = enums.VulnerabilityTypeEnum.from_stream(data)
        unnamed_0x00000010 = ChargedBeams.from_stream(data, property_size)
        unnamed_0x00000011 = BeamCombos.from_stream(data, property_size)
        return cls(power, ice, wave, plasma, bomb, power_bomb, missile, boost_ball, phazon, ai, poison_water, lava, hot, unused_weapon_1, unused_weapon_2, unused_weapon_3, unnamed_0x00000010, unnamed_0x00000011)

    def to_stream(self, data: typing.BinaryIO, default_override: dict | None = None) -> None:
        default_override = default_override or {}
        self.power.to_stream(data)
        self.ice.to_stream(data)
        self.wave.to_stream(data)
        self.plasma.to_stream(data)
        self.bomb.to_stream(data)
        self.power_bomb.to_stream(data)
        self.missile.to_stream(data)
        self.boost_ball.to_stream(data)
        self.phazon.to_stream(data)
        self.ai.to_stream(data)
        self.poison_water.to_stream(data)
        self.lava.to_stream(data)
        self.hot.to_stream(data)
        self.unused_weapon_1.to_stream(data)
        self.unused_weapon_2.to_stream(data)
        self.unused_weapon_3.to_stream(data)
        self.unnamed_0x00000010.to_stream(data)
        self.unnamed_0x00000011.to_stream(data)

    @classmethod
    def from_json(cls, data: json_util.JsonValue) -> typing_extensions.Self:
        json_data = typing.cast("DamageVulnerabilityJson", data)
        return cls(
            power=enums.VulnerabilityTypeEnum.from_json(json_data['power']),
            ice=enums.VulnerabilityTypeEnum.from_json(json_data['ice']),
            wave=enums.VulnerabilityTypeEnum.from_json(json_data['wave']),
            plasma=enums.VulnerabilityTypeEnum.from_json(json_data['plasma']),
            bomb=enums.VulnerabilityTypeEnum.from_json(json_data['bomb']),
            power_bomb=enums.VulnerabilityTypeEnum.from_json(json_data['power_bomb']),
            missile=enums.VulnerabilityTypeEnum.from_json(json_data['missile']),
            boost_ball=enums.VulnerabilityTypeEnum.from_json(json_data['boost_ball']),
            phazon=enums.VulnerabilityTypeEnum.from_json(json_data['phazon']),
            ai=enums.VulnerabilityTypeEnum.from_json(json_data['ai']),
            poison_water=enums.VulnerabilityTypeEnum.from_json(json_data['poison_water']),
            lava=enums.VulnerabilityTypeEnum.from_json(json_data['lava']),
            hot=enums.VulnerabilityTypeEnum.from_json(json_data['hot']),
            unused_weapon_1=enums.VulnerabilityTypeEnum.from_json(json_data['unused_weapon_1']),
            unused_weapon_2=enums.VulnerabilityTypeEnum.from_json(json_data['unused_weapon_2']),
            unused_weapon_3=enums.VulnerabilityTypeEnum.from_json(json_data['unused_weapon_3']),
            unnamed_0x00000010=ChargedBeams.from_json(json_data['unnamed_0x00000010']),
            unnamed_0x00000011=BeamCombos.from_json(json_data['unnamed_0x00000011']),
        )

    def to_json(self) -> json_util.JsonObject:
        return {
            'power': self.power.to_json(),
            'ice': self.ice.to_json(),
            'wave': self.wave.to_json(),
            'plasma': self.plasma.to_json(),
            'bomb': self.bomb.to_json(),
            'power_bomb': self.power_bomb.to_json(),
            'missile': self.missile.to_json(),
            'boost_ball': self.boost_ball.to_json(),
            'phazon': self.phazon.to_json(),
            'ai': self.ai.to_json(),
            'poison_water': self.poison_water.to_json(),
            'lava': self.lava.to_json(),
            'hot': self.hot.to_json(),
            'unused_weapon_1': self.unused_weapon_1.to_json(),
            'unused_weapon_2': self.unused_weapon_2.to_json(),
            'unused_weapon_3': self.unused_weapon_3.to_json(),
            'unnamed_0x00000010': self.unnamed_0x00000010.to_json(),
            'unnamed_0x00000011': self.unnamed_0x00000011.to_json(),
        }

    def dependencies_for(self, asset_manager: AssetManager) -> typing.Iterator[Dependency]:
        for method, field_name, field_type in [
            (self.unnamed_0x00000010.dependencies_for, "unnamed_0x00000010", "ChargedBeams"),
            (self.unnamed_0x00000011.dependencies_for, "unnamed_0x00000011", "BeamCombos"),
        ]:
            try:
                yield from method(asset_manager)
            except Exception as e:
                raise Exception(
                    f"Error finding dependencies for DamageVulnerability.{field_name} ({field_type}): {e}"
                )
