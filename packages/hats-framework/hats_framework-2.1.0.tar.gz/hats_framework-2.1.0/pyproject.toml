[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hats-framework"
version = "2.1.0"
description = "Professional cybersecurity automation framework with 36 CLI tools and enterprise security"
readme = "README.md"
requires-python = ">=3.7"
license = "MIT"
authors = [
    {name = "HATS Security Team", email = "security@hats-framework.org"}
]
maintainers = [
    {name = "HATS Security Team", email = "security@hats-framework.org"}
]
keywords = [
    "cybersecurity",
    "penetration-testing", 
    "security-tools",
    "automation",
    "hacking-tools",
    "vulnerability-scanner",
    "network-security",
    "web-security", 
    "security-framework",
    "nmap",
    "gobuster",
    "sqlmap",
    "nikto",
    "john-the-ripper",
    "hydra",
    "metasploit",
    "kali-linux",
    "security-audit",
    "opsec",
    "red-team",
    "blue-team",
    "cli-tools"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators", 
    "Intended Audience :: Developers",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Systems Administration",
    "Topic :: System :: Networking :: Monitoring",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Environment :: Console",
]
dependencies = [
    "pyyaml>=6.0",
    "requests>=2.28.0",
    "psutil>=5.9.0",
    "colorama>=0.4.5",
    "rich>=12.0.0",
    "click>=8.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0", 
    "pytest-mock>=3.8.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.971",
    "pre-commit>=2.20.0",
]
reporting = [
    "jinja2>=3.1.0",
    "matplotlib>=3.5.0",
    "plotly>=5.0.0",
]
database = [
    "sqlalchemy>=1.4.0",
]
web = [
    "flask>=2.2.0",
    "flask-restful>=0.3.9",
]
advanced = [
    "scapy>=2.4.0",
    "python-nmap>=0.7.0",
    "cryptography>=37.0.0",
    "pycryptodome>=3.15.0",
    "lxml>=4.9.0",
    "pandas>=1.4.0",
]

[project.urls]
Homepage = "https://github.com/hats-security/hats-framework"
Documentation = "https://hats-framework.readthedocs.io/"
Repository = "https://github.com/hats-security/hats-framework.git"
"Bug Tracker" = "https://github.com/hats-security/hats-framework/issues"
Security = "https://github.com/hats-security/hats-framework/security"

[project.scripts]
hats = "hats.cli:main"
hats-config = "hats.config_cli:main"
hats-report = "hats.report_cli:main"

[tool.setuptools]
packages = ["hats", "hats.categories", "hats.utils"]

[tool.setuptools.package-data]
hats = ["configs/*.yaml", "templates/*.html", "templates/*.xml", "data/*.json"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--verbose --cov=hats --cov-report=html --cov-report=term"

[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
