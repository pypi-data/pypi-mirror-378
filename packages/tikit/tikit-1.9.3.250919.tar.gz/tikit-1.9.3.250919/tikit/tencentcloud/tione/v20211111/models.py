# -*- coding: utf8 -*-
# Copyright (c) 2017-2021 THL A29 Limited, a Tencent company. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import warnings

from tikit.tencentcloud.common.abstract_model import AbstractModel


class AIMarketAlgo(AbstractModel):
    """以ai市场算法作为数据源

    """

    def __init__(self):
        r"""
        :param _Id: AI市场公共算法版本Id
注意：此字段可能返回 null，表示取不到有效值。
        :type Id: str
        :param _Path: 数据路径
注意：此字段可能返回 null，表示取不到有效值。
        :type Path: str
        :param _MaterialName: 物料名称，可选值为 Model: 模型, Code: 代码, Data: 数据
注意：此字段可能返回 null，表示取不到有效值。
        :type MaterialName: str
        :param _Group: 算法系列
注意：此字段可能返回 null，表示取不到有效值。
        :type Group: str
        """
        self._Id = None
        self._Path = None
        self._MaterialName = None
        self._Group = None

    @property
    def Id(self):
        """AI市场公共算法版本Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Path(self):
        """数据路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def MaterialName(self):
        """物料名称，可选值为 Model: 模型, Code: 代码, Data: 数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._MaterialName

    @MaterialName.setter
    def MaterialName(self, MaterialName):
        self._MaterialName = MaterialName

    @property
    def Group(self):
        """算法系列
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Group

    @Group.setter
    def Group(self, Group):
        self._Group = Group


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Path = params.get("Path")
        self._MaterialName = params.get("MaterialName")
        self._Group = params.get("Group")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class APIConfigDetail(AbstractModel):
    """接口描述信息

    """

    def __init__(self):
        r"""
        :param _Id: 接口id
注意：此字段可能返回 null，表示取不到有效值。
        :type Id: str
        :param _ServiceGroupId: 接口所属服务组id
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceGroupId: str
        :param _Description: 接口描述
注意：此字段可能返回 null，表示取不到有效值。
        :type Description: str
        :param _RelativeUrl: 相对路径
注意：此字段可能返回 null，表示取不到有效值。
        :type RelativeUrl: str
        :param _ServiceType: 服务类型 HTTP HTTPS
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceType: str
        :param _HttpMethod: GET POST
注意：此字段可能返回 null，表示取不到有效值。
        :type HttpMethod: str
        :param _HttpInputExample: 请求示例
注意：此字段可能返回 null，表示取不到有效值。
        :type HttpInputExample: str
        :param _HttpOutputExample: 回包示例
注意：此字段可能返回 null，表示取不到有效值。
        :type HttpOutputExample: str
        :param _UpdatedBy: 更新成员
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdatedBy: str
        :param _UpdatedAt: 更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdatedAt: str
        :param _Uin: 主账号uin
注意：此字段可能返回 null，表示取不到有效值。
        :type Uin: str
        :param _SubUin: 子账号subuin
注意：此字段可能返回 null，表示取不到有效值。
        :type SubUin: str
        """
        self._Id = None
        self._ServiceGroupId = None
        self._Description = None
        self._RelativeUrl = None
        self._ServiceType = None
        self._HttpMethod = None
        self._HttpInputExample = None
        self._HttpOutputExample = None
        self._UpdatedBy = None
        self._UpdatedAt = None
        self._Uin = None
        self._SubUin = None

    @property
    def Id(self):
        """接口id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def ServiceGroupId(self):
        """接口所属服务组id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def Description(self):
        """接口描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def RelativeUrl(self):
        """相对路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RelativeUrl

    @RelativeUrl.setter
    def RelativeUrl(self, RelativeUrl):
        self._RelativeUrl = RelativeUrl

    @property
    def ServiceType(self):
        """服务类型 HTTP HTTPS
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ServiceType

    @ServiceType.setter
    def ServiceType(self, ServiceType):
        self._ServiceType = ServiceType

    @property
    def HttpMethod(self):
        """GET POST
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._HttpMethod

    @HttpMethod.setter
    def HttpMethod(self, HttpMethod):
        self._HttpMethod = HttpMethod

    @property
    def HttpInputExample(self):
        """请求示例
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._HttpInputExample

    @HttpInputExample.setter
    def HttpInputExample(self, HttpInputExample):
        self._HttpInputExample = HttpInputExample

    @property
    def HttpOutputExample(self):
        """回包示例
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._HttpOutputExample

    @HttpOutputExample.setter
    def HttpOutputExample(self, HttpOutputExample):
        self._HttpOutputExample = HttpOutputExample

    @property
    def UpdatedBy(self):
        """更新成员
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdatedBy

    @UpdatedBy.setter
    def UpdatedBy(self, UpdatedBy):
        self._UpdatedBy = UpdatedBy

    @property
    def UpdatedAt(self):
        """更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdatedAt

    @UpdatedAt.setter
    def UpdatedAt(self, UpdatedAt):
        self._UpdatedAt = UpdatedAt

    @property
    def Uin(self):
        """主账号uin
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def SubUin(self):
        """子账号subuin
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._ServiceGroupId = params.get("ServiceGroupId")
        self._Description = params.get("Description")
        self._RelativeUrl = params.get("RelativeUrl")
        self._ServiceType = params.get("ServiceType")
        self._HttpMethod = params.get("HttpMethod")
        self._HttpInputExample = params.get("HttpInputExample")
        self._HttpOutputExample = params.get("HttpOutputExample")
        self._UpdatedBy = params.get("UpdatedBy")
        self._UpdatedAt = params.get("UpdatedAt")
        self._Uin = params.get("Uin")
        self._SubUin = params.get("SubUin")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ASRBadCase(AbstractModel):
    """ASR badcase

    """

    def __init__(self):
        r"""
        :param _AudioUrl: 音频连接
        :type AudioUrl: str
        :param _AnnotationResult: 标注结果
        :type AnnotationResult: str
        :param _CurrentResult: 当前模型结果
        :type CurrentResult: str
        :param _PreviousResult: 优化前模型结果
        :type PreviousResult: str
        :param _AudioName: 音频文件名
        :type AudioName: str
        """
        self._AudioUrl = None
        self._AnnotationResult = None
        self._CurrentResult = None
        self._PreviousResult = None
        self._AudioName = None

    @property
    def AudioUrl(self):
        """音频连接
        :rtype: str
        """
        return self._AudioUrl

    @AudioUrl.setter
    def AudioUrl(self, AudioUrl):
        self._AudioUrl = AudioUrl

    @property
    def AnnotationResult(self):
        """标注结果
        :rtype: str
        """
        return self._AnnotationResult

    @AnnotationResult.setter
    def AnnotationResult(self, AnnotationResult):
        self._AnnotationResult = AnnotationResult

    @property
    def CurrentResult(self):
        """当前模型结果
        :rtype: str
        """
        return self._CurrentResult

    @CurrentResult.setter
    def CurrentResult(self, CurrentResult):
        self._CurrentResult = CurrentResult

    @property
    def PreviousResult(self):
        """优化前模型结果
        :rtype: str
        """
        return self._PreviousResult

    @PreviousResult.setter
    def PreviousResult(self, PreviousResult):
        self._PreviousResult = PreviousResult

    @property
    def AudioName(self):
        """音频文件名
        :rtype: str
        """
        return self._AudioName

    @AudioName.setter
    def AudioName(self, AudioName):
        self._AudioName = AudioName


    def _deserialize(self, params):
        self._AudioUrl = params.get("AudioUrl")
        self._AnnotationResult = params.get("AnnotationResult")
        self._CurrentResult = params.get("CurrentResult")
        self._PreviousResult = params.get("PreviousResult")
        self._AudioName = params.get("AudioName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddDocumentToKnowledgeBaseRequest(AbstractModel):
    """AddDocumentToKnowledgeBase请求参数结构体

    """

    def __init__(self):
        r"""
        :param _SessionId: 会话ID，用于区分不同的会话
        :type SessionId: str
        :param _ModelId: 模型ID，区分模型
        :type ModelId: str
        :param _Document: 文档
        :type Document: :class:`tencentcloud.tione.v20211111.models.KnowledgeDocument`
        """
        self._SessionId = None
        self._ModelId = None
        self._Document = None

    @property
    def SessionId(self):
        """会话ID，用于区分不同的会话
        :rtype: str
        """
        return self._SessionId

    @SessionId.setter
    def SessionId(self, SessionId):
        self._SessionId = SessionId

    @property
    def ModelId(self):
        """模型ID，区分模型
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def Document(self):
        """文档
        :rtype: :class:`tencentcloud.tione.v20211111.models.KnowledgeDocument`
        """
        return self._Document

    @Document.setter
    def Document(self, Document):
        self._Document = Document


    def _deserialize(self, params):
        self._SessionId = params.get("SessionId")
        self._ModelId = params.get("ModelId")
        if params.get("Document") is not None:
            self._Document = KnowledgeDocument()
            self._Document._deserialize(params.get("Document"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddDocumentToKnowledgeBaseResponse(AbstractModel):
    """AddDocumentToKnowledgeBase返回参数结构体

    """

    def __init__(self):
        r"""
        :param _KnowledgeBaseId: 知识库Id
        :type KnowledgeBaseId: str
        :param _DocumentId: 插入成功的标识Id
        :type DocumentId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._KnowledgeBaseId = None
        self._DocumentId = None
        self._RequestId = None

    @property
    def KnowledgeBaseId(self):
        """知识库Id
        :rtype: str
        """
        return self._KnowledgeBaseId

    @KnowledgeBaseId.setter
    def KnowledgeBaseId(self, KnowledgeBaseId):
        self._KnowledgeBaseId = KnowledgeBaseId

    @property
    def DocumentId(self):
        """插入成功的标识Id
        :rtype: str
        """
        return self._DocumentId

    @DocumentId.setter
    def DocumentId(self, DocumentId):
        self._DocumentId = DocumentId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._KnowledgeBaseId = params.get("KnowledgeBaseId")
        self._DocumentId = params.get("DocumentId")
        self._RequestId = params.get("RequestId")


class AddTaskTrainSampleRequest(AbstractModel):
    """AddTaskTrainSample请求参数结构体

    """

    def __init__(self):
        r"""
        :param _SampleItems: 待加入训练集的文本样本
        :type SampleItems: list of SampleItem
        :param _ProjectId: 项目id
        :type ProjectId: str
        :param _AppKey: 应用key
        :type AppKey: str
        """
        self._SampleItems = None
        self._ProjectId = None
        self._AppKey = None

    @property
    def SampleItems(self):
        """待加入训练集的文本样本
        :rtype: list of SampleItem
        """
        return self._SampleItems

    @SampleItems.setter
    def SampleItems(self, SampleItems):
        self._SampleItems = SampleItems

    @property
    def ProjectId(self):
        """项目id
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def AppKey(self):
        """应用key
        :rtype: str
        """
        return self._AppKey

    @AppKey.setter
    def AppKey(self, AppKey):
        self._AppKey = AppKey


    def _deserialize(self, params):
        if params.get("SampleItems") is not None:
            self._SampleItems = []
            for item in params.get("SampleItems"):
                obj = SampleItem()
                obj._deserialize(item)
                self._SampleItems.append(obj)
        self._ProjectId = params.get("ProjectId")
        self._AppKey = params.get("AppKey")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddTaskTrainSampleResponse(AbstractModel):
    """AddTaskTrainSample返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FileNames: 保存的文件名称
        :type FileNames: list of str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FileNames = None
        self._RequestId = None

    @property
    def FileNames(self):
        """保存的文件名称
        :rtype: list of str
        """
        return self._FileNames

    @FileNames.setter
    def FileNames(self, FileNames):
        self._FileNames = FileNames

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FileNames = params.get("FileNames")
        self._RequestId = params.get("RequestId")


class AddTencentLabWhitelistRequest(AbstractModel):
    """AddTencentLabWhitelist请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ClassUin: 需要增加白名单的主uin
        :type ClassUin: str
        :param _ClassSubUin: 需要增加白名单的subUin
        :type ClassSubUin: str
        :param _ResourceId: Tione 平台维护的资源 ID，对应腾学会的课程 ID
        :type ResourceId: str
        :param _ExpireDurationSecond: 过期时长，以请求收到的时间向后延后 ExpireDurationSecond 计算过期时刻
        :type ExpireDurationSecond: int
        :param _Description: 备注描述
        :type Description: str
        """
        self._ClassUin = None
        self._ClassSubUin = None
        self._ResourceId = None
        self._ExpireDurationSecond = None
        self._Description = None

    @property
    def ClassUin(self):
        """需要增加白名单的主uin
        :rtype: str
        """
        return self._ClassUin

    @ClassUin.setter
    def ClassUin(self, ClassUin):
        self._ClassUin = ClassUin

    @property
    def ClassSubUin(self):
        """需要增加白名单的subUin
        :rtype: str
        """
        return self._ClassSubUin

    @ClassSubUin.setter
    def ClassSubUin(self, ClassSubUin):
        self._ClassSubUin = ClassSubUin

    @property
    def ResourceId(self):
        """Tione 平台维护的资源 ID，对应腾学会的课程 ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def ExpireDurationSecond(self):
        """过期时长，以请求收到的时间向后延后 ExpireDurationSecond 计算过期时刻
        :rtype: int
        """
        return self._ExpireDurationSecond

    @ExpireDurationSecond.setter
    def ExpireDurationSecond(self, ExpireDurationSecond):
        self._ExpireDurationSecond = ExpireDurationSecond

    @property
    def Description(self):
        """备注描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._ClassUin = params.get("ClassUin")
        self._ClassSubUin = params.get("ClassSubUin")
        self._ResourceId = params.get("ResourceId")
        self._ExpireDurationSecond = params.get("ExpireDurationSecond")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddTencentLabWhitelistResponse(AbstractModel):
    """AddTencentLabWhitelist返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ExtraCosSourcePathJson: json 格式。课程进行需要的额外 cos 信息。数据源路径信息。若为json 结构或空字符串则表示无额外信息。格式如下
  { 
   "bucket": string,
   "region": string,
   "paths": string array
   }
        :type ExtraCosSourcePathJson: str
        :param _ExtraCosTargetPathJson: json 格式。课程进行需要的额外 cos 信息。数据目标路径信息。若为json 结构或空字符串则表示无额外信息。格式如下
   {
   "path": string
   }
        :type ExtraCosTargetPathJson: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ExtraCosSourcePathJson = None
        self._ExtraCosTargetPathJson = None
        self._RequestId = None

    @property
    def ExtraCosSourcePathJson(self):
        """json 格式。课程进行需要的额外 cos 信息。数据源路径信息。若为json 结构或空字符串则表示无额外信息。格式如下
  { 
   "bucket": string,
   "region": string,
   "paths": string array
   }
        :rtype: str
        """
        return self._ExtraCosSourcePathJson

    @ExtraCosSourcePathJson.setter
    def ExtraCosSourcePathJson(self, ExtraCosSourcePathJson):
        self._ExtraCosSourcePathJson = ExtraCosSourcePathJson

    @property
    def ExtraCosTargetPathJson(self):
        """json 格式。课程进行需要的额外 cos 信息。数据目标路径信息。若为json 结构或空字符串则表示无额外信息。格式如下
   {
   "path": string
   }
        :rtype: str
        """
        return self._ExtraCosTargetPathJson

    @ExtraCosTargetPathJson.setter
    def ExtraCosTargetPathJson(self, ExtraCosTargetPathJson):
        self._ExtraCosTargetPathJson = ExtraCosTargetPathJson

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ExtraCosSourcePathJson = params.get("ExtraCosSourcePathJson")
        self._ExtraCosTargetPathJson = params.get("ExtraCosTargetPathJson")
        self._RequestId = params.get("RequestId")


class AddTencentLabWhitelistTestRequest(AbstractModel):
    """AddTencentLabWhitelistTest请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ClassUin: 需要增加白名单的主uin
        :type ClassUin: str
        :param _ClassSubUin: 需要增加白名单的subUin
        :type ClassSubUin: str
        :param _ResourceId: Tione 平台维护的资源 ID，对应腾学会的课程 ID
        :type ResourceId: str
        :param _ExpireDurationSecond: 过期时长，以请求收到的时间向后延后 ExpireDurationSecond 计算过期时刻
        :type ExpireDurationSecond: int
        :param _Description: 备注描述
        :type Description: str
        """
        self._ClassUin = None
        self._ClassSubUin = None
        self._ResourceId = None
        self._ExpireDurationSecond = None
        self._Description = None

    @property
    def ClassUin(self):
        """需要增加白名单的主uin
        :rtype: str
        """
        return self._ClassUin

    @ClassUin.setter
    def ClassUin(self, ClassUin):
        self._ClassUin = ClassUin

    @property
    def ClassSubUin(self):
        """需要增加白名单的subUin
        :rtype: str
        """
        return self._ClassSubUin

    @ClassSubUin.setter
    def ClassSubUin(self, ClassSubUin):
        self._ClassSubUin = ClassSubUin

    @property
    def ResourceId(self):
        """Tione 平台维护的资源 ID，对应腾学会的课程 ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def ExpireDurationSecond(self):
        """过期时长，以请求收到的时间向后延后 ExpireDurationSecond 计算过期时刻
        :rtype: int
        """
        return self._ExpireDurationSecond

    @ExpireDurationSecond.setter
    def ExpireDurationSecond(self, ExpireDurationSecond):
        self._ExpireDurationSecond = ExpireDurationSecond

    @property
    def Description(self):
        """备注描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._ClassUin = params.get("ClassUin")
        self._ClassSubUin = params.get("ClassSubUin")
        self._ResourceId = params.get("ResourceId")
        self._ExpireDurationSecond = params.get("ExpireDurationSecond")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AddTencentLabWhitelistTestResponse(AbstractModel):
    """AddTencentLabWhitelistTest返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ExtraCosSourcePathJson: json 格式。课程进行需要的额外 cos 信息。数据源路径信息。若为json 结构或空字符串则表示无额外信息。格式如下
  { 
   "bucket": string,
   "region": string,
   "paths": string array
   }
        :type ExtraCosSourcePathJson: str
        :param _ExtraCosTargetPathJson: json 格式。课程进行需要的额外 cos 信息。数据目标路径信息。若为json 结构或空字符串则表示无额外信息。格式如下
   {
   "path": string
   }
        :type ExtraCosTargetPathJson: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ExtraCosSourcePathJson = None
        self._ExtraCosTargetPathJson = None
        self._RequestId = None

    @property
    def ExtraCosSourcePathJson(self):
        """json 格式。课程进行需要的额外 cos 信息。数据源路径信息。若为json 结构或空字符串则表示无额外信息。格式如下
  { 
   "bucket": string,
   "region": string,
   "paths": string array
   }
        :rtype: str
        """
        return self._ExtraCosSourcePathJson

    @ExtraCosSourcePathJson.setter
    def ExtraCosSourcePathJson(self, ExtraCosSourcePathJson):
        self._ExtraCosSourcePathJson = ExtraCosSourcePathJson

    @property
    def ExtraCosTargetPathJson(self):
        """json 格式。课程进行需要的额外 cos 信息。数据目标路径信息。若为json 结构或空字符串则表示无额外信息。格式如下
   {
   "path": string
   }
        :rtype: str
        """
        return self._ExtraCosTargetPathJson

    @ExtraCosTargetPathJson.setter
    def ExtraCosTargetPathJson(self, ExtraCosTargetPathJson):
        self._ExtraCosTargetPathJson = ExtraCosTargetPathJson

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ExtraCosSourcePathJson = params.get("ExtraCosSourcePathJson")
        self._ExtraCosTargetPathJson = params.get("ExtraCosTargetPathJson")
        self._RequestId = params.get("RequestId")


class AggregatePublicAlgoVersion(AbstractModel):
    """聚合后的公共算法版本

    """

    def __init__(self):
        r"""
        :param _GroupName: 用于聚合的系列名字
注意：此字段可能返回 null，表示取不到有效值。
        :type GroupName: str
        :param _PublicAlgoVersions: 算法公共版本列表
注意：此字段可能返回 null，表示取不到有效值。
        :type PublicAlgoVersions: list of PublicAlgoVersion
        """
        self._GroupName = None
        self._PublicAlgoVersions = None

    @property
    def GroupName(self):
        """用于聚合的系列名字
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GroupName

    @GroupName.setter
    def GroupName(self, GroupName):
        self._GroupName = GroupName

    @property
    def PublicAlgoVersions(self):
        """算法公共版本列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of PublicAlgoVersion
        """
        return self._PublicAlgoVersions

    @PublicAlgoVersions.setter
    def PublicAlgoVersions(self, PublicAlgoVersions):
        self._PublicAlgoVersions = PublicAlgoVersions


    def _deserialize(self, params):
        self._GroupName = params.get("GroupName")
        if params.get("PublicAlgoVersions") is not None:
            self._PublicAlgoVersions = []
            for item in params.get("PublicAlgoVersions"):
                obj = PublicAlgoVersion()
                obj._deserialize(item)
                self._PublicAlgoVersions.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AiMarketInfo(AbstractModel):
    """ai市场cos信息

    """

    def __init__(self):
        r"""
        :param _AlgorithmCosConfig: 算法cos信息
        :type AlgorithmCosConfig: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        self._AlgorithmCosConfig = None

    @property
    def AlgorithmCosConfig(self):
        """算法cos信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._AlgorithmCosConfig

    @AlgorithmCosConfig.setter
    def AlgorithmCosConfig(self, AlgorithmCosConfig):
        self._AlgorithmCosConfig = AlgorithmCosConfig


    def _deserialize(self, params):
        if params.get("AlgorithmCosConfig") is not None:
            self._AlgorithmCosConfig = CosPathInfo()
            self._AlgorithmCosConfig._deserialize(params.get("AlgorithmCosConfig"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AlgoGroup(AbstractModel):
    """我的算法组信息

    """

    def __init__(self):
        r"""
        :param _AlgoGroupId: 算法组Id
注意：此字段可能返回 null，表示取不到有效值。
        :type AlgoGroupId: str
        :param _Name: 算法名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _RelationPublicAlgoVersionId: 关联的公共算法版本Id
注意：此字段可能返回 null，表示取不到有效值。
        :type RelationPublicAlgoVersionId: str
        :param _RelationPublicVersion: 关联的公共算法版本号
注意：此字段可能返回 null，表示取不到有效值。
        :type RelationPublicVersion: str
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _UpdateTime: 更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTime: str
        :param _RelationPublicAlgoGroupId: 关联的公共算法组Id
注意：此字段可能返回 null，表示取不到有效值。
        :type RelationPublicAlgoGroupId: str
        :param _RelationPublicAlgoNameId: 关联的公共算法名称
注意：此字段可能返回 null，表示取不到有效值。
        :type RelationPublicAlgoNameId: str
        """
        self._AlgoGroupId = None
        self._Name = None
        self._RelationPublicAlgoVersionId = None
        self._RelationPublicVersion = None
        self._CreateTime = None
        self._UpdateTime = None
        self._RelationPublicAlgoGroupId = None
        self._RelationPublicAlgoNameId = None

    @property
    def AlgoGroupId(self):
        """算法组Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AlgoGroupId

    @AlgoGroupId.setter
    def AlgoGroupId(self, AlgoGroupId):
        self._AlgoGroupId = AlgoGroupId

    @property
    def Name(self):
        """算法名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def RelationPublicAlgoVersionId(self):
        """关联的公共算法版本Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RelationPublicAlgoVersionId

    @RelationPublicAlgoVersionId.setter
    def RelationPublicAlgoVersionId(self, RelationPublicAlgoVersionId):
        self._RelationPublicAlgoVersionId = RelationPublicAlgoVersionId

    @property
    def RelationPublicVersion(self):
        """关联的公共算法版本号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RelationPublicVersion

    @RelationPublicVersion.setter
    def RelationPublicVersion(self, RelationPublicVersion):
        self._RelationPublicVersion = RelationPublicVersion

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def RelationPublicAlgoGroupId(self):
        """关联的公共算法组Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RelationPublicAlgoGroupId

    @RelationPublicAlgoGroupId.setter
    def RelationPublicAlgoGroupId(self, RelationPublicAlgoGroupId):
        self._RelationPublicAlgoGroupId = RelationPublicAlgoGroupId

    @property
    def RelationPublicAlgoNameId(self):
        """关联的公共算法名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RelationPublicAlgoNameId

    @RelationPublicAlgoNameId.setter
    def RelationPublicAlgoNameId(self, RelationPublicAlgoNameId):
        self._RelationPublicAlgoNameId = RelationPublicAlgoNameId


    def _deserialize(self, params):
        self._AlgoGroupId = params.get("AlgoGroupId")
        self._Name = params.get("Name")
        self._RelationPublicAlgoVersionId = params.get("RelationPublicAlgoVersionId")
        self._RelationPublicVersion = params.get("RelationPublicVersion")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._RelationPublicAlgoGroupId = params.get("RelationPublicAlgoGroupId")
        self._RelationPublicAlgoNameId = params.get("RelationPublicAlgoNameId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AlgoVersion(AbstractModel):
    """我的算法版本信息

    """

    def __init__(self):
        r"""
        :param _AlgoVersionId: 算法版本Id
注意：此字段可能返回 null，表示取不到有效值。
        :type AlgoVersionId: str
        :param _Version: 版本号
注意：此字段可能返回 null，表示取不到有效值。
        :type Version: int
        :param _TrainCodeInfo: 训练代码信息
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainCodeInfo: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        :param _TrainImageInfo: 训练镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainImageInfo: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        :param _ModelInfo: 预置模型信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelInfo: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        :param _Tags: tag数组
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _NoteBookInstanceId: 关联的notebook实例Id
注意：此字段可能返回 null，表示取不到有效值。
        :type NoteBookInstanceId: str
        :param _NotebookLifecycleScriptId: 关联的notebook生命周期脚本Id
注意：此字段可能返回 null，表示取不到有效值。
        :type NotebookLifecycleScriptId: str
        :param _NotebookLifecycleScriptName: 关联的notebook生命周期脚本名称
注意：此字段可能返回 null，表示取不到有效值。
        :type NotebookLifecycleScriptName: str
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _UpdateTime: 更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTime: str
        :param _DefaultResourceSpec: 默认资源规格
注意：此字段可能返回 null，表示取不到有效值。
        :type DefaultResourceSpec: :class:`tencentcloud.tione.v20211111.models.ResourceSpec`
        """
        self._AlgoVersionId = None
        self._Version = None
        self._TrainCodeInfo = None
        self._TrainImageInfo = None
        self._ModelInfo = None
        self._Tags = None
        self._NoteBookInstanceId = None
        self._NotebookLifecycleScriptId = None
        self._NotebookLifecycleScriptName = None
        self._CreateTime = None
        self._UpdateTime = None
        self._DefaultResourceSpec = None

    @property
    def AlgoVersionId(self):
        """算法版本Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AlgoVersionId

    @AlgoVersionId.setter
    def AlgoVersionId(self, AlgoVersionId):
        self._AlgoVersionId = AlgoVersionId

    @property
    def Version(self):
        """版本号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def TrainCodeInfo(self):
        """训练代码信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        """
        return self._TrainCodeInfo

    @TrainCodeInfo.setter
    def TrainCodeInfo(self, TrainCodeInfo):
        self._TrainCodeInfo = TrainCodeInfo

    @property
    def TrainImageInfo(self):
        """训练镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        """
        return self._TrainImageInfo

    @TrainImageInfo.setter
    def TrainImageInfo(self, TrainImageInfo):
        self._TrainImageInfo = TrainImageInfo

    @property
    def ModelInfo(self):
        """预置模型信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        """
        return self._ModelInfo

    @ModelInfo.setter
    def ModelInfo(self, ModelInfo):
        self._ModelInfo = ModelInfo

    @property
    def Tags(self):
        """tag数组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def NoteBookInstanceId(self):
        """关联的notebook实例Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._NoteBookInstanceId

    @NoteBookInstanceId.setter
    def NoteBookInstanceId(self, NoteBookInstanceId):
        self._NoteBookInstanceId = NoteBookInstanceId

    @property
    def NotebookLifecycleScriptId(self):
        """关联的notebook生命周期脚本Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._NotebookLifecycleScriptId

    @NotebookLifecycleScriptId.setter
    def NotebookLifecycleScriptId(self, NotebookLifecycleScriptId):
        self._NotebookLifecycleScriptId = NotebookLifecycleScriptId

    @property
    def NotebookLifecycleScriptName(self):
        """关联的notebook生命周期脚本名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._NotebookLifecycleScriptName

    @NotebookLifecycleScriptName.setter
    def NotebookLifecycleScriptName(self, NotebookLifecycleScriptName):
        self._NotebookLifecycleScriptName = NotebookLifecycleScriptName

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def DefaultResourceSpec(self):
        """默认资源规格
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceSpec`
        """
        return self._DefaultResourceSpec

    @DefaultResourceSpec.setter
    def DefaultResourceSpec(self, DefaultResourceSpec):
        self._DefaultResourceSpec = DefaultResourceSpec


    def _deserialize(self, params):
        self._AlgoVersionId = params.get("AlgoVersionId")
        self._Version = params.get("Version")
        if params.get("TrainCodeInfo") is not None:
            self._TrainCodeInfo = MaterialInfo()
            self._TrainCodeInfo._deserialize(params.get("TrainCodeInfo"))
        if params.get("TrainImageInfo") is not None:
            self._TrainImageInfo = MaterialInfo()
            self._TrainImageInfo._deserialize(params.get("TrainImageInfo"))
        if params.get("ModelInfo") is not None:
            self._ModelInfo = MaterialInfo()
            self._ModelInfo._deserialize(params.get("ModelInfo"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._NoteBookInstanceId = params.get("NoteBookInstanceId")
        self._NotebookLifecycleScriptId = params.get("NotebookLifecycleScriptId")
        self._NotebookLifecycleScriptName = params.get("NotebookLifecycleScriptName")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        if params.get("DefaultResourceSpec") is not None:
            self._DefaultResourceSpec = ResourceSpec()
            self._DefaultResourceSpec._deserialize(params.get("DefaultResourceSpec"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AnnotateRecord(AbstractModel):
    """表示一个标注样本

    """

    def __init__(self):
        r"""
        :param _RecordId: 样本id
        :type RecordId: str
        :param _Values: 样本内容
        :type Values: list of str
        :param _AnnotationStatus: 标注状态：1-已标注；0-未标注
        :type AnnotationStatus: int
        :param _SubmitStatus: 提交状态：1-已提交；0-未提交
        :type SubmitStatus: int
        :param _ImageList: 图片列表
        :type ImageList: list of ImageData
        :param _UploadImageList: 用户上传的图片列表
        :type UploadImageList: list of ImageData
        """
        self._RecordId = None
        self._Values = None
        self._AnnotationStatus = None
        self._SubmitStatus = None
        self._ImageList = None
        self._UploadImageList = None

    @property
    def RecordId(self):
        """样本id
        :rtype: str
        """
        return self._RecordId

    @RecordId.setter
    def RecordId(self, RecordId):
        self._RecordId = RecordId

    @property
    def Values(self):
        """样本内容
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values

    @property
    def AnnotationStatus(self):
        """标注状态：1-已标注；0-未标注
        :rtype: int
        """
        return self._AnnotationStatus

    @AnnotationStatus.setter
    def AnnotationStatus(self, AnnotationStatus):
        self._AnnotationStatus = AnnotationStatus

    @property
    def SubmitStatus(self):
        """提交状态：1-已提交；0-未提交
        :rtype: int
        """
        return self._SubmitStatus

    @SubmitStatus.setter
    def SubmitStatus(self, SubmitStatus):
        self._SubmitStatus = SubmitStatus

    @property
    def ImageList(self):
        """图片列表
        :rtype: list of ImageData
        """
        return self._ImageList

    @ImageList.setter
    def ImageList(self, ImageList):
        self._ImageList = ImageList

    @property
    def UploadImageList(self):
        """用户上传的图片列表
        :rtype: list of ImageData
        """
        return self._UploadImageList

    @UploadImageList.setter
    def UploadImageList(self, UploadImageList):
        self._UploadImageList = UploadImageList


    def _deserialize(self, params):
        self._RecordId = params.get("RecordId")
        self._Values = params.get("Values")
        self._AnnotationStatus = params.get("AnnotationStatus")
        self._SubmitStatus = params.get("SubmitStatus")
        if params.get("ImageList") is not None:
            self._ImageList = []
            for item in params.get("ImageList"):
                obj = ImageData()
                obj._deserialize(item)
                self._ImageList.append(obj)
        if params.get("UploadImageList") is not None:
            self._UploadImageList = []
            for item in params.get("UploadImageList"):
                obj = ImageData()
                obj._deserialize(item)
                self._UploadImageList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AnnotationTaskInfo(AbstractModel):
    """描述标注任务详细信息

    """

    def __init__(self):
        r"""
        :param _TaskId: 标注任务id
        :type TaskId: str
        :param _TaskName: 标注任务名称
        :type TaskName: str
        :param _DatasetId: 数据集id
        :type DatasetId: str
        :param _DatasetName: 数据集名称
        :type DatasetName: str
        :param _SceneName: 标注场景名称
        :type SceneName: str
        :param _LabelValueList: 标注任务的label信息数组
        :type LabelValueList: list of LabelValue
        :param _CamTagList: tag详情数组
        :type CamTagList: list of CamTag
        :param _Status: 任务状态
        :type Status: int
        :param _AbnormalMsg: 创建任务失败原因说明
        :type AbnormalMsg: str
        :param _IsSubmitting: 标注任务是否正在提交
        :type IsSubmitting: bool
        :param _TaskNote: 任务详情描述
        :type TaskNote: str
        :param _DataSetVersion: 数据集版本
        :type DataSetVersion: str
        :param _NumAnnotated: 已经标注的图片数量
        :type NumAnnotated: int
        :param _NumTotal: 标注的总图片数量
        :type NumTotal: int
        :param _CreateTime: 创建任务的时间戳
        :type CreateTime: int
        :param _OcrToolType: Ocr Tool Type
        :type OcrToolType: int
        :param _OcrTextAttributeAnnotateEnable: Ocr Text Attribute Annotate Enable
        :type OcrTextAttributeAnnotateEnable: bool
        :param _ExportFormat: 导出格式
        :type ExportFormat: str
        :param _SubmittingErrorMsg: 提交错误说明
        :type SubmittingErrorMsg: str
        :param _OcrAnnotationContentType: ocr任务类型：1-识别。2-智能结构化
注意：此字段可能返回 null，表示取不到有效值。
        :type OcrAnnotationContentType: int
        :param _EnableAuxiliaryAnnotation: OCR任务：是否启用辅助标注
注意：此字段可能返回 null，表示取不到有效值。
        :type EnableAuxiliaryAnnotation: bool
        :param _ProcessingStatus: 任务进度
注意：此字段可能返回 null，表示取不到有效值。
        :type ProcessingStatus: int
        :param _NeedReload: 是否需要重载
注意：此字段可能返回 null，表示取不到有效值。
        :type NeedReload: bool
        :param _KeyPairsInUpdating: 是否正在更新
注意：此字段可能返回 null，表示取不到有效值。
        :type KeyPairsInUpdating: bool
        :param _DatasetCreator: 数据集创建者UIN
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetCreator: str
        :param _Creator: 任务创建者UIN
注意：此字段可能返回 null，表示取不到有效值。
        :type Creator: str
        :param _DatasetCreatorName: 数据集创建者名称
        :type DatasetCreatorName: str
        :param _CreatorName: 任务创建者名称
        :type CreatorName: str
        """
        self._TaskId = None
        self._TaskName = None
        self._DatasetId = None
        self._DatasetName = None
        self._SceneName = None
        self._LabelValueList = None
        self._CamTagList = None
        self._Status = None
        self._AbnormalMsg = None
        self._IsSubmitting = None
        self._TaskNote = None
        self._DataSetVersion = None
        self._NumAnnotated = None
        self._NumTotal = None
        self._CreateTime = None
        self._OcrToolType = None
        self._OcrTextAttributeAnnotateEnable = None
        self._ExportFormat = None
        self._SubmittingErrorMsg = None
        self._OcrAnnotationContentType = None
        self._EnableAuxiliaryAnnotation = None
        self._ProcessingStatus = None
        self._NeedReload = None
        self._KeyPairsInUpdating = None
        self._DatasetCreator = None
        self._Creator = None
        self._DatasetCreatorName = None
        self._CreatorName = None

    @property
    def TaskId(self):
        """标注任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """标注任务名称
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def DatasetId(self):
        """数据集id
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def DatasetName(self):
        """数据集名称
        :rtype: str
        """
        return self._DatasetName

    @DatasetName.setter
    def DatasetName(self, DatasetName):
        self._DatasetName = DatasetName

    @property
    def SceneName(self):
        """标注场景名称
        :rtype: str
        """
        return self._SceneName

    @SceneName.setter
    def SceneName(self, SceneName):
        self._SceneName = SceneName

    @property
    def LabelValueList(self):
        """标注任务的label信息数组
        :rtype: list of LabelValue
        """
        return self._LabelValueList

    @LabelValueList.setter
    def LabelValueList(self, LabelValueList):
        self._LabelValueList = LabelValueList

    @property
    def CamTagList(self):
        """tag详情数组
        :rtype: list of CamTag
        """
        return self._CamTagList

    @CamTagList.setter
    def CamTagList(self, CamTagList):
        self._CamTagList = CamTagList

    @property
    def Status(self):
        """任务状态
        :rtype: int
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def AbnormalMsg(self):
        """创建任务失败原因说明
        :rtype: str
        """
        return self._AbnormalMsg

    @AbnormalMsg.setter
    def AbnormalMsg(self, AbnormalMsg):
        self._AbnormalMsg = AbnormalMsg

    @property
    def IsSubmitting(self):
        """标注任务是否正在提交
        :rtype: bool
        """
        return self._IsSubmitting

    @IsSubmitting.setter
    def IsSubmitting(self, IsSubmitting):
        self._IsSubmitting = IsSubmitting

    @property
    def TaskNote(self):
        """任务详情描述
        :rtype: str
        """
        return self._TaskNote

    @TaskNote.setter
    def TaskNote(self, TaskNote):
        self._TaskNote = TaskNote

    @property
    def DataSetVersion(self):
        """数据集版本
        :rtype: str
        """
        return self._DataSetVersion

    @DataSetVersion.setter
    def DataSetVersion(self, DataSetVersion):
        self._DataSetVersion = DataSetVersion

    @property
    def NumAnnotated(self):
        """已经标注的图片数量
        :rtype: int
        """
        return self._NumAnnotated

    @NumAnnotated.setter
    def NumAnnotated(self, NumAnnotated):
        self._NumAnnotated = NumAnnotated

    @property
    def NumTotal(self):
        """标注的总图片数量
        :rtype: int
        """
        return self._NumTotal

    @NumTotal.setter
    def NumTotal(self, NumTotal):
        self._NumTotal = NumTotal

    @property
    def CreateTime(self):
        """创建任务的时间戳
        :rtype: int
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def OcrToolType(self):
        """Ocr Tool Type
        :rtype: int
        """
        return self._OcrToolType

    @OcrToolType.setter
    def OcrToolType(self, OcrToolType):
        self._OcrToolType = OcrToolType

    @property
    def OcrTextAttributeAnnotateEnable(self):
        """Ocr Text Attribute Annotate Enable
        :rtype: bool
        """
        return self._OcrTextAttributeAnnotateEnable

    @OcrTextAttributeAnnotateEnable.setter
    def OcrTextAttributeAnnotateEnable(self, OcrTextAttributeAnnotateEnable):
        self._OcrTextAttributeAnnotateEnable = OcrTextAttributeAnnotateEnable

    @property
    def ExportFormat(self):
        """导出格式
        :rtype: str
        """
        return self._ExportFormat

    @ExportFormat.setter
    def ExportFormat(self, ExportFormat):
        self._ExportFormat = ExportFormat

    @property
    def SubmittingErrorMsg(self):
        """提交错误说明
        :rtype: str
        """
        return self._SubmittingErrorMsg

    @SubmittingErrorMsg.setter
    def SubmittingErrorMsg(self, SubmittingErrorMsg):
        self._SubmittingErrorMsg = SubmittingErrorMsg

    @property
    def OcrAnnotationContentType(self):
        """ocr任务类型：1-识别。2-智能结构化
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._OcrAnnotationContentType

    @OcrAnnotationContentType.setter
    def OcrAnnotationContentType(self, OcrAnnotationContentType):
        self._OcrAnnotationContentType = OcrAnnotationContentType

    @property
    def EnableAuxiliaryAnnotation(self):
        """OCR任务：是否启用辅助标注
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._EnableAuxiliaryAnnotation

    @EnableAuxiliaryAnnotation.setter
    def EnableAuxiliaryAnnotation(self, EnableAuxiliaryAnnotation):
        self._EnableAuxiliaryAnnotation = EnableAuxiliaryAnnotation

    @property
    def ProcessingStatus(self):
        """任务进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ProcessingStatus

    @ProcessingStatus.setter
    def ProcessingStatus(self, ProcessingStatus):
        self._ProcessingStatus = ProcessingStatus

    @property
    def NeedReload(self):
        """是否需要重载
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._NeedReload

    @NeedReload.setter
    def NeedReload(self, NeedReload):
        self._NeedReload = NeedReload

    @property
    def KeyPairsInUpdating(self):
        """是否正在更新
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._KeyPairsInUpdating

    @KeyPairsInUpdating.setter
    def KeyPairsInUpdating(self, KeyPairsInUpdating):
        self._KeyPairsInUpdating = KeyPairsInUpdating

    @property
    def DatasetCreator(self):
        """数据集创建者UIN
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetCreator

    @DatasetCreator.setter
    def DatasetCreator(self, DatasetCreator):
        self._DatasetCreator = DatasetCreator

    @property
    def Creator(self):
        """任务创建者UIN
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def DatasetCreatorName(self):
        """数据集创建者名称
        :rtype: str
        """
        return self._DatasetCreatorName

    @DatasetCreatorName.setter
    def DatasetCreatorName(self, DatasetCreatorName):
        self._DatasetCreatorName = DatasetCreatorName

    @property
    def CreatorName(self):
        """任务创建者名称
        :rtype: str
        """
        return self._CreatorName

    @CreatorName.setter
    def CreatorName(self, CreatorName):
        self._CreatorName = CreatorName


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        self._DatasetId = params.get("DatasetId")
        self._DatasetName = params.get("DatasetName")
        self._SceneName = params.get("SceneName")
        if params.get("LabelValueList") is not None:
            self._LabelValueList = []
            for item in params.get("LabelValueList"):
                obj = LabelValue()
                obj._deserialize(item)
                self._LabelValueList.append(obj)
        if params.get("CamTagList") is not None:
            self._CamTagList = []
            for item in params.get("CamTagList"):
                obj = CamTag()
                obj._deserialize(item)
                self._CamTagList.append(obj)
        self._Status = params.get("Status")
        self._AbnormalMsg = params.get("AbnormalMsg")
        self._IsSubmitting = params.get("IsSubmitting")
        self._TaskNote = params.get("TaskNote")
        self._DataSetVersion = params.get("DataSetVersion")
        self._NumAnnotated = params.get("NumAnnotated")
        self._NumTotal = params.get("NumTotal")
        self._CreateTime = params.get("CreateTime")
        self._OcrToolType = params.get("OcrToolType")
        self._OcrTextAttributeAnnotateEnable = params.get("OcrTextAttributeAnnotateEnable")
        self._ExportFormat = params.get("ExportFormat")
        self._SubmittingErrorMsg = params.get("SubmittingErrorMsg")
        self._OcrAnnotationContentType = params.get("OcrAnnotationContentType")
        self._EnableAuxiliaryAnnotation = params.get("EnableAuxiliaryAnnotation")
        self._ProcessingStatus = params.get("ProcessingStatus")
        self._NeedReload = params.get("NeedReload")
        self._KeyPairsInUpdating = params.get("KeyPairsInUpdating")
        self._DatasetCreator = params.get("DatasetCreator")
        self._Creator = params.get("Creator")
        self._DatasetCreatorName = params.get("DatasetCreatorName")
        self._CreatorName = params.get("CreatorName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AnnotationTypeConfig(AbstractModel):
    """标注场景配置

    """

    def __init__(self):
        r"""
        :param _AnnotationType: 标注场景枚举值
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationType: str
        :param _AnnotationTypeName: 标注场景名称
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationTypeName: str
        """
        self._AnnotationType = None
        self._AnnotationTypeName = None

    @property
    def AnnotationType(self):
        """标注场景枚举值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationType

    @AnnotationType.setter
    def AnnotationType(self, AnnotationType):
        self._AnnotationType = AnnotationType

    @property
    def AnnotationTypeName(self):
        """标注场景名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationTypeName

    @AnnotationTypeName.setter
    def AnnotationTypeName(self, AnnotationTypeName):
        self._AnnotationTypeName = AnnotationTypeName


    def _deserialize(self, params):
        self._AnnotationType = params.get("AnnotationType")
        self._AnnotationTypeName = params.get("AnnotationTypeName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AsrPred(AbstractModel):
    """Asr预测结果

    """

    def __init__(self):
        r"""
        :param _AutoMLEvaluateTaskId: 自动学习评测id
        :type AutoMLEvaluateTaskId: str
        :param _Pred: 预测结果
        :type Pred: str
        """
        self._AutoMLEvaluateTaskId = None
        self._Pred = None

    @property
    def AutoMLEvaluateTaskId(self):
        """自动学习评测id
        :rtype: str
        """
        return self._AutoMLEvaluateTaskId

    @AutoMLEvaluateTaskId.setter
    def AutoMLEvaluateTaskId(self, AutoMLEvaluateTaskId):
        self._AutoMLEvaluateTaskId = AutoMLEvaluateTaskId

    @property
    def Pred(self):
        """预测结果
        :rtype: str
        """
        return self._Pred

    @Pred.setter
    def Pred(self, Pred):
        self._Pred = Pred


    def _deserialize(self, params):
        self._AutoMLEvaluateTaskId = params.get("AutoMLEvaluateTaskId")
        self._Pred = params.get("Pred")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AsyncTask(AbstractModel):
    """包含异步任务的相关信息

    """

    def __init__(self):
        r"""
        :param _TaskId: 异步任务的唯一标识符
        :type TaskId: str
        :param _TaskType: 异步任务类型
        :type TaskType: str
        :param _TaskStatus: 异步任务状态
        :type TaskStatus: str
        :param _TaskProgress: 任务进度（百分比）
        :type TaskProgress: int
        :param _FailureReason: 任务失败原因（如果有）
        :type FailureReason: str
        :param _TaskResult: 任务结果
        :type TaskResult: str
        :param _CreateTime: 任务创建时间（Unix时间戳）
        :type CreateTime: int
        :param _UpdateTime: 任务最后更新时间（Unix时间戳）
        :type UpdateTime: int
        """
        self._TaskId = None
        self._TaskType = None
        self._TaskStatus = None
        self._TaskProgress = None
        self._FailureReason = None
        self._TaskResult = None
        self._CreateTime = None
        self._UpdateTime = None

    @property
    def TaskId(self):
        """异步任务的唯一标识符
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskType(self):
        """异步任务类型
        :rtype: str
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def TaskStatus(self):
        """异步任务状态
        :rtype: str
        """
        return self._TaskStatus

    @TaskStatus.setter
    def TaskStatus(self, TaskStatus):
        self._TaskStatus = TaskStatus

    @property
    def TaskProgress(self):
        """任务进度（百分比）
        :rtype: int
        """
        return self._TaskProgress

    @TaskProgress.setter
    def TaskProgress(self, TaskProgress):
        self._TaskProgress = TaskProgress

    @property
    def FailureReason(self):
        """任务失败原因（如果有）
        :rtype: str
        """
        return self._FailureReason

    @FailureReason.setter
    def FailureReason(self, FailureReason):
        self._FailureReason = FailureReason

    @property
    def TaskResult(self):
        """任务结果
        :rtype: str
        """
        return self._TaskResult

    @TaskResult.setter
    def TaskResult(self, TaskResult):
        self._TaskResult = TaskResult

    @property
    def CreateTime(self):
        """任务创建时间（Unix时间戳）
        :rtype: int
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """任务最后更新时间（Unix时间戳）
        :rtype: int
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskType = params.get("TaskType")
        self._TaskStatus = params.get("TaskStatus")
        self._TaskProgress = params.get("TaskProgress")
        self._FailureReason = params.get("FailureReason")
        self._TaskResult = params.get("TaskResult")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AttachClusterResourceInstanceDataDiskRequest(AbstractModel):
    """AttachClusterResourceInstanceDataDisk请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 节点的资源组id
        :type ResourceGroupId: str
        :param _ResourceInstanceId: 节点id
        :type ResourceInstanceId: str
        """
        self._ResourceGroupId = None
        self._ResourceInstanceId = None

    @property
    def ResourceGroupId(self):
        """节点的资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceInstanceId(self):
        """节点id
        :rtype: str
        """
        return self._ResourceInstanceId

    @ResourceInstanceId.setter
    def ResourceInstanceId(self, ResourceInstanceId):
        self._ResourceInstanceId = ResourceInstanceId


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ResourceInstanceId = params.get("ResourceInstanceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AttachClusterResourceInstanceDataDiskResponse(AbstractModel):
    """AttachClusterResourceInstanceDataDisk返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class Attribute(AbstractModel):
    """镜像属性

    """

    def __init__(self):
        r"""
        :param _Type: 为‘List’时属性值取Values 否则取Value
注意：此字段可能返回 null，表示取不到有效值。
        :type Type: str
        :param _Key: 属性key
注意：此字段可能返回 null，表示取不到有效值。
        :type Key: str
        :param _Value: 属性值
注意：此字段可能返回 null，表示取不到有效值。
        :type Value: str
        :param _Values: 属性值列表
注意：此字段可能返回 null，表示取不到有效值。
        :type Values: list of str
        """
        self._Type = None
        self._Key = None
        self._Value = None
        self._Values = None

    @property
    def Type(self):
        """为‘List’时属性值取Values 否则取Value
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Key(self):
        """属性key
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Value(self):
        """属性值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value

    @property
    def Values(self):
        """属性值列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Key = params.get("Key")
        self._Value = params.get("Value")
        self._Values = params.get("Values")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AutoMLDataConfig(AbstractModel):
    """训练或测试数据配置信息

    """

    def __init__(self):
        r"""
        :param _DataSourceType: DATASET、COS、CFS、HDFS、WEDATA_HDFS
        :type DataSourceType: str
        :param _DataSetSource: 来自数据集的数据
注意：此字段可能返回 null，表示取不到有效值。
        :type DataSetSource: :class:`tencentcloud.tione.v20211111.models.DataSetConfig`
        :param _COSSource: 来自cos的数据
注意：此字段可能返回 null，表示取不到有效值。
        :type COSSource: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        self._DataSourceType = None
        self._DataSetSource = None
        self._COSSource = None

    @property
    def DataSourceType(self):
        """DATASET、COS、CFS、HDFS、WEDATA_HDFS
        :rtype: str
        """
        return self._DataSourceType

    @DataSourceType.setter
    def DataSourceType(self, DataSourceType):
        self._DataSourceType = DataSourceType

    @property
    def DataSetSource(self):
        """来自数据集的数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.DataSetConfig`
        """
        return self._DataSetSource

    @DataSetSource.setter
    def DataSetSource(self, DataSetSource):
        self._DataSetSource = DataSetSource

    @property
    def COSSource(self):
        """来自cos的数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._COSSource

    @COSSource.setter
    def COSSource(self, COSSource):
        self._COSSource = COSSource


    def _deserialize(self, params):
        self._DataSourceType = params.get("DataSourceType")
        if params.get("DataSetSource") is not None:
            self._DataSetSource = DataSetConfig()
            self._DataSetSource._deserialize(params.get("DataSetSource"))
        if params.get("COSSource") is not None:
            self._COSSource = CosPathInfo()
            self._COSSource._deserialize(params.get("COSSource"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class AvailableNodeStatistic(AbstractModel):
    """可用节点数统计信息

    """

    def __init__(self):
        r"""
        :param _AvailableNodeCount: 可用的节点个数
        :type AvailableNodeCount: int
        :param _ResourceGroupCount: 满足上述AvailableNodeCount条件的资源组个数
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupCount: int
        :param _ResourceGroupIds: 资源组ID列表
        :type ResourceGroupIds: list of str
        """
        self._AvailableNodeCount = None
        self._ResourceGroupCount = None
        self._ResourceGroupIds = None

    @property
    def AvailableNodeCount(self):
        """可用的节点个数
        :rtype: int
        """
        return self._AvailableNodeCount

    @AvailableNodeCount.setter
    def AvailableNodeCount(self, AvailableNodeCount):
        self._AvailableNodeCount = AvailableNodeCount

    @property
    def ResourceGroupCount(self):
        """满足上述AvailableNodeCount条件的资源组个数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ResourceGroupCount

    @ResourceGroupCount.setter
    def ResourceGroupCount(self, ResourceGroupCount):
        self._ResourceGroupCount = ResourceGroupCount

    @property
    def ResourceGroupIds(self):
        """资源组ID列表
        :rtype: list of str
        """
        return self._ResourceGroupIds

    @ResourceGroupIds.setter
    def ResourceGroupIds(self, ResourceGroupIds):
        self._ResourceGroupIds = ResourceGroupIds


    def _deserialize(self, params):
        self._AvailableNodeCount = params.get("AvailableNodeCount")
        self._ResourceGroupCount = params.get("ResourceGroupCount")
        self._ResourceGroupIds = params.get("ResourceGroupIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BadcaseImageInfo(AbstractModel):
    """自动学习评测badcase图像信息

    """

    def __init__(self):
        r"""
        :param _ImgThumbnailUrl: badcase图像缩略图地址
        :type ImgThumbnailUrl: str
        :param _ImgOriginalUrl: badcase图像地址
        :type ImgOriginalUrl: str
        :param _GroundTruthLabels: groundTrue标签信息
        :type GroundTruthLabels: list of LabelConfig
        :param _PredictLabels: 推理结果标签信息
        :type PredictLabels: list of PredictConfig
        :param _OcrGroundTruth: OCR GT json 字符串
        :type OcrGroundTruth: str
        :param _OcrPrediction: OCR Pred json 字符串
        :type OcrPrediction: str
        """
        self._ImgThumbnailUrl = None
        self._ImgOriginalUrl = None
        self._GroundTruthLabels = None
        self._PredictLabels = None
        self._OcrGroundTruth = None
        self._OcrPrediction = None

    @property
    def ImgThumbnailUrl(self):
        """badcase图像缩略图地址
        :rtype: str
        """
        return self._ImgThumbnailUrl

    @ImgThumbnailUrl.setter
    def ImgThumbnailUrl(self, ImgThumbnailUrl):
        self._ImgThumbnailUrl = ImgThumbnailUrl

    @property
    def ImgOriginalUrl(self):
        """badcase图像地址
        :rtype: str
        """
        return self._ImgOriginalUrl

    @ImgOriginalUrl.setter
    def ImgOriginalUrl(self, ImgOriginalUrl):
        self._ImgOriginalUrl = ImgOriginalUrl

    @property
    def GroundTruthLabels(self):
        """groundTrue标签信息
        :rtype: list of LabelConfig
        """
        return self._GroundTruthLabels

    @GroundTruthLabels.setter
    def GroundTruthLabels(self, GroundTruthLabels):
        self._GroundTruthLabels = GroundTruthLabels

    @property
    def PredictLabels(self):
        """推理结果标签信息
        :rtype: list of PredictConfig
        """
        return self._PredictLabels

    @PredictLabels.setter
    def PredictLabels(self, PredictLabels):
        self._PredictLabels = PredictLabels

    @property
    def OcrGroundTruth(self):
        """OCR GT json 字符串
        :rtype: str
        """
        return self._OcrGroundTruth

    @OcrGroundTruth.setter
    def OcrGroundTruth(self, OcrGroundTruth):
        self._OcrGroundTruth = OcrGroundTruth

    @property
    def OcrPrediction(self):
        """OCR Pred json 字符串
        :rtype: str
        """
        return self._OcrPrediction

    @OcrPrediction.setter
    def OcrPrediction(self, OcrPrediction):
        self._OcrPrediction = OcrPrediction


    def _deserialize(self, params):
        self._ImgThumbnailUrl = params.get("ImgThumbnailUrl")
        self._ImgOriginalUrl = params.get("ImgOriginalUrl")
        if params.get("GroundTruthLabels") is not None:
            self._GroundTruthLabels = []
            for item in params.get("GroundTruthLabels"):
                obj = LabelConfig()
                obj._deserialize(item)
                self._GroundTruthLabels.append(obj)
        if params.get("PredictLabels") is not None:
            self._PredictLabels = []
            for item in params.get("PredictLabels"):
                obj = PredictConfig()
                obj._deserialize(item)
                self._PredictLabels.append(obj)
        self._OcrGroundTruth = params.get("OcrGroundTruth")
        self._OcrPrediction = params.get("OcrPrediction")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchModelAccTask(AbstractModel):
    """批量模型加速任务

    """

    def __init__(self):
        r"""
        :param _ModelId: 模型ID
        :type ModelId: str
        :param _ModelVersion: 模型版本
        :type ModelVersion: str
        :param _ModelSource: 模型来源(JOB/COS)
        :type ModelSource: str
        :param _ModelFormat: 模型格式(TORCH_SCRIPT/DETECTRON2/SAVED_MODEL/FROZEN_GRAPH/MMDETECTION/ONNX/HUGGING_FACE)
        :type ModelFormat: str
        :param _TensorInfos: 模型Tensor信息
        :type TensorInfos: list of str
        :param _AccEngineVersion: 加速引擎版本
        :type AccEngineVersion: str
        :param _ModelInputPath: 模型输入cos路径
        :type ModelInputPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _ModelName: 模型名称
        :type ModelName: str
        :param _ModelSignature: SavedModel保存时配置的签名
        :type ModelSignature: str
        :param _FrameworkVersion: 加速引擎对应的框架版本
        :type FrameworkVersion: str
        """
        self._ModelId = None
        self._ModelVersion = None
        self._ModelSource = None
        self._ModelFormat = None
        self._TensorInfos = None
        self._AccEngineVersion = None
        self._ModelInputPath = None
        self._ModelName = None
        self._ModelSignature = None
        self._FrameworkVersion = None

    @property
    def ModelId(self):
        """模型ID
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def ModelVersion(self):
        """模型版本
        :rtype: str
        """
        return self._ModelVersion

    @ModelVersion.setter
    def ModelVersion(self, ModelVersion):
        self._ModelVersion = ModelVersion

    @property
    def ModelSource(self):
        """模型来源(JOB/COS)
        :rtype: str
        """
        return self._ModelSource

    @ModelSource.setter
    def ModelSource(self, ModelSource):
        self._ModelSource = ModelSource

    @property
    def ModelFormat(self):
        """模型格式(TORCH_SCRIPT/DETECTRON2/SAVED_MODEL/FROZEN_GRAPH/MMDETECTION/ONNX/HUGGING_FACE)
        :rtype: str
        """
        return self._ModelFormat

    @ModelFormat.setter
    def ModelFormat(self, ModelFormat):
        self._ModelFormat = ModelFormat

    @property
    def TensorInfos(self):
        """模型Tensor信息
        :rtype: list of str
        """
        return self._TensorInfos

    @TensorInfos.setter
    def TensorInfos(self, TensorInfos):
        self._TensorInfos = TensorInfos

    @property
    def AccEngineVersion(self):
        """加速引擎版本
        :rtype: str
        """
        return self._AccEngineVersion

    @AccEngineVersion.setter
    def AccEngineVersion(self, AccEngineVersion):
        self._AccEngineVersion = AccEngineVersion

    @property
    def ModelInputPath(self):
        """模型输入cos路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._ModelInputPath

    @ModelInputPath.setter
    def ModelInputPath(self, ModelInputPath):
        self._ModelInputPath = ModelInputPath

    @property
    def ModelName(self):
        """模型名称
        :rtype: str
        """
        return self._ModelName

    @ModelName.setter
    def ModelName(self, ModelName):
        self._ModelName = ModelName

    @property
    def ModelSignature(self):
        """SavedModel保存时配置的签名
        :rtype: str
        """
        return self._ModelSignature

    @ModelSignature.setter
    def ModelSignature(self, ModelSignature):
        self._ModelSignature = ModelSignature

    @property
    def FrameworkVersion(self):
        """加速引擎对应的框架版本
        :rtype: str
        """
        return self._FrameworkVersion

    @FrameworkVersion.setter
    def FrameworkVersion(self, FrameworkVersion):
        self._FrameworkVersion = FrameworkVersion


    def _deserialize(self, params):
        self._ModelId = params.get("ModelId")
        self._ModelVersion = params.get("ModelVersion")
        self._ModelSource = params.get("ModelSource")
        self._ModelFormat = params.get("ModelFormat")
        self._TensorInfos = params.get("TensorInfos")
        self._AccEngineVersion = params.get("AccEngineVersion")
        if params.get("ModelInputPath") is not None:
            self._ModelInputPath = CosPathInfo()
            self._ModelInputPath._deserialize(params.get("ModelInputPath"))
        self._ModelName = params.get("ModelName")
        self._ModelSignature = params.get("ModelSignature")
        self._FrameworkVersion = params.get("FrameworkVersion")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchTaskDetail(AbstractModel):
    """批量预测任务详情

    """

    def __init__(self):
        r"""
        :param _BatchTaskId: 批量预测任务ID
        :type BatchTaskId: str
        :param _BatchTaskName: 批量预测任务名称
        :type BatchTaskName: str
        :param _Uin: 主账号uin
        :type Uin: str
        :param _SubUin: 子账号uin
        :type SubUin: str
        :param _Region: 地域
        :type Region: str
        :param _ChargeType: 计费模式
        :type ChargeType: str
        :param _ResourceGroupId: 包年包月资源组ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _ResourceGroupName: 包年包月资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupName: str
        :param _ResourceConfigInfo: 资源配置
        :type ResourceConfigInfo: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        :param _Tags: 标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _ModelInfo: 服务对应的模型信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelInfo: :class:`tencentcloud.tione.v20211111.models.ModelInfo`
        :param _ImageInfo: 自定义镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _CodePackagePath: 代码包
注意：此字段可能返回 null，表示取不到有效值。
        :type CodePackagePath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _StartCmd: 启动命令
注意：此字段可能返回 null，表示取不到有效值。
        :type StartCmd: str
        :param _DataConfigs: 输入数据配置
注意：此字段可能返回 null，表示取不到有效值。
        :type DataConfigs: list of DataConfig
        :param _Outputs: 输出数据配置
        :type Outputs: list of DataConfig
        :param _LogEnable: 是否上报日志
        :type LogEnable: bool
        :param _LogConfig: 日志配置
注意：此字段可能返回 null，表示取不到有效值。
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _VpcId: vpc id
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcId: str
        :param _SubnetId: 子网id
注意：此字段可能返回 null，表示取不到有效值。
        :type SubnetId: str
        :param _Status: 任务状态
        :type Status: str
        :param _RuntimeInSeconds: 运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :type RuntimeInSeconds: int
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        :param _StartTime: 任务开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :type StartTime: str
        :param _EndTime: 任务结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :type EndTime: str
        :param _ChargeStatus: 计费状态，取值范围:
BILLING: 计费中
NOT_BILLING: 未计费
WHITELIST_USING: 白名单使用中
WHITELIST_STOP: 白名单到期
ARREARS_STOP: 欠费停止
        :type ChargeStatus: str
        :param _LatestInstanceId: 最近一次实例ID
注意：此字段可能返回 null，表示取不到有效值。
        :type LatestInstanceId: str
        :param _Remark: 备注
注意：此字段可能返回 null，表示取不到有效值。
        :type Remark: str
        :param _FailureReason: 失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :type FailureReason: str
        :param _BillingInfo: 计费金额信息，eg：2.00元/小时 (for 按量计费)
注意：此字段可能返回 null，表示取不到有效值。
        :type BillingInfo: str
        :param _PodList: 运行中的Pod的名字
注意：此字段可能返回 null，表示取不到有效值。
        :type PodList: list of str
        :param _ModelInferenceCodeInfo: 模型推理代码信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelInferenceCodeInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _ResourceGroupSWType: 资源组类型
        :type ResourceGroupSWType: str
        """
        self._BatchTaskId = None
        self._BatchTaskName = None
        self._Uin = None
        self._SubUin = None
        self._Region = None
        self._ChargeType = None
        self._ResourceGroupId = None
        self._ResourceGroupName = None
        self._ResourceConfigInfo = None
        self._Tags = None
        self._ModelInfo = None
        self._ImageInfo = None
        self._CodePackagePath = None
        self._StartCmd = None
        self._DataConfigs = None
        self._Outputs = None
        self._LogEnable = None
        self._LogConfig = None
        self._VpcId = None
        self._SubnetId = None
        self._Status = None
        self._RuntimeInSeconds = None
        self._CreateTime = None
        self._UpdateTime = None
        self._StartTime = None
        self._EndTime = None
        self._ChargeStatus = None
        self._LatestInstanceId = None
        self._Remark = None
        self._FailureReason = None
        self._BillingInfo = None
        self._PodList = None
        self._ModelInferenceCodeInfo = None
        self._ResourceGroupSWType = None

    @property
    def BatchTaskId(self):
        """批量预测任务ID
        :rtype: str
        """
        return self._BatchTaskId

    @BatchTaskId.setter
    def BatchTaskId(self, BatchTaskId):
        self._BatchTaskId = BatchTaskId

    @property
    def BatchTaskName(self):
        """批量预测任务名称
        :rtype: str
        """
        return self._BatchTaskName

    @BatchTaskName.setter
    def BatchTaskName(self, BatchTaskName):
        self._BatchTaskName = BatchTaskName

    @property
    def Uin(self):
        """主账号uin
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def SubUin(self):
        """子账号uin
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def Region(self):
        """地域
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def ChargeType(self):
        """计费模式
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceGroupId(self):
        """包年包月资源组ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceGroupName(self):
        """包年包月资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def ResourceConfigInfo(self):
        """资源配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        """
        return self._ResourceConfigInfo

    @ResourceConfigInfo.setter
    def ResourceConfigInfo(self, ResourceConfigInfo):
        self._ResourceConfigInfo = ResourceConfigInfo

    @property
    def Tags(self):
        """标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def ModelInfo(self):
        """服务对应的模型信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelInfo`
        """
        return self._ModelInfo

    @ModelInfo.setter
    def ModelInfo(self, ModelInfo):
        self._ModelInfo = ModelInfo

    @property
    def ImageInfo(self):
        """自定义镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def CodePackagePath(self):
        """代码包
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._CodePackagePath

    @CodePackagePath.setter
    def CodePackagePath(self, CodePackagePath):
        self._CodePackagePath = CodePackagePath

    @property
    def StartCmd(self):
        """启动命令
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StartCmd

    @StartCmd.setter
    def StartCmd(self, StartCmd):
        self._StartCmd = StartCmd

    @property
    def DataConfigs(self):
        """输入数据配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataConfig
        """
        return self._DataConfigs

    @DataConfigs.setter
    def DataConfigs(self, DataConfigs):
        self._DataConfigs = DataConfigs

    @property
    def Outputs(self):
        """输出数据配置
        :rtype: list of DataConfig
        """
        return self._Outputs

    @Outputs.setter
    def Outputs(self, Outputs):
        self._Outputs = Outputs

    @property
    def LogEnable(self):
        """是否上报日志
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def LogConfig(self):
        """日志配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def VpcId(self):
        """vpc id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """子网id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def Status(self):
        """任务状态
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RuntimeInSeconds(self):
        """运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._RuntimeInSeconds

    @RuntimeInSeconds.setter
    def RuntimeInSeconds(self, RuntimeInSeconds):
        self._RuntimeInSeconds = RuntimeInSeconds

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def StartTime(self):
        """任务开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """任务结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def ChargeStatus(self):
        """计费状态，取值范围:
BILLING: 计费中
NOT_BILLING: 未计费
WHITELIST_USING: 白名单使用中
WHITELIST_STOP: 白名单到期
ARREARS_STOP: 欠费停止
        :rtype: str
        """
        return self._ChargeStatus

    @ChargeStatus.setter
    def ChargeStatus(self, ChargeStatus):
        self._ChargeStatus = ChargeStatus

    @property
    def LatestInstanceId(self):
        """最近一次实例ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LatestInstanceId

    @LatestInstanceId.setter
    def LatestInstanceId(self, LatestInstanceId):
        self._LatestInstanceId = LatestInstanceId

    @property
    def Remark(self):
        """备注
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def FailureReason(self):
        """失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FailureReason

    @FailureReason.setter
    def FailureReason(self, FailureReason):
        self._FailureReason = FailureReason

    @property
    def BillingInfo(self):
        """计费金额信息，eg：2.00元/小时 (for 按量计费)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._BillingInfo

    @BillingInfo.setter
    def BillingInfo(self, BillingInfo):
        self._BillingInfo = BillingInfo

    @property
    def PodList(self):
        """运行中的Pod的名字
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._PodList

    @PodList.setter
    def PodList(self, PodList):
        self._PodList = PodList

    @property
    def ModelInferenceCodeInfo(self):
        """模型推理代码信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._ModelInferenceCodeInfo

    @ModelInferenceCodeInfo.setter
    def ModelInferenceCodeInfo(self, ModelInferenceCodeInfo):
        self._ModelInferenceCodeInfo = ModelInferenceCodeInfo

    @property
    def ResourceGroupSWType(self):
        """资源组类型
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType


    def _deserialize(self, params):
        self._BatchTaskId = params.get("BatchTaskId")
        self._BatchTaskName = params.get("BatchTaskName")
        self._Uin = params.get("Uin")
        self._SubUin = params.get("SubUin")
        self._Region = params.get("Region")
        self._ChargeType = params.get("ChargeType")
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ResourceGroupName = params.get("ResourceGroupName")
        if params.get("ResourceConfigInfo") is not None:
            self._ResourceConfigInfo = ResourceConfigInfo()
            self._ResourceConfigInfo._deserialize(params.get("ResourceConfigInfo"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        if params.get("ModelInfo") is not None:
            self._ModelInfo = ModelInfo()
            self._ModelInfo._deserialize(params.get("ModelInfo"))
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        if params.get("CodePackagePath") is not None:
            self._CodePackagePath = CosPathInfo()
            self._CodePackagePath._deserialize(params.get("CodePackagePath"))
        self._StartCmd = params.get("StartCmd")
        if params.get("DataConfigs") is not None:
            self._DataConfigs = []
            for item in params.get("DataConfigs"):
                obj = DataConfig()
                obj._deserialize(item)
                self._DataConfigs.append(obj)
        if params.get("Outputs") is not None:
            self._Outputs = []
            for item in params.get("Outputs"):
                obj = DataConfig()
                obj._deserialize(item)
                self._Outputs.append(obj)
        self._LogEnable = params.get("LogEnable")
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._Status = params.get("Status")
        self._RuntimeInSeconds = params.get("RuntimeInSeconds")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._ChargeStatus = params.get("ChargeStatus")
        self._LatestInstanceId = params.get("LatestInstanceId")
        self._Remark = params.get("Remark")
        self._FailureReason = params.get("FailureReason")
        self._BillingInfo = params.get("BillingInfo")
        self._PodList = params.get("PodList")
        if params.get("ModelInferenceCodeInfo") is not None:
            self._ModelInferenceCodeInfo = CosPathInfo()
            self._ModelInferenceCodeInfo._deserialize(params.get("ModelInferenceCodeInfo"))
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchTaskInstance(AbstractModel):
    """批处理任务实例

    """

    def __init__(self):
        r"""
        :param _BatchTaskInstanceId: 任务实例id
        :type BatchTaskInstanceId: str
        :param _StartTime: 开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :type StartTime: str
        :param _EndTime: 结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :type EndTime: str
        :param _Status: 任务状态
        :type Status: str
        :param _RuntimeInSeconds: 运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :type RuntimeInSeconds: int
        """
        self._BatchTaskInstanceId = None
        self._StartTime = None
        self._EndTime = None
        self._Status = None
        self._RuntimeInSeconds = None

    @property
    def BatchTaskInstanceId(self):
        """任务实例id
        :rtype: str
        """
        return self._BatchTaskInstanceId

    @BatchTaskInstanceId.setter
    def BatchTaskInstanceId(self, BatchTaskInstanceId):
        self._BatchTaskInstanceId = BatchTaskInstanceId

    @property
    def StartTime(self):
        """开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Status(self):
        """任务状态
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RuntimeInSeconds(self):
        """运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._RuntimeInSeconds

    @RuntimeInSeconds.setter
    def RuntimeInSeconds(self, RuntimeInSeconds):
        self._RuntimeInSeconds = RuntimeInSeconds


    def _deserialize(self, params):
        self._BatchTaskInstanceId = params.get("BatchTaskInstanceId")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._Status = params.get("Status")
        self._RuntimeInSeconds = params.get("RuntimeInSeconds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BatchTaskSetItem(AbstractModel):
    """出参类型

    """

    def __init__(self):
        r"""
        :param _BatchTaskId: 批量预测任务ID
        :type BatchTaskId: str
        :param _BatchTaskName: 批量预测任务名称
        :type BatchTaskName: str
        :param _ModelInfo: 模型信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelInfo: :class:`tencentcloud.tione.v20211111.models.ModelInfo`
        :param _ImageInfo: 镜像信息
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _ChargeType: 计费模式
        :type ChargeType: str
        :param _ChargeStatus: 计费状态，取值范围:
BILLING: 计费中
NOT_BILLING: 未计费
WHITELIST_USING: 白名单使用中
WHITELIST_STOP: 白名单到期
ARREARS_STOP: 欠费停止
        :type ChargeStatus: str
        :param _ResourceGroupId: 包年包月资源组ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _ResourceConfigInfo: 资源配置
        :type ResourceConfigInfo: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        :param _Tags: 标签配置
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _Status: 任务状态, 取值范围:
INIT, STARTING, RUNNING, FAILED, STOPPING, STOPPED, SUCCEED
        :type Status: str
        :param _RuntimeInSeconds: 运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :type RuntimeInSeconds: int
        :param _CreateTime: 任务创建时间
        :type CreateTime: str
        :param _StartTime: 任务开始运行时间
注意：此字段可能返回 null，表示取不到有效值。
        :type StartTime: str
        :param _EndTime: 任务结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :type EndTime: str
        :param _UpdateTime: 任务更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTime: str
        :param _Outputs: 输出
        :type Outputs: list of DataConfig
        :param _ResourceGroupName: 包年包月资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupName: str
        :param _FailureReason: 失败原因
        :type FailureReason: str
        :param _BillingInfo: 按量计费信息
        :type BillingInfo: str
        :param _ResourceGroupSWType: 资源组类型
        :type ResourceGroupSWType: str
        """
        self._BatchTaskId = None
        self._BatchTaskName = None
        self._ModelInfo = None
        self._ImageInfo = None
        self._ChargeType = None
        self._ChargeStatus = None
        self._ResourceGroupId = None
        self._ResourceConfigInfo = None
        self._Tags = None
        self._Status = None
        self._RuntimeInSeconds = None
        self._CreateTime = None
        self._StartTime = None
        self._EndTime = None
        self._UpdateTime = None
        self._Outputs = None
        self._ResourceGroupName = None
        self._FailureReason = None
        self._BillingInfo = None
        self._ResourceGroupSWType = None

    @property
    def BatchTaskId(self):
        """批量预测任务ID
        :rtype: str
        """
        return self._BatchTaskId

    @BatchTaskId.setter
    def BatchTaskId(self, BatchTaskId):
        self._BatchTaskId = BatchTaskId

    @property
    def BatchTaskName(self):
        """批量预测任务名称
        :rtype: str
        """
        return self._BatchTaskName

    @BatchTaskName.setter
    def BatchTaskName(self, BatchTaskName):
        self._BatchTaskName = BatchTaskName

    @property
    def ModelInfo(self):
        """模型信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelInfo`
        """
        return self._ModelInfo

    @ModelInfo.setter
    def ModelInfo(self, ModelInfo):
        self._ModelInfo = ModelInfo

    @property
    def ImageInfo(self):
        """镜像信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def ChargeType(self):
        """计费模式
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ChargeStatus(self):
        """计费状态，取值范围:
BILLING: 计费中
NOT_BILLING: 未计费
WHITELIST_USING: 白名单使用中
WHITELIST_STOP: 白名单到期
ARREARS_STOP: 欠费停止
        :rtype: str
        """
        return self._ChargeStatus

    @ChargeStatus.setter
    def ChargeStatus(self, ChargeStatus):
        self._ChargeStatus = ChargeStatus

    @property
    def ResourceGroupId(self):
        """包年包月资源组ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceConfigInfo(self):
        """资源配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        """
        return self._ResourceConfigInfo

    @ResourceConfigInfo.setter
    def ResourceConfigInfo(self, ResourceConfigInfo):
        self._ResourceConfigInfo = ResourceConfigInfo

    @property
    def Tags(self):
        """标签配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def Status(self):
        """任务状态, 取值范围:
INIT, STARTING, RUNNING, FAILED, STOPPING, STOPPED, SUCCEED
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RuntimeInSeconds(self):
        """运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._RuntimeInSeconds

    @RuntimeInSeconds.setter
    def RuntimeInSeconds(self, RuntimeInSeconds):
        self._RuntimeInSeconds = RuntimeInSeconds

    @property
    def CreateTime(self):
        """任务创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def StartTime(self):
        """任务开始运行时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """任务结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def UpdateTime(self):
        """任务更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def Outputs(self):
        """输出
        :rtype: list of DataConfig
        """
        return self._Outputs

    @Outputs.setter
    def Outputs(self, Outputs):
        self._Outputs = Outputs

    @property
    def ResourceGroupName(self):
        """包年包月资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def FailureReason(self):
        """失败原因
        :rtype: str
        """
        return self._FailureReason

    @FailureReason.setter
    def FailureReason(self, FailureReason):
        self._FailureReason = FailureReason

    @property
    def BillingInfo(self):
        """按量计费信息
        :rtype: str
        """
        return self._BillingInfo

    @BillingInfo.setter
    def BillingInfo(self, BillingInfo):
        self._BillingInfo = BillingInfo

    @property
    def ResourceGroupSWType(self):
        """资源组类型
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType


    def _deserialize(self, params):
        self._BatchTaskId = params.get("BatchTaskId")
        self._BatchTaskName = params.get("BatchTaskName")
        if params.get("ModelInfo") is not None:
            self._ModelInfo = ModelInfo()
            self._ModelInfo._deserialize(params.get("ModelInfo"))
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        self._ChargeType = params.get("ChargeType")
        self._ChargeStatus = params.get("ChargeStatus")
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("ResourceConfigInfo") is not None:
            self._ResourceConfigInfo = ResourceConfigInfo()
            self._ResourceConfigInfo._deserialize(params.get("ResourceConfigInfo"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._Status = params.get("Status")
        self._RuntimeInSeconds = params.get("RuntimeInSeconds")
        self._CreateTime = params.get("CreateTime")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._UpdateTime = params.get("UpdateTime")
        if params.get("Outputs") is not None:
            self._Outputs = []
            for item in params.get("Outputs"):
                obj = DataConfig()
                obj._deserialize(item)
                self._Outputs.append(obj)
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._FailureReason = params.get("FailureReason")
        self._BillingInfo = params.get("BillingInfo")
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BillingUint(AbstractModel):
    """计费的单元

    """

    def __init__(self):
        r"""
        :param _Spec: 计费规格
注意：此字段可能返回 null，表示取不到有效值。
        :type Spec: str
        :param _Count: 该规格的数量
注意：此字段可能返回 null，表示取不到有效值。
        :type Count: int
        """
        self._Spec = None
        self._Count = None

    @property
    def Spec(self):
        """计费规格
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Spec

    @Spec.setter
    def Spec(self, Spec):
        self._Spec = Spec

    @property
    def Count(self):
        """该规格的数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count


    def _deserialize(self, params):
        self._Spec = params.get("Spec")
        self._Count = params.get("Count")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class BuiltInEvaluationDataset(AbstractModel):
    """内置的评测数据集

    """

    def __init__(self):
        r"""
        :param _Id: 内置评测集 ID
        :type Id: str
        :param _Name: 内置评测集名称
        :type Name: str
        :param _Description: 内置评测集简介
        :type Description: str
        """
        self._Id = None
        self._Name = None
        self._Description = None

    @property
    def Id(self):
        """内置评测集 ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """内置评测集名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Description(self):
        """内置评测集简介
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CBSConfig(AbstractModel):
    """CBS存储配置

    """

    def __init__(self):
        r"""
        :param _VolumeSizeInGB: 存储大小
注意：此字段可能返回 null，表示取不到有效值。
        :type VolumeSizeInGB: int
        """
        self._VolumeSizeInGB = None

    @property
    def VolumeSizeInGB(self):
        """存储大小
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._VolumeSizeInGB

    @VolumeSizeInGB.setter
    def VolumeSizeInGB(self, VolumeSizeInGB):
        self._VolumeSizeInGB = VolumeSizeInGB


    def _deserialize(self, params):
        self._VolumeSizeInGB = params.get("VolumeSizeInGB")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CFSConfig(AbstractModel):
    """CFS存储的配置

    """

    def __init__(self):
        r"""
        :param _Id: cfs的实例的ID
        :type Id: str
        :param _Path: 存储的路径
        :type Path: str
        :param _MountType: cfs的挂载类型，可选值为：STORAGE、SOURCE 分别表示存储拓展模式和数据源模式，默认为 STORAGE
注意：此字段可能返回 null，表示取不到有效值。
        :type MountType: str
        :param _Ip: cfs的ip
注意：此字段可能返回 null，表示取不到有效值。
        :type Ip: str
        :param _VpcId: cfs的vpcid
        :type VpcId: str
        :param _SubnetId: cfs的子网id
        :type SubnetId: str
        :param _Protocol: 协议 1: NFS, 2: TURBO
注意：此字段可能返回 null，表示取不到有效值。
        :type Protocol: str
        :param _MountTargetId: CFS的MountTargetId
注意：此字段可能返回 null，表示取不到有效值。
        :type MountTargetId: str
        :param _IsPlatform: 是否为平台cfs
注意：此字段可能返回 null，表示取不到有效值。
        :type IsPlatform: str
        :param _Status: 状态: MOUNTING 挂载中; MOUNTED 已挂载; UNMOUNTED 未挂载
注意：此字段可能返回 null，表示取不到有效值。
        :type Status: str
        :param _VpcCidr: vpc所在的网段
        :type VpcCidr: str
        """
        self._Id = None
        self._Path = None
        self._MountType = None
        self._Ip = None
        self._VpcId = None
        self._SubnetId = None
        self._Protocol = None
        self._MountTargetId = None
        self._IsPlatform = None
        self._Status = None
        self._VpcCidr = None

    @property
    def Id(self):
        """cfs的实例的ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Path(self):
        """存储的路径
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def MountType(self):
        """cfs的挂载类型，可选值为：STORAGE、SOURCE 分别表示存储拓展模式和数据源模式，默认为 STORAGE
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._MountType

    @MountType.setter
    def MountType(self, MountType):
        self._MountType = MountType

    @property
    def Ip(self):
        """cfs的ip
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Ip

    @Ip.setter
    def Ip(self, Ip):
        self._Ip = Ip

    @property
    def VpcId(self):
        """cfs的vpcid
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """cfs的子网id
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def Protocol(self):
        """协议 1: NFS, 2: TURBO
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Protocol

    @Protocol.setter
    def Protocol(self, Protocol):
        self._Protocol = Protocol

    @property
    def MountTargetId(self):
        """CFS的MountTargetId
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._MountTargetId

    @MountTargetId.setter
    def MountTargetId(self, MountTargetId):
        self._MountTargetId = MountTargetId

    @property
    def IsPlatform(self):
        """是否为平台cfs
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._IsPlatform

    @IsPlatform.setter
    def IsPlatform(self, IsPlatform):
        self._IsPlatform = IsPlatform

    @property
    def Status(self):
        """状态: MOUNTING 挂载中; MOUNTED 已挂载; UNMOUNTED 未挂载
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def VpcCidr(self):
        """vpc所在的网段
        :rtype: str
        """
        return self._VpcCidr

    @VpcCidr.setter
    def VpcCidr(self, VpcCidr):
        self._VpcCidr = VpcCidr


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Path = params.get("Path")
        self._MountType = params.get("MountType")
        self._Ip = params.get("Ip")
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._Protocol = params.get("Protocol")
        self._MountTargetId = params.get("MountTargetId")
        self._IsPlatform = params.get("IsPlatform")
        self._Status = params.get("Status")
        self._VpcCidr = params.get("VpcCidr")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))


class DataSourceConfig(AbstractModel):
    """数据源配置
    """

    def __init__(self):
        r"""
        :param _SubPath: 子路径
注意：此字段可能返回 null，表示取不到有效值。
        :type SubPath: str
        :param _DataSourceId: 数据源ID
注意：此字段可能返回 null，表示取不到有效值。
        :type DataSourceId: str
        """
        self._SubPath = None
        self._DataSourceId = None

    @property
    def SubPath(self):
        """子路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubPath

    @SubPath.setter
    def SubPath(self, SubPath):
        self._SubPath = SubPath

    @property
    def DataSourceId(self):
        """数据源ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DataSourceId

    @DataSourceId.setter
    def DataSourceId(self, DataSourceId):
        self._DataSourceId = DataSourceId

    def _deserialize(self, params):
        self._SubPath = params.get("SubPath")
        self._DataSourceId = params.get("DataSourceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))

class CFSStorageInfo(AbstractModel):
    """CFS 存储信息

    """

    def __init__(self):
        r"""
        :param _Id: 文件系统 ID
注意：此字段可能返回 null，表示取不到有效值。
        :type Id: str
        :param _Path: 存储路径
注意：此字段可能返回 null，表示取不到有效值。
        :type Path: str
        """
        self._Id = None
        self._Path = None

    @property
    def Id(self):
        """文件系统 ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Path(self):
        """存储路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Path = params.get("Path")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CFSTurbo(AbstractModel):
    """配置CFSTurbo参数

    """

    def __init__(self):
        r"""
        :param _Id: CFSTurbo实例id
注意：此字段可能返回 null，表示取不到有效值。
        :type Id: str
        :param _Path: CFSTurbo路径
注意：此字段可能返回 null，表示取不到有效值。
        :type Path: str
        """
        self._Id = None
        self._Path = None

    @property
    def Id(self):
        """CFSTurbo实例id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Path(self):
        """CFSTurbo路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Path = params.get("Path")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CFSTurboStorageInfo(AbstractModel):
    """CFS 存储信息

    """

    def __init__(self):
        r"""
        :param _Id: 文件系统 ID
注意：此字段可能返回 null，表示取不到有效值。
        :type Id: str
        :param _Path: 存储路径
注意：此字段可能返回 null，表示取不到有效值。
        :type Path: str
        """
        self._Id = None
        self._Path = None

    @property
    def Id(self):
        """文件系统 ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Path(self):
        """存储路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Path = params.get("Path")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CVMInstanceWithSpec(AbstractModel):
    """CVM实例信息与TI配置项信息

    """

    def __init__(self):
        r"""
        :param _Id: CVM实例ID
注意：此字段可能返回 null，表示取不到有效值。
        :type Id: str
        :param _Name: CVM实例名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _Spec: 配置项
注意：此字段可能返回 null，表示取不到有效值。
        :type Spec: :class:`tencentcloud.tione.v20211111.models.Spec`
        :param _Price: 刊例价
注意：此字段可能返回 null，表示取不到有效值。
        :type Price: float
        :param _RejectedReasons: 无法纳管原因
注意：此字段可能返回 null，表示取不到有效值。
        :type RejectedReasons: list of str
        :param _SecurityGroupIds: 相关安全组ID
注意：此字段可能返回 null，表示取不到有效值。
        :type SecurityGroupIds: list of str
        :param _VirtualPrivateCloud: VPC相关信息
注意：此字段可能返回 null，表示取不到有效值。
        :type VirtualPrivateCloud: :class:`tencentcloud.tione.v20211111.models.VPCInfo`
        :param _SystemDisk: 系统盘信息
注意：此字段可能返回 null，表示取不到有效值。
        :type SystemDisk: :class:`tencentcloud.tione.v20211111.models.SystemDisk`
        :param _DataDisks: 数据盘信息
注意：此字段可能返回 null，表示取不到有效值。
        :type DataDisks: list of DataDisk
        :param _TagSet: 节点的标签信息
        :type TagSet: list of Tag
        """
        self._Id = None
        self._Name = None
        self._Spec = None
        self._Price = None
        self._RejectedReasons = None
        self._SecurityGroupIds = None
        self._VirtualPrivateCloud = None
        self._SystemDisk = None
        self._DataDisks = None
        self._TagSet = None

    @property
    def Id(self):
        """CVM实例ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """CVM实例名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Spec(self):
        """配置项
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.Spec`
        """
        return self._Spec

    @Spec.setter
    def Spec(self, Spec):
        self._Spec = Spec

    @property
    def Price(self):
        """刊例价
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Price

    @Price.setter
    def Price(self, Price):
        self._Price = Price

    @property
    def RejectedReasons(self):
        """无法纳管原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._RejectedReasons

    @RejectedReasons.setter
    def RejectedReasons(self, RejectedReasons):
        self._RejectedReasons = RejectedReasons

    @property
    def SecurityGroupIds(self):
        """相关安全组ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._SecurityGroupIds

    @SecurityGroupIds.setter
    def SecurityGroupIds(self, SecurityGroupIds):
        self._SecurityGroupIds = SecurityGroupIds

    @property
    def VirtualPrivateCloud(self):
        """VPC相关信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.VPCInfo`
        """
        return self._VirtualPrivateCloud

    @VirtualPrivateCloud.setter
    def VirtualPrivateCloud(self, VirtualPrivateCloud):
        self._VirtualPrivateCloud = VirtualPrivateCloud

    @property
    def SystemDisk(self):
        """系统盘信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.SystemDisk`
        """
        return self._SystemDisk

    @SystemDisk.setter
    def SystemDisk(self, SystemDisk):
        self._SystemDisk = SystemDisk

    @property
    def DataDisks(self):
        """数据盘信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataDisk
        """
        return self._DataDisks

    @DataDisks.setter
    def DataDisks(self, DataDisks):
        self._DataDisks = DataDisks

    @property
    def TagSet(self):
        """节点的标签信息
        :rtype: list of Tag
        """
        return self._TagSet

    @TagSet.setter
    def TagSet(self, TagSet):
        self._TagSet = TagSet


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        if params.get("Spec") is not None:
            self._Spec = Spec()
            self._Spec._deserialize(params.get("Spec"))
        self._Price = params.get("Price")
        self._RejectedReasons = params.get("RejectedReasons")
        self._SecurityGroupIds = params.get("SecurityGroupIds")
        if params.get("VirtualPrivateCloud") is not None:
            self._VirtualPrivateCloud = VPCInfo()
            self._VirtualPrivateCloud._deserialize(params.get("VirtualPrivateCloud"))
        if params.get("SystemDisk") is not None:
            self._SystemDisk = SystemDisk()
            self._SystemDisk._deserialize(params.get("SystemDisk"))
        if params.get("DataDisks") is not None:
            self._DataDisks = []
            for item in params.get("DataDisks"):
                obj = DataDisk()
                obj._deserialize(item)
                self._DataDisks.append(obj)
        if params.get("TagSet") is not None:
            self._TagSet = []
            for item in params.get("TagSet"):
                obj = Tag()
                obj._deserialize(item)
                self._TagSet.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CamTag(AbstractModel):
    """cam详细信息

    """

    def __init__(self):
        r"""
        :param _Key: tag键值
        :type Key: str
        :param _Value: tag值
        :type Value: str
        """
        self._Key = None
        self._Value = None

    @property
    def Key(self):
        """tag键值
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Value(self):
        """tag值
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Key = params.get("Key")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ChatCompletionRequest(AbstractModel):
    """ChatCompletion请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Model: 对话的目标模型ID。
自行部署的开源大模型聊天：部署的模型服务组ID，形如ms-q7pfr29p。
        :type Model: str
        :param _Messages: 输入对话历史。旧的对话在前，数组中最后一项应该为这次的问题。
        :type Messages: list of Message
        :param _Temperature: 仅当模型为自行部署的开源大模型时生效。采样随机值，默认值为0.7，取值范围[0,2]。较高的值(如0.8)将使输出更加随机，而较低的值(如0.2)将使输出更加确定。建议仅修改此参数或TopP，但不建议两者都修改。
        :type Temperature: float
        :param _TopP: 仅当模型为自行部署的开源大模型时生效。核采样，默认值为1，取值范围[0,1]。指的是预先设置一个概率界限 p，然后将所有可能生成的token，根据概率大小从高到低排列，依次选取。当这些选取的token的累积概率大于或等于 p 值时停止，然后从已经选取的token中进行采样，生成下一个token。例如top_p为0.1时意味着模型只考虑累积概率为10%的token。建议仅修改此参数或Temperature，不建议两者都修改。
        :type TopP: float
        :param _N: 仅当模型为自行部署的开源大模型时生效。生成答案数。默认为1
        :type N: float
        :param _MaxTokens: 仅当模型为自行部署的开源大模型时生效。默认 512，模型可生成内容的最长 token 数量，最大不能超过模型支持的上下文长度。
        :type MaxTokens: int
        :param _Stream: 否流式返回，默认值为 false。
        :type Stream: bool
        """
        self._Model = None
        self._Messages = None
        self._Temperature = None
        self._TopP = None
        self._N = None
        self._MaxTokens = None
        self._Stream = None

    @property
    def Model(self):
        """对话的目标模型ID。
自行部署的开源大模型聊天：部署的模型服务组ID，形如ms-q7pfr29p。
        :rtype: str
        """
        return self._Model

    @Model.setter
    def Model(self, Model):
        self._Model = Model

    @property
    def Messages(self):
        """输入对话历史。旧的对话在前，数组中最后一项应该为这次的问题。
        :rtype: list of Message
        """
        return self._Messages

    @Messages.setter
    def Messages(self, Messages):
        self._Messages = Messages

    @property
    def Temperature(self):
        """仅当模型为自行部署的开源大模型时生效。采样随机值，默认值为0.7，取值范围[0,2]。较高的值(如0.8)将使输出更加随机，而较低的值(如0.2)将使输出更加确定。建议仅修改此参数或TopP，但不建议两者都修改。
        :rtype: float
        """
        return self._Temperature

    @Temperature.setter
    def Temperature(self, Temperature):
        self._Temperature = Temperature

    @property
    def TopP(self):
        """仅当模型为自行部署的开源大模型时生效。核采样，默认值为1，取值范围[0,1]。指的是预先设置一个概率界限 p，然后将所有可能生成的token，根据概率大小从高到低排列，依次选取。当这些选取的token的累积概率大于或等于 p 值时停止，然后从已经选取的token中进行采样，生成下一个token。例如top_p为0.1时意味着模型只考虑累积概率为10%的token。建议仅修改此参数或Temperature，不建议两者都修改。
        :rtype: float
        """
        return self._TopP

    @TopP.setter
    def TopP(self, TopP):
        self._TopP = TopP

    @property
    def N(self):
        """仅当模型为自行部署的开源大模型时生效。生成答案数。默认为1
        :rtype: float
        """
        return self._N

    @N.setter
    def N(self, N):
        self._N = N

    @property
    def MaxTokens(self):
        """仅当模型为自行部署的开源大模型时生效。默认 512，模型可生成内容的最长 token 数量，最大不能超过模型支持的上下文长度。
        :rtype: int
        """
        return self._MaxTokens

    @MaxTokens.setter
    def MaxTokens(self, MaxTokens):
        self._MaxTokens = MaxTokens

    @property
    def Stream(self):
        """否流式返回，默认值为 false。
        :rtype: bool
        """
        return self._Stream

    @Stream.setter
    def Stream(self, Stream):
        self._Stream = Stream


    def _deserialize(self, params):
        self._Model = params.get("Model")
        if params.get("Messages") is not None:
            self._Messages = []
            for item in params.get("Messages"):
                obj = Message()
                obj._deserialize(item)
                self._Messages.append(obj)
        self._Temperature = params.get("Temperature")
        self._TopP = params.get("TopP")
        self._N = params.get("N")
        self._MaxTokens = params.get("MaxTokens")
        self._Stream = params.get("Stream")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ChatCompletionResponse(AbstractModel):
    """ChatCompletion返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Model: 对话的模型服务组ID
        :type Model: str
        :param _Choices: 本次问答的答案。
        :type Choices: list of Choice
        :param _Id: 会话Id。
        :type Id: str
        :param _Usage: token统计
        :type Usage: :class:`tencentcloud.tione.v20211111.models.Usage`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Model = None
        self._Choices = None
        self._Id = None
        self._Usage = None
        self._RequestId = None

    @property
    def Model(self):
        """对话的模型服务组ID
        :rtype: str
        """
        return self._Model

    @Model.setter
    def Model(self, Model):
        self._Model = Model

    @property
    def Choices(self):
        """本次问答的答案。
        :rtype: list of Choice
        """
        return self._Choices

    @Choices.setter
    def Choices(self, Choices):
        self._Choices = Choices

    @property
    def Id(self):
        """会话Id。
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Usage(self):
        """token统计
        :rtype: :class:`tencentcloud.tione.v20211111.models.Usage`
        """
        return self._Usage

    @Usage.setter
    def Usage(self, Usage):
        self._Usage = Usage

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Model = params.get("Model")
        if params.get("Choices") is not None:
            self._Choices = []
            for item in params.get("Choices"):
                obj = Choice()
                obj._deserialize(item)
                self._Choices.append(obj)
        self._Id = params.get("Id")
        if params.get("Usage") is not None:
            self._Usage = Usage()
            self._Usage._deserialize(params.get("Usage"))
        self._RequestId = params.get("RequestId")


class ChatTaskInfo(AbstractModel):
    """对话任务信息

    """

    def __init__(self):
        r"""
        :param _TaskId: 异步任务Id
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _SessionId: 会话ID
注意：此字段可能返回 null，表示取不到有效值。
        :type SessionId: str
        :param _SequenceId: 会话序列号
注意：此字段可能返回 null，表示取不到有效值。
        :type SequenceId: int
        :param _State: 任务状态。RUNNING，运行中;FINISHED，已结束
注意：此字段可能返回 null，表示取不到有效值。
        :type State: str
        :param _Answer: 本次对话迄今为止的所有答案
注意：此字段可能返回 null，表示取不到有效值。
        :type Answer: str
        """
        self._TaskId = None
        self._SessionId = None
        self._SequenceId = None
        self._State = None
        self._Answer = None

    @property
    def TaskId(self):
        """异步任务Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def SessionId(self):
        """会话ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SessionId

    @SessionId.setter
    def SessionId(self, SessionId):
        self._SessionId = SessionId

    @property
    def SequenceId(self):
        """会话序列号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._SequenceId

    @SequenceId.setter
    def SequenceId(self, SequenceId):
        self._SequenceId = SequenceId

    @property
    def State(self):
        """任务状态。RUNNING，运行中;FINISHED，已结束
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State

    @property
    def Answer(self):
        """本次对话迄今为止的所有答案
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Answer

    @Answer.setter
    def Answer(self, Answer):
        self._Answer = Answer


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._SessionId = params.get("SessionId")
        self._SequenceId = params.get("SequenceId")
        self._State = params.get("State")
        self._Answer = params.get("Answer")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckAutoMLTaskNameExistRequest(AbstractModel):
    """CheckAutoMLTaskNameExist请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskName: 任务名称
        :type TaskName: str
        """
        self._TaskName = None

    @property
    def TaskName(self):
        """任务名称
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName


    def _deserialize(self, params):
        self._TaskName = params.get("TaskName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckAutoMLTaskNameExistResponse(AbstractModel):
    """CheckAutoMLTaskNameExist返回参数结构体

    """

    def __init__(self):
        r"""
        :param _NameExist: 是否存在
        :type NameExist: bool
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._NameExist = None
        self._RequestId = None

    @property
    def NameExist(self):
        """是否存在
        :rtype: bool
        """
        return self._NameExist

    @NameExist.setter
    def NameExist(self, NameExist):
        self._NameExist = NameExist

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._NameExist = params.get("NameExist")
        self._RequestId = params.get("RequestId")


class CheckBillingOwnUinRequest(AbstractModel):
    """CheckBillingOwnUin请求参数结构体

    """


class CheckBillingOwnUinResponse(AbstractModel):
    """CheckBillingOwnUin返回参数结构体

    """

    def __init__(self):
        r"""
        :param _IsInternal: 是否是内部客户
        :type IsInternal: bool
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._IsInternal = None
        self._RequestId = None

    @property
    def IsInternal(self):
        """是否是内部客户
        :rtype: bool
        """
        return self._IsInternal

    @IsInternal.setter
    def IsInternal(self, IsInternal):
        self._IsInternal = IsInternal

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._IsInternal = params.get("IsInternal")
        self._RequestId = params.get("RequestId")


class CheckBillingWhitelistRequest(AbstractModel):
    """CheckBillingWhitelist请求参数结构体

    """


class CheckBillingWhitelistResponse(AbstractModel):
    """CheckBillingWhitelist返回参数结构体

    """

    def __init__(self):
        r"""
        :param _IsWhitelist: 是否为白名单用户
        :type IsWhitelist: bool
        :param _WhitelistState: None/Effective/Frozen/Expired
        :type WhitelistState: str
        :param _IsMiyingUser: 是否为觅影用户
        :type IsMiyingUser: bool
        :param _BillingType: 计费类型，MiyingBilling：觅影计费，NonWhitelist：正常计费（非白名单），CommonWhitelist：普通白名单，TLearningWhitelist：腾学汇白名单
        :type BillingType: str
        :param _BillingFeatures: 特殊资源访问权限
        :type BillingFeatures: list of str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._IsWhitelist = None
        self._WhitelistState = None
        self._IsMiyingUser = None
        self._BillingType = None
        self._BillingFeatures = None
        self._RequestId = None

    @property
    def IsWhitelist(self):
        """是否为白名单用户
        :rtype: bool
        """
        return self._IsWhitelist

    @IsWhitelist.setter
    def IsWhitelist(self, IsWhitelist):
        self._IsWhitelist = IsWhitelist

    @property
    def WhitelistState(self):
        """None/Effective/Frozen/Expired
        :rtype: str
        """
        return self._WhitelistState

    @WhitelistState.setter
    def WhitelistState(self, WhitelistState):
        self._WhitelistState = WhitelistState

    @property
    def IsMiyingUser(self):
        """是否为觅影用户
        :rtype: bool
        """
        return self._IsMiyingUser

    @IsMiyingUser.setter
    def IsMiyingUser(self, IsMiyingUser):
        self._IsMiyingUser = IsMiyingUser

    @property
    def BillingType(self):
        """计费类型，MiyingBilling：觅影计费，NonWhitelist：正常计费（非白名单），CommonWhitelist：普通白名单，TLearningWhitelist：腾学汇白名单
        :rtype: str
        """
        return self._BillingType

    @BillingType.setter
    def BillingType(self, BillingType):
        self._BillingType = BillingType

    @property
    def BillingFeatures(self):
        """特殊资源访问权限
        :rtype: list of str
        """
        return self._BillingFeatures

    @BillingFeatures.setter
    def BillingFeatures(self, BillingFeatures):
        self._BillingFeatures = BillingFeatures

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._IsWhitelist = params.get("IsWhitelist")
        self._WhitelistState = params.get("WhitelistState")
        self._IsMiyingUser = params.get("IsMiyingUser")
        self._BillingType = params.get("BillingType")
        self._BillingFeatures = params.get("BillingFeatures")
        self._RequestId = params.get("RequestId")


class CheckDatasetNameRequest(AbstractModel):
    """CheckDatasetName请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetName: 数据集名称
        :type DatasetName: str
        """
        self._DatasetName = None

    @property
    def DatasetName(self):
        """数据集名称
        :rtype: str
        """
        return self._DatasetName

    @DatasetName.setter
    def DatasetName(self, DatasetName):
        self._DatasetName = DatasetName


    def _deserialize(self, params):
        self._DatasetName = params.get("DatasetName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckDatasetNameResponse(AbstractModel):
    """CheckDatasetName返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Exist: true or false
注意：此字段可能返回 null，表示取不到有效值。
        :type Exist: bool
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Exist = None
        self._RequestId = None

    @property
    def Exist(self):
        """true or false
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._Exist

    @Exist.setter
    def Exist(self, Exist):
        self._Exist = Exist

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Exist = params.get("Exist")
        self._RequestId = params.get("RequestId")


class CheckModelAccTaskNameExistRequest(AbstractModel):
    """CheckModelAccTaskNameExist请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccTaskName: 模型加速任务名称
        :type ModelAccTaskName: str
        """
        self._ModelAccTaskName = None

    @property
    def ModelAccTaskName(self):
        """模型加速任务名称
        :rtype: str
        """
        return self._ModelAccTaskName

    @ModelAccTaskName.setter
    def ModelAccTaskName(self, ModelAccTaskName):
        self._ModelAccTaskName = ModelAccTaskName


    def _deserialize(self, params):
        self._ModelAccTaskName = params.get("ModelAccTaskName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckModelAccTaskNameExistResponse(AbstractModel):
    """CheckModelAccTaskNameExist返回参数结构体

    """

    def __init__(self):
        r"""
        :param _NameExist: 是否存在重名
注意：此字段可能返回 null，表示取不到有效值。
        :type NameExist: bool
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._NameExist = None
        self._RequestId = None

    @property
    def NameExist(self):
        """是否存在重名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._NameExist

    @NameExist.setter
    def NameExist(self, NameExist):
        self._NameExist = NameExist

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._NameExist = params.get("NameExist")
        self._RequestId = params.get("RequestId")


class CheckpointInferMeta(AbstractModel):
    """Checkpoint 的推理配置，目前由训练脚本输出

    """

    def __init__(self):
        r"""
        :param _ConversationTemplateName: 对话模板名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ConversationTemplateName: str
        :param _ModelId: 模型ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelId: str
        """
        self._ConversationTemplateName = None
        self._ModelId = None

    @property
    def ConversationTemplateName(self):
        """对话模板名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ConversationTemplateName

    @ConversationTemplateName.setter
    def ConversationTemplateName(self, ConversationTemplateName):
        self._ConversationTemplateName = ConversationTemplateName

    @property
    def ModelId(self):
        """模型ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId


    def _deserialize(self, params):
        self._ConversationTemplateName = params.get("ConversationTemplateName")
        self._ModelId = params.get("ModelId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckpointInfo(AbstractModel):
    """训练任务产生的 Checkpoint 的信息

    """

    def __init__(self):
        r"""
        :param _CheckpointId: Checkpoint 的唯一 ID
注意：此字段可能返回 null，表示取不到有效值。
        :type CheckpointId: str
        :param _TrainTaskId: 训练任务 ID（重启任务后不变）
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskId: str
        :param _TrainJobId: 训练任务实例 ID（重启任务后重新生成）
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainJobId: str
        :param _Name: 名称，通过用户脚本获取
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _Description: 描述，通过用户脚本获取
注意：此字段可能返回 null，表示取不到有效值。
        :type Description: str
        :param _Path: Checkpoint 在训练容器中的路径，通过用户脚本获取
注意：此字段可能返回 null，表示取不到有效值。
        :type Path: str
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _UpdateTime: 更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTime: str
        :param _StorageInfo: Checkpoint 实际的存储信息
注意：此字段可能返回 null，表示取不到有效值。
        :type StorageInfo: :class:`tencentcloud.tione.v20211111.models.CheckpointStorageInfo`
        :param _TrainMeta: 训练相关元信息，通过用户脚本获取
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainMeta: :class:`tencentcloud.tione.v20211111.models.CheckpointTrainMeta`
        :param _InferMeta: 推理相关元信息，通过用户脚本获取
注意：此字段可能返回 null，表示取不到有效值。
        :type InferMeta: :class:`tencentcloud.tione.v20211111.models.CheckpointInferMeta`
        """
        self._CheckpointId = None
        self._TrainTaskId = None
        self._TrainJobId = None
        self._Name = None
        self._Description = None
        self._Path = None
        self._CreateTime = None
        self._UpdateTime = None
        self._StorageInfo = None
        self._TrainMeta = None
        self._InferMeta = None

    @property
    def CheckpointId(self):
        """Checkpoint 的唯一 ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CheckpointId

    @CheckpointId.setter
    def CheckpointId(self, CheckpointId):
        self._CheckpointId = CheckpointId

    @property
    def TrainTaskId(self):
        """训练任务 ID（重启任务后不变）
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId

    @property
    def TrainJobId(self):
        """训练任务实例 ID（重启任务后重新生成）
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainJobId

    @TrainJobId.setter
    def TrainJobId(self, TrainJobId):
        self._TrainJobId = TrainJobId

    @property
    def Name(self):
        """名称，通过用户脚本获取
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Description(self):
        """描述，通过用户脚本获取
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Path(self):
        """Checkpoint 在训练容器中的路径，通过用户脚本获取
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def StorageInfo(self):
        """Checkpoint 实际的存储信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CheckpointStorageInfo`
        """
        return self._StorageInfo

    @StorageInfo.setter
    def StorageInfo(self, StorageInfo):
        self._StorageInfo = StorageInfo

    @property
    def TrainMeta(self):
        """训练相关元信息，通过用户脚本获取
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CheckpointTrainMeta`
        """
        return self._TrainMeta

    @TrainMeta.setter
    def TrainMeta(self, TrainMeta):
        self._TrainMeta = TrainMeta

    @property
    def InferMeta(self):
        """推理相关元信息，通过用户脚本获取
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CheckpointInferMeta`
        """
        return self._InferMeta

    @InferMeta.setter
    def InferMeta(self, InferMeta):
        self._InferMeta = InferMeta


    def _deserialize(self, params):
        self._CheckpointId = params.get("CheckpointId")
        self._TrainTaskId = params.get("TrainTaskId")
        self._TrainJobId = params.get("TrainJobId")
        self._Name = params.get("Name")
        self._Description = params.get("Description")
        self._Path = params.get("Path")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        if params.get("StorageInfo") is not None:
            self._StorageInfo = CheckpointStorageInfo()
            self._StorageInfo._deserialize(params.get("StorageInfo"))
        if params.get("TrainMeta") is not None:
            self._TrainMeta = CheckpointTrainMeta()
            self._TrainMeta._deserialize(params.get("TrainMeta"))
        if params.get("InferMeta") is not None:
            self._InferMeta = CheckpointInferMeta()
            self._InferMeta._deserialize(params.get("InferMeta"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckpointStorageInfo(AbstractModel):
    """Checkpoint 的存储信息

    """

    def __init__(self):
        r"""
        :param _StorageType: 存储类型
注意：此字段可能返回 null，表示取不到有效值。
        :type StorageType: str
        :param _CFSStorage: CFS 存储
注意：此字段可能返回 null，表示取不到有效值。
        :type CFSStorage: :class:`tencentcloud.tione.v20211111.models.CFSStorageInfo`
        :param _CFSTurboStorage: CFSTurbo 存储
注意：此字段可能返回 null，表示取不到有效值。
        :type CFSTurboStorage: :class:`tencentcloud.tione.v20211111.models.CFSTurboStorageInfo`
        :param _DataSourceFS: 私有化数据中心数据源存储
注意：此字段可能返回 null，表示取不到有效值。
        :type DataSourceFS: :class:`tencentcloud.tione.v20211111.models.DataCenterDataSource`
        :param _PlatformFS: 私有化文件系统存储
注意：此字段可能返回 null，表示取不到有效值。
        :type PlatformFS: :class:`tencentcloud.tione.v20211111.models.PrivateFileSystemDataSource`
        """
        self._StorageType = None
        self._CFSStorage = None
        self._CFSTurboStorage = None
        self._DataSourceFS = None
        self._PlatformFS = None

    @property
    def StorageType(self):
        """存储类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StorageType

    @StorageType.setter
    def StorageType(self, StorageType):
        self._StorageType = StorageType

    @property
    def CFSStorage(self):
        """CFS 存储
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSStorageInfo`
        """
        return self._CFSStorage

    @CFSStorage.setter
    def CFSStorage(self, CFSStorage):
        self._CFSStorage = CFSStorage

    @property
    def CFSTurboStorage(self):
        """CFSTurbo 存储
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSTurboStorageInfo`
        """
        return self._CFSTurboStorage

    @CFSTurboStorage.setter
    def CFSTurboStorage(self, CFSTurboStorage):
        self._CFSTurboStorage = CFSTurboStorage

    @property
    def DataSourceFS(self):
        """私有化数据中心数据源存储
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.DataCenterDataSource`
        """
        return self._DataSourceFS

    @DataSourceFS.setter
    def DataSourceFS(self, DataSourceFS):
        self._DataSourceFS = DataSourceFS

    @property
    def PlatformFS(self):
        """私有化文件系统存储
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.PrivateFileSystemDataSource`
        """
        return self._PlatformFS

    @PlatformFS.setter
    def PlatformFS(self, PlatformFS):
        self._PlatformFS = PlatformFS


    def _deserialize(self, params):
        self._StorageType = params.get("StorageType")
        if params.get("CFSStorage") is not None:
            self._CFSStorage = CFSStorageInfo()
            self._CFSStorage._deserialize(params.get("CFSStorage"))
        if params.get("CFSTurboStorage") is not None:
            self._CFSTurboStorage = CFSTurboStorageInfo()
            self._CFSTurboStorage._deserialize(params.get("CFSTurboStorage"))
        if params.get("DataSourceFS") is not None:
            self._DataSourceFS = DataCenterDataSource()
            self._DataSourceFS._deserialize(params.get("DataSourceFS"))
        if params.get("PlatformFS") is not None:
            self._PlatformFS = PrivateFileSystemDataSource()
            self._PlatformFS._deserialize(params.get("PlatformFS"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CheckpointTrainMeta(AbstractModel):
    """产生 Checkpoint 时由训练脚本输出的训练相关元信息

    """

    def __init__(self):
        r"""
        :param _Step: 训练步数
注意：此字段可能返回 null，表示取不到有效值。
        :type Step: int
        :param _Epoch: 训练 Epoch 数
注意：此字段可能返回 null，表示取不到有效值。
        :type Epoch: float
        :param _Loss: 训练 Loss
注意：此字段可能返回 null，表示取不到有效值。
        :type Loss: float
        :param _LearningRate: 学习率
注意：此字段可能返回 null，表示取不到有效值。
        :type LearningRate: float
        """
        self._Step = None
        self._Epoch = None
        self._Loss = None
        self._LearningRate = None

    @property
    def Step(self):
        """训练步数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Step

    @Step.setter
    def Step(self, Step):
        self._Step = Step

    @property
    def Epoch(self):
        """训练 Epoch 数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Epoch

    @Epoch.setter
    def Epoch(self, Epoch):
        self._Epoch = Epoch

    @property
    def Loss(self):
        """训练 Loss
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Loss

    @Loss.setter
    def Loss(self, Loss):
        self._Loss = Loss

    @property
    def LearningRate(self):
        """学习率
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._LearningRate

    @LearningRate.setter
    def LearningRate(self, LearningRate):
        self._LearningRate = LearningRate


    def _deserialize(self, params):
        self._Step = params.get("Step")
        self._Epoch = params.get("Epoch")
        self._Loss = params.get("Loss")
        self._LearningRate = params.get("LearningRate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Choice(AbstractModel):
    """对话结果

    """

    def __init__(self):
        r"""
        :param _Message: 对话结果
        :type Message: :class:`tencentcloud.tione.v20211111.models.Message`
        :param _FinishReason: 结束理由: stop, length, content_filter, null
        :type FinishReason: str
        :param _Index: 序号
        :type Index: int
        """
        self._Message = None
        self._FinishReason = None
        self._Index = None

    @property
    def Message(self):
        """对话结果
        :rtype: :class:`tencentcloud.tione.v20211111.models.Message`
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message

    @property
    def FinishReason(self):
        """结束理由: stop, length, content_filter, null
        :rtype: str
        """
        return self._FinishReason

    @FinishReason.setter
    def FinishReason(self, FinishReason):
        self._FinishReason = FinishReason

    @property
    def Index(self):
        """序号
        :rtype: int
        """
        return self._Index

    @Index.setter
    def Index(self, Index):
        self._Index = Index


    def _deserialize(self, params):
        if params.get("Message") is not None:
            self._Message = Message()
            self._Message._deserialize(params.get("Message"))
        self._FinishReason = params.get("FinishReason")
        self._Index = params.get("Index")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CodeInfo(AbstractModel):
    """代码信息

    """

    def __init__(self):
        r"""
        :param _Content: 代码文本内容
注意：此字段可能返回 null，表示取不到有效值。
        :type Content: str
        :param _Language: 代码语言
注意：此字段可能返回 null，表示取不到有效值。
        :type Language: str
        """
        self._Content = None
        self._Language = None

    @property
    def Content(self):
        """代码文本内容
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def Language(self):
        """代码语言
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Language

    @Language.setter
    def Language(self, Language):
        self._Language = Language


    def _deserialize(self, params):
        self._Content = params.get("Content")
        self._Language = params.get("Language")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CodeRepoConfig(AbstractModel):
    """代码仓库配置

    """

    def __init__(self):
        r"""
        :param _Id: 代码仓库Id
        :type Id: str
        :param _TargetPath: 代码仓下载目标地址
        :type TargetPath: str
        """
        self._Id = None
        self._TargetPath = None

    @property
    def Id(self):
        """代码仓库Id
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def TargetPath(self):
        """代码仓下载目标地址
        :rtype: str
        """
        return self._TargetPath

    @TargetPath.setter
    def TargetPath(self, TargetPath):
        self._TargetPath = TargetPath


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._TargetPath = params.get("TargetPath")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CodeRepoDetail(AbstractModel):
    """代码仓库详情

    """

    def __init__(self):
        r"""
        :param _Id: 代码仓库ID
        :type Id: str
        :param _Name: 代码仓库名称
        :type Name: str
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        :param _NoSecret: 是否有密钥
        :type NoSecret: bool
        :param _GitConfig: 配置
        :type GitConfig: :class:`tencentcloud.tione.v20211111.models.GitConfig`
        :param _Tags: 标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        """
        self._Id = None
        self._Name = None
        self._CreateTime = None
        self._UpdateTime = None
        self._NoSecret = None
        self._GitConfig = None
        self._Tags = None

    @property
    def Id(self):
        """代码仓库ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """代码仓库名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def NoSecret(self):
        """是否有密钥
        :rtype: bool
        """
        return self._NoSecret

    @NoSecret.setter
    def NoSecret(self, NoSecret):
        self._NoSecret = NoSecret

    @property
    def GitConfig(self):
        """配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.GitConfig`
        """
        return self._GitConfig

    @GitConfig.setter
    def GitConfig(self, GitConfig):
        self._GitConfig = GitConfig

    @property
    def Tags(self):
        """标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._NoSecret = params.get("NoSecret")
        if params.get("GitConfig") is not None:
            self._GitConfig = GitConfig()
            self._GitConfig._deserialize(params.get("GitConfig"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CommonConfig(AbstractModel):
    """自动学习基础配置

    """

    def __init__(self):
        r"""
        :param _SceneId: 场景ID
        :type SceneId: str
        :param _TaskName: 任务名称
        :type TaskName: str
        :param _TaskDescription: 任务描述
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskDescription: str
        :param _Version: 任务版本，出参使用
        :type Version: str
        """
        self._SceneId = None
        self._TaskName = None
        self._TaskDescription = None
        self._Version = None

    @property
    def SceneId(self):
        """场景ID
        :rtype: str
        """
        return self._SceneId

    @SceneId.setter
    def SceneId(self, SceneId):
        self._SceneId = SceneId

    @property
    def TaskName(self):
        """任务名称
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def TaskDescription(self):
        """任务描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskDescription

    @TaskDescription.setter
    def TaskDescription(self, TaskDescription):
        self._TaskDescription = TaskDescription

    @property
    def Version(self):
        """任务版本，出参使用
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version


    def _deserialize(self, params):
        self._SceneId = params.get("SceneId")
        self._TaskName = params.get("TaskName")
        self._TaskDescription = params.get("TaskDescription")
        self._Version = params.get("Version")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComparedPrediction(AbstractModel):
    """对比评测结果信息

    """

    def __init__(self):
        r"""
        :param _GT: 标注结果
        :type GT: str
        :param _Preds: asr预测结果列表
        :type Preds: list of AsrPred
        :param _PredID: 预测id
        :type PredID: int
        :param _DatasetID: 测试数据集名称
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetID: str
        :param _FileRelPath: FileRelPath 文件在数据集中的相对路径，例如"1.wav"
注意：此字段可能返回 null，表示取不到有效值。
        :type FileRelPath: str
        :param _GTFilePath: 在cos中的路径用于下载
注意：此字段可能返回 null，表示取不到有效值。
        :type GTFilePath: str
        :param _AddFlag: 样本是否已经添加
注意：此字段可能返回 null，表示取不到有效值。
        :type AddFlag: bool
        :param _NLPText: 语料
注意：此字段可能返回 null，表示取不到有效值。
        :type NLPText: str
        :param _NLPPreds: nlp推理结果
注意：此字段可能返回 null，表示取不到有效值。
        :type NLPPreds: list of SeniorNLPItem
        :param _NLPGTs: nlp标注结果
注意：此字段可能返回 null，表示取不到有效值。
        :type NLPGTs: list of SeniorNLPItem
        :param _Type: 推理的错误类型
注意：此字段可能返回 null，表示取不到有效值。
        :type Type: str
        """
        self._GT = None
        self._Preds = None
        self._PredID = None
        self._DatasetID = None
        self._FileRelPath = None
        self._GTFilePath = None
        self._AddFlag = None
        self._NLPText = None
        self._NLPPreds = None
        self._NLPGTs = None
        self._Type = None

    @property
    def GT(self):
        """标注结果
        :rtype: str
        """
        return self._GT

    @GT.setter
    def GT(self, GT):
        self._GT = GT

    @property
    def Preds(self):
        """asr预测结果列表
        :rtype: list of AsrPred
        """
        return self._Preds

    @Preds.setter
    def Preds(self, Preds):
        self._Preds = Preds

    @property
    def PredID(self):
        """预测id
        :rtype: int
        """
        return self._PredID

    @PredID.setter
    def PredID(self, PredID):
        self._PredID = PredID

    @property
    def DatasetID(self):
        """测试数据集名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetID

    @DatasetID.setter
    def DatasetID(self, DatasetID):
        self._DatasetID = DatasetID

    @property
    def FileRelPath(self):
        """FileRelPath 文件在数据集中的相对路径，例如"1.wav"
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FileRelPath

    @FileRelPath.setter
    def FileRelPath(self, FileRelPath):
        self._FileRelPath = FileRelPath

    @property
    def GTFilePath(self):
        """在cos中的路径用于下载
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GTFilePath

    @GTFilePath.setter
    def GTFilePath(self, GTFilePath):
        self._GTFilePath = GTFilePath

    @property
    def AddFlag(self):
        """样本是否已经添加
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._AddFlag

    @AddFlag.setter
    def AddFlag(self, AddFlag):
        self._AddFlag = AddFlag

    @property
    def NLPText(self):
        """语料
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._NLPText

    @NLPText.setter
    def NLPText(self, NLPText):
        self._NLPText = NLPText

    @property
    def NLPPreds(self):
        """nlp推理结果
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of SeniorNLPItem
        """
        return self._NLPPreds

    @NLPPreds.setter
    def NLPPreds(self, NLPPreds):
        self._NLPPreds = NLPPreds

    @property
    def NLPGTs(self):
        """nlp标注结果
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of SeniorNLPItem
        """
        return self._NLPGTs

    @NLPGTs.setter
    def NLPGTs(self, NLPGTs):
        self._NLPGTs = NLPGTs

    @property
    def Type(self):
        """推理的错误类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type


    def _deserialize(self, params):
        self._GT = params.get("GT")
        if params.get("Preds") is not None:
            self._Preds = []
            for item in params.get("Preds"):
                obj = AsrPred()
                obj._deserialize(item)
                self._Preds.append(obj)
        self._PredID = params.get("PredID")
        self._DatasetID = params.get("DatasetID")
        self._FileRelPath = params.get("FileRelPath")
        self._GTFilePath = params.get("GTFilePath")
        self._AddFlag = params.get("AddFlag")
        self._NLPText = params.get("NLPText")
        if params.get("NLPPreds") is not None:
            self._NLPPreds = []
            for item in params.get("NLPPreds"):
                obj = SeniorNLPItem()
                obj._deserialize(item)
                self._NLPPreds.append(obj)
        if params.get("NLPGTs") is not None:
            self._NLPGTs = []
            for item in params.get("NLPGTs"):
                obj = SeniorNLPItem()
                obj._deserialize(item)
                self._NLPGTs.append(obj)
        self._Type = params.get("Type")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ComparisonTagFilter(AbstractModel):
    """ComparisonTagFilter过滤参数

    """

    def __init__(self):
        r"""
        :param _Name: 无
        :type Name: str
        :param _Predicate: 无
        :type Predicate: str
        :param _NumberValue: 无
        :type NumberValue: float
        :param _SearchTerm: 无
        :type SearchTerm: str
        :param _Checked: 无
        :type Checked: list of str
        """
        self._Name = None
        self._Predicate = None
        self._NumberValue = None
        self._SearchTerm = None
        self._Checked = None

    @property
    def Name(self):
        """无
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Predicate(self):
        """无
        :rtype: str
        """
        return self._Predicate

    @Predicate.setter
    def Predicate(self, Predicate):
        self._Predicate = Predicate

    @property
    def NumberValue(self):
        """无
        :rtype: float
        """
        return self._NumberValue

    @NumberValue.setter
    def NumberValue(self, NumberValue):
        self._NumberValue = NumberValue

    @property
    def SearchTerm(self):
        """无
        :rtype: str
        """
        return self._SearchTerm

    @SearchTerm.setter
    def SearchTerm(self, SearchTerm):
        self._SearchTerm = SearchTerm

    @property
    def Checked(self):
        """无
        :rtype: list of str
        """
        return self._Checked

    @Checked.setter
    def Checked(self, Checked):
        self._Checked = Checked


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Predicate = params.get("Predicate")
        self._NumberValue = params.get("NumberValue")
        self._SearchTerm = params.get("SearchTerm")
        self._Checked = params.get("Checked")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Container(AbstractModel):
    """容器信息

    """

    def __init__(self):
        r"""
        :param _Name: 名字
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _ContainerId: id
注意：此字段可能返回 null，表示取不到有效值。
        :type ContainerId: str
        :param _Image: 镜像地址
注意：此字段可能返回 null，表示取不到有效值。
        :type Image: str
        :param _Status: 容器状态
注意：此字段可能返回 null，表示取不到有效值。
        :type Status: :class:`tencentcloud.tione.v20211111.models.ContainerStatus`
        """
        self._Name = None
        self._ContainerId = None
        self._Image = None
        self._Status = None

    @property
    def Name(self):
        """名字
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ContainerId(self):
        """id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ContainerId

    @ContainerId.setter
    def ContainerId(self, ContainerId):
        self._ContainerId = ContainerId

    @property
    def Image(self):
        """镜像地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Image

    @Image.setter
    def Image(self, Image):
        self._Image = Image

    @property
    def Status(self):
        """容器状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ContainerStatus`
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._ContainerId = params.get("ContainerId")
        self._Image = params.get("Image")
        if params.get("Status") is not None:
            self._Status = ContainerStatus()
            self._Status._deserialize(params.get("Status"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ContainerStatus(AbstractModel):
    """容器状态

    """

    def __init__(self):
        r"""
        :param _RestartCount: 重启次数
注意：此字段可能返回 null，表示取不到有效值。
        :type RestartCount: int
        :param _State: 状态
注意：此字段可能返回 null，表示取不到有效值。
        :type State: str
        :param _Ready: 是否就绪
注意：此字段可能返回 null，表示取不到有效值。
        :type Ready: bool
        :param _Reason: 状态原因
注意：此字段可能返回 null，表示取不到有效值。
        :type Reason: str
        :param _Message: 容器的错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Message: str
        """
        self._RestartCount = None
        self._State = None
        self._Ready = None
        self._Reason = None
        self._Message = None

    @property
    def RestartCount(self):
        """重启次数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._RestartCount

    @RestartCount.setter
    def RestartCount(self, RestartCount):
        self._RestartCount = RestartCount

    @property
    def State(self):
        """状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State

    @property
    def Ready(self):
        """是否就绪
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._Ready

    @Ready.setter
    def Ready(self, Ready):
        self._Ready = Ready

    @property
    def Reason(self):
        """状态原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Reason

    @Reason.setter
    def Reason(self, Reason):
        self._Reason = Reason

    @property
    def Message(self):
        """容器的错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message


    def _deserialize(self, params):
        self._RestartCount = params.get("RestartCount")
        self._State = params.get("State")
        self._Ready = params.get("Ready")
        self._Reason = params.get("Reason")
        self._Message = params.get("Message")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ContentLengthCount(AbstractModel):
    """数据中心查询文本透视

    """

    def __init__(self):
        r"""
        :param _LengthMin: 长度区间起点，闭区间
注意：此字段可能返回 null，表示取不到有效值。
        :type LengthMin: int
        :param _LengthMax: 长度区间终点，开区间
注意：此字段可能返回 null，表示取不到有效值。
        :type LengthMax: int
        :param _Count: 长度区间内样本出现的次数
注意：此字段可能返回 null，表示取不到有效值。
        :type Count: int
        """
        self._LengthMin = None
        self._LengthMax = None
        self._Count = None

    @property
    def LengthMin(self):
        """长度区间起点，闭区间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._LengthMin

    @LengthMin.setter
    def LengthMin(self, LengthMin):
        self._LengthMin = LengthMin

    @property
    def LengthMax(self):
        """长度区间终点，开区间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._LengthMax

    @LengthMax.setter
    def LengthMax(self, LengthMax):
        self._LengthMax = LengthMax

    @property
    def Count(self):
        """长度区间内样本出现的次数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count


    def _deserialize(self, params):
        self._LengthMin = params.get("LengthMin")
        self._LengthMax = params.get("LengthMax")
        self._Count = params.get("Count")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CopyFlowRequest(AbstractModel):
    """CopyFlow请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ProjectId: 工程ID
        :type ProjectId: str
        :param _FlowName: 工作流名称
        :type FlowName: str
        :param _SourceFlowId: 源工作流Id
        :type SourceFlowId: str
        :param _Description: 工作流描述
        :type Description: str
        """
        self._ProjectId = None
        self._FlowName = None
        self._SourceFlowId = None
        self._Description = None

    @property
    def ProjectId(self):
        """工程ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def FlowName(self):
        """工作流名称
        :rtype: str
        """
        return self._FlowName

    @FlowName.setter
    def FlowName(self, FlowName):
        self._FlowName = FlowName

    @property
    def SourceFlowId(self):
        """源工作流Id
        :rtype: str
        """
        return self._SourceFlowId

    @SourceFlowId.setter
    def SourceFlowId(self, SourceFlowId):
        self._SourceFlowId = SourceFlowId

    @property
    def Description(self):
        """工作流描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._FlowName = params.get("FlowName")
        self._SourceFlowId = params.get("SourceFlowId")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CopyFlowResponse(AbstractModel):
    """CopyFlow返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流的Id
        :type FlowId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowId = None
        self._RequestId = None

    @property
    def FlowId(self):
        """工作流的Id
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._RequestId = params.get("RequestId")


class CopyFromDemoFlowRequest(AbstractModel):
    """CopyFromDemoFlow请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DemoFlowId: 案例工作流ID
        :type DemoFlowId: str
        :param _ProjectId: 工程ID
        :type ProjectId: str
        :param _FlowName: 工作流名称
        :type FlowName: str
        :param _Description: 工作流描述
        :type Description: str
        """
        self._DemoFlowId = None
        self._ProjectId = None
        self._FlowName = None
        self._Description = None

    @property
    def DemoFlowId(self):
        """案例工作流ID
        :rtype: str
        """
        return self._DemoFlowId

    @DemoFlowId.setter
    def DemoFlowId(self, DemoFlowId):
        self._DemoFlowId = DemoFlowId

    @property
    def ProjectId(self):
        """工程ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def FlowName(self):
        """工作流名称
        :rtype: str
        """
        return self._FlowName

    @FlowName.setter
    def FlowName(self, FlowName):
        self._FlowName = FlowName

    @property
    def Description(self):
        """工作流描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._DemoFlowId = params.get("DemoFlowId")
        self._ProjectId = params.get("ProjectId")
        self._FlowName = params.get("FlowName")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CopyFromDemoFlowResponse(AbstractModel):
    """CopyFromDemoFlow返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流ID
        :type FlowId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowId = None
        self._RequestId = None

    @property
    def FlowId(self):
        """工作流ID
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._RequestId = params.get("RequestId")


class CosPathInfo(AbstractModel):
    """cos的路径信息

    """

    def __init__(self):
        r"""
        :param _Bucket: 存储桶
注意：此字段可能返回 null，表示取不到有效值。
        :type Bucket: str
        :param _Region: 所在地域
注意：此字段可能返回 null，表示取不到有效值。
        :type Region: str
        :param _Paths: 路径列表，目前只支持单个
注意：此字段可能返回 null，表示取不到有效值。
        :type Paths: list of str
        :param _Uin: 主用户Uin
注意：此字段可能返回 null，表示取不到有效值。
        :type Uin: str
        :param _SubUin: 子用户UIN
注意：此字段可能返回 null，表示取不到有效值。
        :type SubUin: str
        """
        self._Bucket = None
        self._Region = None
        self._Paths = None
        self._Uin = None
        self._SubUin = None

    @property
    def Bucket(self):
        """存储桶
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Bucket

    @Bucket.setter
    def Bucket(self, Bucket):
        self._Bucket = Bucket

    @property
    def Region(self):
        """所在地域
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def Paths(self):
        """路径列表，目前只支持单个
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._Paths

    @Paths.setter
    def Paths(self, Paths):
        self._Paths = Paths

    @property
    def Uin(self):
        """主用户Uin
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def SubUin(self):
        """子用户UIN
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin


    def _deserialize(self, params):
        self._Bucket = params.get("Bucket")
        self._Region = params.get("Region")
        self._Paths = params.get("Paths")
        self._Uin = params.get("Uin")
        self._SubUin = params.get("SubUin")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAlgoNotebookRequest(AbstractModel):
    """CreateAlgoNotebook请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Name: 名称。不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :type Name: str
        :param _ChargeType: 计算资源付费模式 ，可选值为：
PREPAID：预付费，即包年包月
POSTPAID_BY_HOUR：按小时后付费
        :type ChargeType: str
        :param _ResourceConf: 计算资源配置
        :type ResourceConf: :class:`tencentcloud.tione.v20211111.models.ResourceConf`
        :param _LogEnable: 是否上报日志
        :type LogEnable: bool
        :param _RootAccess: 是否ROOT权限
        :type RootAccess: bool
        :param _AutoStopping: 是否自动停止
        :type AutoStopping: bool
        :param _DirectInternetAccess: 是否访问公网
        :type DirectInternetAccess: bool
        :param _AlgoVersionId: 算法版本ID
        :type AlgoVersionId: str
        :param _ResourceGroupId: 资源组ID(for预付费)
        :type ResourceGroupId: str
        :param _VpcId: Vpc-Id
        :type VpcId: str
        :param _SubnetId: 子网Id
        :type SubnetId: str
        :param _VolumeSourceType: 存储的类型。取值包含： 
    FREE:    预付费的免费存储
    CLOUD_PREMIUM： 高性能云硬盘
    CLOUD_SSD： SSD云硬盘
    CFS:     CFS存储，包含NFS和turbo
        :type VolumeSourceType: str
        :param _VolumeSizeInGB: 存储卷大小，单位GB
        :type VolumeSizeInGB: int
        :param _VolumeSourceCFS: CFS存储的配置
        :type VolumeSourceCFS: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        :param _LogConfig: 日志配置
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _LifecycleScriptId: 生命周期脚本的ID
        :type LifecycleScriptId: str
        :param _DefaultCodeRepoId: 默认GIT存储库的ID
        :type DefaultCodeRepoId: str
        :param _AdditionalCodeRepoIds: 其他GIT存储库的ID，最多3个
        :type AdditionalCodeRepoIds: list of str
        :param _AutomaticStopTime: 自动停止时间，单位小时
        :type AutomaticStopTime: int
        :param _Tags: 标签配置
        :type Tags: list of Tag
        :param _DataConfigs: 数据配置
        :type DataConfigs: list of DataConfig
        :param _UserType: 用户类型
        :type UserType: str
        :param _UserDataInfo: 用户数据信息
        :type UserDataInfo: :class:`tencentcloud.tione.v20211111.models.UserDataInfo`
        """
        self._Name = None
        self._ChargeType = None
        self._ResourceConf = None
        self._LogEnable = None
        self._RootAccess = None
        self._AutoStopping = None
        self._DirectInternetAccess = None
        self._AlgoVersionId = None
        self._ResourceGroupId = None
        self._VpcId = None
        self._SubnetId = None
        self._VolumeSourceType = None
        self._VolumeSizeInGB = None
        self._VolumeSourceCFS = None
        self._LogConfig = None
        self._LifecycleScriptId = None
        self._DefaultCodeRepoId = None
        self._AdditionalCodeRepoIds = None
        self._AutomaticStopTime = None
        self._Tags = None
        self._DataConfigs = None
        self._UserType = None
        self._UserDataInfo = None

    @property
    def Name(self):
        """名称。不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ChargeType(self):
        """计算资源付费模式 ，可选值为：
PREPAID：预付费，即包年包月
POSTPAID_BY_HOUR：按小时后付费
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceConf(self):
        """计算资源配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceConf`
        """
        return self._ResourceConf

    @ResourceConf.setter
    def ResourceConf(self, ResourceConf):
        self._ResourceConf = ResourceConf

    @property
    def LogEnable(self):
        """是否上报日志
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def RootAccess(self):
        """是否ROOT权限
        :rtype: bool
        """
        return self._RootAccess

    @RootAccess.setter
    def RootAccess(self, RootAccess):
        self._RootAccess = RootAccess

    @property
    def AutoStopping(self):
        """是否自动停止
        :rtype: bool
        """
        return self._AutoStopping

    @AutoStopping.setter
    def AutoStopping(self, AutoStopping):
        self._AutoStopping = AutoStopping

    @property
    def DirectInternetAccess(self):
        """是否访问公网
        :rtype: bool
        """
        return self._DirectInternetAccess

    @DirectInternetAccess.setter
    def DirectInternetAccess(self, DirectInternetAccess):
        self._DirectInternetAccess = DirectInternetAccess

    @property
    def AlgoVersionId(self):
        """算法版本ID
        :rtype: str
        """
        return self._AlgoVersionId

    @AlgoVersionId.setter
    def AlgoVersionId(self, AlgoVersionId):
        self._AlgoVersionId = AlgoVersionId

    @property
    def ResourceGroupId(self):
        """资源组ID(for预付费)
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def VpcId(self):
        """Vpc-Id
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """子网Id
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def VolumeSourceType(self):
        """存储的类型。取值包含： 
    FREE:    预付费的免费存储
    CLOUD_PREMIUM： 高性能云硬盘
    CLOUD_SSD： SSD云硬盘
    CFS:     CFS存储，包含NFS和turbo
        :rtype: str
        """
        return self._VolumeSourceType

    @VolumeSourceType.setter
    def VolumeSourceType(self, VolumeSourceType):
        self._VolumeSourceType = VolumeSourceType

    @property
    def VolumeSizeInGB(self):
        """存储卷大小，单位GB
        :rtype: int
        """
        return self._VolumeSizeInGB

    @VolumeSizeInGB.setter
    def VolumeSizeInGB(self, VolumeSizeInGB):
        self._VolumeSizeInGB = VolumeSizeInGB

    @property
    def VolumeSourceCFS(self):
        """CFS存储的配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        """
        return self._VolumeSourceCFS

    @VolumeSourceCFS.setter
    def VolumeSourceCFS(self, VolumeSourceCFS):
        self._VolumeSourceCFS = VolumeSourceCFS

    @property
    def LogConfig(self):
        """日志配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def LifecycleScriptId(self):
        """生命周期脚本的ID
        :rtype: str
        """
        return self._LifecycleScriptId

    @LifecycleScriptId.setter
    def LifecycleScriptId(self, LifecycleScriptId):
        self._LifecycleScriptId = LifecycleScriptId

    @property
    def DefaultCodeRepoId(self):
        """默认GIT存储库的ID
        :rtype: str
        """
        return self._DefaultCodeRepoId

    @DefaultCodeRepoId.setter
    def DefaultCodeRepoId(self, DefaultCodeRepoId):
        self._DefaultCodeRepoId = DefaultCodeRepoId

    @property
    def AdditionalCodeRepoIds(self):
        """其他GIT存储库的ID，最多3个
        :rtype: list of str
        """
        return self._AdditionalCodeRepoIds

    @AdditionalCodeRepoIds.setter
    def AdditionalCodeRepoIds(self, AdditionalCodeRepoIds):
        self._AdditionalCodeRepoIds = AdditionalCodeRepoIds

    @property
    def AutomaticStopTime(self):
        """自动停止时间，单位小时
        :rtype: int
        """
        return self._AutomaticStopTime

    @AutomaticStopTime.setter
    def AutomaticStopTime(self, AutomaticStopTime):
        self._AutomaticStopTime = AutomaticStopTime

    @property
    def Tags(self):
        """标签配置
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def DataConfigs(self):
        """数据配置
        :rtype: list of DataConfig
        """
        return self._DataConfigs

    @DataConfigs.setter
    def DataConfigs(self, DataConfigs):
        self._DataConfigs = DataConfigs

    @property
    def UserType(self):
        """用户类型
        :rtype: str
        """
        return self._UserType

    @UserType.setter
    def UserType(self, UserType):
        self._UserType = UserType

    @property
    def UserDataInfo(self):
        """用户数据信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.UserDataInfo`
        """
        return self._UserDataInfo

    @UserDataInfo.setter
    def UserDataInfo(self, UserDataInfo):
        self._UserDataInfo = UserDataInfo


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._ChargeType = params.get("ChargeType")
        if params.get("ResourceConf") is not None:
            self._ResourceConf = ResourceConf()
            self._ResourceConf._deserialize(params.get("ResourceConf"))
        self._LogEnable = params.get("LogEnable")
        self._RootAccess = params.get("RootAccess")
        self._AutoStopping = params.get("AutoStopping")
        self._DirectInternetAccess = params.get("DirectInternetAccess")
        self._AlgoVersionId = params.get("AlgoVersionId")
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._VolumeSourceType = params.get("VolumeSourceType")
        self._VolumeSizeInGB = params.get("VolumeSizeInGB")
        if params.get("VolumeSourceCFS") is not None:
            self._VolumeSourceCFS = CFSConfig()
            self._VolumeSourceCFS._deserialize(params.get("VolumeSourceCFS"))
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        self._LifecycleScriptId = params.get("LifecycleScriptId")
        self._DefaultCodeRepoId = params.get("DefaultCodeRepoId")
        self._AdditionalCodeRepoIds = params.get("AdditionalCodeRepoIds")
        self._AutomaticStopTime = params.get("AutomaticStopTime")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        if params.get("DataConfigs") is not None:
            self._DataConfigs = []
            for item in params.get("DataConfigs"):
                obj = DataConfig()
                obj._deserialize(item)
                self._DataConfigs.append(obj)
        self._UserType = params.get("UserType")
        if params.get("UserDataInfo") is not None:
            self._UserDataInfo = UserDataInfo()
            self._UserDataInfo._deserialize(params.get("UserDataInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAlgoNotebookResponse(AbstractModel):
    """CreateAlgoNotebook返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: notebook标志
        :type Id: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Id = None
        self._RequestId = None

    @property
    def Id(self):
        """notebook标志
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._RequestId = params.get("RequestId")


class CreateAnnotateTaskRequest(AbstractModel):
    """CreateAnnotateTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DataSetId: 数据集ID
        :type DataSetId: str
        :param _DataSetName: 数据集名称
        :type DataSetName: str
        :param _TaskName: 任务名称
        :type TaskName: str
        :param _ExportFormat: 导出数据格式
        :type ExportFormat: str
        :param _SceneName: 场景名称
        :type SceneName: str
        :param _Labels: 标签配置
        :type Labels: list of PersonalLabel
        :param _TaskNote: 任务备注
        :type TaskNote: str
        :param _CamTags: camtag
        :type CamTags: list of CamTag
        :param _OcrToolType: ocr标注工具类型 1 矩形 2 四点多边形
        :type OcrToolType: int
        :param _OcrTextAttributeAnnotateEnable: ocr是否同时标注文本属性
        :type OcrTextAttributeAnnotateEnable: bool
        :param _OcrAnnotationContentType: ocr任务类型：1-识别，2-智能结构化
        :type OcrAnnotationContentType: int
        :param _EnableAuxiliaryAnnotation: OCR任务：是否启用辅助标注
        :type EnableAuxiliaryAnnotation: bool
        """
        self._DataSetId = None
        self._DataSetName = None
        self._TaskName = None
        self._ExportFormat = None
        self._SceneName = None
        self._Labels = None
        self._TaskNote = None
        self._CamTags = None
        self._OcrToolType = None
        self._OcrTextAttributeAnnotateEnable = None
        self._OcrAnnotationContentType = None
        self._EnableAuxiliaryAnnotation = None

    @property
    def DataSetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DataSetId

    @DataSetId.setter
    def DataSetId(self, DataSetId):
        self._DataSetId = DataSetId

    @property
    def DataSetName(self):
        """数据集名称
        :rtype: str
        """
        return self._DataSetName

    @DataSetName.setter
    def DataSetName(self, DataSetName):
        self._DataSetName = DataSetName

    @property
    def TaskName(self):
        """任务名称
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def ExportFormat(self):
        """导出数据格式
        :rtype: str
        """
        return self._ExportFormat

    @ExportFormat.setter
    def ExportFormat(self, ExportFormat):
        self._ExportFormat = ExportFormat

    @property
    def SceneName(self):
        """场景名称
        :rtype: str
        """
        return self._SceneName

    @SceneName.setter
    def SceneName(self, SceneName):
        self._SceneName = SceneName

    @property
    def Labels(self):
        """标签配置
        :rtype: list of PersonalLabel
        """
        return self._Labels

    @Labels.setter
    def Labels(self, Labels):
        self._Labels = Labels

    @property
    def TaskNote(self):
        """任务备注
        :rtype: str
        """
        return self._TaskNote

    @TaskNote.setter
    def TaskNote(self, TaskNote):
        self._TaskNote = TaskNote

    @property
    def CamTags(self):
        """camtag
        :rtype: list of CamTag
        """
        return self._CamTags

    @CamTags.setter
    def CamTags(self, CamTags):
        self._CamTags = CamTags

    @property
    def OcrToolType(self):
        """ocr标注工具类型 1 矩形 2 四点多边形
        :rtype: int
        """
        return self._OcrToolType

    @OcrToolType.setter
    def OcrToolType(self, OcrToolType):
        self._OcrToolType = OcrToolType

    @property
    def OcrTextAttributeAnnotateEnable(self):
        """ocr是否同时标注文本属性
        :rtype: bool
        """
        return self._OcrTextAttributeAnnotateEnable

    @OcrTextAttributeAnnotateEnable.setter
    def OcrTextAttributeAnnotateEnable(self, OcrTextAttributeAnnotateEnable):
        self._OcrTextAttributeAnnotateEnable = OcrTextAttributeAnnotateEnable

    @property
    def OcrAnnotationContentType(self):
        """ocr任务类型：1-识别，2-智能结构化
        :rtype: int
        """
        return self._OcrAnnotationContentType

    @OcrAnnotationContentType.setter
    def OcrAnnotationContentType(self, OcrAnnotationContentType):
        self._OcrAnnotationContentType = OcrAnnotationContentType

    @property
    def EnableAuxiliaryAnnotation(self):
        """OCR任务：是否启用辅助标注
        :rtype: bool
        """
        return self._EnableAuxiliaryAnnotation

    @EnableAuxiliaryAnnotation.setter
    def EnableAuxiliaryAnnotation(self, EnableAuxiliaryAnnotation):
        self._EnableAuxiliaryAnnotation = EnableAuxiliaryAnnotation


    def _deserialize(self, params):
        self._DataSetId = params.get("DataSetId")
        self._DataSetName = params.get("DataSetName")
        self._TaskName = params.get("TaskName")
        self._ExportFormat = params.get("ExportFormat")
        self._SceneName = params.get("SceneName")
        if params.get("Labels") is not None:
            self._Labels = []
            for item in params.get("Labels"):
                obj = PersonalLabel()
                obj._deserialize(item)
                self._Labels.append(obj)
        self._TaskNote = params.get("TaskNote")
        if params.get("CamTags") is not None:
            self._CamTags = []
            for item in params.get("CamTags"):
                obj = CamTag()
                obj._deserialize(item)
                self._CamTags.append(obj)
        self._OcrToolType = params.get("OcrToolType")
        self._OcrTextAttributeAnnotateEnable = params.get("OcrTextAttributeAnnotateEnable")
        self._OcrAnnotationContentType = params.get("OcrAnnotationContentType")
        self._EnableAuxiliaryAnnotation = params.get("EnableAuxiliaryAnnotation")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAnnotateTaskResponse(AbstractModel):
    """CreateAnnotateTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class CreateAnnotationKeyRequest(AbstractModel):
    """CreateAnnotationKey请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _Key: keypair
        :type Key: :class:`tencentcloud.tione.v20211111.models.KeyPair`
        :param _KeyType: 1	标准 key
2	附加key
        :type KeyType: int
        """
        self._DatasetId = None
        self._Key = None
        self._KeyType = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def Key(self):
        """keypair
        :rtype: :class:`tencentcloud.tione.v20211111.models.KeyPair`
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def KeyType(self):
        """1	标准 key
2	附加key
        :rtype: int
        """
        return self._KeyType

    @KeyType.setter
    def KeyType(self, KeyType):
        self._KeyType = KeyType


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        if params.get("Key") is not None:
            self._Key = KeyPair()
            self._Key._deserialize(params.get("Key"))
        self._KeyType = params.get("KeyType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAnnotationKeyResponse(AbstractModel):
    """CreateAnnotationKey返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Key: keypari
        :type Key: :class:`tencentcloud.tione.v20211111.models.KeyPair`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Key = None
        self._RequestId = None

    @property
    def Key(self):
        """keypari
        :rtype: :class:`tencentcloud.tione.v20211111.models.KeyPair`
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Key") is not None:
            self._Key = KeyPair()
            self._Key._deserialize(params.get("Key"))
        self._RequestId = params.get("RequestId")


class CreateAutoMLEMSTaskRequest(AbstractModel):
    """CreateAutoMLEMSTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 发布模型服务创建任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _ChargeType: 付费模式，PREPAID(包年包月), POSTPAID_BY_HOUR(按量计费)
        :type ChargeType: str
        :param _PublishResourceInfo: 发布模型服务资源分配信息
        :type PublishResourceInfo: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        :param _ResourceGroupId: 包年包月资源组id
        :type ResourceGroupId: str
        :param _MaxServiceHours: 模型服务最大运行小时，不填默认1小时，-1表示永久
        :type MaxServiceHours: int
        :param _UserCosInfo: 用来保存用户测试时的图片
        :type UserCosInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        self._AutoMLTaskId = None
        self._ChargeType = None
        self._PublishResourceInfo = None
        self._ResourceGroupId = None
        self._MaxServiceHours = None
        self._UserCosInfo = None

    @property
    def AutoMLTaskId(self):
        """发布模型服务创建任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def ChargeType(self):
        """付费模式，PREPAID(包年包月), POSTPAID_BY_HOUR(按量计费)
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def PublishResourceInfo(self):
        """发布模型服务资源分配信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        """
        return self._PublishResourceInfo

    @PublishResourceInfo.setter
    def PublishResourceInfo(self, PublishResourceInfo):
        self._PublishResourceInfo = PublishResourceInfo

    @property
    def ResourceGroupId(self):
        """包年包月资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def MaxServiceHours(self):
        """模型服务最大运行小时，不填默认1小时，-1表示永久
        :rtype: int
        """
        return self._MaxServiceHours

    @MaxServiceHours.setter
    def MaxServiceHours(self, MaxServiceHours):
        self._MaxServiceHours = MaxServiceHours

    @property
    def UserCosInfo(self):
        """用来保存用户测试时的图片
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._UserCosInfo

    @UserCosInfo.setter
    def UserCosInfo(self, UserCosInfo):
        self._UserCosInfo = UserCosInfo


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._ChargeType = params.get("ChargeType")
        if params.get("PublishResourceInfo") is not None:
            self._PublishResourceInfo = ResourceConfigInfo()
            self._PublishResourceInfo._deserialize(params.get("PublishResourceInfo"))
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._MaxServiceHours = params.get("MaxServiceHours")
        if params.get("UserCosInfo") is not None:
            self._UserCosInfo = CosPathInfo()
            self._UserCosInfo._deserialize(params.get("UserCosInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAutoMLEMSTaskResponse(AbstractModel):
    """CreateAutoMLEMSTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 发布模型服务创建任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EMSTaskId: 发布模型服务任务id
        :type EMSTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EMSTaskId = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """发布模型服务创建任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EMSTaskId(self):
        """发布模型服务任务id
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EMSTaskId = params.get("EMSTaskId")
        self._RequestId = params.get("RequestId")


class CreateAutoMLTaskEvaluationConfusionMatrixUrlRequest(AbstractModel):
    """CreateAutoMLTaskEvaluationConfusionMatrixUrl请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        :param _Thresholds: 每个标签对应的阈值信息，不填默认所有标签用默认的0.5，填一个表示所有标签的阈值一样
        :type Thresholds: list of float
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._Thresholds = None

    @property
    def AutoMLTaskId(self):
        """评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def Thresholds(self):
        """每个标签对应的阈值信息，不填默认所有标签用默认的0.5，填一个表示所有标签的阈值一样
        :rtype: list of float
        """
        return self._Thresholds

    @Thresholds.setter
    def Thresholds(self, Thresholds):
        self._Thresholds = Thresholds


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._Thresholds = params.get("Thresholds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAutoMLTaskEvaluationConfusionMatrixUrlResponse(AbstractModel):
    """CreateAutoMLTaskEvaluationConfusionMatrixUrl返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ConfusionUrl: 混淆矩阵下载链接，有效期1分钟
注意：此字段可能返回 null，表示取不到有效值。
        :type ConfusionUrl: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ConfusionUrl = None
        self._RequestId = None

    @property
    def ConfusionUrl(self):
        """混淆矩阵下载链接，有效期1分钟
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ConfusionUrl

    @ConfusionUrl.setter
    def ConfusionUrl(self, ConfusionUrl):
        self._ConfusionUrl = ConfusionUrl

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ConfusionUrl = params.get("ConfusionUrl")
        self._RequestId = params.get("RequestId")


class CreateAutoMLTaskRequest(AbstractModel):
    """CreateAutoMLTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _CommonConfig: 基础配置
        :type CommonConfig: :class:`tencentcloud.tione.v20211111.models.CommonConfig`
        :param _DataConfig: 数据配置
        :type DataConfig: :class:`tencentcloud.tione.v20211111.models.MLDataConfig`
        :param _ModelTrainConfig: 模型训练配置
        :type ModelTrainConfig: :class:`tencentcloud.tione.v20211111.models.ModelTrainConfig`
        :param _ModelParamConfig: 模型训练超参数
        :type ModelParamConfig: str
        :param _TrainResourceConfig: 训练资源配置
        :type TrainResourceConfig: :class:`tencentcloud.tione.v20211111.models.TrainResourceConfig`
        :param _TaskSource: 任务来源
        :type TaskSource: str
        :param _Tags: 标签
        :type Tags: list of Tag
        :param _TaskOutputCosInfo: 任务输出路径
        :type TaskOutputCosInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _PublishAutoMLTaskId: 发布新版本任务来源ID
        :type PublishAutoMLTaskId: str
        :param _ModelAccelerateConfig: 模型优化配置
        :type ModelAccelerateConfig: :class:`tencentcloud.tione.v20211111.models.ModelAccelerateConfig`
        :param _CTXCosInfo: 自动学习全流程中可以使用的配置信息，cos内的文件会只读挂载
        :type CTXCosInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _NotAutoEvaluate: 训练完成后是否启动评测任务
        :type NotAutoEvaluate: bool
        """
        self._CommonConfig = None
        self._DataConfig = None
        self._ModelTrainConfig = None
        self._ModelParamConfig = None
        self._TrainResourceConfig = None
        self._TaskSource = None
        self._Tags = None
        self._TaskOutputCosInfo = None
        self._PublishAutoMLTaskId = None
        self._ModelAccelerateConfig = None
        self._CTXCosInfo = None
        self._NotAutoEvaluate = None

    @property
    def CommonConfig(self):
        """基础配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.CommonConfig`
        """
        return self._CommonConfig

    @CommonConfig.setter
    def CommonConfig(self, CommonConfig):
        self._CommonConfig = CommonConfig

    @property
    def DataConfig(self):
        """数据配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.MLDataConfig`
        """
        return self._DataConfig

    @DataConfig.setter
    def DataConfig(self, DataConfig):
        self._DataConfig = DataConfig

    @property
    def ModelTrainConfig(self):
        """模型训练配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelTrainConfig`
        """
        return self._ModelTrainConfig

    @ModelTrainConfig.setter
    def ModelTrainConfig(self, ModelTrainConfig):
        self._ModelTrainConfig = ModelTrainConfig

    @property
    def ModelParamConfig(self):
        """模型训练超参数
        :rtype: str
        """
        return self._ModelParamConfig

    @ModelParamConfig.setter
    def ModelParamConfig(self, ModelParamConfig):
        self._ModelParamConfig = ModelParamConfig

    @property
    def TrainResourceConfig(self):
        """训练资源配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.TrainResourceConfig`
        """
        return self._TrainResourceConfig

    @TrainResourceConfig.setter
    def TrainResourceConfig(self, TrainResourceConfig):
        self._TrainResourceConfig = TrainResourceConfig

    @property
    def TaskSource(self):
        """任务来源
        :rtype: str
        """
        return self._TaskSource

    @TaskSource.setter
    def TaskSource(self, TaskSource):
        self._TaskSource = TaskSource

    @property
    def Tags(self):
        """标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def TaskOutputCosInfo(self):
        """任务输出路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._TaskOutputCosInfo

    @TaskOutputCosInfo.setter
    def TaskOutputCosInfo(self, TaskOutputCosInfo):
        self._TaskOutputCosInfo = TaskOutputCosInfo

    @property
    def PublishAutoMLTaskId(self):
        """发布新版本任务来源ID
        :rtype: str
        """
        return self._PublishAutoMLTaskId

    @PublishAutoMLTaskId.setter
    def PublishAutoMLTaskId(self, PublishAutoMLTaskId):
        self._PublishAutoMLTaskId = PublishAutoMLTaskId

    @property
    def ModelAccelerateConfig(self):
        """模型优化配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelAccelerateConfig`
        """
        return self._ModelAccelerateConfig

    @ModelAccelerateConfig.setter
    def ModelAccelerateConfig(self, ModelAccelerateConfig):
        self._ModelAccelerateConfig = ModelAccelerateConfig

    @property
    def CTXCosInfo(self):
        """自动学习全流程中可以使用的配置信息，cos内的文件会只读挂载
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._CTXCosInfo

    @CTXCosInfo.setter
    def CTXCosInfo(self, CTXCosInfo):
        self._CTXCosInfo = CTXCosInfo

    @property
    def NotAutoEvaluate(self):
        """训练完成后是否启动评测任务
        :rtype: bool
        """
        return self._NotAutoEvaluate

    @NotAutoEvaluate.setter
    def NotAutoEvaluate(self, NotAutoEvaluate):
        self._NotAutoEvaluate = NotAutoEvaluate


    def _deserialize(self, params):
        if params.get("CommonConfig") is not None:
            self._CommonConfig = CommonConfig()
            self._CommonConfig._deserialize(params.get("CommonConfig"))
        if params.get("DataConfig") is not None:
            self._DataConfig = MLDataConfig()
            self._DataConfig._deserialize(params.get("DataConfig"))
        if params.get("ModelTrainConfig") is not None:
            self._ModelTrainConfig = ModelTrainConfig()
            self._ModelTrainConfig._deserialize(params.get("ModelTrainConfig"))
        self._ModelParamConfig = params.get("ModelParamConfig")
        if params.get("TrainResourceConfig") is not None:
            self._TrainResourceConfig = TrainResourceConfig()
            self._TrainResourceConfig._deserialize(params.get("TrainResourceConfig"))
        self._TaskSource = params.get("TaskSource")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        if params.get("TaskOutputCosInfo") is not None:
            self._TaskOutputCosInfo = CosPathInfo()
            self._TaskOutputCosInfo._deserialize(params.get("TaskOutputCosInfo"))
        self._PublishAutoMLTaskId = params.get("PublishAutoMLTaskId")
        if params.get("ModelAccelerateConfig") is not None:
            self._ModelAccelerateConfig = ModelAccelerateConfig()
            self._ModelAccelerateConfig._deserialize(params.get("ModelAccelerateConfig"))
        if params.get("CTXCosInfo") is not None:
            self._CTXCosInfo = CosPathInfo()
            self._CTXCosInfo._deserialize(params.get("CTXCosInfo"))
        self._NotAutoEvaluate = params.get("NotAutoEvaluate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateAutoMLTaskResponse(AbstractModel):
    """CreateAutoMLTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _TrainTaskId: 训练任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskId: str
        :param _Version: 任务版本
        :type Version: str
        :param _AsyncTaskId: 异步任务ID
        :type AsyncTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._TrainTaskId = None
        self._Version = None
        self._AsyncTaskId = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def TrainTaskId(self):
        """训练任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId

    @property
    def Version(self):
        """任务版本
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def AsyncTaskId(self):
        """异步任务ID
        :rtype: str
        """
        return self._AsyncTaskId

    @AsyncTaskId.setter
    def AsyncTaskId(self, AsyncTaskId):
        self._AsyncTaskId = AsyncTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._TrainTaskId = params.get("TrainTaskId")
        self._Version = params.get("Version")
        self._AsyncTaskId = params.get("AsyncTaskId")
        self._RequestId = params.get("RequestId")


class CreateBatchModelAccTasksRequest(AbstractModel):
    """CreateBatchModelAccTasks请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccTaskName: 模型加速任务名称
        :type ModelAccTaskName: str
        :param _BatchModelAccTasks: 批量模型加速任务
        :type BatchModelAccTasks: list of BatchModelAccTask
        :param _ModelOutputPath: 模型加速保存路径
        :type ModelOutputPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _Tags: 标签
        :type Tags: list of Tag
        :param _OptimizationLevel: 优化级别(NO_LOSS/FP16/INT8)，默认FP16
        :type OptimizationLevel: str
        :param _GPUType: GPU卡类型(T4/V100/A10)，默认T4
        :type GPUType: str
        :param _HyperParameter: 专业参数设置
        :type HyperParameter: :class:`tencentcloud.tione.v20211111.models.HyperParameter`
        :param _ResourceGroupId: 资源组id
        :type ResourceGroupId: str
        :param _ResourceGroupName: 资源组名称
        :type ResourceGroupName: str
        :param _ResourceGroupSWType: 资源组类型
        :type ResourceGroupSWType: str
        """
        self._ModelAccTaskName = None
        self._BatchModelAccTasks = None
        self._ModelOutputPath = None
        self._Tags = None
        self._OptimizationLevel = None
        self._GPUType = None
        self._HyperParameter = None
        self._ResourceGroupId = None
        self._ResourceGroupName = None
        self._ResourceGroupSWType = None

    @property
    def ModelAccTaskName(self):
        """模型加速任务名称
        :rtype: str
        """
        return self._ModelAccTaskName

    @ModelAccTaskName.setter
    def ModelAccTaskName(self, ModelAccTaskName):
        self._ModelAccTaskName = ModelAccTaskName

    @property
    def BatchModelAccTasks(self):
        """批量模型加速任务
        :rtype: list of BatchModelAccTask
        """
        return self._BatchModelAccTasks

    @BatchModelAccTasks.setter
    def BatchModelAccTasks(self, BatchModelAccTasks):
        self._BatchModelAccTasks = BatchModelAccTasks

    @property
    def ModelOutputPath(self):
        """模型加速保存路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._ModelOutputPath

    @ModelOutputPath.setter
    def ModelOutputPath(self, ModelOutputPath):
        self._ModelOutputPath = ModelOutputPath

    @property
    def Tags(self):
        """标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def OptimizationLevel(self):
        """优化级别(NO_LOSS/FP16/INT8)，默认FP16
        :rtype: str
        """
        return self._OptimizationLevel

    @OptimizationLevel.setter
    def OptimizationLevel(self, OptimizationLevel):
        self._OptimizationLevel = OptimizationLevel

    @property
    def GPUType(self):
        """GPU卡类型(T4/V100/A10)，默认T4
        :rtype: str
        """
        return self._GPUType

    @GPUType.setter
    def GPUType(self, GPUType):
        self._GPUType = GPUType

    @property
    def HyperParameter(self):
        """专业参数设置
        :rtype: :class:`tencentcloud.tione.v20211111.models.HyperParameter`
        """
        return self._HyperParameter

    @HyperParameter.setter
    def HyperParameter(self, HyperParameter):
        self._HyperParameter = HyperParameter

    @property
    def ResourceGroupId(self):
        """资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceGroupName(self):
        """资源组名称
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def ResourceGroupSWType(self):
        """资源组类型
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType


    def _deserialize(self, params):
        self._ModelAccTaskName = params.get("ModelAccTaskName")
        if params.get("BatchModelAccTasks") is not None:
            self._BatchModelAccTasks = []
            for item in params.get("BatchModelAccTasks"):
                obj = BatchModelAccTask()
                obj._deserialize(item)
                self._BatchModelAccTasks.append(obj)
        if params.get("ModelOutputPath") is not None:
            self._ModelOutputPath = CosPathInfo()
            self._ModelOutputPath._deserialize(params.get("ModelOutputPath"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._OptimizationLevel = params.get("OptimizationLevel")
        self._GPUType = params.get("GPUType")
        if params.get("HyperParameter") is not None:
            self._HyperParameter = HyperParameter()
            self._HyperParameter._deserialize(params.get("HyperParameter"))
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateBatchModelAccTasksResponse(AbstractModel):
    """CreateBatchModelAccTasks返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccTaskIds: 模型优化任务ID列表
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccTaskIds: list of str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ModelAccTaskIds = None
        self._RequestId = None

    @property
    def ModelAccTaskIds(self):
        """模型优化任务ID列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._ModelAccTaskIds

    @ModelAccTaskIds.setter
    def ModelAccTaskIds(self, ModelAccTaskIds):
        self._ModelAccTaskIds = ModelAccTaskIds

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ModelAccTaskIds = params.get("ModelAccTaskIds")
        self._RequestId = params.get("RequestId")


class CreateBatchTaskRequest(AbstractModel):
    """CreateBatchTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _BatchTaskName: 批量预测任务名称，不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :type BatchTaskName: str
        :param _ChargeType: 计费模式，eg：PREPAID 包年包月；POSTPAID_BY_HOUR 按量计费
        :type ChargeType: str
        :param _ResourceConfigInfo: 资源配置
        :type ResourceConfigInfo: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        :param _Outputs: 结果输出存储信息
        :type Outputs: list of DataConfig
        :param _LogEnable: 是否上报日志
        :type LogEnable: bool
        :param _JobType: 工作类型 1:单次 2:周期
        :type JobType: int
        :param _CronInfo: 任务周期描述
        :type CronInfo: :class:`tencentcloud.tione.v20211111.models.CronInfo`
        :param _ResourceGroupId: 包年包月资源组ID
        :type ResourceGroupId: str
        :param _Tags: 标签配置
        :type Tags: list of Tag
        :param _ModelInfo: 服务对应的模型信息，有模型文件时需要填写
        :type ModelInfo: :class:`tencentcloud.tione.v20211111.models.ModelInfo`
        :param _ImageInfo: 自定义镜像信息
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _CodePackage: 代码包
        :type CodePackage: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _StartCmd: 启动命令
        :type StartCmd: str
        :param _DataConfigs: 数据配置
        :type DataConfigs: list of DataConfig
        :param _LogConfig: 日志配置
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _VpcId: VPC Id
        :type VpcId: str
        :param _SubnetId: 子网Id
        :type SubnetId: str
        :param _Remark: 备注
        :type Remark: str
        :param _CallbackUrl: 任务执行结果回调URL，仅支持http和https。回调格式&内容详见: [TI-ONE 接口回调说明](https://cloud.tencent.com/document/product/851/84292)
        :type CallbackUrl: str
        :param _StartCmdBase64: 以Base64方式编码的启动命令。假设启动命令是/app/run.sh，则此处输入参数应该为L2FwcC9ydW4uc2g=。
        :type StartCmdBase64: str
        """
        self._BatchTaskName = None
        self._ChargeType = None
        self._ResourceConfigInfo = None
        self._Outputs = None
        self._LogEnable = None
        self._JobType = None
        self._CronInfo = None
        self._ResourceGroupId = None
        self._Tags = None
        self._ModelInfo = None
        self._ImageInfo = None
        self._CodePackage = None
        self._StartCmd = None
        self._DataConfigs = None
        self._LogConfig = None
        self._VpcId = None
        self._SubnetId = None
        self._Remark = None
        self._CallbackUrl = None
        self._StartCmdBase64 = None

    @property
    def BatchTaskName(self):
        """批量预测任务名称，不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :rtype: str
        """
        return self._BatchTaskName

    @BatchTaskName.setter
    def BatchTaskName(self, BatchTaskName):
        self._BatchTaskName = BatchTaskName

    @property
    def ChargeType(self):
        """计费模式，eg：PREPAID 包年包月；POSTPAID_BY_HOUR 按量计费
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceConfigInfo(self):
        """资源配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        """
        return self._ResourceConfigInfo

    @ResourceConfigInfo.setter
    def ResourceConfigInfo(self, ResourceConfigInfo):
        self._ResourceConfigInfo = ResourceConfigInfo

    @property
    def Outputs(self):
        """结果输出存储信息
        :rtype: list of DataConfig
        """
        return self._Outputs

    @Outputs.setter
    def Outputs(self, Outputs):
        self._Outputs = Outputs

    @property
    def LogEnable(self):
        """是否上报日志
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def JobType(self):
        warnings.warn("parameter `JobType` is deprecated", DeprecationWarning) 

        """工作类型 1:单次 2:周期
        :rtype: int
        """
        return self._JobType

    @JobType.setter
    def JobType(self, JobType):
        warnings.warn("parameter `JobType` is deprecated", DeprecationWarning) 

        self._JobType = JobType

    @property
    def CronInfo(self):
        warnings.warn("parameter `CronInfo` is deprecated", DeprecationWarning) 

        """任务周期描述
        :rtype: :class:`tencentcloud.tione.v20211111.models.CronInfo`
        """
        return self._CronInfo

    @CronInfo.setter
    def CronInfo(self, CronInfo):
        warnings.warn("parameter `CronInfo` is deprecated", DeprecationWarning) 

        self._CronInfo = CronInfo

    @property
    def ResourceGroupId(self):
        """包年包月资源组ID
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def Tags(self):
        """标签配置
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def ModelInfo(self):
        """服务对应的模型信息，有模型文件时需要填写
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelInfo`
        """
        return self._ModelInfo

    @ModelInfo.setter
    def ModelInfo(self, ModelInfo):
        self._ModelInfo = ModelInfo

    @property
    def ImageInfo(self):
        """自定义镜像信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def CodePackage(self):
        """代码包
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._CodePackage

    @CodePackage.setter
    def CodePackage(self, CodePackage):
        self._CodePackage = CodePackage

    @property
    def StartCmd(self):
        warnings.warn("parameter `StartCmd` is deprecated", DeprecationWarning) 

        """启动命令
        :rtype: str
        """
        return self._StartCmd

    @StartCmd.setter
    def StartCmd(self, StartCmd):
        warnings.warn("parameter `StartCmd` is deprecated", DeprecationWarning) 

        self._StartCmd = StartCmd

    @property
    def DataConfigs(self):
        """数据配置
        :rtype: list of DataConfig
        """
        return self._DataConfigs

    @DataConfigs.setter
    def DataConfigs(self, DataConfigs):
        self._DataConfigs = DataConfigs

    @property
    def LogConfig(self):
        """日志配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def VpcId(self):
        """VPC Id
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """子网Id
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def Remark(self):
        """备注
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def CallbackUrl(self):
        """任务执行结果回调URL，仅支持http和https。回调格式&内容详见: [TI-ONE 接口回调说明](https://cloud.tencent.com/document/product/851/84292)
        :rtype: str
        """
        return self._CallbackUrl

    @CallbackUrl.setter
    def CallbackUrl(self, CallbackUrl):
        self._CallbackUrl = CallbackUrl

    @property
    def StartCmdBase64(self):
        """以Base64方式编码的启动命令。假设启动命令是/app/run.sh，则此处输入参数应该为L2FwcC9ydW4uc2g=。
        :rtype: str
        """
        return self._StartCmdBase64

    @StartCmdBase64.setter
    def StartCmdBase64(self, StartCmdBase64):
        self._StartCmdBase64 = StartCmdBase64


    def _deserialize(self, params):
        self._BatchTaskName = params.get("BatchTaskName")
        self._ChargeType = params.get("ChargeType")
        if params.get("ResourceConfigInfo") is not None:
            self._ResourceConfigInfo = ResourceConfigInfo()
            self._ResourceConfigInfo._deserialize(params.get("ResourceConfigInfo"))
        if params.get("Outputs") is not None:
            self._Outputs = []
            for item in params.get("Outputs"):
                obj = DataConfig()
                obj._deserialize(item)
                self._Outputs.append(obj)
        self._LogEnable = params.get("LogEnable")
        self._JobType = params.get("JobType")
        if params.get("CronInfo") is not None:
            self._CronInfo = CronInfo()
            self._CronInfo._deserialize(params.get("CronInfo"))
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        if params.get("ModelInfo") is not None:
            self._ModelInfo = ModelInfo()
            self._ModelInfo._deserialize(params.get("ModelInfo"))
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        if params.get("CodePackage") is not None:
            self._CodePackage = CosPathInfo()
            self._CodePackage._deserialize(params.get("CodePackage"))
        self._StartCmd = params.get("StartCmd")
        if params.get("DataConfigs") is not None:
            self._DataConfigs = []
            for item in params.get("DataConfigs"):
                obj = DataConfig()
                obj._deserialize(item)
                self._DataConfigs.append(obj)
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._Remark = params.get("Remark")
        self._CallbackUrl = params.get("CallbackUrl")
        self._StartCmdBase64 = params.get("StartCmdBase64")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateBatchTaskResponse(AbstractModel):
    """CreateBatchTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _BatchTaskId: 批量预测任务ID
        :type BatchTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._BatchTaskId = None
        self._RequestId = None

    @property
    def BatchTaskId(self):
        """批量预测任务ID
        :rtype: str
        """
        return self._BatchTaskId

    @BatchTaskId.setter
    def BatchTaskId(self, BatchTaskId):
        self._BatchTaskId = BatchTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._BatchTaskId = params.get("BatchTaskId")
        self._RequestId = params.get("RequestId")


class CreateBillingPostpaidSWInstancesRequest(AbstractModel):
    """CreateBillingPostpaidSWInstances请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组ID
        :type ResourceGroupId: str
        :param _CVMInstanceIds: 纳管的CVM节点列表
        :type CVMInstanceIds: list of str
        """
        self._ResourceGroupId = None
        self._CVMInstanceIds = None

    @property
    def ResourceGroupId(self):
        """资源组ID
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def CVMInstanceIds(self):
        """纳管的CVM节点列表
        :rtype: list of str
        """
        return self._CVMInstanceIds

    @CVMInstanceIds.setter
    def CVMInstanceIds(self, CVMInstanceIds):
        self._CVMInstanceIds = CVMInstanceIds


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._CVMInstanceIds = params.get("CVMInstanceIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateBillingPostpaidSWInstancesResponse(AbstractModel):
    """CreateBillingPostpaidSWInstances返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FailedCVMInstances: 纳管失败的节点列表
        :type FailedCVMInstances: list of FailedPostpaidSWInstance
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FailedCVMInstances = None
        self._RequestId = None

    @property
    def FailedCVMInstances(self):
        """纳管失败的节点列表
        :rtype: list of FailedPostpaidSWInstance
        """
        return self._FailedCVMInstances

    @FailedCVMInstances.setter
    def FailedCVMInstances(self, FailedCVMInstances):
        self._FailedCVMInstances = FailedCVMInstances

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FailedCVMInstances") is not None:
            self._FailedCVMInstances = []
            for item in params.get("FailedCVMInstances"):
                obj = FailedPostpaidSWInstance()
                obj._deserialize(item)
                self._FailedCVMInstances.append(obj)
        self._RequestId = params.get("RequestId")


class CreateBillingResourceGroupRequest(AbstractModel):
    """CreateBillingResourceGroup请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Name: 资源组名称
注意：此字段仅支持英文、数字、下划线 _、短横 -，只能以英文、数字开头，长度为60个字
注意：此字段相同地域相同资源组类型下不可同名。
        :type Name: str
        :param _Type: 资源组类型;
枚举值:
空: 通用, TRAIN: 训练, INFERENCE: 推理
        :type Type: str
        :param _TagSet: 资源组标签列表
注意：此字段从腾讯云标签服务获取。
        :type TagSet: list of Tag
        :param _IsBareMetalResourceGroup: 是否为裸金属资源组
        :type IsBareMetalResourceGroup: bool
        :param _IsRdma: 是否为rdma资源组
        :type IsRdma: bool
        :param _SWType: 纳管资源组类型，可填空、NORMAL、SW
        :type SWType: str
        :param _ScheduleStrategy: 调度策略
        :type ScheduleStrategy: str
        :param _GpuPackageEnabled: 是否限制GPU按比例申请资源
        :type GpuPackageEnabled: bool
        """
        self._Name = None
        self._Type = None
        self._TagSet = None
        self._IsBareMetalResourceGroup = None
        self._IsRdma = None
        self._SWType = None
        self._ScheduleStrategy = None
        self._GpuPackageEnabled = None

    @property
    def Name(self):
        """资源组名称
注意：此字段仅支持英文、数字、下划线 _、短横 -，只能以英文、数字开头，长度为60个字
注意：此字段相同地域相同资源组类型下不可同名。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Type(self):
        """资源组类型;
枚举值:
空: 通用, TRAIN: 训练, INFERENCE: 推理
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def TagSet(self):
        """资源组标签列表
注意：此字段从腾讯云标签服务获取。
        :rtype: list of Tag
        """
        return self._TagSet

    @TagSet.setter
    def TagSet(self, TagSet):
        self._TagSet = TagSet

    @property
    def IsBareMetalResourceGroup(self):
        """是否为裸金属资源组
        :rtype: bool
        """
        return self._IsBareMetalResourceGroup

    @IsBareMetalResourceGroup.setter
    def IsBareMetalResourceGroup(self, IsBareMetalResourceGroup):
        self._IsBareMetalResourceGroup = IsBareMetalResourceGroup

    @property
    def IsRdma(self):
        """是否为rdma资源组
        :rtype: bool
        """
        return self._IsRdma

    @IsRdma.setter
    def IsRdma(self, IsRdma):
        self._IsRdma = IsRdma

    @property
    def SWType(self):
        """纳管资源组类型，可填空、NORMAL、SW
        :rtype: str
        """
        return self._SWType

    @SWType.setter
    def SWType(self, SWType):
        self._SWType = SWType

    @property
    def ScheduleStrategy(self):
        """调度策略
        :rtype: str
        """
        return self._ScheduleStrategy

    @ScheduleStrategy.setter
    def ScheduleStrategy(self, ScheduleStrategy):
        self._ScheduleStrategy = ScheduleStrategy

    @property
    def GpuPackageEnabled(self):
        """是否限制GPU按比例申请资源
        :rtype: bool
        """
        return self._GpuPackageEnabled

    @GpuPackageEnabled.setter
    def GpuPackageEnabled(self, GpuPackageEnabled):
        self._GpuPackageEnabled = GpuPackageEnabled


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Type = params.get("Type")
        if params.get("TagSet") is not None:
            self._TagSet = []
            for item in params.get("TagSet"):
                obj = Tag()
                obj._deserialize(item)
                self._TagSet.append(obj)
        self._IsBareMetalResourceGroup = params.get("IsBareMetalResourceGroup")
        self._IsRdma = params.get("IsRdma")
        self._SWType = params.get("SWType")
        self._ScheduleStrategy = params.get("ScheduleStrategy")
        self._GpuPackageEnabled = params.get("GpuPackageEnabled")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateBillingResourceGroupResponse(AbstractModel):
    """CreateBillingResourceGroup返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组id;
        :type ResourceGroupId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ResourceGroupId = None
        self._RequestId = None

    @property
    def ResourceGroupId(self):
        """资源组id;
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._RequestId = params.get("RequestId")


class CreateBillingResourceInstanceRequest(AbstractModel):
    """CreateBillingResourceInstance请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组节点id
        :type ResourceGroupId: str
        """
        self._ResourceGroupId = None

    @property
    def ResourceGroupId(self):
        """资源组节点id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateBillingResourceInstanceResponse(AbstractModel):
    """CreateBillingResourceInstance返回参数结构体

    """

    def __init__(self):
        r"""
        :param _CheckResult: 校验结果 true: 有权限 false 无权限
注意：此字段可能返回 null，表示取不到有效值。
        :type CheckResult: bool
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._CheckResult = None
        self._RequestId = None

    @property
    def CheckResult(self):
        """校验结果 true: 有权限 false 无权限
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._CheckResult

    @CheckResult.setter
    def CheckResult(self, CheckResult):
        self._CheckResult = CheckResult

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._CheckResult = params.get("CheckResult")
        self._RequestId = params.get("RequestId")


class CreateChatWhiteListUserRequest(AbstractModel):
    """CreateChatWhiteListUser请求参数结构体

    """

    def __init__(self):
        r"""
        :param _UinId: 用户Uin
        :type UinId: str
        :param _Level: 用户等级，填'high'或'low'
        :type Level: str
        :param _Remark: 用户备注
        :type Remark: str
        """
        self._UinId = None
        self._Level = None
        self._Remark = None

    @property
    def UinId(self):
        """用户Uin
        :rtype: str
        """
        return self._UinId

    @UinId.setter
    def UinId(self, UinId):
        self._UinId = UinId

    @property
    def Level(self):
        """用户等级，填'high'或'low'
        :rtype: str
        """
        return self._Level

    @Level.setter
    def Level(self, Level):
        self._Level = Level

    @property
    def Remark(self):
        """用户备注
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark


    def _deserialize(self, params):
        self._UinId = params.get("UinId")
        self._Level = params.get("Level")
        self._Remark = params.get("Remark")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateChatWhiteListUserResponse(AbstractModel):
    """CreateChatWhiteListUser返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateCodeRepoRequest(AbstractModel):
    """CreateCodeRepo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Name: 名称。不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :type Name: str
        :param _GitSecret: git的认证信息
        :type GitSecret: :class:`tencentcloud.tione.v20211111.models.GitSecret`
        :param _GitConfig: git的配置信息
        :type GitConfig: :class:`tencentcloud.tione.v20211111.models.GitConfig`
        :param _Tags: 标签信息
        :type Tags: list of Tag
        """
        self._Name = None
        self._GitSecret = None
        self._GitConfig = None
        self._Tags = None

    @property
    def Name(self):
        """名称。不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def GitSecret(self):
        """git的认证信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.GitSecret`
        """
        return self._GitSecret

    @GitSecret.setter
    def GitSecret(self, GitSecret):
        self._GitSecret = GitSecret

    @property
    def GitConfig(self):
        """git的配置信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.GitConfig`
        """
        return self._GitConfig

    @GitConfig.setter
    def GitConfig(self, GitConfig):
        self._GitConfig = GitConfig

    @property
    def Tags(self):
        """标签信息
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._Name = params.get("Name")
        if params.get("GitSecret") is not None:
            self._GitSecret = GitSecret()
            self._GitSecret._deserialize(params.get("GitSecret"))
        if params.get("GitConfig") is not None:
            self._GitConfig = GitConfig()
            self._GitConfig._deserialize(params.get("GitConfig"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateCodeRepoResponse(AbstractModel):
    """CreateCodeRepo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: id值
        :type Id: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Id = None
        self._RequestId = None

    @property
    def Id(self):
        """id值
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._RequestId = params.get("RequestId")


class CreateDataPipelineTaskRequest(AbstractModel):
    """CreateDataPipelineTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskName: 数据构建任务名称，不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :type TaskName: str
        :param _DataPipelines: 数据构建任务pipeline。具体取值范围参考DescribeDataPipelineConfig接口的DataPipelineConfigs返回值
        :type DataPipelines: list of str
        :param _DataScenes: 通用算法任务。具体取值范围参考DescribeDataPipelineConfig接口的DataSceneNodes返回值
        :type DataScenes: list of str
        :param _Description: 当前数据构建任务备注
        :type Description: str
        :param _Tags: 数据构建任务标签
        :type Tags: list of Tag
        """
        self._TaskName = None
        self._DataPipelines = None
        self._DataScenes = None
        self._Description = None
        self._Tags = None

    @property
    def TaskName(self):
        """数据构建任务名称，不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def DataPipelines(self):
        """数据构建任务pipeline。具体取值范围参考DescribeDataPipelineConfig接口的DataPipelineConfigs返回值
        :rtype: list of str
        """
        return self._DataPipelines

    @DataPipelines.setter
    def DataPipelines(self, DataPipelines):
        self._DataPipelines = DataPipelines

    @property
    def DataScenes(self):
        """通用算法任务。具体取值范围参考DescribeDataPipelineConfig接口的DataSceneNodes返回值
        :rtype: list of str
        """
        return self._DataScenes

    @DataScenes.setter
    def DataScenes(self, DataScenes):
        self._DataScenes = DataScenes

    @property
    def Description(self):
        """当前数据构建任务备注
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Tags(self):
        """数据构建任务标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._TaskName = params.get("TaskName")
        self._DataPipelines = params.get("DataPipelines")
        self._DataScenes = params.get("DataScenes")
        self._Description = params.get("Description")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)



class CreateDataPipelineTaskResponse(AbstractModel):
    """CreateDataPipelineTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 数据构建任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """数据构建任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class CreateDatasetDetailTextRequest(AbstractModel):
    """CreateDatasetDetailText请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _FileId: 文件ID
        :type FileId: str
        """
        self._DatasetId = None
        self._FileId = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def FileId(self):
        """文件ID
        :rtype: str
        """
        return self._FileId

    @FileId.setter
    def FileId(self, FileId):
        self._FileId = FileId


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._FileId = params.get("FileId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateDatasetDetailTextResponse(AbstractModel):
    """CreateDatasetDetailText返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 异步任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """异步任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class CreateDatasetRequest(AbstractModel):
    """CreateDataset请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetName: 数据集名称，不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :type DatasetName: str
        :param _DatasetType: 数据集类型:
TYPE_DATASET_TEXT，文本
TYPE_DATASET_IMAGE，图片
TYPE_DATASET_TABLE，表格
TYPE_DATASET_OTHER，其他
        :type DatasetType: str
        :param _StorageDataPath: 数据源cos路径
        :type StorageDataPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _StorageLabelPath: 数据集标签cos存储路径
        :type StorageLabelPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _DatasetTags: 数据集标签
        :type DatasetTags: list of Tag
        :param _AnnotationStatus: 数据集标注状态:
STATUS_NON_ANNOTATED，未标注
STATUS_ANNOTATED，已标注
        :type AnnotationStatus: str
        :param _AnnotationType: 标注类型:
ANNOTATION_TYPE_CLASSIFICATION，图片分类
ANNOTATION_TYPE_DETECTION，目标检测
ANNOTATION_TYPE_SEGMENTATION，图片分割
ANNOTATION_TYPE_TRACKING，目标跟踪
ANNOTATION_TYPE_OCR，OCR
ANNOTATION_TYPE_TEXT_CLASSIFICATION，文本分类
        :type AnnotationType: str
        :param _AnnotationFormat: 标注格式:
ANNOTATION_FORMAT_TI，TI平台格式
ANNOTATION_FORMAT_PASCAL，Pascal Voc
ANNOTATION_FORMAT_COCO，COCO
ANNOTATION_FORMAT_FILE，文件目录结构
ANNOTATION_FORMAT_TEXT_TI，文本类型TI平台格式
ANNOTATION_FORMAT_TXT，文本类型TXT格式
ANNOTATION_FORMAT_CSV，文本类型CSV格式
ANNOTATION_FORMAT_JSON，文本类型JSON格式
        :type AnnotationFormat: str
        :param _SchemaInfos: 表头信息
        :type SchemaInfos: list of SchemaInfo
        :param _IsSchemaExisted: 数据是否存在表头
        :type IsSchemaExisted: bool
        :param _ContentType: 导入文件粒度
TYPE_TEXT_LINE，按行
TYPE_TEXT_FILE，按文件
        :type ContentType: str
        :param _BusinessScene: 业务场景：
SCENE_TIONE，普通TIONE场景
SCENE_THELPER，云小微场景
默认为SCENE_TIONE
        :type BusinessScene: str
        :param _DatasetScene: 数据集建模一级类别。LLM,CV,STRUCTURE,OTHER
        :type DatasetScene: str
        :param _SceneTags: 数据集标签。
        :type SceneTags: list of str
        :param _CFSConfig: 数据集CFS配置。仅支持LLM场景
        :type CFSConfig: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        """
        self._DatasetName = None
        self._DatasetType = None
        self._StorageDataPath = None
        self._StorageLabelPath = None
        self._DatasetTags = None
        self._AnnotationStatus = None
        self._AnnotationType = None
        self._AnnotationFormat = None
        self._SchemaInfos = None
        self._IsSchemaExisted = None
        self._ContentType = None
        self._BusinessScene = None
        self._DatasetScene = None
        self._SceneTags = None
        self._CFSConfig = None
        self._DataSourceConfig = None

    @property
    def DatasetName(self):
        """数据集名称，不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :rtype: str
        """
        return self._DatasetName

    @DatasetName.setter
    def DatasetName(self, DatasetName):
        self._DatasetName = DatasetName

    @property
    def DatasetType(self):
        """数据集类型:
TYPE_DATASET_TEXT，文本
TYPE_DATASET_IMAGE，图片
TYPE_DATASET_TABLE，表格
TYPE_DATASET_OTHER，其他
        :rtype: str
        """
        return self._DatasetType

    @DatasetType.setter
    def DatasetType(self, DatasetType):
        self._DatasetType = DatasetType

    @property
    def StorageDataPath(self):
        """数据源cos路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._StorageDataPath

    @StorageDataPath.setter
    def StorageDataPath(self, StorageDataPath):
        self._StorageDataPath = StorageDataPath

    @property
    def StorageLabelPath(self):
        """数据集标签cos存储路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._StorageLabelPath

    @StorageLabelPath.setter
    def StorageLabelPath(self, StorageLabelPath):
        self._StorageLabelPath = StorageLabelPath

    @property
    def DatasetTags(self):
        """数据集标签
        :rtype: list of Tag
        """
        return self._DatasetTags

    @DatasetTags.setter
    def DatasetTags(self, DatasetTags):
        self._DatasetTags = DatasetTags

    @property
    def AnnotationStatus(self):
        """数据集标注状态:
STATUS_NON_ANNOTATED，未标注
STATUS_ANNOTATED，已标注
        :rtype: str
        """
        return self._AnnotationStatus

    @AnnotationStatus.setter
    def AnnotationStatus(self, AnnotationStatus):
        self._AnnotationStatus = AnnotationStatus

    @property
    def AnnotationType(self):
        """标注类型:
ANNOTATION_TYPE_CLASSIFICATION，图片分类
ANNOTATION_TYPE_DETECTION，目标检测
ANNOTATION_TYPE_SEGMENTATION，图片分割
ANNOTATION_TYPE_TRACKING，目标跟踪
ANNOTATION_TYPE_OCR，OCR
ANNOTATION_TYPE_TEXT_CLASSIFICATION，文本分类
        :rtype: str
        """
        return self._AnnotationType

    @AnnotationType.setter
    def AnnotationType(self, AnnotationType):
        self._AnnotationType = AnnotationType

    @property
    def AnnotationFormat(self):
        """标注格式:
ANNOTATION_FORMAT_TI，TI平台格式
ANNOTATION_FORMAT_PASCAL，Pascal Voc
ANNOTATION_FORMAT_COCO，COCO
ANNOTATION_FORMAT_FILE，文件目录结构
ANNOTATION_FORMAT_TEXT_TI，文本类型TI平台格式
ANNOTATION_FORMAT_TXT，文本类型TXT格式
ANNOTATION_FORMAT_CSV，文本类型CSV格式
ANNOTATION_FORMAT_JSON，文本类型JSON格式
        :rtype: str
        """
        return self._AnnotationFormat

    @AnnotationFormat.setter
    def AnnotationFormat(self, AnnotationFormat):
        self._AnnotationFormat = AnnotationFormat

    @property
    def SchemaInfos(self):
        """表头信息
        :rtype: list of SchemaInfo
        """
        return self._SchemaInfos

    @SchemaInfos.setter
    def SchemaInfos(self, SchemaInfos):
        self._SchemaInfos = SchemaInfos

    @property
    def IsSchemaExisted(self):
        """数据是否存在表头
        :rtype: bool
        """
        return self._IsSchemaExisted

    @IsSchemaExisted.setter
    def IsSchemaExisted(self, IsSchemaExisted):
        self._IsSchemaExisted = IsSchemaExisted

    @property
    def ContentType(self):
        """导入文件粒度
TYPE_TEXT_LINE，按行
TYPE_TEXT_FILE，按文件
        :rtype: str
        """
        return self._ContentType

    @ContentType.setter
    def ContentType(self, ContentType):
        self._ContentType = ContentType

    @property
    def BusinessScene(self):
        """业务场景：
SCENE_TIONE，普通TIONE场景
SCENE_THELPER，云小微场景
默认为SCENE_TIONE
        :rtype: str
        """
        return self._BusinessScene

    @BusinessScene.setter
    def BusinessScene(self, BusinessScene):
        self._BusinessScene = BusinessScene

    @property
    def DatasetScene(self):
        """数据集建模一级类别。LLM,CV,STRUCTURE,OTHER
        :rtype: str
        """
        return self._DatasetScene

    @DatasetScene.setter
    def DatasetScene(self, DatasetScene):
        self._DatasetScene = DatasetScene

    @property
    def SceneTags(self):
        """数据集标签。
        :rtype: list of str
        """
        return self._SceneTags

    @SceneTags.setter
    def SceneTags(self, SceneTags):
        self._SceneTags = SceneTags

    @property
    def CFSConfig(self):
        """数据集CFS配置。仅支持LLM场景
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        """
        return self._CFSConfig

    @CFSConfig.setter
    def CFSConfig(self, CFSConfig):
        self._CFSConfig = CFSConfig

    @property
    def DataSourceConfig(self):
        """数据集DataSourceConfig配置。仅支持LLM场景
        :rtype: :class:`tencentcloud.tione.v20211111.models.DataSourceConfig`
        """
        return self._DataSourceConfig

    @DataSourceConfig.setter
    def DataSourceConfig(self, DataSourceConfig):
        self._DataSourceConfig = DataSourceConfig

    def _deserialize(self, params):
        self._DatasetName = params.get("DatasetName")
        self._DatasetType = params.get("DatasetType")
        if params.get("StorageDataPath") is not None:
            self._StorageDataPath = CosPathInfo()
            self._StorageDataPath._deserialize(params.get("StorageDataPath"))
        if params.get("StorageLabelPath") is not None:
            self._StorageLabelPath = CosPathInfo()
            self._StorageLabelPath._deserialize(params.get("StorageLabelPath"))
        if params.get("DatasetTags") is not None:
            self._DatasetTags = []
            for item in params.get("DatasetTags"):
                obj = Tag()
                obj._deserialize(item)
                self._DatasetTags.append(obj)
        self._AnnotationStatus = params.get("AnnotationStatus")
        self._AnnotationType = params.get("AnnotationType")
        self._AnnotationFormat = params.get("AnnotationFormat")
        if params.get("SchemaInfos") is not None:
            self._SchemaInfos = []
            for item in params.get("SchemaInfos"):
                obj = SchemaInfo()
                obj._deserialize(item)
                self._SchemaInfos.append(obj)
        self._IsSchemaExisted = params.get("IsSchemaExisted")
        self._ContentType = params.get("ContentType")
        self._BusinessScene = params.get("BusinessScene")
        self._DatasetScene = params.get("DatasetScene")
        self._SceneTags = params.get("SceneTags")
        if params.get("CFSConfig") is not None:
            self._CFSConfig = CFSConfig()
            self._CFSConfig._deserialize(params.get("CFSConfig"))
        if params.get("DataSourceConfig") is not None:
            self._DataSourceConfig = DataSourceConfig()
            self._DataSourceConfig._deserialize(params.get("DataSourceConfig"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateDatasetResponse(AbstractModel):
    """CreateDataset返回参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._DatasetId = None
        self._RequestId = None

    @property
    def DatasetId(self):
        """数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._RequestId = params.get("RequestId")


class CreateDatasetTextAnalyzeRequest(AbstractModel):
    """CreateDatasetTextAnalyze请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetIds: 数据集ID列表
        :type DatasetIds: list of str
        :param _TextLanguage: 样本语言:
TEXT_LANGUAGE_ENGLISH 英文
TEXT_LANGUAGE_CHINESE 中文
        :type TextLanguage: str
        """
        self._DatasetIds = None
        self._TextLanguage = None

    @property
    def DatasetIds(self):
        """数据集ID列表
        :rtype: list of str
        """
        return self._DatasetIds

    @DatasetIds.setter
    def DatasetIds(self, DatasetIds):
        self._DatasetIds = DatasetIds

    @property
    def TextLanguage(self):
        """样本语言:
TEXT_LANGUAGE_ENGLISH 英文
TEXT_LANGUAGE_CHINESE 中文
        :rtype: str
        """
        return self._TextLanguage

    @TextLanguage.setter
    def TextLanguage(self, TextLanguage):
        self._TextLanguage = TextLanguage


    def _deserialize(self, params):
        self._DatasetIds = params.get("DatasetIds")
        self._TextLanguage = params.get("TextLanguage")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateDatasetTextAnalyzeResponse(AbstractModel):
    """CreateDatasetTextAnalyze返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 异步任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """异步任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class CreateDemoWhiteRequest(AbstractModel):
    """CreateDemoWhite请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DemoUin: 要添加白名单用户的主账号uin
        :type DemoUin: str
        :param _Type: 任务类型。1为Notebook+Tikit实验；2为自动学习实验
        :type Type: int
        """
        self._DemoUin = None
        self._Type = None

    @property
    def DemoUin(self):
        """要添加白名单用户的主账号uin
        :rtype: str
        """
        return self._DemoUin

    @DemoUin.setter
    def DemoUin(self, DemoUin):
        self._DemoUin = DemoUin

    @property
    def Type(self):
        """任务类型。1为Notebook+Tikit实验；2为自动学习实验
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type


    def _deserialize(self, params):
        self._DemoUin = params.get("DemoUin")
        self._Type = params.get("Type")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateDemoWhiteResponse(AbstractModel):
    """CreateDemoWhite返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateDirectoryRequest(AbstractModel):
    """CreateDirectory请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DataSourceId: CFS ID
        :type DataSourceId: str
        :param _Directory: 文件夹路径
        :type Directory: str
        """
        self._DataSourceId = None
        self._Directory = None

    @property
    def DataSourceId(self):
        """CFS ID
        :rtype: str
        """
        return self._DataSourceId

    @DataSourceId.setter
    def DataSourceId(self, DataSourceId):
        self._DataSourceId = DataSourceId

    @property
    def Directory(self):
        """文件夹路径
        :rtype: str
        """
        return self._Directory

    @Directory.setter
    def Directory(self, Directory):
        self._Directory = Directory


    def _deserialize(self, params):
        self._DataSourceId = params.get("DataSourceId")
        self._Directory = params.get("Directory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateDirectoryResponse(AbstractModel):
    """CreateDirectory返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateExportAutoMLSDKTaskRequest(AbstractModel):
    """CreateExportAutoMLSDKTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _TrainTaskId: 训练任务ID
        :type TrainTaskId: str
        :param _SDKLanguage: SDK语言
        :type SDKLanguage: str
        :param _StorageCosInfo: 存储COS路径
        :type StorageCosInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        self._AutoMLTaskId = None
        self._TrainTaskId = None
        self._SDKLanguage = None
        self._StorageCosInfo = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def TrainTaskId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId

    @property
    def SDKLanguage(self):
        """SDK语言
        :rtype: str
        """
        return self._SDKLanguage

    @SDKLanguage.setter
    def SDKLanguage(self, SDKLanguage):
        self._SDKLanguage = SDKLanguage

    @property
    def StorageCosInfo(self):
        """存储COS路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._StorageCosInfo

    @StorageCosInfo.setter
    def StorageCosInfo(self, StorageCosInfo):
        self._StorageCosInfo = StorageCosInfo


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._TrainTaskId = params.get("TrainTaskId")
        self._SDKLanguage = params.get("SDKLanguage")
        if params.get("StorageCosInfo") is not None:
            self._StorageCosInfo = CosPathInfo()
            self._StorageCosInfo._deserialize(params.get("StorageCosInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateExportAutoMLSDKTaskResponse(AbstractModel):
    """CreateExportAutoMLSDKTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _TrainTaskId: 训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskId: str
        :param _TrainId: 任务式建模ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainId: str
        :param _StorageCosInfo: SDK输出COS路径
注意：此字段可能返回 null，表示取不到有效值。
        :type StorageCosInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._TrainTaskId = None
        self._TrainId = None
        self._StorageCosInfo = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def TrainTaskId(self):
        """训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId

    @property
    def TrainId(self):
        """任务式建模ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainId

    @TrainId.setter
    def TrainId(self, TrainId):
        self._TrainId = TrainId

    @property
    def StorageCosInfo(self):
        """SDK输出COS路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._StorageCosInfo

    @StorageCosInfo.setter
    def StorageCosInfo(self, StorageCosInfo):
        self._StorageCosInfo = StorageCosInfo

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._TrainTaskId = params.get("TrainTaskId")
        self._TrainId = params.get("TrainId")
        if params.get("StorageCosInfo") is not None:
            self._StorageCosInfo = CosPathInfo()
            self._StorageCosInfo._deserialize(params.get("StorageCosInfo"))
        self._RequestId = params.get("RequestId")


class CreateExportRequest(AbstractModel):
    """CreateExport请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Service: 服务类型，TRAIN为任务式建模, NOTEBOOK为Notebook, INFER为在线服务, BATCH为批量预测枚举值：- TRAIN- NOTEBOOK- INFER- BATCH
        :type Service: str
        :param _ServiceId: 服务ID，和Service参数对应，不同Service的服务ID获取方式不同，具体如下：- Service类型为TRAIN：  调用[DescribeTrainingTask接口](/document/product/851/75089)查询训练任务详情，ServiceId为接口返回值中Response.TrainingTaskDetail.LatestInstanceId- Service类型为NOTEBOOK：  调用[DescribeNotebook接口](/document/product/851/95662)查询Notebook详情，ServiceId为接口返回值中Response.NotebookDetail.PodName- Service类型为INFER：  调用[DescribeModelServiceGroup接口](/document/product/851/82285)查询服务组详情，ServiceId为接口返回值中Response.ServiceGroup.Services.ServiceId- Service类型为BATCH：  调用[DescribeBatchTask接口](/document/product/851/80180)查询跑批任务详情，ServiceId为接口返回值中Response.BatchTaskDetail.LatestInstanceId
        :type ServiceId: str
        :param _StartTime: 日志查询开始时间（RFC3339格式的时间字符串），默认值为当前时间的前一个小时
        :type StartTime: str
        :param _EndTime: 日志查询结束时间（RFC3339格式的时间字符串），开始时间和结束时间必须同时填或同时不填，默认值为当前时间
        :type EndTime: str
        :param _Format: 日志导出数据格式。json，csv，默认为csv
        :type Format: str
        :param _PodName: Pod的名称，即需要查询服务对应的Pod，和Service参数对应，不同Service的PodName获取方式不同，具体如下：- Service类型为TRAIN：  调用[DescribeTrainingTaskPods接口](/document/product/851/75088)查询训练任务pod列表，PodName为接口返回值中Response.PodNames- Service类型为NOTEBOOK：  调用[DescribeNotebook接口](/document/product/851/95662)查询Notebook详情，PodName为接口返回值中Response.NotebookDetail.PodName- Service类型为INFER：  调用[DescribeModelService接口](/document/product/851/82287)查询单个服务详情，PodName为接口返回值中Response.Service.ServiceInfo.PodInfos- Service类型为BATCH：  调用[DescribeBatchTask接口](/document/product/851/80180)查询跑批任务详情，PodName为接口返回值中Response.BatchTaskDetail. PodList注：支持结尾通配符*
        :type PodName: str
        :param _JobCategory: 描述任务的类型
        :type JobCategory: str
        :param _InstanceType: 实例的类型
        :type InstanceType: str
        :param _InstanceId: 查实例Id
        :type InstanceId: str
        """
        self._Service = None
        self._ServiceId = None
        self._StartTime = None
        self._EndTime = None
        self._Format = None
        self._PodName = None
        self._JobCategory = None
        self._InstanceType = None
        self._InstanceId = None

    @property
    def Service(self):
        """服务类型，TRAIN为任务式建模, NOTEBOOK为Notebook, INFER为在线服务, BATCH为批量预测枚举值：- TRAIN- NOTEBOOK- INFER- BATCH
        :rtype: str
        """
        return self._Service

    @Service.setter
    def Service(self, Service):
        self._Service = Service

    @property
    def ServiceId(self):
        """服务ID，和Service参数对应，不同Service的服务ID获取方式不同，具体如下：- Service类型为TRAIN：  调用[DescribeTrainingTask接口](/document/product/851/75089)查询训练任务详情，ServiceId为接口返回值中Response.TrainingTaskDetail.LatestInstanceId- Service类型为NOTEBOOK：  调用[DescribeNotebook接口](/document/product/851/95662)查询Notebook详情，ServiceId为接口返回值中Response.NotebookDetail.PodName- Service类型为INFER：  调用[DescribeModelServiceGroup接口](/document/product/851/82285)查询服务组详情，ServiceId为接口返回值中Response.ServiceGroup.Services.ServiceId- Service类型为BATCH：  调用[DescribeBatchTask接口](/document/product/851/80180)查询跑批任务详情，ServiceId为接口返回值中Response.BatchTaskDetail.LatestInstanceId
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId

    @property
    def StartTime(self):
        """日志查询开始时间（RFC3339格式的时间字符串），默认值为当前时间的前一个小时
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """日志查询结束时间（RFC3339格式的时间字符串），开始时间和结束时间必须同时填或同时不填，默认值为当前时间
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Format(self):
        """日志导出数据格式。json，csv，默认为csv
        :rtype: str
        """
        return self._Format

    @Format.setter
    def Format(self, Format):
        self._Format = Format

    @property
    def PodName(self):
        """Pod的名称，即需要查询服务对应的Pod，和Service参数对应，不同Service的PodName获取方式不同，具体如下：- Service类型为TRAIN：  调用[DescribeTrainingTaskPods接口](/document/product/851/75088)查询训练任务pod列表，PodName为接口返回值中Response.PodNames- Service类型为NOTEBOOK：  调用[DescribeNotebook接口](/document/product/851/95662)查询Notebook详情，PodName为接口返回值中Response.NotebookDetail.PodName- Service类型为INFER：  调用[DescribeModelService接口](/document/product/851/82287)查询单个服务详情，PodName为接口返回值中Response.Service.ServiceInfo.PodInfos- Service类型为BATCH：  调用[DescribeBatchTask接口](/document/product/851/80180)查询跑批任务详情，PodName为接口返回值中Response.BatchTaskDetail. PodList注：支持结尾通配符*
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def JobCategory(self):
        """描述任务的类型
        :rtype: str
        """
        return self._JobCategory

    @JobCategory.setter
    def JobCategory(self, JobCategory):
        self._JobCategory = JobCategory

    @property
    def InstanceType(self):
        """实例的类型
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def InstanceId(self):
        """查实例Id
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId


    def _deserialize(self, params):
        self._Service = params.get("Service")
        self._ServiceId = params.get("ServiceId")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._Format = params.get("Format")
        self._PodName = params.get("PodName")
        self._JobCategory = params.get("JobCategory")
        self._InstanceType = params.get("InstanceType")
        self._InstanceId = params.get("InstanceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateExportResponse(AbstractModel):
    """CreateExport返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ExportId: 日志下载任务的ID
        :type ExportId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ExportId = None
        self._RequestId = None

    @property
    def ExportId(self):
        """日志下载任务的ID
        :rtype: str
        """
        return self._ExportId

    @ExportId.setter
    def ExportId(self, ExportId):
        self._ExportId = ExportId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ExportId = params.get("ExportId")
        self._RequestId = params.get("RequestId")


class CreateFilePreviewUrlRequest(AbstractModel):
    """CreateFilePreviewUrl请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DataSourceId: CFS ID
        :type DataSourceId: str
        :param _File: 文件在cfs上的绝对路径
        :type File: str
        """
        self._DataSourceId = None
        self._File = None

    @property
    def DataSourceId(self):
        """CFS ID
        :rtype: str
        """
        return self._DataSourceId

    @DataSourceId.setter
    def DataSourceId(self, DataSourceId):
        self._DataSourceId = DataSourceId

    @property
    def File(self):
        """文件在cfs上的绝对路径
        :rtype: str
        """
        return self._File

    @File.setter
    def File(self, File):
        self._File = File


    def _deserialize(self, params):
        self._DataSourceId = params.get("DataSourceId")
        self._File = params.get("File")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateFilePreviewUrlResponse(AbstractModel):
    """CreateFilePreviewUrl返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Url: 预览路径
注意：此字段可能返回 null，表示取不到有效值。
        :type Url: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Url = None
        self._RequestId = None

    @property
    def Url(self):
        """预览路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Url

    @Url.setter
    def Url(self, Url):
        self._Url = Url

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Url = params.get("Url")
        self._RequestId = params.get("RequestId")


class CreateFlowRequest(AbstractModel):
    """CreateFlow请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ProjectId: 工程ID
        :type ProjectId: str
        :param _FlowName: 工作流名称
        :type FlowName: str
        :param _Description: 工作流描述
        :type Description: str
        """
        self._ProjectId = None
        self._FlowName = None
        self._Description = None

    @property
    def ProjectId(self):
        """工程ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def FlowName(self):
        """工作流名称
        :rtype: str
        """
        return self._FlowName

    @FlowName.setter
    def FlowName(self, FlowName):
        self._FlowName = FlowName

    @property
    def Description(self):
        """工作流描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._FlowName = params.get("FlowName")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateFlowResponse(AbstractModel):
    """CreateFlow返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流的Id
        :type FlowId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowId = None
        self._RequestId = None

    @property
    def FlowId(self):
        """工作流的Id
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._RequestId = params.get("RequestId")


class CreateFlowTensorBoardUrlRequest(AbstractModel):
    """CreateFlowTensorBoardUrl请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunNodeId: 运行节点id
        :type FlowRunNodeId: str
        """
        self._FlowRunNodeId = None

    @property
    def FlowRunNodeId(self):
        """运行节点id
        :rtype: str
        """
        return self._FlowRunNodeId

    @FlowRunNodeId.setter
    def FlowRunNodeId(self, FlowRunNodeId):
        self._FlowRunNodeId = FlowRunNodeId


    def _deserialize(self, params):
        self._FlowRunNodeId = params.get("FlowRunNodeId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateFlowTensorBoardUrlResponse(AbstractModel):
    """CreateFlowTensorBoardUrl返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TensorBoardUrl: 可视化建模的tensorboard url
        :type TensorBoardUrl: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TensorBoardUrl = None
        self._RequestId = None

    @property
    def TensorBoardUrl(self):
        """可视化建模的tensorboard url
        :rtype: str
        """
        return self._TensorBoardUrl

    @TensorBoardUrl.setter
    def TensorBoardUrl(self, TensorBoardUrl):
        self._TensorBoardUrl = TensorBoardUrl

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TensorBoardUrl = params.get("TensorBoardUrl")
        self._RequestId = params.get("RequestId")


class CreateInferGatewayRequest(AbstractModel):
    """CreateInferGateway请求参数结构体

    """

    def __init__(self):
        r"""
        :param _VpcId: 用户推理服务客户端服务所在的VpcId
        :type VpcId: str
        :param _SubnetId: 用户推理服务客户端服务所在的SubnetId
        :type SubnetId: str
        """
        self._VpcId = None
        self._SubnetId = None

    @property
    def VpcId(self):
        """用户推理服务客户端服务所在的VpcId
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """用户推理服务客户端服务所在的SubnetId
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId


    def _deserialize(self, params):
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateInferGatewayResponse(AbstractModel):
    """CreateInferGateway返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateLifecycleScriptRequest(AbstractModel):
    """CreateLifecycleScript请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Name: 生命周期脚本名称。由中英文、数字、下划线"_"、短横"-"组成
        :type Name: str
        :param _CreateScript: 创建脚本，需要base64编码，base64编码后的长度不能超过16384
        :type CreateScript: str
        :param _StartScript: 动脚本, 需要base64编码，base64编码后的长度不能超过16384
        :type StartScript: str
        :param _Tags: 标签信息
        :type Tags: list of Tag
        """
        self._Name = None
        self._CreateScript = None
        self._StartScript = None
        self._Tags = None

    @property
    def Name(self):
        """生命周期脚本名称。由中英文、数字、下划线"_"、短横"-"组成
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def CreateScript(self):
        """创建脚本，需要base64编码，base64编码后的长度不能超过16384
        :rtype: str
        """
        return self._CreateScript

    @CreateScript.setter
    def CreateScript(self, CreateScript):
        self._CreateScript = CreateScript

    @property
    def StartScript(self):
        """动脚本, 需要base64编码，base64编码后的长度不能超过16384
        :rtype: str
        """
        return self._StartScript

    @StartScript.setter
    def StartScript(self, StartScript):
        self._StartScript = StartScript

    @property
    def Tags(self):
        """标签信息
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._CreateScript = params.get("CreateScript")
        self._StartScript = params.get("StartScript")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateLifecycleScriptResponse(AbstractModel):
    """CreateLifecycleScript返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: id值
        :type Id: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Id = None
        self._RequestId = None

    @property
    def Id(self):
        """id值
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._RequestId = params.get("RequestId")


class CreateModelAccelerateTaskRequest(AbstractModel):
    """CreateModelAccelerateTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccTaskName: 模型加速任务名称
        :type ModelAccTaskName: str
        :param _ModelSource: 模型来源（JOB/COS）
        :type ModelSource: str
        :param _ModelInputPath: 模型输入cos路径
        :type ModelInputPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _ModelOutputPath: 模型输出cos路径
        :type ModelOutputPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _AlgorithmFramework: 算法框架（废弃）
        :type AlgorithmFramework: str
        :param _ModelId: 模型ID，模型名称为空时必传
        :type ModelId: str
        :param _ModelName: 模型名称，模型ID为空时必传
        :type ModelName: str
        :param _ModelVersion: 模型版本，必传
        :type ModelVersion: str
        :param _OptimizationLevel: 优化级别 （NO_LOSS/FP16/INT8），默认FP16
        :type OptimizationLevel: str
        :param _ModelInputNum: input节点个数（废弃）
        :type ModelInputNum: int
        :param _ModelInputInfos: input节点信息（废弃）
        :type ModelInputInfos: list of ModelInputInfo
        :param _ModelFormat: 模型格式，必传（TORCH_SCRIPT/DETECTRON2/SAVED_MODEL/FROZEN_GRAPH/MMDETECTION/ONNX/HUGGING_FACE）
        :type ModelFormat: str
        :param _TensorInfos: 模型Tensor信息，必传
        :type TensorInfos: list of str
        :param _HyperParameter: 模型专业参数
        :type HyperParameter: :class:`tencentcloud.tione.v20211111.models.HyperParameter`
        :param _GPUType: GPU类型（T4/V100/A10），默认T4
        :type GPUType: str
        :param _AccEngineVersion: 加速引擎版本
        :type AccEngineVersion: str
        :param _Tags: 标签
        :type Tags: list of Tag
        :param _ModelSignature: SavedModel保存时配置的签名
        :type ModelSignature: str
        :param _FrameworkVersion: 加速引擎对应的框架版本
        :type FrameworkVersion: str
        :param _ResourceGroupId: 资源组Id
        :type ResourceGroupId: str
        :param _ResourceGroupName: 资源组名称
        :type ResourceGroupName: str
        :param _ResourceGroupSWType: 资源组类型
        :type ResourceGroupSWType: str
        """
        self._ModelAccTaskName = None
        self._ModelSource = None
        self._ModelInputPath = None
        self._ModelOutputPath = None
        self._AlgorithmFramework = None
        self._ModelId = None
        self._ModelName = None
        self._ModelVersion = None
        self._OptimizationLevel = None
        self._ModelInputNum = None
        self._ModelInputInfos = None
        self._ModelFormat = None
        self._TensorInfos = None
        self._HyperParameter = None
        self._GPUType = None
        self._AccEngineVersion = None
        self._Tags = None
        self._ModelSignature = None
        self._FrameworkVersion = None
        self._ResourceGroupId = None
        self._ResourceGroupName = None
        self._ResourceGroupSWType = None

    @property
    def ModelAccTaskName(self):
        """模型加速任务名称
        :rtype: str
        """
        return self._ModelAccTaskName

    @ModelAccTaskName.setter
    def ModelAccTaskName(self, ModelAccTaskName):
        self._ModelAccTaskName = ModelAccTaskName

    @property
    def ModelSource(self):
        """模型来源（JOB/COS）
        :rtype: str
        """
        return self._ModelSource

    @ModelSource.setter
    def ModelSource(self, ModelSource):
        self._ModelSource = ModelSource

    @property
    def ModelInputPath(self):
        """模型输入cos路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._ModelInputPath

    @ModelInputPath.setter
    def ModelInputPath(self, ModelInputPath):
        self._ModelInputPath = ModelInputPath

    @property
    def ModelOutputPath(self):
        """模型输出cos路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._ModelOutputPath

    @ModelOutputPath.setter
    def ModelOutputPath(self, ModelOutputPath):
        self._ModelOutputPath = ModelOutputPath

    @property
    def AlgorithmFramework(self):
        """算法框架（废弃）
        :rtype: str
        """
        return self._AlgorithmFramework

    @AlgorithmFramework.setter
    def AlgorithmFramework(self, AlgorithmFramework):
        self._AlgorithmFramework = AlgorithmFramework

    @property
    def ModelId(self):
        """模型ID，模型名称为空时必传
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def ModelName(self):
        """模型名称，模型ID为空时必传
        :rtype: str
        """
        return self._ModelName

    @ModelName.setter
    def ModelName(self, ModelName):
        self._ModelName = ModelName

    @property
    def ModelVersion(self):
        """模型版本，必传
        :rtype: str
        """
        return self._ModelVersion

    @ModelVersion.setter
    def ModelVersion(self, ModelVersion):
        self._ModelVersion = ModelVersion

    @property
    def OptimizationLevel(self):
        """优化级别 （NO_LOSS/FP16/INT8），默认FP16
        :rtype: str
        """
        return self._OptimizationLevel

    @OptimizationLevel.setter
    def OptimizationLevel(self, OptimizationLevel):
        self._OptimizationLevel = OptimizationLevel

    @property
    def ModelInputNum(self):
        """input节点个数（废弃）
        :rtype: int
        """
        return self._ModelInputNum

    @ModelInputNum.setter
    def ModelInputNum(self, ModelInputNum):
        self._ModelInputNum = ModelInputNum

    @property
    def ModelInputInfos(self):
        """input节点信息（废弃）
        :rtype: list of ModelInputInfo
        """
        return self._ModelInputInfos

    @ModelInputInfos.setter
    def ModelInputInfos(self, ModelInputInfos):
        self._ModelInputInfos = ModelInputInfos

    @property
    def ModelFormat(self):
        """模型格式，必传（TORCH_SCRIPT/DETECTRON2/SAVED_MODEL/FROZEN_GRAPH/MMDETECTION/ONNX/HUGGING_FACE）
        :rtype: str
        """
        return self._ModelFormat

    @ModelFormat.setter
    def ModelFormat(self, ModelFormat):
        self._ModelFormat = ModelFormat

    @property
    def TensorInfos(self):
        """模型Tensor信息，必传
        :rtype: list of str
        """
        return self._TensorInfos

    @TensorInfos.setter
    def TensorInfos(self, TensorInfos):
        self._TensorInfos = TensorInfos

    @property
    def HyperParameter(self):
        """模型专业参数
        :rtype: :class:`tencentcloud.tione.v20211111.models.HyperParameter`
        """
        return self._HyperParameter

    @HyperParameter.setter
    def HyperParameter(self, HyperParameter):
        self._HyperParameter = HyperParameter

    @property
    def GPUType(self):
        """GPU类型（T4/V100/A10），默认T4
        :rtype: str
        """
        return self._GPUType

    @GPUType.setter
    def GPUType(self, GPUType):
        self._GPUType = GPUType

    @property
    def AccEngineVersion(self):
        """加速引擎版本
        :rtype: str
        """
        return self._AccEngineVersion

    @AccEngineVersion.setter
    def AccEngineVersion(self, AccEngineVersion):
        self._AccEngineVersion = AccEngineVersion

    @property
    def Tags(self):
        """标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def ModelSignature(self):
        """SavedModel保存时配置的签名
        :rtype: str
        """
        return self._ModelSignature

    @ModelSignature.setter
    def ModelSignature(self, ModelSignature):
        self._ModelSignature = ModelSignature

    @property
    def FrameworkVersion(self):
        """加速引擎对应的框架版本
        :rtype: str
        """
        return self._FrameworkVersion

    @FrameworkVersion.setter
    def FrameworkVersion(self, FrameworkVersion):
        self._FrameworkVersion = FrameworkVersion

    @property
    def ResourceGroupId(self):
        """资源组Id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceGroupName(self):
        """资源组名称
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def ResourceGroupSWType(self):
        """资源组类型
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType


    def _deserialize(self, params):
        self._ModelAccTaskName = params.get("ModelAccTaskName")
        self._ModelSource = params.get("ModelSource")
        if params.get("ModelInputPath") is not None:
            self._ModelInputPath = CosPathInfo()
            self._ModelInputPath._deserialize(params.get("ModelInputPath"))
        if params.get("ModelOutputPath") is not None:
            self._ModelOutputPath = CosPathInfo()
            self._ModelOutputPath._deserialize(params.get("ModelOutputPath"))
        self._AlgorithmFramework = params.get("AlgorithmFramework")
        self._ModelId = params.get("ModelId")
        self._ModelName = params.get("ModelName")
        self._ModelVersion = params.get("ModelVersion")
        self._OptimizationLevel = params.get("OptimizationLevel")
        self._ModelInputNum = params.get("ModelInputNum")
        if params.get("ModelInputInfos") is not None:
            self._ModelInputInfos = []
            for item in params.get("ModelInputInfos"):
                obj = ModelInputInfo()
                obj._deserialize(item)
                self._ModelInputInfos.append(obj)
        self._ModelFormat = params.get("ModelFormat")
        self._TensorInfos = params.get("TensorInfos")
        if params.get("HyperParameter") is not None:
            self._HyperParameter = HyperParameter()
            self._HyperParameter._deserialize(params.get("HyperParameter"))
        self._GPUType = params.get("GPUType")
        self._AccEngineVersion = params.get("AccEngineVersion")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._ModelSignature = params.get("ModelSignature")
        self._FrameworkVersion = params.get("FrameworkVersion")
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateModelAccelerateTaskResponse(AbstractModel):
    """CreateModelAccelerateTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccTaskId: 模型加速任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccTaskId: str
        :param _AsyncTaskId: 异步任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type AsyncTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ModelAccTaskId = None
        self._AsyncTaskId = None
        self._RequestId = None

    @property
    def ModelAccTaskId(self):
        """模型加速任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelAccTaskId

    @ModelAccTaskId.setter
    def ModelAccTaskId(self, ModelAccTaskId):
        self._ModelAccTaskId = ModelAccTaskId

    @property
    def AsyncTaskId(self):
        """异步任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AsyncTaskId

    @AsyncTaskId.setter
    def AsyncTaskId(self, AsyncTaskId):
        self._AsyncTaskId = AsyncTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ModelAccTaskId = params.get("ModelAccTaskId")
        self._AsyncTaskId = params.get("AsyncTaskId")
        self._RequestId = params.get("RequestId")


class CreateModelRequest(AbstractModel):
    """CreateModel请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Name: 模型名称
        :type Name: str
        :param _ModelStorageInfo: 模型存储信息
        :type ModelStorageInfo: :class:`tencentcloud.tione.v20211111.models.ModelStorageInfo`
        :param _Tags: 模型资源标签
        :type Tags: list of Tag
        :param _ModelTags: 模型标签列表
        :type ModelTags: list of str
        """
        self._Name = None
        self._ModelStorageInfo = None
        self._Tags = None
        self._ModelTags = None

    @property
    def Name(self):
        """模型名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ModelStorageInfo(self):
        """模型存储信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelStorageInfo`
        """
        return self._ModelStorageInfo

    @ModelStorageInfo.setter
    def ModelStorageInfo(self, ModelStorageInfo):
        self._ModelStorageInfo = ModelStorageInfo

    @property
    def Tags(self):
        """模型资源标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def ModelTags(self):
        """模型标签列表
        :rtype: list of str
        """
        return self._ModelTags

    @ModelTags.setter
    def ModelTags(self, ModelTags):
        self._ModelTags = ModelTags


    def _deserialize(self, params):
        self._Name = params.get("Name")
        if params.get("ModelStorageInfo") is not None:
            self._ModelStorageInfo = ModelStorageInfo()
            self._ModelStorageInfo._deserialize(params.get("ModelStorageInfo"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._ModelTags = params.get("ModelTags")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateModelResponse(AbstractModel):
    """CreateModel返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelId: 模型Id
        :type ModelId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ModelId = None
        self._RequestId = None

    @property
    def ModelId(self):
        """模型Id
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ModelId = params.get("ModelId")
        self._RequestId = params.get("RequestId")


class CreateModelServicePodUrlRequest(AbstractModel):
    """CreateModelServicePodUrl请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceId: 服务id
        :type ServiceId: str
        :param _PodName: pod 名称
        :type PodName: str
        """
        self._ServiceId = None
        self._PodName = None

    @property
    def ServiceId(self):
        """服务id
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId

    @property
    def PodName(self):
        """pod 名称
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName


    def _deserialize(self, params):
        self._ServiceId = params.get("ServiceId")
        self._PodName = params.get("PodName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateModelServicePodUrlResponse(AbstractModel):
    """CreateModelServicePodUrl返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Url: pod 登陆url
        :type Url: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Url = None
        self._RequestId = None

    @property
    def Url(self):
        """pod 登陆url
        :rtype: str
        """
        return self._Url

    @Url.setter
    def Url(self, Url):
        self._Url = Url

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Url = params.get("Url")
        self._RequestId = params.get("RequestId")


class CreateModelServiceRequest(AbstractModel):
    """CreateModelService请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceGroupId: 新增版本时需要填写
        :type ServiceGroupId: str
        :param _ServiceGroupName: 不超过60个字，仅支持英文、数字、下划线"_"、短横"-"，只能以英文、数字开头
        :type ServiceGroupName: str
        :param _ServiceDescription: 模型服务的描述
        :type ServiceDescription: str
        :param _ChargeType: 付费模式,有 PREPAID （包年包月）和 POSTPAID_BY_HOUR（按量付费）
        :type ChargeType: str
        :param _ResourceGroupId: 预付费模式下所属的资源组id，同服务组下唯一
        :type ResourceGroupId: str
        :param _ModelInfo: 模型信息，需要挂载模型时填写
        :type ModelInfo: :class:`tencentcloud.tione.v20211111.models.ModelInfo`
        :param _ImageInfo: 镜像信息，配置服务运行所需的镜像地址等信息
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _Env: 环境变量，可选参数，用于配置容器中的环境变量
        :type Env: list of EnvVar
        :param _Resources: 资源描述，指定包年包月模式下的cpu,mem,gpu等信息，后付费无需填写
        :type Resources: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        :param _InstanceType: 使用DescribeBillingSpecs接口返回的规格列表中的值，或者参考实例列表:
TI.S.MEDIUM.POST	2C4G
TI.S.LARGE.POST	4C8G
TI.S.2XLARGE16.POST	8C16G
TI.S.2XLARGE32.POST	8C32G
TI.S.4XLARGE32.POST	16C32G
TI.S.4XLARGE64.POST	16C64G
TI.S.6XLARGE48.POST	24C48G
TI.S.6XLARGE96.POST	24C96G
TI.S.8XLARGE64.POST	32C64G
TI.S.8XLARGE128.POST 32C128G
TI.GN7.LARGE20.POST	4C20G T4*1/4
TI.GN7.2XLARGE40.POST	10C40G T4*1/2
TI.GN7.2XLARGE32.POST	8C32G T4*1
TI.GN7.5XLARGE80.POST	20C80G T4*1
TI.GN7.8XLARGE128.POST	32C128G T4*1
TI.GN7.10XLARGE160.POST	40C160G T4*2
TI.GN7.20XLARGE320.POST	80C320G T4*4
        :type InstanceType: str
        :param _ScaleMode: 扩缩容类型 支持：自动 - "AUTO", 手动 - "MANUAL",默认为MANUAL
        :type ScaleMode: str
        :param _Replicas: 实例数量, 不同计费模式和调节模式下对应关系如下
PREPAID 和 POSTPAID_BY_HOUR:
手动调节模式下对应 实例数量
自动调节模式下对应 基于时间的默认策略的实例数量
HYBRID_PAID:
后付费实例手动调节模式下对应 实例数量
后付费实例自动调节模式下对应 时间策略的默认策略的实例数量
        :type Replicas: int
        :param _HorizontalPodAutoscaler: 自动伸缩信息
        :type HorizontalPodAutoscaler: :class:`tencentcloud.tione.v20211111.models.HorizontalPodAutoscaler`
        :param _LogEnable: 是否开启日志投递，开启后需填写配置投递到指定cls
        :type LogEnable: bool
        :param _LogConfig: 日志配置，需要投递服务日志到指定cls时填写
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _AuthorizationEnable: 是否开启接口鉴权，开启后自动生成token信息，访问需要token鉴权
        :type AuthorizationEnable: bool
        :param _Tags: 腾讯云标签
        :type Tags: list of Tag
        :param _NewVersion: 是否新增版本
        :type NewVersion: bool
        :param _CronScaleJobs: 定时任务配置，使用定时策略时填写
        :type CronScaleJobs: list of CronScaleJob
        :param _ScaleStrategy: 自动伸缩策略配置 HPA : 通过HPA进行弹性伸缩 CRON 通过定时任务进行伸缩
        :type ScaleStrategy: str
        :param _HybridBillingPrepaidReplicas: 计费模式[HYBRID_PAID]时生效, 用于标识混合计费模式下的预付费实例数
        :type HybridBillingPrepaidReplicas: int
        :param _CreateSource: [AUTO_ML 自动学习，自动学习正式发布 AUTO_ML_FORMAL, DEFAULT 默认]
        :type CreateSource: str
        :param _ModelHotUpdateEnable: 是否开启模型的热更新。默认不开启
        :type ModelHotUpdateEnable: bool
        :param _ScheduledAction: 定时停止配置
        :type ScheduledAction: :class:`tencentcloud.tione.v20211111.models.ScheduledAction`
        :param _VolumeMount: 挂载配置，目前只支持CFS
        :type VolumeMount: :class:`tencentcloud.tione.v20211111.models.VolumeMount`
        :param _ServiceLimit: 服务限速限流相关配置
        :type ServiceLimit: :class:`tencentcloud.tione.v20211111.models.ServiceLimit`
        :param _CallbackUrl: 回调地址，用于回调创建服务状态信息，回调格式&内容详情见：[TI-ONE 接口回调说明](https://cloud.tencent.com/document/product/851/84292)
        :type CallbackUrl: str
        :param _ModelTurboEnable: 是否开启模型的加速, 仅对StableDiffusion(动态加速)格式的模型有效。
        :type ModelTurboEnable: bool
        :param _ServiceCategory: 服务分类
        :type ServiceCategory: str
        :param _Command: 服务的启动命令，如遇特殊字符导致配置失败，可使用CommandBase64参数
        :type Command: str
        :param _ServiceEIP: 是否开启TIONE内网访问外部，此功能仅支持后付费机型与从TIONE平台购买的预付费机型；使用从CVM选择资源组时此配置不生效。
        :type ServiceEIP: :class:`tencentcloud.tione.v20211111.models.ServiceEIP`
        :param _CommandBase64: 服务的启动命令，以base64格式进行输入，与Command同时配置时，仅当前参数生效
        :type CommandBase64: str
        :param _ServicePort: 服务端口，仅在非内置镜像时生效，默认8501。不支持输入8501-8510,6006,9092
        :type ServicePort: int
        :param _SourceTaskInfo: 源任务信息
        :type SourceTaskInfo: :class:`tencentcloud.tione.v20211111.models.SourceTaskInfo`
        :param _DeployType: 服务的部署类型 [STANDARD 标准部署，DIST 分布式多机部署] 默认STANDARD
        :type DeployType: str
        :param _InstancePerReplicas: 单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :type InstancePerReplicas: int
        :param _MaxRetryTimes: 服务首次启动时的最大重试次数，1以下表示不限制
        :type MaxRetryTimes: int
        :param _TerminationGracePeriodSeconds: 30
        :type TerminationGracePeriodSeconds: int
        :param _PreStopCommand: ["sleep","60"]
        :type PreStopCommand: list of str
        :param _Roles: 多角色配置
        :type Roles: list of RoleSpec
        """
        self._ServiceGroupId = None
        self._ServiceGroupName = None
        self._ServiceDescription = None
        self._ChargeType = None
        self._ResourceGroupId = None
        self._ModelInfo = None
        self._ImageInfo = None
        self._Env = None
        self._Resources = None
        self._InstanceType = None
        self._ScaleMode = None
        self._Replicas = None
        self._HorizontalPodAutoscaler = None
        self._LogEnable = None
        self._LogConfig = None
        self._AuthorizationEnable = None
        self._Tags = None
        self._NewVersion = None
        self._CronScaleJobs = None
        self._ScaleStrategy = None
        self._HybridBillingPrepaidReplicas = None
        self._CreateSource = None
        self._ModelHotUpdateEnable = None
        self._ScheduledAction = None
        self._VolumeMount = None
        self._ServiceLimit = None
        self._CallbackUrl = None
        self._ModelTurboEnable = None
        self._ServiceCategory = None
        self._Command = None
        self._ServiceEIP = None
        self._CommandBase64 = None
        self._ServicePort = None
        self._SourceTaskInfo = None
        self._DeployType = None
        self._InstancePerReplicas = None
        self._MaxRetryTimes = None
        self._TerminationGracePeriodSeconds = None
        self._PreStopCommand = None
        self._Roles = None

    @property
    def ServiceGroupId(self):
        """新增版本时需要填写
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def ServiceGroupName(self):
        """不超过60个字，仅支持英文、数字、下划线"_"、短横"-"，只能以英文、数字开头
        :rtype: str
        """
        return self._ServiceGroupName

    @ServiceGroupName.setter
    def ServiceGroupName(self, ServiceGroupName):
        self._ServiceGroupName = ServiceGroupName

    @property
    def ServiceDescription(self):
        """模型服务的描述
        :rtype: str
        """
        return self._ServiceDescription

    @ServiceDescription.setter
    def ServiceDescription(self, ServiceDescription):
        self._ServiceDescription = ServiceDescription

    @property
    def ChargeType(self):
        """付费模式,有 PREPAID （包年包月）和 POSTPAID_BY_HOUR（按量付费）
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceGroupId(self):
        """预付费模式下所属的资源组id，同服务组下唯一
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ModelInfo(self):
        """模型信息，需要挂载模型时填写
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelInfo`
        """
        return self._ModelInfo

    @ModelInfo.setter
    def ModelInfo(self, ModelInfo):
        self._ModelInfo = ModelInfo

    @property
    def ImageInfo(self):
        """镜像信息，配置服务运行所需的镜像地址等信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def Env(self):
        """环境变量，可选参数，用于配置容器中的环境变量
        :rtype: list of EnvVar
        """
        return self._Env

    @Env.setter
    def Env(self, Env):
        self._Env = Env

    @property
    def Resources(self):
        """资源描述，指定包年包月模式下的cpu,mem,gpu等信息，后付费无需填写
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        """
        return self._Resources

    @Resources.setter
    def Resources(self, Resources):
        self._Resources = Resources

    @property
    def InstanceType(self):
        """使用DescribeBillingSpecs接口返回的规格列表中的值，或者参考实例列表:
TI.S.MEDIUM.POST	2C4G
TI.S.LARGE.POST	4C8G
TI.S.2XLARGE16.POST	8C16G
TI.S.2XLARGE32.POST	8C32G
TI.S.4XLARGE32.POST	16C32G
TI.S.4XLARGE64.POST	16C64G
TI.S.6XLARGE48.POST	24C48G
TI.S.6XLARGE96.POST	24C96G
TI.S.8XLARGE64.POST	32C64G
TI.S.8XLARGE128.POST 32C128G
TI.GN7.LARGE20.POST	4C20G T4*1/4
TI.GN7.2XLARGE40.POST	10C40G T4*1/2
TI.GN7.2XLARGE32.POST	8C32G T4*1
TI.GN7.5XLARGE80.POST	20C80G T4*1
TI.GN7.8XLARGE128.POST	32C128G T4*1
TI.GN7.10XLARGE160.POST	40C160G T4*2
TI.GN7.20XLARGE320.POST	80C320G T4*4
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def ScaleMode(self):
        """扩缩容类型 支持：自动 - "AUTO", 手动 - "MANUAL",默认为MANUAL
        :rtype: str
        """
        return self._ScaleMode

    @ScaleMode.setter
    def ScaleMode(self, ScaleMode):
        self._ScaleMode = ScaleMode

    @property
    def Replicas(self):
        """实例数量, 不同计费模式和调节模式下对应关系如下
PREPAID 和 POSTPAID_BY_HOUR:
手动调节模式下对应 实例数量
自动调节模式下对应 基于时间的默认策略的实例数量
HYBRID_PAID:
后付费实例手动调节模式下对应 实例数量
后付费实例自动调节模式下对应 时间策略的默认策略的实例数量
        :rtype: int
        """
        return self._Replicas

    @Replicas.setter
    def Replicas(self, Replicas):
        self._Replicas = Replicas

    @property
    def HorizontalPodAutoscaler(self):
        """自动伸缩信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.HorizontalPodAutoscaler`
        """
        return self._HorizontalPodAutoscaler

    @HorizontalPodAutoscaler.setter
    def HorizontalPodAutoscaler(self, HorizontalPodAutoscaler):
        self._HorizontalPodAutoscaler = HorizontalPodAutoscaler

    @property
    def LogEnable(self):
        """是否开启日志投递，开启后需填写配置投递到指定cls
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def LogConfig(self):
        """日志配置，需要投递服务日志到指定cls时填写
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def AuthorizationEnable(self):
        """是否开启接口鉴权，开启后自动生成token信息，访问需要token鉴权
        :rtype: bool
        """
        return self._AuthorizationEnable

    @AuthorizationEnable.setter
    def AuthorizationEnable(self, AuthorizationEnable):
        self._AuthorizationEnable = AuthorizationEnable

    @property
    def Tags(self):
        """腾讯云标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def NewVersion(self):
        """是否新增版本
        :rtype: bool
        """
        return self._NewVersion

    @NewVersion.setter
    def NewVersion(self, NewVersion):
        self._NewVersion = NewVersion

    @property
    def CronScaleJobs(self):
        """定时任务配置，使用定时策略时填写
        :rtype: list of CronScaleJob
        """
        return self._CronScaleJobs

    @CronScaleJobs.setter
    def CronScaleJobs(self, CronScaleJobs):
        self._CronScaleJobs = CronScaleJobs

    @property
    def ScaleStrategy(self):
        """自动伸缩策略配置 HPA : 通过HPA进行弹性伸缩 CRON 通过定时任务进行伸缩
        :rtype: str
        """
        return self._ScaleStrategy

    @ScaleStrategy.setter
    def ScaleStrategy(self, ScaleStrategy):
        self._ScaleStrategy = ScaleStrategy

    @property
    def HybridBillingPrepaidReplicas(self):
        """计费模式[HYBRID_PAID]时生效, 用于标识混合计费模式下的预付费实例数
        :rtype: int
        """
        return self._HybridBillingPrepaidReplicas

    @HybridBillingPrepaidReplicas.setter
    def HybridBillingPrepaidReplicas(self, HybridBillingPrepaidReplicas):
        self._HybridBillingPrepaidReplicas = HybridBillingPrepaidReplicas

    @property
    def CreateSource(self):
        """[AUTO_ML 自动学习，自动学习正式发布 AUTO_ML_FORMAL, DEFAULT 默认]
        :rtype: str
        """
        return self._CreateSource

    @CreateSource.setter
    def CreateSource(self, CreateSource):
        self._CreateSource = CreateSource

    @property
    def ModelHotUpdateEnable(self):
        """是否开启模型的热更新。默认不开启
        :rtype: bool
        """
        return self._ModelHotUpdateEnable

    @ModelHotUpdateEnable.setter
    def ModelHotUpdateEnable(self, ModelHotUpdateEnable):
        self._ModelHotUpdateEnable = ModelHotUpdateEnable

    @property
    def ScheduledAction(self):
        """定时停止配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ScheduledAction`
        """
        return self._ScheduledAction

    @ScheduledAction.setter
    def ScheduledAction(self, ScheduledAction):
        self._ScheduledAction = ScheduledAction

    @property
    def VolumeMount(self):
        """挂载配置，目前只支持CFS
        :rtype: :class:`tencentcloud.tione.v20211111.models.VolumeMount`
        """
        return self._VolumeMount

    @VolumeMount.setter
    def VolumeMount(self, VolumeMount):
        self._VolumeMount = VolumeMount

    @property
    def ServiceLimit(self):
        """服务限速限流相关配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ServiceLimit`
        """
        return self._ServiceLimit

    @ServiceLimit.setter
    def ServiceLimit(self, ServiceLimit):
        self._ServiceLimit = ServiceLimit

    @property
    def CallbackUrl(self):
        """回调地址，用于回调创建服务状态信息，回调格式&内容详情见：[TI-ONE 接口回调说明](https://cloud.tencent.com/document/product/851/84292)
        :rtype: str
        """
        return self._CallbackUrl

    @CallbackUrl.setter
    def CallbackUrl(self, CallbackUrl):
        self._CallbackUrl = CallbackUrl

    @property
    def ModelTurboEnable(self):
        """是否开启模型的加速, 仅对StableDiffusion(动态加速)格式的模型有效。
        :rtype: bool
        """
        return self._ModelTurboEnable

    @ModelTurboEnable.setter
    def ModelTurboEnable(self, ModelTurboEnable):
        self._ModelTurboEnable = ModelTurboEnable

    @property
    def ServiceCategory(self):
        """服务分类
        :rtype: str
        """
        return self._ServiceCategory

    @ServiceCategory.setter
    def ServiceCategory(self, ServiceCategory):
        self._ServiceCategory = ServiceCategory

    @property
    def Command(self):
        """服务的启动命令，如遇特殊字符导致配置失败，可使用CommandBase64参数
        :rtype: str
        """
        return self._Command

    @Command.setter
    def Command(self, Command):
        self._Command = Command

    @property
    def ServiceEIP(self):
        """是否开启TIONE内网访问外部，此功能仅支持后付费机型与从TIONE平台购买的预付费机型；使用从CVM选择资源组时此配置不生效。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ServiceEIP`
        """
        return self._ServiceEIP

    @ServiceEIP.setter
    def ServiceEIP(self, ServiceEIP):
        self._ServiceEIP = ServiceEIP

    @property
    def CommandBase64(self):
        """服务的启动命令，以base64格式进行输入，与Command同时配置时，仅当前参数生效
        :rtype: str
        """
        return self._CommandBase64

    @CommandBase64.setter
    def CommandBase64(self, CommandBase64):
        self._CommandBase64 = CommandBase64

    @property
    def ServicePort(self):
        """服务端口，仅在非内置镜像时生效，默认8501。不支持输入8501-8510,6006,9092
        :rtype: int
        """
        return self._ServicePort

    @ServicePort.setter
    def ServicePort(self, ServicePort):
        self._ServicePort = ServicePort

    @property
    def SourceTaskInfo(self):
        """源任务信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.SourceTaskInfo`
        """
        return self._SourceTaskInfo

    @SourceTaskInfo.setter
    def SourceTaskInfo(self, SourceTaskInfo):
        self._SourceTaskInfo = SourceTaskInfo

    @property
    def DeployType(self):
        """服务的部署类型 [STANDARD 标准部署，DIST 分布式多机部署] 默认STANDARD
        :rtype: str
        """
        return self._DeployType

    @DeployType.setter
    def DeployType(self, DeployType):
        self._DeployType = DeployType

    @property
    def InstancePerReplicas(self):
        """单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :rtype: int
        """
        return self._InstancePerReplicas

    @InstancePerReplicas.setter
    def InstancePerReplicas(self, InstancePerReplicas):
        self._InstancePerReplicas = InstancePerReplicas

    @property
    def MaxRetryTimes(self):
        """服务首次启动时的最大重试次数，1以下表示不限制
        :rtype: int
        """
        return self._MaxRetryTimes

    @MaxRetryTimes.setter
    def MaxRetryTimes(self, MaxRetryTimes):
        self._MaxRetryTimes = MaxRetryTimes

    @property
    def TerminationGracePeriodSeconds(self):
        """30
        :rtype: int
        """
        return self._TerminationGracePeriodSeconds

    @TerminationGracePeriodSeconds.setter
    def TerminationGracePeriodSeconds(self, TerminationGracePeriodSeconds):
        self._TerminationGracePeriodSeconds = TerminationGracePeriodSeconds

    @property
    def PreStopCommand(self):
        """["sleep","60"]
        :rtype: list of str
        """
        return self._PreStopCommand

    @PreStopCommand.setter
    def PreStopCommand(self, PreStopCommand):
        self._PreStopCommand = PreStopCommand

    @property
    def Roles(self):
        """多角色配置
        :rtype: list of RoleSpec
        """
        return self._Roles

    @Roles.setter
    def Roles(self, Roles):
        self._Roles = Roles


    def _deserialize(self, params):
        self._ServiceGroupId = params.get("ServiceGroupId")
        self._ServiceGroupName = params.get("ServiceGroupName")
        self._ServiceDescription = params.get("ServiceDescription")
        self._ChargeType = params.get("ChargeType")
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("ModelInfo") is not None:
            self._ModelInfo = ModelInfo()
            self._ModelInfo._deserialize(params.get("ModelInfo"))
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        if params.get("Env") is not None:
            self._Env = []
            for item in params.get("Env"):
                obj = EnvVar()
                obj._deserialize(item)
                self._Env.append(obj)
        if params.get("Resources") is not None:
            self._Resources = ResourceInfo()
            self._Resources._deserialize(params.get("Resources"))
        self._InstanceType = params.get("InstanceType")
        self._ScaleMode = params.get("ScaleMode")
        self._Replicas = params.get("Replicas")
        if params.get("HorizontalPodAutoscaler") is not None:
            self._HorizontalPodAutoscaler = HorizontalPodAutoscaler()
            self._HorizontalPodAutoscaler._deserialize(params.get("HorizontalPodAutoscaler"))
        self._LogEnable = params.get("LogEnable")
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        self._AuthorizationEnable = params.get("AuthorizationEnable")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._NewVersion = params.get("NewVersion")
        if params.get("CronScaleJobs") is not None:
            self._CronScaleJobs = []
            for item in params.get("CronScaleJobs"):
                obj = CronScaleJob()
                obj._deserialize(item)
                self._CronScaleJobs.append(obj)
        self._ScaleStrategy = params.get("ScaleStrategy")
        self._HybridBillingPrepaidReplicas = params.get("HybridBillingPrepaidReplicas")
        self._CreateSource = params.get("CreateSource")
        self._ModelHotUpdateEnable = params.get("ModelHotUpdateEnable")
        if params.get("ScheduledAction") is not None:
            self._ScheduledAction = ScheduledAction()
            self._ScheduledAction._deserialize(params.get("ScheduledAction"))
        if params.get("VolumeMount") is not None:
            self._VolumeMount = VolumeMount()
            self._VolumeMount._deserialize(params.get("VolumeMount"))
        if params.get("ServiceLimit") is not None:
            self._ServiceLimit = ServiceLimit()
            self._ServiceLimit._deserialize(params.get("ServiceLimit"))
        self._CallbackUrl = params.get("CallbackUrl")
        self._ModelTurboEnable = params.get("ModelTurboEnable")
        self._ServiceCategory = params.get("ServiceCategory")
        self._Command = params.get("Command")
        if params.get("ServiceEIP") is not None:
            self._ServiceEIP = ServiceEIP()
            self._ServiceEIP._deserialize(params.get("ServiceEIP"))
        self._CommandBase64 = params.get("CommandBase64")
        self._ServicePort = params.get("ServicePort")
        if params.get("SourceTaskInfo") is not None:
            self._SourceTaskInfo = SourceTaskInfo()
            self._SourceTaskInfo._deserialize(params.get("SourceTaskInfo"))
        self._DeployType = params.get("DeployType")
        self._InstancePerReplicas = params.get("InstancePerReplicas")
        self._MaxRetryTimes = params.get("MaxRetryTimes")
        self._TerminationGracePeriodSeconds = params.get("TerminationGracePeriodSeconds")
        self._PreStopCommand = params.get("PreStopCommand")
        if params.get("Roles") is not None:
            self._Roles = []
            for item in params.get("Roles"):
                obj = RoleSpec()
                obj._deserialize(item)
                self._Roles.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateModelServiceResponse(AbstractModel):
    """CreateModelService返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Service: 生成的模型服务
        :type Service: :class:`tencentcloud.tione.v20211111.models.Service`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Service = None
        self._RequestId = None

    @property
    def Service(self):
        """生成的模型服务
        :rtype: :class:`tencentcloud.tione.v20211111.models.Service`
        """
        return self._Service

    @Service.setter
    def Service(self, Service):
        self._Service = Service

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Service") is not None:
            self._Service = Service()
            self._Service._deserialize(params.get("Service"))
        self._RequestId = params.get("RequestId")


class CreateNotebookImageRequest(AbstractModel):
    """CreateNotebookImage请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ImageInfo: 镜像信息
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _NotebookId: notebook id
        :type NotebookId: str
        :param _Kernels: 要保存的kernel数组
        :type Kernels: list of str
        """
        self._ImageInfo = None
        self._NotebookId = None
        self._Kernels = None

    @property
    def ImageInfo(self):
        """镜像信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def NotebookId(self):
        """notebook id
        :rtype: str
        """
        return self._NotebookId

    @NotebookId.setter
    def NotebookId(self, NotebookId):
        self._NotebookId = NotebookId

    @property
    def Kernels(self):
        """要保存的kernel数组
        :rtype: list of str
        """
        return self._Kernels

    @Kernels.setter
    def Kernels(self, Kernels):
        self._Kernels = Kernels


    def _deserialize(self, params):
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        self._NotebookId = params.get("NotebookId")
        self._Kernels = params.get("Kernels")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateNotebookImageResponse(AbstractModel):
    """CreateNotebookImage返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateNotebookRequest(AbstractModel):
    """CreateNotebook请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Name: 名称。不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :type Name: str
        :param _ChargeType: 计算资源付费模式 ，可选值为：
PREPAID：预付费，即包年包月
POSTPAID_BY_HOUR：按小时后付费
        :type ChargeType: str
        :param _ResourceConf: 计算资源配置
        :type ResourceConf: :class:`tencentcloud.tione.v20211111.models.ResourceConf`
        :param _LogEnable: 是否上报日志
        :type LogEnable: bool
        :param _RootAccess: 是否ROOT权限
        :type RootAccess: bool
        :param _AutoStopping: 是否自动停止
        :type AutoStopping: bool
        :param _DirectInternetAccess: 是否访问公网
        :type DirectInternetAccess: bool
        :param _ResourceGroupId: 资源组ID(for预付费)
        :type ResourceGroupId: str
        :param _VpcId: Vpc-Id
        :type VpcId: str
        :param _SubnetId: 子网Id
        :type SubnetId: str
        :param _VolumeSourceType: 存储的类型。取值包含： 
FREE：预付费的免费存储
CLOUD_PREMIUM：高性能云硬盘
CLOUD_SSD：SSD云硬盘
CFS：CFS存储
CFS_TURBO：CFS Turbo存储
GooseFSx：GooseFSx存储
        :type VolumeSourceType: str
        :param _VolumeSizeInGB: 云硬盘存储卷大小，单位GB
        :type VolumeSizeInGB: int
        :param _VolumeSourceCFS: CFS存储的配置
        :type VolumeSourceCFS: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        :param _LogConfig: 日志配置
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _LifecycleScriptId: 生命周期脚本的ID
        :type LifecycleScriptId: str
        :param _DefaultCodeRepoId: 默认GIT存储库的ID
        :type DefaultCodeRepoId: str
        :param _AdditionalCodeRepoIds: 其他GIT存储库的ID，最多3个
        :type AdditionalCodeRepoIds: list of str
        :param _AutomaticStopTime: 自动停止时间，单位小时
        :type AutomaticStopTime: int
        :param _Tags: 标签配置
        :type Tags: list of Tag
        :param _DataConfigs: 数据配置，只支持WEDATA_HDFS存储类型
        :type DataConfigs: list of DataConfig
        :param _UserType: 用户类型
        :type UserType: str
        :param _UserDataInfo: 用户数据信息
        :type UserDataInfo: :class:`tencentcloud.tione.v20211111.models.UserDataInfo`
        :param _ImageInfo: 镜像信息
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _ImageType: 镜像类型，包括SYSTEM、TCR、CCR
        :type ImageType: str
        :param _SSHConfig: SSH配置信息
        :type SSHConfig: :class:`tencentcloud.tione.v20211111.models.SSHConfig`
        :param _VolumeSourceGooseFS: GooseFS存储配置
        :type VolumeSourceGooseFS: :class:`tencentcloud.tione.v20211111.models.GooseFS`
        :param _DataPipelineTaskId: 数据构建任务ID
        :type DataPipelineTaskId: str
        :param _Envs: 自定义环境变量
        :type Envs: list of EnvVar
        """
        self._Name = None
        self._ChargeType = None
        self._ResourceConf = None
        self._LogEnable = None
        self._RootAccess = None
        self._AutoStopping = None
        self._DirectInternetAccess = None
        self._ResourceGroupId = None
        self._VpcId = None
        self._SubnetId = None
        self._VolumeSourceType = None
        self._VolumeSizeInGB = None
        self._VolumeSourceCFS = None
        self._LogConfig = None
        self._LifecycleScriptId = None
        self._DefaultCodeRepoId = None
        self._AdditionalCodeRepoIds = None
        self._AutomaticStopTime = None
        self._Tags = None
        self._DataConfigs = None
        self._UserType = None
        self._UserDataInfo = None
        self._ImageInfo = None
        self._ImageType = None
        self._SSHConfig = None
        self._VolumeSourceGooseFS = None
        self._DataPipelineTaskId = None
        self._Envs = None

    @property
    def Name(self):
        """名称。不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ChargeType(self):
        """计算资源付费模式 ，可选值为：
PREPAID：预付费，即包年包月
POSTPAID_BY_HOUR：按小时后付费
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceConf(self):
        """计算资源配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceConf`
        """
        return self._ResourceConf

    @ResourceConf.setter
    def ResourceConf(self, ResourceConf):
        self._ResourceConf = ResourceConf

    @property
    def LogEnable(self):
        """是否上报日志
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def RootAccess(self):
        """是否ROOT权限
        :rtype: bool
        """
        return self._RootAccess

    @RootAccess.setter
    def RootAccess(self, RootAccess):
        self._RootAccess = RootAccess

    @property
    def AutoStopping(self):
        """是否自动停止
        :rtype: bool
        """
        return self._AutoStopping

    @AutoStopping.setter
    def AutoStopping(self, AutoStopping):
        self._AutoStopping = AutoStopping

    @property
    def DirectInternetAccess(self):
        """是否访问公网
        :rtype: bool
        """
        return self._DirectInternetAccess

    @DirectInternetAccess.setter
    def DirectInternetAccess(self, DirectInternetAccess):
        self._DirectInternetAccess = DirectInternetAccess

    @property
    def ResourceGroupId(self):
        """资源组ID(for预付费)
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def VpcId(self):
        """Vpc-Id
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """子网Id
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def VolumeSourceType(self):
        """存储的类型。取值包含： 
FREE：预付费的免费存储
CLOUD_PREMIUM：高性能云硬盘
CLOUD_SSD：SSD云硬盘
CFS：CFS存储
CFS_TURBO：CFS Turbo存储
GooseFSx：GooseFSx存储
        :rtype: str
        """
        return self._VolumeSourceType

    @VolumeSourceType.setter
    def VolumeSourceType(self, VolumeSourceType):
        self._VolumeSourceType = VolumeSourceType

    @property
    def VolumeSizeInGB(self):
        """云硬盘存储卷大小，单位GB
        :rtype: int
        """
        return self._VolumeSizeInGB

    @VolumeSizeInGB.setter
    def VolumeSizeInGB(self, VolumeSizeInGB):
        self._VolumeSizeInGB = VolumeSizeInGB

    @property
    def VolumeSourceCFS(self):
        """CFS存储的配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        """
        return self._VolumeSourceCFS

    @VolumeSourceCFS.setter
    def VolumeSourceCFS(self, VolumeSourceCFS):
        self._VolumeSourceCFS = VolumeSourceCFS

    @property
    def LogConfig(self):
        """日志配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def LifecycleScriptId(self):
        """生命周期脚本的ID
        :rtype: str
        """
        return self._LifecycleScriptId

    @LifecycleScriptId.setter
    def LifecycleScriptId(self, LifecycleScriptId):
        self._LifecycleScriptId = LifecycleScriptId

    @property
    def DefaultCodeRepoId(self):
        """默认GIT存储库的ID
        :rtype: str
        """
        return self._DefaultCodeRepoId

    @DefaultCodeRepoId.setter
    def DefaultCodeRepoId(self, DefaultCodeRepoId):
        self._DefaultCodeRepoId = DefaultCodeRepoId

    @property
    def AdditionalCodeRepoIds(self):
        """其他GIT存储库的ID，最多3个
        :rtype: list of str
        """
        return self._AdditionalCodeRepoIds

    @AdditionalCodeRepoIds.setter
    def AdditionalCodeRepoIds(self, AdditionalCodeRepoIds):
        self._AdditionalCodeRepoIds = AdditionalCodeRepoIds

    @property
    def AutomaticStopTime(self):
        """自动停止时间，单位小时
        :rtype: int
        """
        return self._AutomaticStopTime

    @AutomaticStopTime.setter
    def AutomaticStopTime(self, AutomaticStopTime):
        self._AutomaticStopTime = AutomaticStopTime

    @property
    def Tags(self):
        """标签配置
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def DataConfigs(self):
        """数据配置，只支持WEDATA_HDFS存储类型
        :rtype: list of DataConfig
        """
        return self._DataConfigs

    @DataConfigs.setter
    def DataConfigs(self, DataConfigs):
        self._DataConfigs = DataConfigs

    @property
    def UserType(self):
        """用户类型
        :rtype: str
        """
        return self._UserType

    @UserType.setter
    def UserType(self, UserType):
        self._UserType = UserType

    @property
    def UserDataInfo(self):
        """用户数据信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.UserDataInfo`
        """
        return self._UserDataInfo

    @UserDataInfo.setter
    def UserDataInfo(self, UserDataInfo):
        self._UserDataInfo = UserDataInfo

    @property
    def ImageInfo(self):
        """镜像信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def ImageType(self):
        """镜像类型，包括SYSTEM、TCR、CCR
        :rtype: str
        """
        return self._ImageType

    @ImageType.setter
    def ImageType(self, ImageType):
        self._ImageType = ImageType

    @property
    def SSHConfig(self):
        """SSH配置信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.SSHConfig`
        """
        return self._SSHConfig

    @SSHConfig.setter
    def SSHConfig(self, SSHConfig):
        self._SSHConfig = SSHConfig

    @property
    def VolumeSourceGooseFS(self):
        """GooseFS存储配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.GooseFS`
        """
        return self._VolumeSourceGooseFS

    @VolumeSourceGooseFS.setter
    def VolumeSourceGooseFS(self, VolumeSourceGooseFS):
        self._VolumeSourceGooseFS = VolumeSourceGooseFS

    @property
    def DataPipelineTaskId(self):
        """数据构建任务ID
        :rtype: str
        """
        return self._DataPipelineTaskId

    @DataPipelineTaskId.setter
    def DataPipelineTaskId(self, DataPipelineTaskId):
        self._DataPipelineTaskId = DataPipelineTaskId

    @property
    def Envs(self):
        """自定义环境变量
        :rtype: list of EnvVar
        """
        return self._Envs

    @Envs.setter
    def Envs(self, Envs):
        self._Envs = Envs


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._ChargeType = params.get("ChargeType")
        if params.get("ResourceConf") is not None:
            self._ResourceConf = ResourceConf()
            self._ResourceConf._deserialize(params.get("ResourceConf"))
        self._LogEnable = params.get("LogEnable")
        self._RootAccess = params.get("RootAccess")
        self._AutoStopping = params.get("AutoStopping")
        self._DirectInternetAccess = params.get("DirectInternetAccess")
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._VolumeSourceType = params.get("VolumeSourceType")
        self._VolumeSizeInGB = params.get("VolumeSizeInGB")
        if params.get("VolumeSourceCFS") is not None:
            self._VolumeSourceCFS = CFSConfig()
            self._VolumeSourceCFS._deserialize(params.get("VolumeSourceCFS"))
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        self._LifecycleScriptId = params.get("LifecycleScriptId")
        self._DefaultCodeRepoId = params.get("DefaultCodeRepoId")
        self._AdditionalCodeRepoIds = params.get("AdditionalCodeRepoIds")
        self._AutomaticStopTime = params.get("AutomaticStopTime")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        if params.get("DataConfigs") is not None:
            self._DataConfigs = []
            for item in params.get("DataConfigs"):
                obj = DataConfig()
                obj._deserialize(item)
                self._DataConfigs.append(obj)
        self._UserType = params.get("UserType")
        if params.get("UserDataInfo") is not None:
            self._UserDataInfo = UserDataInfo()
            self._UserDataInfo._deserialize(params.get("UserDataInfo"))
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        self._ImageType = params.get("ImageType")
        if params.get("SSHConfig") is not None:
            self._SSHConfig = SSHConfig()
            self._SSHConfig._deserialize(params.get("SSHConfig"))
        if params.get("VolumeSourceGooseFS") is not None:
            self._VolumeSourceGooseFS = GooseFS()
            self._VolumeSourceGooseFS._deserialize(params.get("VolumeSourceGooseFS"))
        self._DataPipelineTaskId = params.get("DataPipelineTaskId")
        if params.get("Envs") is not None:
            self._Envs = []
            for item in params.get("Envs"):
                obj = EnvVar()
                obj._deserialize(item)
                self._Envs.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateNotebookResponse(AbstractModel):
    """CreateNotebook返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: notebook标志
        :type Id: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Id = None
        self._RequestId = None

    @property
    def Id(self):
        """notebook标志
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._RequestId = params.get("RequestId")


class CreateObjectiveEvaluationRequest(AbstractModel):
    """CreateObjectiveEvaluation请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Name: 名称
        :type Name: str
        :param _Datasets: [已废弃]请使用InputDatasets
        :type Datasets: list of CFSConfig
        :param _Models: 模型配置
        :type Models: list of EvalModel
        :param _Description: 描述
        :type Description: str
        :param _CreateSource: 创建来源
        :type CreateSource: str
        :param _ChargeType: 计费
        :type ChargeType: str
        :param _ResourceGroupId: 资源
        :type ResourceGroupId: str
        :param _Resources: 预付费资源
        :type Resources: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        :param _InstanceType: 资源类型
        :type InstanceType: str
        :param _ResourceGroupName: 资源组名称
        :type ResourceGroupName: str
        :param _DeployType: 部署类型
        :type DeployType: str
        :param _InstancePerReplicas: 单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :type InstancePerReplicas: int
        :param _Tags: 标签
        :type Tags: list of Tag
        :param _InputDatasets: 评测集
        :type InputDatasets: list of SimpleCFSConfig
        :param _InstanceTypeAlias: 后付费资源信息
        :type InstanceTypeAlias: str
        """
        self._Name = None
        self._Datasets = None
        self._Models = None
        self._Description = None
        self._CreateSource = None
        self._ChargeType = None
        self._ResourceGroupId = None
        self._Resources = None
        self._InstanceType = None
        self._ResourceGroupName = None
        self._DeployType = None
        self._InstancePerReplicas = None
        self._Tags = None
        self._InputDatasets = None
        self._InstanceTypeAlias = None

    @property
    def Name(self):
        """名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Datasets(self):
        """[已废弃]请使用InputDatasets
        :rtype: list of CFSConfig
        """
        return self._Datasets

    @Datasets.setter
    def Datasets(self, Datasets):
        self._Datasets = Datasets

    @property
    def Models(self):
        """模型配置
        :rtype: list of EvalModel
        """
        return self._Models

    @Models.setter
    def Models(self, Models):
        self._Models = Models

    @property
    def Description(self):
        """描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def CreateSource(self):
        """创建来源
        :rtype: str
        """
        return self._CreateSource

    @CreateSource.setter
    def CreateSource(self, CreateSource):
        self._CreateSource = CreateSource

    @property
    def ChargeType(self):
        """计费
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceGroupId(self):
        """资源
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def Resources(self):
        """预付费资源
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        """
        return self._Resources

    @Resources.setter
    def Resources(self, Resources):
        self._Resources = Resources

    @property
    def InstanceType(self):
        """资源类型
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def ResourceGroupName(self):
        """资源组名称
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def DeployType(self):
        """部署类型
        :rtype: str
        """
        return self._DeployType

    @DeployType.setter
    def DeployType(self, DeployType):
        self._DeployType = DeployType

    @property
    def InstancePerReplicas(self):
        """单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :rtype: int
        """
        return self._InstancePerReplicas

    @InstancePerReplicas.setter
    def InstancePerReplicas(self, InstancePerReplicas):
        self._InstancePerReplicas = InstancePerReplicas

    @property
    def Tags(self):
        """标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def InputDatasets(self):
        """评测集
        :rtype: list of SimpleCFSConfig
        """
        return self._InputDatasets

    @InputDatasets.setter
    def InputDatasets(self, InputDatasets):
        self._InputDatasets = InputDatasets

    @property
    def InstanceTypeAlias(self):
        """后付费资源信息
        :rtype: str
        """
        return self._InstanceTypeAlias

    @InstanceTypeAlias.setter
    def InstanceTypeAlias(self, InstanceTypeAlias):
        self._InstanceTypeAlias = InstanceTypeAlias


    def _deserialize(self, params):
        self._Name = params.get("Name")
        if params.get("Datasets") is not None:
            self._Datasets = []
            for item in params.get("Datasets"):
                obj = CFSConfig()
                obj._deserialize(item)
                self._Datasets.append(obj)
        if params.get("Models") is not None:
            self._Models = []
            for item in params.get("Models"):
                obj = EvalModel()
                obj._deserialize(item)
                self._Models.append(obj)
        self._Description = params.get("Description")
        self._CreateSource = params.get("CreateSource")
        self._ChargeType = params.get("ChargeType")
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("Resources") is not None:
            self._Resources = ResourceInfo()
            self._Resources._deserialize(params.get("Resources"))
        self._InstanceType = params.get("InstanceType")
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._DeployType = params.get("DeployType")
        self._InstancePerReplicas = params.get("InstancePerReplicas")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        if params.get("InputDatasets") is not None:
            self._InputDatasets = []
            for item in params.get("InputDatasets"):
                obj = SimpleCFSConfig()
                obj._deserialize(item)
                self._InputDatasets.append(obj)
        self._InstanceTypeAlias = params.get("InstanceTypeAlias")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateObjectiveEvaluationResponse(AbstractModel):
    """CreateObjectiveEvaluation返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class CreateOptimizedModelRequest(AbstractModel):
    """CreateOptimizedModel请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccTaskId: 模型加速任务ID
        :type ModelAccTaskId: str
        :param _Tags: 标签
        :type Tags: list of Tag
        """
        self._ModelAccTaskId = None
        self._Tags = None

    @property
    def ModelAccTaskId(self):
        """模型加速任务ID
        :rtype: str
        """
        return self._ModelAccTaskId

    @ModelAccTaskId.setter
    def ModelAccTaskId(self, ModelAccTaskId):
        self._ModelAccTaskId = ModelAccTaskId

    @property
    def Tags(self):
        """标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._ModelAccTaskId = params.get("ModelAccTaskId")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateOptimizedModelResponse(AbstractModel):
    """CreateOptimizedModel返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelId: 模型ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelId: str
        :param _ModelVersionId: 模型版本ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelVersionId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ModelId = None
        self._ModelVersionId = None
        self._RequestId = None

    @property
    def ModelId(self):
        """模型ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def ModelVersionId(self):
        """模型版本ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelVersionId

    @ModelVersionId.setter
    def ModelVersionId(self, ModelVersionId):
        self._ModelVersionId = ModelVersionId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ModelId = params.get("ModelId")
        self._ModelVersionId = params.get("ModelVersionId")
        self._RequestId = params.get("RequestId")


class CreatePreSignedTensorBoardUrlRequest(AbstractModel):
    """CreatePreSignedTensorBoardUrl请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: TensorBoard ID
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """TensorBoard ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreatePreSignedTensorBoardUrlResponse(AbstractModel):
    """CreatePreSignedTensorBoardUrl返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Url: TensorBoard Url
        :type Url: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Url = None
        self._RequestId = None

    @property
    def Url(self):
        """TensorBoard Url
        :rtype: str
        """
        return self._Url

    @Url.setter
    def Url(self, Url):
        self._Url = Url

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Url = params.get("Url")
        self._RequestId = params.get("RequestId")


class CreatePresignedNotebookUrlRequest(AbstractModel):
    """CreatePresignedNotebookUrl请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: Notebook ID
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """Notebook ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreatePresignedNotebookUrlResponse(AbstractModel):
    """CreatePresignedNotebookUrl返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AuthorizedUrl: 携带认证TOKEN的URL
        :type AuthorizedUrl: str
        :param _AuthorizedCodeServerUrl: 携带认证TOKEN的CodeServer URL
        :type AuthorizedCodeServerUrl: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AuthorizedUrl = None
        self._AuthorizedCodeServerUrl = None
        self._RequestId = None

    @property
    def AuthorizedUrl(self):
        """携带认证TOKEN的URL
        :rtype: str
        """
        return self._AuthorizedUrl

    @AuthorizedUrl.setter
    def AuthorizedUrl(self, AuthorizedUrl):
        self._AuthorizedUrl = AuthorizedUrl

    @property
    def AuthorizedCodeServerUrl(self):
        """携带认证TOKEN的CodeServer URL
        :rtype: str
        """
        return self._AuthorizedCodeServerUrl

    @AuthorizedCodeServerUrl.setter
    def AuthorizedCodeServerUrl(self, AuthorizedCodeServerUrl):
        self._AuthorizedCodeServerUrl = AuthorizedCodeServerUrl

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AuthorizedUrl = params.get("AuthorizedUrl")
        self._AuthorizedCodeServerUrl = params.get("AuthorizedCodeServerUrl")
        self._RequestId = params.get("RequestId")


class CreatePrivateLinkRequest(AbstractModel):
    """CreatePrivateLink请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceGroupId: 服务组ID
        :type ServiceGroupId: str
        :param _VpcId: 用户VpcId
        :type VpcId: str
        :param _SubnetId: 用户SubnetId
        :type SubnetId: str
        """
        self._ServiceGroupId = None
        self._VpcId = None
        self._SubnetId = None

    @property
    def ServiceGroupId(self):
        """服务组ID
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def VpcId(self):
        """用户VpcId
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """用户SubnetId
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId


    def _deserialize(self, params):
        self._ServiceGroupId = params.get("ServiceGroupId")
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreatePrivateLinkResponse(AbstractModel):
    """CreatePrivateLink返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class CreateProjectRequest(AbstractModel):
    """CreateProject请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ProjectName: 工程名称
        :type ProjectName: str
        :param _CosPathInfo: 工程COS桶
        :type CosPathInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _LogEnable: 是否上报日志
        :type LogEnable: bool
        :param _Description: 工程描述
        :type Description: str
        :param _LogConfig: CLS日志配置
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _Tags: 标签配置
        :type Tags: list of Tag
        """
        self._ProjectName = None
        self._CosPathInfo = None
        self._LogEnable = None
        self._Description = None
        self._LogConfig = None
        self._Tags = None

    @property
    def ProjectName(self):
        """工程名称
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def CosPathInfo(self):
        """工程COS桶
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._CosPathInfo

    @CosPathInfo.setter
    def CosPathInfo(self, CosPathInfo):
        self._CosPathInfo = CosPathInfo

    @property
    def LogEnable(self):
        """是否上报日志
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def Description(self):
        """工程描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def LogConfig(self):
        """CLS日志配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def Tags(self):
        """标签配置
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._ProjectName = params.get("ProjectName")
        if params.get("CosPathInfo") is not None:
            self._CosPathInfo = CosPathInfo()
            self._CosPathInfo._deserialize(params.get("CosPathInfo"))
        self._LogEnable = params.get("LogEnable")
        self._Description = params.get("Description")
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateProjectResponse(AbstractModel):
    """CreateProject返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ProjectId: 工程的ID
        :type ProjectId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ProjectId = None
        self._RequestId = None

    @property
    def ProjectId(self):
        """工程的ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._RequestId = params.get("RequestId")


class CreateRecyclePolicyRequest(AbstractModel):
    """CreateRecyclePolicy请求参数结构体

    """

    def __init__(self):
        r"""
        :param _RecycleConfig: 回收策略
        :type RecycleConfig: :class:`tencentcloud.tione.v20211111.models.RecycleConfig`
        :param _ExcludeConfig: 排除策略
        :type ExcludeConfig: :class:`tencentcloud.tione.v20211111.models.ExcludeConfig`
        """
        self._RecycleConfig = None
        self._ExcludeConfig = None

    @property
    def RecycleConfig(self):
        """回收策略
        :rtype: :class:`tencentcloud.tione.v20211111.models.RecycleConfig`
        """
        return self._RecycleConfig

    @RecycleConfig.setter
    def RecycleConfig(self, RecycleConfig):
        self._RecycleConfig = RecycleConfig

    @property
    def ExcludeConfig(self):
        """排除策略
        :rtype: :class:`tencentcloud.tione.v20211111.models.ExcludeConfig`
        """
        return self._ExcludeConfig

    @ExcludeConfig.setter
    def ExcludeConfig(self, ExcludeConfig):
        self._ExcludeConfig = ExcludeConfig


    def _deserialize(self, params):
        if params.get("RecycleConfig") is not None:
            self._RecycleConfig = RecycleConfig()
            self._RecycleConfig._deserialize(params.get("RecycleConfig"))
        if params.get("ExcludeConfig") is not None:
            self._ExcludeConfig = ExcludeConfig()
            self._ExcludeConfig._deserialize(params.get("ExcludeConfig"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateRecyclePolicyResponse(AbstractModel):
    """CreateRecyclePolicy返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RecyclePolicyId: id值
        :type RecyclePolicyId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RecyclePolicyId = None
        self._RequestId = None

    @property
    def RecyclePolicyId(self):
        """id值
        :rtype: str
        """
        return self._RecyclePolicyId

    @RecyclePolicyId.setter
    def RecyclePolicyId(self, RecyclePolicyId):
        self._RecyclePolicyId = RecyclePolicyId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RecyclePolicyId = params.get("RecyclePolicyId")
        self._RequestId = params.get("RequestId")


class CreateSDWebUIUrlRequest(AbstractModel):
    """CreateSDWebUIUrl请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceId: 服务id
        :type ServiceId: str
        """
        self._ServiceId = None

    @property
    def ServiceId(self):
        """服务id
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId


    def _deserialize(self, params):
        self._ServiceId = params.get("ServiceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateSDWebUIUrlResponse(AbstractModel):
    """CreateSDWebUIUrl返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Url: webui url 地址
注意：此字段可能返回 null，表示取不到有效值。
        :type Url: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Url = None
        self._RequestId = None

    @property
    def Url(self):
        """webui url 地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Url

    @Url.setter
    def Url(self, Url):
        self._Url = Url

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Url = params.get("Url")
        self._RequestId = params.get("RequestId")


class CreateSubjectiveEvaluationRequest(AbstractModel):
    """CreateSubjectiveEvaluation请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Name: 名称
        :type Name: str
        :param _Datasets: [已废弃]请使用InputDatasets
        :type Datasets: list of CFSConfig
        :param _Models: 模型配置
        :type Models: list of EvalModel
        :param _Description: 描述
        :type Description: str
        :param _ChargeType: 计费
        :type ChargeType: str
        :param _ResourceGroupId: 资源
        :type ResourceGroupId: str
        :param _Resources: 预付费资源
        :type Resources: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        :param _InstanceType: 资源类型
        :type InstanceType: str
        :param _ResourceGroupName: 资源组名称
        :type ResourceGroupName: str
        :param _DeployType: 部署类型
        :type DeployType: str
        :param _InstancePerReplicas: 单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :type InstancePerReplicas: int
        :param _OutputCFSConfig: 输出CFS路径
        :type OutputCFSConfig: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        :param _Tags: 标签
        :type Tags: list of Tag
        :param _InputDatasets: 评测集
        :type InputDatasets: list of SimpleCFSConfig
        :param _InstanceTypeAlias: 后付费资源信息
        :type InstanceTypeAlias: str
        """
        self._Name = None
        self._Datasets = None
        self._Models = None
        self._Description = None
        self._ChargeType = None
        self._ResourceGroupId = None
        self._Resources = None
        self._InstanceType = None
        self._ResourceGroupName = None
        self._DeployType = None
        self._InstancePerReplicas = None
        self._OutputCFSConfig = None
        self._Tags = None
        self._InputDatasets = None
        self._InstanceTypeAlias = None

    @property
    def Name(self):
        """名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Datasets(self):
        """[已废弃]请使用InputDatasets
        :rtype: list of CFSConfig
        """
        return self._Datasets

    @Datasets.setter
    def Datasets(self, Datasets):
        self._Datasets = Datasets

    @property
    def Models(self):
        """模型配置
        :rtype: list of EvalModel
        """
        return self._Models

    @Models.setter
    def Models(self, Models):
        self._Models = Models

    @property
    def Description(self):
        """描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def ChargeType(self):
        """计费
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceGroupId(self):
        """资源
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def Resources(self):
        """预付费资源
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        """
        return self._Resources

    @Resources.setter
    def Resources(self, Resources):
        self._Resources = Resources

    @property
    def InstanceType(self):
        """资源类型
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def ResourceGroupName(self):
        """资源组名称
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def DeployType(self):
        """部署类型
        :rtype: str
        """
        return self._DeployType

    @DeployType.setter
    def DeployType(self, DeployType):
        self._DeployType = DeployType

    @property
    def InstancePerReplicas(self):
        """单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :rtype: int
        """
        return self._InstancePerReplicas

    @InstancePerReplicas.setter
    def InstancePerReplicas(self, InstancePerReplicas):
        self._InstancePerReplicas = InstancePerReplicas

    @property
    def OutputCFSConfig(self):
        """输出CFS路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        """
        return self._OutputCFSConfig

    @OutputCFSConfig.setter
    def OutputCFSConfig(self, OutputCFSConfig):
        self._OutputCFSConfig = OutputCFSConfig

    @property
    def Tags(self):
        """标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def InputDatasets(self):
        """评测集
        :rtype: list of SimpleCFSConfig
        """
        return self._InputDatasets

    @InputDatasets.setter
    def InputDatasets(self, InputDatasets):
        self._InputDatasets = InputDatasets

    @property
    def InstanceTypeAlias(self):
        """后付费资源信息
        :rtype: str
        """
        return self._InstanceTypeAlias

    @InstanceTypeAlias.setter
    def InstanceTypeAlias(self, InstanceTypeAlias):
        self._InstanceTypeAlias = InstanceTypeAlias


    def _deserialize(self, params):
        self._Name = params.get("Name")
        if params.get("Datasets") is not None:
            self._Datasets = []
            for item in params.get("Datasets"):
                obj = CFSConfig()
                obj._deserialize(item)
                self._Datasets.append(obj)
        if params.get("Models") is not None:
            self._Models = []
            for item in params.get("Models"):
                obj = EvalModel()
                obj._deserialize(item)
                self._Models.append(obj)
        self._Description = params.get("Description")
        self._ChargeType = params.get("ChargeType")
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("Resources") is not None:
            self._Resources = ResourceInfo()
            self._Resources._deserialize(params.get("Resources"))
        self._InstanceType = params.get("InstanceType")
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._DeployType = params.get("DeployType")
        self._InstancePerReplicas = params.get("InstancePerReplicas")
        if params.get("OutputCFSConfig") is not None:
            self._OutputCFSConfig = CFSConfig()
            self._OutputCFSConfig._deserialize(params.get("OutputCFSConfig"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        if params.get("InputDatasets") is not None:
            self._InputDatasets = []
            for item in params.get("InputDatasets"):
                obj = SimpleCFSConfig()
                obj._deserialize(item)
                self._InputDatasets.append(obj)
        self._InstanceTypeAlias = params.get("InstanceTypeAlias")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateSubjectiveEvaluationResponse(AbstractModel):
    """CreateSubjectiveEvaluation返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class CreateSyncReviewImageTaskRequest(AbstractModel):
    """CreateSyncReviewImageTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ImageUrl: 待审核的图片链接
        :type ImageUrl: str
        """
        self._ImageUrl = None

    @property
    def ImageUrl(self):
        """待审核的图片链接
        :rtype: str
        """
        return self._ImageUrl

    @ImageUrl.setter
    def ImageUrl(self, ImageUrl):
        self._ImageUrl = ImageUrl


    def _deserialize(self, params):
        self._ImageUrl = params.get("ImageUrl")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateSyncReviewImageTaskResponse(AbstractModel):
    """CreateSyncReviewImageTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Result: 表示本次判定的审核结果，1（审核正常），2（判定为违规敏感文件）
        :type Result: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Result = None
        self._RequestId = None

    @property
    def Result(self):
        """表示本次判定的审核结果，1（审核正常），2（判定为违规敏感文件）
        :rtype: int
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Result = params.get("Result")
        self._RequestId = params.get("RequestId")


class CreateTaskComparisonRequest(AbstractModel):
    """CreateTaskComparison请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Name: 任务名称
        :type Name: str
        :param _AppKey: 云小微应用端信息
        :type AppKey: str
        :param _DataConfig: 评测数据集
        :type DataConfig: :class:`tencentcloud.tione.v20211111.models.AutoMLDataConfig`
        :param _TaskConfigs: 任务配置信息
        :type TaskConfigs: list of EvaluateTaskItem
        :param _TaskType: 评测类型single或者multi
        :type TaskType: str
        :param _CreateUserName: 创建人名称
        :type CreateUserName: str
        :param _ProjectId: 项目ID
        :type ProjectId: str
        :param _CTXCosInfo: 云小微创建对比评测使用的配置信息
        :type CTXCosInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _TestDataMap: 测试数据路径映射
        :type TestDataMap: list of TestDataInfo
        :param _TaskComparisonId: 对比评测任务id，非空表示重启
        :type TaskComparisonId: str
        """
        self._Name = None
        self._AppKey = None
        self._DataConfig = None
        self._TaskConfigs = None
        self._TaskType = None
        self._CreateUserName = None
        self._ProjectId = None
        self._CTXCosInfo = None
        self._TestDataMap = None
        self._TaskComparisonId = None

    @property
    def Name(self):
        """任务名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def AppKey(self):
        """云小微应用端信息
        :rtype: str
        """
        return self._AppKey

    @AppKey.setter
    def AppKey(self, AppKey):
        self._AppKey = AppKey

    @property
    def DataConfig(self):
        """评测数据集
        :rtype: :class:`tencentcloud.tione.v20211111.models.AutoMLDataConfig`
        """
        return self._DataConfig

    @DataConfig.setter
    def DataConfig(self, DataConfig):
        self._DataConfig = DataConfig

    @property
    def TaskConfigs(self):
        """任务配置信息
        :rtype: list of EvaluateTaskItem
        """
        return self._TaskConfigs

    @TaskConfigs.setter
    def TaskConfigs(self, TaskConfigs):
        self._TaskConfigs = TaskConfigs

    @property
    def TaskType(self):
        """评测类型single或者multi
        :rtype: str
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def CreateUserName(self):
        """创建人名称
        :rtype: str
        """
        return self._CreateUserName

    @CreateUserName.setter
    def CreateUserName(self, CreateUserName):
        self._CreateUserName = CreateUserName

    @property
    def ProjectId(self):
        """项目ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def CTXCosInfo(self):
        """云小微创建对比评测使用的配置信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._CTXCosInfo

    @CTXCosInfo.setter
    def CTXCosInfo(self, CTXCosInfo):
        self._CTXCosInfo = CTXCosInfo

    @property
    def TestDataMap(self):
        """测试数据路径映射
        :rtype: list of TestDataInfo
        """
        return self._TestDataMap

    @TestDataMap.setter
    def TestDataMap(self, TestDataMap):
        self._TestDataMap = TestDataMap

    @property
    def TaskComparisonId(self):
        """对比评测任务id，非空表示重启
        :rtype: str
        """
        return self._TaskComparisonId

    @TaskComparisonId.setter
    def TaskComparisonId(self, TaskComparisonId):
        self._TaskComparisonId = TaskComparisonId


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._AppKey = params.get("AppKey")
        if params.get("DataConfig") is not None:
            self._DataConfig = AutoMLDataConfig()
            self._DataConfig._deserialize(params.get("DataConfig"))
        if params.get("TaskConfigs") is not None:
            self._TaskConfigs = []
            for item in params.get("TaskConfigs"):
                obj = EvaluateTaskItem()
                obj._deserialize(item)
                self._TaskConfigs.append(obj)
        self._TaskType = params.get("TaskType")
        self._CreateUserName = params.get("CreateUserName")
        self._ProjectId = params.get("ProjectId")
        if params.get("CTXCosInfo") is not None:
            self._CTXCosInfo = CosPathInfo()
            self._CTXCosInfo._deserialize(params.get("CTXCosInfo"))
        if params.get("TestDataMap") is not None:
            self._TestDataMap = []
            for item in params.get("TestDataMap"):
                obj = TestDataInfo()
                obj._deserialize(item)
                self._TestDataMap.append(obj)
        self._TaskComparisonId = params.get("TaskComparisonId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateTaskComparisonResponse(AbstractModel):
    """CreateTaskComparison返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskComparisonId: 任务ID
        :type TaskComparisonId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskComparisonId = None
        self._RequestId = None

    @property
    def TaskComparisonId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskComparisonId

    @TaskComparisonId.setter
    def TaskComparisonId(self, TaskComparisonId):
        self._TaskComparisonId = TaskComparisonId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskComparisonId = params.get("TaskComparisonId")
        self._RequestId = params.get("RequestId")


class CreateTensorBoardTaskRequest(AbstractModel):
    """CreateTensorBoardTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 训练任务ID
        :type TaskId: str
        :param _SummaryDataConfig: summary存储配置
        :type SummaryDataConfig: :class:`tencentcloud.tione.v20211111.models.DataConfig`
        :param _NotToStartTensorBoard: 是否不启动Tensorboard，默认启动Tensorboard
        :type NotToStartTensorBoard: bool
        :param _SummaryAbsolutePath: summary相对路径
        :type SummaryAbsolutePath: str
        """
        self._TaskId = None
        self._SummaryDataConfig = None
        self._NotToStartTensorBoard = None
        self._SummaryAbsolutePath = None

    @property
    def TaskId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def SummaryDataConfig(self):
        """summary存储配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.DataConfig`
        """
        return self._SummaryDataConfig

    @SummaryDataConfig.setter
    def SummaryDataConfig(self, SummaryDataConfig):
        self._SummaryDataConfig = SummaryDataConfig

    @property
    def NotToStartTensorBoard(self):
        """是否不启动Tensorboard，默认启动Tensorboard
        :rtype: bool
        """
        return self._NotToStartTensorBoard

    @NotToStartTensorBoard.setter
    def NotToStartTensorBoard(self, NotToStartTensorBoard):
        self._NotToStartTensorBoard = NotToStartTensorBoard

    @property
    def SummaryAbsolutePath(self):
        """summary相对路径
        :rtype: str
        """
        return self._SummaryAbsolutePath

    @SummaryAbsolutePath.setter
    def SummaryAbsolutePath(self, SummaryAbsolutePath):
        self._SummaryAbsolutePath = SummaryAbsolutePath


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        if params.get("SummaryDataConfig") is not None:
            self._SummaryDataConfig = DataConfig()
            self._SummaryDataConfig._deserialize(params.get("SummaryDataConfig"))
        self._NotToStartTensorBoard = params.get("NotToStartTensorBoard")
        self._SummaryAbsolutePath = params.get("SummaryAbsolutePath")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateTensorBoardTaskResponse(AbstractModel):
    """CreateTensorBoardTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TensorBoardId: TensorBoard ID
        :type TensorBoardId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TensorBoardId = None
        self._RequestId = None

    @property
    def TensorBoardId(self):
        """TensorBoard ID
        :rtype: str
        """
        return self._TensorBoardId

    @TensorBoardId.setter
    def TensorBoardId(self, TensorBoardId):
        self._TensorBoardId = TensorBoardId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TensorBoardId = params.get("TensorBoardId")
        self._RequestId = params.get("RequestId")


class CreateTrainingModelRequest(AbstractModel):
    """CreateTrainingModel请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ImportMethod: 导入方式
MODEL：导入新模型
VERSION：导入新版本
EXIST：导入现有版本
        :type ImportMethod: str
        :param _ReasoningEnvironmentSource: 推理环境来源（SYSTEM/CUSTOM）
        :type ReasoningEnvironmentSource: str
        :param _TrainingModelName: 模型名称，不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :type TrainingModelName: str
        :param _Tags: 标签配置
        :type Tags: list of Tag
        :param _TrainingJobName: 训练任务名称
        :type TrainingJobName: str
        :param _TrainingModelCosPath: 模型来源cos目录，以/结尾
        :type TrainingModelCosPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _AlgorithmFramework: 算法框架 （PYTORCH/TENSORFLOW/DETECTRON2/PMML/MMDETECTION/ONNX)
        :type AlgorithmFramework: str
        :param _ReasoningEnvironment: 推理环境
        :type ReasoningEnvironment: str
        :param _TrainingModelIndex: 训练指标，最多支持1000字符
        :type TrainingModelIndex: str
        :param _TrainingModelVersion: 模型版本
        :type TrainingModelVersion: str
        :param _ReasoningImageInfo: 自定义推理环境
        :type ReasoningImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _ModelMoveMode: 模型移动方式（CUT/COPY）
        :type ModelMoveMode: str
        :param _TrainingJobId: 训练任务ID
        :type TrainingJobId: str
        :param _TrainingModelId: 模型ID（导入新模型不需要，导入新版本需要）
        :type TrainingModelId: str
        :param _ModelOutputPath: 模型存储cos目录
        :type ModelOutputPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _TrainingModelSource: 模型来源 （JOB/COS）
        :type TrainingModelSource: str
        :param _TrainingPreference: 模型偏好
        :type TrainingPreference: str
        :param _AutoMLTaskId: 自动学习任务ID（已废弃）
        :type AutoMLTaskId: str
        :param _TrainingJobVersion: 任务版本
        :type TrainingJobVersion: str
        :param _ModelVersionType: 模型版本类型；
枚举值：NORMAL(通用)  ACCELERATE(加速)
注意:  默认为NORMAL
        :type ModelVersionType: str
        :param _ModelFormat: 模型格式 （PYTORCH/TORCH_SCRIPT/DETECTRON2/SAVED_MODEL/FROZEN_GRAPH/PMML/MMDETECTION/ONNX/HUGGING_FACE_BERT/HUGGING_FACE_STABLE_DIFFUSION/HUGGING_FACE_STABLE_DIFFUSION_LORA/WEB_UI_STABLE_DIFFUSION）
        :type ModelFormat: str
        :param _ReasoningEnvironmentId: 推理镜像ID
        :type ReasoningEnvironmentId: str
        :param _AutoClean: 模型自动清理开关(true/false)，当前版本仅支持SAVED_MODEL格式模型
        :type AutoClean: str
        :param _MaxReservedModels: 模型数量保留上限(默认值为24个，上限为24，下限为1，步长为1)
        :type MaxReservedModels: int
        :param _ModelCleanPeriod: 模型清理周期(默认值为1分钟，上限为1440，下限为1分钟，步长为1)
        :type ModelCleanPeriod: int
        :param _IsQAT: 是否QAT模型
        :type IsQAT: bool
        :param _ModelAffiliation: 模型所属模块；
枚举值：MODEL_REPO(模型仓库)  AI_MARKET(AI市场)
注意:  默认为MODEL_REPO
        :type ModelAffiliation: str
        :param _TrainingJobBackendId: 太极HY训练任务id
        :type TrainingJobBackendId: str
        :param _TrainingJobBackendName: 太极HY训练任务名称
        :type TrainingJobBackendName: str
        """
        self._ImportMethod = None
        self._ReasoningEnvironmentSource = None
        self._TrainingModelName = None
        self._Tags = None
        self._TrainingJobName = None
        self._TrainingModelCosPath = None
        self._AlgorithmFramework = None
        self._ReasoningEnvironment = None
        self._TrainingModelIndex = None
        self._TrainingModelVersion = None
        self._ReasoningImageInfo = None
        self._ModelMoveMode = None
        self._TrainingJobId = None
        self._TrainingModelId = None
        self._ModelOutputPath = None
        self._TrainingModelSource = None
        self._TrainingPreference = None
        self._AutoMLTaskId = None
        self._TrainingJobVersion = None
        self._ModelVersionType = None
        self._ModelFormat = None
        self._ReasoningEnvironmentId = None
        self._AutoClean = None
        self._MaxReservedModels = None
        self._ModelCleanPeriod = None
        self._IsQAT = None
        self._ModelAffiliation = None
        self._TrainingJobBackendId = None
        self._TrainingJobBackendName = None

    @property
    def ImportMethod(self):
        """导入方式
MODEL：导入新模型
VERSION：导入新版本
EXIST：导入现有版本
        :rtype: str
        """
        return self._ImportMethod

    @ImportMethod.setter
    def ImportMethod(self, ImportMethod):
        self._ImportMethod = ImportMethod

    @property
    def ReasoningEnvironmentSource(self):
        """推理环境来源（SYSTEM/CUSTOM）
        :rtype: str
        """
        return self._ReasoningEnvironmentSource

    @ReasoningEnvironmentSource.setter
    def ReasoningEnvironmentSource(self, ReasoningEnvironmentSource):
        self._ReasoningEnvironmentSource = ReasoningEnvironmentSource

    @property
    def TrainingModelName(self):
        """模型名称，不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :rtype: str
        """
        return self._TrainingModelName

    @TrainingModelName.setter
    def TrainingModelName(self, TrainingModelName):
        self._TrainingModelName = TrainingModelName

    @property
    def Tags(self):
        """标签配置
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def TrainingJobName(self):
        """训练任务名称
        :rtype: str
        """
        return self._TrainingJobName

    @TrainingJobName.setter
    def TrainingJobName(self, TrainingJobName):
        self._TrainingJobName = TrainingJobName

    @property
    def TrainingModelCosPath(self):
        """模型来源cos目录，以/结尾
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._TrainingModelCosPath

    @TrainingModelCosPath.setter
    def TrainingModelCosPath(self, TrainingModelCosPath):
        self._TrainingModelCosPath = TrainingModelCosPath

    @property
    def AlgorithmFramework(self):
        """算法框架 （PYTORCH/TENSORFLOW/DETECTRON2/PMML/MMDETECTION/ONNX)
        :rtype: str
        """
        return self._AlgorithmFramework

    @AlgorithmFramework.setter
    def AlgorithmFramework(self, AlgorithmFramework):
        self._AlgorithmFramework = AlgorithmFramework

    @property
    def ReasoningEnvironment(self):
        """推理环境
        :rtype: str
        """
        return self._ReasoningEnvironment

    @ReasoningEnvironment.setter
    def ReasoningEnvironment(self, ReasoningEnvironment):
        self._ReasoningEnvironment = ReasoningEnvironment

    @property
    def TrainingModelIndex(self):
        """训练指标，最多支持1000字符
        :rtype: str
        """
        return self._TrainingModelIndex

    @TrainingModelIndex.setter
    def TrainingModelIndex(self, TrainingModelIndex):
        self._TrainingModelIndex = TrainingModelIndex

    @property
    def TrainingModelVersion(self):
        """模型版本
        :rtype: str
        """
        return self._TrainingModelVersion

    @TrainingModelVersion.setter
    def TrainingModelVersion(self, TrainingModelVersion):
        self._TrainingModelVersion = TrainingModelVersion

    @property
    def ReasoningImageInfo(self):
        """自定义推理环境
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ReasoningImageInfo

    @ReasoningImageInfo.setter
    def ReasoningImageInfo(self, ReasoningImageInfo):
        self._ReasoningImageInfo = ReasoningImageInfo

    @property
    def ModelMoveMode(self):
        """模型移动方式（CUT/COPY）
        :rtype: str
        """
        return self._ModelMoveMode

    @ModelMoveMode.setter
    def ModelMoveMode(self, ModelMoveMode):
        self._ModelMoveMode = ModelMoveMode

    @property
    def TrainingJobId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TrainingJobId

    @TrainingJobId.setter
    def TrainingJobId(self, TrainingJobId):
        self._TrainingJobId = TrainingJobId

    @property
    def TrainingModelId(self):
        """模型ID（导入新模型不需要，导入新版本需要）
        :rtype: str
        """
        return self._TrainingModelId

    @TrainingModelId.setter
    def TrainingModelId(self, TrainingModelId):
        self._TrainingModelId = TrainingModelId

    @property
    def ModelOutputPath(self):
        """模型存储cos目录
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._ModelOutputPath

    @ModelOutputPath.setter
    def ModelOutputPath(self, ModelOutputPath):
        self._ModelOutputPath = ModelOutputPath

    @property
    def TrainingModelSource(self):
        """模型来源 （JOB/COS）
        :rtype: str
        """
        return self._TrainingModelSource

    @TrainingModelSource.setter
    def TrainingModelSource(self, TrainingModelSource):
        self._TrainingModelSource = TrainingModelSource

    @property
    def TrainingPreference(self):
        """模型偏好
        :rtype: str
        """
        return self._TrainingPreference

    @TrainingPreference.setter
    def TrainingPreference(self, TrainingPreference):
        self._TrainingPreference = TrainingPreference

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID（已废弃）
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def TrainingJobVersion(self):
        """任务版本
        :rtype: str
        """
        return self._TrainingJobVersion

    @TrainingJobVersion.setter
    def TrainingJobVersion(self, TrainingJobVersion):
        self._TrainingJobVersion = TrainingJobVersion

    @property
    def ModelVersionType(self):
        """模型版本类型；
枚举值：NORMAL(通用)  ACCELERATE(加速)
注意:  默认为NORMAL
        :rtype: str
        """
        return self._ModelVersionType

    @ModelVersionType.setter
    def ModelVersionType(self, ModelVersionType):
        self._ModelVersionType = ModelVersionType

    @property
    def ModelFormat(self):
        """模型格式 （PYTORCH/TORCH_SCRIPT/DETECTRON2/SAVED_MODEL/FROZEN_GRAPH/PMML/MMDETECTION/ONNX/HUGGING_FACE_BERT/HUGGING_FACE_STABLE_DIFFUSION/HUGGING_FACE_STABLE_DIFFUSION_LORA/WEB_UI_STABLE_DIFFUSION）
        :rtype: str
        """
        return self._ModelFormat

    @ModelFormat.setter
    def ModelFormat(self, ModelFormat):
        self._ModelFormat = ModelFormat

    @property
    def ReasoningEnvironmentId(self):
        """推理镜像ID
        :rtype: str
        """
        return self._ReasoningEnvironmentId

    @ReasoningEnvironmentId.setter
    def ReasoningEnvironmentId(self, ReasoningEnvironmentId):
        self._ReasoningEnvironmentId = ReasoningEnvironmentId

    @property
    def AutoClean(self):
        """模型自动清理开关(true/false)，当前版本仅支持SAVED_MODEL格式模型
        :rtype: str
        """
        return self._AutoClean

    @AutoClean.setter
    def AutoClean(self, AutoClean):
        self._AutoClean = AutoClean

    @property
    def MaxReservedModels(self):
        """模型数量保留上限(默认值为24个，上限为24，下限为1，步长为1)
        :rtype: int
        """
        return self._MaxReservedModels

    @MaxReservedModels.setter
    def MaxReservedModels(self, MaxReservedModels):
        self._MaxReservedModels = MaxReservedModels

    @property
    def ModelCleanPeriod(self):
        """模型清理周期(默认值为1分钟，上限为1440，下限为1分钟，步长为1)
        :rtype: int
        """
        return self._ModelCleanPeriod

    @ModelCleanPeriod.setter
    def ModelCleanPeriod(self, ModelCleanPeriod):
        self._ModelCleanPeriod = ModelCleanPeriod

    @property
    def IsQAT(self):
        """是否QAT模型
        :rtype: bool
        """
        return self._IsQAT

    @IsQAT.setter
    def IsQAT(self, IsQAT):
        self._IsQAT = IsQAT

    @property
    def ModelAffiliation(self):
        """模型所属模块；
枚举值：MODEL_REPO(模型仓库)  AI_MARKET(AI市场)
注意:  默认为MODEL_REPO
        :rtype: str
        """
        return self._ModelAffiliation

    @ModelAffiliation.setter
    def ModelAffiliation(self, ModelAffiliation):
        self._ModelAffiliation = ModelAffiliation

    @property
    def TrainingJobBackendId(self):
        """太极HY训练任务id
        :rtype: str
        """
        return self._TrainingJobBackendId

    @TrainingJobBackendId.setter
    def TrainingJobBackendId(self, TrainingJobBackendId):
        self._TrainingJobBackendId = TrainingJobBackendId

    @property
    def TrainingJobBackendName(self):
        """太极HY训练任务名称
        :rtype: str
        """
        return self._TrainingJobBackendName

    @TrainingJobBackendName.setter
    def TrainingJobBackendName(self, TrainingJobBackendName):
        self._TrainingJobBackendName = TrainingJobBackendName


    def _deserialize(self, params):
        self._ImportMethod = params.get("ImportMethod")
        self._ReasoningEnvironmentSource = params.get("ReasoningEnvironmentSource")
        self._TrainingModelName = params.get("TrainingModelName")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._TrainingJobName = params.get("TrainingJobName")
        if params.get("TrainingModelCosPath") is not None:
            self._TrainingModelCosPath = CosPathInfo()
            self._TrainingModelCosPath._deserialize(params.get("TrainingModelCosPath"))
        self._AlgorithmFramework = params.get("AlgorithmFramework")
        self._ReasoningEnvironment = params.get("ReasoningEnvironment")
        self._TrainingModelIndex = params.get("TrainingModelIndex")
        self._TrainingModelVersion = params.get("TrainingModelVersion")
        if params.get("ReasoningImageInfo") is not None:
            self._ReasoningImageInfo = ImageInfo()
            self._ReasoningImageInfo._deserialize(params.get("ReasoningImageInfo"))
        self._ModelMoveMode = params.get("ModelMoveMode")
        self._TrainingJobId = params.get("TrainingJobId")
        self._TrainingModelId = params.get("TrainingModelId")
        if params.get("ModelOutputPath") is not None:
            self._ModelOutputPath = CosPathInfo()
            self._ModelOutputPath._deserialize(params.get("ModelOutputPath"))
        self._TrainingModelSource = params.get("TrainingModelSource")
        self._TrainingPreference = params.get("TrainingPreference")
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._TrainingJobVersion = params.get("TrainingJobVersion")
        self._ModelVersionType = params.get("ModelVersionType")
        self._ModelFormat = params.get("ModelFormat")
        self._ReasoningEnvironmentId = params.get("ReasoningEnvironmentId")
        self._AutoClean = params.get("AutoClean")
        self._MaxReservedModels = params.get("MaxReservedModels")
        self._ModelCleanPeriod = params.get("ModelCleanPeriod")
        self._IsQAT = params.get("IsQAT")
        self._ModelAffiliation = params.get("ModelAffiliation")
        self._TrainingJobBackendId = params.get("TrainingJobBackendId")
        self._TrainingJobBackendName = params.get("TrainingJobBackendName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateTrainingModelResponse(AbstractModel):
    """CreateTrainingModel返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: 模型ID，TrainingModel ID
        :type Id: str
        :param _TrainingModelVersionId: 模型版本ID
        :type TrainingModelVersionId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Id = None
        self._TrainingModelVersionId = None
        self._RequestId = None

    @property
    def Id(self):
        """模型ID，TrainingModel ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def TrainingModelVersionId(self):
        """模型版本ID
        :rtype: str
        """
        return self._TrainingModelVersionId

    @TrainingModelVersionId.setter
    def TrainingModelVersionId(self, TrainingModelVersionId):
        self._TrainingModelVersionId = TrainingModelVersionId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._TrainingModelVersionId = params.get("TrainingModelVersionId")
        self._RequestId = params.get("RequestId")


class CreateTrainingTaskRequest(AbstractModel):
    """CreateTrainingTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Name: 训练任务名称，不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :type Name: str
        :param _ChargeType: 计费模式，eg：PREPAID 包年包月（资源组）;
POSTPAID_BY_HOUR 按量计费
        :type ChargeType: str
        :param _ResourceConfigInfos: 资源配置，需填写对应算力规格ID和节点数量，算力规格ID查询接口为DescribeBillingSpecsPrice，eg：[{"Role":"WORKER", "InstanceType": "TI.S.MEDIUM.POST", "InstanceNum": 1}]
        :type ResourceConfigInfos: list of ResourceConfigInfo
        :param _FrameworkName: 训练框架名称，通过DescribeTrainingFrameworks接口查询，eg：SPARK、PYSPARK、TENSORFLOW、PYTORCH
        :type FrameworkName: str
        :param _FrameworkVersion: 训练框架版本，通过DescribeTrainingFrameworks接口查询，eg：1.15、1.9
        :type FrameworkVersion: str
        :param _FrameworkEnvironment: 训练框架环境，通过DescribeTrainingFrameworks接口查询，eg：tf1.15-py3.7-cpu、torch1.9-py3.8-cuda11.1-gpu
        :type FrameworkEnvironment: str
        :param _ResourceGroupId: 预付费专用资源组ID，通过DescribeBillingResourceGroups接口查询
        :type ResourceGroupId: str
        :param _Tags: 标签配置
        :type Tags: list of Tag
        :param _ImageInfo: 自定义镜像信息
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _CodePackagePath: COS代码包路径
        :type CodePackagePath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _StartCmdInfo: 任务的启动命令，按任务训练模式输入，如遇特殊字符导致配置失败，可使用EncodedStartCmdInfo参数
        :type StartCmdInfo: :class:`tencentcloud.tione.v20211111.models.StartCmdInfo`
        :param _TrainingMode: 训练模式，通过DescribeTrainingFrameworks接口查询，eg：PS_WORKER、DDP、MPI、HOROVOD
        :type TrainingMode: str
        :param _DataConfigs: 数据配置，依赖DataSource字段，数量不超过10个
        :type DataConfigs: list of DataConfig
        :param _VpcId: VPC Id
        :type VpcId: str
        :param _SubnetId: 子网Id
        :type SubnetId: str
        :param _Output: COS训练输出路径
        :type Output: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _LogConfig: CLS日志配置
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _TuningParameters: 调优参数，不超过2048个字符
        :type TuningParameters: str
        :param _LogEnable: 是否上报日志
        :type LogEnable: bool
        :param _Remark: 备注，不超过1024个字符
        :type Remark: str
        :param _TaskType: 任务类型:请求方来自哪里,eg: AutoML-train、WeData
        :type TaskType: str
        :param _TaskId: 请求方携带的主键ID，eg：14141341
        :type TaskId: str
        :param _DataSource: 数据来源，eg：DATASET、COS、CFS、CFSTurbo、HDFS、GooseFSx
        :type DataSource: str
        :param _CallbackUrl: 回调地址，用于创建/启动/停止训练任务的异步回调。回调格式&内容详见：[[TI-ONE接口回调说明]](https://cloud.tencent.com/document/product/851/84292)
        :type CallbackUrl: str
        :param _PreTrainModel: 太极预训练模型ID
        :type PreTrainModel: :class:`tencentcloud.tione.v20211111.models.PreTrainModel`
        :param _TAIJITemplateId: 太极模版ID
        :type TAIJITemplateId: str
        :param _AIMarketTemplateId: AI市场模板ID
        :type AIMarketTemplateId: str
        :param _AIMarketTemplateGroup: AI市场模板类别
        :type AIMarketTemplateGroup: str
        :param _ResourceGroupAnnotationInfo: 资源组感知的任务信息
        :type ResourceGroupAnnotationInfo: :class:`tencentcloud.tione.v20211111.models.ResourceGroupAnnotationInfo`
        :param _SchedulePolicy: 配置调度策略
        :type SchedulePolicy: :class:`tencentcloud.tione.v20211111.models.SchedulePolicy`
        :param _EncodedStartCmdInfo: 编码后的任务启动命令，与StartCmdInfo同时配置时，仅当前参数生效
        :type EncodedStartCmdInfo: :class:`tencentcloud.tione.v20211111.models.EncodedStartCmdInfo`
        :param _SourceTaskId: 复制任务时的源任务ID
        :type SourceTaskId: str
        :param _CodeRepos: 代码仓库配置
        :type CodeRepos: list of CodeRepoConfig
        """
        self._Name = None
        self._ChargeType = None
        self._ResourceConfigInfos = None
        self._FrameworkName = None
        self._FrameworkVersion = None
        self._FrameworkEnvironment = None
        self._ResourceGroupId = None
        self._Tags = None
        self._ImageInfo = None
        self._CodePackagePath = None
        self._StartCmdInfo = None
        self._TrainingMode = None
        self._DataConfigs = None
        self._VpcId = None
        self._SubnetId = None
        self._Output = None
        self._LogConfig = None
        self._TuningParameters = None
        self._LogEnable = None
        self._Remark = None
        self._TaskType = None
        self._TaskId = None
        self._DataSource = None
        self._CallbackUrl = None
        self._PreTrainModel = None
        self._TAIJITemplateId = None
        self._AIMarketTemplateId = None
        self._AIMarketTemplateGroup = None
        self._ResourceGroupAnnotationInfo = None
        self._SchedulePolicy = None
        self._EncodedStartCmdInfo = None
        self._SourceTaskId = None
        self._CodeRepos = None

    @property
    def Name(self):
        """训练任务名称，不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ChargeType(self):
        """计费模式，eg：PREPAID 包年包月（资源组）;
POSTPAID_BY_HOUR 按量计费
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceConfigInfos(self):
        """资源配置，需填写对应算力规格ID和节点数量，算力规格ID查询接口为DescribeBillingSpecsPrice，eg：[{"Role":"WORKER", "InstanceType": "TI.S.MEDIUM.POST", "InstanceNum": 1}]
        :rtype: list of ResourceConfigInfo
        """
        return self._ResourceConfigInfos

    @ResourceConfigInfos.setter
    def ResourceConfigInfos(self, ResourceConfigInfos):
        self._ResourceConfigInfos = ResourceConfigInfos

    @property
    def FrameworkName(self):
        """训练框架名称，通过DescribeTrainingFrameworks接口查询，eg：SPARK、PYSPARK、TENSORFLOW、PYTORCH
        :rtype: str
        """
        return self._FrameworkName

    @FrameworkName.setter
    def FrameworkName(self, FrameworkName):
        self._FrameworkName = FrameworkName

    @property
    def FrameworkVersion(self):
        """训练框架版本，通过DescribeTrainingFrameworks接口查询，eg：1.15、1.9
        :rtype: str
        """
        return self._FrameworkVersion

    @FrameworkVersion.setter
    def FrameworkVersion(self, FrameworkVersion):
        self._FrameworkVersion = FrameworkVersion

    @property
    def FrameworkEnvironment(self):
        """训练框架环境，通过DescribeTrainingFrameworks接口查询，eg：tf1.15-py3.7-cpu、torch1.9-py3.8-cuda11.1-gpu
        :rtype: str
        """
        return self._FrameworkEnvironment

    @FrameworkEnvironment.setter
    def FrameworkEnvironment(self, FrameworkEnvironment):
        self._FrameworkEnvironment = FrameworkEnvironment

    @property
    def ResourceGroupId(self):
        """预付费专用资源组ID，通过DescribeBillingResourceGroups接口查询
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def Tags(self):
        """标签配置
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def ImageInfo(self):
        """自定义镜像信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def CodePackagePath(self):
        """COS代码包路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._CodePackagePath

    @CodePackagePath.setter
    def CodePackagePath(self, CodePackagePath):
        self._CodePackagePath = CodePackagePath

    @property
    def StartCmdInfo(self):
        """任务的启动命令，按任务训练模式输入，如遇特殊字符导致配置失败，可使用EncodedStartCmdInfo参数
        :rtype: :class:`tencentcloud.tione.v20211111.models.StartCmdInfo`
        """
        return self._StartCmdInfo

    @StartCmdInfo.setter
    def StartCmdInfo(self, StartCmdInfo):
        self._StartCmdInfo = StartCmdInfo

    @property
    def TrainingMode(self):
        """训练模式，通过DescribeTrainingFrameworks接口查询，eg：PS_WORKER、DDP、MPI、HOROVOD
        :rtype: str
        """
        return self._TrainingMode

    @TrainingMode.setter
    def TrainingMode(self, TrainingMode):
        self._TrainingMode = TrainingMode

    @property
    def DataConfigs(self):
        """数据配置，依赖DataSource字段，数量不超过10个
        :rtype: list of DataConfig
        """
        return self._DataConfigs

    @DataConfigs.setter
    def DataConfigs(self, DataConfigs):
        self._DataConfigs = DataConfigs

    @property
    def VpcId(self):
        """VPC Id
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """子网Id
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def Output(self):
        """COS训练输出路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._Output

    @Output.setter
    def Output(self, Output):
        self._Output = Output

    @property
    def LogConfig(self):
        """CLS日志配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def TuningParameters(self):
        """调优参数，不超过2048个字符
        :rtype: str
        """
        return self._TuningParameters

    @TuningParameters.setter
    def TuningParameters(self, TuningParameters):
        self._TuningParameters = TuningParameters

    @property
    def LogEnable(self):
        """是否上报日志
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def Remark(self):
        """备注，不超过1024个字符
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def TaskType(self):
        """任务类型:请求方来自哪里,eg: AutoML-train、WeData
        :rtype: str
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def TaskId(self):
        """请求方携带的主键ID，eg：14141341
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def DataSource(self):
        """数据来源，eg：DATASET、COS、CFS、CFSTurbo、HDFS、GooseFSx
        :rtype: str
        """
        return self._DataSource

    @DataSource.setter
    def DataSource(self, DataSource):
        self._DataSource = DataSource

    @property
    def CallbackUrl(self):
        """回调地址，用于创建/启动/停止训练任务的异步回调。回调格式&内容详见：[[TI-ONE接口回调说明]](https://cloud.tencent.com/document/product/851/84292)
        :rtype: str
        """
        return self._CallbackUrl

    @CallbackUrl.setter
    def CallbackUrl(self, CallbackUrl):
        self._CallbackUrl = CallbackUrl

    @property
    def PreTrainModel(self):
        """太极预训练模型ID
        :rtype: :class:`tencentcloud.tione.v20211111.models.PreTrainModel`
        """
        return self._PreTrainModel

    @PreTrainModel.setter
    def PreTrainModel(self, PreTrainModel):
        self._PreTrainModel = PreTrainModel

    @property
    def TAIJITemplateId(self):
        """太极模版ID
        :rtype: str
        """
        return self._TAIJITemplateId

    @TAIJITemplateId.setter
    def TAIJITemplateId(self, TAIJITemplateId):
        self._TAIJITemplateId = TAIJITemplateId

    @property
    def AIMarketTemplateId(self):
        """AI市场模板ID
        :rtype: str
        """
        return self._AIMarketTemplateId

    @AIMarketTemplateId.setter
    def AIMarketTemplateId(self, AIMarketTemplateId):
        self._AIMarketTemplateId = AIMarketTemplateId

    @property
    def AIMarketTemplateGroup(self):
        """AI市场模板类别
        :rtype: str
        """
        return self._AIMarketTemplateGroup

    @AIMarketTemplateGroup.setter
    def AIMarketTemplateGroup(self, AIMarketTemplateGroup):
        self._AIMarketTemplateGroup = AIMarketTemplateGroup

    @property
    def ResourceGroupAnnotationInfo(self):
        """资源组感知的任务信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceGroupAnnotationInfo`
        """
        return self._ResourceGroupAnnotationInfo

    @ResourceGroupAnnotationInfo.setter
    def ResourceGroupAnnotationInfo(self, ResourceGroupAnnotationInfo):
        self._ResourceGroupAnnotationInfo = ResourceGroupAnnotationInfo

    @property
    def SchedulePolicy(self):
        """配置调度策略
        :rtype: :class:`tencentcloud.tione.v20211111.models.SchedulePolicy`
        """
        return self._SchedulePolicy

    @SchedulePolicy.setter
    def SchedulePolicy(self, SchedulePolicy):
        self._SchedulePolicy = SchedulePolicy

    @property
    def EncodedStartCmdInfo(self):
        """编码后的任务启动命令，与StartCmdInfo同时配置时，仅当前参数生效
        :rtype: :class:`tencentcloud.tione.v20211111.models.EncodedStartCmdInfo`
        """
        return self._EncodedStartCmdInfo

    @EncodedStartCmdInfo.setter
    def EncodedStartCmdInfo(self, EncodedStartCmdInfo):
        self._EncodedStartCmdInfo = EncodedStartCmdInfo

    @property
    def SourceTaskId(self):
        """复制任务时的源任务ID
        :rtype: str
        """
        return self._SourceTaskId

    @SourceTaskId.setter
    def SourceTaskId(self, SourceTaskId):
        self._SourceTaskId = SourceTaskId

    @property
    def CodeRepos(self):
        """代码仓库配置
        :rtype: list of CodeRepoConfig
        """
        return self._CodeRepos

    @CodeRepos.setter
    def CodeRepos(self, CodeRepos):
        self._CodeRepos = CodeRepos


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._ChargeType = params.get("ChargeType")
        if params.get("ResourceConfigInfos") is not None:
            self._ResourceConfigInfos = []
            for item in params.get("ResourceConfigInfos"):
                obj = ResourceConfigInfo()
                obj._deserialize(item)
                self._ResourceConfigInfos.append(obj)
        self._FrameworkName = params.get("FrameworkName")
        self._FrameworkVersion = params.get("FrameworkVersion")
        self._FrameworkEnvironment = params.get("FrameworkEnvironment")
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        if params.get("CodePackagePath") is not None:
            self._CodePackagePath = CosPathInfo()
            self._CodePackagePath._deserialize(params.get("CodePackagePath"))
        if params.get("StartCmdInfo") is not None:
            self._StartCmdInfo = StartCmdInfo()
            self._StartCmdInfo._deserialize(params.get("StartCmdInfo"))
        self._TrainingMode = params.get("TrainingMode")
        if params.get("DataConfigs") is not None:
            self._DataConfigs = []
            for item in params.get("DataConfigs"):
                obj = DataConfig()
                obj._deserialize(item)
                self._DataConfigs.append(obj)
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        if params.get("Output") is not None:
            self._Output = CosPathInfo()
            self._Output._deserialize(params.get("Output"))
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        self._TuningParameters = params.get("TuningParameters")
        self._LogEnable = params.get("LogEnable")
        self._Remark = params.get("Remark")
        self._TaskType = params.get("TaskType")
        self._TaskId = params.get("TaskId")
        self._DataSource = params.get("DataSource")
        self._CallbackUrl = params.get("CallbackUrl")
        if params.get("PreTrainModel") is not None:
            self._PreTrainModel = PreTrainModel()
            self._PreTrainModel._deserialize(params.get("PreTrainModel"))
        self._TAIJITemplateId = params.get("TAIJITemplateId")
        self._AIMarketTemplateId = params.get("AIMarketTemplateId")
        self._AIMarketTemplateGroup = params.get("AIMarketTemplateGroup")
        if params.get("ResourceGroupAnnotationInfo") is not None:
            self._ResourceGroupAnnotationInfo = ResourceGroupAnnotationInfo()
            self._ResourceGroupAnnotationInfo._deserialize(params.get("ResourceGroupAnnotationInfo"))
        if params.get("SchedulePolicy") is not None:
            self._SchedulePolicy = SchedulePolicy()
            self._SchedulePolicy._deserialize(params.get("SchedulePolicy"))
        if params.get("EncodedStartCmdInfo") is not None:
            self._EncodedStartCmdInfo = EncodedStartCmdInfo()
            self._EncodedStartCmdInfo._deserialize(params.get("EncodedStartCmdInfo"))
        self._SourceTaskId = params.get("SourceTaskId")
        if params.get("CodeRepos") is not None:
            self._CodeRepos = []
            for item in params.get("CodeRepos"):
                obj = CodeRepoConfig()
                obj._deserialize(item)
                self._CodeRepos.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateTrainingTaskResponse(AbstractModel):
    """CreateTrainingTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: 训练任务ID
        :type Id: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Id = None
        self._RequestId = None

    @property
    def Id(self):
        """训练任务ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._RequestId = params.get("RequestId")


class CreateVpcPrivateLinkRequest(AbstractModel):
    """CreateVpcPrivateLink请求参数结构体

    """

    def __init__(self):
        r"""
        :param _VpcId: vpc id
        :type VpcId: str
        :param _SubnetId: 子网Id	
        :type SubnetId: str
        :param _MappingDomain: 用户自定义映射域名
        :type MappingDomain: str
        """
        self._VpcId = None
        self._SubnetId = None
        self._MappingDomain = None

    @property
    def VpcId(self):
        """vpc id
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """子网Id	
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def MappingDomain(self):
        """用户自定义映射域名
        :rtype: str
        """
        return self._MappingDomain

    @MappingDomain.setter
    def MappingDomain(self, MappingDomain):
        self._MappingDomain = MappingDomain


    def _deserialize(self, params):
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._MappingDomain = params.get("MappingDomain")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CreateVpcPrivateLinkResponse(AbstractModel):
    """CreateVpcPrivateLink返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: id值
        :type Id: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Id = None
        self._RequestId = None

    @property
    def Id(self):
        """id值
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._RequestId = params.get("RequestId")


class CronInfo(AbstractModel):
    """跑批任务周期描述

    """

    def __init__(self):
        r"""
        :param _CronConfig: cron配置
        :type CronConfig: str
        :param _StartTime: 周期开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :type StartTime: str
        :param _EndTime: 周期结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :type EndTime: str
        """
        self._CronConfig = None
        self._StartTime = None
        self._EndTime = None

    @property
    def CronConfig(self):
        """cron配置
        :rtype: str
        """
        return self._CronConfig

    @CronConfig.setter
    def CronConfig(self, CronConfig):
        self._CronConfig = CronConfig

    @property
    def StartTime(self):
        """周期开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """周期结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._CronConfig = params.get("CronConfig")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CronScaleJob(AbstractModel):
    """定时扩缩任务

    """

    def __init__(self):
        r"""
        :param _Schedule: Cron表达式，标识任务的执行时间，精确到分钟级
        :type Schedule: str
        :param _Name: 定时任务名
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _TargetReplicas: 目标实例数
注意：此字段可能返回 null，表示取不到有效值。
        :type TargetReplicas: int
        :param _MinReplicas: 目标min
注意：此字段可能返回 null，表示取不到有效值。
        :type MinReplicas: int
        :param _MaxReplicas: 目标max
注意：此字段可能返回 null，表示取不到有效值。
        :type MaxReplicas: int
        :param _ExcludeDates: 例外时间，Cron表达式，在对应时间内不执行任务。最多支持3条。
注意：此字段可能返回 null，表示取不到有效值。
        :type ExcludeDates: list of str
        """
        self._Schedule = None
        self._Name = None
        self._TargetReplicas = None
        self._MinReplicas = None
        self._MaxReplicas = None
        self._ExcludeDates = None

    @property
    def Schedule(self):
        """Cron表达式，标识任务的执行时间，精确到分钟级
        :rtype: str
        """
        return self._Schedule

    @Schedule.setter
    def Schedule(self, Schedule):
        self._Schedule = Schedule

    @property
    def Name(self):
        """定时任务名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def TargetReplicas(self):
        """目标实例数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TargetReplicas

    @TargetReplicas.setter
    def TargetReplicas(self, TargetReplicas):
        self._TargetReplicas = TargetReplicas

    @property
    def MinReplicas(self):
        """目标min
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._MinReplicas

    @MinReplicas.setter
    def MinReplicas(self, MinReplicas):
        self._MinReplicas = MinReplicas

    @property
    def MaxReplicas(self):
        """目标max
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._MaxReplicas

    @MaxReplicas.setter
    def MaxReplicas(self, MaxReplicas):
        self._MaxReplicas = MaxReplicas

    @property
    def ExcludeDates(self):
        """例外时间，Cron表达式，在对应时间内不执行任务。最多支持3条。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._ExcludeDates

    @ExcludeDates.setter
    def ExcludeDates(self, ExcludeDates):
        self._ExcludeDates = ExcludeDates


    def _deserialize(self, params):
        self._Schedule = params.get("Schedule")
        self._Name = params.get("Name")
        self._TargetReplicas = params.get("TargetReplicas")
        self._MinReplicas = params.get("MinReplicas")
        self._MaxReplicas = params.get("MaxReplicas")
        self._ExcludeDates = params.get("ExcludeDates")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CrossTenantENIInfo(AbstractModel):
    """跨租户弹性网卡下Pod调用信息

    """

    def __init__(self):
        r"""
        :param _PrimaryIP: Pod IP
注意：此字段可能返回 null，表示取不到有效值。
        :type PrimaryIP: str
        :param _Port: Pod Port
注意：此字段可能返回 null，表示取不到有效值。
        :type Port: str
        """
        self._PrimaryIP = None
        self._Port = None

    @property
    def PrimaryIP(self):
        """Pod IP
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PrimaryIP

    @PrimaryIP.setter
    def PrimaryIP(self, PrimaryIP):
        self._PrimaryIP = PrimaryIP

    @property
    def Port(self):
        """Pod Port
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        self._Port = Port


    def _deserialize(self, params):
        self._PrimaryIP = params.get("PrimaryIP")
        self._Port = params.get("Port")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CustomTrainingData(AbstractModel):
    """自定义指标

    """

    def __init__(self):
        r"""
        :param _MetricName: 指标名
注意：此字段可能返回 null，表示取不到有效值。
        :type MetricName: str
        :param _Metrics: 指标
注意：此字段可能返回 null，表示取不到有效值。
        :type Metrics: list of CustomTrainingMetric
        """
        self._MetricName = None
        self._Metrics = None

    @property
    def MetricName(self):
        """指标名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._MetricName

    @MetricName.setter
    def MetricName(self, MetricName):
        self._MetricName = MetricName

    @property
    def Metrics(self):
        """指标
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of CustomTrainingMetric
        """
        return self._Metrics

    @Metrics.setter
    def Metrics(self, Metrics):
        self._Metrics = Metrics


    def _deserialize(self, params):
        self._MetricName = params.get("MetricName")
        if params.get("Metrics") is not None:
            self._Metrics = []
            for item in params.get("Metrics"):
                obj = CustomTrainingMetric()
                obj._deserialize(item)
                self._Metrics.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CustomTrainingMetric(AbstractModel):
    """自定义指标

    """

    def __init__(self):
        r"""
        :param _XType: X轴数据类型: TIMESTAMP; EPOCH; STEP
        :type XType: str
        :param _Points: 数据点
注意：此字段可能返回 null，表示取不到有效值。
        :type Points: list of CustomTrainingPoint
        """
        self._XType = None
        self._Points = None

    @property
    def XType(self):
        """X轴数据类型: TIMESTAMP; EPOCH; STEP
        :rtype: str
        """
        return self._XType

    @XType.setter
    def XType(self, XType):
        self._XType = XType

    @property
    def Points(self):
        """数据点
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of CustomTrainingPoint
        """
        return self._Points

    @Points.setter
    def Points(self, Points):
        self._Points = Points


    def _deserialize(self, params):
        self._XType = params.get("XType")
        if params.get("Points") is not None:
            self._Points = []
            for item in params.get("Points"):
                obj = CustomTrainingPoint()
                obj._deserialize(item)
                self._Points.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class CustomTrainingPoint(AbstractModel):
    """自定义训练指标数据点

    """

    def __init__(self):
        r"""
        :param _XValue: X值
        :type XValue: float
        :param _YValue: Y值
        :type YValue: float
        """
        self._XValue = None
        self._YValue = None

    @property
    def XValue(self):
        """X值
        :rtype: float
        """
        return self._XValue

    @XValue.setter
    def XValue(self, XValue):
        self._XValue = XValue

    @property
    def YValue(self):
        """Y值
        :rtype: float
        """
        return self._YValue

    @YValue.setter
    def YValue(self, YValue):
        self._YValue = YValue


    def _deserialize(self, params):
        self._XValue = params.get("XValue")
        self._YValue = params.get("YValue")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DataArray(AbstractModel):
    """数组信息

    """

    def __init__(self):
        r"""
        :param _Values: 数组信息
        :type Values: list of float
        """
        self._Values = None

    @property
    def Values(self):
        """数组信息
        :rtype: list of float
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values


    def _deserialize(self, params):
        self._Values = params.get("Values")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DataCenterDataSource(AbstractModel):
    """数据中心数据源存储（私有化使用）

    """


class DataConfig(AbstractModel):
    """数据配置

    """

    def __init__(self):
        r"""
        :param _MappingPath: 映射路径
        :type MappingPath: str
        :param _DataSourceUsage: 存储用途
可选值为 BUILTIN_CODE, BUILTIN_DATA, BUILTIN_MODEL, USER_DATA, USER_CODE, USER_MODEL, OUTPUT, OTHER
注意：此字段可能返回 null，表示取不到有效值。
        :type DataSourceUsage: str
        :param _DataSourceType: DATASET、COS、CFS、CFSTurbo、GooseFSx、HDFS、WEDATA_HDFS
注意：此字段可能返回 null，表示取不到有效值。
        :type DataSourceType: str
        :param _DataSetSource: 来自数据集的数据
注意：此字段可能返回 null，表示取不到有效值。
        :type DataSetSource: :class:`tencentcloud.tione.v20211111.models.DataSetConfig`
        :param _COSSource: 来自cos的数据
注意：此字段可能返回 null，表示取不到有效值。
        :type COSSource: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _CFSSource: 来自CFS的数据
注意：此字段可能返回 null，表示取不到有效值。
        :type CFSSource: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        :param _HDFSSource: 来自HDFS的数据
注意：此字段可能返回 null，表示取不到有效值。
        :type HDFSSource: :class:`tencentcloud.tione.v20211111.models.HDFSConfig`
        :param _WeDataHDFSSource: 来自WEDATA_HDFS的数据
注意：此字段可能返回 null，表示取不到有效值。
        :type WeDataHDFSSource: :class:`tencentcloud.tione.v20211111.models.WeDataHDFSConfig`
        :param _AIMarketAlgoPreModelSource: 配置AI市场算法预训练模型作为数据
注意：此字段可能返回 null，表示取不到有效值。
        :type AIMarketAlgoPreModelSource: :class:`tencentcloud.tione.v20211111.models.AIMarketAlgo`
        :param _GooseFSSource: 配置GooseFS的数据
注意：此字段可能返回 null，表示取不到有效值。
        :type GooseFSSource: :class:`tencentcloud.tione.v20211111.models.GooseFS`
        :param _CFSTurboSource: 配置TurboFS的数据
注意：此字段可能返回 null，表示取不到有效值。
        :type CFSTurboSource: :class:`tencentcloud.tione.v20211111.models.CFSTurbo`
        :param _AIMarketAlgoDataSource: 配置AI市场内置数据
注意：此字段可能返回 null，表示取不到有效值。
        :type AIMarketAlgoDataSource: :class:`tencentcloud.tione.v20211111.models.AIMarketAlgo`
        :param _LocalDiskSource: 来自本地磁盘的信息
注意：此字段可能返回 null，表示取不到有效值。
        :type LocalDiskSource: :class:`tencentcloud.tione.v20211111.models.LocalDisk`
        :param _CBSSource: CBS配置信息
注意：此字段可能返回 null，表示取不到有效值。
        :type CBSSource: :class:`tencentcloud.tione.v20211111.models.CBSConfig`
        :param _HostPathSource: 主机路径信息
        :type HostPathSource: :class:`tencentcloud.tione.v20211111.models.HostPathSource`
        """
        self._MappingPath = None
        self._DataSourceUsage = None
        self._DataSourceType = None
        self._DataSetSource = None
        self._COSSource = None
        self._CFSSource = None
        self._HDFSSource = None
        self._WeDataHDFSSource = None
        self._AIMarketAlgoPreModelSource = None
        self._GooseFSSource = None
        self._CFSTurboSource = None
        self._AIMarketAlgoDataSource = None
        self._LocalDiskSource = None
        self._CBSSource = None
        self._HostPathSource = None

    @property
    def MappingPath(self):
        """映射路径
        :rtype: str
        """
        return self._MappingPath

    @MappingPath.setter
    def MappingPath(self, MappingPath):
        self._MappingPath = MappingPath

    @property
    def DataSourceUsage(self):
        """存储用途
可选值为 BUILTIN_CODE, BUILTIN_DATA, BUILTIN_MODEL, USER_DATA, USER_CODE, USER_MODEL, OUTPUT, OTHER
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DataSourceUsage

    @DataSourceUsage.setter
    def DataSourceUsage(self, DataSourceUsage):
        self._DataSourceUsage = DataSourceUsage

    @property
    def DataSourceType(self):
        """DATASET、COS、CFS、CFSTurbo、GooseFSx、HDFS、WEDATA_HDFS
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DataSourceType

    @DataSourceType.setter
    def DataSourceType(self, DataSourceType):
        self._DataSourceType = DataSourceType

    @property
    def DataSetSource(self):
        """来自数据集的数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.DataSetConfig`
        """
        return self._DataSetSource

    @DataSetSource.setter
    def DataSetSource(self, DataSetSource):
        self._DataSetSource = DataSetSource

    @property
    def COSSource(self):
        """来自cos的数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._COSSource

    @COSSource.setter
    def COSSource(self, COSSource):
        self._COSSource = COSSource

    @property
    def CFSSource(self):
        """来自CFS的数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        """
        return self._CFSSource

    @CFSSource.setter
    def CFSSource(self, CFSSource):
        self._CFSSource = CFSSource

    @property
    def HDFSSource(self):
        """来自HDFS的数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.HDFSConfig`
        """
        return self._HDFSSource

    @HDFSSource.setter
    def HDFSSource(self, HDFSSource):
        self._HDFSSource = HDFSSource

    @property
    def WeDataHDFSSource(self):
        """来自WEDATA_HDFS的数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.WeDataHDFSConfig`
        """
        return self._WeDataHDFSSource

    @WeDataHDFSSource.setter
    def WeDataHDFSSource(self, WeDataHDFSSource):
        self._WeDataHDFSSource = WeDataHDFSSource

    @property
    def AIMarketAlgoPreModelSource(self):
        """配置AI市场算法预训练模型作为数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.AIMarketAlgo`
        """
        return self._AIMarketAlgoPreModelSource

    @AIMarketAlgoPreModelSource.setter
    def AIMarketAlgoPreModelSource(self, AIMarketAlgoPreModelSource):
        self._AIMarketAlgoPreModelSource = AIMarketAlgoPreModelSource

    @property
    def GooseFSSource(self):
        """配置GooseFS的数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.GooseFS`
        """
        return self._GooseFSSource

    @GooseFSSource.setter
    def GooseFSSource(self, GooseFSSource):
        self._GooseFSSource = GooseFSSource

    @property
    def CFSTurboSource(self):
        """配置TurboFS的数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSTurbo`
        """
        return self._CFSTurboSource

    @CFSTurboSource.setter
    def CFSTurboSource(self, CFSTurboSource):
        self._CFSTurboSource = CFSTurboSource

    @property
    def AIMarketAlgoDataSource(self):
        """配置AI市场内置数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.AIMarketAlgo`
        """
        return self._AIMarketAlgoDataSource

    @AIMarketAlgoDataSource.setter
    def AIMarketAlgoDataSource(self, AIMarketAlgoDataSource):
        self._AIMarketAlgoDataSource = AIMarketAlgoDataSource

    @property
    def LocalDiskSource(self):
        """来自本地磁盘的信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.LocalDisk`
        """
        return self._LocalDiskSource

    @LocalDiskSource.setter
    def LocalDiskSource(self, LocalDiskSource):
        self._LocalDiskSource = LocalDiskSource

    @property
    def CBSSource(self):
        """CBS配置信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CBSConfig`
        """
        return self._CBSSource

    @CBSSource.setter
    def CBSSource(self, CBSSource):
        self._CBSSource = CBSSource

    @property
    def HostPathSource(self):
        """主机路径信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.HostPathSource`
        """
        return self._HostPathSource

    @HostPathSource.setter
    def HostPathSource(self, HostPathSource):
        self._HostPathSource = HostPathSource


    def _deserialize(self, params):
        self._MappingPath = params.get("MappingPath")
        self._DataSourceUsage = params.get("DataSourceUsage")
        self._DataSourceType = params.get("DataSourceType")
        if params.get("DataSetSource") is not None:
            self._DataSetSource = DataSetConfig()
            self._DataSetSource._deserialize(params.get("DataSetSource"))
        if params.get("COSSource") is not None:
            self._COSSource = CosPathInfo()
            self._COSSource._deserialize(params.get("COSSource"))
        if params.get("CFSSource") is not None:
            self._CFSSource = CFSConfig()
            self._CFSSource._deserialize(params.get("CFSSource"))
        if params.get("HDFSSource") is not None:
            self._HDFSSource = HDFSConfig()
            self._HDFSSource._deserialize(params.get("HDFSSource"))
        if params.get("WeDataHDFSSource") is not None:
            self._WeDataHDFSSource = WeDataHDFSConfig()
            self._WeDataHDFSSource._deserialize(params.get("WeDataHDFSSource"))
        if params.get("AIMarketAlgoPreModelSource") is not None:
            self._AIMarketAlgoPreModelSource = AIMarketAlgo()
            self._AIMarketAlgoPreModelSource._deserialize(params.get("AIMarketAlgoPreModelSource"))
        if params.get("GooseFSSource") is not None:
            self._GooseFSSource = GooseFS()
            self._GooseFSSource._deserialize(params.get("GooseFSSource"))
        if params.get("CFSTurboSource") is not None:
            self._CFSTurboSource = CFSTurbo()
            self._CFSTurboSource._deserialize(params.get("CFSTurboSource"))
        if params.get("AIMarketAlgoDataSource") is not None:
            self._AIMarketAlgoDataSource = AIMarketAlgo()
            self._AIMarketAlgoDataSource._deserialize(params.get("AIMarketAlgoDataSource"))
        if params.get("LocalDiskSource") is not None:
            self._LocalDiskSource = LocalDisk()
            self._LocalDiskSource._deserialize(params.get("LocalDiskSource"))
        if params.get("CBSSource") is not None:
            self._CBSSource = CBSConfig()
            self._CBSSource._deserialize(params.get("CBSSource"))
        if params.get("HostPathSource") is not None:
            self._HostPathSource = HostPathSource()
            self._HostPathSource._deserialize(params.get("HostPathSource"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)



class DataDisk(AbstractModel):
    """CVM节点数据盘

    """

    def __init__(self):
        r"""
        :param _DiskSize: 云硬盘容量
注意：此字段可能返回 null，表示取不到有效值。
        :type DiskSize: int
        :param _DiskType: 云硬盘类型
注意：此字段可能返回 null，表示取不到有效值。
        :type DiskType: str
        :param _DiskId: 云硬盘ID
注意：此字段可能返回 null，表示取不到有效值。
        :type DiskId: str
        :param _DeleteWithInstance: 是否在CVM实例删除时一并删掉
注意：此字段可能返回 null，表示取不到有效值。
        :type DeleteWithInstance: bool
        :param _SnapshotId: 磁盘快照ID
注意：此字段可能返回 null，表示取不到有效值。
        :type SnapshotId: str
        :param _Encrypt: 是否加密
注意：此字段可能返回 null，表示取不到有效值。
        :type Encrypt: bool
        :param _KmsKeyId: 加密key的ID
注意：此字段可能返回 null，表示取不到有效值。
        :type KmsKeyId: str
        :param _ThroughputPerformance: 云硬盘性能，单位：MB/s
注意：此字段可能返回 null，表示取不到有效值。
        :type ThroughputPerformance: int
        :param _CdcId: 所属的独享集群ID
注意：此字段可能返回 null，表示取不到有效值。
        :type CdcId: str
        :param _BurstPerformance: 突发性能
注意：此字段可能返回 null，表示取不到有效值。
        :type BurstPerformance: bool
        """
        self._DiskSize = None
        self._DiskType = None
        self._DiskId = None
        self._DeleteWithInstance = None
        self._SnapshotId = None
        self._Encrypt = None
        self._KmsKeyId = None
        self._ThroughputPerformance = None
        self._CdcId = None
        self._BurstPerformance = None

    @property
    def DiskSize(self):
        """云硬盘容量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._DiskSize

    @DiskSize.setter
    def DiskSize(self, DiskSize):
        self._DiskSize = DiskSize

    @property
    def DiskType(self):
        """云硬盘类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DiskType

    @DiskType.setter
    def DiskType(self, DiskType):
        self._DiskType = DiskType

    @property
    def DiskId(self):
        """云硬盘ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DiskId

    @DiskId.setter
    def DiskId(self, DiskId):
        self._DiskId = DiskId

    @property
    def DeleteWithInstance(self):
        """是否在CVM实例删除时一并删掉
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._DeleteWithInstance

    @DeleteWithInstance.setter
    def DeleteWithInstance(self, DeleteWithInstance):
        self._DeleteWithInstance = DeleteWithInstance

    @property
    def SnapshotId(self):
        """磁盘快照ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SnapshotId

    @SnapshotId.setter
    def SnapshotId(self, SnapshotId):
        self._SnapshotId = SnapshotId

    @property
    def Encrypt(self):
        """是否加密
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._Encrypt

    @Encrypt.setter
    def Encrypt(self, Encrypt):
        self._Encrypt = Encrypt

    @property
    def KmsKeyId(self):
        """加密key的ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._KmsKeyId

    @KmsKeyId.setter
    def KmsKeyId(self, KmsKeyId):
        self._KmsKeyId = KmsKeyId

    @property
    def ThroughputPerformance(self):
        """云硬盘性能，单位：MB/s
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ThroughputPerformance

    @ThroughputPerformance.setter
    def ThroughputPerformance(self, ThroughputPerformance):
        self._ThroughputPerformance = ThroughputPerformance

    @property
    def CdcId(self):
        """所属的独享集群ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CdcId

    @CdcId.setter
    def CdcId(self, CdcId):
        self._CdcId = CdcId

    @property
    def BurstPerformance(self):
        """突发性能
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._BurstPerformance

    @BurstPerformance.setter
    def BurstPerformance(self, BurstPerformance):
        self._BurstPerformance = BurstPerformance


    def _deserialize(self, params):
        self._DiskSize = params.get("DiskSize")
        self._DiskType = params.get("DiskType")
        self._DiskId = params.get("DiskId")
        self._DeleteWithInstance = params.get("DeleteWithInstance")
        self._SnapshotId = params.get("SnapshotId")
        self._Encrypt = params.get("Encrypt")
        self._KmsKeyId = params.get("KmsKeyId")
        self._ThroughputPerformance = params.get("ThroughputPerformance")
        self._CdcId = params.get("CdcId")
        self._BurstPerformance = params.get("BurstPerformance")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DataPipelineConfig(AbstractModel):
    """数据构建Pipeline配置

    """

    def __init__(self):
        r"""
        :param _Pipeline: pipeline枚举值
注意：此字段可能返回 null，表示取不到有效值。
        :type Pipeline: str
        :param _Name: pipeline名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _Description: pipeline使用说明
注意：此字段可能返回 null，表示取不到有效值。
        :type Description: str
        """
        self._Pipeline = None
        self._Name = None
        self._Description = None

    @property
    def Pipeline(self):
        """pipeline枚举值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Pipeline

    @Pipeline.setter
    def Pipeline(self, Pipeline):
        self._Pipeline = Pipeline

    @property
    def Name(self):
        """pipeline名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Description(self):
        """pipeline使用说明
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._Pipeline = params.get("Pipeline")
        self._Name = params.get("Name")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DataPipelineTask(AbstractModel):
    """数据构建任务信息

    """

    def __init__(self):
        r"""
        :param _TaskId: 数据构建任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _TaskName: 数据构建任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskName: str
        :param _Creator: 数据构建任务的创建者ID
注意：此字段可能返回 null，表示取不到有效值。
        :type Creator: str
        :param _CreateTime: 数据构建任务的创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _UpdateTime: 数据构建任务的更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTime: str
        :param _DataPipelines: 当前数据构建任务所选择的Pipeline
注意：此字段可能返回 null，表示取不到有效值。
        :type DataPipelines: list of DataPipelineConfig
        :param _DataScenes: 当前数据构建任务所选择的通用算法任务
注意：此字段可能返回 null，表示取不到有效值。
        :type DataScenes: list of DataSceneConfig
        :param _Description: 数据构建任务的描述
注意：此字段可能返回 null，表示取不到有效值。
        :type Description: str
        :param _NotebookId: 数据构建任务绑定的Notebook的ID
注意：此字段可能返回 null，表示取不到有效值。
        :type NotebookId: str
        :param _NotebookName: 数据构建任务绑定的Notebook的名字
注意：此字段可能返回 null，表示取不到有效值。
        :type NotebookName: str
        :param _Tags: 数据构建任务标签
        :type Tags: list of Tag
        :param _CreatorNickname: 数据构建任务的创建者名称
        :type CreatorNickname: str
        """
        self._TaskId = None
        self._TaskName = None
        self._Creator = None
        self._CreateTime = None
        self._UpdateTime = None
        self._DataPipelines = None
        self._DataScenes = None
        self._Description = None
        self._NotebookId = None
        self._NotebookName = None
        self._Tags = None
        self._CreatorNickname = None

    @property
    def TaskId(self):
        """数据构建任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """数据构建任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def Creator(self):
        """数据构建任务的创建者ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def CreateTime(self):
        """数据构建任务的创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """数据构建任务的更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def DataPipelines(self):
        """当前数据构建任务所选择的Pipeline
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataPipelineConfig
        """
        return self._DataPipelines

    @DataPipelines.setter
    def DataPipelines(self, DataPipelines):
        self._DataPipelines = DataPipelines

    @property
    def DataScenes(self):
        """当前数据构建任务所选择的通用算法任务
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataSceneConfig
        """
        return self._DataScenes

    @DataScenes.setter
    def DataScenes(self, DataScenes):
        self._DataScenes = DataScenes

    @property
    def Description(self):
        """数据构建任务的描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def NotebookId(self):
        """数据构建任务绑定的Notebook的ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._NotebookId

    @NotebookId.setter
    def NotebookId(self, NotebookId):
        self._NotebookId = NotebookId

    @property
    def NotebookName(self):
        """数据构建任务绑定的Notebook的名字
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._NotebookName

    @NotebookName.setter
    def NotebookName(self, NotebookName):
        self._NotebookName = NotebookName

    @property
    def Tags(self):
        """数据构建任务标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def CreatorNickname(self):
        """数据构建任务的创建者名称
        :rtype: str
        """
        return self._CreatorNickname

    @CreatorNickname.setter
    def CreatorNickname(self, CreatorNickname):
        self._CreatorNickname = CreatorNickname


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        self._Creator = params.get("Creator")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        if params.get("DataPipelines") is not None:
            self._DataPipelines = []
            for item in params.get("DataPipelines"):
                obj = DataPipelineConfig()
                obj._deserialize(item)
                self._DataPipelines.append(obj)
        if params.get("DataScenes") is not None:
            self._DataScenes = []
            for item in params.get("DataScenes"):
                obj = DataSceneConfig()
                obj._deserialize(item)
                self._DataScenes.append(obj)
        self._Description = params.get("Description")
        self._NotebookId = params.get("NotebookId")
        self._NotebookName = params.get("NotebookName")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._CreatorNickname = params.get("CreatorNickname")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DataPoint(AbstractModel):
    """数据点

    """

    def __init__(self):
        r"""
        :param _Name: 指标名字
        :type Name: str
        :param _Value: 值
        :type Value: float
        """
        self._Name = None
        self._Value = None

    @property
    def Name(self):
        """指标名字
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Value(self):
        """值
        :rtype: float
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DataPointMonitor(AbstractModel):
    """监控数据点

    """

    def __init__(self):
        r"""
        :param _Dimensions: 实例对象维度组合
        :type Dimensions: list of DimensionMonitor
        :param _Timestamps: 时间戳数组，表示那些时间点有数据，缺失的时间戳，没有数据点，可以理解为掉点了
        :type Timestamps: list of float
        :param _Values: 监控值数组，该数组和Timestamps一一对应
        :type Values: list of float
        """
        self._Dimensions = None
        self._Timestamps = None
        self._Values = None

    @property
    def Dimensions(self):
        """实例对象维度组合
        :rtype: list of DimensionMonitor
        """
        return self._Dimensions

    @Dimensions.setter
    def Dimensions(self, Dimensions):
        self._Dimensions = Dimensions

    @property
    def Timestamps(self):
        """时间戳数组，表示那些时间点有数据，缺失的时间戳，没有数据点，可以理解为掉点了
        :rtype: list of float
        """
        return self._Timestamps

    @Timestamps.setter
    def Timestamps(self, Timestamps):
        self._Timestamps = Timestamps

    @property
    def Values(self):
        """监控值数组，该数组和Timestamps一一对应
        :rtype: list of float
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values


    def _deserialize(self, params):
        if params.get("Dimensions") is not None:
            self._Dimensions = []
            for item in params.get("Dimensions"):
                obj = DimensionMonitor()
                obj._deserialize(item)
                self._Dimensions.append(obj)
        self._Timestamps = params.get("Timestamps")
        self._Values = params.get("Values")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DataRecordLLM(AbstractModel):
    """大模型数据单行样本

    """

    def __init__(self):
        r"""
        :param _RecordId: 样本ID
注意：此字段可能返回 null，表示取不到有效值。
        :type RecordId: str
        :param _DatasetId: 数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetId: str
        :param _Values: 样本内容
注意：此字段可能返回 null，表示取不到有效值。
        :type Values: list of str
        :param _ImageList: 图片列表
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageList: list of ImageData
        :param _RecordIndex: 样本索引id
注意：此字段可能返回 null，表示取不到有效值。
        :type RecordIndex: int
        :param _FilePath: 样本所在文件路径
        :type FilePath: str
        :param _AnnotationStatus: 是否已标
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationStatus: int
        """
        self._RecordId = None
        self._DatasetId = None
        self._Values = None
        self._ImageList = None
        self._RecordIndex = None
        self._FilePath = None
        self._AnnotationStatus = None

    @property
    def RecordId(self):
        """样本ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RecordId

    @RecordId.setter
    def RecordId(self, RecordId):
        self._RecordId = RecordId

    @property
    def DatasetId(self):
        """数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def Values(self):
        """样本内容
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values

    @property
    def ImageList(self):
        """图片列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ImageData
        """
        return self._ImageList

    @ImageList.setter
    def ImageList(self, ImageList):
        self._ImageList = ImageList

    @property
    def RecordIndex(self):
        """样本索引id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._RecordIndex

    @RecordIndex.setter
    def RecordIndex(self, RecordIndex):
        self._RecordIndex = RecordIndex

    @property
    def FilePath(self):
        """样本所在文件路径
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        self._FilePath = FilePath

    @property
    def AnnotationStatus(self):
        """是否已标
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._AnnotationStatus

    @AnnotationStatus.setter
    def AnnotationStatus(self, AnnotationStatus):
        self._AnnotationStatus = AnnotationStatus


    def _deserialize(self, params):
        self._RecordId = params.get("RecordId")
        self._DatasetId = params.get("DatasetId")
        self._Values = params.get("Values")
        if params.get("ImageList") is not None:
            self._ImageList = []
            for item in params.get("ImageList"):
                obj = ImageData()
                obj._deserialize(item)
                self._ImageList.append(obj)
        self._RecordIndex = params.get("RecordIndex")
        self._FilePath = params.get("FilePath")
        self._AnnotationStatus = params.get("AnnotationStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DataSceneConfig(AbstractModel):
    """数据构建通用算法任务信息

    """

    def __init__(self):
        r"""
        :param _ClassNames: 通用算法任务所属类别名称列表
注意：此字段可能返回 null，表示取不到有效值。
        :type ClassNames: list of str
        :param _Scene: 通用算法任务对应场景ID
注意：此字段可能返回 null，表示取不到有效值。
        :type Scene: str
        """
        self._ClassNames = None
        self._Scene = None

    @property
    def ClassNames(self):
        """通用算法任务所属类别名称列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._ClassNames

    @ClassNames.setter
    def ClassNames(self, ClassNames):
        self._ClassNames = ClassNames

    @property
    def Scene(self):
        """通用算法任务对应场景ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Scene

    @Scene.setter
    def Scene(self, Scene):
        self._Scene = Scene


    def _deserialize(self, params):
        self._ClassNames = params.get("ClassNames")
        self._Scene = params.get("Scene")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DataSceneNode(AbstractModel):
    """数据构建通用算法任务类别树节点

    """

    def __init__(self):
        r"""
        :param _ClassName: 通用算法任务所属类别名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ClassName: str
        :param _Scene: 通用算法任务对应场景ID
注意：此字段可能返回 null，表示取不到有效值。
        :type Scene: str
        :param _Children: 子类别节点列表
注意：此字段可能返回 null，表示取不到有效值。
        :type Children: list of DataSceneNode
        """
        self._ClassName = None
        self._Scene = None
        self._Children = None

    @property
    def ClassName(self):
        """通用算法任务所属类别名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ClassName

    @ClassName.setter
    def ClassName(self, ClassName):
        self._ClassName = ClassName

    @property
    def Scene(self):
        """通用算法任务对应场景ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Scene

    @Scene.setter
    def Scene(self, Scene):
        self._Scene = Scene

    @property
    def Children(self):
        """子类别节点列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataSceneNode
        """
        return self._Children

    @Children.setter
    def Children(self, Children):
        self._Children = Children


    def _deserialize(self, params):
        self._ClassName = params.get("ClassName")
        self._Scene = params.get("Scene")
        if params.get("Children") is not None:
            self._Children = []
            for item in params.get("Children"):
                obj = DataSceneNode()
                obj._deserialize(item)
                self._Children.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DataSetConfig(AbstractModel):
    """数据集结构体

    """

    def __init__(self):
        r"""
        :param _Id: 数据集ID
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """数据集ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DatasetConfigs(AbstractModel):
    """自动学习数据集配置信息

    """

    def __init__(self):
        r"""
        :param _TrainDatasetId: 自动学习训练数据集id
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainDatasetId: str
        :param _ValidationDatasetId: 自动学习验证数据集id
注意：此字段可能返回 null，表示取不到有效值。
        :type ValidationDatasetId: str
        :param _TestDatasetId: 自动学习测试数据集id
注意：此字段可能返回 null，表示取不到有效值。
        :type TestDatasetId: str
        """
        self._TrainDatasetId = None
        self._ValidationDatasetId = None
        self._TestDatasetId = None

    @property
    def TrainDatasetId(self):
        """自动学习训练数据集id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainDatasetId

    @TrainDatasetId.setter
    def TrainDatasetId(self, TrainDatasetId):
        self._TrainDatasetId = TrainDatasetId

    @property
    def ValidationDatasetId(self):
        """自动学习验证数据集id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ValidationDatasetId

    @ValidationDatasetId.setter
    def ValidationDatasetId(self, ValidationDatasetId):
        self._ValidationDatasetId = ValidationDatasetId

    @property
    def TestDatasetId(self):
        """自动学习测试数据集id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TestDatasetId

    @TestDatasetId.setter
    def TestDatasetId(self, TestDatasetId):
        self._TestDatasetId = TestDatasetId


    def _deserialize(self, params):
        self._TrainDatasetId = params.get("TrainDatasetId")
        self._ValidationDatasetId = params.get("ValidationDatasetId")
        self._TestDatasetId = params.get("TestDatasetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DatasetFileInfo(AbstractModel):
    """数据集快照存储详情

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集id
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetId: str
        :param _StorageDataPath: 数据源cos 信息
注意：此字段可能返回 null，表示取不到有效值。
        :type StorageDataPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _StorageLabelPath: 数据集存储cos信息
注意：此字段可能返回 null，表示取不到有效值。
        :type StorageLabelPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _DatasetName: 数据集名称
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetName: str
        :param _DatasetVersion: 数据集版本
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetVersion: str
        """
        self._DatasetId = None
        self._StorageDataPath = None
        self._StorageLabelPath = None
        self._DatasetName = None
        self._DatasetVersion = None

    @property
    def DatasetId(self):
        """数据集id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def StorageDataPath(self):
        """数据源cos 信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._StorageDataPath

    @StorageDataPath.setter
    def StorageDataPath(self, StorageDataPath):
        self._StorageDataPath = StorageDataPath

    @property
    def StorageLabelPath(self):
        """数据集存储cos信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._StorageLabelPath

    @StorageLabelPath.setter
    def StorageLabelPath(self, StorageLabelPath):
        self._StorageLabelPath = StorageLabelPath

    @property
    def DatasetName(self):
        """数据集名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetName

    @DatasetName.setter
    def DatasetName(self, DatasetName):
        self._DatasetName = DatasetName

    @property
    def DatasetVersion(self):
        """数据集版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetVersion

    @DatasetVersion.setter
    def DatasetVersion(self, DatasetVersion):
        self._DatasetVersion = DatasetVersion


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        if params.get("StorageDataPath") is not None:
            self._StorageDataPath = CosPathInfo()
            self._StorageDataPath._deserialize(params.get("StorageDataPath"))
        if params.get("StorageLabelPath") is not None:
            self._StorageLabelPath = CosPathInfo()
            self._StorageLabelPath._deserialize(params.get("StorageLabelPath"))
        self._DatasetName = params.get("DatasetName")
        self._DatasetVersion = params.get("DatasetVersion")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DatasetFileProcessInfo(AbstractModel):
    """数据集文件处理信息

    """

    def __init__(self):
        r"""
        :param _FilePath: 文件路径
注意：此字段可能返回 null，表示取不到有效值。
        :type FilePath: str
        :param _FileStatus: 文件处理状态
注意：此字段可能返回 null，表示取不到有效值。
        :type FileStatus: str
        :param _SuccessCount: 解析成功的样本数量
注意：此字段可能返回 null，表示取不到有效值。
        :type SuccessCount: int
        :param _FailedCount: 解析失败的样本数量
注意：此字段可能返回 null，表示取不到有效值。
        :type FailedCount: int
        :param _FailedSampleCosPath: 失败的文件cos地址
注意：此字段可能返回 null，表示取不到有效值。
        :type FailedSampleCosPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _FailedSampleFile: 失败的文件url
注意：此字段可能返回 null，表示取不到有效值。
        :type FailedSampleFile: str
        """
        self._FilePath = None
        self._FileStatus = None
        self._SuccessCount = None
        self._FailedCount = None
        self._FailedSampleCosPath = None
        self._FailedSampleFile = None

    @property
    def FilePath(self):
        """文件路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FilePath

    @FilePath.setter
    def FilePath(self, FilePath):
        self._FilePath = FilePath

    @property
    def FileStatus(self):
        """文件处理状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FileStatus

    @FileStatus.setter
    def FileStatus(self, FileStatus):
        self._FileStatus = FileStatus

    @property
    def SuccessCount(self):
        """解析成功的样本数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """解析失败的样本数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def FailedSampleCosPath(self):
        """失败的文件cos地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._FailedSampleCosPath

    @FailedSampleCosPath.setter
    def FailedSampleCosPath(self, FailedSampleCosPath):
        self._FailedSampleCosPath = FailedSampleCosPath

    @property
    def FailedSampleFile(self):
        """失败的文件url
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FailedSampleFile

    @FailedSampleFile.setter
    def FailedSampleFile(self, FailedSampleFile):
        self._FailedSampleFile = FailedSampleFile


    def _deserialize(self, params):
        self._FilePath = params.get("FilePath")
        self._FileStatus = params.get("FileStatus")
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        if params.get("FailedSampleCosPath") is not None:
            self._FailedSampleCosPath = CosPathInfo()
            self._FailedSampleCosPath._deserialize(params.get("FailedSampleCosPath"))
        self._FailedSampleFile = params.get("FailedSampleFile")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DatasetGroup(AbstractModel):
    """数据集组

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetId: str
        :param _DatasetName: 数据集名称
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetName: str
        :param _Creator: 创建者
注意：此字段可能返回 null，表示取不到有效值。
        :type Creator: str
        :param _DatasetVersion: 数据集版本
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetVersion: str
        :param _DatasetType: 数据集类型
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetType: str
        :param _DatasetTags: 数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetTags: list of Tag
        :param _DatasetAnnotationTaskName: 数据集标注任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetAnnotationTaskName: str
        :param _DatasetAnnotationTaskId: 数据集标注任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetAnnotationTaskId: str
        :param _Process: 处理进度
注意：此字段可能返回 null，表示取不到有效值。
        :type Process: int
        :param _DatasetStatus: 数据集状态
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetStatus: str
        :param _ErrorMsg: 错误详情
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrorMsg: str
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _UpdateTime: 更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTime: str
        :param _ExternalTaskType: 外部关联TASKType
注意：此字段可能返回 null，表示取不到有效值。
        :type ExternalTaskType: str
        :param _DatasetSize: 数据集大小
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetSize: str
        :param _FileNum: 数据集数据量
注意：此字段可能返回 null，表示取不到有效值。
        :type FileNum: int
        :param _StorageDataPath: 数据集源COS路径
注意：此字段可能返回 null，表示取不到有效值。
        :type StorageDataPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _StorageLabelPath: 数据集标签存储路径
注意：此字段可能返回 null，表示取不到有效值。
        :type StorageLabelPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _DatasetVersions: 数据集版本聚合详情
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetVersions: list of DatasetInfo
        :param _AnnotationStatus: 数据集标注状态
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationStatus: str
        :param _AnnotationType: 数据集类型
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationType: str
        :param _AnnotationFormat: 数据集标注格式
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationFormat: str
        :param _DatasetScope: 数据集范围
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetScope: str
        :param _OcrScene: 数据集OCR子场景
注意：此字段可能返回 null，表示取不到有效值。
        :type OcrScene: str
        :param _AnnotationKeyStatus: 数据集字典修改状态
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationKeyStatus: str
        :param _ContentType: 文本数据集导入方式
注意：此字段可能返回 null，表示取不到有效值。
        :type ContentType: str
        :param _DatasetScene: 数据集建模类别。
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetScene: str
        :param _CFSConfig: CFS配置
注意：此字段可能返回 null，表示取不到有效值。
        :type CFSConfig: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        :param _SceneTags: 数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :type SceneTags: list of str
        :param _NumAnnotated: 已标注数量
注意：此字段可能返回 null，表示取不到有效值。
        :type NumAnnotated: int
        :param _AnnotationSpecification: 标注规范
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationSpecification: str
        :param _AnnotationSchemaConfigured: 标注Schema是否配置
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationSchemaConfigured: bool
        :param _CreatorNickname: 创建者名称
注意：此字段可能返回 null，表示取不到有效值。
        :type CreatorNickname: str
        :param _IsCfsUpdated: cfs路径是否有修改
注意：此字段可能返回 null，表示取不到有效值。
        :type IsCfsUpdated: bool
        """
        self._DatasetId = None
        self._DatasetName = None
        self._Creator = None
        self._DatasetVersion = None
        self._DatasetType = None
        self._DatasetTags = None
        self._DatasetAnnotationTaskName = None
        self._DatasetAnnotationTaskId = None
        self._Process = None
        self._DatasetStatus = None
        self._ErrorMsg = None
        self._CreateTime = None
        self._UpdateTime = None
        self._ExternalTaskType = None
        self._DatasetSize = None
        self._FileNum = None
        self._StorageDataPath = None
        self._StorageLabelPath = None
        self._DatasetVersions = None
        self._AnnotationStatus = None
        self._AnnotationType = None
        self._AnnotationFormat = None
        self._DatasetScope = None
        self._OcrScene = None
        self._AnnotationKeyStatus = None
        self._ContentType = None
        self._DatasetScene = None
        self._CFSConfig = None
        self._SceneTags = None
        self._NumAnnotated = None
        self._AnnotationSpecification = None
        self._AnnotationSchemaConfigured = None
        self._CreatorNickname = None
        self._IsCfsUpdated = None
        self._DataSourceConfig = None

    @property
    def DataSourceConfig(self):
        return self._DataSourceConfig

    @DataSourceConfig.setter
    def DataSourceConfig(self, DataSourceConfig):
        self._DataSourceConfig = DataSourceConfig

    @property
    def DatasetId(self):
        """数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def DatasetName(self):
        """数据集名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetName

    @DatasetName.setter
    def DatasetName(self, DatasetName):
        self._DatasetName = DatasetName

    @property
    def Creator(self):
        """创建者
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def DatasetVersion(self):
        """数据集版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetVersion

    @DatasetVersion.setter
    def DatasetVersion(self, DatasetVersion):
        self._DatasetVersion = DatasetVersion

    @property
    def DatasetType(self):
        """数据集类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetType

    @DatasetType.setter
    def DatasetType(self, DatasetType):
        self._DatasetType = DatasetType

    @property
    def DatasetTags(self):
        """数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._DatasetTags

    @DatasetTags.setter
    def DatasetTags(self, DatasetTags):
        self._DatasetTags = DatasetTags

    @property
    def DatasetAnnotationTaskName(self):
        """数据集标注任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetAnnotationTaskName

    @DatasetAnnotationTaskName.setter
    def DatasetAnnotationTaskName(self, DatasetAnnotationTaskName):
        self._DatasetAnnotationTaskName = DatasetAnnotationTaskName

    @property
    def DatasetAnnotationTaskId(self):
        """数据集标注任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetAnnotationTaskId

    @DatasetAnnotationTaskId.setter
    def DatasetAnnotationTaskId(self, DatasetAnnotationTaskId):
        self._DatasetAnnotationTaskId = DatasetAnnotationTaskId

    @property
    def Process(self):
        """处理进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Process

    @Process.setter
    def Process(self, Process):
        self._Process = Process

    @property
    def DatasetStatus(self):
        """数据集状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetStatus

    @DatasetStatus.setter
    def DatasetStatus(self, DatasetStatus):
        self._DatasetStatus = DatasetStatus

    @property
    def ErrorMsg(self):
        """错误详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrorMsg

    @ErrorMsg.setter
    def ErrorMsg(self, ErrorMsg):
        self._ErrorMsg = ErrorMsg

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def ExternalTaskType(self):
        """外部关联TASKType
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ExternalTaskType

    @ExternalTaskType.setter
    def ExternalTaskType(self, ExternalTaskType):
        self._ExternalTaskType = ExternalTaskType

    @property
    def DatasetSize(self):
        """数据集大小
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetSize

    @DatasetSize.setter
    def DatasetSize(self, DatasetSize):
        self._DatasetSize = DatasetSize

    @property
    def FileNum(self):
        """数据集数据量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._FileNum

    @FileNum.setter
    def FileNum(self, FileNum):
        self._FileNum = FileNum

    @property
    def StorageDataPath(self):
        """数据集源COS路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._StorageDataPath

    @StorageDataPath.setter
    def StorageDataPath(self, StorageDataPath):
        self._StorageDataPath = StorageDataPath

    @property
    def StorageLabelPath(self):
        """数据集标签存储路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._StorageLabelPath

    @StorageLabelPath.setter
    def StorageLabelPath(self, StorageLabelPath):
        self._StorageLabelPath = StorageLabelPath

    @property
    def DatasetVersions(self):
        """数据集版本聚合详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DatasetInfo
        """
        return self._DatasetVersions

    @DatasetVersions.setter
    def DatasetVersions(self, DatasetVersions):
        self._DatasetVersions = DatasetVersions

    @property
    def AnnotationStatus(self):
        """数据集标注状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationStatus

    @AnnotationStatus.setter
    def AnnotationStatus(self, AnnotationStatus):
        self._AnnotationStatus = AnnotationStatus

    @property
    def AnnotationType(self):
        """数据集类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationType

    @AnnotationType.setter
    def AnnotationType(self, AnnotationType):
        self._AnnotationType = AnnotationType

    @property
    def AnnotationFormat(self):
        """数据集标注格式
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationFormat

    @AnnotationFormat.setter
    def AnnotationFormat(self, AnnotationFormat):
        self._AnnotationFormat = AnnotationFormat

    @property
    def DatasetScope(self):
        """数据集范围
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetScope

    @DatasetScope.setter
    def DatasetScope(self, DatasetScope):
        self._DatasetScope = DatasetScope

    @property
    def OcrScene(self):
        """数据集OCR子场景
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._OcrScene

    @OcrScene.setter
    def OcrScene(self, OcrScene):
        self._OcrScene = OcrScene

    @property
    def AnnotationKeyStatus(self):
        """数据集字典修改状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationKeyStatus

    @AnnotationKeyStatus.setter
    def AnnotationKeyStatus(self, AnnotationKeyStatus):
        self._AnnotationKeyStatus = AnnotationKeyStatus

    @property
    def ContentType(self):
        """文本数据集导入方式
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ContentType

    @ContentType.setter
    def ContentType(self, ContentType):
        self._ContentType = ContentType

    @property
    def DatasetScene(self):
        """数据集建模类别。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetScene

    @DatasetScene.setter
    def DatasetScene(self, DatasetScene):
        self._DatasetScene = DatasetScene

    @property
    def CFSConfig(self):
        """CFS配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        """
        return self._CFSConfig

    @CFSConfig.setter
    def CFSConfig(self, CFSConfig):
        self._CFSConfig = CFSConfig

    @property
    def SceneTags(self):
        """数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._SceneTags

    @SceneTags.setter
    def SceneTags(self, SceneTags):
        self._SceneTags = SceneTags

    @property
    def NumAnnotated(self):
        """已标注数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._NumAnnotated

    @NumAnnotated.setter
    def NumAnnotated(self, NumAnnotated):
        self._NumAnnotated = NumAnnotated

    @property
    def AnnotationSpecification(self):
        """标注规范
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationSpecification

    @AnnotationSpecification.setter
    def AnnotationSpecification(self, AnnotationSpecification):
        self._AnnotationSpecification = AnnotationSpecification

    @property
    def AnnotationSchemaConfigured(self):
        """标注Schema是否配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._AnnotationSchemaConfigured

    @AnnotationSchemaConfigured.setter
    def AnnotationSchemaConfigured(self, AnnotationSchemaConfigured):
        self._AnnotationSchemaConfigured = AnnotationSchemaConfigured

    @property
    def CreatorNickname(self):
        """创建者名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreatorNickname

    @CreatorNickname.setter
    def CreatorNickname(self, CreatorNickname):
        self._CreatorNickname = CreatorNickname

    @property
    def IsCfsUpdated(self):
        """cfs路径是否有修改
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsCfsUpdated

    @IsCfsUpdated.setter
    def IsCfsUpdated(self, IsCfsUpdated):
        self._IsCfsUpdated = IsCfsUpdated


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._DatasetName = params.get("DatasetName")
        self._Creator = params.get("Creator")
        self._DatasetVersion = params.get("DatasetVersion")
        self._DatasetType = params.get("DatasetType")
        if params.get("DatasetTags") is not None:
            self._DatasetTags = []
            for item in params.get("DatasetTags"):
                obj = Tag()
                obj._deserialize(item)
                self._DatasetTags.append(obj)
        self._DatasetAnnotationTaskName = params.get("DatasetAnnotationTaskName")
        self._DatasetAnnotationTaskId = params.get("DatasetAnnotationTaskId")
        self._Process = params.get("Process")
        self._DatasetStatus = params.get("DatasetStatus")
        self._ErrorMsg = params.get("ErrorMsg")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._ExternalTaskType = params.get("ExternalTaskType")
        self._DatasetSize = params.get("DatasetSize")
        self._FileNum = params.get("FileNum")
        if params.get("StorageDataPath") is not None:
            self._StorageDataPath = CosPathInfo()
            self._StorageDataPath._deserialize(params.get("StorageDataPath"))
        if params.get("StorageLabelPath") is not None:
            self._StorageLabelPath = CosPathInfo()
            self._StorageLabelPath._deserialize(params.get("StorageLabelPath"))
        if params.get("DatasetVersions") is not None:
            self._DatasetVersions = []
            for item in params.get("DatasetVersions"):
                obj = DatasetInfo()
                obj._deserialize(item)
                self._DatasetVersions.append(obj)
        self._AnnotationStatus = params.get("AnnotationStatus")
        self._AnnotationType = params.get("AnnotationType")
        self._AnnotationFormat = params.get("AnnotationFormat")
        self._DatasetScope = params.get("DatasetScope")
        self._OcrScene = params.get("OcrScene")
        self._AnnotationKeyStatus = params.get("AnnotationKeyStatus")
        self._ContentType = params.get("ContentType")
        self._DatasetScene = params.get("DatasetScene")
        if params.get("CFSConfig") is not None:
            self._CFSConfig = CFSConfig()
            self._CFSConfig._deserialize(params.get("CFSConfig"))
        if params.get("DataSourceConfig") is not None:
            self._DataSourceConfig = DataSourceConfig()
            self._DataSourceConfig._deserialize(params.get("DataSourceConfig"))
        self._SceneTags = params.get("SceneTags")
        self._NumAnnotated = params.get("NumAnnotated")
        self._AnnotationSpecification = params.get("AnnotationSpecification")
        self._AnnotationSchemaConfigured = params.get("AnnotationSchemaConfigured")
        self._CreatorNickname = params.get("CreatorNickname")
        self._IsCfsUpdated = params.get("IsCfsUpdated")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
#        if len(memeber_set) > 0:
#            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DatasetInfo(AbstractModel):
    """数据集详情

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集id
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetId: str
        :param _DatasetName: 数据集名称
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetName: str
        :param _Creator: 数据集创建者
注意：此字段可能返回 null，表示取不到有效值。
        :type Creator: str
        :param _DatasetVersion: 数据集版本
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetVersion: str
        :param _DatasetType: 数据集类型
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetType: str
        :param _DatasetTags: 数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetTags: list of Tag
        :param _DatasetAnnotationTaskName: 数据集对应标注任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetAnnotationTaskName: str
        :param _DatasetAnnotationTaskId: 数据集对应标注任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetAnnotationTaskId: str
        :param _Process: 处理进度
注意：此字段可能返回 null，表示取不到有效值。
        :type Process: int
        :param _DatasetStatus: 数据集状态
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetStatus: str
        :param _ErrorMsg: 错误详情
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrorMsg: str
        :param _CreateTime: 数据集创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _UpdateTime: 数据集更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTime: str
        :param _ExternalTaskType: 外部任务类型
注意：此字段可能返回 null，表示取不到有效值。
        :type ExternalTaskType: str
        :param _DatasetSize: 数据集存储大小
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetSize: str
        :param _FileNum: 数据集数据数量
注意：此字段可能返回 null，表示取不到有效值。
        :type FileNum: int
        :param _StorageDataPath: 数据集源cos 路径
注意：此字段可能返回 null，表示取不到有效值。
        :type StorageDataPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _StorageLabelPath: 数据集输出cos路径
注意：此字段可能返回 null，表示取不到有效值。
        :type StorageLabelPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _AnnotationStatus: 数据集标注状态
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationStatus: str
        :param _AnnotationType: 数据集类型
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationType: str
        :param _AnnotationFormat: 数据集标注格式
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationFormat: str
        :param _DatasetScope: 数据集范围
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetScope: str
        :param _OcrScene: 数据集OCR子场景
注意：此字段可能返回 null，表示取不到有效值。
        :type OcrScene: str
        :param _AnnotationKeyStatus: 数据集字典修改状态
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationKeyStatus: str
        :param _ContentType: 内容类型
注意：此字段可能返回 null，表示取不到有效值。
        :type ContentType: str
        :param _DatasetScene: 数据集建模类别。
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetScene: str
        :param _CFSConfig: CFS配置
注意：此字段可能返回 null，表示取不到有效值。
        :type CFSConfig: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        :param _SceneTags: 数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :type SceneTags: list of str
        :param _NumAnnotated: 已标注数量
注意：此字段可能返回 null，表示取不到有效值。
        :type NumAnnotated: int
        :param _AnnotationSpecification: 标注规范
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationSpecification: str
        :param _AnnotationSchemaConfigured: 标注Schema是否配置
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationSchemaConfigured: bool
        :param _CreatorNickname: 创建者名称
注意：此字段可能返回 null，表示取不到有效值。
        :type CreatorNickname: str
        :param _IsCfsUpdated: cfs路径是否有修改
注意：此字段可能返回 null，表示取不到有效值。
        :type IsCfsUpdated: bool
        """
        self._DatasetId = None
        self._DatasetName = None
        self._Creator = None
        self._DatasetVersion = None
        self._DatasetType = None
        self._DatasetTags = None
        self._DatasetAnnotationTaskName = None
        self._DatasetAnnotationTaskId = None
        self._Process = None
        self._DatasetStatus = None
        self._ErrorMsg = None
        self._CreateTime = None
        self._UpdateTime = None
        self._ExternalTaskType = None
        self._DatasetSize = None
        self._FileNum = None
        self._StorageDataPath = None
        self._StorageLabelPath = None
        self._AnnotationStatus = None
        self._AnnotationType = None
        self._AnnotationFormat = None
        self._DatasetScope = None
        self._OcrScene = None
        self._AnnotationKeyStatus = None
        self._ContentType = None
        self._DatasetScene = None
        self._CFSConfig = None
        self._SceneTags = None
        self._NumAnnotated = None
        self._AnnotationSpecification = None
        self._AnnotationSchemaConfigured = None
        self._CreatorNickname = None
        self._IsCfsUpdated = None

    @property
    def DatasetId(self):
        """数据集id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def DatasetName(self):
        """数据集名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetName

    @DatasetName.setter
    def DatasetName(self, DatasetName):
        self._DatasetName = DatasetName

    @property
    def Creator(self):
        """数据集创建者
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def DatasetVersion(self):
        """数据集版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetVersion

    @DatasetVersion.setter
    def DatasetVersion(self, DatasetVersion):
        self._DatasetVersion = DatasetVersion

    @property
    def DatasetType(self):
        """数据集类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetType

    @DatasetType.setter
    def DatasetType(self, DatasetType):
        self._DatasetType = DatasetType

    @property
    def DatasetTags(self):
        """数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._DatasetTags

    @DatasetTags.setter
    def DatasetTags(self, DatasetTags):
        self._DatasetTags = DatasetTags

    @property
    def DatasetAnnotationTaskName(self):
        """数据集对应标注任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetAnnotationTaskName

    @DatasetAnnotationTaskName.setter
    def DatasetAnnotationTaskName(self, DatasetAnnotationTaskName):
        self._DatasetAnnotationTaskName = DatasetAnnotationTaskName

    @property
    def DatasetAnnotationTaskId(self):
        """数据集对应标注任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetAnnotationTaskId

    @DatasetAnnotationTaskId.setter
    def DatasetAnnotationTaskId(self, DatasetAnnotationTaskId):
        self._DatasetAnnotationTaskId = DatasetAnnotationTaskId

    @property
    def Process(self):
        """处理进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Process

    @Process.setter
    def Process(self, Process):
        self._Process = Process

    @property
    def DatasetStatus(self):
        """数据集状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetStatus

    @DatasetStatus.setter
    def DatasetStatus(self, DatasetStatus):
        self._DatasetStatus = DatasetStatus

    @property
    def ErrorMsg(self):
        """错误详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrorMsg

    @ErrorMsg.setter
    def ErrorMsg(self, ErrorMsg):
        self._ErrorMsg = ErrorMsg

    @property
    def CreateTime(self):
        """数据集创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """数据集更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def ExternalTaskType(self):
        """外部任务类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ExternalTaskType

    @ExternalTaskType.setter
    def ExternalTaskType(self, ExternalTaskType):
        self._ExternalTaskType = ExternalTaskType

    @property
    def DatasetSize(self):
        """数据集存储大小
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetSize

    @DatasetSize.setter
    def DatasetSize(self, DatasetSize):
        self._DatasetSize = DatasetSize

    @property
    def FileNum(self):
        """数据集数据数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._FileNum

    @FileNum.setter
    def FileNum(self, FileNum):
        self._FileNum = FileNum

    @property
    def StorageDataPath(self):
        """数据集源cos 路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._StorageDataPath

    @StorageDataPath.setter
    def StorageDataPath(self, StorageDataPath):
        self._StorageDataPath = StorageDataPath

    @property
    def StorageLabelPath(self):
        """数据集输出cos路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._StorageLabelPath

    @StorageLabelPath.setter
    def StorageLabelPath(self, StorageLabelPath):
        self._StorageLabelPath = StorageLabelPath

    @property
    def AnnotationStatus(self):
        """数据集标注状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationStatus

    @AnnotationStatus.setter
    def AnnotationStatus(self, AnnotationStatus):
        self._AnnotationStatus = AnnotationStatus

    @property
    def AnnotationType(self):
        """数据集类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationType

    @AnnotationType.setter
    def AnnotationType(self, AnnotationType):
        self._AnnotationType = AnnotationType

    @property
    def AnnotationFormat(self):
        """数据集标注格式
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationFormat

    @AnnotationFormat.setter
    def AnnotationFormat(self, AnnotationFormat):
        self._AnnotationFormat = AnnotationFormat

    @property
    def DatasetScope(self):
        """数据集范围
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetScope

    @DatasetScope.setter
    def DatasetScope(self, DatasetScope):
        self._DatasetScope = DatasetScope

    @property
    def OcrScene(self):
        """数据集OCR子场景
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._OcrScene

    @OcrScene.setter
    def OcrScene(self, OcrScene):
        self._OcrScene = OcrScene

    @property
    def AnnotationKeyStatus(self):
        """数据集字典修改状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationKeyStatus

    @AnnotationKeyStatus.setter
    def AnnotationKeyStatus(self, AnnotationKeyStatus):
        self._AnnotationKeyStatus = AnnotationKeyStatus

    @property
    def ContentType(self):
        """内容类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ContentType

    @ContentType.setter
    def ContentType(self, ContentType):
        self._ContentType = ContentType

    @property
    def DatasetScene(self):
        """数据集建模类别。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetScene

    @DatasetScene.setter
    def DatasetScene(self, DatasetScene):
        self._DatasetScene = DatasetScene

    @property
    def CFSConfig(self):
        """CFS配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        """
        return self._CFSConfig

    @CFSConfig.setter
    def CFSConfig(self, CFSConfig):
        self._CFSConfig = CFSConfig

    @property
    def SceneTags(self):
        """数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._SceneTags

    @SceneTags.setter
    def SceneTags(self, SceneTags):
        self._SceneTags = SceneTags

    @property
    def NumAnnotated(self):
        """已标注数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._NumAnnotated

    @NumAnnotated.setter
    def NumAnnotated(self, NumAnnotated):
        self._NumAnnotated = NumAnnotated

    @property
    def AnnotationSpecification(self):
        """标注规范
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationSpecification

    @AnnotationSpecification.setter
    def AnnotationSpecification(self, AnnotationSpecification):
        self._AnnotationSpecification = AnnotationSpecification

    @property
    def AnnotationSchemaConfigured(self):
        """标注Schema是否配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._AnnotationSchemaConfigured

    @AnnotationSchemaConfigured.setter
    def AnnotationSchemaConfigured(self, AnnotationSchemaConfigured):
        self._AnnotationSchemaConfigured = AnnotationSchemaConfigured

    @property
    def CreatorNickname(self):
        """创建者名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreatorNickname

    @CreatorNickname.setter
    def CreatorNickname(self, CreatorNickname):
        self._CreatorNickname = CreatorNickname

    @property
    def IsCfsUpdated(self):
        """cfs路径是否有修改
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsCfsUpdated

    @IsCfsUpdated.setter
    def IsCfsUpdated(self, IsCfsUpdated):
        self._IsCfsUpdated = IsCfsUpdated


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._DatasetName = params.get("DatasetName")
        self._Creator = params.get("Creator")
        self._DatasetVersion = params.get("DatasetVersion")
        self._DatasetType = params.get("DatasetType")
        if params.get("DatasetTags") is not None:
            self._DatasetTags = []
            for item in params.get("DatasetTags"):
                obj = Tag()
                obj._deserialize(item)
                self._DatasetTags.append(obj)
        self._DatasetAnnotationTaskName = params.get("DatasetAnnotationTaskName")
        self._DatasetAnnotationTaskId = params.get("DatasetAnnotationTaskId")
        self._Process = params.get("Process")
        self._DatasetStatus = params.get("DatasetStatus")
        self._ErrorMsg = params.get("ErrorMsg")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._ExternalTaskType = params.get("ExternalTaskType")
        self._DatasetSize = params.get("DatasetSize")
        self._FileNum = params.get("FileNum")
        if params.get("StorageDataPath") is not None:
            self._StorageDataPath = CosPathInfo()
            self._StorageDataPath._deserialize(params.get("StorageDataPath"))
        if params.get("StorageLabelPath") is not None:
            self._StorageLabelPath = CosPathInfo()
            self._StorageLabelPath._deserialize(params.get("StorageLabelPath"))
        self._AnnotationStatus = params.get("AnnotationStatus")
        self._AnnotationType = params.get("AnnotationType")
        self._AnnotationFormat = params.get("AnnotationFormat")
        self._DatasetScope = params.get("DatasetScope")
        self._OcrScene = params.get("OcrScene")
        self._AnnotationKeyStatus = params.get("AnnotationKeyStatus")
        self._ContentType = params.get("ContentType")
        self._DatasetScene = params.get("DatasetScene")
        if params.get("CFSConfig") is not None:
            self._CFSConfig = CFSConfig()
            self._CFSConfig._deserialize(params.get("CFSConfig"))
        self._SceneTags = params.get("SceneTags")
        self._NumAnnotated = params.get("NumAnnotated")
        self._AnnotationSpecification = params.get("AnnotationSpecification")
        self._AnnotationSchemaConfigured = params.get("AnnotationSchemaConfigured")
        self._CreatorNickname = params.get("CreatorNickname")
        self._IsCfsUpdated = params.get("IsCfsUpdated")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DatasetProgress(AbstractModel):
    """DatasetProgress

    """

    def __init__(self):
        r"""
        :param _DatasetCFSConfig: 数据集配置
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetCFSConfig: :class:`tencentcloud.tione.v20211111.models.SimpleCFSConfig`
        :param _ScoredCount: 已标注数量
注意：此字段可能返回 null，表示取不到有效值。
        :type ScoredCount: int
        :param _TotalCount: 总数
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        """
        self._DatasetCFSConfig = None
        self._ScoredCount = None
        self._TotalCount = None

    @property
    def DatasetCFSConfig(self):
        """数据集配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.SimpleCFSConfig`
        """
        return self._DatasetCFSConfig

    @DatasetCFSConfig.setter
    def DatasetCFSConfig(self, DatasetCFSConfig):
        self._DatasetCFSConfig = DatasetCFSConfig

    @property
    def ScoredCount(self):
        """已标注数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ScoredCount

    @ScoredCount.setter
    def ScoredCount(self, ScoredCount):
        self._ScoredCount = ScoredCount

    @property
    def TotalCount(self):
        """总数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount


    def _deserialize(self, params):
        if params.get("DatasetCFSConfig") is not None:
            self._DatasetCFSConfig = SimpleCFSConfig()
            self._DatasetCFSConfig._deserialize(params.get("DatasetCFSConfig"))
        self._ScoredCount = params.get("ScoredCount")
        self._TotalCount = params.get("TotalCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DatasetSceneConfig(AbstractModel):
    """数据集建模场景配置项

    """

    def __init__(self):
        r"""
        :param _DatasetScene: 数据集建模场景枚举值
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetScene: str
        :param _DatasetSceneName: 数据集建模场景名称
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetSceneName: str
        :param _AnnotationTypeConfigs: 标注场景配置项
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationTypeConfigs: list of AnnotationTypeConfig
        """
        self._DatasetScene = None
        self._DatasetSceneName = None
        self._AnnotationTypeConfigs = None

    @property
    def DatasetScene(self):
        """数据集建模场景枚举值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetScene

    @DatasetScene.setter
    def DatasetScene(self, DatasetScene):
        self._DatasetScene = DatasetScene

    @property
    def DatasetSceneName(self):
        """数据集建模场景名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetSceneName

    @DatasetSceneName.setter
    def DatasetSceneName(self, DatasetSceneName):
        self._DatasetSceneName = DatasetSceneName

    @property
    def AnnotationTypeConfigs(self):
        """标注场景配置项
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of AnnotationTypeConfig
        """
        return self._AnnotationTypeConfigs

    @AnnotationTypeConfigs.setter
    def AnnotationTypeConfigs(self, AnnotationTypeConfigs):
        self._AnnotationTypeConfigs = AnnotationTypeConfigs


    def _deserialize(self, params):
        self._DatasetScene = params.get("DatasetScene")
        self._DatasetSceneName = params.get("DatasetSceneName")
        if params.get("AnnotationTypeConfigs") is not None:
            self._AnnotationTypeConfigs = []
            for item in params.get("AnnotationTypeConfigs"):
                obj = AnnotationTypeConfig()
                obj._deserialize(item)
                self._AnnotationTypeConfigs.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DatasetSchemaTask(AbstractModel):
    """数据集Schema任务

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        :param _TaskStatus: 任务状态
        :type TaskStatus: str
        :param _StartTime: 任务启动时间
        :type StartTime: int
        :param _Progress: 任务整体进度
        :type Progress: float
        :param _SuccessCount: 解析成功的样本数量
        :type SuccessCount: int
        :param _FailedCount: 解析失败的样本数量
        :type FailedCount: int
        :param _FailedSampleFile: 解析失败的样本文件URL
注意：此字段可能返回 null，表示取不到有效值。
        :type FailedSampleFile: str
        :param _FileProcessInfo: 解析文件信息
注意：此字段可能返回 null，表示取不到有效值。
        :type FileProcessInfo: list of DatasetFileProcessInfo
        """
        self._TaskId = None
        self._TaskStatus = None
        self._StartTime = None
        self._Progress = None
        self._SuccessCount = None
        self._FailedCount = None
        self._FailedSampleFile = None
        self._FileProcessInfo = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskStatus(self):
        """任务状态
        :rtype: str
        """
        return self._TaskStatus

    @TaskStatus.setter
    def TaskStatus(self, TaskStatus):
        self._TaskStatus = TaskStatus

    @property
    def StartTime(self):
        """任务启动时间
        :rtype: int
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def Progress(self):
        """任务整体进度
        :rtype: float
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def SuccessCount(self):
        """解析成功的样本数量
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """解析失败的样本数量
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def FailedSampleFile(self):
        """解析失败的样本文件URL
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FailedSampleFile

    @FailedSampleFile.setter
    def FailedSampleFile(self, FailedSampleFile):
        self._FailedSampleFile = FailedSampleFile

    @property
    def FileProcessInfo(self):
        """解析文件信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DatasetFileProcessInfo
        """
        return self._FileProcessInfo

    @FileProcessInfo.setter
    def FileProcessInfo(self, FileProcessInfo):
        self._FileProcessInfo = FileProcessInfo


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskStatus = params.get("TaskStatus")
        self._StartTime = params.get("StartTime")
        self._Progress = params.get("Progress")
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        self._FailedSampleFile = params.get("FailedSampleFile")
        if params.get("FileProcessInfo") is not None:
            self._FileProcessInfo = []
            for item in params.get("FileProcessInfo"):
                obj = DatasetFileProcessInfo()
                obj._deserialize(item)
                self._FileProcessInfo.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DatasetWithResults(AbstractModel):
    """DatasetWithResults

    """

    def __init__(self):
        r"""
        :param _DatasetCFSConfig: 评测集路径信息
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetCFSConfig: :class:`tencentcloud.tione.v20211111.models.SimpleCFSConfig`
        :param _OutputCFSConfigs: 输出路径信息
注意：此字段可能返回 null，表示取不到有效值。
        :type OutputCFSConfigs: list of SimpleCFSConfig
        """
        self._DatasetCFSConfig = None
        self._OutputCFSConfigs = None

    @property
    def DatasetCFSConfig(self):
        """评测集路径信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.SimpleCFSConfig`
        """
        return self._DatasetCFSConfig

    @DatasetCFSConfig.setter
    def DatasetCFSConfig(self, DatasetCFSConfig):
        self._DatasetCFSConfig = DatasetCFSConfig

    @property
    def OutputCFSConfigs(self):
        """输出路径信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of SimpleCFSConfig
        """
        return self._OutputCFSConfigs

    @OutputCFSConfigs.setter
    def OutputCFSConfigs(self, OutputCFSConfigs):
        self._OutputCFSConfigs = OutputCFSConfigs


    def _deserialize(self, params):
        if params.get("DatasetCFSConfig") is not None:
            self._DatasetCFSConfig = SimpleCFSConfig()
            self._DatasetCFSConfig._deserialize(params.get("DatasetCFSConfig"))
        if params.get("OutputCFSConfigs") is not None:
            self._OutputCFSConfigs = []
            for item in params.get("OutputCFSConfigs"):
                obj = SimpleCFSConfig()
                obj._deserialize(item)
                self._OutputCFSConfigs.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DefaultInnerCallInfo(AbstractModel):
    """默认内网调用信息

    """

    def __init__(self):
        r"""
        :param _VpcIds: 可以进行调用的VPC-ID
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcIds: list of str
        :param _InnerHttpAddr: 默认内网调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type InnerHttpAddr: str
        """
        self._VpcIds = None
        self._InnerHttpAddr = None

    @property
    def VpcIds(self):
        """可以进行调用的VPC-ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._VpcIds

    @VpcIds.setter
    def VpcIds(self, VpcIds):
        self._VpcIds = VpcIds

    @property
    def InnerHttpAddr(self):
        """默认内网调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InnerHttpAddr

    @InnerHttpAddr.setter
    def InnerHttpAddr(self, InnerHttpAddr):
        self._InnerHttpAddr = InnerHttpAddr


    def _deserialize(self, params):
        self._VpcIds = params.get("VpcIds")
        self._InnerHttpAddr = params.get("InnerHttpAddr")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DefaultNginxGatewayCallInfo(AbstractModel):
    """默认Nginx网关结构

    """

    def __init__(self):
        r"""
        :param _Host: host
注意：此字段可能返回 null，表示取不到有效值。
        :type Host: str
        """
        self._Host = None

    @property
    def Host(self):
        """host
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Host

    @Host.setter
    def Host(self, Host):
        self._Host = Host


    def _deserialize(self, params):
        self._Host = params.get("Host")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteAlgoGroupRequest(AbstractModel):
    """DeleteAlgoGroup请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AlgoGroupId: 个人算法组Id
        :type AlgoGroupId: str
        """
        self._AlgoGroupId = None

    @property
    def AlgoGroupId(self):
        """个人算法组Id
        :rtype: str
        """
        return self._AlgoGroupId

    @AlgoGroupId.setter
    def AlgoGroupId(self, AlgoGroupId):
        self._AlgoGroupId = AlgoGroupId


    def _deserialize(self, params):
        self._AlgoGroupId = params.get("AlgoGroupId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteAlgoGroupResponse(AbstractModel):
    """DeleteAlgoGroup返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteAlgoVersionRequest(AbstractModel):
    """DeleteAlgoVersion请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AlgoVersionId: 个人算法版本Id
        :type AlgoVersionId: str
        """
        self._AlgoVersionId = None

    @property
    def AlgoVersionId(self):
        """个人算法版本Id
        :rtype: str
        """
        return self._AlgoVersionId

    @AlgoVersionId.setter
    def AlgoVersionId(self, AlgoVersionId):
        self._AlgoVersionId = AlgoVersionId


    def _deserialize(self, params):
        self._AlgoVersionId = params.get("AlgoVersionId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteAlgoVersionResponse(AbstractModel):
    """DeleteAlgoVersion返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteAnnotateRecordsRequest(AbstractModel):
    """DeleteAnnotateRecords请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _RecordIds: 要删除的样本id列表
        :type RecordIds: list of str
        """
        self._TaskId = None
        self._RecordIds = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RecordIds(self):
        """要删除的样本id列表
        :rtype: list of str
        """
        return self._RecordIds

    @RecordIds.setter
    def RecordIds(self, RecordIds):
        self._RecordIds = RecordIds


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RecordIds = params.get("RecordIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteAnnotateRecordsResponse(AbstractModel):
    """DeleteAnnotateRecords返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RecordIds: 删除的样本id列表
        :type RecordIds: list of str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RecordIds = None
        self._RequestId = None

    @property
    def RecordIds(self):
        """删除的样本id列表
        :rtype: list of str
        """
        return self._RecordIds

    @RecordIds.setter
    def RecordIds(self, RecordIds):
        self._RecordIds = RecordIds

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RecordIds = params.get("RecordIds")
        self._RequestId = params.get("RequestId")


class DeleteAnnotatedTaskRequest(AbstractModel):
    """DeleteAnnotatedTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 删除的任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """删除的任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteAnnotatedTaskResponse(AbstractModel):
    """DeleteAnnotatedTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 删除的任务id
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """删除的任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class DeleteAutoMLNLPPredictRecordRequest(AbstractModel):
    """DeleteAutoMLNLPPredictRecord请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务Id
        :type AutoMLTaskId: str
        :param _RecordId: 预测记录Id
        :type RecordId: str
        :param _EMSTaskId: 推理服务任务Id
        :type EMSTaskId: str
        """
        self._AutoMLTaskId = None
        self._RecordId = None
        self._EMSTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务Id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def RecordId(self):
        """预测记录Id
        :rtype: str
        """
        return self._RecordId

    @RecordId.setter
    def RecordId(self, RecordId):
        self._RecordId = RecordId

    @property
    def EMSTaskId(self):
        """推理服务任务Id
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._RecordId = params.get("RecordId")
        self._EMSTaskId = params.get("EMSTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteAutoMLNLPPredictRecordResponse(AbstractModel):
    """DeleteAutoMLNLPPredictRecord返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteAutoMLTaskRequest(AbstractModel):
    """DeleteAutoMLTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        """
        self._AutoMLTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteAutoMLTaskResponse(AbstractModel):
    """DeleteAutoMLTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _AsyncTaskId: 异步任务ID
        :type AsyncTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._AsyncTaskId = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def AsyncTaskId(self):
        """异步任务ID
        :rtype: str
        """
        return self._AsyncTaskId

    @AsyncTaskId.setter
    def AsyncTaskId(self, AsyncTaskId):
        self._AsyncTaskId = AsyncTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._AsyncTaskId = params.get("AsyncTaskId")
        self._RequestId = params.get("RequestId")


class DeleteBatchTaskRequest(AbstractModel):
    """DeleteBatchTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _BatchTaskId: 批量预测任务ID
        :type BatchTaskId: str
        """
        self._BatchTaskId = None

    @property
    def BatchTaskId(self):
        """批量预测任务ID
        :rtype: str
        """
        return self._BatchTaskId

    @BatchTaskId.setter
    def BatchTaskId(self, BatchTaskId):
        self._BatchTaskId = BatchTaskId


    def _deserialize(self, params):
        self._BatchTaskId = params.get("BatchTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteBatchTaskResponse(AbstractModel):
    """DeleteBatchTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteBillingResourceGroupRequest(AbstractModel):
    """DeleteBillingResourceGroup请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组id
        :type ResourceGroupId: str
        """
        self._ResourceGroupId = None

    @property
    def ResourceGroupId(self):
        """资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteBillingResourceGroupResponse(AbstractModel):
    """DeleteBillingResourceGroup返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组id
        :type ResourceGroupId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ResourceGroupId = None
        self._RequestId = None

    @property
    def ResourceGroupId(self):
        """资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._RequestId = params.get("RequestId")


class DeleteBillingResourceInstanceRequest(AbstractModel):
    """DeleteBillingResourceInstance请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceInstanceId: 资源组节点id
        :type ResourceInstanceId: str
        """
        self._ResourceInstanceId = None

    @property
    def ResourceInstanceId(self):
        """资源组节点id
        :rtype: str
        """
        return self._ResourceInstanceId

    @ResourceInstanceId.setter
    def ResourceInstanceId(self, ResourceInstanceId):
        self._ResourceInstanceId = ResourceInstanceId


    def _deserialize(self, params):
        self._ResourceInstanceId = params.get("ResourceInstanceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteBillingResourceInstanceResponse(AbstractModel):
    """DeleteBillingResourceInstance返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceInstanceId: 资源组节点id
        :type ResourceInstanceId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ResourceInstanceId = None
        self._RequestId = None

    @property
    def ResourceInstanceId(self):
        """资源组节点id
        :rtype: str
        """
        return self._ResourceInstanceId

    @ResourceInstanceId.setter
    def ResourceInstanceId(self, ResourceInstanceId):
        self._ResourceInstanceId = ResourceInstanceId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ResourceInstanceId = params.get("ResourceInstanceId")
        self._RequestId = params.get("RequestId")


class DeleteChatWhiteListUserRequest(AbstractModel):
    """DeleteChatWhiteListUser请求参数结构体

    """

    def __init__(self):
        r"""
        :param _UinId: 用户uin
        :type UinId: str
        """
        self._UinId = None

    @property
    def UinId(self):
        """用户uin
        :rtype: str
        """
        return self._UinId

    @UinId.setter
    def UinId(self, UinId):
        self._UinId = UinId


    def _deserialize(self, params):
        self._UinId = params.get("UinId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteChatWhiteListUserResponse(AbstractModel):
    """DeleteChatWhiteListUser返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteCodeRepoRequest(AbstractModel):
    """DeleteCodeRepo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: id值
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """id值
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteCodeRepoResponse(AbstractModel):
    """DeleteCodeRepo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteDataPipelineTaskRequest(AbstractModel):
    """DeleteDataPipelineTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 数据构建任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """数据构建任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteDataPipelineTaskResponse(AbstractModel):
    """DeleteDataPipelineTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 删除的数据构建任务的ID
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """删除的数据构建任务的ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class DeleteDataSourceRequest(AbstractModel):
    """DeleteDataSource请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DataSourceId: 数据源ID
        :type DataSourceId: str
        """
        self._DataSourceId = None

    @property
    def DataSourceId(self):
        """数据源ID
        :rtype: str
        """
        return self._DataSourceId

    @DataSourceId.setter
    def DataSourceId(self, DataSourceId):
        self._DataSourceId = DataSourceId


    def _deserialize(self, params):
        self._DataSourceId = params.get("DataSourceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteDataSourceResponse(AbstractModel):
    """DeleteDataSource返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteDatasetRequest(AbstractModel):
    """DeleteDataset请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集id
        :type DatasetId: str
        :param _DeleteLabelEnable: 是否删除cos标签文件
        :type DeleteLabelEnable: bool
        """
        self._DatasetId = None
        self._DeleteLabelEnable = None

    @property
    def DatasetId(self):
        """数据集id
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def DeleteLabelEnable(self):
        """是否删除cos标签文件
        :rtype: bool
        """
        return self._DeleteLabelEnable

    @DeleteLabelEnable.setter
    def DeleteLabelEnable(self, DeleteLabelEnable):
        self._DeleteLabelEnable = DeleteLabelEnable


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._DeleteLabelEnable = params.get("DeleteLabelEnable")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteDatasetResponse(AbstractModel):
    """DeleteDataset返回参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 删除的datasetId
        :type DatasetId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._DatasetId = None
        self._RequestId = None

    @property
    def DatasetId(self):
        """删除的datasetId
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._RequestId = params.get("RequestId")


class DeleteExportRequest(AbstractModel):
    """DeleteExport请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ExportId: 日志下载任务的ID
        :type ExportId: str
        """
        self._ExportId = None

    @property
    def ExportId(self):
        """日志下载任务的ID
        :rtype: str
        """
        return self._ExportId

    @ExportId.setter
    def ExportId(self, ExportId):
        self._ExportId = ExportId


    def _deserialize(self, params):
        self._ExportId = params.get("ExportId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteExportResponse(AbstractModel):
    """DeleteExport返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteFlowRequest(AbstractModel):
    """DeleteFlow请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流ID
        :type FlowId: str
        """
        self._FlowId = None

    @property
    def FlowId(self):
        """工作流ID
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteFlowResponse(AbstractModel):
    """DeleteFlow返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流ID
        :type FlowId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowId = None
        self._RequestId = None

    @property
    def FlowId(self):
        """工作流ID
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._RequestId = params.get("RequestId")


class DeleteFlowRunRequest(AbstractModel):
    """DeleteFlowRun请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunId: 工作流的执行ID
        :type FlowRunId: str
        """
        self._FlowRunId = None

    @property
    def FlowRunId(self):
        """工作流的执行ID
        :rtype: str
        """
        return self._FlowRunId

    @FlowRunId.setter
    def FlowRunId(self, FlowRunId):
        self._FlowRunId = FlowRunId


    def _deserialize(self, params):
        self._FlowRunId = params.get("FlowRunId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteFlowRunResponse(AbstractModel):
    """DeleteFlowRun返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunId: 工作流的运行Id
        :type FlowRunId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowRunId = None
        self._RequestId = None

    @property
    def FlowRunId(self):
        """工作流的运行Id
        :rtype: str
        """
        return self._FlowRunId

    @FlowRunId.setter
    def FlowRunId(self, FlowRunId):
        self._FlowRunId = FlowRunId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FlowRunId = params.get("FlowRunId")
        self._RequestId = params.get("RequestId")


class DeleteInferGatewayRequest(AbstractModel):
    """DeleteInferGateway请求参数结构体

    """


class DeleteInferGatewayResponse(AbstractModel):
    """DeleteInferGateway返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteLifecycleScriptRequest(AbstractModel):
    """DeleteLifecycleScript请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: 生命周期脚本ID
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """生命周期脚本ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteLifecycleScriptResponse(AbstractModel):
    """DeleteLifecycleScript返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteModelAccelerateTaskRequest(AbstractModel):
    """DeleteModelAccelerateTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccTaskId: 模型加速任务ID
        :type ModelAccTaskId: str
        """
        self._ModelAccTaskId = None

    @property
    def ModelAccTaskId(self):
        """模型加速任务ID
        :rtype: str
        """
        return self._ModelAccTaskId

    @ModelAccTaskId.setter
    def ModelAccTaskId(self, ModelAccTaskId):
        self._ModelAccTaskId = ModelAccTaskId


    def _deserialize(self, params):
        self._ModelAccTaskId = params.get("ModelAccTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteModelAccelerateTaskResponse(AbstractModel):
    """DeleteModelAccelerateTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteModelAccelerateTasksRequest(AbstractModel):
    """DeleteModelAccelerateTasks请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccTaskIds: 模型加速任务ID列表
        :type ModelAccTaskIds: list of str
        """
        self._ModelAccTaskIds = None

    @property
    def ModelAccTaskIds(self):
        """模型加速任务ID列表
        :rtype: list of str
        """
        return self._ModelAccTaskIds

    @ModelAccTaskIds.setter
    def ModelAccTaskIds(self, ModelAccTaskIds):
        self._ModelAccTaskIds = ModelAccTaskIds


    def _deserialize(self, params):
        self._ModelAccTaskIds = params.get("ModelAccTaskIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteModelAccelerateTasksResponse(AbstractModel):
    """DeleteModelAccelerateTasks返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteModelRequest(AbstractModel):
    """DeleteModel请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelId: 模型Id
        :type ModelId: str
        """
        self._ModelId = None

    @property
    def ModelId(self):
        """模型Id
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId


    def _deserialize(self, params):
        self._ModelId = params.get("ModelId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteModelResponse(AbstractModel):
    """DeleteModel返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteModelServiceGroupRequest(AbstractModel):
    """DeleteModelServiceGroup请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceGroupId: 服务id
        :type ServiceGroupId: str
        :param _ServiceCategory: 服务类型
        :type ServiceCategory: str
        """
        self._ServiceGroupId = None
        self._ServiceCategory = None

    @property
    def ServiceGroupId(self):
        """服务id
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def ServiceCategory(self):
        """服务类型
        :rtype: str
        """
        return self._ServiceCategory

    @ServiceCategory.setter
    def ServiceCategory(self, ServiceCategory):
        self._ServiceCategory = ServiceCategory


    def _deserialize(self, params):
        self._ServiceGroupId = params.get("ServiceGroupId")
        self._ServiceCategory = params.get("ServiceCategory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteModelServiceGroupResponse(AbstractModel):
    """DeleteModelServiceGroup返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteModelServiceRequest(AbstractModel):
    """DeleteModelService请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceId: 服务id
        :type ServiceId: str
        :param _ServiceCategory: 服务分类
        :type ServiceCategory: str
        """
        self._ServiceId = None
        self._ServiceCategory = None

    @property
    def ServiceId(self):
        """服务id
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId

    @property
    def ServiceCategory(self):
        """服务分类
        :rtype: str
        """
        return self._ServiceCategory

    @ServiceCategory.setter
    def ServiceCategory(self, ServiceCategory):
        self._ServiceCategory = ServiceCategory


    def _deserialize(self, params):
        self._ServiceId = params.get("ServiceId")
        self._ServiceCategory = params.get("ServiceCategory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteModelServiceResponse(AbstractModel):
    """DeleteModelService返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteNotebookImageRecordRequest(AbstractModel):
    """DeleteNotebookImageRecord请求参数结构体

    """

    def __init__(self):
        r"""
        :param _RecordId: 记录id
        :type RecordId: str
        """
        self._RecordId = None

    @property
    def RecordId(self):
        """记录id
        :rtype: str
        """
        return self._RecordId

    @RecordId.setter
    def RecordId(self, RecordId):
        self._RecordId = RecordId


    def _deserialize(self, params):
        self._RecordId = params.get("RecordId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteNotebookImageRecordResponse(AbstractModel):
    """DeleteNotebookImageRecord返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteNotebookRequest(AbstractModel):
    """DeleteNotebook请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: notebook id
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """notebook id
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteNotebookResponse(AbstractModel):
    """DeleteNotebook返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteObjectiveEvaluationRequest(AbstractModel):
    """DeleteObjectiveEvaluation请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteObjectiveEvaluationResponse(AbstractModel):
    """DeleteObjectiveEvaluation返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeletePrivateLinkRequest(AbstractModel):
    """DeletePrivateLink请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceGroupId: 服务组ID
        :type ServiceGroupId: str
        :param _VpcId: 用户VpcId
        :type VpcId: str
        :param _SubnetId: 用户SubnetId
        :type SubnetId: str
        """
        self._ServiceGroupId = None
        self._VpcId = None
        self._SubnetId = None

    @property
    def ServiceGroupId(self):
        """服务组ID
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def VpcId(self):
        """用户VpcId
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """用户SubnetId
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId


    def _deserialize(self, params):
        self._ServiceGroupId = params.get("ServiceGroupId")
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeletePrivateLinkResponse(AbstractModel):
    """DeletePrivateLink返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteProjectRequest(AbstractModel):
    """DeleteProject请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ProjectId: 工程ID
        :type ProjectId: str
        """
        self._ProjectId = None

    @property
    def ProjectId(self):
        """工程ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteProjectResponse(AbstractModel):
    """DeleteProject返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ProjectId: 工程ID
        :type ProjectId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ProjectId = None
        self._RequestId = None

    @property
    def ProjectId(self):
        """工程ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._RequestId = params.get("RequestId")


class DeleteRecyclePolicyRequest(AbstractModel):
    """DeleteRecyclePolicy请求参数结构体

    """

    def __init__(self):
        r"""
        :param _RecyclePolicyId: id值
        :type RecyclePolicyId: str
        """
        self._RecyclePolicyId = None

    @property
    def RecyclePolicyId(self):
        """id值
        :rtype: str
        """
        return self._RecyclePolicyId

    @RecyclePolicyId.setter
    def RecyclePolicyId(self, RecyclePolicyId):
        self._RecyclePolicyId = RecyclePolicyId


    def _deserialize(self, params):
        self._RecyclePolicyId = params.get("RecyclePolicyId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteRecyclePolicyResponse(AbstractModel):
    """DeleteRecyclePolicy返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteSubjectiveEvaluationRequest(AbstractModel):
    """DeleteSubjectiveEvaluation请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteSubjectiveEvaluationResponse(AbstractModel):
    """DeleteSubjectiveEvaluation返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteTaskComparisonRequest(AbstractModel):
    """DeleteTaskComparison请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskComparisonId: 任务ID
        :type TaskComparisonId: str
        """
        self._TaskComparisonId = None

    @property
    def TaskComparisonId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskComparisonId

    @TaskComparisonId.setter
    def TaskComparisonId(self, TaskComparisonId):
        self._TaskComparisonId = TaskComparisonId


    def _deserialize(self, params):
        self._TaskComparisonId = params.get("TaskComparisonId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteTaskComparisonResponse(AbstractModel):
    """DeleteTaskComparison返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteTaskProcessRequest(AbstractModel):
    """DeleteTaskProcess请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskIds: 任务ID列表
        :type TaskIds: list of str
        """
        self._TaskIds = None

    @property
    def TaskIds(self):
        """任务ID列表
        :rtype: list of str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteTaskProcessResponse(AbstractModel):
    """DeleteTaskProcess返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteTencentLabWhitelistRequest(AbstractModel):
    """DeleteTencentLabWhitelist请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ClassUin: 需要增加白名单的主uin
        :type ClassUin: str
        :param _ClassSubUin: 需要增加白名单的subUin
        :type ClassSubUin: str
        :param _ResourceId: Tione 平台维护的资源 ID，对应腾学会的课程 ID
        :type ResourceId: str
        """
        self._ClassUin = None
        self._ClassSubUin = None
        self._ResourceId = None

    @property
    def ClassUin(self):
        """需要增加白名单的主uin
        :rtype: str
        """
        return self._ClassUin

    @ClassUin.setter
    def ClassUin(self, ClassUin):
        self._ClassUin = ClassUin

    @property
    def ClassSubUin(self):
        """需要增加白名单的subUin
        :rtype: str
        """
        return self._ClassSubUin

    @ClassSubUin.setter
    def ClassSubUin(self, ClassSubUin):
        self._ClassSubUin = ClassSubUin

    @property
    def ResourceId(self):
        """Tione 平台维护的资源 ID，对应腾学会的课程 ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId


    def _deserialize(self, params):
        self._ClassUin = params.get("ClassUin")
        self._ClassSubUin = params.get("ClassSubUin")
        self._ResourceId = params.get("ResourceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteTencentLabWhitelistResponse(AbstractModel):
    """DeleteTencentLabWhitelist返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteTencentLabWhitelistTestRequest(AbstractModel):
    """DeleteTencentLabWhitelistTest请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ClassUin: 需要增加白名单的主uin
        :type ClassUin: str
        :param _ClassSubUin: 需要增加白名单的subUin
        :type ClassSubUin: str
        :param _ResourceId: Tione 平台维护的资源 ID，对应腾学会的课程 ID
        :type ResourceId: str
        """
        self._ClassUin = None
        self._ClassSubUin = None
        self._ResourceId = None

    @property
    def ClassUin(self):
        """需要增加白名单的主uin
        :rtype: str
        """
        return self._ClassUin

    @ClassUin.setter
    def ClassUin(self, ClassUin):
        self._ClassUin = ClassUin

    @property
    def ClassSubUin(self):
        """需要增加白名单的subUin
        :rtype: str
        """
        return self._ClassSubUin

    @ClassSubUin.setter
    def ClassSubUin(self, ClassSubUin):
        self._ClassSubUin = ClassSubUin

    @property
    def ResourceId(self):
        """Tione 平台维护的资源 ID，对应腾学会的课程 ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId


    def _deserialize(self, params):
        self._ClassUin = params.get("ClassUin")
        self._ClassSubUin = params.get("ClassSubUin")
        self._ResourceId = params.get("ResourceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteTencentLabWhitelistTestResponse(AbstractModel):
    """DeleteTencentLabWhitelistTest返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteTrainingMetricsRequest(AbstractModel):
    """DeleteTrainingMetrics请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskIds: 训练任务Id列表
        :type TaskIds: list of str
        """
        self._TaskIds = None

    @property
    def TaskIds(self):
        """训练任务Id列表
        :rtype: list of str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteTrainingMetricsResponse(AbstractModel):
    """DeleteTrainingMetrics返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteTrainingModelRequest(AbstractModel):
    """DeleteTrainingModel请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TrainingModelId: 模型ID
        :type TrainingModelId: str
        :param _EnableDeleteCos: 是否同步清理cos
        :type EnableDeleteCos: bool
        :param _ModelVersionType: 删除模型类型，枚举值：NORMAL 普通，ACCELERATE 加速，不传则删除所有
        :type ModelVersionType: str
        :param _ModelAffiliation: 模型所属模块，枚举值：MODEL_REPO 模型仓库，
 AI_MARKET AI市场，不传则删除模型仓库模型
        :type ModelAffiliation: str
        """
        self._TrainingModelId = None
        self._EnableDeleteCos = None
        self._ModelVersionType = None
        self._ModelAffiliation = None

    @property
    def TrainingModelId(self):
        """模型ID
        :rtype: str
        """
        return self._TrainingModelId

    @TrainingModelId.setter
    def TrainingModelId(self, TrainingModelId):
        self._TrainingModelId = TrainingModelId

    @property
    def EnableDeleteCos(self):
        """是否同步清理cos
        :rtype: bool
        """
        return self._EnableDeleteCos

    @EnableDeleteCos.setter
    def EnableDeleteCos(self, EnableDeleteCos):
        self._EnableDeleteCos = EnableDeleteCos

    @property
    def ModelVersionType(self):
        """删除模型类型，枚举值：NORMAL 普通，ACCELERATE 加速，不传则删除所有
        :rtype: str
        """
        return self._ModelVersionType

    @ModelVersionType.setter
    def ModelVersionType(self, ModelVersionType):
        self._ModelVersionType = ModelVersionType

    @property
    def ModelAffiliation(self):
        """模型所属模块，枚举值：MODEL_REPO 模型仓库，
 AI_MARKET AI市场，不传则删除模型仓库模型
        :rtype: str
        """
        return self._ModelAffiliation

    @ModelAffiliation.setter
    def ModelAffiliation(self, ModelAffiliation):
        self._ModelAffiliation = ModelAffiliation


    def _deserialize(self, params):
        self._TrainingModelId = params.get("TrainingModelId")
        self._EnableDeleteCos = params.get("EnableDeleteCos")
        self._ModelVersionType = params.get("ModelVersionType")
        self._ModelAffiliation = params.get("ModelAffiliation")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteTrainingModelResponse(AbstractModel):
    """DeleteTrainingModel返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteTrainingModelVersionRequest(AbstractModel):
    """DeleteTrainingModelVersion请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TrainingModelVersionId: 模型版本ID
        :type TrainingModelVersionId: str
        :param _EnableDeleteCos: 是否同步清理cos
        :type EnableDeleteCos: bool
        """
        self._TrainingModelVersionId = None
        self._EnableDeleteCos = None

    @property
    def TrainingModelVersionId(self):
        """模型版本ID
        :rtype: str
        """
        return self._TrainingModelVersionId

    @TrainingModelVersionId.setter
    def TrainingModelVersionId(self, TrainingModelVersionId):
        self._TrainingModelVersionId = TrainingModelVersionId

    @property
    def EnableDeleteCos(self):
        """是否同步清理cos
        :rtype: bool
        """
        return self._EnableDeleteCos

    @EnableDeleteCos.setter
    def EnableDeleteCos(self, EnableDeleteCos):
        self._EnableDeleteCos = EnableDeleteCos


    def _deserialize(self, params):
        self._TrainingModelVersionId = params.get("TrainingModelVersionId")
        self._EnableDeleteCos = params.get("EnableDeleteCos")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteTrainingModelVersionResponse(AbstractModel):
    """DeleteTrainingModelVersion返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteTrainingTaskRequest(AbstractModel):
    """DeleteTrainingTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: 训练任务ID
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """训练任务ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteTrainingTaskResponse(AbstractModel):
    """DeleteTrainingTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeleteVpcPrivateLinkRequest(AbstractModel):
    """DeleteVpcPrivateLink请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: id值
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """id值
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeleteVpcPrivateLinkResponse(AbstractModel):
    """DeleteVpcPrivateLink返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class DeliverBillingResourceRequest(AbstractModel):
    """DeliverBillingResource请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TimeUnit: 节点续费的时间单位(计费周期范围)
注意：此字段为枚举值
说明：m: 月  y: 年
        :type TimeUnit: str
        :param _TimeSpan: 节点续费的时间大小
注意：节点续费最大支持2年; 因此当TimeUnit为m时，此字段取值不可大于24，TimeUnit为y时，此字段取值不可大于2
        :type TimeSpan: int
        :param _ResourceIds: 资源组节点id列表
注意: 单次最多100个
        :type ResourceIds: list of str
        :param _ResourceGroupId: 资源组id
        :type ResourceGroupId: str
        """
        self._TimeUnit = None
        self._TimeSpan = None
        self._ResourceIds = None
        self._ResourceGroupId = None

    @property
    def TimeUnit(self):
        """节点续费的时间单位(计费周期范围)
注意：此字段为枚举值
说明：m: 月  y: 年
        :rtype: str
        """
        return self._TimeUnit

    @TimeUnit.setter
    def TimeUnit(self, TimeUnit):
        self._TimeUnit = TimeUnit

    @property
    def TimeSpan(self):
        """节点续费的时间大小
注意：节点续费最大支持2年; 因此当TimeUnit为m时，此字段取值不可大于24，TimeUnit为y时，此字段取值不可大于2
        :rtype: int
        """
        return self._TimeSpan

    @TimeSpan.setter
    def TimeSpan(self, TimeSpan):
        self._TimeSpan = TimeSpan

    @property
    def ResourceIds(self):
        """资源组节点id列表
注意: 单次最多100个
        :rtype: list of str
        """
        return self._ResourceIds

    @ResourceIds.setter
    def ResourceIds(self, ResourceIds):
        self._ResourceIds = ResourceIds

    @property
    def ResourceGroupId(self):
        """资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId


    def _deserialize(self, params):
        self._TimeUnit = params.get("TimeUnit")
        self._TimeSpan = params.get("TimeSpan")
        self._ResourceIds = params.get("ResourceIds")
        self._ResourceGroupId = params.get("ResourceGroupId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeliverBillingResourceResponse(AbstractModel):
    """DeliverBillingResource返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FailResources: 续费失败的节点及其失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :type FailResources: list of FailResource
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FailResources = None
        self._RequestId = None

    @property
    def FailResources(self):
        """续费失败的节点及其失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of FailResource
        """
        return self._FailResources

    @FailResources.setter
    def FailResources(self, FailResources):
        self._FailResources = FailResources

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FailResources") is not None:
            self._FailResources = []
            for item in params.get("FailResources"):
                obj = FailResource()
                obj._deserialize(item)
                self._FailResources.append(obj)
        self._RequestId = params.get("RequestId")


class DemoFlowDetail(AbstractModel):
    """案例工作流详情

    """

    def __init__(self):
        r"""
        :param _DemoFlowId: 案例工作流ID
        :type DemoFlowId: str
        :param _DemoProjectId: 案例工程ID
        :type DemoProjectId: str
        :param _DemoFlowName: 案例工作流名称
        :type DemoFlowName: str
        :param _Description: 案例工作流描述
注意：此字段可能返回 null，表示取不到有效值。
        :type Description: str
        :param _CanvasData: 案例工作流画布信息
        :type CanvasData: str
        :param _DocUrl: 案例工作流文档链接
        :type DocUrl: str
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        """
        self._DemoFlowId = None
        self._DemoProjectId = None
        self._DemoFlowName = None
        self._Description = None
        self._CanvasData = None
        self._DocUrl = None
        self._CreateTime = None
        self._UpdateTime = None

    @property
    def DemoFlowId(self):
        """案例工作流ID
        :rtype: str
        """
        return self._DemoFlowId

    @DemoFlowId.setter
    def DemoFlowId(self, DemoFlowId):
        self._DemoFlowId = DemoFlowId

    @property
    def DemoProjectId(self):
        """案例工程ID
        :rtype: str
        """
        return self._DemoProjectId

    @DemoProjectId.setter
    def DemoProjectId(self, DemoProjectId):
        self._DemoProjectId = DemoProjectId

    @property
    def DemoFlowName(self):
        """案例工作流名称
        :rtype: str
        """
        return self._DemoFlowName

    @DemoFlowName.setter
    def DemoFlowName(self, DemoFlowName):
        self._DemoFlowName = DemoFlowName

    @property
    def Description(self):
        """案例工作流描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def CanvasData(self):
        """案例工作流画布信息
        :rtype: str
        """
        return self._CanvasData

    @CanvasData.setter
    def CanvasData(self, CanvasData):
        self._CanvasData = CanvasData

    @property
    def DocUrl(self):
        """案例工作流文档链接
        :rtype: str
        """
        return self._DocUrl

    @DocUrl.setter
    def DocUrl(self, DocUrl):
        self._DocUrl = DocUrl

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime


    def _deserialize(self, params):
        self._DemoFlowId = params.get("DemoFlowId")
        self._DemoProjectId = params.get("DemoProjectId")
        self._DemoFlowName = params.get("DemoFlowName")
        self._Description = params.get("Description")
        self._CanvasData = params.get("CanvasData")
        self._DocUrl = params.get("DocUrl")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DemoProjectDetail(AbstractModel):
    """案例工程详情

    """

    def __init__(self):
        r"""
        :param _DemoProjectId: 案例工程ID
        :type DemoProjectId: str
        :param _DemoProjectName: 案例工程名称
        :type DemoProjectName: str
        :param _Description: 案例工程描述
注意：此字段可能返回 null，表示取不到有效值。
        :type Description: str
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        """
        self._DemoProjectId = None
        self._DemoProjectName = None
        self._Description = None
        self._CreateTime = None
        self._UpdateTime = None

    @property
    def DemoProjectId(self):
        """案例工程ID
        :rtype: str
        """
        return self._DemoProjectId

    @DemoProjectId.setter
    def DemoProjectId(self, DemoProjectId):
        self._DemoProjectId = DemoProjectId

    @property
    def DemoProjectName(self):
        """案例工程名称
        :rtype: str
        """
        return self._DemoProjectName

    @DemoProjectName.setter
    def DemoProjectName(self, DemoProjectName):
        self._DemoProjectName = DemoProjectName

    @property
    def Description(self):
        """案例工程描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime


    def _deserialize(self, params):
        self._DemoProjectId = params.get("DemoProjectId")
        self._DemoProjectName = params.get("DemoProjectName")
        self._Description = params.get("Description")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Dependency(AbstractModel):
    """依赖性描述子

    """

    def __init__(self):
        r"""
        :param _Production: 产品名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Production: str
        :param _Action: 对产品进行的操作
注意：此字段可能返回 null，表示取不到有效值。
        :type Action: str
        :param _ResourceId: cls-123
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceId: list of str
        """
        self._Production = None
        self._Action = None
        self._ResourceId = None

    @property
    def Production(self):
        """产品名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Production

    @Production.setter
    def Production(self, Production):
        self._Production = Production

    @property
    def Action(self):
        """对产品进行的操作
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Action

    @Action.setter
    def Action(self, Action):
        self._Action = Action

    @property
    def ResourceId(self):
        """cls-123
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId


    def _deserialize(self, params):
        self._Production = params.get("Production")
        self._Action = params.get("Action")
        self._ResourceId = params.get("ResourceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DependencyAccessibility(AbstractModel):
    """依赖可访问性描述子

    """

    def __init__(self):
        r"""
        :param _Production: 产品名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Production: str
        :param _Action: 操作接口
注意：此字段可能返回 null，表示取不到有效值。
        :type Action: str
        :param _ResourceId: 资源ID列表
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceId: list of str
        :param _Accessible: 可访问性标志
注意：此字段可能返回 null，表示取不到有效值。
        :type Accessible: bool
        :param _Policy: 资源六段式描述
注意：此字段可能返回 null，表示取不到有效值。
        :type Policy: list of str
        """
        self._Production = None
        self._Action = None
        self._ResourceId = None
        self._Accessible = None
        self._Policy = None

    @property
    def Production(self):
        """产品名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Production

    @Production.setter
    def Production(self, Production):
        self._Production = Production

    @property
    def Action(self):
        """操作接口
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Action

    @Action.setter
    def Action(self, Action):
        self._Action = Action

    @property
    def ResourceId(self):
        """资源ID列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def Accessible(self):
        """可访问性标志
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._Accessible

    @Accessible.setter
    def Accessible(self, Accessible):
        self._Accessible = Accessible

    @property
    def Policy(self):
        """资源六段式描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._Policy

    @Policy.setter
    def Policy(self, Policy):
        self._Policy = Policy


    def _deserialize(self, params):
        self._Production = params.get("Production")
        self._Action = params.get("Action")
        self._ResourceId = params.get("ResourceId")
        self._Accessible = params.get("Accessible")
        self._Policy = params.get("Policy")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAPIConfigsRequest(AbstractModel):
    """DescribeAPIConfigs请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        :param _Limit: 返回数量，默认为20，最大值为100
        :type Limit: int
        :param _Order: 输出列表的排列顺序。取值范围：ASC：升序排列 DESC：降序排列
        :type Order: str
        :param _OrderField: 排序的依据字段， 取值范围 "CreateTime" "UpdateTime"
        :type OrderField: str
        :param _Filters: 分页参数，支持的分页过滤Name包括：
["ClusterId", "ServiceId", "ServiceGroupName", "ServiceGroupId"]
        :type Filters: list of Filter
        """
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._OrderField = None
        self._Filters = None

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回数量，默认为20，最大值为100
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """输出列表的排列顺序。取值范围：ASC：升序排列 DESC：降序排列
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """排序的依据字段， 取值范围 "CreateTime" "UpdateTime"
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Filters(self):
        """分页参数，支持的分页过滤Name包括：
["ClusterId", "ServiceId", "ServiceGroupName", "ServiceGroupId"]
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAPIConfigsResponse(AbstractModel):
    """DescribeAPIConfigs返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 接口数量
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _Details: 接口详情
注意：此字段可能返回 null，表示取不到有效值。
        :type Details: list of APIConfigDetail
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._Details = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """接口数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Details(self):
        """接口详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of APIConfigDetail
        """
        return self._Details

    @Details.setter
    def Details(self, Details):
        self._Details = Details

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Details") is not None:
            self._Details = []
            for item in params.get("Details"):
                obj = APIConfigDetail()
                obj._deserialize(item)
                self._Details.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAlgoGroupListRequest(AbstractModel):
    """DescribeAlgoGroupList请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤器
        :type Filters: list of Filter
        :param _Offset: 偏移量
        :type Offset: int
        :param _Limit: 返回记录条数，默认10
        :type Limit: int
        :param _OrderField: 排序字段，默认CreateTime
        :type OrderField: str
        :param _Order: 排序方式：ASC/DESC，默认DESC
        :type Order: str
        :param _TagFilters: 标签过滤器
        :type TagFilters: list of TagFilter
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._OrderField = None
        self._Order = None
        self._TagFilters = None

    @property
    def Filters(self):
        """过滤器
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回记录条数，默认10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def OrderField(self):
        """排序字段，默认CreateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Order(self):
        """排序方式：ASC/DESC，默认DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def TagFilters(self):
        """标签过滤器
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._OrderField = params.get("OrderField")
        self._Order = params.get("Order")
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAlgoGroupListResponse(AbstractModel):
    """DescribeAlgoGroupList返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 算法组数量
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _AlgoGroups: 个人算法组列表
注意：此字段可能返回 null，表示取不到有效值。
        :type AlgoGroups: :class:`tencentcloud.tione.v20211111.models.AlgoGroup`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._AlgoGroups = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """算法组数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def AlgoGroups(self):
        """个人算法组列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.AlgoGroup`
        """
        return self._AlgoGroups

    @AlgoGroups.setter
    def AlgoGroups(self, AlgoGroups):
        self._AlgoGroups = AlgoGroups

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("AlgoGroups") is not None:
            self._AlgoGroups = AlgoGroup()
            self._AlgoGroups._deserialize(params.get("AlgoGroups"))
        self._RequestId = params.get("RequestId")


class DescribeAlgoVersionListRequest(AbstractModel):
    """DescribeAlgoVersionList请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤器
        :type Filters: list of Filter
        :param _Offset: 偏移量
        :type Offset: int
        :param _Limit: 返回记录条数，默认10
        :type Limit: int
        :param _TagFilters: 标签过滤器
        :type TagFilters: list of TagFilter
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._TagFilters = None

    @property
    def Filters(self):
        """过滤器
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回记录条数，默认10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def TagFilters(self):
        """标签过滤器
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAlgoVersionListResponse(AbstractModel):
    """DescribeAlgoVersionList返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 算法版本数量
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _AlgoVersions: 个人算法版本列表
注意：此字段可能返回 null，表示取不到有效值。
        :type AlgoVersions: list of AlgoVersion
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._AlgoVersions = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """算法版本数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def AlgoVersions(self):
        """个人算法版本列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of AlgoVersion
        """
        return self._AlgoVersions

    @AlgoVersions.setter
    def AlgoVersions(self, AlgoVersions):
        self._AlgoVersions = AlgoVersions

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("AlgoVersions") is not None:
            self._AlgoVersions = []
            for item in params.get("AlgoVersions"):
                obj = AlgoVersion()
                obj._deserialize(item)
                self._AlgoVersions.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAnnotateRecordListRequest(AbstractModel):
    """DescribeAnnotateRecordList请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _Offset: 偏移量
        :type Offset: int
        :param _Limit: 限制数
        :type Limit: int
        :param _Filters: 过滤参数
        :type Filters: list of Filter
        :param _OnlyResult: 只获取结果不获取图片
        :type OnlyResult: bool
        :param _WithSchema: 同时返回表头
        :type WithSchema: bool
        """
        self._TaskId = None
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._OnlyResult = None
        self._WithSchema = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Offset(self):
        """偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """限制数
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        """过滤参数
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OnlyResult(self):
        """只获取结果不获取图片
        :rtype: bool
        """
        return self._OnlyResult

    @OnlyResult.setter
    def OnlyResult(self, OnlyResult):
        self._OnlyResult = OnlyResult

    @property
    def WithSchema(self):
        """同时返回表头
        :rtype: bool
        """
        return self._WithSchema

    @WithSchema.setter
    def WithSchema(self, WithSchema):
        self._WithSchema = WithSchema


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._OnlyResult = params.get("OnlyResult")
        self._WithSchema = params.get("WithSchema")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAnnotateRecordListResponse(AbstractModel):
    """DescribeAnnotateRecordList返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 总量
        :type TotalCount: int
        :param _RowItems: 样本列表
注意：此字段可能返回 null，表示取不到有效值。
        :type RowItems: list of AnnotateRecord
        :param _Schema: 表头
        :type Schema: list of str
        :param _AsyncTask: 异步任务状态。有可能仅返回异步任务状态，不返回样本列表
注意：此字段可能返回 null，表示取不到有效值。
        :type AsyncTask: :class:`tencentcloud.tione.v20211111.models.AsyncTask`
        :param _AnnotatedCount: 已标注数量
        :type AnnotatedCount: int
        :param _Offset: 偏移量，当使用RecordId进行筛选时返回
注意：此字段可能返回 null，表示取不到有效值。
        :type Offset: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._RowItems = None
        self._Schema = None
        self._AsyncTask = None
        self._AnnotatedCount = None
        self._Offset = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """总量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RowItems(self):
        """样本列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of AnnotateRecord
        """
        return self._RowItems

    @RowItems.setter
    def RowItems(self, RowItems):
        self._RowItems = RowItems

    @property
    def Schema(self):
        """表头
        :rtype: list of str
        """
        return self._Schema

    @Schema.setter
    def Schema(self, Schema):
        self._Schema = Schema

    @property
    def AsyncTask(self):
        """异步任务状态。有可能仅返回异步任务状态，不返回样本列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.AsyncTask`
        """
        return self._AsyncTask

    @AsyncTask.setter
    def AsyncTask(self, AsyncTask):
        self._AsyncTask = AsyncTask

    @property
    def AnnotatedCount(self):
        """已标注数量
        :rtype: int
        """
        return self._AnnotatedCount

    @AnnotatedCount.setter
    def AnnotatedCount(self, AnnotatedCount):
        self._AnnotatedCount = AnnotatedCount

    @property
    def Offset(self):
        """偏移量，当使用RecordId进行筛选时返回
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("RowItems") is not None:
            self._RowItems = []
            for item in params.get("RowItems"):
                obj = AnnotateRecord()
                obj._deserialize(item)
                self._RowItems.append(obj)
        self._Schema = params.get("Schema")
        if params.get("AsyncTask") is not None:
            self._AsyncTask = AsyncTask()
            self._AsyncTask._deserialize(params.get("AsyncTask"))
        self._AnnotatedCount = params.get("AnnotatedCount")
        self._Offset = params.get("Offset")
        self._RequestId = params.get("RequestId")


class DescribeAnnotateTaskStatusRequest(AbstractModel):
    """DescribeAnnotateTaskStatus请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAnnotateTaskStatusResponse(AbstractModel):
    """DescribeAnnotateTaskStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _LastSubmitedTask: 最近成功提交的任务
注意：此字段可能返回 null，表示取不到有效值。
        :type LastSubmitedTask: :class:`tencentcloud.tione.v20211111.models.AsyncTask`
        :param _NumUnsubmitted: 待提交样本数
        :type NumUnsubmitted: int
        :param _LastSubmitNum: 上次提交样本数目
        :type LastSubmitNum: int
        :param _LastSubmitUin: 上次提交UIN
        :type LastSubmitUin: str
        :param _LastSubmitSubAccountUin: 上次提交SubUin
        :type LastSubmitSubAccountUin: str
        :param _LastSubmitTimeStamp: 上次提交时间戳
        :type LastSubmitTimeStamp: str
        :param _TaskInfo: 标注任务相关信息
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskInfo: :class:`tencentcloud.tione.v20211111.models.AnnotationTaskInfo`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._LastSubmitedTask = None
        self._NumUnsubmitted = None
        self._LastSubmitNum = None
        self._LastSubmitUin = None
        self._LastSubmitSubAccountUin = None
        self._LastSubmitTimeStamp = None
        self._TaskInfo = None
        self._RequestId = None

    @property
    def LastSubmitedTask(self):
        """最近成功提交的任务
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.AsyncTask`
        """
        return self._LastSubmitedTask

    @LastSubmitedTask.setter
    def LastSubmitedTask(self, LastSubmitedTask):
        self._LastSubmitedTask = LastSubmitedTask

    @property
    def NumUnsubmitted(self):
        """待提交样本数
        :rtype: int
        """
        return self._NumUnsubmitted

    @NumUnsubmitted.setter
    def NumUnsubmitted(self, NumUnsubmitted):
        self._NumUnsubmitted = NumUnsubmitted

    @property
    def LastSubmitNum(self):
        """上次提交样本数目
        :rtype: int
        """
        return self._LastSubmitNum

    @LastSubmitNum.setter
    def LastSubmitNum(self, LastSubmitNum):
        self._LastSubmitNum = LastSubmitNum

    @property
    def LastSubmitUin(self):
        """上次提交UIN
        :rtype: str
        """
        return self._LastSubmitUin

    @LastSubmitUin.setter
    def LastSubmitUin(self, LastSubmitUin):
        self._LastSubmitUin = LastSubmitUin

    @property
    def LastSubmitSubAccountUin(self):
        """上次提交SubUin
        :rtype: str
        """
        return self._LastSubmitSubAccountUin

    @LastSubmitSubAccountUin.setter
    def LastSubmitSubAccountUin(self, LastSubmitSubAccountUin):
        self._LastSubmitSubAccountUin = LastSubmitSubAccountUin

    @property
    def LastSubmitTimeStamp(self):
        """上次提交时间戳
        :rtype: str
        """
        return self._LastSubmitTimeStamp

    @LastSubmitTimeStamp.setter
    def LastSubmitTimeStamp(self, LastSubmitTimeStamp):
        self._LastSubmitTimeStamp = LastSubmitTimeStamp

    @property
    def TaskInfo(self):
        """标注任务相关信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.AnnotationTaskInfo`
        """
        return self._TaskInfo

    @TaskInfo.setter
    def TaskInfo(self, TaskInfo):
        self._TaskInfo = TaskInfo

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("LastSubmitedTask") is not None:
            self._LastSubmitedTask = AsyncTask()
            self._LastSubmitedTask._deserialize(params.get("LastSubmitedTask"))
        self._NumUnsubmitted = params.get("NumUnsubmitted")
        self._LastSubmitNum = params.get("LastSubmitNum")
        self._LastSubmitUin = params.get("LastSubmitUin")
        self._LastSubmitSubAccountUin = params.get("LastSubmitSubAccountUin")
        self._LastSubmitTimeStamp = params.get("LastSubmitTimeStamp")
        if params.get("TaskInfo") is not None:
            self._TaskInfo = AnnotationTaskInfo()
            self._TaskInfo._deserialize(params.get("TaskInfo"))
        self._RequestId = params.get("RequestId")


class DescribeAnnotateTaskTempCosInfoRequest(AbstractModel):
    """DescribeAnnotateTaskTempCosInfo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _RecordId: 样本id
        :type RecordId: str
        :param _FileName: 文件名称
        :type FileName: str
        """
        self._TaskId = None
        self._RecordId = None
        self._FileName = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RecordId(self):
        """样本id
        :rtype: str
        """
        return self._RecordId

    @RecordId.setter
    def RecordId(self, RecordId):
        self._RecordId = RecordId

    @property
    def FileName(self):
        """文件名称
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RecordId = params.get("RecordId")
        self._FileName = params.get("FileName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAnnotateTaskTempCosInfoResponse(AbstractModel):
    """DescribeAnnotateTaskTempCosInfo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TempCosCredential: 用于上传图片到运营账号COS的临时秘钥
        :type TempCosCredential: :class:`tencentcloud.tione.v20211111.models.TempCosCredential`
        :param _TempBucket: 用于上传图片到运营账号COS的桶
        :type TempBucket: str
        :param _TempPath: 用于上传图片到运营账号COS的路径
        :type TempPath: str
        :param _ExpiredTime: 临时访问凭证有效的时间，返回 Unix 时间戳
        :type ExpiredTime: str
        :param _Expiration: 临时访问凭证有效的时间，以 iso8601 格式的 UTC 时间表示
        :type Expiration: str
        :param _RelativePath: 在标注结果中记录的相对路径
        :type RelativePath: str
        :param _Region: 用于上传图片到运营账号COS的地域
        :type Region: str
        :param _StartTime: 临时访问凭证有效的开始时间，返回 Unix 时间戳
        :type StartTime: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TempCosCredential = None
        self._TempBucket = None
        self._TempPath = None
        self._ExpiredTime = None
        self._Expiration = None
        self._RelativePath = None
        self._Region = None
        self._StartTime = None
        self._RequestId = None

    @property
    def TempCosCredential(self):
        """用于上传图片到运营账号COS的临时秘钥
        :rtype: :class:`tencentcloud.tione.v20211111.models.TempCosCredential`
        """
        return self._TempCosCredential

    @TempCosCredential.setter
    def TempCosCredential(self, TempCosCredential):
        self._TempCosCredential = TempCosCredential

    @property
    def TempBucket(self):
        """用于上传图片到运营账号COS的桶
        :rtype: str
        """
        return self._TempBucket

    @TempBucket.setter
    def TempBucket(self, TempBucket):
        self._TempBucket = TempBucket

    @property
    def TempPath(self):
        """用于上传图片到运营账号COS的路径
        :rtype: str
        """
        return self._TempPath

    @TempPath.setter
    def TempPath(self, TempPath):
        self._TempPath = TempPath

    @property
    def ExpiredTime(self):
        """临时访问凭证有效的时间，返回 Unix 时间戳
        :rtype: str
        """
        return self._ExpiredTime

    @ExpiredTime.setter
    def ExpiredTime(self, ExpiredTime):
        self._ExpiredTime = ExpiredTime

    @property
    def Expiration(self):
        """临时访问凭证有效的时间，以 iso8601 格式的 UTC 时间表示
        :rtype: str
        """
        return self._Expiration

    @Expiration.setter
    def Expiration(self, Expiration):
        self._Expiration = Expiration

    @property
    def RelativePath(self):
        """在标注结果中记录的相对路径
        :rtype: str
        """
        return self._RelativePath

    @RelativePath.setter
    def RelativePath(self, RelativePath):
        self._RelativePath = RelativePath

    @property
    def Region(self):
        """用于上传图片到运营账号COS的地域
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def StartTime(self):
        """临时访问凭证有效的开始时间，返回 Unix 时间戳
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TempCosCredential") is not None:
            self._TempCosCredential = TempCosCredential()
            self._TempCosCredential._deserialize(params.get("TempCosCredential"))
        self._TempBucket = params.get("TempBucket")
        self._TempPath = params.get("TempPath")
        self._ExpiredTime = params.get("ExpiredTime")
        self._Expiration = params.get("Expiration")
        self._RelativePath = params.get("RelativePath")
        self._Region = params.get("Region")
        self._StartTime = params.get("StartTime")
        self._RequestId = params.get("RequestId")


class DescribeAnnotatedTaskListRequest(AbstractModel):
    """DescribeAnnotatedTaskList请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        :param _Limit: 页面大小，默认为10
        :type Limit: int
        :param _Filters: 过滤条件数组，支持数据集ID，标注场景、任务状态、数据集名称、人物名称的过滤，后面两个支持模糊查询
        :type Filters: list of Filter
        :param _TagFilters: 标签过滤条件
        :type TagFilters: list of TagFilter
        :param _Order: 排序方向：Asc Desc
        :type Order: str
        :param _OrderField: 排序字段
        :type OrderField: str
        """
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._TagFilters = None
        self._Order = None
        self._OrderField = None

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """页面大小，默认为10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        """过滤条件数组，支持数据集ID，标注场景、任务状态、数据集名称、人物名称的过滤，后面两个支持模糊查询
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签过滤条件
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def Order(self):
        """排序方向：Asc Desc
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """排序字段
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAnnotatedTaskListResponse(AbstractModel):
    """DescribeAnnotatedTaskList返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 任务列表总数量
        :type TotalCount: int
        :param _TaskList: 标注任务详情列表
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskList: list of AnnotationTaskInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._TaskList = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """任务列表总数量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TaskList(self):
        """标注任务详情列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of AnnotationTaskInfo
        """
        return self._TaskList

    @TaskList.setter
    def TaskList(self, TaskList):
        self._TaskList = TaskList

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("TaskList") is not None:
            self._TaskList = []
            for item in params.get("TaskList"):
                obj = AnnotationTaskInfo()
                obj._deserialize(item)
                self._TaskList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAnnotationKeysRequest(AbstractModel):
    """DescribeAnnotationKeys请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        """
        self._DatasetId = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAnnotationKeysResponse(AbstractModel):
    """DescribeAnnotationKeys返回参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _InUpdating: 当前是否处于更新之中
注意：此字段可能返回 null，表示取不到有效值。
        :type InUpdating: bool
        :param _LastUpdateStatus: 上一次更新的结果是否成功
注意：此字段可能返回 null，表示取不到有效值。
        :type LastUpdateStatus: bool
        :param _LastUpdateMsg: 上一次更新的报错信息
注意：此字段可能返回 null，表示取不到有效值。
        :type LastUpdateMsg: str
        :param _LastUpdateKeyType: 上一次更新的KeyType
注意：此字段可能返回 null，表示取不到有效值。
        :type LastUpdateKeyType: int
        :param _Version: ver
注意：此字段可能返回 null，表示取不到有效值。
        :type Version: str
        :param _StandardKeySet: 标注key名字典
注意：此字段可能返回 null，表示取不到有效值。
        :type StandardKeySet: :class:`tencentcloud.tione.v20211111.models.KeySetType`
        :param _AdditionalKeySet: 标注key名字典
注意：此字段可能返回 null，表示取不到有效值。
        :type AdditionalKeySet: :class:`tencentcloud.tione.v20211111.models.KeySetType`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._DatasetId = None
        self._InUpdating = None
        self._LastUpdateStatus = None
        self._LastUpdateMsg = None
        self._LastUpdateKeyType = None
        self._Version = None
        self._StandardKeySet = None
        self._AdditionalKeySet = None
        self._RequestId = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def InUpdating(self):
        """当前是否处于更新之中
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._InUpdating

    @InUpdating.setter
    def InUpdating(self, InUpdating):
        self._InUpdating = InUpdating

    @property
    def LastUpdateStatus(self):
        """上一次更新的结果是否成功
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._LastUpdateStatus

    @LastUpdateStatus.setter
    def LastUpdateStatus(self, LastUpdateStatus):
        self._LastUpdateStatus = LastUpdateStatus

    @property
    def LastUpdateMsg(self):
        """上一次更新的报错信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LastUpdateMsg

    @LastUpdateMsg.setter
    def LastUpdateMsg(self, LastUpdateMsg):
        self._LastUpdateMsg = LastUpdateMsg

    @property
    def LastUpdateKeyType(self):
        """上一次更新的KeyType
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._LastUpdateKeyType

    @LastUpdateKeyType.setter
    def LastUpdateKeyType(self, LastUpdateKeyType):
        self._LastUpdateKeyType = LastUpdateKeyType

    @property
    def Version(self):
        """ver
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def StandardKeySet(self):
        """标注key名字典
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.KeySetType`
        """
        return self._StandardKeySet

    @StandardKeySet.setter
    def StandardKeySet(self, StandardKeySet):
        self._StandardKeySet = StandardKeySet

    @property
    def AdditionalKeySet(self):
        """标注key名字典
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.KeySetType`
        """
        return self._AdditionalKeySet

    @AdditionalKeySet.setter
    def AdditionalKeySet(self, AdditionalKeySet):
        self._AdditionalKeySet = AdditionalKeySet

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._InUpdating = params.get("InUpdating")
        self._LastUpdateStatus = params.get("LastUpdateStatus")
        self._LastUpdateMsg = params.get("LastUpdateMsg")
        self._LastUpdateKeyType = params.get("LastUpdateKeyType")
        self._Version = params.get("Version")
        if params.get("StandardKeySet") is not None:
            self._StandardKeySet = KeySetType()
            self._StandardKeySet._deserialize(params.get("StandardKeySet"))
        if params.get("AdditionalKeySet") is not None:
            self._AdditionalKeySet = KeySetType()
            self._AdditionalKeySet._deserialize(params.get("AdditionalKeySet"))
        self._RequestId = params.get("RequestId")


class DescribeAsyncChatMessageRequest(AbstractModel):
    """DescribeAsyncChatMessage请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 异步任务Id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """异步任务Id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAsyncChatMessageResponse(AbstractModel):
    """DescribeAsyncChatMessage返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskInfo: 对话任务结果
        :type TaskInfo: :class:`tencentcloud.tione.v20211111.models.ChatTaskInfo`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskInfo = None
        self._RequestId = None

    @property
    def TaskInfo(self):
        """对话任务结果
        :rtype: :class:`tencentcloud.tione.v20211111.models.ChatTaskInfo`
        """
        return self._TaskInfo

    @TaskInfo.setter
    def TaskInfo(self, TaskInfo):
        self._TaskInfo = TaskInfo

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TaskInfo") is not None:
            self._TaskInfo = ChatTaskInfo()
            self._TaskInfo._deserialize(params.get("TaskInfo"))
        self._RequestId = params.get("RequestId")


class DescribeAsyncTaskStatusRequest(AbstractModel):
    """DescribeAsyncTaskStatus请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 异步任务ID
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """异步任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAsyncTaskStatusResponse(AbstractModel):
    """DescribeAsyncTaskStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskStatus: 任务执行状态
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskStatus: str
        :param _ProgressRate: 数据集导入/导出进度
注意：此字段可能返回 null，表示取不到有效值。
        :type ProgressRate: int
        :param _Reason: 任务执行失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :type Reason: :class:`tencentcloud.tione.v20211111.models.ReasonInfo`
        :param _Error: 错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Error: :class:`tencentcloud.tione.v20211111.models.ErrorInfo`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskStatus = None
        self._ProgressRate = None
        self._Reason = None
        self._Error = None
        self._RequestId = None

    @property
    def TaskStatus(self):
        """任务执行状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskStatus

    @TaskStatus.setter
    def TaskStatus(self, TaskStatus):
        self._TaskStatus = TaskStatus

    @property
    def ProgressRate(self):
        """数据集导入/导出进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ProgressRate

    @ProgressRate.setter
    def ProgressRate(self, ProgressRate):
        self._ProgressRate = ProgressRate

    @property
    def Reason(self):
        """任务执行失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ReasonInfo`
        """
        return self._Reason

    @Reason.setter
    def Reason(self, Reason):
        self._Reason = Reason

    @property
    def Error(self):
        """错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ErrorInfo`
        """
        return self._Error

    @Error.setter
    def Error(self, Error):
        self._Error = Error

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskStatus = params.get("TaskStatus")
        self._ProgressRate = params.get("ProgressRate")
        if params.get("Reason") is not None:
            self._Reason = ReasonInfo()
            self._Reason._deserialize(params.get("Reason"))
        if params.get("Error") is not None:
            self._Error = ErrorInfo()
            self._Error._deserialize(params.get("Error"))
        self._RequestId = params.get("RequestId")


class DescribeAutoMLEMSAPIInfoRequest(AbstractModel):
    """DescribeAutoMLEMSAPIInfo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 发布模型服务创建任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EMSTaskId: 发布模型服务任务id
        :type EMSTaskId: str
        """
        self._AutoMLTaskId = None
        self._EMSTaskId = None

    @property
    def AutoMLTaskId(self):
        """发布模型服务创建任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EMSTaskId(self):
        """发布模型服务任务id
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EMSTaskId = params.get("EMSTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLEMSAPIInfoResponse(AbstractModel):
    """DescribeAutoMLEMSAPIInfo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 发布模型服务创建任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EMSTaskId: 发布模型服务任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type EMSTaskId: str
        :param _InnerUrl: 发布模型服务接口内网调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type InnerUrl: str
        :param _OuterUrl: 发布模型服务接口外网调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type OuterUrl: str
        :param _UrlInfo: 发布模型服务前端展示地址链接
注意：此字段可能返回 null，表示取不到有效值。
        :type UrlInfo: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EMSTaskId = None
        self._InnerUrl = None
        self._OuterUrl = None
        self._UrlInfo = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """发布模型服务创建任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EMSTaskId(self):
        """发布模型服务任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId

    @property
    def InnerUrl(self):
        """发布模型服务接口内网调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InnerUrl

    @InnerUrl.setter
    def InnerUrl(self, InnerUrl):
        self._InnerUrl = InnerUrl

    @property
    def OuterUrl(self):
        """发布模型服务接口外网调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._OuterUrl

    @OuterUrl.setter
    def OuterUrl(self, OuterUrl):
        self._OuterUrl = OuterUrl

    @property
    def UrlInfo(self):
        """发布模型服务前端展示地址链接
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UrlInfo

    @UrlInfo.setter
    def UrlInfo(self, UrlInfo):
        self._UrlInfo = UrlInfo

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EMSTaskId = params.get("EMSTaskId")
        self._InnerUrl = params.get("InnerUrl")
        self._OuterUrl = params.get("OuterUrl")
        self._UrlInfo = params.get("UrlInfo")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLEMSTaskRequest(AbstractModel):
    """DescribeAutoMLEMSTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 发布模型服务任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EMSTaskId: 发布模型服务任务id
        :type EMSTaskId: str
        """
        self._AutoMLTaskId = None
        self._EMSTaskId = None

    @property
    def AutoMLTaskId(self):
        """发布模型服务任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EMSTaskId(self):
        """发布模型服务任务id
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EMSTaskId = params.get("EMSTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLEMSTaskResponse(AbstractModel):
    """DescribeAutoMLEMSTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 发布模型服务任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EMSTaskId: 发布模型服务任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type EMSTaskId: str
        :param _EMSTaskBusinessStatus: 发布模型服务business状态，包括CREATING(创建中), CREATE_FAILED(创建失败), ARREARS_STOP(因欠费被强制停止)
注意：此字段可能返回 null，表示取不到有效值。
        :type EMSTaskBusinessStatus: str
        :param _EMSTaskWorkloadStatus: 模型服务实例状态, Normal(运行中), Pending(启动中), Abnormal(服务异常), Stopping(服务停止中), Stopped(服务已停止)
注意：此字段可能返回 null，表示取不到有效值。
        :type EMSTaskWorkloadStatus: str
        :param _Scene: 自动学习场景
注意：此字段可能返回 null，表示取不到有效值。
        :type Scene: :class:`tencentcloud.tione.v20211111.models.Scene`
        :param _ChargeType: 付费模式，PREPAID(预付费), POSTPAID_BY_HOUR(后付费)
注意：此字段可能返回 null，表示取不到有效值。
        :type ChargeType: str
        :param _MaxServiceHours: 模型服务最大运行时间，没设置则返回-1
注意：此字段可能返回 null，表示取不到有效值。
        :type MaxServiceHours: int
        :param _EMSServiceGroupId: 发布模型服务服务组id
注意：此字段可能返回 null，表示取不到有效值。
        :type EMSServiceGroupId: str
        :param _EMSServiceId: 发布模型服务服务id
注意：此字段可能返回 null，表示取不到有效值。
        :type EMSServiceId: str
        :param _ResourceGroupId: 预付费资源组id
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _PublishResourceInfo: 发布模型服务资源配置信息
注意：此字段可能返回 null，表示取不到有效值。
        :type PublishResourceInfo: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        :param _TaskOutputCosInfo: 自动学习任务模型输出cos路径
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskOutputCosInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _ErrorMsg: 出现异常时错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrorMsg: str
        :param _UserCosInfo: 保存文件的Cos信息
注意：此字段可能返回 null，表示取不到有效值。
        :type UserCosInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EMSTaskId = None
        self._EMSTaskBusinessStatus = None
        self._EMSTaskWorkloadStatus = None
        self._Scene = None
        self._ChargeType = None
        self._MaxServiceHours = None
        self._EMSServiceGroupId = None
        self._EMSServiceId = None
        self._ResourceGroupId = None
        self._PublishResourceInfo = None
        self._TaskOutputCosInfo = None
        self._ErrorMsg = None
        self._UserCosInfo = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """发布模型服务任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EMSTaskId(self):
        """发布模型服务任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId

    @property
    def EMSTaskBusinessStatus(self):
        """发布模型服务business状态，包括CREATING(创建中), CREATE_FAILED(创建失败), ARREARS_STOP(因欠费被强制停止)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EMSTaskBusinessStatus

    @EMSTaskBusinessStatus.setter
    def EMSTaskBusinessStatus(self, EMSTaskBusinessStatus):
        self._EMSTaskBusinessStatus = EMSTaskBusinessStatus

    @property
    def EMSTaskWorkloadStatus(self):
        """模型服务实例状态, Normal(运行中), Pending(启动中), Abnormal(服务异常), Stopping(服务停止中), Stopped(服务已停止)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EMSTaskWorkloadStatus

    @EMSTaskWorkloadStatus.setter
    def EMSTaskWorkloadStatus(self, EMSTaskWorkloadStatus):
        self._EMSTaskWorkloadStatus = EMSTaskWorkloadStatus

    @property
    def Scene(self):
        """自动学习场景
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.Scene`
        """
        return self._Scene

    @Scene.setter
    def Scene(self, Scene):
        self._Scene = Scene

    @property
    def ChargeType(self):
        """付费模式，PREPAID(预付费), POSTPAID_BY_HOUR(后付费)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def MaxServiceHours(self):
        """模型服务最大运行时间，没设置则返回-1
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._MaxServiceHours

    @MaxServiceHours.setter
    def MaxServiceHours(self, MaxServiceHours):
        self._MaxServiceHours = MaxServiceHours

    @property
    def EMSServiceGroupId(self):
        """发布模型服务服务组id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EMSServiceGroupId

    @EMSServiceGroupId.setter
    def EMSServiceGroupId(self, EMSServiceGroupId):
        self._EMSServiceGroupId = EMSServiceGroupId

    @property
    def EMSServiceId(self):
        """发布模型服务服务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EMSServiceId

    @EMSServiceId.setter
    def EMSServiceId(self, EMSServiceId):
        self._EMSServiceId = EMSServiceId

    @property
    def ResourceGroupId(self):
        """预付费资源组id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def PublishResourceInfo(self):
        """发布模型服务资源配置信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        """
        return self._PublishResourceInfo

    @PublishResourceInfo.setter
    def PublishResourceInfo(self, PublishResourceInfo):
        self._PublishResourceInfo = PublishResourceInfo

    @property
    def TaskOutputCosInfo(self):
        """自动学习任务模型输出cos路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._TaskOutputCosInfo

    @TaskOutputCosInfo.setter
    def TaskOutputCosInfo(self, TaskOutputCosInfo):
        self._TaskOutputCosInfo = TaskOutputCosInfo

    @property
    def ErrorMsg(self):
        """出现异常时错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrorMsg

    @ErrorMsg.setter
    def ErrorMsg(self, ErrorMsg):
        self._ErrorMsg = ErrorMsg

    @property
    def UserCosInfo(self):
        """保存文件的Cos信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._UserCosInfo

    @UserCosInfo.setter
    def UserCosInfo(self, UserCosInfo):
        self._UserCosInfo = UserCosInfo

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EMSTaskId = params.get("EMSTaskId")
        self._EMSTaskBusinessStatus = params.get("EMSTaskBusinessStatus")
        self._EMSTaskWorkloadStatus = params.get("EMSTaskWorkloadStatus")
        if params.get("Scene") is not None:
            self._Scene = Scene()
            self._Scene._deserialize(params.get("Scene"))
        self._ChargeType = params.get("ChargeType")
        self._MaxServiceHours = params.get("MaxServiceHours")
        self._EMSServiceGroupId = params.get("EMSServiceGroupId")
        self._EMSServiceId = params.get("EMSServiceId")
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("PublishResourceInfo") is not None:
            self._PublishResourceInfo = ResourceConfigInfo()
            self._PublishResourceInfo._deserialize(params.get("PublishResourceInfo"))
        if params.get("TaskOutputCosInfo") is not None:
            self._TaskOutputCosInfo = CosPathInfo()
            self._TaskOutputCosInfo._deserialize(params.get("TaskOutputCosInfo"))
        self._ErrorMsg = params.get("ErrorMsg")
        if params.get("UserCosInfo") is not None:
            self._UserCosInfo = CosPathInfo()
            self._UserCosInfo._deserialize(params.get("UserCosInfo"))
        self._RequestId = params.get("RequestId")


class DescribeAutoMLEMSTasksRequest(AbstractModel):
    """DescribeAutoMLEMSTasks请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 业务关联过滤条件
        :type Filters: list of Filter
        :param _TagFilters: 标签关联过滤条件
        :type TagFilters: list of TagFilter
        :param _Offset: 偏移量，默认0
        :type Offset: int
        :param _Limit: 结果限制数量，默认10
        :type Limit: int
        :param _OrderField: 结果排序业务字段, 默认自动学习任务创建时间
        :type OrderField: str
        :param _Order: 结果排序规则，ASC(升序), DESC(降序)
        :type Order: str
        """
        self._Filters = None
        self._TagFilters = None
        self._Offset = None
        self._Limit = None
        self._OrderField = None
        self._Order = None

    @property
    def Filters(self):
        """业务关联过滤条件
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签关联过滤条件
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def Offset(self):
        """偏移量，默认0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """结果限制数量，默认10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def OrderField(self):
        """结果排序业务字段, 默认自动学习任务创建时间
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Order(self):
        """结果排序规则，ASC(升序), DESC(降序)
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._OrderField = params.get("OrderField")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLEMSTasksResponse(AbstractModel):
    """DescribeAutoMLEMSTasks返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 满足条件的模型发布任务总数量
        :type TotalCount: int
        :param _EMSTaskGroups: 满足条件的模型服务列表
注意：此字段可能返回 null，表示取不到有效值。
        :type EMSTaskGroups: list of EMSTaskGroup
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._EMSTaskGroups = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """满足条件的模型发布任务总数量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def EMSTaskGroups(self):
        """满足条件的模型服务列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of EMSTaskGroup
        """
        return self._EMSTaskGroups

    @EMSTaskGroups.setter
    def EMSTaskGroups(self, EMSTaskGroups):
        self._EMSTaskGroups = EMSTaskGroups

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("EMSTaskGroups") is not None:
            self._EMSTaskGroups = []
            for item in params.get("EMSTaskGroups"):
                obj = EMSTaskGroup()
                obj._deserialize(item)
                self._EMSTaskGroups.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAutoMLEMSTasksTrainLabelsRequest(AbstractModel):
    """DescribeAutoMLEMSTasksTrainLabels请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _EMSTaskId: 推理任务任务id
        :type EMSTaskId: str
        """
        self._AutoMLTaskId = None
        self._EMSTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EMSTaskId(self):
        """推理任务任务id
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EMSTaskId = params.get("EMSTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLEMSTasksTrainLabelsResponse(AbstractModel):
    """DescribeAutoMLEMSTasksTrainLabels返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _EMSTaskId: 推理任务任务id
        :type EMSTaskId: str
        :param _LabelResults: 标注的key数组
        :type LabelResults: list of str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EMSTaskId = None
        self._LabelResults = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EMSTaskId(self):
        """推理任务任务id
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId

    @property
    def LabelResults(self):
        """标注的key数组
        :rtype: list of str
        """
        return self._LabelResults

    @LabelResults.setter
    def LabelResults(self, LabelResults):
        self._LabelResults = LabelResults

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EMSTaskId = params.get("EMSTaskId")
        self._LabelResults = params.get("LabelResults")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLEMSTempCosInfoRequest(AbstractModel):
    """DescribeAutoMLEMSTempCosInfo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        """
        self._AutoMLTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLEMSTempCosInfoResponse(AbstractModel):
    """DescribeAutoMLEMSTempCosInfo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TempCosCredential: 临时鉴权信息
        :type TempCosCredential: :class:`tencentcloud.tione.v20211111.models.TempCosCredential`
        :param _TempFolder: 保存图片的临时目录
        :type TempFolder: str
        :param _TempBucket: 保存图片的存储桶名称
        :type TempBucket: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TempCosCredential = None
        self._TempFolder = None
        self._TempBucket = None
        self._RequestId = None

    @property
    def TempCosCredential(self):
        """临时鉴权信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.TempCosCredential`
        """
        return self._TempCosCredential

    @TempCosCredential.setter
    def TempCosCredential(self, TempCosCredential):
        self._TempCosCredential = TempCosCredential

    @property
    def TempFolder(self):
        """保存图片的临时目录
        :rtype: str
        """
        return self._TempFolder

    @TempFolder.setter
    def TempFolder(self, TempFolder):
        self._TempFolder = TempFolder

    @property
    def TempBucket(self):
        """保存图片的存储桶名称
        :rtype: str
        """
        return self._TempBucket

    @TempBucket.setter
    def TempBucket(self, TempBucket):
        self._TempBucket = TempBucket

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TempCosCredential") is not None:
            self._TempCosCredential = TempCosCredential()
            self._TempCosCredential._deserialize(params.get("TempCosCredential"))
        self._TempFolder = params.get("TempFolder")
        self._TempBucket = params.get("TempBucket")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLEvaluationIdByAutoMLTaskIdRequest(AbstractModel):
    """DescribeAutoMLEvaluationIdByAutoMLTaskId请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        """
        self._AutoMLTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLEvaluationIdByAutoMLTaskIdResponse(AbstractModel):
    """DescribeAutoMLEvaluationIdByAutoMLTaskId返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLEvaluationNLUTaskReportUrlRequest(AbstractModel):
    """DescribeAutoMLEvaluationNLUTaskReportUrl请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLEvaluationNLUTaskReportUrlResponse(AbstractModel):
    """DescribeAutoMLEvaluationNLUTaskReportUrl返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        :param _ReportUrl: 报告下载链接
        :type ReportUrl: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._ReportUrl = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def ReportUrl(self):
        """报告下载链接
        :rtype: str
        """
        return self._ReportUrl

    @ReportUrl.setter
    def ReportUrl(self, ReportUrl):
        self._ReportUrl = ReportUrl

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._ReportUrl = params.get("ReportUrl")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLEvaluationTaskStatusRequest(AbstractModel):
    """DescribeAutoMLEvaluationTaskStatus请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None

    @property
    def AutoMLTaskId(self):
        """评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLEvaluationTaskStatusResponse(AbstractModel):
    """DescribeAutoMLEvaluationTaskStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 查询评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 查询评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationTaskId: str
        :param _TaskStatus: 评测任务当前状态，状态类型NOTSTART(未创建评测任务), WAITING(排队中),INIT(初始化中), STARTING(启动中), RUNNING(运行中), FAILED(异常), STOPPING(停止中), STOPPED(已停止), SUCCEED(已完成)
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskStatus: str
        :param _TaskProgress: 评测任务进度百分比，范围为[0, 100]
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskProgress: int
        :param _ErrorMsg: 任务异常信息，当TaskStatus为FAILED时返回
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrorMsg: str
        :param _WaitNumber: 前面排队任务数量，当TaskStatus为WAITING时返回
注意：此字段可能返回 null，表示取不到有效值。
        :type WaitNumber: int
        :param _InputTestDatasetIds: 输入评测数据集
注意：此字段可能返回 null，表示取不到有效值。
        :type InputTestDatasetIds: list of str
        :param _InputTestDatasetLabels: 输入评测数据标签
注意：此字段可能返回 null，表示取不到有效值。
        :type InputTestDatasetLabels: str
        :param _InputTestDataSetConfig: 评测数据信息
注意：此字段可能返回 null，表示取不到有效值。
        :type InputTestDataSetConfig: :class:`tencentcloud.tione.v20211111.models.TestDataSetConfig`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._TaskStatus = None
        self._TaskProgress = None
        self._ErrorMsg = None
        self._WaitNumber = None
        self._InputTestDatasetIds = None
        self._InputTestDatasetLabels = None
        self._InputTestDataSetConfig = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """查询评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """查询评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def TaskStatus(self):
        """评测任务当前状态，状态类型NOTSTART(未创建评测任务), WAITING(排队中),INIT(初始化中), STARTING(启动中), RUNNING(运行中), FAILED(异常), STOPPING(停止中), STOPPED(已停止), SUCCEED(已完成)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskStatus

    @TaskStatus.setter
    def TaskStatus(self, TaskStatus):
        self._TaskStatus = TaskStatus

    @property
    def TaskProgress(self):
        """评测任务进度百分比，范围为[0, 100]
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TaskProgress

    @TaskProgress.setter
    def TaskProgress(self, TaskProgress):
        self._TaskProgress = TaskProgress

    @property
    def ErrorMsg(self):
        """任务异常信息，当TaskStatus为FAILED时返回
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrorMsg

    @ErrorMsg.setter
    def ErrorMsg(self, ErrorMsg):
        self._ErrorMsg = ErrorMsg

    @property
    def WaitNumber(self):
        """前面排队任务数量，当TaskStatus为WAITING时返回
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._WaitNumber

    @WaitNumber.setter
    def WaitNumber(self, WaitNumber):
        self._WaitNumber = WaitNumber

    @property
    def InputTestDatasetIds(self):
        """输入评测数据集
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._InputTestDatasetIds

    @InputTestDatasetIds.setter
    def InputTestDatasetIds(self, InputTestDatasetIds):
        self._InputTestDatasetIds = InputTestDatasetIds

    @property
    def InputTestDatasetLabels(self):
        """输入评测数据标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InputTestDatasetLabels

    @InputTestDatasetLabels.setter
    def InputTestDatasetLabels(self, InputTestDatasetLabels):
        self._InputTestDatasetLabels = InputTestDatasetLabels

    @property
    def InputTestDataSetConfig(self):
        """评测数据信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.TestDataSetConfig`
        """
        return self._InputTestDataSetConfig

    @InputTestDataSetConfig.setter
    def InputTestDataSetConfig(self, InputTestDataSetConfig):
        self._InputTestDataSetConfig = InputTestDataSetConfig

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._TaskStatus = params.get("TaskStatus")
        self._TaskProgress = params.get("TaskProgress")
        self._ErrorMsg = params.get("ErrorMsg")
        self._WaitNumber = params.get("WaitNumber")
        self._InputTestDatasetIds = params.get("InputTestDatasetIds")
        self._InputTestDatasetLabels = params.get("InputTestDatasetLabels")
        if params.get("InputTestDataSetConfig") is not None:
            self._InputTestDataSetConfig = TestDataSetConfig()
            self._InputTestDataSetConfig._deserialize(params.get("InputTestDataSetConfig"))
        self._RequestId = params.get("RequestId")


class DescribeAutoMLEvaluationTasksRequest(AbstractModel):
    """DescribeAutoMLEvaluationTasks请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 业务关联过滤条件
        :type Filters: list of Filter
        :param _TagFilters: 标签关联过滤条件
        :type TagFilters: list of TagFilter
        :param _Offset: 偏移量，默认0
        :type Offset: int
        :param _Limit: 结果限制数量，默认10
        :type Limit: int
        :param _OrderField: 结果排序业务字段, 默认自动学习任务创建时间
        :type OrderField: str
        :param _Order: 结果排序规则，ASC(升序), DESC(降序)
        :type Order: str
        """
        self._Filters = None
        self._TagFilters = None
        self._Offset = None
        self._Limit = None
        self._OrderField = None
        self._Order = None

    @property
    def Filters(self):
        """业务关联过滤条件
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签关联过滤条件
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def Offset(self):
        """偏移量，默认0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """结果限制数量，默认10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def OrderField(self):
        """结果排序业务字段, 默认自动学习任务创建时间
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Order(self):
        """结果排序规则，ASC(升序), DESC(降序)
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._OrderField = params.get("OrderField")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLEvaluationTasksResponse(AbstractModel):
    """DescribeAutoMLEvaluationTasks返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 满足条件的评测任务总数量
        :type TotalCount: int
        :param _EvaluationTaskGroups: 评测任务列表详情
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationTaskGroups: list of EvaluationTaskGroup
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._EvaluationTaskGroups = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """满足条件的评测任务总数量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def EvaluationTaskGroups(self):
        """评测任务列表详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of EvaluationTaskGroup
        """
        return self._EvaluationTaskGroups

    @EvaluationTaskGroups.setter
    def EvaluationTaskGroups(self, EvaluationTaskGroups):
        self._EvaluationTaskGroups = EvaluationTaskGroups

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("EvaluationTaskGroups") is not None:
            self._EvaluationTaskGroups = []
            for item in params.get("EvaluationTaskGroups"):
                obj = EvaluationTaskGroup()
                obj._deserialize(item)
                self._EvaluationTaskGroups.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAutoMLModelServiceInfoRequest(AbstractModel):
    """DescribeAutoMLModelServiceInfo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        """
        self._AutoMLTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLModelServiceInfoResponse(AbstractModel):
    """DescribeAutoMLModelServiceInfo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _ModelId: 模型ID
        :type ModelId: str
        :param _ModelVersionId: 模型版本ID
        :type ModelVersionId: str
        :param _ModelName: 模型名称
        :type ModelName: str
        :param _ModelVersion: 模型版本
        :type ModelVersion: str
        :param _ImageInfo: GPU环境镜像
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._ModelId = None
        self._ModelVersionId = None
        self._ModelName = None
        self._ModelVersion = None
        self._ImageInfo = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def ModelId(self):
        """模型ID
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def ModelVersionId(self):
        """模型版本ID
        :rtype: str
        """
        return self._ModelVersionId

    @ModelVersionId.setter
    def ModelVersionId(self, ModelVersionId):
        self._ModelVersionId = ModelVersionId

    @property
    def ModelName(self):
        """模型名称
        :rtype: str
        """
        return self._ModelName

    @ModelName.setter
    def ModelName(self, ModelName):
        self._ModelName = ModelName

    @property
    def ModelVersion(self):
        """模型版本
        :rtype: str
        """
        return self._ModelVersion

    @ModelVersion.setter
    def ModelVersion(self, ModelVersion):
        self._ModelVersion = ModelVersion

    @property
    def ImageInfo(self):
        """GPU环境镜像
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._ModelId = params.get("ModelId")
        self._ModelVersionId = params.get("ModelVersionId")
        self._ModelName = params.get("ModelName")
        self._ModelVersion = params.get("ModelVersion")
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        self._RequestId = params.get("RequestId")


class DescribeAutoMLNLPPredictRecordsRequest(AbstractModel):
    """DescribeAutoMLNLPPredictRecords请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务Id
        :type AutoMLTaskId: str
        :param _EMSTaskId: 推理服务任务Id
        :type EMSTaskId: str
        """
        self._AutoMLTaskId = None
        self._EMSTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务Id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EMSTaskId(self):
        """推理服务任务Id
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EMSTaskId = params.get("EMSTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLNLPPredictRecordsResponse(AbstractModel):
    """DescribeAutoMLNLPPredictRecords返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务Id
        :type AutoMLTaskId: str
        :param _EMSTaskId: 推理服务任务Id
        :type EMSTaskId: str
        :param _PredictResults: 预测结果
        :type PredictResults: list of NLPSamplePredictResult
        :param _InferUrl: 当前服务请求地址
        :type InferUrl: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EMSTaskId = None
        self._PredictResults = None
        self._InferUrl = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务Id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EMSTaskId(self):
        """推理服务任务Id
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId

    @property
    def PredictResults(self):
        """预测结果
        :rtype: list of NLPSamplePredictResult
        """
        return self._PredictResults

    @PredictResults.setter
    def PredictResults(self, PredictResults):
        self._PredictResults = PredictResults

    @property
    def InferUrl(self):
        """当前服务请求地址
        :rtype: str
        """
        return self._InferUrl

    @InferUrl.setter
    def InferUrl(self, InferUrl):
        self._InferUrl = InferUrl

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EMSTaskId = params.get("EMSTaskId")
        if params.get("PredictResults") is not None:
            self._PredictResults = []
            for item in params.get("PredictResults"):
                obj = NLPSamplePredictResult()
                obj._deserialize(item)
                self._PredictResults.append(obj)
        self._InferUrl = params.get("InferUrl")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskCommonEvaluationBadCasesRequest(AbstractModel):
    """DescribeAutoMLTaskCommonEvaluationBadCases请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _Offset: 偏移量，默认0
        :type Offset: int
        :param _Limit: 结果限制数量，默认10
        :type Limit: int
        :param _OrderField: 结果排序业务字段
        :type OrderField: str
        :param _Order: 结果排序规则
        :type Order: str
        :param _AutoMLEvaluateTaskId: 自动学习评测任务id
        :type AutoMLEvaluateTaskId: str
        :param _Type: single or multi
        :type Type: str
        :param _QueryType: ALL, BAD_CASE, GOOD_CASE
        :type QueryType: str
        :param _TagFilters: tag过滤
        :type TagFilters: list of ComparisonTagFilter
        :param _TagSorters: tag排序
        :type TagSorters: list of TagSorter
        :param _ResultFilters: 结果过滤
        :type ResultFilters: list of ResultFilter
        :param _SortOn: 排序、筛选所基于任务的SID
        :type SortOn: str
        """
        self._AutoMLTaskId = None
        self._Offset = None
        self._Limit = None
        self._OrderField = None
        self._Order = None
        self._AutoMLEvaluateTaskId = None
        self._Type = None
        self._QueryType = None
        self._TagFilters = None
        self._TagSorters = None
        self._ResultFilters = None
        self._SortOn = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def Offset(self):
        """偏移量，默认0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """结果限制数量，默认10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def OrderField(self):
        """结果排序业务字段
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Order(self):
        """结果排序规则
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def AutoMLEvaluateTaskId(self):
        """自动学习评测任务id
        :rtype: str
        """
        return self._AutoMLEvaluateTaskId

    @AutoMLEvaluateTaskId.setter
    def AutoMLEvaluateTaskId(self, AutoMLEvaluateTaskId):
        self._AutoMLEvaluateTaskId = AutoMLEvaluateTaskId

    @property
    def Type(self):
        """single or multi
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def QueryType(self):
        """ALL, BAD_CASE, GOOD_CASE
        :rtype: str
        """
        return self._QueryType

    @QueryType.setter
    def QueryType(self, QueryType):
        self._QueryType = QueryType

    @property
    def TagFilters(self):
        """tag过滤
        :rtype: list of ComparisonTagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def TagSorters(self):
        """tag排序
        :rtype: list of TagSorter
        """
        return self._TagSorters

    @TagSorters.setter
    def TagSorters(self, TagSorters):
        self._TagSorters = TagSorters

    @property
    def ResultFilters(self):
        """结果过滤
        :rtype: list of ResultFilter
        """
        return self._ResultFilters

    @ResultFilters.setter
    def ResultFilters(self, ResultFilters):
        self._ResultFilters = ResultFilters

    @property
    def SortOn(self):
        """排序、筛选所基于任务的SID
        :rtype: str
        """
        return self._SortOn

    @SortOn.setter
    def SortOn(self, SortOn):
        self._SortOn = SortOn


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._OrderField = params.get("OrderField")
        self._Order = params.get("Order")
        self._AutoMLEvaluateTaskId = params.get("AutoMLEvaluateTaskId")
        self._Type = params.get("Type")
        self._QueryType = params.get("QueryType")
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = ComparisonTagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        if params.get("TagSorters") is not None:
            self._TagSorters = []
            for item in params.get("TagSorters"):
                obj = TagSorter()
                obj._deserialize(item)
                self._TagSorters.append(obj)
        if params.get("ResultFilters") is not None:
            self._ResultFilters = []
            for item in params.get("ResultFilters"):
                obj = ResultFilter()
                obj._deserialize(item)
                self._ResultFilters.append(obj)
        self._SortOn = params.get("SortOn")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskCommonEvaluationBadCasesResponse(AbstractModel):
    """DescribeAutoMLTaskCommonEvaluationBadCases返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 本次请求的所有的自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 本次请求的所有的自动学习评测任务id
        :type EvaluationTaskId: str
        :param _Predictions: 预测结果
        :type Predictions: list of ComparedPrediction
        :param _TotalCount: 预测结果总量
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._Predictions = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """本次请求的所有的自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """本次请求的所有的自动学习评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def Predictions(self):
        """预测结果
        :rtype: list of ComparedPrediction
        """
        return self._Predictions

    @Predictions.setter
    def Predictions(self, Predictions):
        self._Predictions = Predictions

    @property
    def TotalCount(self):
        """预测结果总量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        if params.get("Predictions") is not None:
            self._Predictions = []
            for item in params.get("Predictions"):
                obj = ComparedPrediction()
                obj._deserialize(item)
                self._Predictions.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskCommonEvaluationDetailRequest(AbstractModel):
    """DescribeAutoMLTaskCommonEvaluationDetail请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskCommonEvaluationDetailResponse(AbstractModel):
    """DescribeAutoMLTaskCommonEvaluationDetail返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        :param _TestDataSetNames: 测试数据集名称
        :type TestDataSetNames: list of str
        :param _TotalSampleCount: 测试数据集样本数量
        :type TotalSampleCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._TestDataSetNames = None
        self._TotalSampleCount = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def TestDataSetNames(self):
        """测试数据集名称
        :rtype: list of str
        """
        return self._TestDataSetNames

    @TestDataSetNames.setter
    def TestDataSetNames(self, TestDataSetNames):
        self._TestDataSetNames = TestDataSetNames

    @property
    def TotalSampleCount(self):
        """测试数据集样本数量
        :rtype: int
        """
        return self._TotalSampleCount

    @TotalSampleCount.setter
    def TotalSampleCount(self, TotalSampleCount):
        self._TotalSampleCount = TotalSampleCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._TestDataSetNames = params.get("TestDataSetNames")
        self._TotalSampleCount = params.get("TotalSampleCount")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskCommonEvaluationIndicatorRequest(AbstractModel):
    """DescribeAutoMLTaskCommonEvaluationIndicator请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskCommonEvaluationIndicatorResponse(AbstractModel):
    """DescribeAutoMLTaskCommonEvaluationIndicator返回参数结构体

    """

    def __init__(self):
        r"""
        :param _CurrentScalarMetrics: 当前模型基础指标
        :type CurrentScalarMetrics: list of ScalarItem
        :param _PreviousScalarMetrics: 优化前模型基础指标
        :type PreviousScalarMetrics: list of ScalarItem
        :param _CurrentMetrics: 当前模型详细指标
        :type CurrentMetrics: str
        :param _PreviousMetrics: 优化前模型详细指标
        :type PreviousMetrics: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._CurrentScalarMetrics = None
        self._PreviousScalarMetrics = None
        self._CurrentMetrics = None
        self._PreviousMetrics = None
        self._RequestId = None

    @property
    def CurrentScalarMetrics(self):
        """当前模型基础指标
        :rtype: list of ScalarItem
        """
        return self._CurrentScalarMetrics

    @CurrentScalarMetrics.setter
    def CurrentScalarMetrics(self, CurrentScalarMetrics):
        self._CurrentScalarMetrics = CurrentScalarMetrics

    @property
    def PreviousScalarMetrics(self):
        """优化前模型基础指标
        :rtype: list of ScalarItem
        """
        return self._PreviousScalarMetrics

    @PreviousScalarMetrics.setter
    def PreviousScalarMetrics(self, PreviousScalarMetrics):
        self._PreviousScalarMetrics = PreviousScalarMetrics

    @property
    def CurrentMetrics(self):
        """当前模型详细指标
        :rtype: str
        """
        return self._CurrentMetrics

    @CurrentMetrics.setter
    def CurrentMetrics(self, CurrentMetrics):
        self._CurrentMetrics = CurrentMetrics

    @property
    def PreviousMetrics(self):
        """优化前模型详细指标
        :rtype: str
        """
        return self._PreviousMetrics

    @PreviousMetrics.setter
    def PreviousMetrics(self, PreviousMetrics):
        self._PreviousMetrics = PreviousMetrics

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("CurrentScalarMetrics") is not None:
            self._CurrentScalarMetrics = []
            for item in params.get("CurrentScalarMetrics"):
                obj = ScalarItem()
                obj._deserialize(item)
                self._CurrentScalarMetrics.append(obj)
        if params.get("PreviousScalarMetrics") is not None:
            self._PreviousScalarMetrics = []
            for item in params.get("PreviousScalarMetrics"):
                obj = ScalarItem()
                obj._deserialize(item)
                self._PreviousScalarMetrics.append(obj)
        self._CurrentMetrics = params.get("CurrentMetrics")
        self._PreviousMetrics = params.get("PreviousMetrics")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskConfigRequest(AbstractModel):
    """DescribeAutoMLTaskConfig请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        """
        self._AutoMLTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskConfigResponse(AbstractModel):
    """DescribeAutoMLTaskConfig返回参数结构体

    """

    def __init__(self):
        r"""
        :param _CommonConfig: 基础配置
注意：此字段可能返回 null，表示取不到有效值。
        :type CommonConfig: :class:`tencentcloud.tione.v20211111.models.CommonConfig`
        :param _DataConfig: 数据配置
注意：此字段可能返回 null，表示取不到有效值。
        :type DataConfig: :class:`tencentcloud.tione.v20211111.models.MLDataConfig`
        :param _TaskOutputCosInfo: 自动学习任务输出COS
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskOutputCosInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _ModelTrainConfig: 模型训练参数配置
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelTrainConfig: :class:`tencentcloud.tione.v20211111.models.ModelTrainConfig`
        :param _ModelParamConfig: 模型超参数
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelParamConfig: str
        :param _TrainResourceConfig: 训练资源配置
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainResourceConfig: :class:`tencentcloud.tione.v20211111.models.TrainResourceConfig`
        :param _Tags: 标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _TaskSource: 任务来源
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskSource: str
        :param _AutoMLTaskId: 自动学习任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type AutoMLTaskId: str
        :param _AutoMLTaskGroupId: 任务组
注意：此字段可能返回 null，表示取不到有效值。
        :type AutoMLTaskGroupId: str
        :param _TrainTaskId: 训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskId: str
        :param _EvaluationTaskId: 评测任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationTaskId: str
        :param _EMSTaskId: 在线服务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type EMSTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._CommonConfig = None
        self._DataConfig = None
        self._TaskOutputCosInfo = None
        self._ModelTrainConfig = None
        self._ModelParamConfig = None
        self._TrainResourceConfig = None
        self._Tags = None
        self._TaskSource = None
        self._AutoMLTaskId = None
        self._AutoMLTaskGroupId = None
        self._TrainTaskId = None
        self._EvaluationTaskId = None
        self._EMSTaskId = None
        self._RequestId = None

    @property
    def CommonConfig(self):
        """基础配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CommonConfig`
        """
        return self._CommonConfig

    @CommonConfig.setter
    def CommonConfig(self, CommonConfig):
        self._CommonConfig = CommonConfig

    @property
    def DataConfig(self):
        """数据配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.MLDataConfig`
        """
        return self._DataConfig

    @DataConfig.setter
    def DataConfig(self, DataConfig):
        self._DataConfig = DataConfig

    @property
    def TaskOutputCosInfo(self):
        """自动学习任务输出COS
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._TaskOutputCosInfo

    @TaskOutputCosInfo.setter
    def TaskOutputCosInfo(self, TaskOutputCosInfo):
        self._TaskOutputCosInfo = TaskOutputCosInfo

    @property
    def ModelTrainConfig(self):
        """模型训练参数配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelTrainConfig`
        """
        return self._ModelTrainConfig

    @ModelTrainConfig.setter
    def ModelTrainConfig(self, ModelTrainConfig):
        self._ModelTrainConfig = ModelTrainConfig

    @property
    def ModelParamConfig(self):
        """模型超参数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelParamConfig

    @ModelParamConfig.setter
    def ModelParamConfig(self, ModelParamConfig):
        self._ModelParamConfig = ModelParamConfig

    @property
    def TrainResourceConfig(self):
        """训练资源配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.TrainResourceConfig`
        """
        return self._TrainResourceConfig

    @TrainResourceConfig.setter
    def TrainResourceConfig(self, TrainResourceConfig):
        self._TrainResourceConfig = TrainResourceConfig

    @property
    def Tags(self):
        """标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def TaskSource(self):
        """任务来源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskSource

    @TaskSource.setter
    def TaskSource(self, TaskSource):
        self._TaskSource = TaskSource

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def AutoMLTaskGroupId(self):
        """任务组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AutoMLTaskGroupId

    @AutoMLTaskGroupId.setter
    def AutoMLTaskGroupId(self, AutoMLTaskGroupId):
        self._AutoMLTaskGroupId = AutoMLTaskGroupId

    @property
    def TrainTaskId(self):
        """训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def EMSTaskId(self):
        """在线服务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("CommonConfig") is not None:
            self._CommonConfig = CommonConfig()
            self._CommonConfig._deserialize(params.get("CommonConfig"))
        if params.get("DataConfig") is not None:
            self._DataConfig = MLDataConfig()
            self._DataConfig._deserialize(params.get("DataConfig"))
        if params.get("TaskOutputCosInfo") is not None:
            self._TaskOutputCosInfo = CosPathInfo()
            self._TaskOutputCosInfo._deserialize(params.get("TaskOutputCosInfo"))
        if params.get("ModelTrainConfig") is not None:
            self._ModelTrainConfig = ModelTrainConfig()
            self._ModelTrainConfig._deserialize(params.get("ModelTrainConfig"))
        self._ModelParamConfig = params.get("ModelParamConfig")
        if params.get("TrainResourceConfig") is not None:
            self._TrainResourceConfig = TrainResourceConfig()
            self._TrainResourceConfig._deserialize(params.get("TrainResourceConfig"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._TaskSource = params.get("TaskSource")
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._AutoMLTaskGroupId = params.get("AutoMLTaskGroupId")
        self._TrainTaskId = params.get("TrainTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._EMSTaskId = params.get("EMSTaskId")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskEMSTempCosInfoRequest(AbstractModel):
    """DescribeAutoMLTaskEMSTempCosInfo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        """
        self._AutoMLTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskEMSTempCosInfoResponse(AbstractModel):
    """DescribeAutoMLTaskEMSTempCosInfo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TempCosCredential: 临时鉴权信息
        :type TempCosCredential: :class:`tencentcloud.tione.v20211111.models.TempCosCredential`
        :param _TempFolder: 保存图片的临时目录
        :type TempFolder: str
        :param _TempBucket: 保存图片的存储桶名称
        :type TempBucket: str
        :param _ExpiredTime: 有效期时长
        :type ExpiredTime: int
        :param _StartTime: 开始有效时间
        :type StartTime: int
        :param _Expiration: 过期时间
        :type Expiration: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TempCosCredential = None
        self._TempFolder = None
        self._TempBucket = None
        self._ExpiredTime = None
        self._StartTime = None
        self._Expiration = None
        self._RequestId = None

    @property
    def TempCosCredential(self):
        """临时鉴权信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.TempCosCredential`
        """
        return self._TempCosCredential

    @TempCosCredential.setter
    def TempCosCredential(self, TempCosCredential):
        self._TempCosCredential = TempCosCredential

    @property
    def TempFolder(self):
        """保存图片的临时目录
        :rtype: str
        """
        return self._TempFolder

    @TempFolder.setter
    def TempFolder(self, TempFolder):
        self._TempFolder = TempFolder

    @property
    def TempBucket(self):
        """保存图片的存储桶名称
        :rtype: str
        """
        return self._TempBucket

    @TempBucket.setter
    def TempBucket(self, TempBucket):
        self._TempBucket = TempBucket

    @property
    def ExpiredTime(self):
        """有效期时长
        :rtype: int
        """
        return self._ExpiredTime

    @ExpiredTime.setter
    def ExpiredTime(self, ExpiredTime):
        self._ExpiredTime = ExpiredTime

    @property
    def StartTime(self):
        """开始有效时间
        :rtype: int
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def Expiration(self):
        """过期时间
        :rtype: str
        """
        return self._Expiration

    @Expiration.setter
    def Expiration(self, Expiration):
        self._Expiration = Expiration

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TempCosCredential") is not None:
            self._TempCosCredential = TempCosCredential()
            self._TempCosCredential._deserialize(params.get("TempCosCredential"))
        self._TempFolder = params.get("TempFolder")
        self._TempBucket = params.get("TempBucket")
        self._ExpiredTime = params.get("ExpiredTime")
        self._StartTime = params.get("StartTime")
        self._Expiration = params.get("Expiration")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskEvaluationASRBadcaseRequest(AbstractModel):
    """DescribeAutoMLTaskEvaluationASRBadcase请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _AutoMLEvaluateTaskId: 自动学习评测任务id
        :type AutoMLEvaluateTaskId: str
        :param _Offset: 偏移量，默认0
        :type Offset: int
        :param _Limit: 结果限制数量，默认10
        :type Limit: int
        :param _OrderField: 结果排序业务字段
        :type OrderField: str
        :param _Order: 结果排序规则
        :type Order: str
        :param _Type: single or multi
        :type Type: str
        :param _QueryType: ALL, BAD_CASE, GOOD_CASE
        :type QueryType: str
        :param _TagFilters: tag过滤
        :type TagFilters: list of ComparisonTagFilter
        :param _TagSorters: tag排序
        :type TagSorters: list of TagSorter
        :param _ResultFilters: 结果过滤
        :type ResultFilters: list of ResultFilter
        :param _SortOn: 排序、筛选所基于任务的SID
        :type SortOn: str
        """
        self._AutoMLTaskId = None
        self._AutoMLEvaluateTaskId = None
        self._Offset = None
        self._Limit = None
        self._OrderField = None
        self._Order = None
        self._Type = None
        self._QueryType = None
        self._TagFilters = None
        self._TagSorters = None
        self._ResultFilters = None
        self._SortOn = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def AutoMLEvaluateTaskId(self):
        """自动学习评测任务id
        :rtype: str
        """
        return self._AutoMLEvaluateTaskId

    @AutoMLEvaluateTaskId.setter
    def AutoMLEvaluateTaskId(self, AutoMLEvaluateTaskId):
        self._AutoMLEvaluateTaskId = AutoMLEvaluateTaskId

    @property
    def Offset(self):
        """偏移量，默认0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """结果限制数量，默认10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def OrderField(self):
        """结果排序业务字段
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Order(self):
        """结果排序规则
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def Type(self):
        """single or multi
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def QueryType(self):
        """ALL, BAD_CASE, GOOD_CASE
        :rtype: str
        """
        return self._QueryType

    @QueryType.setter
    def QueryType(self, QueryType):
        self._QueryType = QueryType

    @property
    def TagFilters(self):
        """tag过滤
        :rtype: list of ComparisonTagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def TagSorters(self):
        """tag排序
        :rtype: list of TagSorter
        """
        return self._TagSorters

    @TagSorters.setter
    def TagSorters(self, TagSorters):
        self._TagSorters = TagSorters

    @property
    def ResultFilters(self):
        """结果过滤
        :rtype: list of ResultFilter
        """
        return self._ResultFilters

    @ResultFilters.setter
    def ResultFilters(self, ResultFilters):
        self._ResultFilters = ResultFilters

    @property
    def SortOn(self):
        """排序、筛选所基于任务的SID
        :rtype: str
        """
        return self._SortOn

    @SortOn.setter
    def SortOn(self, SortOn):
        self._SortOn = SortOn


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._AutoMLEvaluateTaskId = params.get("AutoMLEvaluateTaskId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._OrderField = params.get("OrderField")
        self._Order = params.get("Order")
        self._Type = params.get("Type")
        self._QueryType = params.get("QueryType")
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = ComparisonTagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        if params.get("TagSorters") is not None:
            self._TagSorters = []
            for item in params.get("TagSorters"):
                obj = TagSorter()
                obj._deserialize(item)
                self._TagSorters.append(obj)
        if params.get("ResultFilters") is not None:
            self._ResultFilters = []
            for item in params.get("ResultFilters"):
                obj = ResultFilter()
                obj._deserialize(item)
                self._ResultFilters.append(obj)
        self._SortOn = params.get("SortOn")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskEvaluationASRBadcaseResponse(AbstractModel):
    """DescribeAutoMLTaskEvaluationASRBadcase返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _AutoMLEvaluateTaskId: 本次请求的所有的自动学习评测任务id
        :type AutoMLEvaluateTaskId: str
        :param _ComparedPredictions: 预测结果
        :type ComparedPredictions: list of ComparedPrediction
        :param _TotalCount: 预测结果总量
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._AutoMLEvaluateTaskId = None
        self._ComparedPredictions = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def AutoMLEvaluateTaskId(self):
        """本次请求的所有的自动学习评测任务id
        :rtype: str
        """
        return self._AutoMLEvaluateTaskId

    @AutoMLEvaluateTaskId.setter
    def AutoMLEvaluateTaskId(self, AutoMLEvaluateTaskId):
        self._AutoMLEvaluateTaskId = AutoMLEvaluateTaskId

    @property
    def ComparedPredictions(self):
        """预测结果
        :rtype: list of ComparedPrediction
        """
        return self._ComparedPredictions

    @ComparedPredictions.setter
    def ComparedPredictions(self, ComparedPredictions):
        self._ComparedPredictions = ComparedPredictions

    @property
    def TotalCount(self):
        """预测结果总量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._AutoMLEvaluateTaskId = params.get("AutoMLEvaluateTaskId")
        if params.get("ComparedPredictions") is not None:
            self._ComparedPredictions = []
            for item in params.get("ComparedPredictions"):
                obj = ComparedPrediction()
                obj._deserialize(item)
                self._ComparedPredictions.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskEvaluationASRBaseIndicatorRequest(AbstractModel):
    """DescribeAutoMLTaskEvaluationASRBaseIndicator请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _XiaoWeiAppInfo: 云小微app info
        :type XiaoWeiAppInfo: :class:`tencentcloud.tione.v20211111.models.XiaoWeiAppInfo`
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        """
        self._AutoMLTaskId = None
        self._XiaoWeiAppInfo = None
        self._EvaluationTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def XiaoWeiAppInfo(self):
        """云小微app info
        :rtype: :class:`tencentcloud.tione.v20211111.models.XiaoWeiAppInfo`
        """
        return self._XiaoWeiAppInfo

    @XiaoWeiAppInfo.setter
    def XiaoWeiAppInfo(self, XiaoWeiAppInfo):
        self._XiaoWeiAppInfo = XiaoWeiAppInfo

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        if params.get("XiaoWeiAppInfo") is not None:
            self._XiaoWeiAppInfo = XiaoWeiAppInfo()
            self._XiaoWeiAppInfo._deserialize(params.get("XiaoWeiAppInfo"))
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskEvaluationASRBaseIndicatorResponse(AbstractModel):
    """DescribeAutoMLTaskEvaluationASRBaseIndicator返回参数结构体

    """

    def __init__(self):
        r"""
        :param _CurrentAccuracy: 当前模型准确度
注意：此字段可能返回 null，表示取不到有效值。
        :type CurrentAccuracy: str
        :param _PreviousAccuracy: 优化前模型准确度
注意：此字段可能返回 null，表示取不到有效值。
        :type PreviousAccuracy: str
        :param _CurrentScalarMetrics: 当前模型的标量指标
注意：此字段可能返回 null，表示取不到有效值。
        :type CurrentScalarMetrics: list of ScalarItem
        :param _PreviousScalarMetrics: 优化前模型的标量指标
注意：此字段可能返回 null，表示取不到有效值。
        :type PreviousScalarMetrics: list of ScalarItem
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._CurrentAccuracy = None
        self._PreviousAccuracy = None
        self._CurrentScalarMetrics = None
        self._PreviousScalarMetrics = None
        self._RequestId = None

    @property
    def CurrentAccuracy(self):
        """当前模型准确度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CurrentAccuracy

    @CurrentAccuracy.setter
    def CurrentAccuracy(self, CurrentAccuracy):
        self._CurrentAccuracy = CurrentAccuracy

    @property
    def PreviousAccuracy(self):
        """优化前模型准确度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PreviousAccuracy

    @PreviousAccuracy.setter
    def PreviousAccuracy(self, PreviousAccuracy):
        self._PreviousAccuracy = PreviousAccuracy

    @property
    def CurrentScalarMetrics(self):
        """当前模型的标量指标
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ScalarItem
        """
        return self._CurrentScalarMetrics

    @CurrentScalarMetrics.setter
    def CurrentScalarMetrics(self, CurrentScalarMetrics):
        self._CurrentScalarMetrics = CurrentScalarMetrics

    @property
    def PreviousScalarMetrics(self):
        """优化前模型的标量指标
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ScalarItem
        """
        return self._PreviousScalarMetrics

    @PreviousScalarMetrics.setter
    def PreviousScalarMetrics(self, PreviousScalarMetrics):
        self._PreviousScalarMetrics = PreviousScalarMetrics

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._CurrentAccuracy = params.get("CurrentAccuracy")
        self._PreviousAccuracy = params.get("PreviousAccuracy")
        if params.get("CurrentScalarMetrics") is not None:
            self._CurrentScalarMetrics = []
            for item in params.get("CurrentScalarMetrics"):
                obj = ScalarItem()
                obj._deserialize(item)
                self._CurrentScalarMetrics.append(obj)
        if params.get("PreviousScalarMetrics") is not None:
            self._PreviousScalarMetrics = []
            for item in params.get("PreviousScalarMetrics"):
                obj = ScalarItem()
                obj._deserialize(item)
                self._PreviousScalarMetrics.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskEvaluationASRDetailRequest(AbstractModel):
    """DescribeAutoMLTaskEvaluationASRDetail请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskEvaluationASRDetailResponse(AbstractModel):
    """DescribeAutoMLTaskEvaluationASRDetail返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        :param _TestDataSetNames: 测试数据集名称
        :type TestDataSetNames: list of str
        :param _TotalSampleCount: 测试数据集样本数量
        :type TotalSampleCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._TestDataSetNames = None
        self._TotalSampleCount = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def TestDataSetNames(self):
        """测试数据集名称
        :rtype: list of str
        """
        return self._TestDataSetNames

    @TestDataSetNames.setter
    def TestDataSetNames(self, TestDataSetNames):
        self._TestDataSetNames = TestDataSetNames

    @property
    def TotalSampleCount(self):
        """测试数据集样本数量
        :rtype: int
        """
        return self._TotalSampleCount

    @TotalSampleCount.setter
    def TotalSampleCount(self, TotalSampleCount):
        self._TotalSampleCount = TotalSampleCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._TestDataSetNames = params.get("TestDataSetNames")
        self._TotalSampleCount = params.get("TotalSampleCount")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskEvaluationBadcasesRequest(AbstractModel):
    """DescribeAutoMLTaskEvaluationBadcases请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        :param _Threshold: 阈值
        :type Threshold: float
        :param _GroundTruthLabels: groundTruth标签过滤数组
        :type GroundTruthLabels: list of str
        :param _PredictLabels: 模型推理结果标签过滤数据
        :type PredictLabels: list of str
        :param _Offset: 偏移量，默认0
        :type Offset: int
        :param _Limit: 结果大小限制，默认10
        :type Limit: int
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._Threshold = None
        self._GroundTruthLabels = None
        self._PredictLabels = None
        self._Offset = None
        self._Limit = None

    @property
    def AutoMLTaskId(self):
        """评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def Threshold(self):
        """阈值
        :rtype: float
        """
        return self._Threshold

    @Threshold.setter
    def Threshold(self, Threshold):
        self._Threshold = Threshold

    @property
    def GroundTruthLabels(self):
        """groundTruth标签过滤数组
        :rtype: list of str
        """
        return self._GroundTruthLabels

    @GroundTruthLabels.setter
    def GroundTruthLabels(self, GroundTruthLabels):
        self._GroundTruthLabels = GroundTruthLabels

    @property
    def PredictLabels(self):
        """模型推理结果标签过滤数据
        :rtype: list of str
        """
        return self._PredictLabels

    @PredictLabels.setter
    def PredictLabels(self, PredictLabels):
        self._PredictLabels = PredictLabels

    @property
    def Offset(self):
        """偏移量，默认0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """结果大小限制，默认10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._Threshold = params.get("Threshold")
        self._GroundTruthLabels = params.get("GroundTruthLabels")
        self._PredictLabels = params.get("PredictLabels")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskEvaluationBadcasesResponse(AbstractModel):
    """DescribeAutoMLTaskEvaluationBadcases返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationTaskId: str
        :param _Threshold: 阈值
注意：此字段可能返回 null，表示取不到有效值。
        :type Threshold: float
        :param _TotalCount: 总的badcase数量
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _ImageInfos: badcase图像列表
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageInfos: list of BadcaseImageInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._Threshold = None
        self._TotalCount = None
        self._ImageInfos = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def Threshold(self):
        """阈值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Threshold

    @Threshold.setter
    def Threshold(self, Threshold):
        self._Threshold = Threshold

    @property
    def TotalCount(self):
        """总的badcase数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ImageInfos(self):
        """badcase图像列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of BadcaseImageInfo
        """
        return self._ImageInfos

    @ImageInfos.setter
    def ImageInfos(self, ImageInfos):
        self._ImageInfos = ImageInfos

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._Threshold = params.get("Threshold")
        self._TotalCount = params.get("TotalCount")
        if params.get("ImageInfos") is not None:
            self._ImageInfos = []
            for item in params.get("ImageInfos"):
                obj = BadcaseImageInfo()
                obj._deserialize(item)
                self._ImageInfos.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskEvaluationBaseIndicatorsRequest(AbstractModel):
    """DescribeAutoMLTaskEvaluationBaseIndicators请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        :param _Threshold: 评测结果指标对应的阈值，不填默认0.5
        :type Threshold: float
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._Threshold = None

    @property
    def AutoMLTaskId(self):
        """评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def Threshold(self):
        """评测结果指标对应的阈值，不填默认0.5
        :rtype: float
        """
        return self._Threshold

    @Threshold.setter
    def Threshold(self, Threshold):
        self._Threshold = Threshold


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._Threshold = params.get("Threshold")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskEvaluationBaseIndicatorsResponse(AbstractModel):
    """DescribeAutoMLTaskEvaluationBaseIndicators返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        :param _EvaluationTaskStatus: 评测任务状态
        :type EvaluationTaskStatus: str
        :param _Accuracy: 请求阈值下的精度
注意：此字段可能返回 null，表示取不到有效值。
        :type Accuracy: float
        :param _Recall: 请求阈值下的召回率
注意：此字段可能返回 null，表示取不到有效值。
        :type Recall: float
        :param _FScore: 请求阈值下的f1-score
注意：此字段可能返回 null，表示取不到有效值。
        :type FScore: float
        :param _MAP: 请求阈值下的mAP
注意：此字段可能返回 null，表示取不到有效值。
        :type MAP: float
        :param _Threshold: 请求阈值
注意：此字段可能返回 null，表示取不到有效值。
        :type Threshold: float
        :param _NLPItems: NLP基础指标
注意：此字段可能返回 null，表示取不到有效值。
        :type NLPItems: list of NLPIndicatorItem
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._EvaluationTaskStatus = None
        self._Accuracy = None
        self._Recall = None
        self._FScore = None
        self._MAP = None
        self._Threshold = None
        self._NLPItems = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def EvaluationTaskStatus(self):
        """评测任务状态
        :rtype: str
        """
        return self._EvaluationTaskStatus

    @EvaluationTaskStatus.setter
    def EvaluationTaskStatus(self, EvaluationTaskStatus):
        self._EvaluationTaskStatus = EvaluationTaskStatus

    @property
    def Accuracy(self):
        """请求阈值下的精度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Accuracy

    @Accuracy.setter
    def Accuracy(self, Accuracy):
        self._Accuracy = Accuracy

    @property
    def Recall(self):
        """请求阈值下的召回率
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Recall

    @Recall.setter
    def Recall(self, Recall):
        self._Recall = Recall

    @property
    def FScore(self):
        """请求阈值下的f1-score
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._FScore

    @FScore.setter
    def FScore(self, FScore):
        self._FScore = FScore

    @property
    def MAP(self):
        """请求阈值下的mAP
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._MAP

    @MAP.setter
    def MAP(self, MAP):
        self._MAP = MAP

    @property
    def Threshold(self):
        """请求阈值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Threshold

    @Threshold.setter
    def Threshold(self, Threshold):
        self._Threshold = Threshold

    @property
    def NLPItems(self):
        """NLP基础指标
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of NLPIndicatorItem
        """
        return self._NLPItems

    @NLPItems.setter
    def NLPItems(self, NLPItems):
        self._NLPItems = NLPItems

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._EvaluationTaskStatus = params.get("EvaluationTaskStatus")
        self._Accuracy = params.get("Accuracy")
        self._Recall = params.get("Recall")
        self._FScore = params.get("FScore")
        self._MAP = params.get("MAP")
        self._Threshold = params.get("Threshold")
        if params.get("NLPItems") is not None:
            self._NLPItems = []
            for item in params.get("NLPItems"):
                obj = NLPIndicatorItem()
                obj._deserialize(item)
                self._NLPItems.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskEvaluationDetailRequest(AbstractModel):
    """DescribeAutoMLTaskEvaluationDetail请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        :param _Threshold: 指定阈值，阈值范围为[0.05, 0.95]，步长为0.05
        :type Threshold: float
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._Threshold = None

    @property
    def AutoMLTaskId(self):
        """评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def Threshold(self):
        """指定阈值，阈值范围为[0.05, 0.95]，步长为0.05
        :rtype: float
        """
        return self._Threshold

    @Threshold.setter
    def Threshold(self, Threshold):
        self._Threshold = Threshold


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._Threshold = params.get("Threshold")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskEvaluationDetailResponse(AbstractModel):
    """DescribeAutoMLTaskEvaluationDetail返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationTaskId: str
        :param _TestDatasetIds: 评测任务有效数据集列表
注意：此字段可能返回 null，表示取不到有效值。
        :type TestDatasetIds: list of str
        :param _TestDatasetLabels: 参与评测有效标签列表
注意：此字段可能返回 null，表示取不到有效值。
        :type TestDatasetLabels: list of str
        :param _ImgNums: 参与评测的有效图像数据量
注意：此字段可能返回 null，表示取不到有效值。
        :type ImgNums: int
        :param _BadCaseNums: 查询阈值下的badcase数量
注意：此字段可能返回 null，表示取不到有效值。
        :type BadCaseNums: int
        :param _Scene: 评测任务场景信息详情
注意：此字段可能返回 null，表示取不到有效值。
        :type Scene: :class:`tencentcloud.tione.v20211111.models.Scene`
        :param _EvaluationCostSeconds: 评测任务运行时长，单位秒
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationCostSeconds: int
        :param _TxtNums: 文本数量
注意：此字段可能返回 null，表示取不到有效值。
        :type TxtNums: int
        :param _NLPItems: “题目”查询参数扩展
注意：此字段可能返回 null，表示取不到有效值。
        :type NLPItems: list of NLPItem
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._TestDatasetIds = None
        self._TestDatasetLabels = None
        self._ImgNums = None
        self._BadCaseNums = None
        self._Scene = None
        self._EvaluationCostSeconds = None
        self._TxtNums = None
        self._NLPItems = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def TestDatasetIds(self):
        """评测任务有效数据集列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._TestDatasetIds

    @TestDatasetIds.setter
    def TestDatasetIds(self, TestDatasetIds):
        self._TestDatasetIds = TestDatasetIds

    @property
    def TestDatasetLabels(self):
        """参与评测有效标签列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._TestDatasetLabels

    @TestDatasetLabels.setter
    def TestDatasetLabels(self, TestDatasetLabels):
        self._TestDatasetLabels = TestDatasetLabels

    @property
    def ImgNums(self):
        """参与评测的有效图像数据量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ImgNums

    @ImgNums.setter
    def ImgNums(self, ImgNums):
        self._ImgNums = ImgNums

    @property
    def BadCaseNums(self):
        """查询阈值下的badcase数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._BadCaseNums

    @BadCaseNums.setter
    def BadCaseNums(self, BadCaseNums):
        self._BadCaseNums = BadCaseNums

    @property
    def Scene(self):
        """评测任务场景信息详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.Scene`
        """
        return self._Scene

    @Scene.setter
    def Scene(self, Scene):
        self._Scene = Scene

    @property
    def EvaluationCostSeconds(self):
        """评测任务运行时长，单位秒
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._EvaluationCostSeconds

    @EvaluationCostSeconds.setter
    def EvaluationCostSeconds(self, EvaluationCostSeconds):
        self._EvaluationCostSeconds = EvaluationCostSeconds

    @property
    def TxtNums(self):
        """文本数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TxtNums

    @TxtNums.setter
    def TxtNums(self, TxtNums):
        self._TxtNums = TxtNums

    @property
    def NLPItems(self):
        """“题目”查询参数扩展
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of NLPItem
        """
        return self._NLPItems

    @NLPItems.setter
    def NLPItems(self, NLPItems):
        self._NLPItems = NLPItems

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._TestDatasetIds = params.get("TestDatasetIds")
        self._TestDatasetLabels = params.get("TestDatasetLabels")
        self._ImgNums = params.get("ImgNums")
        self._BadCaseNums = params.get("BadCaseNums")
        if params.get("Scene") is not None:
            self._Scene = Scene()
            self._Scene._deserialize(params.get("Scene"))
        self._EvaluationCostSeconds = params.get("EvaluationCostSeconds")
        self._TxtNums = params.get("TxtNums")
        if params.get("NLPItems") is not None:
            self._NLPItems = []
            for item in params.get("NLPItems"):
                obj = NLPItem()
                obj._deserialize(item)
                self._NLPItems.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskEvaluationNLUSeniorIndicatorRequest(AbstractModel):
    """DescribeAutoMLTaskEvaluationNLUSeniorIndicator请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskEvaluationNLUSeniorIndicatorResponse(AbstractModel):
    """DescribeAutoMLTaskEvaluationNLUSeniorIndicator返回参数结构体

    """

    def __init__(self):
        r"""
        :param _CurrentMetrics: 当前模型详细指标
        :type CurrentMetrics: str
        :param _PreviousMetrics: 优化前模型详细指标
        :type PreviousMetrics: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._CurrentMetrics = None
        self._PreviousMetrics = None
        self._RequestId = None

    @property
    def CurrentMetrics(self):
        """当前模型详细指标
        :rtype: str
        """
        return self._CurrentMetrics

    @CurrentMetrics.setter
    def CurrentMetrics(self, CurrentMetrics):
        self._CurrentMetrics = CurrentMetrics

    @property
    def PreviousMetrics(self):
        """优化前模型详细指标
        :rtype: str
        """
        return self._PreviousMetrics

    @PreviousMetrics.setter
    def PreviousMetrics(self, PreviousMetrics):
        self._PreviousMetrics = PreviousMetrics

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._CurrentMetrics = params.get("CurrentMetrics")
        self._PreviousMetrics = params.get("PreviousMetrics")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskEvaluationSeniorIndicatorsRequest(AbstractModel):
    """DescribeAutoMLTaskEvaluationSeniorIndicators请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        :param _Thresholds: 每个标签对应的阈值信息，不填默认所有标签用默认的0.5，填一个表示所有标签的阈值一样
        :type Thresholds: list of float
        :param _MaxConfusionMatrixSize: 返回的最大混淆矩阵大小，超过的则截断返回; 默认:0; 不截断，全部返回
        :type MaxConfusionMatrixSize: int
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._Thresholds = None
        self._MaxConfusionMatrixSize = None

    @property
    def AutoMLTaskId(self):
        """评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def Thresholds(self):
        """每个标签对应的阈值信息，不填默认所有标签用默认的0.5，填一个表示所有标签的阈值一样
        :rtype: list of float
        """
        return self._Thresholds

    @Thresholds.setter
    def Thresholds(self, Thresholds):
        self._Thresholds = Thresholds

    @property
    def MaxConfusionMatrixSize(self):
        """返回的最大混淆矩阵大小，超过的则截断返回; 默认:0; 不截断，全部返回
        :rtype: int
        """
        return self._MaxConfusionMatrixSize

    @MaxConfusionMatrixSize.setter
    def MaxConfusionMatrixSize(self, MaxConfusionMatrixSize):
        self._MaxConfusionMatrixSize = MaxConfusionMatrixSize


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._Thresholds = params.get("Thresholds")
        self._MaxConfusionMatrixSize = params.get("MaxConfusionMatrixSize")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskEvaluationSeniorIndicatorsResponse(AbstractModel):
    """DescribeAutoMLTaskEvaluationSeniorIndicators返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        :param _TestLabels: 评测标签列表
注意：此字段可能返回 null，表示取不到有效值。
        :type TestLabels: list of str
        :param _Thresholds: 评测结果每个标签对应的阈值列表
注意：此字段可能返回 null，表示取不到有效值。
        :type Thresholds: list of float
        :param _Precisions: 评测结果每个标签对应的精度信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Precisions: list of float
        :param _Recalls: 评测结果每个标签对应的召回率信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Recalls: list of float
        :param _FScores: 评测结果每个标签对应的f1-score信息
注意：此字段可能返回 null，表示取不到有效值。
        :type FScores: list of float
        :param _MAP: 评测结果每个标签对应的mAP信息
注意：此字段可能返回 null，表示取不到有效值。
        :type MAP: list of float
        :param _PRValues: pr曲线详细信息
注意：此字段可能返回 null，表示取不到有效值。
        :type PRValues: list of PRValue
        :param _ConfusionMatrix: 混淆矩阵
注意：此字段可能返回 null，表示取不到有效值。
        :type ConfusionMatrix: list of DataArray
        :param _MultiLabel: NLP是否为多标签
注意：此字段可能返回 null，表示取不到有效值。
        :type MultiLabel: bool
        :param _Accuracies: NLP的分类别准确率
注意：此字段可能返回 null，表示取不到有效值。
        :type Accuracies: list of float
        :param _MacroFScores: NLP的宏平均
注意：此字段可能返回 null，表示取不到有效值。
        :type MacroFScores: list of float
        :param _MicroFScores: NLP的微平均
注意：此字段可能返回 null，表示取不到有效值。
        :type MicroFScores: list of float
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._TestLabels = None
        self._Thresholds = None
        self._Precisions = None
        self._Recalls = None
        self._FScores = None
        self._MAP = None
        self._PRValues = None
        self._ConfusionMatrix = None
        self._MultiLabel = None
        self._Accuracies = None
        self._MacroFScores = None
        self._MicroFScores = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def TestLabels(self):
        """评测标签列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._TestLabels

    @TestLabels.setter
    def TestLabels(self, TestLabels):
        self._TestLabels = TestLabels

    @property
    def Thresholds(self):
        """评测结果每个标签对应的阈值列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._Thresholds

    @Thresholds.setter
    def Thresholds(self, Thresholds):
        self._Thresholds = Thresholds

    @property
    def Precisions(self):
        """评测结果每个标签对应的精度信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._Precisions

    @Precisions.setter
    def Precisions(self, Precisions):
        self._Precisions = Precisions

    @property
    def Recalls(self):
        """评测结果每个标签对应的召回率信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._Recalls

    @Recalls.setter
    def Recalls(self, Recalls):
        self._Recalls = Recalls

    @property
    def FScores(self):
        """评测结果每个标签对应的f1-score信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._FScores

    @FScores.setter
    def FScores(self, FScores):
        self._FScores = FScores

    @property
    def MAP(self):
        """评测结果每个标签对应的mAP信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._MAP

    @MAP.setter
    def MAP(self, MAP):
        self._MAP = MAP

    @property
    def PRValues(self):
        """pr曲线详细信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of PRValue
        """
        return self._PRValues

    @PRValues.setter
    def PRValues(self, PRValues):
        self._PRValues = PRValues

    @property
    def ConfusionMatrix(self):
        """混淆矩阵
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataArray
        """
        return self._ConfusionMatrix

    @ConfusionMatrix.setter
    def ConfusionMatrix(self, ConfusionMatrix):
        self._ConfusionMatrix = ConfusionMatrix

    @property
    def MultiLabel(self):
        """NLP是否为多标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._MultiLabel

    @MultiLabel.setter
    def MultiLabel(self, MultiLabel):
        self._MultiLabel = MultiLabel

    @property
    def Accuracies(self):
        """NLP的分类别准确率
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._Accuracies

    @Accuracies.setter
    def Accuracies(self, Accuracies):
        self._Accuracies = Accuracies

    @property
    def MacroFScores(self):
        """NLP的宏平均
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._MacroFScores

    @MacroFScores.setter
    def MacroFScores(self, MacroFScores):
        self._MacroFScores = MacroFScores

    @property
    def MicroFScores(self):
        """NLP的微平均
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._MicroFScores

    @MicroFScores.setter
    def MicroFScores(self, MicroFScores):
        self._MicroFScores = MicroFScores

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._TestLabels = params.get("TestLabels")
        self._Thresholds = params.get("Thresholds")
        self._Precisions = params.get("Precisions")
        self._Recalls = params.get("Recalls")
        self._FScores = params.get("FScores")
        self._MAP = params.get("MAP")
        if params.get("PRValues") is not None:
            self._PRValues = []
            for item in params.get("PRValues"):
                obj = PRValue()
                obj._deserialize(item)
                self._PRValues.append(obj)
        if params.get("ConfusionMatrix") is not None:
            self._ConfusionMatrix = []
            for item in params.get("ConfusionMatrix"):
                obj = DataArray()
                obj._deserialize(item)
                self._ConfusionMatrix.append(obj)
        self._MultiLabel = params.get("MultiLabel")
        self._Accuracies = params.get("Accuracies")
        self._MacroFScores = params.get("MacroFScores")
        self._MicroFScores = params.get("MicroFScores")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskNLPEvaluationBadcasesRequest(AbstractModel):
    """DescribeAutoMLTaskNLPEvaluationBadcases请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: NLP评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        :param _Topic: 题目
        :type Topic: str
        :param _PreviewRange: 查询范围
        :type PreviewRange: str
        :param _Offset: 偏移量，默认0
        :type Offset: int
        :param _Limit: 结果大小限制，默认10
        :type Limit: int
        :param _NLPTagFilters: 过滤
        :type NLPTagFilters: list of NLPTagFilter
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._Topic = None
        self._PreviewRange = None
        self._Offset = None
        self._Limit = None
        self._NLPTagFilters = None

    @property
    def AutoMLTaskId(self):
        """NLP评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def Topic(self):
        """题目
        :rtype: str
        """
        return self._Topic

    @Topic.setter
    def Topic(self, Topic):
        self._Topic = Topic

    @property
    def PreviewRange(self):
        """查询范围
        :rtype: str
        """
        return self._PreviewRange

    @PreviewRange.setter
    def PreviewRange(self, PreviewRange):
        self._PreviewRange = PreviewRange

    @property
    def Offset(self):
        """偏移量，默认0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """结果大小限制，默认10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def NLPTagFilters(self):
        """过滤
        :rtype: list of NLPTagFilter
        """
        return self._NLPTagFilters

    @NLPTagFilters.setter
    def NLPTagFilters(self, NLPTagFilters):
        self._NLPTagFilters = NLPTagFilters


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._Topic = params.get("Topic")
        self._PreviewRange = params.get("PreviewRange")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("NLPTagFilters") is not None:
            self._NLPTagFilters = []
            for item in params.get("NLPTagFilters"):
                obj = NLPTagFilter()
                obj._deserialize(item)
                self._NLPTagFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskNLPEvaluationBadcasesResponse(AbstractModel):
    """DescribeAutoMLTaskNLPEvaluationBadcases返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: NLP评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationTaskId: str
        :param _TotalCount: 总数
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _NLPBadcaseItems: NLP badcase数组
注意：此字段可能返回 null，表示取不到有效值。
        :type NLPBadcaseItems: list of NLPBadcaseItem
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._TotalCount = None
        self._NLPBadcaseItems = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """NLP评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def TotalCount(self):
        """总数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def NLPBadcaseItems(self):
        """NLP badcase数组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of NLPBadcaseItem
        """
        return self._NLPBadcaseItems

    @NLPBadcaseItems.setter
    def NLPBadcaseItems(self, NLPBadcaseItems):
        self._NLPBadcaseItems = NLPBadcaseItems

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._TotalCount = params.get("TotalCount")
        if params.get("NLPBadcaseItems") is not None:
            self._NLPBadcaseItems = []
            for item in params.get("NLPBadcaseItems"):
                obj = NLPBadcaseItem()
                obj._deserialize(item)
                self._NLPBadcaseItems.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskNLUEvaluationBaseIndicatorRequest(AbstractModel):
    """DescribeAutoMLTaskNLUEvaluationBaseIndicator请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskNLUEvaluationBaseIndicatorResponse(AbstractModel):
    """DescribeAutoMLTaskNLUEvaluationBaseIndicator返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        :param _BaseIndicator: 当前模型指标
        :type BaseIndicator: str
        :param _SeniorIndicator: 优化前模型指标
        :type SeniorIndicator: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._BaseIndicator = None
        self._SeniorIndicator = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def BaseIndicator(self):
        """当前模型指标
        :rtype: str
        """
        return self._BaseIndicator

    @BaseIndicator.setter
    def BaseIndicator(self, BaseIndicator):
        self._BaseIndicator = BaseIndicator

    @property
    def SeniorIndicator(self):
        """优化前模型指标
        :rtype: str
        """
        return self._SeniorIndicator

    @SeniorIndicator.setter
    def SeniorIndicator(self, SeniorIndicator):
        self._SeniorIndicator = SeniorIndicator

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._BaseIndicator = params.get("BaseIndicator")
        self._SeniorIndicator = params.get("SeniorIndicator")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskNLUEvaluationSeniorIndicatorRequest(AbstractModel):
    """DescribeAutoMLTaskNLUEvaluationSeniorIndicator请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskNLUEvaluationSeniorIndicatorResponse(AbstractModel):
    """DescribeAutoMLTaskNLUEvaluationSeniorIndicator返回参数结构体

    """

    def __init__(self):
        r"""
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._EvaluationTaskId = None
        self._RequestId = None

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskTrainDetailRequest(AbstractModel):
    """DescribeAutoMLTaskTrainDetail请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _TrainTaskId: 训练任务ID
        :type TrainTaskId: str
        """
        self._AutoMLTaskId = None
        self._TrainTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def TrainTaskId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._TrainTaskId = params.get("TrainTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskTrainDetailResponse(AbstractModel):
    """DescribeAutoMLTaskTrainDetail返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _TrainTaskId: 训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskId: str
        :param _TrainTimeUsedSecond: 训练耗时
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTimeUsedSecond: int
        :param _TrainTimeExpectedSecond: 训练预估耗时
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTimeExpectedSecond: int
        :param _TrainTimeMaxSecond: 训练最大时长
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTimeMaxSecond: int
        :param _TrainProgress: 训练进度
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainProgress: int
        :param _TrainTaskStatus: 训练任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskStatus: str
        :param _TrainErrorMessage: 训练失败时错误详情
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainErrorMessage: str
        :param _TrainStartTime: 训练开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainStartTime: str
        :param _TrainEndTime: 训练结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainEndTime: float
        :param _TrainingTaskInfos: 任务式建模任务详情
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainingTaskInfos: list of TrainingTaskInfo
        :param _ModelAccTaskStatus: 模型优化任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccTaskStatus: str
        :param _OptimizationResult: 模型优化任务报告
注意：此字段可能返回 null，表示取不到有效值。
        :type OptimizationResult: :class:`tencentcloud.tione.v20211111.models.OptimizationResult`
        :param _ModelAccErrorMessage: 模型优化时错误详情
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccErrorMessage: str
        :param _ModelAccTaskProgress: 模型优化任务进度
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccTaskProgress: int
        :param _ModelAccRunningSeconds: 模型优化耗时
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccRunningSeconds: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._TrainTaskId = None
        self._TrainTimeUsedSecond = None
        self._TrainTimeExpectedSecond = None
        self._TrainTimeMaxSecond = None
        self._TrainProgress = None
        self._TrainTaskStatus = None
        self._TrainErrorMessage = None
        self._TrainStartTime = None
        self._TrainEndTime = None
        self._TrainingTaskInfos = None
        self._ModelAccTaskStatus = None
        self._OptimizationResult = None
        self._ModelAccErrorMessage = None
        self._ModelAccTaskProgress = None
        self._ModelAccRunningSeconds = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def TrainTaskId(self):
        """训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId

    @property
    def TrainTimeUsedSecond(self):
        """训练耗时
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TrainTimeUsedSecond

    @TrainTimeUsedSecond.setter
    def TrainTimeUsedSecond(self, TrainTimeUsedSecond):
        self._TrainTimeUsedSecond = TrainTimeUsedSecond

    @property
    def TrainTimeExpectedSecond(self):
        """训练预估耗时
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TrainTimeExpectedSecond

    @TrainTimeExpectedSecond.setter
    def TrainTimeExpectedSecond(self, TrainTimeExpectedSecond):
        self._TrainTimeExpectedSecond = TrainTimeExpectedSecond

    @property
    def TrainTimeMaxSecond(self):
        """训练最大时长
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TrainTimeMaxSecond

    @TrainTimeMaxSecond.setter
    def TrainTimeMaxSecond(self, TrainTimeMaxSecond):
        self._TrainTimeMaxSecond = TrainTimeMaxSecond

    @property
    def TrainProgress(self):
        """训练进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TrainProgress

    @TrainProgress.setter
    def TrainProgress(self, TrainProgress):
        self._TrainProgress = TrainProgress

    @property
    def TrainTaskStatus(self):
        """训练任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainTaskStatus

    @TrainTaskStatus.setter
    def TrainTaskStatus(self, TrainTaskStatus):
        self._TrainTaskStatus = TrainTaskStatus

    @property
    def TrainErrorMessage(self):
        """训练失败时错误详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainErrorMessage

    @TrainErrorMessage.setter
    def TrainErrorMessage(self, TrainErrorMessage):
        self._TrainErrorMessage = TrainErrorMessage

    @property
    def TrainStartTime(self):
        """训练开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainStartTime

    @TrainStartTime.setter
    def TrainStartTime(self, TrainStartTime):
        self._TrainStartTime = TrainStartTime

    @property
    def TrainEndTime(self):
        """训练结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._TrainEndTime

    @TrainEndTime.setter
    def TrainEndTime(self, TrainEndTime):
        self._TrainEndTime = TrainEndTime

    @property
    def TrainingTaskInfos(self):
        """任务式建模任务详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TrainingTaskInfo
        """
        return self._TrainingTaskInfos

    @TrainingTaskInfos.setter
    def TrainingTaskInfos(self, TrainingTaskInfos):
        self._TrainingTaskInfos = TrainingTaskInfos

    @property
    def ModelAccTaskStatus(self):
        """模型优化任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelAccTaskStatus

    @ModelAccTaskStatus.setter
    def ModelAccTaskStatus(self, ModelAccTaskStatus):
        self._ModelAccTaskStatus = ModelAccTaskStatus

    @property
    def OptimizationResult(self):
        """模型优化任务报告
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.OptimizationResult`
        """
        return self._OptimizationResult

    @OptimizationResult.setter
    def OptimizationResult(self, OptimizationResult):
        self._OptimizationResult = OptimizationResult

    @property
    def ModelAccErrorMessage(self):
        """模型优化时错误详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelAccErrorMessage

    @ModelAccErrorMessage.setter
    def ModelAccErrorMessage(self, ModelAccErrorMessage):
        self._ModelAccErrorMessage = ModelAccErrorMessage

    @property
    def ModelAccTaskProgress(self):
        """模型优化任务进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ModelAccTaskProgress

    @ModelAccTaskProgress.setter
    def ModelAccTaskProgress(self, ModelAccTaskProgress):
        self._ModelAccTaskProgress = ModelAccTaskProgress

    @property
    def ModelAccRunningSeconds(self):
        """模型优化耗时
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ModelAccRunningSeconds

    @ModelAccRunningSeconds.setter
    def ModelAccRunningSeconds(self, ModelAccRunningSeconds):
        self._ModelAccRunningSeconds = ModelAccRunningSeconds

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._TrainTaskId = params.get("TrainTaskId")
        self._TrainTimeUsedSecond = params.get("TrainTimeUsedSecond")
        self._TrainTimeExpectedSecond = params.get("TrainTimeExpectedSecond")
        self._TrainTimeMaxSecond = params.get("TrainTimeMaxSecond")
        self._TrainProgress = params.get("TrainProgress")
        self._TrainTaskStatus = params.get("TrainTaskStatus")
        self._TrainErrorMessage = params.get("TrainErrorMessage")
        self._TrainStartTime = params.get("TrainStartTime")
        self._TrainEndTime = params.get("TrainEndTime")
        if params.get("TrainingTaskInfos") is not None:
            self._TrainingTaskInfos = []
            for item in params.get("TrainingTaskInfos"):
                obj = TrainingTaskInfo()
                obj._deserialize(item)
                self._TrainingTaskInfos.append(obj)
        self._ModelAccTaskStatus = params.get("ModelAccTaskStatus")
        if params.get("OptimizationResult") is not None:
            self._OptimizationResult = OptimizationResult()
            self._OptimizationResult._deserialize(params.get("OptimizationResult"))
        self._ModelAccErrorMessage = params.get("ModelAccErrorMessage")
        self._ModelAccTaskProgress = params.get("ModelAccTaskProgress")
        self._ModelAccRunningSeconds = params.get("ModelAccRunningSeconds")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTaskTrainIndicatorsRequest(AbstractModel):
    """DescribeAutoMLTaskTrainIndicators请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _TrainTaskId: 训练任务ID
        :type TrainTaskId: str
        """
        self._AutoMLTaskId = None
        self._TrainTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def TrainTaskId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._TrainTaskId = params.get("TrainTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTaskTrainIndicatorsResponse(AbstractModel):
    """DescribeAutoMLTaskTrainIndicators返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _TrainTaskId: 训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskId: str
        :param _Scene: 场景
注意：此字段可能返回 null，表示取不到有效值。
        :type Scene: :class:`tencentcloud.tione.v20211111.models.Scene`
        :param _Epochs: 迭代id
注意：此字段可能返回 null，表示取不到有效值。
        :type Epochs: list of int non-negative
        :param _Accuracy: 准确率
注意：此字段可能返回 null，表示取不到有效值。
        :type Accuracy: list of float
        :param _AccTop1: top1准确率
注意：此字段可能返回 null，表示取不到有效值。
        :type AccTop1: list of float
        :param _AccTop5: top5准确率
注意：此字段可能返回 null，表示取不到有效值。
        :type AccTop5: list of float
        :param _Loss: 损失值
注意：此字段可能返回 null，表示取不到有效值。
        :type Loss: list of float
        :param _MAP: 检测mAP
注意：此字段可能返回 null，表示取不到有效值。
        :type MAP: list of float
        :param _TrainTimeUsedSecond: 已运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTimeUsedSecond: int
        :param _TrainTimeExpectedSecond: 预计运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTimeExpectedSecond: int
        :param _TrainTimeMaxSecond: 最长运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTimeMaxSecond: int
        :param _TrainProgress: 训练进度
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainProgress: int
        :param _TrainTaskStatus: 任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskStatus: str
        :param _TrainErrorMessage: 错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainErrorMessage: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._TrainTaskId = None
        self._Scene = None
        self._Epochs = None
        self._Accuracy = None
        self._AccTop1 = None
        self._AccTop5 = None
        self._Loss = None
        self._MAP = None
        self._TrainTimeUsedSecond = None
        self._TrainTimeExpectedSecond = None
        self._TrainTimeMaxSecond = None
        self._TrainProgress = None
        self._TrainTaskStatus = None
        self._TrainErrorMessage = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def TrainTaskId(self):
        """训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId

    @property
    def Scene(self):
        """场景
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.Scene`
        """
        return self._Scene

    @Scene.setter
    def Scene(self, Scene):
        self._Scene = Scene

    @property
    def Epochs(self):
        """迭代id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of int non-negative
        """
        return self._Epochs

    @Epochs.setter
    def Epochs(self, Epochs):
        self._Epochs = Epochs

    @property
    def Accuracy(self):
        """准确率
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._Accuracy

    @Accuracy.setter
    def Accuracy(self, Accuracy):
        self._Accuracy = Accuracy

    @property
    def AccTop1(self):
        """top1准确率
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._AccTop1

    @AccTop1.setter
    def AccTop1(self, AccTop1):
        self._AccTop1 = AccTop1

    @property
    def AccTop5(self):
        """top5准确率
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._AccTop5

    @AccTop5.setter
    def AccTop5(self, AccTop5):
        self._AccTop5 = AccTop5

    @property
    def Loss(self):
        """损失值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._Loss

    @Loss.setter
    def Loss(self, Loss):
        self._Loss = Loss

    @property
    def MAP(self):
        """检测mAP
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._MAP

    @MAP.setter
    def MAP(self, MAP):
        self._MAP = MAP

    @property
    def TrainTimeUsedSecond(self):
        """已运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TrainTimeUsedSecond

    @TrainTimeUsedSecond.setter
    def TrainTimeUsedSecond(self, TrainTimeUsedSecond):
        self._TrainTimeUsedSecond = TrainTimeUsedSecond

    @property
    def TrainTimeExpectedSecond(self):
        """预计运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TrainTimeExpectedSecond

    @TrainTimeExpectedSecond.setter
    def TrainTimeExpectedSecond(self, TrainTimeExpectedSecond):
        self._TrainTimeExpectedSecond = TrainTimeExpectedSecond

    @property
    def TrainTimeMaxSecond(self):
        """最长运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TrainTimeMaxSecond

    @TrainTimeMaxSecond.setter
    def TrainTimeMaxSecond(self, TrainTimeMaxSecond):
        self._TrainTimeMaxSecond = TrainTimeMaxSecond

    @property
    def TrainProgress(self):
        """训练进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TrainProgress

    @TrainProgress.setter
    def TrainProgress(self, TrainProgress):
        self._TrainProgress = TrainProgress

    @property
    def TrainTaskStatus(self):
        """任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainTaskStatus

    @TrainTaskStatus.setter
    def TrainTaskStatus(self, TrainTaskStatus):
        self._TrainTaskStatus = TrainTaskStatus

    @property
    def TrainErrorMessage(self):
        """错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainErrorMessage

    @TrainErrorMessage.setter
    def TrainErrorMessage(self, TrainErrorMessage):
        self._TrainErrorMessage = TrainErrorMessage

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._TrainTaskId = params.get("TrainTaskId")
        if params.get("Scene") is not None:
            self._Scene = Scene()
            self._Scene._deserialize(params.get("Scene"))
        self._Epochs = params.get("Epochs")
        self._Accuracy = params.get("Accuracy")
        self._AccTop1 = params.get("AccTop1")
        self._AccTop5 = params.get("AccTop5")
        self._Loss = params.get("Loss")
        self._MAP = params.get("MAP")
        self._TrainTimeUsedSecond = params.get("TrainTimeUsedSecond")
        self._TrainTimeExpectedSecond = params.get("TrainTimeExpectedSecond")
        self._TrainTimeMaxSecond = params.get("TrainTimeMaxSecond")
        self._TrainProgress = params.get("TrainProgress")
        self._TrainTaskStatus = params.get("TrainTaskStatus")
        self._TrainErrorMessage = params.get("TrainErrorMessage")
        self._RequestId = params.get("RequestId")


class DescribeAutoMLTrainTasksRequest(AbstractModel):
    """DescribeAutoMLTrainTasks请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤条件
        :type Filters: list of Filter
        :param _TagFilters: 标签过滤条件
        :type TagFilters: list of TagFilter
        :param _Offset: 偏移量
        :type Offset: int
        :param _Limit: 返回个数
        :type Limit: int
        :param _OrderField: 排序字段
        :type OrderField: str
        :param _Order: 排序方式
        :type Order: str
        """
        self._Filters = None
        self._TagFilters = None
        self._Offset = None
        self._Limit = None
        self._OrderField = None
        self._Order = None

    @property
    def Filters(self):
        """过滤条件
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签过滤条件
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def Offset(self):
        """偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回个数
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def OrderField(self):
        """排序字段
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Order(self):
        """排序方式
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._OrderField = params.get("OrderField")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMLTrainTasksResponse(AbstractModel):
    """DescribeAutoMLTrainTasks返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TrainTaskGroups: 训练任务组列表
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskGroups: list of TrainTaskGroup
        :param _TotalCount: 总个数
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TrainTaskGroups = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def TrainTaskGroups(self):
        """训练任务组列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TrainTaskGroup
        """
        return self._TrainTaskGroups

    @TrainTaskGroups.setter
    def TrainTaskGroups(self, TrainTaskGroups):
        self._TrainTaskGroups = TrainTaskGroups

    @property
    def TotalCount(self):
        """总个数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TrainTaskGroups") is not None:
            self._TrainTaskGroups = []
            for item in params.get("TrainTaskGroups"):
                obj = TrainTaskGroup()
                obj._deserialize(item)
                self._TrainTaskGroups.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAutoMlTaskIntentSlotsRequest(AbstractModel):
    """DescribeAutoMlTaskIntentSlots请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _AutoMLEvaluateTaskId: 评测任务id
        :type AutoMLEvaluateTaskId: str
        :param _TagFilters: tag过滤
        :type TagFilters: list of ComparisonTagFilter
        :param _TagSorters: 排序关系
        :type TagSorters: list of TagSorter
        :param _ResultFilters: 结果过滤
        :type ResultFilters: list of ResultFilter
        """
        self._AutoMLTaskId = None
        self._AutoMLEvaluateTaskId = None
        self._TagFilters = None
        self._TagSorters = None
        self._ResultFilters = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def AutoMLEvaluateTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._AutoMLEvaluateTaskId

    @AutoMLEvaluateTaskId.setter
    def AutoMLEvaluateTaskId(self, AutoMLEvaluateTaskId):
        self._AutoMLEvaluateTaskId = AutoMLEvaluateTaskId

    @property
    def TagFilters(self):
        """tag过滤
        :rtype: list of ComparisonTagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def TagSorters(self):
        """排序关系
        :rtype: list of TagSorter
        """
        return self._TagSorters

    @TagSorters.setter
    def TagSorters(self, TagSorters):
        self._TagSorters = TagSorters

    @property
    def ResultFilters(self):
        """结果过滤
        :rtype: list of ResultFilter
        """
        return self._ResultFilters

    @ResultFilters.setter
    def ResultFilters(self, ResultFilters):
        self._ResultFilters = ResultFilters


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._AutoMLEvaluateTaskId = params.get("AutoMLEvaluateTaskId")
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = ComparisonTagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        if params.get("TagSorters") is not None:
            self._TagSorters = []
            for item in params.get("TagSorters"):
                obj = TagSorter()
                obj._deserialize(item)
                self._TagSorters.append(obj)
        if params.get("ResultFilters") is not None:
            self._ResultFilters = []
            for item in params.get("ResultFilters"):
                obj = ResultFilter()
                obj._deserialize(item)
                self._ResultFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoMlTaskIntentSlotsResponse(AbstractModel):
    """DescribeAutoMlTaskIntentSlots返回参数结构体

    """

    def __init__(self):
        r"""
        :param _IntentSlots: 意图槽位列表
        :type IntentSlots: list of IntentSlotsPair
        :param _TotalCount: 列表元素总数量
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._IntentSlots = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def IntentSlots(self):
        """意图槽位列表
        :rtype: list of IntentSlotsPair
        """
        return self._IntentSlots

    @IntentSlots.setter
    def IntentSlots(self, IntentSlots):
        self._IntentSlots = IntentSlots

    @property
    def TotalCount(self):
        """列表元素总数量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("IntentSlots") is not None:
            self._IntentSlots = []
            for item in params.get("IntentSlots"):
                obj = IntentSlotsPair()
                obj._deserialize(item)
                self._IntentSlots.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeAutoOcrPredictionRequest(AbstractModel):
    """DescribeAutoOcrPrediction请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _FileId: 文件id
        :type FileId: str
        :param _Pts: 坐标
        :type Pts: list of Point
        :param _RotateAngle: 旋转角度，支持0，90，180，270，360
        :type RotateAngle: int
        :param _AsyncTaskId: 异步任务ID
        :type AsyncTaskId: str
        """
        self._TaskId = None
        self._FileId = None
        self._Pts = None
        self._RotateAngle = None
        self._AsyncTaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def FileId(self):
        """文件id
        :rtype: str
        """
        return self._FileId

    @FileId.setter
    def FileId(self, FileId):
        self._FileId = FileId

    @property
    def Pts(self):
        """坐标
        :rtype: list of Point
        """
        return self._Pts

    @Pts.setter
    def Pts(self, Pts):
        self._Pts = Pts

    @property
    def RotateAngle(self):
        """旋转角度，支持0，90，180，270，360
        :rtype: int
        """
        return self._RotateAngle

    @RotateAngle.setter
    def RotateAngle(self, RotateAngle):
        self._RotateAngle = RotateAngle

    @property
    def AsyncTaskId(self):
        """异步任务ID
        :rtype: str
        """
        return self._AsyncTaskId

    @AsyncTaskId.setter
    def AsyncTaskId(self, AsyncTaskId):
        self._AsyncTaskId = AsyncTaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._FileId = params.get("FileId")
        if params.get("Pts") is not None:
            self._Pts = []
            for item in params.get("Pts"):
                obj = Point()
                obj._deserialize(item)
                self._Pts.append(obj)
        self._RotateAngle = params.get("RotateAngle")
        self._AsyncTaskId = params.get("AsyncTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAutoOcrPredictionResponse(AbstractModel):
    """DescribeAutoOcrPrediction返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Value: 预测结果
        :type Value: str
        :param _AsyncTaskId: 异步任务ID，如果出现此值，需要携带此值轮询获取标注结果
注意：此字段可能返回 null，表示取不到有效值。
        :type AsyncTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Value = None
        self._AsyncTaskId = None
        self._RequestId = None

    @property
    def Value(self):
        """预测结果
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value

    @property
    def AsyncTaskId(self):
        """异步任务ID，如果出现此值，需要携带此值轮询获取标注结果
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AsyncTaskId

    @AsyncTaskId.setter
    def AsyncTaskId(self, AsyncTaskId):
        self._AsyncTaskId = AsyncTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Value = params.get("Value")
        self._AsyncTaskId = params.get("AsyncTaskId")
        self._RequestId = params.get("RequestId")


class DescribeAvailableNodeStatisticRequest(AbstractModel):
    """DescribeAvailableNodeStatistic请求参数结构体

    """


class DescribeAvailableNodeStatisticResponse(AbstractModel):
    """DescribeAvailableNodeStatistic返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AvailableNodeStatisticList: 统计列表
        :type AvailableNodeStatisticList: list of AvailableNodeStatistic
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AvailableNodeStatisticList = None
        self._RequestId = None

    @property
    def AvailableNodeStatisticList(self):
        """统计列表
        :rtype: list of AvailableNodeStatistic
        """
        return self._AvailableNodeStatisticList

    @AvailableNodeStatisticList.setter
    def AvailableNodeStatisticList(self, AvailableNodeStatisticList):
        self._AvailableNodeStatisticList = AvailableNodeStatisticList

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("AvailableNodeStatisticList") is not None:
            self._AvailableNodeStatisticList = []
            for item in params.get("AvailableNodeStatisticList"):
                obj = AvailableNodeStatistic()
                obj._deserialize(item)
                self._AvailableNodeStatisticList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeAvailableSWInstancesRequest(AbstractModel):
    """DescribeAvailableSWInstances请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组ID
        :type ResourceGroupId: str
        :param _ChargeType: 节点计费类型，可选值为PREPAID和POSTPAID_BY_HOUR，默认值为PREPAID
        :type ChargeType: str
        :param _Marker: 分页的Marker
        :type Marker: str
        :param _Filters: 过滤条件
        :type Filters: list of Filter
        :param _TagFilters: 标签过滤条件
        :type TagFilters: list of TagFilter
        """
        self._ResourceGroupId = None
        self._ChargeType = None
        self._Marker = None
        self._Filters = None
        self._TagFilters = None

    @property
    def ResourceGroupId(self):
        """资源组ID
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ChargeType(self):
        """节点计费类型，可选值为PREPAID和POSTPAID_BY_HOUR，默认值为PREPAID
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def Marker(self):
        """分页的Marker
        :rtype: str
        """
        return self._Marker

    @Marker.setter
    def Marker(self, Marker):
        self._Marker = Marker

    @property
    def Filters(self):
        """过滤条件
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签过滤条件
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ChargeType = params.get("ChargeType")
        self._Marker = params.get("Marker")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeAvailableSWInstancesResponse(AbstractModel):
    """DescribeAvailableSWInstances返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Instances: CVM实例与TI配置项信息
        :type Instances: list of CVMInstanceWithSpec
        :param _Marker: 下一页分页的Marker
        :type Marker: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Instances = None
        self._Marker = None
        self._RequestId = None

    @property
    def Instances(self):
        """CVM实例与TI配置项信息
        :rtype: list of CVMInstanceWithSpec
        """
        return self._Instances

    @Instances.setter
    def Instances(self, Instances):
        self._Instances = Instances

    @property
    def Marker(self):
        """下一页分页的Marker
        :rtype: str
        """
        return self._Marker

    @Marker.setter
    def Marker(self, Marker):
        self._Marker = Marker

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Instances") is not None:
            self._Instances = []
            for item in params.get("Instances"):
                obj = CVMInstanceWithSpec()
                obj._deserialize(item)
                self._Instances.append(obj)
        self._Marker = params.get("Marker")
        self._RequestId = params.get("RequestId")


class DescribeBadcasePreviewStatusRequest(AbstractModel):
    """DescribeBadcasePreviewStatus请求参数结构体

    """


class DescribeBadcasePreviewStatusResponse(AbstractModel):
    """DescribeBadcasePreviewStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _PreviewStatus: 预览开关状态，有OFF(关闭), ON(开启)
注意：此字段可能返回 null，表示取不到有效值。
        :type PreviewStatus: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._PreviewStatus = None
        self._RequestId = None

    @property
    def PreviewStatus(self):
        """预览开关状态，有OFF(关闭), ON(开启)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PreviewStatus

    @PreviewStatus.setter
    def PreviewStatus(self, PreviewStatus):
        self._PreviewStatus = PreviewStatus

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._PreviewStatus = params.get("PreviewStatus")
        self._RequestId = params.get("RequestId")


class DescribeBatchTaskInstancesRequest(AbstractModel):
    """DescribeBatchTaskInstances请求参数结构体

    """

    def __init__(self):
        r"""
        :param _BatchTaskId: 批量预测任务id
        :type BatchTaskId: str
        """
        self._BatchTaskId = None

    @property
    def BatchTaskId(self):
        """批量预测任务id
        :rtype: str
        """
        return self._BatchTaskId

    @BatchTaskId.setter
    def BatchTaskId(self, BatchTaskId):
        self._BatchTaskId = BatchTaskId


    def _deserialize(self, params):
        self._BatchTaskId = params.get("BatchTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBatchTaskInstancesResponse(AbstractModel):
    """DescribeBatchTaskInstances返回参数结构体

    """

    def __init__(self):
        r"""
        :param _BatchInstances: 批量预测实例结果
注意：此字段可能返回 null，表示取不到有效值。
        :type BatchInstances: list of BatchTaskInstance
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._BatchInstances = None
        self._RequestId = None

    @property
    def BatchInstances(self):
        """批量预测实例结果
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of BatchTaskInstance
        """
        return self._BatchInstances

    @BatchInstances.setter
    def BatchInstances(self, BatchInstances):
        self._BatchInstances = BatchInstances

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("BatchInstances") is not None:
            self._BatchInstances = []
            for item in params.get("BatchInstances"):
                obj = BatchTaskInstance()
                obj._deserialize(item)
                self._BatchInstances.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBatchTaskRequest(AbstractModel):
    """DescribeBatchTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _BatchTaskId: 批量预测任务ID
        :type BatchTaskId: str
        """
        self._BatchTaskId = None

    @property
    def BatchTaskId(self):
        """批量预测任务ID
        :rtype: str
        """
        return self._BatchTaskId

    @BatchTaskId.setter
    def BatchTaskId(self, BatchTaskId):
        self._BatchTaskId = BatchTaskId


    def _deserialize(self, params):
        self._BatchTaskId = params.get("BatchTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBatchTaskResponse(AbstractModel):
    """DescribeBatchTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _BatchTaskDetail: 批量预测任务详情
注意：此字段可能返回 null，表示取不到有效值。
        :type BatchTaskDetail: :class:`tencentcloud.tione.v20211111.models.BatchTaskDetail`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._BatchTaskDetail = None
        self._RequestId = None

    @property
    def BatchTaskDetail(self):
        """批量预测任务详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.BatchTaskDetail`
        """
        return self._BatchTaskDetail

    @BatchTaskDetail.setter
    def BatchTaskDetail(self, BatchTaskDetail):
        self._BatchTaskDetail = BatchTaskDetail

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("BatchTaskDetail") is not None:
            self._BatchTaskDetail = BatchTaskDetail()
            self._BatchTaskDetail._deserialize(params.get("BatchTaskDetail"))
        self._RequestId = params.get("RequestId")


class DescribeBatchTasksRequest(AbstractModel):
    """DescribeBatchTasks请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤器

Name支持的取值范围：
BatchTaskId, BatchTaskName, Status, ModelVersionId

其中Status 的有效取值范围:
INIT, STARTING, RUNNING, FAILED, STOPPING, STOPPED, SUCCEED
        :type Filters: list of Filter
        :param _TagFilters: 标签过滤器
        :type TagFilters: list of TagFilter
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        :param _Limit: 限制数目，默认为20
        :type Limit: int
        :param _Order: 输出列表的排列顺序。取值范围：ASC（升序排列）/ DESC（降序排列），默认为DESC
        :type Order: str
        :param _OrderField: 排序字段。当前仅支持 "CreateTime"。
不传此字段则按照DB默认排序结果返回
        :type OrderField: str
        """
        self._Filters = None
        self._TagFilters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._OrderField = None

    @property
    def Filters(self):
        """过滤器

Name支持的取值范围：
BatchTaskId, BatchTaskName, Status, ModelVersionId

其中Status 的有效取值范围:
INIT, STARTING, RUNNING, FAILED, STOPPING, STOPPED, SUCCEED
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签过滤器
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """限制数目，默认为20
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """输出列表的排列顺序。取值范围：ASC（升序排列）/ DESC（降序排列），默认为DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """排序字段。当前仅支持 "CreateTime"。
不传此字段则按照DB默认排序结果返回
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBatchTasksResponse(AbstractModel):
    """DescribeBatchTasks返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 批量预测任务总数
        :type TotalCount: int
        :param _BatchTaskSet: 批量预测任务列表
注意：此字段可能返回 null，表示取不到有效值。
        :type BatchTaskSet: list of BatchTaskSetItem
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._BatchTaskSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """批量预测任务总数
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def BatchTaskSet(self):
        """批量预测任务列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of BatchTaskSetItem
        """
        return self._BatchTaskSet

    @BatchTaskSet.setter
    def BatchTaskSet(self, BatchTaskSet):
        self._BatchTaskSet = BatchTaskSet

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("BatchTaskSet") is not None:
            self._BatchTaskSet = []
            for item in params.get("BatchTaskSet"):
                obj = BatchTaskSetItem()
                obj._deserialize(item)
                self._BatchTaskSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBillingResourceGroupRequest(AbstractModel):
    """DescribeBillingResourceGroup请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组id, 取值为创建资源组接口(CreateBillingResourceGroup)响应中的ResourceGroupId
        :type ResourceGroupId: str
        :param _Filters: 过滤条件
注意: 
1. Filter.Name 只支持以下枚举值:
    InstanceId (资源组节点id)
    InstanceStatus (资源组节点状态)
2. Filter.Values: 长度为1且Filter.Fuzzy=true时，支持模糊查询; 不为1时，精确查询
3. 每次请求的Filters的上限为10，Filter.Values的上限为100
        :type Filters: list of Filter
        :param _Offset: 分页查询起始位置，如：Limit为10，第一页Offset为0，第二页Offset为10....即每页左边为闭区间; 默认0
        :type Offset: int
        :param _Limit: 分页查询每页大小，默认20
        :type Limit: int
        :param _Order: 排序方向; 枚举值: ASC | DESC；默认DESC
        :type Order: str
        :param _OrderField: 排序字段; 枚举值: CreateTime (创建时间) ｜ ExpireTime (到期时间)；默认CreateTime
        :type OrderField: str
        """
        self._ResourceGroupId = None
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._OrderField = None

    @property
    def ResourceGroupId(self):
        """资源组id, 取值为创建资源组接口(CreateBillingResourceGroup)响应中的ResourceGroupId
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def Filters(self):
        """过滤条件
注意: 
1. Filter.Name 只支持以下枚举值:
    InstanceId (资源组节点id)
    InstanceStatus (资源组节点状态)
2. Filter.Values: 长度为1且Filter.Fuzzy=true时，支持模糊查询; 不为1时，精确查询
3. 每次请求的Filters的上限为10，Filter.Values的上限为100
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """分页查询起始位置，如：Limit为10，第一页Offset为0，第二页Offset为10....即每页左边为闭区间; 默认0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """分页查询每页大小，默认20
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """排序方向; 枚举值: ASC | DESC；默认DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """排序字段; 枚举值: CreateTime (创建时间) ｜ ExpireTime (到期时间)；默认CreateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBillingResourceGroupResponse(AbstractModel):
    """DescribeBillingResourceGroup返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 资源组节点总数； 注意接口是分页拉取的，total是指资源组节点总数，不是本次返回中InstanceSet数组的大小
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _InstanceSet: 资源组节点信息
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceSet: list of Instance
        :param _ResourceGroupSWType: 资源组纳管类型
        :type ResourceGroupSWType: str
        :param _GpuPackageEnabled: 是否限制GPU按比例申请资源
        :type GpuPackageEnabled: bool
        :param _IsBareMetalResourceGroup: 是否为裸金属资源组
注意：此字段可能返回 null，表示取不到有效值。
        :type IsBareMetalResourceGroup: bool
        :param _VirtualGpuSet: GPU各卡型是否支持虚拟化
注意：此字段可能返回 null，表示取不到有效值。
        :type VirtualGpuSet: list of VirtualGpu
        :param _ResourceGroupId: 资源组id
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _ResourceGroupName: 资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupName: str
        :param _FreeInstance: 可用节点个数(运行中的节点）
注意：此字段可能返回 null，表示取不到有效值。
        :type FreeInstance: int
        :param _UsedResource: 资源组已用的资源
注意：此字段可能返回 null，表示取不到有效值。
        :type UsedResource: :class:`tencentcloud.tione.v20211111.models.GroupResource`
        :param _TotalResource: 资源组总资源
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalResource: :class:`tencentcloud.tione.v20211111.models.GroupResource`
        :param _TagSet: 标签列表
注意：此字段可能返回 null，表示取不到有效值。
        :type TagSet: list of Tag
        :param _IsRdma: 是否为rdma资源组
注意：此字段可能返回 null，表示取不到有效值。
        :type IsRdma: bool
        :param _ScheduleStrategy: 资源组调度策略
注意：此字段可能返回 null，表示取不到有效值。
        :type ScheduleStrategy: str
        :param _GpuTypeResource: 按GPU卡型号聚合的GPU用量等信息
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuTypeResource: list of GpuTypeResource
        :param _AvailableResource: 资源组可用资源
注意：此字段可能返回 null，表示取不到有效值。
        :type AvailableResource: :class:`tencentcloud.tione.v20211111.models.GroupResource`
        :param _AppId: AppId
注意：此字段可能返回 null，表示取不到有效值。
        :type AppId: int
        :param _EnableModels: 更多配置开启可用模块
注意：此字段可能返回 null，表示取不到有效值。
        :type EnableModels: list of str
        :param _SpecTemps: 规格模版
注意：此字段可能返回 null，表示取不到有效值。
        :type SpecTemps: list of SpecTemp
        :param _PresetResourceSwitch: 预设资源开关，枚举值：CLOSE,GPU,TEMPLATE
注意：此字段可能返回 null，表示取不到有效值。
        :type PresetResourceSwitch: str
        :param _IsCanModifyPreset: 是否可修改预设资源
注意：此字段可能返回 null，表示取不到有效值。
        :type IsCanModifyPreset: bool
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._InstanceSet = None
        self._ResourceGroupSWType = None
        self._GpuPackageEnabled = None
        self._IsBareMetalResourceGroup = None
        self._VirtualGpuSet = None
        self._ResourceGroupId = None
        self._ResourceGroupName = None
        self._FreeInstance = None
        self._UsedResource = None
        self._TotalResource = None
        self._TagSet = None
        self._IsRdma = None
        self._ScheduleStrategy = None
        self._GpuTypeResource = None
        self._AvailableResource = None
        self._AppId = None
        self._EnableModels = None
        self._SpecTemps = None
        self._PresetResourceSwitch = None
        self._IsCanModifyPreset = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """资源组节点总数； 注意接口是分页拉取的，total是指资源组节点总数，不是本次返回中InstanceSet数组的大小
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def InstanceSet(self):
        """资源组节点信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Instance
        """
        return self._InstanceSet

    @InstanceSet.setter
    def InstanceSet(self, InstanceSet):
        self._InstanceSet = InstanceSet

    @property
    def ResourceGroupSWType(self):
        """资源组纳管类型
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType

    @property
    def GpuPackageEnabled(self):
        """是否限制GPU按比例申请资源
        :rtype: bool
        """
        return self._GpuPackageEnabled

    @GpuPackageEnabled.setter
    def GpuPackageEnabled(self, GpuPackageEnabled):
        self._GpuPackageEnabled = GpuPackageEnabled

    @property
    def IsBareMetalResourceGroup(self):
        """是否为裸金属资源组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsBareMetalResourceGroup

    @IsBareMetalResourceGroup.setter
    def IsBareMetalResourceGroup(self, IsBareMetalResourceGroup):
        self._IsBareMetalResourceGroup = IsBareMetalResourceGroup

    @property
    def VirtualGpuSet(self):
        """GPU各卡型是否支持虚拟化
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of VirtualGpu
        """
        return self._VirtualGpuSet

    @VirtualGpuSet.setter
    def VirtualGpuSet(self, VirtualGpuSet):
        self._VirtualGpuSet = VirtualGpuSet

    @property
    def ResourceGroupId(self):
        """资源组id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceGroupName(self):
        """资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def FreeInstance(self):
        """可用节点个数(运行中的节点）
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._FreeInstance

    @FreeInstance.setter
    def FreeInstance(self, FreeInstance):
        self._FreeInstance = FreeInstance

    @property
    def UsedResource(self):
        """资源组已用的资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.GroupResource`
        """
        return self._UsedResource

    @UsedResource.setter
    def UsedResource(self, UsedResource):
        self._UsedResource = UsedResource

    @property
    def TotalResource(self):
        """资源组总资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.GroupResource`
        """
        return self._TotalResource

    @TotalResource.setter
    def TotalResource(self, TotalResource):
        self._TotalResource = TotalResource

    @property
    def TagSet(self):
        """标签列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._TagSet

    @TagSet.setter
    def TagSet(self, TagSet):
        self._TagSet = TagSet

    @property
    def IsRdma(self):
        """是否为rdma资源组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsRdma

    @IsRdma.setter
    def IsRdma(self, IsRdma):
        self._IsRdma = IsRdma

    @property
    def ScheduleStrategy(self):
        """资源组调度策略
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ScheduleStrategy

    @ScheduleStrategy.setter
    def ScheduleStrategy(self, ScheduleStrategy):
        self._ScheduleStrategy = ScheduleStrategy

    @property
    def GpuTypeResource(self):
        """按GPU卡型号聚合的GPU用量等信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of GpuTypeResource
        """
        return self._GpuTypeResource

    @GpuTypeResource.setter
    def GpuTypeResource(self, GpuTypeResource):
        self._GpuTypeResource = GpuTypeResource

    @property
    def AvailableResource(self):
        """资源组可用资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.GroupResource`
        """
        return self._AvailableResource

    @AvailableResource.setter
    def AvailableResource(self, AvailableResource):
        self._AvailableResource = AvailableResource

    @property
    def AppId(self):
        """AppId
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId

    @property
    def EnableModels(self):
        """更多配置开启可用模块
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._EnableModels

    @EnableModels.setter
    def EnableModels(self, EnableModels):
        self._EnableModels = EnableModels

    @property
    def SpecTemps(self):
        """规格模版
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of SpecTemp
        """
        return self._SpecTemps

    @SpecTemps.setter
    def SpecTemps(self, SpecTemps):
        self._SpecTemps = SpecTemps

    @property
    def PresetResourceSwitch(self):
        """预设资源开关，枚举值：CLOSE,GPU,TEMPLATE
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PresetResourceSwitch

    @PresetResourceSwitch.setter
    def PresetResourceSwitch(self, PresetResourceSwitch):
        self._PresetResourceSwitch = PresetResourceSwitch

    @property
    def IsCanModifyPreset(self):
        """是否可修改预设资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsCanModifyPreset

    @IsCanModifyPreset.setter
    def IsCanModifyPreset(self, IsCanModifyPreset):
        self._IsCanModifyPreset = IsCanModifyPreset

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("InstanceSet") is not None:
            self._InstanceSet = []
            for item in params.get("InstanceSet"):
                obj = Instance()
                obj._deserialize(item)
                self._InstanceSet.append(obj)
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        self._GpuPackageEnabled = params.get("GpuPackageEnabled")
        self._IsBareMetalResourceGroup = params.get("IsBareMetalResourceGroup")
        if params.get("VirtualGpuSet") is not None:
            self._VirtualGpuSet = []
            for item in params.get("VirtualGpuSet"):
                obj = VirtualGpu()
                obj._deserialize(item)
                self._VirtualGpuSet.append(obj)
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._FreeInstance = params.get("FreeInstance")
        if params.get("UsedResource") is not None:
            self._UsedResource = GroupResource()
            self._UsedResource._deserialize(params.get("UsedResource"))
        if params.get("TotalResource") is not None:
            self._TotalResource = GroupResource()
            self._TotalResource._deserialize(params.get("TotalResource"))
        if params.get("TagSet") is not None:
            self._TagSet = []
            for item in params.get("TagSet"):
                obj = Tag()
                obj._deserialize(item)
                self._TagSet.append(obj)
        self._IsRdma = params.get("IsRdma")
        self._ScheduleStrategy = params.get("ScheduleStrategy")
        if params.get("GpuTypeResource") is not None:
            self._GpuTypeResource = []
            for item in params.get("GpuTypeResource"):
                obj = GpuTypeResource()
                obj._deserialize(item)
                self._GpuTypeResource.append(obj)
        if params.get("AvailableResource") is not None:
            self._AvailableResource = GroupResource()
            self._AvailableResource._deserialize(params.get("AvailableResource"))
        self._AppId = params.get("AppId")
        self._EnableModels = params.get("EnableModels")
        if params.get("SpecTemps") is not None:
            self._SpecTemps = []
            for item in params.get("SpecTemps"):
                obj = SpecTemp()
                obj._deserialize(item)
                self._SpecTemps.append(obj)
        self._PresetResourceSwitch = params.get("PresetResourceSwitch")
        self._IsCanModifyPreset = params.get("IsCanModifyPreset")
        self._RequestId = params.get("RequestId")


class DescribeBillingResourceGroupRunningJobsRequest(AbstractModel):
    """DescribeBillingResourceGroupRunningJobs请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组id
        :type ResourceGroupId: str
        :param _Filters: 过滤条件。ResourceInstanceId: 资源组节点ID，TaskType: 任务类型，TaskId: 任务 ID，TaskName: 任务名称，JobStatus: 任务状态
        :type Filters: list of Filter
        """
        self._ResourceGroupId = None
        self._Filters = None

    @property
    def ResourceGroupId(self):
        """资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def Filters(self):
        """过滤条件。ResourceInstanceId: 资源组节点ID，TaskType: 任务类型，TaskId: 任务 ID，TaskName: 任务名称，JobStatus: 任务状态
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBillingResourceGroupRunningJobsResponse(AbstractModel):
    """DescribeBillingResourceGroupRunningJobs返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupRunningJobInfos: 资源组运行中的任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupRunningJobInfos: list of ResourceGroupRunningJobInfo
        :param _ResourceGroupJobInfos: 资源组中调度的任务信息
        :type ResourceGroupJobInfos: list of ResourceGroupJobInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ResourceGroupRunningJobInfos = None
        self._ResourceGroupJobInfos = None
        self._RequestId = None

    @property
    def ResourceGroupRunningJobInfos(self):
        """资源组运行中的任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ResourceGroupRunningJobInfo
        """
        return self._ResourceGroupRunningJobInfos

    @ResourceGroupRunningJobInfos.setter
    def ResourceGroupRunningJobInfos(self, ResourceGroupRunningJobInfos):
        self._ResourceGroupRunningJobInfos = ResourceGroupRunningJobInfos

    @property
    def ResourceGroupJobInfos(self):
        """资源组中调度的任务信息
        :rtype: list of ResourceGroupJobInfo
        """
        return self._ResourceGroupJobInfos

    @ResourceGroupJobInfos.setter
    def ResourceGroupJobInfos(self, ResourceGroupJobInfos):
        self._ResourceGroupJobInfos = ResourceGroupJobInfos

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ResourceGroupRunningJobInfos") is not None:
            self._ResourceGroupRunningJobInfos = []
            for item in params.get("ResourceGroupRunningJobInfos"):
                obj = ResourceGroupRunningJobInfo()
                obj._deserialize(item)
                self._ResourceGroupRunningJobInfos.append(obj)
        if params.get("ResourceGroupJobInfos") is not None:
            self._ResourceGroupJobInfos = []
            for item in params.get("ResourceGroupJobInfos"):
                obj = ResourceGroupJobInfo()
                obj._deserialize(item)
                self._ResourceGroupJobInfos.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBillingResourceGroupsRequest(AbstractModel):
    """DescribeBillingResourceGroups请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Type: 资源组类型;
枚举值:
空: 通用, TRAIN: 训练, INFERENCE: 推理
        :type Type: str
        :param _Filters: Filter.Name: 枚举值: ResourceGroupId (资源组id列表)                    ResourceGroupName (资源组名称列表)                    AvailableNodeCount（资源组中可用节点数量）Filter.Values: 长度为1且Filter.Fuzzy=true时，支持模糊查询; 不为1时，精确查询每次请求的Filters的上限为5，Filter.Values的上限为100
        :type Filters: list of Filter
        :param _TagFilters: 标签过滤
        :type TagFilters: list of TagFilter
        :param _Offset: 偏移量，默认为0；分页查询起始位置，如：Limit为100，第一页Offset为0，第二页OffSet为100....即每页左边为闭区间
        :type Offset: int
        :param _Limit: 分页查询每页大小，默认20
        :type Limit: int
        :param _SearchWord: 支持模糊查找资源组id和资源组名
        :type SearchWord: str
        :param _DontShowInstanceSet: 是否不展示节点列表; 
true: 不展示，false 展示；
默认为false
        :type DontShowInstanceSet: bool
        :param _OrderField: 排序字段
        :type OrderField: str
        """
        self._Type = None
        self._Filters = None
        self._TagFilters = None
        self._Offset = None
        self._Limit = None
        self._SearchWord = None
        self._DontShowInstanceSet = None
        self._OrderField = None

    @property
    def Type(self):
        """资源组类型;
枚举值:
空: 通用, TRAIN: 训练, INFERENCE: 推理
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Filters(self):
        """Filter.Name: 枚举值: ResourceGroupId (资源组id列表)                    ResourceGroupName (资源组名称列表)                    AvailableNodeCount（资源组中可用节点数量）Filter.Values: 长度为1且Filter.Fuzzy=true时，支持模糊查询; 不为1时，精确查询每次请求的Filters的上限为5，Filter.Values的上限为100
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签过滤
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def Offset(self):
        """偏移量，默认为0；分页查询起始位置，如：Limit为100，第一页Offset为0，第二页OffSet为100....即每页左边为闭区间
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """分页查询每页大小，默认20
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def SearchWord(self):
        """支持模糊查找资源组id和资源组名
        :rtype: str
        """
        return self._SearchWord

    @SearchWord.setter
    def SearchWord(self, SearchWord):
        self._SearchWord = SearchWord

    @property
    def DontShowInstanceSet(self):
        """是否不展示节点列表; 
true: 不展示，false 展示；
默认为false
        :rtype: bool
        """
        return self._DontShowInstanceSet

    @DontShowInstanceSet.setter
    def DontShowInstanceSet(self, DontShowInstanceSet):
        self._DontShowInstanceSet = DontShowInstanceSet

    @property
    def OrderField(self):
        """排序字段
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField


    def _deserialize(self, params):
        self._Type = params.get("Type")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._SearchWord = params.get("SearchWord")
        self._DontShowInstanceSet = params.get("DontShowInstanceSet")
        self._OrderField = params.get("OrderField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBillingResourceGroupsResponse(AbstractModel):
    """DescribeBillingResourceGroups返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 资源组总数； 注意接口是分页拉取的，total是指资源组总数，不是本次返回中ResourceGroupSet数组的大小
        :type TotalCount: int
        :param _ResourceGroupSet: 资源组详情
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupSet: list of ResourceGroup
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._ResourceGroupSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """资源组总数； 注意接口是分页拉取的，total是指资源组总数，不是本次返回中ResourceGroupSet数组的大小
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ResourceGroupSet(self):
        """资源组详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ResourceGroup
        """
        return self._ResourceGroupSet

    @ResourceGroupSet.setter
    def ResourceGroupSet(self, ResourceGroupSet):
        self._ResourceGroupSet = ResourceGroupSet

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("ResourceGroupSet") is not None:
            self._ResourceGroupSet = []
            for item in params.get("ResourceGroupSet"):
                obj = ResourceGroup()
                obj._deserialize(item)
                self._ResourceGroupSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBillingResourceInstanceGroupByGpuTypeRequest(AbstractModel):
    """DescribeBillingResourceInstanceGroupByGpuType请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组ID
        :type ResourceGroupId: str
        """
        self._ResourceGroupId = None

    @property
    def ResourceGroupId(self):
        """资源组ID
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBillingResourceInstanceGroupByGpuTypeResponse(AbstractModel):
    """DescribeBillingResourceInstanceGroupByGpuType返回参数结构体

    """

    def __init__(self):
        r"""
        :param _GroupedInstanceSet: 按GPU型号聚合的节点列表
注意：此字段可能返回 null，表示取不到有效值。
        :type GroupedInstanceSet: list of InstanceGroup
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._GroupedInstanceSet = None
        self._RequestId = None

    @property
    def GroupedInstanceSet(self):
        """按GPU型号聚合的节点列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of InstanceGroup
        """
        return self._GroupedInstanceSet

    @GroupedInstanceSet.setter
    def GroupedInstanceSet(self, GroupedInstanceSet):
        self._GroupedInstanceSet = GroupedInstanceSet

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("GroupedInstanceSet") is not None:
            self._GroupedInstanceSet = []
            for item in params.get("GroupedInstanceSet"):
                obj = InstanceGroup()
                obj._deserialize(item)
                self._GroupedInstanceSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBillingResourceInstanceRunningJobsBatchRequest(AbstractModel):
    """DescribeBillingResourceInstanceRunningJobsBatch请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组id
        :type ResourceGroupId: str
        :param _ResourceInstanceIds: 资源组节点id列表
        :type ResourceInstanceIds: list of str
        """
        self._ResourceGroupId = None
        self._ResourceInstanceIds = None

    @property
    def ResourceGroupId(self):
        """资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceInstanceIds(self):
        """资源组节点id列表
        :rtype: list of str
        """
        return self._ResourceInstanceIds

    @ResourceInstanceIds.setter
    def ResourceInstanceIds(self, ResourceInstanceIds):
        self._ResourceInstanceIds = ResourceInstanceIds


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ResourceInstanceIds = params.get("ResourceInstanceIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBillingResourceInstanceRunningJobsBatchResponse(AbstractModel):
    """DescribeBillingResourceInstanceRunningJobsBatch返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceInstanceIdWithRunningJobInfos: 节点运行中的任务列表
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceInstanceIdWithRunningJobInfos: list of ResourceInstanceIdWithRunningJobInfos
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ResourceInstanceIdWithRunningJobInfos = None
        self._RequestId = None

    @property
    def ResourceInstanceIdWithRunningJobInfos(self):
        """节点运行中的任务列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ResourceInstanceIdWithRunningJobInfos
        """
        return self._ResourceInstanceIdWithRunningJobInfos

    @ResourceInstanceIdWithRunningJobInfos.setter
    def ResourceInstanceIdWithRunningJobInfos(self, ResourceInstanceIdWithRunningJobInfos):
        self._ResourceInstanceIdWithRunningJobInfos = ResourceInstanceIdWithRunningJobInfos

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ResourceInstanceIdWithRunningJobInfos") is not None:
            self._ResourceInstanceIdWithRunningJobInfos = []
            for item in params.get("ResourceInstanceIdWithRunningJobInfos"):
                obj = ResourceInstanceIdWithRunningJobInfos()
                obj._deserialize(item)
                self._ResourceInstanceIdWithRunningJobInfos.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBillingResourceInstanceRunningJobsRequest(AbstractModel):
    """DescribeBillingResourceInstanceRunningJobs请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组id
        :type ResourceGroupId: str
        :param _ResourceInstanceId: 资源组节点id
        :type ResourceInstanceId: str
        """
        self._ResourceGroupId = None
        self._ResourceInstanceId = None

    @property
    def ResourceGroupId(self):
        """资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceInstanceId(self):
        """资源组节点id
        :rtype: str
        """
        return self._ResourceInstanceId

    @ResourceInstanceId.setter
    def ResourceInstanceId(self, ResourceInstanceId):
        self._ResourceInstanceId = ResourceInstanceId


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ResourceInstanceId = params.get("ResourceInstanceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBillingResourceInstanceRunningJobsResponse(AbstractModel):
    """DescribeBillingResourceInstanceRunningJobs返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceInstanceRunningJobInfos: 资源组节点运行中的任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceInstanceRunningJobInfos: list of ResourceInstanceRunningJobInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ResourceInstanceRunningJobInfos = None
        self._RequestId = None

    @property
    def ResourceInstanceRunningJobInfos(self):
        """资源组节点运行中的任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ResourceInstanceRunningJobInfo
        """
        return self._ResourceInstanceRunningJobInfos

    @ResourceInstanceRunningJobInfos.setter
    def ResourceInstanceRunningJobInfos(self, ResourceInstanceRunningJobInfos):
        self._ResourceInstanceRunningJobInfos = ResourceInstanceRunningJobInfos

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ResourceInstanceRunningJobInfos") is not None:
            self._ResourceInstanceRunningJobInfos = []
            for item in params.get("ResourceInstanceRunningJobInfos"):
                obj = ResourceInstanceRunningJobInfo()
                obj._deserialize(item)
                self._ResourceInstanceRunningJobInfos.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBillingResourceInstanceStatusStatisticRequest(AbstractModel):
    """DescribeBillingResourceInstanceStatusStatistic请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组id
        :type ResourceGroupId: str
        """
        self._ResourceGroupId = None

    @property
    def ResourceGroupId(self):
        """资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBillingResourceInstanceStatusStatisticResponse(AbstractModel):
    """DescribeBillingResourceInstanceStatusStatistic返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupName: 资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupName: str
        :param _InstanceStatusSet: 资源组节点状态信息统计
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceStatusSet: list of InstanceStatusStatistic
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ResourceGroupName = None
        self._InstanceStatusSet = None
        self._RequestId = None

    @property
    def ResourceGroupName(self):
        """资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def InstanceStatusSet(self):
        """资源组节点状态信息统计
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of InstanceStatusStatistic
        """
        return self._InstanceStatusSet

    @InstanceStatusSet.setter
    def InstanceStatusSet(self, InstanceStatusSet):
        self._InstanceStatusSet = InstanceStatusSet

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ResourceGroupName = params.get("ResourceGroupName")
        if params.get("InstanceStatusSet") is not None:
            self._InstanceStatusSet = []
            for item in params.get("InstanceStatusSet"):
                obj = InstanceStatusStatistic()
                obj._deserialize(item)
                self._InstanceStatusSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBillingResourceInstancesRequest(AbstractModel):
    """DescribeBillingResourceInstances请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组id, 取值为创建资源组接口(CreateBillingResourceGroup)响应中的ResourceGroupId
        :type ResourceGroupId: str
        :param _Filters: 过滤条件
注意: 
1. Filter.Name 只支持以下枚举值:
    InstanceId (资源组节点id)
    InstanceStatus (资源组节点状态)
2. Filter.Values: 长度为1且Filter.Fuzzy=true时，支持模糊查询; 不为1时，精确查询
3. 每次请求的Filters的上限为10，Filter.Values的上限为100
        :type Filters: list of Filter
        :param _Offset: 分页查询起始位置，如：Limit为10，第一页Offset为0，第二页Offset为10....即每页左边为闭区间; 默认0
        :type Offset: int
        :param _Limit: 分页查询每页大小，默认20
        :type Limit: int
        :param _Order: 排序方向; 枚举值: ASC | DESC；默认DESC
        :type Order: str
        :param _OrderField: 排序字段; 枚举值: CreateTime (创建时间) ｜ ExpireTime (到期时间)；默认CreateTime
        :type OrderField: str
        """
        self._ResourceGroupId = None
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._OrderField = None

    @property
    def ResourceGroupId(self):
        """资源组id, 取值为创建资源组接口(CreateBillingResourceGroup)响应中的ResourceGroupId
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def Filters(self):
        """过滤条件
注意: 
1. Filter.Name 只支持以下枚举值:
    InstanceId (资源组节点id)
    InstanceStatus (资源组节点状态)
2. Filter.Values: 长度为1且Filter.Fuzzy=true时，支持模糊查询; 不为1时，精确查询
3. 每次请求的Filters的上限为10，Filter.Values的上限为100
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """分页查询起始位置，如：Limit为10，第一页Offset为0，第二页Offset为10....即每页左边为闭区间; 默认0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """分页查询每页大小，默认20
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """排序方向; 枚举值: ASC | DESC；默认DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """排序字段; 枚举值: CreateTime (创建时间) ｜ ExpireTime (到期时间)；默认CreateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBillingResourceInstancesResponse(AbstractModel):
    """DescribeBillingResourceInstances返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 资源组节点总数； 注意接口是分页拉取的，total是指资源组节点总数，不是本次返回中InstanceSet数组的大小
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _InstanceSet: 资源组节点信息
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceSet: list of Instance
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._InstanceSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """资源组节点总数； 注意接口是分页拉取的，total是指资源组节点总数，不是本次返回中InstanceSet数组的大小
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def InstanceSet(self):
        """资源组节点信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Instance
        """
        return self._InstanceSet

    @InstanceSet.setter
    def InstanceSet(self, InstanceSet):
        self._InstanceSet = InstanceSet

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("InstanceSet") is not None:
            self._InstanceSet = []
            for item in params.get("InstanceSet"):
                obj = Instance()
                obj._deserialize(item)
                self._InstanceSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBillingSpecsPriceRequest(AbstractModel):
    """DescribeBillingSpecsPrice请求参数结构体

    """

    def __init__(self):
        r"""
        :param _SpecsParam: 询价参数，支持批量询价
        :type SpecsParam: list of SpecUnit
        """
        self._SpecsParam = None

    @property
    def SpecsParam(self):
        """询价参数，支持批量询价
        :rtype: list of SpecUnit
        """
        return self._SpecsParam

    @SpecsParam.setter
    def SpecsParam(self, SpecsParam):
        self._SpecsParam = SpecsParam


    def _deserialize(self, params):
        if params.get("SpecsParam") is not None:
            self._SpecsParam = []
            for item in params.get("SpecsParam"):
                obj = SpecUnit()
                obj._deserialize(item)
                self._SpecsParam.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBillingSpecsPriceResponse(AbstractModel):
    """DescribeBillingSpecsPrice返回参数结构体

    """

    def __init__(self):
        r"""
        :param _SpecsPrice: 计费项价格，支持批量返回
        :type SpecsPrice: list of SpecPrice
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._SpecsPrice = None
        self._RequestId = None

    @property
    def SpecsPrice(self):
        """计费项价格，支持批量返回
        :rtype: list of SpecPrice
        """
        return self._SpecsPrice

    @SpecsPrice.setter
    def SpecsPrice(self, SpecsPrice):
        self._SpecsPrice = SpecsPrice

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("SpecsPrice") is not None:
            self._SpecsPrice = []
            for item in params.get("SpecsPrice"):
                obj = SpecPrice()
                obj._deserialize(item)
                self._SpecsPrice.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBillingSpecsRequest(AbstractModel):
    """DescribeBillingSpecs请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ChargeType: 付费模式：POSTPAID_BY_HOUR按量计费、PREPAID包年包月
        :type ChargeType: str
        :param _TaskType: 枚举值：空、TRAIN、NOTEBOOK、INFERENCE或EMS
        :type TaskType: str
        :param _ResourceType: 资源类型：["", "CALC", "CPU", "GPU", "GPU-SW"]
        :type ResourceType: str
        :param _IsBareMetalResourceGroup: 是否为裸金属资源组
        :type IsBareMetalResourceGroup: bool
        :param _IsRdma: 是否为rdma资源组
        :type IsRdma: bool
        :param _IsSW: 是否为软件费计费项
        :type IsSW: bool
        :param _ResourceGroupId: 资源组ID
        :type ResourceGroupId: str
        """
        self._ChargeType = None
        self._TaskType = None
        self._ResourceType = None
        self._IsBareMetalResourceGroup = None
        self._IsRdma = None
        self._IsSW = None
        self._ResourceGroupId = None

    @property
    def ChargeType(self):
        """付费模式：POSTPAID_BY_HOUR按量计费、PREPAID包年包月
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def TaskType(self):
        """枚举值：空、TRAIN、NOTEBOOK、INFERENCE或EMS
        :rtype: str
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def ResourceType(self):
        """资源类型：["", "CALC", "CPU", "GPU", "GPU-SW"]
        :rtype: str
        """
        return self._ResourceType

    @ResourceType.setter
    def ResourceType(self, ResourceType):
        self._ResourceType = ResourceType

    @property
    def IsBareMetalResourceGroup(self):
        """是否为裸金属资源组
        :rtype: bool
        """
        return self._IsBareMetalResourceGroup

    @IsBareMetalResourceGroup.setter
    def IsBareMetalResourceGroup(self, IsBareMetalResourceGroup):
        self._IsBareMetalResourceGroup = IsBareMetalResourceGroup

    @property
    def IsRdma(self):
        """是否为rdma资源组
        :rtype: bool
        """
        return self._IsRdma

    @IsRdma.setter
    def IsRdma(self, IsRdma):
        self._IsRdma = IsRdma

    @property
    def IsSW(self):
        """是否为软件费计费项
        :rtype: bool
        """
        return self._IsSW

    @IsSW.setter
    def IsSW(self, IsSW):
        self._IsSW = IsSW

    @property
    def ResourceGroupId(self):
        """资源组ID
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId


    def _deserialize(self, params):
        self._ChargeType = params.get("ChargeType")
        self._TaskType = params.get("TaskType")
        self._ResourceType = params.get("ResourceType")
        self._IsBareMetalResourceGroup = params.get("IsBareMetalResourceGroup")
        self._IsRdma = params.get("IsRdma")
        self._IsSW = params.get("IsSW")
        self._ResourceGroupId = params.get("ResourceGroupId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBillingSpecsResponse(AbstractModel):
    """DescribeBillingSpecs返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Specs: 计费项列表
        :type Specs: list of Spec
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Specs = None
        self._RequestId = None

    @property
    def Specs(self):
        """计费项列表
        :rtype: list of Spec
        """
        return self._Specs

    @Specs.setter
    def Specs(self, Specs):
        self._Specs = Specs

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Specs") is not None:
            self._Specs = []
            for item in params.get("Specs"):
                obj = Spec()
                obj._deserialize(item)
                self._Specs.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeBillingUserListRequest(AbstractModel):
    """DescribeBillingUserList请求参数结构体

    """

    def __init__(self):
        r"""
        :param _UserType: 用户属性，比如WHITELIST、MIYING等。如果传空则不返回
        :type UserType: str
        """
        self._UserType = None

    @property
    def UserType(self):
        """用户属性，比如WHITELIST、MIYING等。如果传空则不返回
        :rtype: str
        """
        return self._UserType

    @UserType.setter
    def UserType(self, UserType):
        self._UserType = UserType


    def _deserialize(self, params):
        self._UserType = params.get("UserType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBillingUserListResponse(AbstractModel):
    """DescribeBillingUserList返回参数结构体

    """

    def __init__(self):
        r"""
        :param _UserType: 对应的用户属性
        :type UserType: str
        :param _UserList: 用户主uin数组
        :type UserList: list of str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._UserType = None
        self._UserList = None
        self._RequestId = None

    @property
    def UserType(self):
        """对应的用户属性
        :rtype: str
        """
        return self._UserType

    @UserType.setter
    def UserType(self, UserType):
        self._UserType = UserType

    @property
    def UserList(self):
        """用户主uin数组
        :rtype: list of str
        """
        return self._UserList

    @UserList.setter
    def UserList(self, UserList):
        self._UserList = UserList

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._UserType = params.get("UserType")
        self._UserList = params.get("UserList")
        self._RequestId = params.get("RequestId")


class DescribeBuildInImagesRequest(AbstractModel):
    """DescribeBuildInImages请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ImageFilters: 镜像过滤器
        :type ImageFilters: list of ImageFIlter
        """
        self._ImageFilters = None

    @property
    def ImageFilters(self):
        """镜像过滤器
        :rtype: list of ImageFIlter
        """
        return self._ImageFilters

    @ImageFilters.setter
    def ImageFilters(self, ImageFilters):
        self._ImageFilters = ImageFilters


    def _deserialize(self, params):
        if params.get("ImageFilters") is not None:
            self._ImageFilters = []
            for item in params.get("ImageFilters"):
                obj = ImageFIlter()
                obj._deserialize(item)
                self._ImageFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeBuildInImagesResponse(AbstractModel):
    """DescribeBuildInImages返回参数结构体

    """

    def __init__(self):
        r"""
        :param _BuildInImageInfos: 内置镜像详情列表
        :type BuildInImageInfos: list of ImageInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._BuildInImageInfos = None
        self._RequestId = None

    @property
    def BuildInImageInfos(self):
        """内置镜像详情列表
        :rtype: list of ImageInfo
        """
        return self._BuildInImageInfos

    @BuildInImageInfos.setter
    def BuildInImageInfos(self, BuildInImageInfos):
        self._BuildInImageInfos = BuildInImageInfos

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("BuildInImageInfos") is not None:
            self._BuildInImageInfos = []
            for item in params.get("BuildInImageInfos"):
                obj = ImageInfo()
                obj._deserialize(item)
                self._BuildInImageInfos.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeCVMSemiPrecheckRequest(AbstractModel):
    """DescribeCVMSemiPrecheck请求参数结构体

    """

    def __init__(self):
        r"""
        :param _CVMInstanceIds: 需要检查的CVM节点ID
        :type CVMInstanceIds: list of str
        :param _ResourceGroupId: 资源组ID
        :type ResourceGroupId: str
        :param _ChargeType: 计费类型，当前无用
        :type ChargeType: str
        """
        self._CVMInstanceIds = None
        self._ResourceGroupId = None
        self._ChargeType = None

    @property
    def CVMInstanceIds(self):
        """需要检查的CVM节点ID
        :rtype: list of str
        """
        return self._CVMInstanceIds

    @CVMInstanceIds.setter
    def CVMInstanceIds(self, CVMInstanceIds):
        self._CVMInstanceIds = CVMInstanceIds

    @property
    def ResourceGroupId(self):
        """资源组ID
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ChargeType(self):
        """计费类型，当前无用
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType


    def _deserialize(self, params):
        self._CVMInstanceIds = params.get("CVMInstanceIds")
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ChargeType = params.get("ChargeType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeCVMSemiPrecheckResponse(AbstractModel):
    """DescribeCVMSemiPrecheck返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Result: 预检结果
        :type Result: list of PrecheckResult
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Result = None
        self._RequestId = None

    @property
    def Result(self):
        """预检结果
        :rtype: list of PrecheckResult
        """
        return self._Result

    @Result.setter
    def Result(self, Result):
        self._Result = Result

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Result") is not None:
            self._Result = []
            for item in params.get("Result"):
                obj = PrecheckResult()
                obj._deserialize(item)
                self._Result.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeChatServiceStatusRequest(AbstractModel):
    """DescribeChatServiceStatus请求参数结构体

    """


class DescribeChatServiceStatusResponse(AbstractModel):
    """DescribeChatServiceStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Status: 是否可用
注意：此字段可能返回 null，表示取不到有效值。
        :type Status: bool
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Status = None
        self._RequestId = None

    @property
    def Status(self):
        """是否可用
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Status = params.get("Status")
        self._RequestId = params.get("RequestId")


class DescribeCheckpointListRequest(AbstractModel):
    """DescribeCheckpointList请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 训练任务ID
        :type TaskId: str
        :param _RequireLightEvalServiceInfo: 是否需要查询轻量体验服务信息
        :type RequireLightEvalServiceInfo: bool
        :param _RequireObjectiveEvalTaskInfo: 是否需要查询客观评测任务信息
        :type RequireObjectiveEvalTaskInfo: bool
        """
        self._TaskId = None
        self._RequireLightEvalServiceInfo = None
        self._RequireObjectiveEvalTaskInfo = None

    @property
    def TaskId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequireLightEvalServiceInfo(self):
        """是否需要查询轻量体验服务信息
        :rtype: bool
        """
        return self._RequireLightEvalServiceInfo

    @RequireLightEvalServiceInfo.setter
    def RequireLightEvalServiceInfo(self, RequireLightEvalServiceInfo):
        self._RequireLightEvalServiceInfo = RequireLightEvalServiceInfo

    @property
    def RequireObjectiveEvalTaskInfo(self):
        """是否需要查询客观评测任务信息
        :rtype: bool
        """
        return self._RequireObjectiveEvalTaskInfo

    @RequireObjectiveEvalTaskInfo.setter
    def RequireObjectiveEvalTaskInfo(self, RequireObjectiveEvalTaskInfo):
        self._RequireObjectiveEvalTaskInfo = RequireObjectiveEvalTaskInfo


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequireLightEvalServiceInfo = params.get("RequireLightEvalServiceInfo")
        self._RequireObjectiveEvalTaskInfo = params.get("RequireObjectiveEvalTaskInfo")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeCheckpointListResponse(AbstractModel):
    """DescribeCheckpointList返回参数结构体

    """

    def __init__(self):
        r"""
        :param _GetCheckpointListPluginVersion: 获得该 Checkpoint 列表的插件版本
注意：此字段可能返回 null，表示取不到有效值。
        :type GetCheckpointListPluginVersion: str
        :param _CheckpointInfos: 任务对应的 Checkpoint 列表
注意：此字段可能返回 null，表示取不到有效值。
        :type CheckpointInfos: list of CheckpointInfo
        :param _LightEvalServiceInfos: 任务对应的轻量体验服务列表，目前只会有一个
注意：此字段可能返回 null，表示取不到有效值。
        :type LightEvalServiceInfos: list of LightEvalServiceInfo
        :param _ObjectiveEvalTaskInfos: 任务对应的客观评测任务列表，目前只会有一个
注意：此字段可能返回 null，表示取不到有效值。
        :type ObjectiveEvalTaskInfos: list of ObjectiveEvalTaskInfo
        :param _ExecuteError: 任务对应的Checkpoint代码的执行错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ExecuteError: :class:`tencentcloud.tione.v20211111.models.ExecuteError`
        :param _LastLightEvalServiceResourceInfo: 用于前端回填的资源信息
注意：此字段可能返回 null，表示取不到有效值。
        :type LastLightEvalServiceResourceInfo: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._GetCheckpointListPluginVersion = None
        self._CheckpointInfos = None
        self._LightEvalServiceInfos = None
        self._ObjectiveEvalTaskInfos = None
        self._ExecuteError = None
        self._LastLightEvalServiceResourceInfo = None
        self._RequestId = None

    @property
    def GetCheckpointListPluginVersion(self):
        """获得该 Checkpoint 列表的插件版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GetCheckpointListPluginVersion

    @GetCheckpointListPluginVersion.setter
    def GetCheckpointListPluginVersion(self, GetCheckpointListPluginVersion):
        self._GetCheckpointListPluginVersion = GetCheckpointListPluginVersion

    @property
    def CheckpointInfos(self):
        """任务对应的 Checkpoint 列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of CheckpointInfo
        """
        return self._CheckpointInfos

    @CheckpointInfos.setter
    def CheckpointInfos(self, CheckpointInfos):
        self._CheckpointInfos = CheckpointInfos

    @property
    def LightEvalServiceInfos(self):
        """任务对应的轻量体验服务列表，目前只会有一个
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of LightEvalServiceInfo
        """
        return self._LightEvalServiceInfos

    @LightEvalServiceInfos.setter
    def LightEvalServiceInfos(self, LightEvalServiceInfos):
        self._LightEvalServiceInfos = LightEvalServiceInfos

    @property
    def ObjectiveEvalTaskInfos(self):
        """任务对应的客观评测任务列表，目前只会有一个
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ObjectiveEvalTaskInfo
        """
        return self._ObjectiveEvalTaskInfos

    @ObjectiveEvalTaskInfos.setter
    def ObjectiveEvalTaskInfos(self, ObjectiveEvalTaskInfos):
        self._ObjectiveEvalTaskInfos = ObjectiveEvalTaskInfos

    @property
    def ExecuteError(self):
        """任务对应的Checkpoint代码的执行错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ExecuteError`
        """
        return self._ExecuteError

    @ExecuteError.setter
    def ExecuteError(self, ExecuteError):
        self._ExecuteError = ExecuteError

    @property
    def LastLightEvalServiceResourceInfo(self):
        """用于前端回填的资源信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        """
        return self._LastLightEvalServiceResourceInfo

    @LastLightEvalServiceResourceInfo.setter
    def LastLightEvalServiceResourceInfo(self, LastLightEvalServiceResourceInfo):
        self._LastLightEvalServiceResourceInfo = LastLightEvalServiceResourceInfo

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._GetCheckpointListPluginVersion = params.get("GetCheckpointListPluginVersion")
        if params.get("CheckpointInfos") is not None:
            self._CheckpointInfos = []
            for item in params.get("CheckpointInfos"):
                obj = CheckpointInfo()
                obj._deserialize(item)
                self._CheckpointInfos.append(obj)
        if params.get("LightEvalServiceInfos") is not None:
            self._LightEvalServiceInfos = []
            for item in params.get("LightEvalServiceInfos"):
                obj = LightEvalServiceInfo()
                obj._deserialize(item)
                self._LightEvalServiceInfos.append(obj)
        if params.get("ObjectiveEvalTaskInfos") is not None:
            self._ObjectiveEvalTaskInfos = []
            for item in params.get("ObjectiveEvalTaskInfos"):
                obj = ObjectiveEvalTaskInfo()
                obj._deserialize(item)
                self._ObjectiveEvalTaskInfos.append(obj)
        if params.get("ExecuteError") is not None:
            self._ExecuteError = ExecuteError()
            self._ExecuteError._deserialize(params.get("ExecuteError"))
        if params.get("LastLightEvalServiceResourceInfo") is not None:
            self._LastLightEvalServiceResourceInfo = ResourceConfigInfo()
            self._LastLightEvalServiceResourceInfo._deserialize(params.get("LastLightEvalServiceResourceInfo"))
        self._RequestId = params.get("RequestId")


class DescribeCodeRepoRequest(AbstractModel):
    """DescribeCodeRepo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: id值
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """id值
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeCodeRepoResponse(AbstractModel):
    """DescribeCodeRepo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _CodeRepoDetail: 详情信息
        :type CodeRepoDetail: :class:`tencentcloud.tione.v20211111.models.CodeRepoDetail`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._CodeRepoDetail = None
        self._RequestId = None

    @property
    def CodeRepoDetail(self):
        """详情信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.CodeRepoDetail`
        """
        return self._CodeRepoDetail

    @CodeRepoDetail.setter
    def CodeRepoDetail(self, CodeRepoDetail):
        self._CodeRepoDetail = CodeRepoDetail

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("CodeRepoDetail") is not None:
            self._CodeRepoDetail = CodeRepoDetail()
            self._CodeRepoDetail._deserialize(params.get("CodeRepoDetail"))
        self._RequestId = params.get("RequestId")


class DescribeCodeReposRequest(AbstractModel):
    """DescribeCodeRepos请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        :param _Limit: 每页返回的实例数，默认为10
        :type Limit: int
        :param _Order: 输出列表的排列顺序。取值范围：ASC：升序排列 DESC：降序排列。默认为DESC
        :type Order: str
        :param _OrderField: 根据哪个字段排序，如：CreateTime、UpdateTime，默认为UpdateTime
        :type OrderField: str
        :param _Filters: 过滤器，eg：[{ "Name": "Name", "Values": ["myCodeRepoName"] }]
        :type Filters: list of Filter
        :param _TagFilters: 标签过滤器，eg：[{ "TagKey": "TagKeyA", "TagValue": ["TagValueA"] }]	
        :type TagFilters: list of TagFilter
        """
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._OrderField = None
        self._Filters = None
        self._TagFilters = None

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """每页返回的实例数，默认为10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """输出列表的排列顺序。取值范围：ASC：升序排列 DESC：降序排列。默认为DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """根据哪个字段排序，如：CreateTime、UpdateTime，默认为UpdateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Filters(self):
        """过滤器，eg：[{ "Name": "Name", "Values": ["myCodeRepoName"] }]
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签过滤器，eg：[{ "TagKey": "TagKeyA", "TagValue": ["TagValueA"] }]	
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeCodeReposResponse(AbstractModel):
    """DescribeCodeRepos返回参数结构体

    """

    def __init__(self):
        r"""
        :param _CodeRepoSet: 详情信息
注意：此字段可能返回 null，表示取不到有效值。
        :type CodeRepoSet: list of CodeRepoDetail
        :param _TotalCount: total count
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._CodeRepoSet = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def CodeRepoSet(self):
        """详情信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of CodeRepoDetail
        """
        return self._CodeRepoSet

    @CodeRepoSet.setter
    def CodeRepoSet(self, CodeRepoSet):
        self._CodeRepoSet = CodeRepoSet

    @property
    def TotalCount(self):
        """total count
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("CodeRepoSet") is not None:
            self._CodeRepoSet = []
            for item in params.get("CodeRepoSet"):
                obj = CodeRepoDetail()
                obj._deserialize(item)
                self._CodeRepoSet.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeComparisonResultsRequest(AbstractModel):
    """DescribeComparisonResults请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ObjectiveEvaluationIds: 指定用户选了哪些客观评测任务
        :type ObjectiveEvaluationIds: list of str
        :param _SubjectiveEvaluationIds: 指定用户选了哪些主观评测任务
        :type SubjectiveEvaluationIds: list of str
        :param _EvaluationSuites: 指定客观评测选了哪些开源数据集
        :type EvaluationSuites: list of str
        :param _SubjectiveDatasets: 指定主观评测选了哪些评测集
        :type SubjectiveDatasets: list of SimpleCFSConfig
        :param _ModelsForObjevals: 指定客观评测选了哪些模型
        :type ModelsForObjevals: list of WhichModel
        :param _ModelsForSubevals: 指定主观评测选了哪些模型
        :type ModelsForSubevals: list of WhichModel
        :param _Reset: 是否重置
        :type Reset: bool
        """
        self._ObjectiveEvaluationIds = None
        self._SubjectiveEvaluationIds = None
        self._EvaluationSuites = None
        self._SubjectiveDatasets = None
        self._ModelsForObjevals = None
        self._ModelsForSubevals = None
        self._Reset = None

    @property
    def ObjectiveEvaluationIds(self):
        """指定用户选了哪些客观评测任务
        :rtype: list of str
        """
        return self._ObjectiveEvaluationIds

    @ObjectiveEvaluationIds.setter
    def ObjectiveEvaluationIds(self, ObjectiveEvaluationIds):
        self._ObjectiveEvaluationIds = ObjectiveEvaluationIds

    @property
    def SubjectiveEvaluationIds(self):
        """指定用户选了哪些主观评测任务
        :rtype: list of str
        """
        return self._SubjectiveEvaluationIds

    @SubjectiveEvaluationIds.setter
    def SubjectiveEvaluationIds(self, SubjectiveEvaluationIds):
        self._SubjectiveEvaluationIds = SubjectiveEvaluationIds

    @property
    def EvaluationSuites(self):
        """指定客观评测选了哪些开源数据集
        :rtype: list of str
        """
        return self._EvaluationSuites

    @EvaluationSuites.setter
    def EvaluationSuites(self, EvaluationSuites):
        self._EvaluationSuites = EvaluationSuites

    @property
    def SubjectiveDatasets(self):
        """指定主观评测选了哪些评测集
        :rtype: list of SimpleCFSConfig
        """
        return self._SubjectiveDatasets

    @SubjectiveDatasets.setter
    def SubjectiveDatasets(self, SubjectiveDatasets):
        self._SubjectiveDatasets = SubjectiveDatasets

    @property
    def ModelsForObjevals(self):
        """指定客观评测选了哪些模型
        :rtype: list of WhichModel
        """
        return self._ModelsForObjevals

    @ModelsForObjevals.setter
    def ModelsForObjevals(self, ModelsForObjevals):
        self._ModelsForObjevals = ModelsForObjevals

    @property
    def ModelsForSubevals(self):
        """指定主观评测选了哪些模型
        :rtype: list of WhichModel
        """
        return self._ModelsForSubevals

    @ModelsForSubevals.setter
    def ModelsForSubevals(self, ModelsForSubevals):
        self._ModelsForSubevals = ModelsForSubevals

    @property
    def Reset(self):
        """是否重置
        :rtype: bool
        """
        return self._Reset

    @Reset.setter
    def Reset(self, Reset):
        self._Reset = Reset


    def _deserialize(self, params):
        self._ObjectiveEvaluationIds = params.get("ObjectiveEvaluationIds")
        self._SubjectiveEvaluationIds = params.get("SubjectiveEvaluationIds")
        self._EvaluationSuites = params.get("EvaluationSuites")
        if params.get("SubjectiveDatasets") is not None:
            self._SubjectiveDatasets = []
            for item in params.get("SubjectiveDatasets"):
                obj = SimpleCFSConfig()
                obj._deserialize(item)
                self._SubjectiveDatasets.append(obj)
        if params.get("ModelsForObjevals") is not None:
            self._ModelsForObjevals = []
            for item in params.get("ModelsForObjevals"):
                obj = WhichModel()
                obj._deserialize(item)
                self._ModelsForObjevals.append(obj)
        if params.get("ModelsForSubevals") is not None:
            self._ModelsForSubevals = []
            for item in params.get("ModelsForSubevals"):
                obj = WhichModel()
                obj._deserialize(item)
                self._ModelsForSubevals.append(obj)
        self._Reset = params.get("Reset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeComparisonResultsResponse(AbstractModel):
    """DescribeComparisonResults返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ObjevalCompResults: 客观评测对比结果
        :type ObjevalCompResults: list of ObjevalCompResult
        :param _SubevalCompResults: 主观评测对比结果
        :type SubevalCompResults: list of SubevalCompResult
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ObjevalCompResults = None
        self._SubevalCompResults = None
        self._RequestId = None

    @property
    def ObjevalCompResults(self):
        """客观评测对比结果
        :rtype: list of ObjevalCompResult
        """
        return self._ObjevalCompResults

    @ObjevalCompResults.setter
    def ObjevalCompResults(self, ObjevalCompResults):
        self._ObjevalCompResults = ObjevalCompResults

    @property
    def SubevalCompResults(self):
        """主观评测对比结果
        :rtype: list of SubevalCompResult
        """
        return self._SubevalCompResults

    @SubevalCompResults.setter
    def SubevalCompResults(self, SubevalCompResults):
        self._SubevalCompResults = SubevalCompResults

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ObjevalCompResults") is not None:
            self._ObjevalCompResults = []
            for item in params.get("ObjevalCompResults"):
                obj = ObjevalCompResult()
                obj._deserialize(item)
                self._ObjevalCompResults.append(obj)
        if params.get("SubevalCompResults") is not None:
            self._SubevalCompResults = []
            for item in params.get("SubevalCompResults"):
                obj = SubevalCompResult()
                obj._deserialize(item)
                self._SubevalCompResults.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeComparisonsOutputsRequest(AbstractModel):
    """DescribeComparisonsOutputs请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ObjectiveEvaluationIds: 指定用户选了哪些客观评测任务
        :type ObjectiveEvaluationIds: list of str
        :param _SubjectiveEvaluationIds: 指定用户选了哪些主观评测任务
        :type SubjectiveEvaluationIds: list of str
        :param _EvaluationSuites: 指定客观评测选了哪些开源数据集
        :type EvaluationSuites: list of str
        :param _SubjectiveDatasets: 指定主观评测选了哪些评测集
        :type SubjectiveDatasets: list of SimpleCFSConfig
        :param _ModelsForObjevals: 指定客观评测选了哪些模型
        :type ModelsForObjevals: list of WhichModel
        :param _ModelsForSubevals: 指定主观评测选了哪些模型
        :type ModelsForSubevals: list of WhichModel
        """
        self._ObjectiveEvaluationIds = None
        self._SubjectiveEvaluationIds = None
        self._EvaluationSuites = None
        self._SubjectiveDatasets = None
        self._ModelsForObjevals = None
        self._ModelsForSubevals = None

    @property
    def ObjectiveEvaluationIds(self):
        """指定用户选了哪些客观评测任务
        :rtype: list of str
        """
        return self._ObjectiveEvaluationIds

    @ObjectiveEvaluationIds.setter
    def ObjectiveEvaluationIds(self, ObjectiveEvaluationIds):
        self._ObjectiveEvaluationIds = ObjectiveEvaluationIds

    @property
    def SubjectiveEvaluationIds(self):
        """指定用户选了哪些主观评测任务
        :rtype: list of str
        """
        return self._SubjectiveEvaluationIds

    @SubjectiveEvaluationIds.setter
    def SubjectiveEvaluationIds(self, SubjectiveEvaluationIds):
        self._SubjectiveEvaluationIds = SubjectiveEvaluationIds

    @property
    def EvaluationSuites(self):
        """指定客观评测选了哪些开源数据集
        :rtype: list of str
        """
        return self._EvaluationSuites

    @EvaluationSuites.setter
    def EvaluationSuites(self, EvaluationSuites):
        self._EvaluationSuites = EvaluationSuites

    @property
    def SubjectiveDatasets(self):
        """指定主观评测选了哪些评测集
        :rtype: list of SimpleCFSConfig
        """
        return self._SubjectiveDatasets

    @SubjectiveDatasets.setter
    def SubjectiveDatasets(self, SubjectiveDatasets):
        self._SubjectiveDatasets = SubjectiveDatasets

    @property
    def ModelsForObjevals(self):
        """指定客观评测选了哪些模型
        :rtype: list of WhichModel
        """
        return self._ModelsForObjevals

    @ModelsForObjevals.setter
    def ModelsForObjevals(self, ModelsForObjevals):
        self._ModelsForObjevals = ModelsForObjevals

    @property
    def ModelsForSubevals(self):
        """指定主观评测选了哪些模型
        :rtype: list of WhichModel
        """
        return self._ModelsForSubevals

    @ModelsForSubevals.setter
    def ModelsForSubevals(self, ModelsForSubevals):
        self._ModelsForSubevals = ModelsForSubevals


    def _deserialize(self, params):
        self._ObjectiveEvaluationIds = params.get("ObjectiveEvaluationIds")
        self._SubjectiveEvaluationIds = params.get("SubjectiveEvaluationIds")
        self._EvaluationSuites = params.get("EvaluationSuites")
        if params.get("SubjectiveDatasets") is not None:
            self._SubjectiveDatasets = []
            for item in params.get("SubjectiveDatasets"):
                obj = SimpleCFSConfig()
                obj._deserialize(item)
                self._SubjectiveDatasets.append(obj)
        if params.get("ModelsForObjevals") is not None:
            self._ModelsForObjevals = []
            for item in params.get("ModelsForObjevals"):
                obj = WhichModel()
                obj._deserialize(item)
                self._ModelsForObjevals.append(obj)
        if params.get("ModelsForSubevals") is not None:
            self._ModelsForSubevals = []
            for item in params.get("ModelsForSubevals"):
                obj = WhichModel()
                obj._deserialize(item)
                self._ModelsForSubevals.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeComparisonsOutputsResponse(AbstractModel):
    """DescribeComparisonsOutputs返回参数结构体

    """

    def __init__(self):
        r"""
        :param _DownloadURL: 下载链接
        :type DownloadURL: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._DownloadURL = None
        self._RequestId = None

    @property
    def DownloadURL(self):
        """下载链接
        :rtype: str
        """
        return self._DownloadURL

    @DownloadURL.setter
    def DownloadURL(self, DownloadURL):
        self._DownloadURL = DownloadURL

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DownloadURL = params.get("DownloadURL")
        self._RequestId = params.get("RequestId")


class DescribeContentByMD5Request(AbstractModel):
    """DescribeContentByMD5请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _MD5: 文件对象md5
        :type MD5: str
        """
        self._DatasetId = None
        self._MD5 = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def MD5(self):
        """文件对象md5
        :rtype: str
        """
        return self._MD5

    @MD5.setter
    def MD5(self, MD5):
        self._MD5 = MD5


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._MD5 = params.get("MD5")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeContentByMD5Response(AbstractModel):
    """DescribeContentByMD5返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Content: 文本内容
注意：此字段可能返回 null，表示取不到有效值。
        :type Content: list of str
        :param _ContentSummary: 文本内容摘要（前50个字符）
注意：此字段可能返回 null，表示取不到有效值。
        :type ContentSummary: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Content = None
        self._ContentSummary = None
        self._RequestId = None

    @property
    def Content(self):
        """文本内容
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def ContentSummary(self):
        """文本内容摘要（前50个字符）
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ContentSummary

    @ContentSummary.setter
    def ContentSummary(self, ContentSummary):
        self._ContentSummary = ContentSummary

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Content = params.get("Content")
        self._ContentSummary = params.get("ContentSummary")
        self._RequestId = params.get("RequestId")


class DescribeDataPipelineConfigRequest(AbstractModel):
    """DescribeDataPipelineConfig请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ConfigType: 需要获取的配置类型。可选项：
CONFIG_DATA_PIPELINE，获取pipeline配置
CONFIG_DATA_SCENE，获取通用算法任务配置
CONFIG_ALL，获取所有配置
默认为CONFIG_ALL
        :type ConfigType: str
        """
        self._ConfigType = None

    @property
    def ConfigType(self):
        """需要获取的配置类型。可选项：
CONFIG_DATA_PIPELINE，获取pipeline配置
CONFIG_DATA_SCENE，获取通用算法任务配置
CONFIG_ALL，获取所有配置
默认为CONFIG_ALL
        :rtype: str
        """
        return self._ConfigType

    @ConfigType.setter
    def ConfigType(self, ConfigType):
        self._ConfigType = ConfigType


    def _deserialize(self, params):
        self._ConfigType = params.get("ConfigType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDataPipelineConfigResponse(AbstractModel):
    """DescribeDataPipelineConfig返回参数结构体

    """

    def __init__(self):
        r"""
        :param _DataPipelineConfigs: 数据构建pipeline配置列表
注意：此字段可能返回 null，表示取不到有效值。
        :type DataPipelineConfigs: list of DataPipelineConfig
        :param _DataSceneNodes: 数据构建通用算法任务配置列表
注意：此字段可能返回 null，表示取不到有效值。
        :type DataSceneNodes: list of DataSceneNode
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._DataPipelineConfigs = None
        self._DataSceneNodes = None
        self._RequestId = None

    @property
    def DataPipelineConfigs(self):
        """数据构建pipeline配置列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataPipelineConfig
        """
        return self._DataPipelineConfigs

    @DataPipelineConfigs.setter
    def DataPipelineConfigs(self, DataPipelineConfigs):
        self._DataPipelineConfigs = DataPipelineConfigs

    @property
    def DataSceneNodes(self):
        """数据构建通用算法任务配置列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataSceneNode
        """
        return self._DataSceneNodes

    @DataSceneNodes.setter
    def DataSceneNodes(self, DataSceneNodes):
        self._DataSceneNodes = DataSceneNodes

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("DataPipelineConfigs") is not None:
            self._DataPipelineConfigs = []
            for item in params.get("DataPipelineConfigs"):
                obj = DataPipelineConfig()
                obj._deserialize(item)
                self._DataPipelineConfigs.append(obj)
        if params.get("DataSceneNodes") is not None:
            self._DataSceneNodes = []
            for item in params.get("DataSceneNodes"):
                obj = DataSceneNode()
                obj._deserialize(item)
                self._DataSceneNodes.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDataPipelineTaskRequest(AbstractModel):
    """DescribeDataPipelineTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 数据构建任务ID
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """数据构建任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDataPipelineTaskResponse(AbstractModel):
    """DescribeDataPipelineTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 数据构建任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _TaskName: 数据构建任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskName: str
        :param _Creator: 数据构建任务创建者ID
注意：此字段可能返回 null，表示取不到有效值。
        :type Creator: str
        :param _CreateTime: 数据构建任务创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _UpdateTime: 数据构建任务更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTime: str
        :param _DataPipelines: 数据构建任务所选择的Pipeline
注意：此字段可能返回 null，表示取不到有效值。
        :type DataPipelines: list of DataPipelineConfig
        :param _DataScenes: 数据构建任务所选择的通用算法任务
注意：此字段可能返回 null，表示取不到有效值。
        :type DataScenes: list of DataSceneConfig
        :param _Description: 数据构建任务的描述
注意：此字段可能返回 null，表示取不到有效值。
        :type Description: str
        :param _NotebookId: 数据构建任务对应的Notebook ID
注意：此字段可能返回 null，表示取不到有效值。
        :type NotebookId: str
        :param _NotebookName: 数据构建任务对应的Notebook名字
注意：此字段可能返回 null，表示取不到有效值。
        :type NotebookName: str
        :param _Tags: 数据构建任务标签
        :type Tags: list of Tag
        :param _CreatorNickname: 数据构建任务创建者名称
        :type CreatorNickname: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._TaskName = None
        self._Creator = None
        self._CreateTime = None
        self._UpdateTime = None
        self._DataPipelines = None
        self._DataScenes = None
        self._Description = None
        self._NotebookId = None
        self._NotebookName = None
        self._Tags = None
        self._CreatorNickname = None
        self._RequestId = None

    @property
    def TaskId(self):
        """数据构建任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """数据构建任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def Creator(self):
        """数据构建任务创建者ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def CreateTime(self):
        """数据构建任务创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """数据构建任务更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def DataPipelines(self):
        """数据构建任务所选择的Pipeline
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataPipelineConfig
        """
        return self._DataPipelines

    @DataPipelines.setter
    def DataPipelines(self, DataPipelines):
        self._DataPipelines = DataPipelines

    @property
    def DataScenes(self):
        """数据构建任务所选择的通用算法任务
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataSceneConfig
        """
        return self._DataScenes

    @DataScenes.setter
    def DataScenes(self, DataScenes):
        self._DataScenes = DataScenes

    @property
    def Description(self):
        """数据构建任务的描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def NotebookId(self):
        """数据构建任务对应的Notebook ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._NotebookId

    @NotebookId.setter
    def NotebookId(self, NotebookId):
        self._NotebookId = NotebookId

    @property
    def NotebookName(self):
        """数据构建任务对应的Notebook名字
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._NotebookName

    @NotebookName.setter
    def NotebookName(self, NotebookName):
        self._NotebookName = NotebookName

    @property
    def Tags(self):
        """数据构建任务标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def CreatorNickname(self):
        """数据构建任务创建者名称
        :rtype: str
        """
        return self._CreatorNickname

    @CreatorNickname.setter
    def CreatorNickname(self, CreatorNickname):
        self._CreatorNickname = CreatorNickname

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        self._Creator = params.get("Creator")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        if params.get("DataPipelines") is not None:
            self._DataPipelines = []
            for item in params.get("DataPipelines"):
                obj = DataPipelineConfig()
                obj._deserialize(item)
                self._DataPipelines.append(obj)
        if params.get("DataScenes") is not None:
            self._DataScenes = []
            for item in params.get("DataScenes"):
                obj = DataSceneConfig()
                obj._deserialize(item)
                self._DataScenes.append(obj)
        self._Description = params.get("Description")
        self._NotebookId = params.get("NotebookId")
        self._NotebookName = params.get("NotebookName")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._CreatorNickname = params.get("CreatorNickname")
        self._RequestId = params.get("RequestId")


class DescribeDataPipelineTasksRequest(AbstractModel):
    """DescribeDataPipelineTasks请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskIds: 数据构建任务ID列表
        :type TaskIds: list of str
        :param _Filters: 数据构建任务过滤条件，多个Filter之间的关系为逻辑与（AND）关系，过滤字段Filter.Name支持以下两种:
1. TaskName: 数据构建任务名称
2. DataPipelines: 数据构建Pipeline, 其中DataPipelines Filter取值范围参考DescribeDataPipelineConfig接口的DataPipelineConfigs返回值
        :type Filters: list of Filter
        :param _Order: 输出列表的排列顺序。取值范围：ASC（升序排列）/ DESC（降序排列），默认为DESC
        :type Order: str
        :param _OrderField: 排序字段，支持CreateTime或UpdateTime，默认CreateTime
        :type OrderField: str
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        :param _Limit: 限制数目，最大值200，默认值20
        :type Limit: int
        :param _TagFilters: 标签过滤条件
        :type TagFilters: list of TagFilter
        """
        self._TaskIds = None
        self._Filters = None
        self._Order = None
        self._OrderField = None
        self._Offset = None
        self._Limit = None
        self._TagFilters = None

    @property
    def TaskIds(self):
        """数据构建任务ID列表
        :rtype: list of str
        """
        return self._TaskIds

    @TaskIds.setter
    def TaskIds(self, TaskIds):
        self._TaskIds = TaskIds

    @property
    def Filters(self):
        """数据构建任务过滤条件，多个Filter之间的关系为逻辑与（AND）关系，过滤字段Filter.Name支持以下两种:
1. TaskName: 数据构建任务名称
2. DataPipelines: 数据构建Pipeline, 其中DataPipelines Filter取值范围参考DescribeDataPipelineConfig接口的DataPipelineConfigs返回值
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """输出列表的排列顺序。取值范围：ASC（升序排列）/ DESC（降序排列），默认为DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """排序字段，支持CreateTime或UpdateTime，默认CreateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """限制数目，最大值200，默认值20
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def TagFilters(self):
        """标签过滤条件
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters


    def _deserialize(self, params):
        self._TaskIds = params.get("TaskIds")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDataPipelineTasksResponse(AbstractModel):
    """DescribeDataPipelineTasks返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 数据构建任务总量
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _DataPipelineTasks: 数据构建任务列表详情
注意：此字段可能返回 null，表示取不到有效值。
        :type DataPipelineTasks: list of DataPipelineTask
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._DataPipelineTasks = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """数据构建任务总量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def DataPipelineTasks(self):
        """数据构建任务列表详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataPipelineTask
        """
        return self._DataPipelineTasks

    @DataPipelineTasks.setter
    def DataPipelineTasks(self, DataPipelineTasks):
        self._DataPipelineTasks = DataPipelineTasks

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("DataPipelineTasks") is not None:
            self._DataPipelineTasks = []
            for item in params.get("DataPipelineTasks"):
                obj = DataPipelineTask()
                obj._deserialize(item)
                self._DataPipelineTasks.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDatasetAnnotationPreviewRequest(AbstractModel):
    """DescribeDatasetAnnotationPreview请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集id
        :type DatasetId: str
        :param _Schema: schema
        :type Schema: str
        :param _AnnotationSpecification: 标注规范
        :type AnnotationSpecification: str
        """
        self._DatasetId = None
        self._Schema = None
        self._AnnotationSpecification = None

    @property
    def DatasetId(self):
        """数据集id
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def Schema(self):
        """schema
        :rtype: str
        """
        return self._Schema

    @Schema.setter
    def Schema(self, Schema):
        self._Schema = Schema

    @property
    def AnnotationSpecification(self):
        """标注规范
        :rtype: str
        """
        return self._AnnotationSpecification

    @AnnotationSpecification.setter
    def AnnotationSpecification(self, AnnotationSpecification):
        self._AnnotationSpecification = AnnotationSpecification


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._Schema = params.get("Schema")
        self._AnnotationSpecification = params.get("AnnotationSpecification")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetAnnotationPreviewResponse(AbstractModel):
    """DescribeDatasetAnnotationPreview返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AsyncTask: 异步任务状态。有可能仅返回异步任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :type AsyncTask: :class:`tencentcloud.tione.v20211111.models.AsyncTask`
        :param _AnnotationSpecification: 标注规范
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationSpecification: str
        :param _PreviewData: 预览数据
注意：此字段可能返回 null，表示取不到有效值。
        :type PreviewData: list of DataRecordLLM
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AsyncTask = None
        self._AnnotationSpecification = None
        self._PreviewData = None
        self._RequestId = None

    @property
    def AsyncTask(self):
        """异步任务状态。有可能仅返回异步任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.AsyncTask`
        """
        return self._AsyncTask

    @AsyncTask.setter
    def AsyncTask(self, AsyncTask):
        self._AsyncTask = AsyncTask

    @property
    def AnnotationSpecification(self):
        """标注规范
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationSpecification

    @AnnotationSpecification.setter
    def AnnotationSpecification(self, AnnotationSpecification):
        self._AnnotationSpecification = AnnotationSpecification

    @property
    def PreviewData(self):
        """预览数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataRecordLLM
        """
        return self._PreviewData

    @PreviewData.setter
    def PreviewData(self, PreviewData):
        self._PreviewData = PreviewData

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("AsyncTask") is not None:
            self._AsyncTask = AsyncTask()
            self._AsyncTask._deserialize(params.get("AsyncTask"))
        self._AnnotationSpecification = params.get("AnnotationSpecification")
        if params.get("PreviewData") is not None:
            self._PreviewData = []
            for item in params.get("PreviewData"):
                obj = DataRecordLLM()
                obj._deserialize(item)
                self._PreviewData.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDatasetConfigRequest(AbstractModel):
    """DescribeDatasetConfig请求参数结构体

    """


class DescribeDatasetConfigResponse(AbstractModel):
    """DescribeDatasetConfig返回参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetSceneConfigs: 数据集建模场景可用配置
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetSceneConfigs: list of DatasetSceneConfig
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._DatasetSceneConfigs = None
        self._RequestId = None

    @property
    def DatasetSceneConfigs(self):
        """数据集建模场景可用配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DatasetSceneConfig
        """
        return self._DatasetSceneConfigs

    @DatasetSceneConfigs.setter
    def DatasetSceneConfigs(self, DatasetSceneConfigs):
        self._DatasetSceneConfigs = DatasetSceneConfigs

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("DatasetSceneConfigs") is not None:
            self._DatasetSceneConfigs = []
            for item in params.get("DatasetSceneConfigs"):
                obj = DatasetSceneConfig()
                obj._deserialize(item)
                self._DatasetSceneConfigs.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDatasetDetailLLMRequest(AbstractModel):
    """DescribeDatasetDetailLLM请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _Offset: 偏移值
        :type Offset: int
        :param _Limit: 条目限制
        :type Limit: int
        :param _Filters: 数据查询条件
        :type Filters: list of Filter
        :param _Shuffle: 是否抽样
        :type Shuffle: bool
        :param _WithColumnInfo: 返回表头
        :type WithColumnInfo: bool
        :param _WithImageUrl: 返回图片下载链接
        :type WithImageUrl: bool
        :param _WithoutValues: 不返回样本内容，仅返回样本ID
        :type WithoutValues: bool
        :param _RecordIds: 指定样本ID查询
        :type RecordIds: list of str
        :param _RecordIndices: 指定样本索引ID查询
        :type RecordIndices: list of int non-negative
        :param _OffsetRecordIndex: 样本索引ID偏移值
        :type OffsetRecordIndex: int
        :param _RecordFilters: 样本查询条件
        :type RecordFilters: list of Filter
        """
        self._DatasetId = None
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._Shuffle = None
        self._WithColumnInfo = None
        self._WithImageUrl = None
        self._WithoutValues = None
        self._RecordIds = None
        self._RecordIndices = None
        self._OffsetRecordIndex = None
        self._RecordFilters = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def Offset(self):
        """偏移值
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """条目限制
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        """数据查询条件
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Shuffle(self):
        """是否抽样
        :rtype: bool
        """
        return self._Shuffle

    @Shuffle.setter
    def Shuffle(self, Shuffle):
        self._Shuffle = Shuffle

    @property
    def WithColumnInfo(self):
        """返回表头
        :rtype: bool
        """
        return self._WithColumnInfo

    @WithColumnInfo.setter
    def WithColumnInfo(self, WithColumnInfo):
        self._WithColumnInfo = WithColumnInfo

    @property
    def WithImageUrl(self):
        """返回图片下载链接
        :rtype: bool
        """
        return self._WithImageUrl

    @WithImageUrl.setter
    def WithImageUrl(self, WithImageUrl):
        self._WithImageUrl = WithImageUrl

    @property
    def WithoutValues(self):
        """不返回样本内容，仅返回样本ID
        :rtype: bool
        """
        return self._WithoutValues

    @WithoutValues.setter
    def WithoutValues(self, WithoutValues):
        self._WithoutValues = WithoutValues

    @property
    def RecordIds(self):
        """指定样本ID查询
        :rtype: list of str
        """
        return self._RecordIds

    @RecordIds.setter
    def RecordIds(self, RecordIds):
        self._RecordIds = RecordIds

    @property
    def RecordIndices(self):
        """指定样本索引ID查询
        :rtype: list of int non-negative
        """
        return self._RecordIndices

    @RecordIndices.setter
    def RecordIndices(self, RecordIndices):
        self._RecordIndices = RecordIndices

    @property
    def OffsetRecordIndex(self):
        """样本索引ID偏移值
        :rtype: int
        """
        return self._OffsetRecordIndex

    @OffsetRecordIndex.setter
    def OffsetRecordIndex(self, OffsetRecordIndex):
        self._OffsetRecordIndex = OffsetRecordIndex

    @property
    def RecordFilters(self):
        """样本查询条件
        :rtype: list of Filter
        """
        return self._RecordFilters

    @RecordFilters.setter
    def RecordFilters(self, RecordFilters):
        self._RecordFilters = RecordFilters


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Shuffle = params.get("Shuffle")
        self._WithColumnInfo = params.get("WithColumnInfo")
        self._WithImageUrl = params.get("WithImageUrl")
        self._WithoutValues = params.get("WithoutValues")
        self._RecordIds = params.get("RecordIds")
        self._RecordIndices = params.get("RecordIndices")
        self._OffsetRecordIndex = params.get("OffsetRecordIndex")
        if params.get("RecordFilters") is not None:
            self._RecordFilters = []
            for item in params.get("RecordFilters"):
                obj = Filter()
                obj._deserialize(item)
                self._RecordFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetDetailLLMResponse(AbstractModel):
    """DescribeDatasetDetailLLM返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 数据总量
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _RowItems: 样本列表
注意：此字段可能返回 null，表示取不到有效值。
        :type RowItems: list of DataRecordLLM
        :param _Columns: 表头信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Columns: list of str
        :param _AsyncTask: 异步任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :type AsyncTask: :class:`tencentcloud.tione.v20211111.models.AsyncTask`
        :param _Version: 数据版本
注意：此字段可能返回 null，表示取不到有效值。
        :type Version: str
        :param _AnnotationStatus: 标注状态
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationStatus: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._RowItems = None
        self._Columns = None
        self._AsyncTask = None
        self._Version = None
        self._AnnotationStatus = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """数据总量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RowItems(self):
        """样本列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataRecordLLM
        """
        return self._RowItems

    @RowItems.setter
    def RowItems(self, RowItems):
        self._RowItems = RowItems

    @property
    def Columns(self):
        """表头信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._Columns

    @Columns.setter
    def Columns(self, Columns):
        self._Columns = Columns

    @property
    def AsyncTask(self):
        """异步任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.AsyncTask`
        """
        return self._AsyncTask

    @AsyncTask.setter
    def AsyncTask(self, AsyncTask):
        self._AsyncTask = AsyncTask

    @property
    def Version(self):
        """数据版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def AnnotationStatus(self):
        """标注状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationStatus

    @AnnotationStatus.setter
    def AnnotationStatus(self, AnnotationStatus):
        self._AnnotationStatus = AnnotationStatus

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("RowItems") is not None:
            self._RowItems = []
            for item in params.get("RowItems"):
                obj = DataRecordLLM()
                obj._deserialize(item)
                self._RowItems.append(obj)
        self._Columns = params.get("Columns")
        if params.get("AsyncTask") is not None:
            self._AsyncTask = AsyncTask()
            self._AsyncTask._deserialize(params.get("AsyncTask"))
        self._Version = params.get("Version")
        self._AnnotationStatus = params.get("AnnotationStatus")
        self._RequestId = params.get("RequestId")


class DescribeDatasetDetailStructuredRequest(AbstractModel):
    """DescribeDatasetDetailStructured请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _Offset: 偏移值
        :type Offset: int
        :param _Limit: 返回数据条数，默认20，目前最大支持2000条数据
        :type Limit: int
        """
        self._DatasetId = None
        self._Offset = None
        self._Limit = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def Offset(self):
        """偏移值
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回数据条数，默认20，目前最大支持2000条数据
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetDetailStructuredResponse(AbstractModel):
    """DescribeDatasetDetailStructured返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 数据总数
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _ColumnNames: 表格头信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ColumnNames: list of str
        :param _RowItems: 表格内容
注意：此字段可能返回 null，表示取不到有效值。
        :type RowItems: list of RowItem
        :param _RowTexts: 文本内容
注意：此字段可能返回 null，表示取不到有效值。
        :type RowTexts: list of str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._ColumnNames = None
        self._RowItems = None
        self._RowTexts = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """数据总数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ColumnNames(self):
        """表格头信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._ColumnNames

    @ColumnNames.setter
    def ColumnNames(self, ColumnNames):
        self._ColumnNames = ColumnNames

    @property
    def RowItems(self):
        """表格内容
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of RowItem
        """
        return self._RowItems

    @RowItems.setter
    def RowItems(self, RowItems):
        self._RowItems = RowItems

    @property
    def RowTexts(self):
        """文本内容
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._RowTexts

    @RowTexts.setter
    def RowTexts(self, RowTexts):
        self._RowTexts = RowTexts

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        self._ColumnNames = params.get("ColumnNames")
        if params.get("RowItems") is not None:
            self._RowItems = []
            for item in params.get("RowItems"):
                obj = RowItem()
                obj._deserialize(item)
                self._RowItems.append(obj)
        self._RowTexts = params.get("RowTexts")
        self._RequestId = params.get("RequestId")


class DescribeDatasetDetailTextRequest(AbstractModel):
    """DescribeDatasetDetailText请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _FileId: 文件ID
        :type FileId: str
        :param _TaskId: 异步任务ID
        :type TaskId: str
        """
        self._DatasetId = None
        self._FileId = None
        self._TaskId = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def FileId(self):
        """文件ID
        :rtype: str
        """
        return self._FileId

    @FileId.setter
    def FileId(self, FileId):
        self._FileId = FileId

    @property
    def TaskId(self):
        """异步任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._FileId = params.get("FileId")
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetDetailTextResponse(AbstractModel):
    """DescribeDatasetDetailText返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskStatus: 数据透视任务状态
STATUS_PROCESSING，任务处理中
STATUS_SUCCESS, 任务成功
STATUS_FAIL，任务失败
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskStatus: str
        :param _TaskProgress: 任务执行进度，取值范围[0, 100]
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskProgress: int
        :param _RowSet: 文本行数据
        :type RowSet: list of str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskStatus = None
        self._TaskProgress = None
        self._RowSet = None
        self._RequestId = None

    @property
    def TaskStatus(self):
        """数据透视任务状态
STATUS_PROCESSING，任务处理中
STATUS_SUCCESS, 任务成功
STATUS_FAIL，任务失败
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskStatus

    @TaskStatus.setter
    def TaskStatus(self, TaskStatus):
        self._TaskStatus = TaskStatus

    @property
    def TaskProgress(self):
        """任务执行进度，取值范围[0, 100]
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TaskProgress

    @TaskProgress.setter
    def TaskProgress(self, TaskProgress):
        self._TaskProgress = TaskProgress

    @property
    def RowSet(self):
        """文本行数据
        :rtype: list of str
        """
        return self._RowSet

    @RowSet.setter
    def RowSet(self, RowSet):
        self._RowSet = RowSet

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskStatus = params.get("TaskStatus")
        self._TaskProgress = params.get("TaskProgress")
        self._RowSet = params.get("RowSet")
        self._RequestId = params.get("RequestId")


class DescribeDatasetDetailUnstructuredRequest(AbstractModel):
    """DescribeDatasetDetailUnstructured请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _Offset: 偏移量
        :type Offset: int
        :param _Limit: 返回个数，默认20，目前最大支持2000条数据
        :type Limit: int
        :param _LabelList: 标签过滤参数，对应标签值
        :type LabelList: list of str
        :param _AnnotationStatus: 标注状态过滤参数:
STATUS_ANNOTATED，已标注
STATUS_NON_ANNOTATED，未标注
STATUS_ALL，全部
默认为STATUS_ALL
        :type AnnotationStatus: str
        :param _DatasetIds: 数据集ID列表
        :type DatasetIds: list of str
        :param _TextClassificationLabels: 要筛选的文本分类场景标签信息
        :type TextClassificationLabels: list of TextLabelDistributionInfo
        """
        self._DatasetId = None
        self._Offset = None
        self._Limit = None
        self._LabelList = None
        self._AnnotationStatus = None
        self._DatasetIds = None
        self._TextClassificationLabels = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def Offset(self):
        """偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回个数，默认20，目前最大支持2000条数据
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def LabelList(self):
        """标签过滤参数，对应标签值
        :rtype: list of str
        """
        return self._LabelList

    @LabelList.setter
    def LabelList(self, LabelList):
        self._LabelList = LabelList

    @property
    def AnnotationStatus(self):
        """标注状态过滤参数:
STATUS_ANNOTATED，已标注
STATUS_NON_ANNOTATED，未标注
STATUS_ALL，全部
默认为STATUS_ALL
        :rtype: str
        """
        return self._AnnotationStatus

    @AnnotationStatus.setter
    def AnnotationStatus(self, AnnotationStatus):
        self._AnnotationStatus = AnnotationStatus

    @property
    def DatasetIds(self):
        """数据集ID列表
        :rtype: list of str
        """
        return self._DatasetIds

    @DatasetIds.setter
    def DatasetIds(self, DatasetIds):
        self._DatasetIds = DatasetIds

    @property
    def TextClassificationLabels(self):
        """要筛选的文本分类场景标签信息
        :rtype: list of TextLabelDistributionInfo
        """
        return self._TextClassificationLabels

    @TextClassificationLabels.setter
    def TextClassificationLabels(self, TextClassificationLabels):
        self._TextClassificationLabels = TextClassificationLabels


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._LabelList = params.get("LabelList")
        self._AnnotationStatus = params.get("AnnotationStatus")
        self._DatasetIds = params.get("DatasetIds")
        if params.get("TextClassificationLabels") is not None:
            self._TextClassificationLabels = []
            for item in params.get("TextClassificationLabels"):
                obj = TextLabelDistributionInfo()
                obj._deserialize(item)
                self._TextClassificationLabels.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetDetailUnstructuredResponse(AbstractModel):
    """DescribeDatasetDetailUnstructured返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AnnotatedTotalCount: 已标注数据量
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotatedTotalCount: int
        :param _NonAnnotatedTotalCount: 没有标注数据量
注意：此字段可能返回 null，表示取不到有效值。
        :type NonAnnotatedTotalCount: int
        :param _FilterTotalCount: 过滤数据总量
注意：此字段可能返回 null，表示取不到有效值。
        :type FilterTotalCount: int
        :param _FilterLabelList: 过滤数据详情
注意：此字段可能返回 null，表示取不到有效值。
        :type FilterLabelList: list of FilterLabelInfo
        :param _RowTexts: 数据文本行，默认返回前1000行
注意：此字段可能返回 null，表示取不到有效值。
        :type RowTexts: list of str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AnnotatedTotalCount = None
        self._NonAnnotatedTotalCount = None
        self._FilterTotalCount = None
        self._FilterLabelList = None
        self._RowTexts = None
        self._RequestId = None

    @property
    def AnnotatedTotalCount(self):
        """已标注数据量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._AnnotatedTotalCount

    @AnnotatedTotalCount.setter
    def AnnotatedTotalCount(self, AnnotatedTotalCount):
        self._AnnotatedTotalCount = AnnotatedTotalCount

    @property
    def NonAnnotatedTotalCount(self):
        """没有标注数据量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._NonAnnotatedTotalCount

    @NonAnnotatedTotalCount.setter
    def NonAnnotatedTotalCount(self, NonAnnotatedTotalCount):
        self._NonAnnotatedTotalCount = NonAnnotatedTotalCount

    @property
    def FilterTotalCount(self):
        """过滤数据总量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._FilterTotalCount

    @FilterTotalCount.setter
    def FilterTotalCount(self, FilterTotalCount):
        self._FilterTotalCount = FilterTotalCount

    @property
    def FilterLabelList(self):
        """过滤数据详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of FilterLabelInfo
        """
        return self._FilterLabelList

    @FilterLabelList.setter
    def FilterLabelList(self, FilterLabelList):
        self._FilterLabelList = FilterLabelList

    @property
    def RowTexts(self):
        """数据文本行，默认返回前1000行
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._RowTexts

    @RowTexts.setter
    def RowTexts(self, RowTexts):
        self._RowTexts = RowTexts

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AnnotatedTotalCount = params.get("AnnotatedTotalCount")
        self._NonAnnotatedTotalCount = params.get("NonAnnotatedTotalCount")
        self._FilterTotalCount = params.get("FilterTotalCount")
        if params.get("FilterLabelList") is not None:
            self._FilterLabelList = []
            for item in params.get("FilterLabelList"):
                obj = FilterLabelInfo()
                obj._deserialize(item)
                self._FilterLabelList.append(obj)
        self._RowTexts = params.get("RowTexts")
        self._RequestId = params.get("RequestId")


class DescribeDatasetDistributionStructuredRequest(AbstractModel):
    """DescribeDatasetDistributionStructured请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _FieldName: 字段名称
        :type FieldName: str
        """
        self._DatasetId = None
        self._FieldName = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def FieldName(self):
        """字段名称
        :rtype: str
        """
        return self._FieldName

    @FieldName.setter
    def FieldName(self, FieldName):
        self._FieldName = FieldName


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._FieldName = params.get("FieldName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetDistributionStructuredResponse(AbstractModel):
    """DescribeDatasetDistributionStructured返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FieldName: 字段名称
注意：此字段可能返回 null，表示取不到有效值。
        :type FieldName: str
        :param _FieldDistribution: 字段分布详情
注意：此字段可能返回 null，表示取不到有效值。
        :type FieldDistribution: list of FieldValueCount
        :param _TotalCount: 数据总量
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FieldName = None
        self._FieldDistribution = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def FieldName(self):
        """字段名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FieldName

    @FieldName.setter
    def FieldName(self, FieldName):
        self._FieldName = FieldName

    @property
    def FieldDistribution(self):
        """字段分布详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of FieldValueCount
        """
        return self._FieldDistribution

    @FieldDistribution.setter
    def FieldDistribution(self, FieldDistribution):
        self._FieldDistribution = FieldDistribution

    @property
    def TotalCount(self):
        """数据总量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FieldName = params.get("FieldName")
        if params.get("FieldDistribution") is not None:
            self._FieldDistribution = []
            for item in params.get("FieldDistribution"):
                obj = FieldValueCount()
                obj._deserialize(item)
                self._FieldDistribution.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeDatasetDistributionUnstructuredRequest(AbstractModel):
    """DescribeDatasetDistributionUnstructured请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _Order: Asc Desc 排序（废弃）
        :type Order: str
        :param _OrderField: 排序字段（废弃）
        :type OrderField: str
        :param _Offset: 偏移量（废弃）
        :type Offset: int
        :param _Limit: 返回数据条数（废弃）
        :type Limit: int
        :param _DatasetIds: 数据集ID列表
        :type DatasetIds: list of str
        :param _Theme: 文本分类题目名称，文本分类场景不提供则返回该数据集下所有题目的标签分布信息
        :type Theme: str
        """
        self._DatasetId = None
        self._Order = None
        self._OrderField = None
        self._Offset = None
        self._Limit = None
        self._DatasetIds = None
        self._Theme = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def Order(self):
        """Asc Desc 排序（废弃）
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """排序字段（废弃）
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Offset(self):
        """偏移量（废弃）
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回数据条数（废弃）
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def DatasetIds(self):
        """数据集ID列表
        :rtype: list of str
        """
        return self._DatasetIds

    @DatasetIds.setter
    def DatasetIds(self, DatasetIds):
        self._DatasetIds = DatasetIds

    @property
    def Theme(self):
        """文本分类题目名称，文本分类场景不提供则返回该数据集下所有题目的标签分布信息
        :rtype: str
        """
        return self._Theme

    @Theme.setter
    def Theme(self, Theme):
        self._Theme = Theme


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._DatasetIds = params.get("DatasetIds")
        self._Theme = params.get("Theme")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetDistributionUnstructuredResponse(AbstractModel):
    """DescribeDatasetDistributionUnstructured返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 数据总数
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _LabelDistributionList: 标签分布
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelDistributionList: list of LabelDistributionInfo
        :param _LabelTemplateType: 标签类型 分类、检测、分割
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelTemplateType: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._LabelDistributionList = None
        self._LabelTemplateType = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """数据总数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def LabelDistributionList(self):
        """标签分布
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of LabelDistributionInfo
        """
        return self._LabelDistributionList

    @LabelDistributionList.setter
    def LabelDistributionList(self, LabelDistributionList):
        self._LabelDistributionList = LabelDistributionList

    @property
    def LabelTemplateType(self):
        """标签类型 分类、检测、分割
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LabelTemplateType

    @LabelTemplateType.setter
    def LabelTemplateType(self, LabelTemplateType):
        self._LabelTemplateType = LabelTemplateType

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("LabelDistributionList") is not None:
            self._LabelDistributionList = []
            for item in params.get("LabelDistributionList"):
                obj = LabelDistributionInfo()
                obj._deserialize(item)
                self._LabelDistributionList.append(obj)
        self._LabelTemplateType = params.get("LabelTemplateType")
        self._RequestId = params.get("RequestId")


class DescribeDatasetFileListRequest(AbstractModel):
    """DescribeDatasetFileList请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetIds: 数据集id列表
        :type DatasetIds: list of str
        """
        self._DatasetIds = None

    @property
    def DatasetIds(self):
        """数据集id列表
        :rtype: list of str
        """
        return self._DatasetIds

    @DatasetIds.setter
    def DatasetIds(self, DatasetIds):
        self._DatasetIds = DatasetIds


    def _deserialize(self, params):
        self._DatasetIds = params.get("DatasetIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetFileListResponse(AbstractModel):
    """DescribeDatasetFileList返回参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetFileInfos: 数据集文件列表详情
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetFileInfos: list of DatasetFileInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._DatasetFileInfos = None
        self._RequestId = None

    @property
    def DatasetFileInfos(self):
        """数据集文件列表详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DatasetFileInfo
        """
        return self._DatasetFileInfos

    @DatasetFileInfos.setter
    def DatasetFileInfos(self, DatasetFileInfos):
        self._DatasetFileInfos = DatasetFileInfos

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("DatasetFileInfos") is not None:
            self._DatasetFileInfos = []
            for item in params.get("DatasetFileInfos"):
                obj = DatasetFileInfo()
                obj._deserialize(item)
                self._DatasetFileInfos.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDatasetImageUrlsRequest(AbstractModel):
    """DescribeDatasetImageUrls请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _ImageIds: 图片id列表
        :type ImageIds: list of ImageId
        :param _WithThumbnail: 是否返回缩略图
        :type WithThumbnail: bool
        """
        self._DatasetId = None
        self._ImageIds = None
        self._WithThumbnail = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def ImageIds(self):
        """图片id列表
        :rtype: list of ImageId
        """
        return self._ImageIds

    @ImageIds.setter
    def ImageIds(self, ImageIds):
        self._ImageIds = ImageIds

    @property
    def WithThumbnail(self):
        """是否返回缩略图
        :rtype: bool
        """
        return self._WithThumbnail

    @WithThumbnail.setter
    def WithThumbnail(self, WithThumbnail):
        self._WithThumbnail = WithThumbnail


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        if params.get("ImageIds") is not None:
            self._ImageIds = []
            for item in params.get("ImageIds"):
                obj = ImageId()
                obj._deserialize(item)
                self._ImageIds.append(obj)
        self._WithThumbnail = params.get("WithThumbnail")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetImageUrlsResponse(AbstractModel):
    """DescribeDatasetImageUrls返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ImageUrlInfos: 图片URL连接
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageUrlInfos: list of ImageUrlInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ImageUrlInfos = None
        self._RequestId = None

    @property
    def ImageUrlInfos(self):
        """图片URL连接
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ImageUrlInfo
        """
        return self._ImageUrlInfos

    @ImageUrlInfos.setter
    def ImageUrlInfos(self, ImageUrlInfos):
        self._ImageUrlInfos = ImageUrlInfos

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ImageUrlInfos") is not None:
            self._ImageUrlInfos = []
            for item in params.get("ImageUrlInfos"):
                obj = ImageUrlInfo()
                obj._deserialize(item)
                self._ImageUrlInfos.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDatasetOcrSceneRequest(AbstractModel):
    """DescribeDatasetOcrScene请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetIds: 无
        :type DatasetIds: list of str
        """
        self._DatasetIds = None

    @property
    def DatasetIds(self):
        """无
        :rtype: list of str
        """
        return self._DatasetIds

    @DatasetIds.setter
    def DatasetIds(self, DatasetIds):
        self._DatasetIds = DatasetIds


    def _deserialize(self, params):
        self._DatasetIds = params.get("DatasetIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetOcrSceneResponse(AbstractModel):
    """DescribeDatasetOcrScene返回参数结构体

    """

    def __init__(self):
        r"""
        :param _OcrSceneList: OCR场景信息
注意：此字段可能返回 null，表示取不到有效值。
        :type OcrSceneList: list of OcrInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._OcrSceneList = None
        self._RequestId = None

    @property
    def OcrSceneList(self):
        """OCR场景信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of OcrInfo
        """
        return self._OcrSceneList

    @OcrSceneList.setter
    def OcrSceneList(self, OcrSceneList):
        self._OcrSceneList = OcrSceneList

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("OcrSceneList") is not None:
            self._OcrSceneList = []
            for item in params.get("OcrSceneList"):
                obj = OcrInfo()
                obj._deserialize(item)
                self._OcrSceneList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDatasetPerspectiveStatusRequest(AbstractModel):
    """DescribeDatasetPerspectiveStatus请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetIds: 数据集Id
        :type DatasetIds: list of str
        """
        self._DatasetIds = None

    @property
    def DatasetIds(self):
        """数据集Id
        :rtype: list of str
        """
        return self._DatasetIds

    @DatasetIds.setter
    def DatasetIds(self, DatasetIds):
        self._DatasetIds = DatasetIds


    def _deserialize(self, params):
        self._DatasetIds = params.get("DatasetIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetPerspectiveStatusResponse(AbstractModel):
    """DescribeDatasetPerspectiveStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _PerspectiveStatus: true：开启，false：关闭
注意：此字段可能返回 null，表示取不到有效值。
        :type PerspectiveStatus: bool
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._PerspectiveStatus = None
        self._RequestId = None

    @property
    def PerspectiveStatus(self):
        """true：开启，false：关闭
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._PerspectiveStatus

    @PerspectiveStatus.setter
    def PerspectiveStatus(self, PerspectiveStatus):
        self._PerspectiveStatus = PerspectiveStatus

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._PerspectiveStatus = params.get("PerspectiveStatus")
        self._RequestId = params.get("RequestId")


class DescribeDatasetPreviewRequest(AbstractModel):
    """DescribeDatasetPreview请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集id
        :type DatasetId: str
        """
        self._DatasetId = None

    @property
    def DatasetId(self):
        """数据集id
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetPreviewResponse(AbstractModel):
    """DescribeDatasetPreview返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AsyncTask: 异步任务状态。有可能仅返回异步任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :type AsyncTask: :class:`tencentcloud.tione.v20211111.models.AsyncTask`
        :param _Files: 预览文件
        :type Files: list of FilePreview
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AsyncTask = None
        self._Files = None
        self._RequestId = None

    @property
    def AsyncTask(self):
        """异步任务状态。有可能仅返回异步任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.AsyncTask`
        """
        return self._AsyncTask

    @AsyncTask.setter
    def AsyncTask(self, AsyncTask):
        self._AsyncTask = AsyncTask

    @property
    def Files(self):
        """预览文件
        :rtype: list of FilePreview
        """
        return self._Files

    @Files.setter
    def Files(self, Files):
        self._Files = Files

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("AsyncTask") is not None:
            self._AsyncTask = AsyncTask()
            self._AsyncTask._deserialize(params.get("AsyncTask"))
        if params.get("Files") is not None:
            self._Files = []
            for item in params.get("Files"):
                obj = FilePreview()
                obj._deserialize(item)
                self._Files.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDatasetPreviewStatusRequest(AbstractModel):
    """DescribeDatasetPreviewStatus请求参数结构体

    """


class DescribeDatasetPreviewStatusResponse(AbstractModel):
    """DescribeDatasetPreviewStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _PreviewStatus: 数据集预览状态，true为开启，false为关闭
        :type PreviewStatus: bool
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._PreviewStatus = None
        self._RequestId = None

    @property
    def PreviewStatus(self):
        """数据集预览状态，true为开启，false为关闭
        :rtype: bool
        """
        return self._PreviewStatus

    @PreviewStatus.setter
    def PreviewStatus(self, PreviewStatus):
        self._PreviewStatus = PreviewStatus

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._PreviewStatus = params.get("PreviewStatus")
        self._RequestId = params.get("RequestId")


class DescribeDatasetSchemaPreviewRequest(AbstractModel):
    """DescribeDatasetSchemaPreview请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集id
        :type DatasetId: str
        :param _ForceRegenerate: 强制重新生成
        :type ForceRegenerate: bool
        """
        self._DatasetId = None
        self._ForceRegenerate = None

    @property
    def DatasetId(self):
        """数据集id
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def ForceRegenerate(self):
        """强制重新生成
        :rtype: bool
        """
        return self._ForceRegenerate

    @ForceRegenerate.setter
    def ForceRegenerate(self, ForceRegenerate):
        self._ForceRegenerate = ForceRegenerate


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._ForceRegenerate = params.get("ForceRegenerate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetSchemaPreviewResponse(AbstractModel):
    """DescribeDatasetSchemaPreview返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AsyncTask: 异步任务状态。有可能仅返回异步任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :type AsyncTask: :class:`tencentcloud.tione.v20211111.models.AsyncTask`
        :param _Schema: schema
注意：此字段可能返回 null，表示取不到有效值。
        :type Schema: str
        :param _AnnotationSpecification: 标注规范
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationSpecification: str
        :param _GeneratedBy: 由谁生成的：System 系统自动生成；User 用户提交保存的
注意：此字段可能返回 null，表示取不到有效值。
        :type GeneratedBy: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AsyncTask = None
        self._Schema = None
        self._AnnotationSpecification = None
        self._GeneratedBy = None
        self._RequestId = None

    @property
    def AsyncTask(self):
        """异步任务状态。有可能仅返回异步任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.AsyncTask`
        """
        return self._AsyncTask

    @AsyncTask.setter
    def AsyncTask(self, AsyncTask):
        self._AsyncTask = AsyncTask

    @property
    def Schema(self):
        """schema
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Schema

    @Schema.setter
    def Schema(self, Schema):
        self._Schema = Schema

    @property
    def AnnotationSpecification(self):
        """标注规范
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationSpecification

    @AnnotationSpecification.setter
    def AnnotationSpecification(self, AnnotationSpecification):
        self._AnnotationSpecification = AnnotationSpecification

    @property
    def GeneratedBy(self):
        """由谁生成的：System 系统自动生成；User 用户提交保存的
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GeneratedBy

    @GeneratedBy.setter
    def GeneratedBy(self, GeneratedBy):
        self._GeneratedBy = GeneratedBy

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("AsyncTask") is not None:
            self._AsyncTask = AsyncTask()
            self._AsyncTask._deserialize(params.get("AsyncTask"))
        self._Schema = params.get("Schema")
        self._AnnotationSpecification = params.get("AnnotationSpecification")
        self._GeneratedBy = params.get("GeneratedBy")
        self._RequestId = params.get("RequestId")


class DescribeDatasetSchemaRequest(AbstractModel):
    """DescribeDatasetSchema请求参数结构体

    """

    def __init__(self):
        r"""
        :param _StorageDataPath: 表格文件cos存储路径
        :type StorageDataPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        self._StorageDataPath = None

    @property
    def StorageDataPath(self):
        """表格文件cos存储路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._StorageDataPath

    @StorageDataPath.setter
    def StorageDataPath(self, StorageDataPath):
        self._StorageDataPath = StorageDataPath


    def _deserialize(self, params):
        if params.get("StorageDataPath") is not None:
            self._StorageDataPath = CosPathInfo()
            self._StorageDataPath._deserialize(params.get("StorageDataPath"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetSchemaResponse(AbstractModel):
    """DescribeDatasetSchema返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Schema: 表格头信息列表
注意：此字段可能返回 null，表示取不到有效值。
        :type Schema: list of SchemaInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Schema = None
        self._RequestId = None

    @property
    def Schema(self):
        """表格头信息列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of SchemaInfo
        """
        return self._Schema

    @Schema.setter
    def Schema(self, Schema):
        self._Schema = Schema

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Schema") is not None:
            self._Schema = []
            for item in params.get("Schema"):
                obj = SchemaInfo()
                obj._deserialize(item)
                self._Schema.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDatasetSchemaTasksRequest(AbstractModel):
    """DescribeDatasetSchemaTasks请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _Limit: 限制数目，最大值200，默认值20
        :type Limit: int
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        """
        self._DatasetId = None
        self._Limit = None
        self._Offset = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def Limit(self):
        """限制数目，最大值200，默认值20
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetSchemaTasksResponse(AbstractModel):
    """DescribeDatasetSchemaTasks返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: Schema任务总量
        :type TotalCount: int
        :param _SchemaTasks: Schema任务列表
        :type SchemaTasks: list of DatasetSchemaTask
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._SchemaTasks = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """Schema任务总量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def SchemaTasks(self):
        """Schema任务列表
        :rtype: list of DatasetSchemaTask
        """
        return self._SchemaTasks

    @SchemaTasks.setter
    def SchemaTasks(self, SchemaTasks):
        self._SchemaTasks = SchemaTasks

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("SchemaTasks") is not None:
            self._SchemaTasks = []
            for item in params.get("SchemaTasks"):
                obj = DatasetSchemaTask()
                obj._deserialize(item)
                self._SchemaTasks.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDatasetTextAnalyzeRequest(AbstractModel):
    """DescribeDatasetTextAnalyze请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetIds: 数据集ID列表
        :type DatasetIds: list of str
        :param _TextLanguage: 样本语言:
TEXT_LANGUAGE_ENGLISH 英文
TEXT_LANGUAGE_CHINESE 中文
        :type TextLanguage: str
        :param _TaskId: 异步任务ID
        :type TaskId: str
        """
        self._DatasetIds = None
        self._TextLanguage = None
        self._TaskId = None

    @property
    def DatasetIds(self):
        """数据集ID列表
        :rtype: list of str
        """
        return self._DatasetIds

    @DatasetIds.setter
    def DatasetIds(self, DatasetIds):
        self._DatasetIds = DatasetIds

    @property
    def TextLanguage(self):
        """样本语言:
TEXT_LANGUAGE_ENGLISH 英文
TEXT_LANGUAGE_CHINESE 中文
        :rtype: str
        """
        return self._TextLanguage

    @TextLanguage.setter
    def TextLanguage(self, TextLanguage):
        self._TextLanguage = TextLanguage

    @property
    def TaskId(self):
        """异步任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._DatasetIds = params.get("DatasetIds")
        self._TextLanguage = params.get("TextLanguage")
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetTextAnalyzeResponse(AbstractModel):
    """DescribeDatasetTextAnalyze返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskStatus: 数据透视任务状态
STATUS_PROCESSING，任务处理中
STATUS_SUCCESS, 任务成功
STATUS_FAIL，任务失败
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskStatus: str
        :param _TaskProgress: 任务执行进度，取值范围[0, 100]
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskProgress: int
        :param _TextAnalyzeResult: 数据透视结果
注意：此字段可能返回 null，表示取不到有效值。
        :type TextAnalyzeResult: :class:`tencentcloud.tione.v20211111.models.TextAnalyzeResult`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskStatus = None
        self._TaskProgress = None
        self._TextAnalyzeResult = None
        self._RequestId = None

    @property
    def TaskStatus(self):
        """数据透视任务状态
STATUS_PROCESSING，任务处理中
STATUS_SUCCESS, 任务成功
STATUS_FAIL，任务失败
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskStatus

    @TaskStatus.setter
    def TaskStatus(self, TaskStatus):
        self._TaskStatus = TaskStatus

    @property
    def TaskProgress(self):
        """任务执行进度，取值范围[0, 100]
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TaskProgress

    @TaskProgress.setter
    def TaskProgress(self, TaskProgress):
        self._TaskProgress = TaskProgress

    @property
    def TextAnalyzeResult(self):
        """数据透视结果
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.TextAnalyzeResult`
        """
        return self._TextAnalyzeResult

    @TextAnalyzeResult.setter
    def TextAnalyzeResult(self, TextAnalyzeResult):
        self._TextAnalyzeResult = TextAnalyzeResult

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskStatus = params.get("TaskStatus")
        self._TaskProgress = params.get("TaskProgress")
        if params.get("TextAnalyzeResult") is not None:
            self._TextAnalyzeResult = TextAnalyzeResult()
            self._TextAnalyzeResult._deserialize(params.get("TextAnalyzeResult"))
        self._RequestId = params.get("RequestId")


class DescribeDatasetsRequest(AbstractModel):
    """DescribeDatasets请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetIds: 数据集id列表
        :type DatasetIds: list of str
        :param _Filters: 数据集查询过滤条件，多个Filter之间的关系为逻辑与（AND）关系，过滤字段Filter.Name，类型为String
DatasetName，数据集名称
DatasetScope，数据集范围，SCOPE_DATASET_PRIVATE或SCOPE_DATASET_PUBLIC
        :type Filters: list of Filter
        :param _TagFilters: 标签过滤条件
        :type TagFilters: list of TagFilter
        :param _Order: 排序值，支持Asc或Desc，默认Desc
        :type Order: str
        :param _OrderField: 排序字段，支持CreateTime或UpdateTime，默认CreateTime
        :type OrderField: str
        :param _Offset: 偏移值
        :type Offset: int
        :param _Limit: 返回数据个数，默认20，最大支持200
        :type Limit: int
        :param _CFSChecking: 是否检查CFS。若开启，则在CFS挂载好之前，不会返回数据集列表。
        :type CFSChecking: bool
        :param _CFSDetail: 是否返回CFS详情。
        :type CFSDetail: bool
        """
        self._DatasetIds = None
        self._Filters = None
        self._TagFilters = None
        self._Order = None
        self._OrderField = None
        self._Offset = None
        self._Limit = None
        self._CFSChecking = None
        self._CFSDetail = None

    @property
    def DatasetIds(self):
        """数据集id列表
        :rtype: list of str
        """
        return self._DatasetIds

    @DatasetIds.setter
    def DatasetIds(self, DatasetIds):
        self._DatasetIds = DatasetIds

    @property
    def Filters(self):
        """数据集查询过滤条件，多个Filter之间的关系为逻辑与（AND）关系，过滤字段Filter.Name，类型为String
DatasetName，数据集名称
DatasetScope，数据集范围，SCOPE_DATASET_PRIVATE或SCOPE_DATASET_PUBLIC
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签过滤条件
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def Order(self):
        """排序值，支持Asc或Desc，默认Desc
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """排序字段，支持CreateTime或UpdateTime，默认CreateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Offset(self):
        """偏移值
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回数据个数，默认20，最大支持200
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def CFSChecking(self):
        """是否检查CFS。若开启，则在CFS挂载好之前，不会返回数据集列表。
        :rtype: bool
        """
        return self._CFSChecking

    @CFSChecking.setter
    def CFSChecking(self, CFSChecking):
        self._CFSChecking = CFSChecking

    @property
    def CFSDetail(self):
        """是否返回CFS详情。
        :rtype: bool
        """
        return self._CFSDetail

    @CFSDetail.setter
    def CFSDetail(self, CFSDetail):
        self._CFSDetail = CFSDetail


    def _deserialize(self, params):
        self._DatasetIds = params.get("DatasetIds")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._CFSChecking = params.get("CFSChecking")
        self._CFSDetail = params.get("CFSDetail")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDatasetsResponse(AbstractModel):
    """DescribeDatasets返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 数据集总量（名称维度）
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _DatasetGroups: 数据集按照数据集名称聚合的分组
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetGroups: list of DatasetGroup
        :param _DatasetIdNums: 数据集ID总量
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetIdNums: int
        :param _CFSNotReady: 若开启了CFSChecking，则检查CFS是否准备完毕。若CFS未准备完毕，则返回true，并且TotalCount为0，DatasetGroups为空。
        :type CFSNotReady: bool
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._DatasetGroups = None
        self._DatasetIdNums = None
        self._CFSNotReady = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """数据集总量（名称维度）
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def DatasetGroups(self):
        """数据集按照数据集名称聚合的分组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DatasetGroup
        """
        return self._DatasetGroups

    @DatasetGroups.setter
    def DatasetGroups(self, DatasetGroups):
        self._DatasetGroups = DatasetGroups

    @property
    def DatasetIdNums(self):
        """数据集ID总量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._DatasetIdNums

    @DatasetIdNums.setter
    def DatasetIdNums(self, DatasetIdNums):
        self._DatasetIdNums = DatasetIdNums

    @property
    def CFSNotReady(self):
        """若开启了CFSChecking，则检查CFS是否准备完毕。若CFS未准备完毕，则返回true，并且TotalCount为0，DatasetGroups为空。
        :rtype: bool
        """
        return self._CFSNotReady

    @CFSNotReady.setter
    def CFSNotReady(self, CFSNotReady):
        self._CFSNotReady = CFSNotReady

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("DatasetGroups") is not None:
            self._DatasetGroups = []
            for item in params.get("DatasetGroups"):
                obj = DatasetGroup()
                obj._deserialize(item)
                self._DatasetGroups.append(obj)
        self._DatasetIdNums = params.get("DatasetIdNums")
        self._CFSNotReady = params.get("CFSNotReady")
        self._RequestId = params.get("RequestId")


class DescribeDealOrderRequest(AbstractModel):
    """DescribeDealOrder请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: flowid
        :type FlowId: int
        """
        self._FlowId = None

    @property
    def FlowId(self):
        """flowid
        :rtype: int
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDealOrderResponse(AbstractModel):
    """DescribeDealOrder返回参数结构体

    """

    def __init__(self):
        r"""
        :param _DealName: 订单号
        :type DealName: str
        :param _FlowId: flowid
        :type FlowId: int
        :param _Pid: 价格依赖，用于查询资源价格
        :type Pid: int
        :param _ResourceId: 资源id列表
        :type ResourceId: list of str
        :param _DealStatus: 订单状态
        :type DealStatus: str
        :param _TimeUnit: 价格单位
        :type TimeUnit: str
        :param _TimeSpan: 时间大小
        :type TimeSpan: int
        :param _Region: 地域
        :type Region: str
        :param _GroupType: 资源组类型
        :type GroupType: str
        :param _SpecName: 计费项名称
        :type SpecName: str
        :param _IsExclusiveSale: 是否为包销
        :type IsExclusiveSale: bool
        :param _IsSwSale: 是否为纳管订单
        :type IsSwSale: bool
        :param _RenewFlag: 续费标志
        :type RenewFlag: int
        :param _SpecId: 计费id
        :type SpecId: str
        :param _ExpireTime: 过期时间
        :type ExpireTime: str
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._DealName = None
        self._FlowId = None
        self._Pid = None
        self._ResourceId = None
        self._DealStatus = None
        self._TimeUnit = None
        self._TimeSpan = None
        self._Region = None
        self._GroupType = None
        self._SpecName = None
        self._IsExclusiveSale = None
        self._IsSwSale = None
        self._RenewFlag = None
        self._SpecId = None
        self._ExpireTime = None
        self._CreateTime = None
        self._UpdateTime = None
        self._RequestId = None

    @property
    def DealName(self):
        """订单号
        :rtype: str
        """
        return self._DealName

    @DealName.setter
    def DealName(self, DealName):
        self._DealName = DealName

    @property
    def FlowId(self):
        """flowid
        :rtype: int
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def Pid(self):
        """价格依赖，用于查询资源价格
        :rtype: int
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def ResourceId(self):
        """资源id列表
        :rtype: list of str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def DealStatus(self):
        """订单状态
        :rtype: str
        """
        return self._DealStatus

    @DealStatus.setter
    def DealStatus(self, DealStatus):
        self._DealStatus = DealStatus

    @property
    def TimeUnit(self):
        """价格单位
        :rtype: str
        """
        return self._TimeUnit

    @TimeUnit.setter
    def TimeUnit(self, TimeUnit):
        self._TimeUnit = TimeUnit

    @property
    def TimeSpan(self):
        """时间大小
        :rtype: int
        """
        return self._TimeSpan

    @TimeSpan.setter
    def TimeSpan(self, TimeSpan):
        self._TimeSpan = TimeSpan

    @property
    def Region(self):
        """地域
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def GroupType(self):
        """资源组类型
        :rtype: str
        """
        return self._GroupType

    @GroupType.setter
    def GroupType(self, GroupType):
        self._GroupType = GroupType

    @property
    def SpecName(self):
        """计费项名称
        :rtype: str
        """
        return self._SpecName

    @SpecName.setter
    def SpecName(self, SpecName):
        self._SpecName = SpecName

    @property
    def IsExclusiveSale(self):
        """是否为包销
        :rtype: bool
        """
        return self._IsExclusiveSale

    @IsExclusiveSale.setter
    def IsExclusiveSale(self, IsExclusiveSale):
        self._IsExclusiveSale = IsExclusiveSale

    @property
    def IsSwSale(self):
        """是否为纳管订单
        :rtype: bool
        """
        return self._IsSwSale

    @IsSwSale.setter
    def IsSwSale(self, IsSwSale):
        self._IsSwSale = IsSwSale

    @property
    def RenewFlag(self):
        """续费标志
        :rtype: int
        """
        return self._RenewFlag

    @RenewFlag.setter
    def RenewFlag(self, RenewFlag):
        self._RenewFlag = RenewFlag

    @property
    def SpecId(self):
        """计费id
        :rtype: str
        """
        return self._SpecId

    @SpecId.setter
    def SpecId(self, SpecId):
        self._SpecId = SpecId

    @property
    def ExpireTime(self):
        """过期时间
        :rtype: str
        """
        return self._ExpireTime

    @ExpireTime.setter
    def ExpireTime(self, ExpireTime):
        self._ExpireTime = ExpireTime

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DealName = params.get("DealName")
        self._FlowId = params.get("FlowId")
        self._Pid = params.get("Pid")
        self._ResourceId = params.get("ResourceId")
        self._DealStatus = params.get("DealStatus")
        self._TimeUnit = params.get("TimeUnit")
        self._TimeSpan = params.get("TimeSpan")
        self._Region = params.get("Region")
        self._GroupType = params.get("GroupType")
        self._SpecName = params.get("SpecName")
        self._IsExclusiveSale = params.get("IsExclusiveSale")
        self._IsSwSale = params.get("IsSwSale")
        self._RenewFlag = params.get("RenewFlag")
        self._SpecId = params.get("SpecId")
        self._ExpireTime = params.get("ExpireTime")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._RequestId = params.get("RequestId")


class DescribeDemoFlowRequest(AbstractModel):
    """DescribeDemoFlow请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DemoFlowId: 案例工作流ID
        :type DemoFlowId: str
        """
        self._DemoFlowId = None

    @property
    def DemoFlowId(self):
        """案例工作流ID
        :rtype: str
        """
        return self._DemoFlowId

    @DemoFlowId.setter
    def DemoFlowId(self, DemoFlowId):
        self._DemoFlowId = DemoFlowId


    def _deserialize(self, params):
        self._DemoFlowId = params.get("DemoFlowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDemoFlowResponse(AbstractModel):
    """DescribeDemoFlow返回参数结构体

    """

    def __init__(self):
        r"""
        :param _DemoFlowDetail: 案例工作流详情
        :type DemoFlowDetail: :class:`tencentcloud.tione.v20211111.models.DemoFlowDetail`
        :param _Nodes: 案例工作流节点列表
        :type Nodes: list of FlowNode
        :param _Edges: 案例工作流边列表
        :type Edges: list of FlowEdge
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._DemoFlowDetail = None
        self._Nodes = None
        self._Edges = None
        self._RequestId = None

    @property
    def DemoFlowDetail(self):
        """案例工作流详情
        :rtype: :class:`tencentcloud.tione.v20211111.models.DemoFlowDetail`
        """
        return self._DemoFlowDetail

    @DemoFlowDetail.setter
    def DemoFlowDetail(self, DemoFlowDetail):
        self._DemoFlowDetail = DemoFlowDetail

    @property
    def Nodes(self):
        """案例工作流节点列表
        :rtype: list of FlowNode
        """
        return self._Nodes

    @Nodes.setter
    def Nodes(self, Nodes):
        self._Nodes = Nodes

    @property
    def Edges(self):
        """案例工作流边列表
        :rtype: list of FlowEdge
        """
        return self._Edges

    @Edges.setter
    def Edges(self, Edges):
        self._Edges = Edges

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("DemoFlowDetail") is not None:
            self._DemoFlowDetail = DemoFlowDetail()
            self._DemoFlowDetail._deserialize(params.get("DemoFlowDetail"))
        if params.get("Nodes") is not None:
            self._Nodes = []
            for item in params.get("Nodes"):
                obj = FlowNode()
                obj._deserialize(item)
                self._Nodes.append(obj)
        if params.get("Edges") is not None:
            self._Edges = []
            for item in params.get("Edges"):
                obj = FlowEdge()
                obj._deserialize(item)
                self._Edges.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDemoFlowsRequest(AbstractModel):
    """DescribeDemoFlows请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤条件
Filter.Name: 枚举值: DemoFlowName： 案例工作流名称
                    DemoProjectId：案例工程ID
Filter.Values: 长度为1时，支持模糊查询; 不为1时，精确查询
每次请求的Filters的上限为10，Filter.Values的上限为100
        :type Filters: list of Filter
        """
        self._Filters = None

    @property
    def Filters(self):
        """过滤条件
Filter.Name: 枚举值: DemoFlowName： 案例工作流名称
                    DemoProjectId：案例工程ID
Filter.Values: 长度为1时，支持模糊查询; 不为1时，精确查询
每次请求的Filters的上限为10，Filter.Values的上限为100
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDemoFlowsResponse(AbstractModel):
    """DescribeDemoFlows返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 总量
        :type TotalCount: int
        :param _DemoFlowSet: 案例工作流详情数组
        :type DemoFlowSet: list of DemoFlowDetail
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._DemoFlowSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """总量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def DemoFlowSet(self):
        """案例工作流详情数组
        :rtype: list of DemoFlowDetail
        """
        return self._DemoFlowSet

    @DemoFlowSet.setter
    def DemoFlowSet(self, DemoFlowSet):
        self._DemoFlowSet = DemoFlowSet

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("DemoFlowSet") is not None:
            self._DemoFlowSet = []
            for item in params.get("DemoFlowSet"):
                obj = DemoFlowDetail()
                obj._deserialize(item)
                self._DemoFlowSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDemoProjectsRequest(AbstractModel):
    """DescribeDemoProjects请求参数结构体

    """


class DescribeDemoProjectsResponse(AbstractModel):
    """DescribeDemoProjects返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 总量
        :type TotalCount: int
        :param _DemoProjectSet: 案例工程详情数组
        :type DemoProjectSet: list of DemoProjectDetail
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._DemoProjectSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """总量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def DemoProjectSet(self):
        """案例工程详情数组
        :rtype: list of DemoProjectDetail
        """
        return self._DemoProjectSet

    @DemoProjectSet.setter
    def DemoProjectSet(self, DemoProjectSet):
        self._DemoProjectSet = DemoProjectSet

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("DemoProjectSet") is not None:
            self._DemoProjectSet = []
            for item in params.get("DemoProjectSet"):
                obj = DemoProjectDetail()
                obj._deserialize(item)
                self._DemoProjectSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeDirectoryContentsRequest(AbstractModel):
    """DescribeDirectoryContents请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DataSourceId: CFS ID
        :type DataSourceId: str
        :param _Path: 路径
        :type Path: str
        :param _FileIncluded: 是否包含文件
        :type FileIncluded: bool
        :param _SourceInfoCheck: 是否检查文件来源
        :type SourceInfoCheck: bool
        """
        self._DataSourceId = None
        self._Path = None
        self._FileIncluded = None
        self._SourceInfoCheck = None

    @property
    def DataSourceId(self):
        """CFS ID
        :rtype: str
        """
        return self._DataSourceId

    @DataSourceId.setter
    def DataSourceId(self, DataSourceId):
        self._DataSourceId = DataSourceId

    @property
    def Path(self):
        """路径
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def FileIncluded(self):
        """是否包含文件
        :rtype: bool
        """
        return self._FileIncluded

    @FileIncluded.setter
    def FileIncluded(self, FileIncluded):
        self._FileIncluded = FileIncluded

    @property
    def SourceInfoCheck(self):
        """是否检查文件来源
        :rtype: bool
        """
        return self._SourceInfoCheck

    @SourceInfoCheck.setter
    def SourceInfoCheck(self, SourceInfoCheck):
        self._SourceInfoCheck = SourceInfoCheck


    def _deserialize(self, params):
        self._DataSourceId = params.get("DataSourceId")
        self._Path = params.get("Path")
        self._FileIncluded = params.get("FileIncluded")
        self._SourceInfoCheck = params.get("SourceInfoCheck")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeDirectoryContentsResponse(AbstractModel):
    """DescribeDirectoryContents返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FileList: 文件列表
        :type FileList: list of FileInfo
        :param _ExceptionInfo: 异常信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ExceptionInfo: :class:`tencentcloud.tione.v20211111.models.ExceptionInfo`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FileList = None
        self._ExceptionInfo = None
        self._RequestId = None

    @property
    def FileList(self):
        """文件列表
        :rtype: list of FileInfo
        """
        return self._FileList

    @FileList.setter
    def FileList(self, FileList):
        self._FileList = FileList

    @property
    def ExceptionInfo(self):
        """异常信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ExceptionInfo`
        """
        return self._ExceptionInfo

    @ExceptionInfo.setter
    def ExceptionInfo(self, ExceptionInfo):
        self._ExceptionInfo = ExceptionInfo

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FileList") is not None:
            self._FileList = []
            for item in params.get("FileList"):
                obj = FileInfo()
                obj._deserialize(item)
                self._FileList.append(obj)
        if params.get("ExceptionInfo") is not None:
            self._ExceptionInfo = ExceptionInfo()
            self._ExceptionInfo._deserialize(params.get("ExceptionInfo"))
        self._RequestId = params.get("RequestId")


class DescribeEvaluationBuiltInDatasetsRequest(AbstractModel):
    """DescribeEvaluationBuiltInDatasets请求参数结构体

    """


class DescribeEvaluationBuiltInDatasetsResponse(AbstractModel):
    """DescribeEvaluationBuiltInDatasets返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ObjevalEntries: 内置的客观评测集
        :type ObjevalEntries: list of EvaluationDatasetCategoryEntry
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ObjevalEntries = None
        self._RequestId = None

    @property
    def ObjevalEntries(self):
        """内置的客观评测集
        :rtype: list of EvaluationDatasetCategoryEntry
        """
        return self._ObjevalEntries

    @ObjevalEntries.setter
    def ObjevalEntries(self, ObjevalEntries):
        self._ObjevalEntries = ObjevalEntries

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ObjevalEntries") is not None:
            self._ObjevalEntries = []
            for item in params.get("ObjevalEntries"):
                obj = EvaluationDatasetCategoryEntry()
                obj._deserialize(item)
                self._ObjevalEntries.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeEvaluationSummariesRequest(AbstractModel):
    """DescribeEvaluationSummaries请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TrainTaskId: 训练ID
        :type TrainTaskId: str
        """
        self._TrainTaskId = None

    @property
    def TrainTaskId(self):
        """训练ID
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId


    def _deserialize(self, params):
        self._TrainTaskId = params.get("TrainTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeEvaluationSummariesResponse(AbstractModel):
    """DescribeEvaluationSummaries返回参数结构体

    """

    def __init__(self):
        r"""
        :param _EvaluationSummaries: 评测结果
        :type EvaluationSummaries: list of EvaluationSummary
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._EvaluationSummaries = None
        self._RequestId = None

    @property
    def EvaluationSummaries(self):
        """评测结果
        :rtype: list of EvaluationSummary
        """
        return self._EvaluationSummaries

    @EvaluationSummaries.setter
    def EvaluationSummaries(self, EvaluationSummaries):
        self._EvaluationSummaries = EvaluationSummaries

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EvaluationSummaries") is not None:
            self._EvaluationSummaries = []
            for item in params.get("EvaluationSummaries"):
                obj = EvaluationSummary()
                obj._deserialize(item)
                self._EvaluationSummaries.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeEventsRequest(AbstractModel):
    """DescribeEvents请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Service: 服务类型，TRAIN为任务式建模, NOTEBOOK为Notebook, INFER为在线服务, BATCH为批量预测
枚举值：
- TRAIN
- NOTEBOOK
- INFER
- BATCH
        :type Service: str
        :param _ServiceId: 服务ID，和Service参数对应，不同Service的服务ID获取方式不同，具体如下：
- Service类型为TRAIN：
  调用[DescribeTrainingTask接口](/document/product/851/75089)查询训练任务详情，ServiceId为接口返回值中Response.TrainingTaskDetail.LatestInstanceId
- Service类型为NOTEBOOK：
  调用[DescribeNotebook接口](/document/product/851/95662)查询Notebook详情，ServiceId为接口返回值中Response.NotebookDetail.PodName
- Service类型为INFER：
  调用[DescribeModelServiceGroup接口](/document/product/851/82285)查询服务组详情，ServiceId为接口返回值中Response.ServiceGroup.Services.ServiceId
- Service类型为BATCH：
  调用[DescribeBatchTask接口](/document/product/851/80180)查询跑批任务详情，ServiceId为接口返回值中Response.BatchTaskDetail.LatestInstanceId
        :type ServiceId: str
        :param _ResourceName: 事件对应的k8s的资源的名称
        :type ResourceName: str
        :param _StartTime: 查询事件最早发生的时间（RFC3339格式的时间字符串），默认值为当前时间的前一天
        :type StartTime: str
        :param _EndTime: 查询事件最晚发生的时间（RFC3339格式的时间字符串），默认值为当前时间
        :type EndTime: str
        :param _Limit: 分页Limit，默认值为100，最大值为100
        :type Limit: int
        :param _Offset: 分页Offset，默认值为0
        :type Offset: int
        :param _Order: 排列顺序（可选值为ASC, DESC ），默认为DESC
        :type Order: str
        :param _OrderField: 排序的依据字段（可选值为FirstTimestamp, LastTimestamp），默认值为LastTimestamp
        :type OrderField: str
        :param _Filters: 过滤条件
注意: 
1. Filter.Name：目前支持ResourceKind（按事件关联的资源类型过滤）；Type（按事件类型过滤）
2. Filter.Values：
对于Name为ResourceKind，Values的可选取值为Deployment, Replicaset, Pod等K8S资源类型；
对于Name为Type，Values的可选取值仅为Normal或者Warning；
Values为多个的时候表示同时满足
3. Filter. Negative和Filter. Fuzzy没有使用
        :type Filters: list of Filter
        :param _JobCategory: 描述任务的类型（可选值为FullManagedJob，SemiManagedJob，TaijiHYJob），默认值为FullManagedJob
        :type JobCategory: str
        """
        self._Service = None
        self._ServiceId = None
        self._ResourceName = None
        self._StartTime = None
        self._EndTime = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._OrderField = None
        self._Filters = None
        self._JobCategory = None

    @property
    def Service(self):
        """服务类型，TRAIN为任务式建模, NOTEBOOK为Notebook, INFER为在线服务, BATCH为批量预测
枚举值：
- TRAIN
- NOTEBOOK
- INFER
- BATCH
        :rtype: str
        """
        return self._Service

    @Service.setter
    def Service(self, Service):
        self._Service = Service

    @property
    def ServiceId(self):
        """服务ID，和Service参数对应，不同Service的服务ID获取方式不同，具体如下：
- Service类型为TRAIN：
  调用[DescribeTrainingTask接口](/document/product/851/75089)查询训练任务详情，ServiceId为接口返回值中Response.TrainingTaskDetail.LatestInstanceId
- Service类型为NOTEBOOK：
  调用[DescribeNotebook接口](/document/product/851/95662)查询Notebook详情，ServiceId为接口返回值中Response.NotebookDetail.PodName
- Service类型为INFER：
  调用[DescribeModelServiceGroup接口](/document/product/851/82285)查询服务组详情，ServiceId为接口返回值中Response.ServiceGroup.Services.ServiceId
- Service类型为BATCH：
  调用[DescribeBatchTask接口](/document/product/851/80180)查询跑批任务详情，ServiceId为接口返回值中Response.BatchTaskDetail.LatestInstanceId
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId

    @property
    def ResourceName(self):
        """事件对应的k8s的资源的名称
        :rtype: str
        """
        return self._ResourceName

    @ResourceName.setter
    def ResourceName(self, ResourceName):
        self._ResourceName = ResourceName

    @property
    def StartTime(self):
        """查询事件最早发生的时间（RFC3339格式的时间字符串），默认值为当前时间的前一天
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """查询事件最晚发生的时间（RFC3339格式的时间字符串），默认值为当前时间
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Limit(self):
        """分页Limit，默认值为100，最大值为100
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """分页Offset，默认值为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """排列顺序（可选值为ASC, DESC ），默认为DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """排序的依据字段（可选值为FirstTimestamp, LastTimestamp），默认值为LastTimestamp
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Filters(self):
        """过滤条件
注意: 
1. Filter.Name：目前支持ResourceKind（按事件关联的资源类型过滤）；Type（按事件类型过滤）
2. Filter.Values：
对于Name为ResourceKind，Values的可选取值为Deployment, Replicaset, Pod等K8S资源类型；
对于Name为Type，Values的可选取值仅为Normal或者Warning；
Values为多个的时候表示同时满足
3. Filter. Negative和Filter. Fuzzy没有使用
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def JobCategory(self):
        """描述任务的类型（可选值为FullManagedJob，SemiManagedJob，TaijiHYJob），默认值为FullManagedJob
        :rtype: str
        """
        return self._JobCategory

    @JobCategory.setter
    def JobCategory(self, JobCategory):
        self._JobCategory = JobCategory


    def _deserialize(self, params):
        self._Service = params.get("Service")
        self._ServiceId = params.get("ServiceId")
        self._ResourceName = params.get("ResourceName")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._JobCategory = params.get("JobCategory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeEventsResponse(AbstractModel):
    """DescribeEvents返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Events: 事件的列表
注意：此字段可能返回 null，表示取不到有效值。
        :type Events: list of Event
        :param _TotalCount: 此次查询的事件的个数
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Events = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def Events(self):
        """事件的列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Event
        """
        return self._Events

    @Events.setter
    def Events(self, Events):
        self._Events = Events

    @property
    def TotalCount(self):
        """此次查询的事件的个数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Events") is not None:
            self._Events = []
            for item in params.get("Events"):
                obj = Event()
                obj._deserialize(item)
                self._Events.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeExportRequest(AbstractModel):
    """DescribeExport请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ExportId: 日志下载任务的ID
        :type ExportId: str
        """
        self._ExportId = None

    @property
    def ExportId(self):
        """日志下载任务的ID
        :rtype: str
        """
        return self._ExportId

    @ExportId.setter
    def ExportId(self, ExportId):
        self._ExportId = ExportId


    def _deserialize(self, params):
        self._ExportId = params.get("ExportId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeExportResponse(AbstractModel):
    """DescribeExport返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ExportId: 日志下载任务的ID
        :type ExportId: str
        :param _FileName: 日志下载文件名
        :type FileName: str
        :param _CosPath: 日志导出路径,有效期一个小时，请尽快使用该路径下载。
        :type CosPath: str
        :param _CreateTime: 下载任务创建时间
        :type CreateTime: str
        :param _FileSize: 日志文件大小
        :type FileSize: str
        :param _Status: 日志下载状态。Processing:导出正在进行中，Completed:导出完成，Failed:导出失败，Expired:日志导出已过期(三天有效期), Queuing 排队中
        :type Status: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ExportId = None
        self._FileName = None
        self._CosPath = None
        self._CreateTime = None
        self._FileSize = None
        self._Status = None
        self._RequestId = None

    @property
    def ExportId(self):
        """日志下载任务的ID
        :rtype: str
        """
        return self._ExportId

    @ExportId.setter
    def ExportId(self, ExportId):
        self._ExportId = ExportId

    @property
    def FileName(self):
        """日志下载文件名
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def CosPath(self):
        """日志导出路径,有效期一个小时，请尽快使用该路径下载。
        :rtype: str
        """
        return self._CosPath

    @CosPath.setter
    def CosPath(self, CosPath):
        self._CosPath = CosPath

    @property
    def CreateTime(self):
        """下载任务创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def FileSize(self):
        """日志文件大小
        :rtype: str
        """
        return self._FileSize

    @FileSize.setter
    def FileSize(self, FileSize):
        self._FileSize = FileSize

    @property
    def Status(self):
        """日志下载状态。Processing:导出正在进行中，Completed:导出完成，Failed:导出失败，Expired:日志导出已过期(三天有效期), Queuing 排队中
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ExportId = params.get("ExportId")
        self._FileName = params.get("FileName")
        self._CosPath = params.get("CosPath")
        self._CreateTime = params.get("CreateTime")
        self._FileSize = params.get("FileSize")
        self._Status = params.get("Status")
        self._RequestId = params.get("RequestId")


class DescribeFilePreviewUrlRequest(AbstractModel):
    """DescribeFilePreviewUrl请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DataSourceId: CFS ID
        :type DataSourceId: str
        :param _File: 文件在cfs上的绝对路径
        :type File: str
        """
        self._DataSourceId = None
        self._File = None

    @property
    def DataSourceId(self):
        """CFS ID
        :rtype: str
        """
        return self._DataSourceId

    @DataSourceId.setter
    def DataSourceId(self, DataSourceId):
        self._DataSourceId = DataSourceId

    @property
    def File(self):
        """文件在cfs上的绝对路径
        :rtype: str
        """
        return self._File

    @File.setter
    def File(self, File):
        self._File = File


    def _deserialize(self, params):
        self._DataSourceId = params.get("DataSourceId")
        self._File = params.get("File")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFilePreviewUrlResponse(AbstractModel):
    """DescribeFilePreviewUrl返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Url: 预览路径
注意：此字段可能返回 null，表示取不到有效值。
        :type Url: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Url = None
        self._RequestId = None

    @property
    def Url(self):
        """预览路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Url

    @Url.setter
    def Url(self, Url):
        self._Url = Url

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Url = params.get("Url")
        self._RequestId = params.get("RequestId")


class DescribeFileStatusRequest(AbstractModel):
    """DescribeFileStatus请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Files: 文件列表
        :type Files: list of FileStatus
        """
        self._Files = None

    @property
    def Files(self):
        """文件列表
        :rtype: list of FileStatus
        """
        return self._Files

    @Files.setter
    def Files(self, Files):
        self._Files = Files


    def _deserialize(self, params):
        if params.get("Files") is not None:
            self._Files = []
            for item in params.get("Files"):
                obj = FileStatus()
                obj._deserialize(item)
                self._Files.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFileStatusResponse(AbstractModel):
    """DescribeFileStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Files: 文件列表
注意：此字段可能返回 null，表示取不到有效值。
        :type Files: list of FileStatus
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Files = None
        self._RequestId = None

    @property
    def Files(self):
        """文件列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of FileStatus
        """
        return self._Files

    @Files.setter
    def Files(self, Files):
        self._Files = Files

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Files") is not None:
            self._Files = []
            for item in params.get("Files"):
                obj = FileStatus()
                obj._deserialize(item)
                self._Files.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeFileSystemsWithPathAccessibilityRequest(AbstractModel):
    """DescribeFileSystemsWithPathAccessibility请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Limit: 分页
        :type Limit: int
        :param _Offset: 偏离值
        :type Offset: int
        :param _FileSystemId: 文件系统Id
        :type FileSystemId: str
        :param _FileSystemType: 文件系统类型，分普通型(CFS)和Turbo类型(CFSTurbo)
        :type FileSystemType: str
        """
        self._Limit = None
        self._Offset = None
        self._FileSystemId = None
        self._FileSystemType = None

    @property
    def Limit(self):
        """分页
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """偏离值
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def FileSystemId(self):
        """文件系统Id
        :rtype: str
        """
        return self._FileSystemId

    @FileSystemId.setter
    def FileSystemId(self, FileSystemId):
        self._FileSystemId = FileSystemId

    @property
    def FileSystemType(self):
        """文件系统类型，分普通型(CFS)和Turbo类型(CFSTurbo)
        :rtype: str
        """
        return self._FileSystemType

    @FileSystemType.setter
    def FileSystemType(self, FileSystemType):
        self._FileSystemType = FileSystemType


    def _deserialize(self, params):
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._FileSystemId = params.get("FileSystemId")
        self._FileSystemType = params.get("FileSystemType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFileSystemsWithPathAccessibilityResponse(AbstractModel):
    """DescribeFileSystemsWithPathAccessibility返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 总数量
        :type TotalCount: int
        :param _FileSystems: 文件系统列表
        :type FileSystems: list of FileSystemInfoWithPathAccessibility
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._FileSystems = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """总数量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def FileSystems(self):
        """文件系统列表
        :rtype: list of FileSystemInfoWithPathAccessibility
        """
        return self._FileSystems

    @FileSystems.setter
    def FileSystems(self, FileSystems):
        self._FileSystems = FileSystems

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("FileSystems") is not None:
            self._FileSystems = []
            for item in params.get("FileSystems"):
                obj = FileSystemInfoWithPathAccessibility()
                obj._deserialize(item)
                self._FileSystems.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeFixedPointRequest(AbstractModel):
    """DescribeFixedPoint请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFixedPointResponse(AbstractModel):
    """DescribeFixedPoint返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FixedPoint: 固定点数
        :type FixedPoint: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FixedPoint = None
        self._RequestId = None

    @property
    def FixedPoint(self):
        """固定点数
        :rtype: int
        """
        return self._FixedPoint

    @FixedPoint.setter
    def FixedPoint(self, FixedPoint):
        self._FixedPoint = FixedPoint

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FixedPoint = params.get("FixedPoint")
        self._RequestId = params.get("RequestId")


class DescribeFlowEvaluationDetailRequest(AbstractModel):
    """DescribeFlowEvaluationDetail请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunNodeId: 运行节点id
        :type FlowRunNodeId: str
        """
        self._FlowRunNodeId = None

    @property
    def FlowRunNodeId(self):
        """运行节点id
        :rtype: str
        """
        return self._FlowRunNodeId

    @FlowRunNodeId.setter
    def FlowRunNodeId(self, FlowRunNodeId):
        self._FlowRunNodeId = FlowRunNodeId


    def _deserialize(self, params):
        self._FlowRunNodeId = params.get("FlowRunNodeId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFlowEvaluationDetailResponse(AbstractModel):
    """DescribeFlowEvaluationDetail返回参数结构体

    """

    def __init__(self):
        r"""
        :param _EvaluationDetail: 评估报告cos临时地址
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationDetail: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._EvaluationDetail = None
        self._RequestId = None

    @property
    def EvaluationDetail(self):
        """评估报告cos临时地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._EvaluationDetail

    @EvaluationDetail.setter
    def EvaluationDetail(self, EvaluationDetail):
        self._EvaluationDetail = EvaluationDetail

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EvaluationDetail") is not None:
            self._EvaluationDetail = CosPathInfo()
            self._EvaluationDetail._deserialize(params.get("EvaluationDetail"))
        self._RequestId = params.get("RequestId")


class DescribeFlowModelTreeRequest(AbstractModel):
    """DescribeFlowModelTree请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunNodeId: 运行节点id
        :type FlowRunNodeId: str
        :param _ModelTreeLimit: 模型树长度；默认为20
        :type ModelTreeLimit: int
        """
        self._FlowRunNodeId = None
        self._ModelTreeLimit = None

    @property
    def FlowRunNodeId(self):
        """运行节点id
        :rtype: str
        """
        return self._FlowRunNodeId

    @FlowRunNodeId.setter
    def FlowRunNodeId(self, FlowRunNodeId):
        self._FlowRunNodeId = FlowRunNodeId

    @property
    def ModelTreeLimit(self):
        """模型树长度；默认为20
        :rtype: int
        """
        return self._ModelTreeLimit

    @ModelTreeLimit.setter
    def ModelTreeLimit(self, ModelTreeLimit):
        self._ModelTreeLimit = ModelTreeLimit


    def _deserialize(self, params):
        self._FlowRunNodeId = params.get("FlowRunNodeId")
        self._ModelTreeLimit = params.get("ModelTreeLimit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFlowModelTreeResponse(AbstractModel):
    """DescribeFlowModelTree返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelTree: pmml模型树 json 字符串
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelTree: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ModelTree = None
        self._RequestId = None

    @property
    def ModelTree(self):
        """pmml模型树 json 字符串
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelTree

    @ModelTree.setter
    def ModelTree(self, ModelTree):
        self._ModelTree = ModelTree

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ModelTree = params.get("ModelTree")
        self._RequestId = params.get("RequestId")


class DescribeFlowOperatorCategoriesRequest(AbstractModel):
    """DescribeFlowOperatorCategories请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DisableCamCheck: 是否不需要cam鉴权
        :type DisableCamCheck: bool
        """
        self._DisableCamCheck = None

    @property
    def DisableCamCheck(self):
        """是否不需要cam鉴权
        :rtype: bool
        """
        return self._DisableCamCheck

    @DisableCamCheck.setter
    def DisableCamCheck(self, DisableCamCheck):
        self._DisableCamCheck = DisableCamCheck


    def _deserialize(self, params):
        self._DisableCamCheck = params.get("DisableCamCheck")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFlowOperatorCategoriesResponse(AbstractModel):
    """DescribeFlowOperatorCategories返回参数结构体

    """

    def __init__(self):
        r"""
        :param _OperatorCategories: 算子类别目录
注意：此字段可能返回 null，表示取不到有效值。
        :type OperatorCategories: list of OperatorCategory
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._OperatorCategories = None
        self._RequestId = None

    @property
    def OperatorCategories(self):
        """算子类别目录
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of OperatorCategory
        """
        return self._OperatorCategories

    @OperatorCategories.setter
    def OperatorCategories(self, OperatorCategories):
        self._OperatorCategories = OperatorCategories

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("OperatorCategories") is not None:
            self._OperatorCategories = []
            for item in params.get("OperatorCategories"):
                obj = OperatorCategory()
                obj._deserialize(item)
                self._OperatorCategories.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeFlowOperatorsRequest(AbstractModel):
    """DescribeFlowOperators请求参数结构体

    """

    def __init__(self):
        r"""
        :param _OperatorIds: 算子id 不传的话，查询所有
        :type OperatorIds: list of str
        :param _DisableCamCheck: 是否不需要cam鉴权校验
        :type DisableCamCheck: bool
        """
        self._OperatorIds = None
        self._DisableCamCheck = None

    @property
    def OperatorIds(self):
        """算子id 不传的话，查询所有
        :rtype: list of str
        """
        return self._OperatorIds

    @OperatorIds.setter
    def OperatorIds(self, OperatorIds):
        self._OperatorIds = OperatorIds

    @property
    def DisableCamCheck(self):
        """是否不需要cam鉴权校验
        :rtype: bool
        """
        return self._DisableCamCheck

    @DisableCamCheck.setter
    def DisableCamCheck(self, DisableCamCheck):
        self._DisableCamCheck = DisableCamCheck


    def _deserialize(self, params):
        self._OperatorIds = params.get("OperatorIds")
        self._DisableCamCheck = params.get("DisableCamCheck")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFlowOperatorsResponse(AbstractModel):
    """DescribeFlowOperators返回参数结构体

    """

    def __init__(self):
        r"""
        :param _OperatorDetails: 算子详情，组件详情json 序列化后的字符串
注意：此字段可能返回 null，表示取不到有效值。
        :type OperatorDetails: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._OperatorDetails = None
        self._RequestId = None

    @property
    def OperatorDetails(self):
        """算子详情，组件详情json 序列化后的字符串
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._OperatorDetails

    @OperatorDetails.setter
    def OperatorDetails(self, OperatorDetails):
        self._OperatorDetails = OperatorDetails

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._OperatorDetails = params.get("OperatorDetails")
        self._RequestId = params.get("RequestId")


class DescribeFlowPreviewColumnRequest(AbstractModel):
    """DescribeFlowPreviewColumn请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunNodeId: 节点运行ID
        :type FlowRunNodeId: str
        :param _OutputKey: 节点输出预览的Key
        :type OutputKey: str
        :param _PreviewColumn: 节点输出预览的列名
        :type PreviewColumn: str
        """
        self._FlowRunNodeId = None
        self._OutputKey = None
        self._PreviewColumn = None

    @property
    def FlowRunNodeId(self):
        """节点运行ID
        :rtype: str
        """
        return self._FlowRunNodeId

    @FlowRunNodeId.setter
    def FlowRunNodeId(self, FlowRunNodeId):
        self._FlowRunNodeId = FlowRunNodeId

    @property
    def OutputKey(self):
        """节点输出预览的Key
        :rtype: str
        """
        return self._OutputKey

    @OutputKey.setter
    def OutputKey(self, OutputKey):
        self._OutputKey = OutputKey

    @property
    def PreviewColumn(self):
        """节点输出预览的列名
        :rtype: str
        """
        return self._PreviewColumn

    @PreviewColumn.setter
    def PreviewColumn(self, PreviewColumn):
        self._PreviewColumn = PreviewColumn


    def _deserialize(self, params):
        self._FlowRunNodeId = params.get("FlowRunNodeId")
        self._OutputKey = params.get("OutputKey")
        self._PreviewColumn = params.get("PreviewColumn")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFlowPreviewColumnResponse(AbstractModel):
    """DescribeFlowPreviewColumn返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ColumnStatistic: JSON格式特征列
        :type ColumnStatistic: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ColumnStatistic = None
        self._RequestId = None

    @property
    def ColumnStatistic(self):
        """JSON格式特征列
        :rtype: str
        """
        return self._ColumnStatistic

    @ColumnStatistic.setter
    def ColumnStatistic(self, ColumnStatistic):
        self._ColumnStatistic = ColumnStatistic

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ColumnStatistic = params.get("ColumnStatistic")
        self._RequestId = params.get("RequestId")


class DescribeFlowPreviewDatasRequest(AbstractModel):
    """DescribeFlowPreviewDatas请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunNodeId: 节点运行ID
        :type FlowRunNodeId: str
        :param _OutputKey: 节点输出预览的Key
        :type OutputKey: str
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        :param _Limit: 返回数量，默认为10，最大为200
        :type Limit: int
        """
        self._FlowRunNodeId = None
        self._OutputKey = None
        self._Offset = None
        self._Limit = None

    @property
    def FlowRunNodeId(self):
        """节点运行ID
        :rtype: str
        """
        return self._FlowRunNodeId

    @FlowRunNodeId.setter
    def FlowRunNodeId(self, FlowRunNodeId):
        self._FlowRunNodeId = FlowRunNodeId

    @property
    def OutputKey(self):
        """节点输出预览的Key
        :rtype: str
        """
        return self._OutputKey

    @OutputKey.setter
    def OutputKey(self, OutputKey):
        self._OutputKey = OutputKey

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回数量，默认为10，最大为200
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._FlowRunNodeId = params.get("FlowRunNodeId")
        self._OutputKey = params.get("OutputKey")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFlowPreviewDatasResponse(AbstractModel):
    """DescribeFlowPreviewDatas返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 总量
        :type TotalCount: int
        :param _PreviewDatas: 预览数据JSON格式数组
        :type PreviewDatas: list of str
        :param _PreviewCosPath: 预览数据COS信息
        :type PreviewCosPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._PreviewDatas = None
        self._PreviewCosPath = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """总量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def PreviewDatas(self):
        """预览数据JSON格式数组
        :rtype: list of str
        """
        return self._PreviewDatas

    @PreviewDatas.setter
    def PreviewDatas(self, PreviewDatas):
        self._PreviewDatas = PreviewDatas

    @property
    def PreviewCosPath(self):
        """预览数据COS信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._PreviewCosPath

    @PreviewCosPath.setter
    def PreviewCosPath(self, PreviewCosPath):
        self._PreviewCosPath = PreviewCosPath

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        self._PreviewDatas = params.get("PreviewDatas")
        if params.get("PreviewCosPath") is not None:
            self._PreviewCosPath = CosPathInfo()
            self._PreviewCosPath._deserialize(params.get("PreviewCosPath"))
        self._RequestId = params.get("RequestId")


class DescribeFlowPreviewPathRequest(AbstractModel):
    """DescribeFlowPreviewPath请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunNodeId: 运行节点ID
        :type FlowRunNodeId: str
        :param _OutputKey: 输出预览的Key
        :type OutputKey: str
        """
        self._FlowRunNodeId = None
        self._OutputKey = None

    @property
    def FlowRunNodeId(self):
        """运行节点ID
        :rtype: str
        """
        return self._FlowRunNodeId

    @FlowRunNodeId.setter
    def FlowRunNodeId(self, FlowRunNodeId):
        self._FlowRunNodeId = FlowRunNodeId

    @property
    def OutputKey(self):
        """输出预览的Key
        :rtype: str
        """
        return self._OutputKey

    @OutputKey.setter
    def OutputKey(self, OutputKey):
        self._OutputKey = OutputKey


    def _deserialize(self, params):
        self._FlowRunNodeId = params.get("FlowRunNodeId")
        self._OutputKey = params.get("OutputKey")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFlowPreviewPathResponse(AbstractModel):
    """DescribeFlowPreviewPath返回参数结构体

    """

    def __init__(self):
        r"""
        :param _PreviewCosPath: 预览数据COS信息
        :type PreviewCosPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._PreviewCosPath = None
        self._RequestId = None

    @property
    def PreviewCosPath(self):
        """预览数据COS信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._PreviewCosPath

    @PreviewCosPath.setter
    def PreviewCosPath(self, PreviewCosPath):
        self._PreviewCosPath = PreviewCosPath

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("PreviewCosPath") is not None:
            self._PreviewCosPath = CosPathInfo()
            self._PreviewCosPath._deserialize(params.get("PreviewCosPath"))
        self._RequestId = params.get("RequestId")


class DescribeFlowRequest(AbstractModel):
    """DescribeFlow请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流ID
        :type FlowId: str
        """
        self._FlowId = None

    @property
    def FlowId(self):
        """工作流ID
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFlowResponse(AbstractModel):
    """DescribeFlow返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowDetail: 工作流详情
        :type FlowDetail: :class:`tencentcloud.tione.v20211111.models.FlowDetail`
        :param _Nodes: 工作流节点数组
        :type Nodes: list of FlowNode
        :param _Edges: 工作流边数组
        :type Edges: list of FlowEdge
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowDetail = None
        self._Nodes = None
        self._Edges = None
        self._RequestId = None

    @property
    def FlowDetail(self):
        """工作流详情
        :rtype: :class:`tencentcloud.tione.v20211111.models.FlowDetail`
        """
        return self._FlowDetail

    @FlowDetail.setter
    def FlowDetail(self, FlowDetail):
        self._FlowDetail = FlowDetail

    @property
    def Nodes(self):
        """工作流节点数组
        :rtype: list of FlowNode
        """
        return self._Nodes

    @Nodes.setter
    def Nodes(self, Nodes):
        self._Nodes = Nodes

    @property
    def Edges(self):
        """工作流边数组
        :rtype: list of FlowEdge
        """
        return self._Edges

    @Edges.setter
    def Edges(self, Edges):
        self._Edges = Edges

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FlowDetail") is not None:
            self._FlowDetail = FlowDetail()
            self._FlowDetail._deserialize(params.get("FlowDetail"))
        if params.get("Nodes") is not None:
            self._Nodes = []
            for item in params.get("Nodes"):
                obj = FlowNode()
                obj._deserialize(item)
                self._Nodes.append(obj)
        if params.get("Edges") is not None:
            self._Edges = []
            for item in params.get("Edges"):
                obj = FlowEdge()
                obj._deserialize(item)
                self._Edges.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeFlowRunRequest(AbstractModel):
    """DescribeFlowRun请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunId: 工作流的执行ID
        :type FlowRunId: str
        """
        self._FlowRunId = None

    @property
    def FlowRunId(self):
        """工作流的执行ID
        :rtype: str
        """
        return self._FlowRunId

    @FlowRunId.setter
    def FlowRunId(self, FlowRunId):
        self._FlowRunId = FlowRunId


    def _deserialize(self, params):
        self._FlowRunId = params.get("FlowRunId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFlowRunResponse(AbstractModel):
    """DescribeFlowRun返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunDetail: 工作流的运行详情
        :type FlowRunDetail: :class:`tencentcloud.tione.v20211111.models.FlowRunDetail`
        :param _Nodes: 工作流的运行节点数组
        :type Nodes: list of FlowRunNode
        :param _Edges: 工作流的运行边数组
        :type Edges: list of FlowEdge
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowRunDetail = None
        self._Nodes = None
        self._Edges = None
        self._RequestId = None

    @property
    def FlowRunDetail(self):
        """工作流的运行详情
        :rtype: :class:`tencentcloud.tione.v20211111.models.FlowRunDetail`
        """
        return self._FlowRunDetail

    @FlowRunDetail.setter
    def FlowRunDetail(self, FlowRunDetail):
        self._FlowRunDetail = FlowRunDetail

    @property
    def Nodes(self):
        """工作流的运行节点数组
        :rtype: list of FlowRunNode
        """
        return self._Nodes

    @Nodes.setter
    def Nodes(self, Nodes):
        self._Nodes = Nodes

    @property
    def Edges(self):
        """工作流的运行边数组
        :rtype: list of FlowEdge
        """
        return self._Edges

    @Edges.setter
    def Edges(self, Edges):
        self._Edges = Edges

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FlowRunDetail") is not None:
            self._FlowRunDetail = FlowRunDetail()
            self._FlowRunDetail._deserialize(params.get("FlowRunDetail"))
        if params.get("Nodes") is not None:
            self._Nodes = []
            for item in params.get("Nodes"):
                obj = FlowRunNode()
                obj._deserialize(item)
                self._Nodes.append(obj)
        if params.get("Edges") is not None:
            self._Edges = []
            for item in params.get("Edges"):
                obj = FlowEdge()
                obj._deserialize(item)
                self._Edges.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeFlowRunsRequest(AbstractModel):
    """DescribeFlowRuns请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流ID
        :type FlowId: str
        :param _Limit: 返回数量，默认为10，最大为50
        :type Limit: int
        :param _Order: 输出列表的排列顺序。取值范围：ASC（升序排列）/ DESC（降序排列），默认为DESC
        :type Order: str
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        :param _StartTime: 过滤的开始时间（RFC3339格式的时间字符串）。格式如：2021-11-30T16:22:09+08:00
        :type StartTime: str
        :param _EndTime: 过滤的结束时间（RFC3339格式的时间字符串）。格式如：2021-11-30T16:22:09+08:00
        :type EndTime: str
        :param _Filters: 过滤条件
Filter.Name: 枚举值: 
                    RunType： 工作流执行的运行类型
                    Status： 工作流状态
Filter.Values: 长度为1时，支持模糊查询; 不为1时，精确查询
每次请求的Filters的上限为10，Filter.Values的上限为100
        :type Filters: list of Filter
        """
        self._FlowId = None
        self._Limit = None
        self._Order = None
        self._Offset = None
        self._StartTime = None
        self._EndTime = None
        self._Filters = None

    @property
    def FlowId(self):
        """工作流ID
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def Limit(self):
        """返回数量，默认为10，最大为50
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """输出列表的排列顺序。取值范围：ASC（升序排列）/ DESC（降序排列），默认为DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def StartTime(self):
        """过滤的开始时间（RFC3339格式的时间字符串）。格式如：2021-11-30T16:22:09+08:00
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """过滤的结束时间（RFC3339格式的时间字符串）。格式如：2021-11-30T16:22:09+08:00
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Filters(self):
        """过滤条件
Filter.Name: 枚举值: 
                    RunType： 工作流执行的运行类型
                    Status： 工作流状态
Filter.Values: 长度为1时，支持模糊查询; 不为1时，精确查询
每次请求的Filters的上限为10，Filter.Values的上限为100
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._Offset = params.get("Offset")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFlowRunsResponse(AbstractModel):
    """DescribeFlowRuns返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 总量
        :type TotalCount: int
        :param _FlowRunSet: 工作流的运行数组
        :type FlowRunSet: list of FlowRunDetail
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._FlowRunSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """总量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def FlowRunSet(self):
        """工作流的运行数组
        :rtype: list of FlowRunDetail
        """
        return self._FlowRunSet

    @FlowRunSet.setter
    def FlowRunSet(self, FlowRunSet):
        self._FlowRunSet = FlowRunSet

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("FlowRunSet") is not None:
            self._FlowRunSet = []
            for item in params.get("FlowRunSet"):
                obj = FlowRunDetail()
                obj._deserialize(item)
                self._FlowRunSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeFlowSummaryRequest(AbstractModel):
    """DescribeFlowSummary请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流ID
        :type FlowId: str
        """
        self._FlowId = None

    @property
    def FlowId(self):
        """工作流ID
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFlowSummaryResponse(AbstractModel):
    """DescribeFlowSummary返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowDetail: 工作流详情
        :type FlowDetail: :class:`tencentcloud.tione.v20211111.models.FlowSummaryDetail`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowDetail = None
        self._RequestId = None

    @property
    def FlowDetail(self):
        """工作流详情
        :rtype: :class:`tencentcloud.tione.v20211111.models.FlowSummaryDetail`
        """
        return self._FlowDetail

    @FlowDetail.setter
    def FlowDetail(self, FlowDetail):
        self._FlowDetail = FlowDetail

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FlowDetail") is not None:
            self._FlowDetail = FlowSummaryDetail()
            self._FlowDetail._deserialize(params.get("FlowDetail"))
        self._RequestId = params.get("RequestId")


class DescribeFlowsRequest(AbstractModel):
    """DescribeFlows请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤条件
Filter.Name: 枚举值: FlowId： 工作流ID
                    ProjectId：工程ID
                    FlowName： 工作流名称
                    Status： 工作流状态
Filter.Values: 长度为1时，支持模糊查询; 不为1时，精确查询
每次请求的Filters的上限为10，Filter.Values的上限为100
        :type Filters: list of Filter
        :param _TagFilters: 标签过滤器，eg：[{ "TagKey": "TagKeyA", "TagValue": ["TagValueA"] }]
        :type TagFilters: list of TagFilter
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        :param _Limit: 返回数量，默认为10，最大为50
        :type Limit: int
        :param _Order: 输出列表的排列顺序。取值范围：ASC（升序排列）/ DESC（降序排列），默认为DESC
        :type Order: str
        :param _OrderField: 排序的依据字段， 取值范围 "CreateTime" "UpdateTime"
        :type OrderField: str
        :param _SearchWord: 关键字过滤，可以用来匹配名称或ID
        :type SearchWord: str
        """
        self._Filters = None
        self._TagFilters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._OrderField = None
        self._SearchWord = None

    @property
    def Filters(self):
        """过滤条件
Filter.Name: 枚举值: FlowId： 工作流ID
                    ProjectId：工程ID
                    FlowName： 工作流名称
                    Status： 工作流状态
Filter.Values: 长度为1时，支持模糊查询; 不为1时，精确查询
每次请求的Filters的上限为10，Filter.Values的上限为100
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签过滤器，eg：[{ "TagKey": "TagKeyA", "TagValue": ["TagValueA"] }]
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回数量，默认为10，最大为50
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """输出列表的排列顺序。取值范围：ASC（升序排列）/ DESC（降序排列），默认为DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """排序的依据字段， 取值范围 "CreateTime" "UpdateTime"
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def SearchWord(self):
        """关键字过滤，可以用来匹配名称或ID
        :rtype: str
        """
        return self._SearchWord

    @SearchWord.setter
    def SearchWord(self, SearchWord):
        self._SearchWord = SearchWord


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        self._SearchWord = params.get("SearchWord")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeFlowsResponse(AbstractModel):
    """DescribeFlows返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 总量
        :type TotalCount: int
        :param _FlowSet: 工作流数组
        :type FlowSet: list of FlowDetail
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._FlowSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """总量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def FlowSet(self):
        """工作流数组
        :rtype: list of FlowDetail
        """
        return self._FlowSet

    @FlowSet.setter
    def FlowSet(self, FlowSet):
        self._FlowSet = FlowSet

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("FlowSet") is not None:
            self._FlowSet = []
            for item in params.get("FlowSet"):
                obj = FlowDetail()
                obj._deserialize(item)
                self._FlowSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeILabelDataValidityRequest(AbstractModel):
    """DescribeILabelDataValidity请求参数结构体

    """

    def __init__(self):
        r"""
        :param _PersonalAnnotationType: 场景类型
        :type PersonalAnnotationType: str
        :param _LabelURL: 测试数据标注文本所在COS路径
        :type LabelURL: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _AnnotationFormat: 标注格式
        :type AnnotationFormat: str
        """
        self._PersonalAnnotationType = None
        self._LabelURL = None
        self._AnnotationFormat = None

    @property
    def PersonalAnnotationType(self):
        """场景类型
        :rtype: str
        """
        return self._PersonalAnnotationType

    @PersonalAnnotationType.setter
    def PersonalAnnotationType(self, PersonalAnnotationType):
        self._PersonalAnnotationType = PersonalAnnotationType

    @property
    def LabelURL(self):
        """测试数据标注文本所在COS路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._LabelURL

    @LabelURL.setter
    def LabelURL(self, LabelURL):
        self._LabelURL = LabelURL

    @property
    def AnnotationFormat(self):
        """标注格式
        :rtype: str
        """
        return self._AnnotationFormat

    @AnnotationFormat.setter
    def AnnotationFormat(self, AnnotationFormat):
        self._AnnotationFormat = AnnotationFormat


    def _deserialize(self, params):
        self._PersonalAnnotationType = params.get("PersonalAnnotationType")
        if params.get("LabelURL") is not None:
            self._LabelURL = CosPathInfo()
            self._LabelURL._deserialize(params.get("LabelURL"))
        self._AnnotationFormat = params.get("AnnotationFormat")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeILabelDataValidityResponse(AbstractModel):
    """DescribeILabelDataValidity返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 异步任务id,
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """异步任务id,
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class DescribeImagesInfoRequest(AbstractModel):
    """DescribeImagesInfo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 请求的任务
        :type TaskId: str
        :param _Offset: 查询的页数
        :type Offset: int
        :param _Limit: 查询的大小
        :type Limit: int
        :param _Filters: 过滤条件
        :type Filters: list of Filter
        :param _OnlyResult: 是否只获取标注结果
        :type OnlyResult: bool
        :param _BitShift: 指定位移量，与fileid使用
        :type BitShift: int
        """
        self._TaskId = None
        self._Offset = None
        self._Limit = None
        self._Filters = None
        self._OnlyResult = None
        self._BitShift = None

    @property
    def TaskId(self):
        """请求的任务
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Offset(self):
        """查询的页数
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """查询的大小
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        """过滤条件
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OnlyResult(self):
        """是否只获取标注结果
        :rtype: bool
        """
        return self._OnlyResult

    @OnlyResult.setter
    def OnlyResult(self, OnlyResult):
        self._OnlyResult = OnlyResult

    @property
    def BitShift(self):
        """指定位移量，与fileid使用
        :rtype: int
        """
        return self._BitShift

    @BitShift.setter
    def BitShift(self, BitShift):
        self._BitShift = BitShift


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._OnlyResult = params.get("OnlyResult")
        self._BitShift = params.get("BitShift")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeImagesInfoResponse(AbstractModel):
    """DescribeImagesInfo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Total: 总数
        :type Total: int
        :param _ImageList: 图片相关信息
        :type ImageList: list of Image
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Total = None
        self._ImageList = None
        self._RequestId = None

    @property
    def Total(self):
        """总数
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def ImageList(self):
        """图片相关信息
        :rtype: list of Image
        """
        return self._ImageList

    @ImageList.setter
    def ImageList(self, ImageList):
        self._ImageList = ImageList

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("ImageList") is not None:
            self._ImageList = []
            for item in params.get("ImageList"):
                obj = Image()
                obj._deserialize(item)
                self._ImageList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeInferCodeRequest(AbstractModel):
    """DescribeInferCode请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelVersionId: 某个模型版本的唯一id
        :type ModelVersionId: str
        """
        self._ModelVersionId = None

    @property
    def ModelVersionId(self):
        """某个模型版本的唯一id
        :rtype: str
        """
        return self._ModelVersionId

    @ModelVersionId.setter
    def ModelVersionId(self, ModelVersionId):
        self._ModelVersionId = ModelVersionId


    def _deserialize(self, params):
        self._ModelVersionId = params.get("ModelVersionId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeInferCodeResponse(AbstractModel):
    """DescribeInferCode返回参数结构体

    """

    def __init__(self):
        r"""
        :param _InferCodeUploaded: 推理代码是否已上传
注意：此字段可能返回 null，表示取不到有效值。
        :type InferCodeUploaded: bool
        :param _InferCodeInfo: 推理代码的详细信息
注意：此字段可能返回 null，表示取不到有效值。
        :type InferCodeInfo: :class:`tencentcloud.tione.v20211111.models.InferCodeInfo`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._InferCodeUploaded = None
        self._InferCodeInfo = None
        self._RequestId = None

    @property
    def InferCodeUploaded(self):
        """推理代码是否已上传
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._InferCodeUploaded

    @InferCodeUploaded.setter
    def InferCodeUploaded(self, InferCodeUploaded):
        self._InferCodeUploaded = InferCodeUploaded

    @property
    def InferCodeInfo(self):
        """推理代码的详细信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.InferCodeInfo`
        """
        return self._InferCodeInfo

    @InferCodeInfo.setter
    def InferCodeInfo(self, InferCodeInfo):
        self._InferCodeInfo = InferCodeInfo

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._InferCodeUploaded = params.get("InferCodeUploaded")
        if params.get("InferCodeInfo") is not None:
            self._InferCodeInfo = InferCodeInfo()
            self._InferCodeInfo._deserialize(params.get("InferCodeInfo"))
        self._RequestId = params.get("RequestId")


class DescribeInferGatewayStatusRequest(AbstractModel):
    """DescribeInferGatewayStatus请求参数结构体

    """


class DescribeInferGatewayStatusResponse(AbstractModel):
    """DescribeInferGatewayStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _GatewayStatus: 网关的状态
        :type GatewayStatus: str
        :param _Description: 网关状态的详细描述
        :type Description: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._GatewayStatus = None
        self._Description = None
        self._RequestId = None

    @property
    def GatewayStatus(self):
        """网关的状态
        :rtype: str
        """
        return self._GatewayStatus

    @GatewayStatus.setter
    def GatewayStatus(self, GatewayStatus):
        self._GatewayStatus = GatewayStatus

    @property
    def Description(self):
        """网关状态的详细描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._GatewayStatus = params.get("GatewayStatus")
        self._Description = params.get("Description")
        self._RequestId = params.get("RequestId")


class DescribeInferTemplatesRequest(AbstractModel):
    """DescribeInferTemplates请求参数结构体

    """


class DescribeInferTemplatesResponse(AbstractModel):
    """DescribeInferTemplates返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FrameworkTemplates: 模板列表
注意：此字段可能返回 null，表示取不到有效值。
        :type FrameworkTemplates: list of InferTemplateGroup
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FrameworkTemplates = None
        self._RequestId = None

    @property
    def FrameworkTemplates(self):
        """模板列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of InferTemplateGroup
        """
        return self._FrameworkTemplates

    @FrameworkTemplates.setter
    def FrameworkTemplates(self, FrameworkTemplates):
        self._FrameworkTemplates = FrameworkTemplates

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FrameworkTemplates") is not None:
            self._FrameworkTemplates = []
            for item in params.get("FrameworkTemplates"):
                obj = InferTemplateGroup()
                obj._deserialize(item)
                self._FrameworkTemplates.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeInsideActionRequest(AbstractModel):
    """DescribeInsideAction请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ActionParam: 内网接口名
        :type ActionParam: str
        :param _HeadersParam: 请求头
        :type HeadersParam: str
        :param _PayloadParam: 请求体
        :type PayloadParam: str
        """
        self._ActionParam = None
        self._HeadersParam = None
        self._PayloadParam = None

    @property
    def ActionParam(self):
        """内网接口名
        :rtype: str
        """
        return self._ActionParam

    @ActionParam.setter
    def ActionParam(self, ActionParam):
        self._ActionParam = ActionParam

    @property
    def HeadersParam(self):
        """请求头
        :rtype: str
        """
        return self._HeadersParam

    @HeadersParam.setter
    def HeadersParam(self, HeadersParam):
        self._HeadersParam = HeadersParam

    @property
    def PayloadParam(self):
        """请求体
        :rtype: str
        """
        return self._PayloadParam

    @PayloadParam.setter
    def PayloadParam(self, PayloadParam):
        self._PayloadParam = PayloadParam


    def _deserialize(self, params):
        self._ActionParam = params.get("ActionParam")
        self._HeadersParam = params.get("HeadersParam")
        self._PayloadParam = params.get("PayloadParam")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeInsideActionResponse(AbstractModel):
    """DescribeInsideAction返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Data: 请求结果
注意：此字段可能返回 null，表示取不到有效值。
        :type Data: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Data = None
        self._RequestId = None

    @property
    def Data(self):
        """请求结果
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._RequestId = params.get("RequestId")


class DescribeInstanceCredentialRequest(AbstractModel):
    """DescribeInstanceCredential请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AuthToken: 认证Token
        :type AuthToken: str
        :param _Caller: 调用方地址
        :type Caller: str
        """
        self._AuthToken = None
        self._Caller = None

    @property
    def AuthToken(self):
        """认证Token
        :rtype: str
        """
        return self._AuthToken

    @AuthToken.setter
    def AuthToken(self, AuthToken):
        self._AuthToken = AuthToken

    @property
    def Caller(self):
        """调用方地址
        :rtype: str
        """
        return self._Caller

    @Caller.setter
    def Caller(self, Caller):
        self._Caller = Caller


    def _deserialize(self, params):
        self._AuthToken = params.get("AuthToken")
        self._Caller = params.get("Caller")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeInstanceCredentialResponse(AbstractModel):
    """DescribeInstanceCredential返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TmpSecretId: 密钥ID
        :type TmpSecretId: str
        :param _TmpSecretKey: 密钥Key
        :type TmpSecretKey: str
        :param _Token: 密钥Token
        :type Token: str
        :param _ExpiredTime: 过期时间戳	
注意：此字段可能返回 null，表示取不到有效值。
        :type ExpiredTime: int
        :param _Expiration: 过期时间
注意：此字段可能返回 null，表示取不到有效值。
        :type Expiration: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TmpSecretId = None
        self._TmpSecretKey = None
        self._Token = None
        self._ExpiredTime = None
        self._Expiration = None
        self._RequestId = None

    @property
    def TmpSecretId(self):
        """密钥ID
        :rtype: str
        """
        return self._TmpSecretId

    @TmpSecretId.setter
    def TmpSecretId(self, TmpSecretId):
        self._TmpSecretId = TmpSecretId

    @property
    def TmpSecretKey(self):
        """密钥Key
        :rtype: str
        """
        return self._TmpSecretKey

    @TmpSecretKey.setter
    def TmpSecretKey(self, TmpSecretKey):
        self._TmpSecretKey = TmpSecretKey

    @property
    def Token(self):
        """密钥Token
        :rtype: str
        """
        return self._Token

    @Token.setter
    def Token(self, Token):
        self._Token = Token

    @property
    def ExpiredTime(self):
        """过期时间戳	
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ExpiredTime

    @ExpiredTime.setter
    def ExpiredTime(self, ExpiredTime):
        self._ExpiredTime = ExpiredTime

    @property
    def Expiration(self):
        """过期时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Expiration

    @Expiration.setter
    def Expiration(self, Expiration):
        self._Expiration = Expiration

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TmpSecretId = params.get("TmpSecretId")
        self._TmpSecretKey = params.get("TmpSecretKey")
        self._Token = params.get("Token")
        self._ExpiredTime = params.get("ExpiredTime")
        self._Expiration = params.get("Expiration")
        self._RequestId = params.get("RequestId")


class DescribeInstanceSemiProgressRequest(AbstractModel):
    """DescribeInstanceSemiProgress请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组id
        :type ResourceGroupId: str
        :param _ResourceInstanceId: 实例id
        :type ResourceInstanceId: str
        """
        self._ResourceGroupId = None
        self._ResourceInstanceId = None

    @property
    def ResourceGroupId(self):
        """资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceInstanceId(self):
        """实例id
        :rtype: str
        """
        return self._ResourceInstanceId

    @ResourceInstanceId.setter
    def ResourceInstanceId(self, ResourceInstanceId):
        self._ResourceInstanceId = ResourceInstanceId


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ResourceInstanceId = params.get("ResourceInstanceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeInstanceSemiProgressResponse(AbstractModel):
    """DescribeInstanceSemiProgress返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceInstanceId: 实例id
        :type ResourceInstanceId: str
        :param _ResourceCvmInstanceId: 实例对应的cvm id
        :type ResourceCvmInstanceId: str
        :param _ResourceStatus: 实例状态
        :type ResourceStatus: str
        :param _SemiProgressSet: 纳管进度信息
        :type SemiProgressSet: list of SemiProgress
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ResourceInstanceId = None
        self._ResourceCvmInstanceId = None
        self._ResourceStatus = None
        self._SemiProgressSet = None
        self._RequestId = None

    @property
    def ResourceInstanceId(self):
        """实例id
        :rtype: str
        """
        return self._ResourceInstanceId

    @ResourceInstanceId.setter
    def ResourceInstanceId(self, ResourceInstanceId):
        self._ResourceInstanceId = ResourceInstanceId

    @property
    def ResourceCvmInstanceId(self):
        """实例对应的cvm id
        :rtype: str
        """
        return self._ResourceCvmInstanceId

    @ResourceCvmInstanceId.setter
    def ResourceCvmInstanceId(self, ResourceCvmInstanceId):
        self._ResourceCvmInstanceId = ResourceCvmInstanceId

    @property
    def ResourceStatus(self):
        """实例状态
        :rtype: str
        """
        return self._ResourceStatus

    @ResourceStatus.setter
    def ResourceStatus(self, ResourceStatus):
        self._ResourceStatus = ResourceStatus

    @property
    def SemiProgressSet(self):
        """纳管进度信息
        :rtype: list of SemiProgress
        """
        return self._SemiProgressSet

    @SemiProgressSet.setter
    def SemiProgressSet(self, SemiProgressSet):
        self._SemiProgressSet = SemiProgressSet

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ResourceInstanceId = params.get("ResourceInstanceId")
        self._ResourceCvmInstanceId = params.get("ResourceCvmInstanceId")
        self._ResourceStatus = params.get("ResourceStatus")
        if params.get("SemiProgressSet") is not None:
            self._SemiProgressSet = []
            for item in params.get("SemiProgressSet"):
                obj = SemiProgress()
                obj._deserialize(item)
                self._SemiProgressSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeIsTaskNameExistRequest(AbstractModel):
    """DescribeIsTaskNameExist请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskName: 新建标注任务的名称
        :type TaskName: str
        """
        self._TaskName = None

    @property
    def TaskName(self):
        """新建标注任务的名称
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName


    def _deserialize(self, params):
        self._TaskName = params.get("TaskName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeIsTaskNameExistResponse(AbstractModel):
    """DescribeIsTaskNameExist返回参数结构体

    """

    def __init__(self):
        r"""
        :param _IsExist: true：重复；false：不重复
        :type IsExist: bool
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._IsExist = None
        self._RequestId = None

    @property
    def IsExist(self):
        """true：重复；false：不重复
        :rtype: bool
        """
        return self._IsExist

    @IsExist.setter
    def IsExist(self, IsExist):
        self._IsExist = IsExist

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._IsExist = params.get("IsExist")
        self._RequestId = params.get("RequestId")


class DescribeLabelColorRequest(AbstractModel):
    """DescribeLabelColor请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Offset: 偏移量
        :type Offset: int
        :param _Limit: 限制数
        :type Limit: int
        """
        self._Offset = None
        self._Limit = None

    @property
    def Offset(self):
        """偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """限制数
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLabelColorResponse(AbstractModel):
    """DescribeLabelColor返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Total: 总数
        :type Total: int
        :param _Colors: 标签颜色
        :type Colors: list of LabelColor
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Total = None
        self._Colors = None
        self._RequestId = None

    @property
    def Total(self):
        """总数
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def Colors(self):
        """标签颜色
        :rtype: list of LabelColor
        """
        return self._Colors

    @Colors.setter
    def Colors(self, Colors):
        self._Colors = Colors

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("Colors") is not None:
            self._Colors = []
            for item in params.get("Colors"):
                obj = LabelColor()
                obj._deserialize(item)
                self._Colors.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeLastRunNodesRequest(AbstractModel):
    """DescribeLastRunNodes请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流ID
        :type FlowId: str
        """
        self._FlowId = None

    @property
    def FlowId(self):
        """工作流ID
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLastRunNodesResponse(AbstractModel):
    """DescribeLastRunNodes返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流Id
        :type FlowId: str
        :param _RunNodes: 运行的节点状态数组
        :type RunNodes: list of FlowRunNode
        :param _FlowStatus: 工作流状态。值如下：
   NotRun: 新保存未运行
   Starting:启动中
   Running： 运行中
   Stopping： 停止中
   Stopped： 已停止
   Failed：失败
   Succeeded：成功
        :type FlowStatus: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowId = None
        self._RunNodes = None
        self._FlowStatus = None
        self._RequestId = None

    @property
    def FlowId(self):
        """工作流Id
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def RunNodes(self):
        """运行的节点状态数组
        :rtype: list of FlowRunNode
        """
        return self._RunNodes

    @RunNodes.setter
    def RunNodes(self, RunNodes):
        self._RunNodes = RunNodes

    @property
    def FlowStatus(self):
        """工作流状态。值如下：
   NotRun: 新保存未运行
   Starting:启动中
   Running： 运行中
   Stopping： 停止中
   Stopped： 已停止
   Failed：失败
   Succeeded：成功
        :rtype: str
        """
        return self._FlowStatus

    @FlowStatus.setter
    def FlowStatus(self, FlowStatus):
        self._FlowStatus = FlowStatus

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        if params.get("RunNodes") is not None:
            self._RunNodes = []
            for item in params.get("RunNodes"):
                obj = FlowRunNode()
                obj._deserialize(item)
                self._RunNodes.append(obj)
        self._FlowStatus = params.get("FlowStatus")
        self._RequestId = params.get("RequestId")


class DescribeLatestComparisonEvaluationsRequest(AbstractModel):
    """DescribeLatestComparisonEvaluations请求参数结构体

    """


class DescribeLatestComparisonEvaluationsResponse(AbstractModel):
    """DescribeLatestComparisonEvaluations返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ObjectiveEvaluations: 所选的客观评测列表
        :type ObjectiveEvaluations: list of ObjectiveEvaluation
        :param _SubjectiveEvaluations: 所选的主观评测列表
        :type SubjectiveEvaluations: list of SubjectiveEvaluation
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ObjectiveEvaluations = None
        self._SubjectiveEvaluations = None
        self._RequestId = None

    @property
    def ObjectiveEvaluations(self):
        """所选的客观评测列表
        :rtype: list of ObjectiveEvaluation
        """
        return self._ObjectiveEvaluations

    @ObjectiveEvaluations.setter
    def ObjectiveEvaluations(self, ObjectiveEvaluations):
        self._ObjectiveEvaluations = ObjectiveEvaluations

    @property
    def SubjectiveEvaluations(self):
        """所选的主观评测列表
        :rtype: list of SubjectiveEvaluation
        """
        return self._SubjectiveEvaluations

    @SubjectiveEvaluations.setter
    def SubjectiveEvaluations(self, SubjectiveEvaluations):
        self._SubjectiveEvaluations = SubjectiveEvaluations

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ObjectiveEvaluations") is not None:
            self._ObjectiveEvaluations = []
            for item in params.get("ObjectiveEvaluations"):
                obj = ObjectiveEvaluation()
                obj._deserialize(item)
                self._ObjectiveEvaluations.append(obj)
        if params.get("SubjectiveEvaluations") is not None:
            self._SubjectiveEvaluations = []
            for item in params.get("SubjectiveEvaluations"):
                obj = SubjectiveEvaluation()
                obj._deserialize(item)
                self._SubjectiveEvaluations.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeLatestTrainingMetricsRequest(AbstractModel):
    """DescribeLatestTrainingMetrics请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLatestTrainingMetricsResponse(AbstractModel):
    """DescribeLatestTrainingMetrics返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _Metrics: 最近一次上报的训练指标.每个Metric中只有一个点的数据, 即len(Values) = len(Timestamps) = 1
注意：此字段可能返回 null，表示取不到有效值。
        :type Metrics: list of TrainingMetric
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._Metrics = None
        self._RequestId = None

    @property
    def TaskId(self):
        """任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Metrics(self):
        """最近一次上报的训练指标.每个Metric中只有一个点的数据, 即len(Values) = len(Timestamps) = 1
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TrainingMetric
        """
        return self._Metrics

    @Metrics.setter
    def Metrics(self, Metrics):
        self._Metrics = Metrics

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        if params.get("Metrics") is not None:
            self._Metrics = []
            for item in params.get("Metrics"):
                obj = TrainingMetric()
                obj._deserialize(item)
                self._Metrics.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeLifecycleScriptRequest(AbstractModel):
    """DescribeLifecycleScript请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: 生命周期脚本id
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """生命周期脚本id
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLifecycleScriptResponse(AbstractModel):
    """DescribeLifecycleScript返回参数结构体

    """

    def __init__(self):
        r"""
        :param _LifecycleScript: 详情信息
        :type LifecycleScript: :class:`tencentcloud.tione.v20211111.models.LifecycleScript`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._LifecycleScript = None
        self._RequestId = None

    @property
    def LifecycleScript(self):
        """详情信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.LifecycleScript`
        """
        return self._LifecycleScript

    @LifecycleScript.setter
    def LifecycleScript(self, LifecycleScript):
        self._LifecycleScript = LifecycleScript

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("LifecycleScript") is not None:
            self._LifecycleScript = LifecycleScript()
            self._LifecycleScript._deserialize(params.get("LifecycleScript"))
        self._RequestId = params.get("RequestId")


class DescribeLifecycleScriptsRequest(AbstractModel):
    """DescribeLifecycleScripts请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        :param _Limit: 每页返回的实例数，默认为10
        :type Limit: int
        :param _Order: 输出列表的排列顺序。取值范围：ASC：升序排列 DESC：降序排列。默认为DESC
        :type Order: str
        :param _OrderField: 根据哪个字段排序，如：CreateTime、UpdateTime，默认为UpdateTime
        :type OrderField: str
        :param _Filters: 过滤器，eg：[{ "Name": "Name", "Values": ["myLifecycleScriptName"] }]
        :type Filters: list of Filter
        :param _TagFilters: 标签过滤器，eg：[{ "TagKey": "TagKeyA", "TagValue": ["TagValueA"] }]	
        :type TagFilters: list of TagFilter
        """
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._OrderField = None
        self._Filters = None
        self._TagFilters = None

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """每页返回的实例数，默认为10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """输出列表的排列顺序。取值范围：ASC：升序排列 DESC：降序排列。默认为DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """根据哪个字段排序，如：CreateTime、UpdateTime，默认为UpdateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Filters(self):
        """过滤器，eg：[{ "Name": "Name", "Values": ["myLifecycleScriptName"] }]
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签过滤器，eg：[{ "TagKey": "TagKeyA", "TagValue": ["TagValueA"] }]	
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLifecycleScriptsResponse(AbstractModel):
    """DescribeLifecycleScripts返回参数结构体

    """

    def __init__(self):
        r"""
        :param _LifecycleScriptSet: 详情信息
注意：此字段可能返回 null，表示取不到有效值。
        :type LifecycleScriptSet: list of LifecycleScriptItem
        :param _TotalCount: total count
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._LifecycleScriptSet = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def LifecycleScriptSet(self):
        """详情信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of LifecycleScriptItem
        """
        return self._LifecycleScriptSet

    @LifecycleScriptSet.setter
    def LifecycleScriptSet(self, LifecycleScriptSet):
        self._LifecycleScriptSet = LifecycleScriptSet

    @property
    def TotalCount(self):
        """total count
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("LifecycleScriptSet") is not None:
            self._LifecycleScriptSet = []
            for item in params.get("LifecycleScriptSet"):
                obj = LifecycleScriptItem()
                obj._deserialize(item)
                self._LifecycleScriptSet.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeLogsRequest(AbstractModel):
    """DescribeLogs请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Service: 服务类型，TRAIN为任务式建模, NOTEBOOK为Notebook, INFER为在线服务, BATCH为批量预测
枚举值：
- TRAIN
- NOTEBOOK
- INFER
- BATCH
        :type Service: str
        :param _StartTime: 日志查询开始时间（RFC3339格式的时间字符串），默认值为当前时间的前一个小时
        :type StartTime: str
        :param _EndTime: 日志查询结束时间（RFC3339格式的时间字符串），默认值为当前时间
        :type EndTime: str
        :param _Limit: 日志查询条数，默认值100，最大值100
        :type Limit: int
        :param _ServiceId: 服务ID，和Service参数对应，不同Service的服务ID获取方式不同，具体如下：
- Service类型为TRAIN：
  调用[DescribeTrainingTask接口](/document/product/851/75089)查询训练任务详情，ServiceId为接口返回值中Response.TrainingTaskDetail.LatestInstanceId
- Service类型为NOTEBOOK：
  调用[DescribeNotebook接口](/document/product/851/95662)查询Notebook详情，ServiceId为接口返回值中Response.NotebookDetail.PodName
- Service类型为INFER：
  调用[DescribeModelServiceGroup接口](/document/product/851/82285)查询服务组详情，ServiceId为接口返回值中Response.ServiceGroup.Services.ServiceId
- Service类型为BATCH：
  调用[DescribeBatchTask接口](/document/product/851/80180)查询跑批任务详情，ServiceId为接口返回值中Response.BatchTaskDetail.LatestInstanceId
        :type ServiceId: str
        :param _PodName: Pod的名称，即需要查询服务对应的Pod，和Service参数对应，不同Service的PodName获取方式不同，具体如下：
- Service类型为TRAIN：
  调用[DescribeTrainingTaskPods接口](/document/product/851/75088)查询训练任务pod列表，PodName为接口返回值中Response.PodNames
- Service类型为NOTEBOOK：
  调用[DescribeNotebook接口](/document/product/851/95662)查询Notebook详情，PodName为接口返回值中Response.NotebookDetail.PodName
- Service类型为INFER：
  调用[DescribeModelService接口](/document/product/851/82287)查询单个服务详情，PodName为接口返回值中Response.Service.ServiceInfo.PodInfos
- Service类型为BATCH：
  调用[DescribeBatchTask接口](/document/product/851/80180)查询跑批任务详情，PodName为接口返回值中Response.BatchTaskDetail. PodList
注：支持结尾通配符*
        :type PodName: str
        :param _Order: 排序方向（可选值为ASC, DESC ），默认为DESC
        :type Order: str
        :param _OrderField: 按哪个字段排序（可选值为Timestamp），默认值为Timestamp
        :type OrderField: str
        :param _Context: 日志查询上下文，查询下一页的时候需要回传这个字段，该字段来自本接口的返回
        :type Context: str
        :param _Filters: 过滤条件
注意: 
1. Filter.Name：目前只支持Key（也就是按关键字过滤日志）
2. Filter.Values：表示过滤日志的关键字；Values为多个的时候表示同时满足
3. Filter. Negative和Filter. Fuzzy没有使用
        :type Filters: list of Filter
        :param _JobCategory: 描述任务的类型
        :type JobCategory: str
        :param _Offset: 使用OFFSET分页查询时，指定返回的数据偏移量，默认为0
        :type Offset: int
        :param _InstanceType: 查实例类型
        :type InstanceType: str
        :param _InstanceId: 查实例Id
        :type InstanceId: str
        """
        self._Service = None
        self._StartTime = None
        self._EndTime = None
        self._Limit = None
        self._ServiceId = None
        self._PodName = None
        self._Order = None
        self._OrderField = None
        self._Context = None
        self._Filters = None
        self._JobCategory = None
        self._Offset = None
        self._InstanceType = None
        self._InstanceId = None

    @property
    def Service(self):
        """服务类型，TRAIN为任务式建模, NOTEBOOK为Notebook, INFER为在线服务, BATCH为批量预测
枚举值：
- TRAIN
- NOTEBOOK
- INFER
- BATCH
        :rtype: str
        """
        return self._Service

    @Service.setter
    def Service(self, Service):
        self._Service = Service

    @property
    def StartTime(self):
        """日志查询开始时间（RFC3339格式的时间字符串），默认值为当前时间的前一个小时
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """日志查询结束时间（RFC3339格式的时间字符串），默认值为当前时间
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Limit(self):
        """日志查询条数，默认值100，最大值100
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def ServiceId(self):
        """服务ID，和Service参数对应，不同Service的服务ID获取方式不同，具体如下：
- Service类型为TRAIN：
  调用[DescribeTrainingTask接口](/document/product/851/75089)查询训练任务详情，ServiceId为接口返回值中Response.TrainingTaskDetail.LatestInstanceId
- Service类型为NOTEBOOK：
  调用[DescribeNotebook接口](/document/product/851/95662)查询Notebook详情，ServiceId为接口返回值中Response.NotebookDetail.PodName
- Service类型为INFER：
  调用[DescribeModelServiceGroup接口](/document/product/851/82285)查询服务组详情，ServiceId为接口返回值中Response.ServiceGroup.Services.ServiceId
- Service类型为BATCH：
  调用[DescribeBatchTask接口](/document/product/851/80180)查询跑批任务详情，ServiceId为接口返回值中Response.BatchTaskDetail.LatestInstanceId
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId

    @property
    def PodName(self):
        """Pod的名称，即需要查询服务对应的Pod，和Service参数对应，不同Service的PodName获取方式不同，具体如下：
- Service类型为TRAIN：
  调用[DescribeTrainingTaskPods接口](/document/product/851/75088)查询训练任务pod列表，PodName为接口返回值中Response.PodNames
- Service类型为NOTEBOOK：
  调用[DescribeNotebook接口](/document/product/851/95662)查询Notebook详情，PodName为接口返回值中Response.NotebookDetail.PodName
- Service类型为INFER：
  调用[DescribeModelService接口](/document/product/851/82287)查询单个服务详情，PodName为接口返回值中Response.Service.ServiceInfo.PodInfos
- Service类型为BATCH：
  调用[DescribeBatchTask接口](/document/product/851/80180)查询跑批任务详情，PodName为接口返回值中Response.BatchTaskDetail. PodList
注：支持结尾通配符*
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def Order(self):
        """排序方向（可选值为ASC, DESC ），默认为DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """按哪个字段排序（可选值为Timestamp），默认值为Timestamp
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Context(self):
        """日志查询上下文，查询下一页的时候需要回传这个字段，该字段来自本接口的返回
        :rtype: str
        """
        return self._Context

    @Context.setter
    def Context(self, Context):
        self._Context = Context

    @property
    def Filters(self):
        """过滤条件
注意: 
1. Filter.Name：目前只支持Key（也就是按关键字过滤日志）
2. Filter.Values：表示过滤日志的关键字；Values为多个的时候表示同时满足
3. Filter. Negative和Filter. Fuzzy没有使用
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def JobCategory(self):
        """描述任务的类型
        :rtype: str
        """
        return self._JobCategory

    @JobCategory.setter
    def JobCategory(self, JobCategory):
        self._JobCategory = JobCategory

    @property
    def Offset(self):
        """使用OFFSET分页查询时，指定返回的数据偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def InstanceType(self):
        """查实例类型
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def InstanceId(self):
        """查实例Id
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId


    def _deserialize(self, params):
        self._Service = params.get("Service")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._Limit = params.get("Limit")
        self._ServiceId = params.get("ServiceId")
        self._PodName = params.get("PodName")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        self._Context = params.get("Context")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._JobCategory = params.get("JobCategory")
        self._Offset = params.get("Offset")
        self._InstanceType = params.get("InstanceType")
        self._InstanceId = params.get("InstanceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeLogsResponse(AbstractModel):
    """DescribeLogs返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Context: 分页的游标
注意：此字段可能返回 null，表示取不到有效值。
        :type Context: str
        :param _Content: 日志数组
注意：此字段可能返回 null，表示取不到有效值。
        :type Content: list of LogIdentity
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Context = None
        self._Content = None
        self._RequestId = None

    @property
    def Context(self):
        """分页的游标
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Context

    @Context.setter
    def Context(self, Context):
        self._Context = Context

    @property
    def Content(self):
        """日志数组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of LogIdentity
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Context = params.get("Context")
        if params.get("Content") is not None:
            self._Content = []
            for item in params.get("Content"):
                obj = LogIdentity()
                obj._deserialize(item)
                self._Content.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeModelAccEngineVersionsRequest(AbstractModel):
    """DescribeModelAccEngineVersions请求参数结构体

    """


class DescribeModelAccEngineVersionsResponse(AbstractModel):
    """DescribeModelAccEngineVersions返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccEngineVersions: 模型加速版本列表
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccEngineVersions: list of ModelAccEngineVersion
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ModelAccEngineVersions = None
        self._RequestId = None

    @property
    def ModelAccEngineVersions(self):
        """模型加速版本列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ModelAccEngineVersion
        """
        return self._ModelAccEngineVersions

    @ModelAccEngineVersions.setter
    def ModelAccEngineVersions(self, ModelAccEngineVersions):
        self._ModelAccEngineVersions = ModelAccEngineVersions

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ModelAccEngineVersions") is not None:
            self._ModelAccEngineVersions = []
            for item in params.get("ModelAccEngineVersions"):
                obj = ModelAccEngineVersion()
                obj._deserialize(item)
                self._ModelAccEngineVersions.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeModelAccOptimizedReportRequest(AbstractModel):
    """DescribeModelAccOptimizedReport请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccTaskId: 模型加速任务ID
        :type ModelAccTaskId: str
        """
        self._ModelAccTaskId = None

    @property
    def ModelAccTaskId(self):
        """模型加速任务ID
        :rtype: str
        """
        return self._ModelAccTaskId

    @ModelAccTaskId.setter
    def ModelAccTaskId(self, ModelAccTaskId):
        self._ModelAccTaskId = ModelAccTaskId


    def _deserialize(self, params):
        self._ModelAccTaskId = params.get("ModelAccTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeModelAccOptimizedReportResponse(AbstractModel):
    """DescribeModelAccOptimizedReport返回参数结构体

    """

    def __init__(self):
        r"""
        :param _OptimizedReport: 模型加速优化报告
注意：此字段可能返回 null，表示取不到有效值。
        :type OptimizedReport: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._OptimizedReport = None
        self._RequestId = None

    @property
    def OptimizedReport(self):
        """模型加速优化报告
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._OptimizedReport

    @OptimizedReport.setter
    def OptimizedReport(self, OptimizedReport):
        self._OptimizedReport = OptimizedReport

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._OptimizedReport = params.get("OptimizedReport")
        self._RequestId = params.get("RequestId")


class DescribeModelAccelerateTaskRequest(AbstractModel):
    """DescribeModelAccelerateTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccTaskId: 模型加速任务ID
        :type ModelAccTaskId: str
        """
        self._ModelAccTaskId = None

    @property
    def ModelAccTaskId(self):
        """模型加速任务ID
        :rtype: str
        """
        return self._ModelAccTaskId

    @ModelAccTaskId.setter
    def ModelAccTaskId(self, ModelAccTaskId):
        self._ModelAccTaskId = ModelAccTaskId


    def _deserialize(self, params):
        self._ModelAccTaskId = params.get("ModelAccTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeModelAccelerateTaskResponse(AbstractModel):
    """DescribeModelAccelerateTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccelerateTask: 模型加速任务详情
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccelerateTask: :class:`tencentcloud.tione.v20211111.models.ModelAccelerateTask`
        :param _ModelAccRuntimeInSecond: 模型加速时长，单位s
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccRuntimeInSecond: int
        :param _ModelAccStartTime: 模型加速任务开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccStartTime: str
        :param _ModelAccEndTime: 模型加速任务结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccEndTime: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ModelAccelerateTask = None
        self._ModelAccRuntimeInSecond = None
        self._ModelAccStartTime = None
        self._ModelAccEndTime = None
        self._RequestId = None

    @property
    def ModelAccelerateTask(self):
        """模型加速任务详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelAccelerateTask`
        """
        return self._ModelAccelerateTask

    @ModelAccelerateTask.setter
    def ModelAccelerateTask(self, ModelAccelerateTask):
        self._ModelAccelerateTask = ModelAccelerateTask

    @property
    def ModelAccRuntimeInSecond(self):
        """模型加速时长，单位s
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ModelAccRuntimeInSecond

    @ModelAccRuntimeInSecond.setter
    def ModelAccRuntimeInSecond(self, ModelAccRuntimeInSecond):
        self._ModelAccRuntimeInSecond = ModelAccRuntimeInSecond

    @property
    def ModelAccStartTime(self):
        """模型加速任务开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelAccStartTime

    @ModelAccStartTime.setter
    def ModelAccStartTime(self, ModelAccStartTime):
        self._ModelAccStartTime = ModelAccStartTime

    @property
    def ModelAccEndTime(self):
        """模型加速任务结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelAccEndTime

    @ModelAccEndTime.setter
    def ModelAccEndTime(self, ModelAccEndTime):
        self._ModelAccEndTime = ModelAccEndTime

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ModelAccelerateTask") is not None:
            self._ModelAccelerateTask = ModelAccelerateTask()
            self._ModelAccelerateTask._deserialize(params.get("ModelAccelerateTask"))
        self._ModelAccRuntimeInSecond = params.get("ModelAccRuntimeInSecond")
        self._ModelAccStartTime = params.get("ModelAccStartTime")
        self._ModelAccEndTime = params.get("ModelAccEndTime")
        self._RequestId = params.get("RequestId")


class DescribeModelAccelerateTasksRequest(AbstractModel):
    """DescribeModelAccelerateTasks请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤器
ModelAccTaskName 任务名称
ModelSource 模型来源
        :type Filters: list of Filter
        :param _OrderField: 排序字段，默认CreateTime
        :type OrderField: str
        :param _Order: 排序方式：ASC/DESC，默认DESC
        :type Order: str
        :param _Offset: 偏移量
        :type Offset: int
        :param _Limit: 返回记录条数，默认10
        :type Limit: int
        :param _TagFilters: 标签过滤
        :type TagFilters: list of TagFilter
        """
        self._Filters = None
        self._OrderField = None
        self._Order = None
        self._Offset = None
        self._Limit = None
        self._TagFilters = None

    @property
    def Filters(self):
        """过滤器
ModelAccTaskName 任务名称
ModelSource 模型来源
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderField(self):
        """排序字段，默认CreateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Order(self):
        """排序方式：ASC/DESC，默认DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def Offset(self):
        """偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回记录条数，默认10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def TagFilters(self):
        """标签过滤
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._OrderField = params.get("OrderField")
        self._Order = params.get("Order")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeModelAccelerateTasksResponse(AbstractModel):
    """DescribeModelAccelerateTasks返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccelerateTasks: 模型加速任务列表
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccelerateTasks: list of ModelAccelerateTask
        :param _TotalCount: 任务总数
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ModelAccelerateTasks = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def ModelAccelerateTasks(self):
        """模型加速任务列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ModelAccelerateTask
        """
        return self._ModelAccelerateTasks

    @ModelAccelerateTasks.setter
    def ModelAccelerateTasks(self, ModelAccelerateTasks):
        self._ModelAccelerateTasks = ModelAccelerateTasks

    @property
    def TotalCount(self):
        """任务总数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ModelAccelerateTasks") is not None:
            self._ModelAccelerateTasks = []
            for item in params.get("ModelAccelerateTasks"):
                obj = ModelAccelerateTask()
                obj._deserialize(item)
                self._ModelAccelerateTasks.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeModelAccelerateVersionsRequest(AbstractModel):
    """DescribeModelAccelerateVersions请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤条件
    Filter.Name: 枚举值: ModelJobName (任务名称)|TrainingModelVersionId (模型版本id)
    Filter.Values: 当长度为1时，支持模糊查询; 不为1时，精确查询
每次请求的Filters的上限为10，Filter.Values的上限为100
        :type Filters: list of Filter
        :param _OrderField: 排序字段; 枚举值: CreateTime (创建时间) ；默认CreateTime
        :type OrderField: str
        :param _Order: 排序方向; 枚举值: ASC | DESC；默认DESC
        :type Order: str
        :param _Offset: 分页查询起始位置，如：Limit为100，第一页Offset为0，第二页Offset为100....即每页左边为闭区间; 默认0
        :type Offset: int
        :param _Limit: 分页查询每页大小，最大20000; 默认10
        :type Limit: int
        :param _TrainingModelId: 模型ID
        :type TrainingModelId: str
        """
        self._Filters = None
        self._OrderField = None
        self._Order = None
        self._Offset = None
        self._Limit = None
        self._TrainingModelId = None

    @property
    def Filters(self):
        """过滤条件
    Filter.Name: 枚举值: ModelJobName (任务名称)|TrainingModelVersionId (模型版本id)
    Filter.Values: 当长度为1时，支持模糊查询; 不为1时，精确查询
每次请求的Filters的上限为10，Filter.Values的上限为100
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderField(self):
        """排序字段; 枚举值: CreateTime (创建时间) ；默认CreateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Order(self):
        """排序方向; 枚举值: ASC | DESC；默认DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def Offset(self):
        """分页查询起始位置，如：Limit为100，第一页Offset为0，第二页Offset为100....即每页左边为闭区间; 默认0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """分页查询每页大小，最大20000; 默认10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def TrainingModelId(self):
        """模型ID
        :rtype: str
        """
        return self._TrainingModelId

    @TrainingModelId.setter
    def TrainingModelId(self, TrainingModelId):
        self._TrainingModelId = TrainingModelId


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._OrderField = params.get("OrderField")
        self._Order = params.get("Order")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._TrainingModelId = params.get("TrainingModelId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeModelAccelerateVersionsResponse(AbstractModel):
    """DescribeModelAccelerateVersions返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 优化模型总数； 注意接口是分页拉取的，total是指优化模型节点总数，不是本次返回中ModelAccelerateVersions数组的大小
注意：此字段可能返回 null，表示取不到有效值。
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _ModelAccelerateVersions: 优化模型列表
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccelerateVersions: list of ModelAccelerateVersion
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._ModelAccelerateVersions = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """优化模型总数； 注意接口是分页拉取的，total是指优化模型节点总数，不是本次返回中ModelAccelerateVersions数组的大小
注意：此字段可能返回 null，表示取不到有效值。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ModelAccelerateVersions(self):
        """优化模型列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ModelAccelerateVersion
        """
        return self._ModelAccelerateVersions

    @ModelAccelerateVersions.setter
    def ModelAccelerateVersions(self, ModelAccelerateVersions):
        self._ModelAccelerateVersions = ModelAccelerateVersions

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("ModelAccelerateVersions") is not None:
            self._ModelAccelerateVersions = []
            for item in params.get("ModelAccelerateVersions"):
                obj = ModelAccelerateVersion()
                obj._deserialize(item)
                self._ModelAccelerateVersions.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeModelListRequest(AbstractModel):
    """DescribeModelList请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤器
Filter.Name: 枚举值:
keyword (模型名称)
TrainingModelId (模型ID)
ModelVersionType (模型版本类型) 其值Filter.Values支持: NORMAL(通用) ACCELERATE (加速)
TrainingModelSource (模型来源) 其值Filter.Values支持： JOB/COS
ModelFormat（模型格式）其值Filter.Values支持：
PYTORCH/TORCH_SCRIPT/DETECTRON2/SAVED_MODEL/FROZEN_GRAPH/PMML/MMDETECTION/ONNX/HUGGING_FACE
Filter.Values: 当长度为1时，支持模糊查询; 不为1时，精确查询
每次请求的Filters的上限为10，Filter.Values的上限为100
Filter.Fuzzy取值：true/false，是否支持模糊匹配
        :type Filters: list of Filter
        :param _OrderField: 排序字段，默认CreateTime
        :type OrderField: str
        :param _Order: 排序方式，ASC/DESC，默认DESC
        :type Order: str
        :param _Offset: 偏移量
        :type Offset: int
        :param _Limit: 返回结果数量
        :type Limit: int
        :param _TagFilters: 标签过滤
        :type TagFilters: list of TagFilter
        """
        self._Filters = None
        self._OrderField = None
        self._Order = None
        self._Offset = None
        self._Limit = None
        self._TagFilters = None

    @property
    def Filters(self):
        """过滤器
Filter.Name: 枚举值:
keyword (模型名称)
TrainingModelId (模型ID)
ModelVersionType (模型版本类型) 其值Filter.Values支持: NORMAL(通用) ACCELERATE (加速)
TrainingModelSource (模型来源) 其值Filter.Values支持： JOB/COS
ModelFormat（模型格式）其值Filter.Values支持：
PYTORCH/TORCH_SCRIPT/DETECTRON2/SAVED_MODEL/FROZEN_GRAPH/PMML/MMDETECTION/ONNX/HUGGING_FACE
Filter.Values: 当长度为1时，支持模糊查询; 不为1时，精确查询
每次请求的Filters的上限为10，Filter.Values的上限为100
Filter.Fuzzy取值：true/false，是否支持模糊匹配
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderField(self):
        """排序字段，默认CreateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Order(self):
        """排序方式，ASC/DESC，默认DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def Offset(self):
        """偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回结果数量
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def TagFilters(self):
        """标签过滤
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._OrderField = params.get("OrderField")
        self._Order = params.get("Order")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeModelListResponse(AbstractModel):
    """DescribeModelList返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelSet: 模型列表
        :type ModelSet: list of ModelDetail
        :param _TotalCount: 模型总数
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ModelSet = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def ModelSet(self):
        """模型列表
        :rtype: list of ModelDetail
        """
        return self._ModelSet

    @ModelSet.setter
    def ModelSet(self, ModelSet):
        self._ModelSet = ModelSet

    @property
    def TotalCount(self):
        """模型总数
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ModelSet") is not None:
            self._ModelSet = []
            for item in params.get("ModelSet"):
                obj = ModelDetail()
                obj._deserialize(item)
                self._ModelSet.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeModelRequest(AbstractModel):
    """DescribeModel请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelId: 模型Id
        :type ModelId: str
        """
        self._ModelId = None

    @property
    def ModelId(self):
        """模型Id
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId


    def _deserialize(self, params):
        self._ModelId = params.get("ModelId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeModelResponse(AbstractModel):
    """DescribeModel返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Model: 模型详细信息
        :type Model: :class:`tencentcloud.tione.v20211111.models.ModelDetail`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Model = None
        self._RequestId = None

    @property
    def Model(self):
        """模型详细信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelDetail`
        """
        return self._Model

    @Model.setter
    def Model(self, Model):
        self._Model = Model

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Model") is not None:
            self._Model = ModelDetail()
            self._Model._deserialize(params.get("Model"))
        self._RequestId = params.get("RequestId")


class DescribeModelServiceCallInfoRequest(AbstractModel):
    """DescribeModelServiceCallInfo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceGroupId: 服务组id
        :type ServiceGroupId: str
        :param _ServiceCategory: 服务分类
        :type ServiceCategory: str
        """
        self._ServiceGroupId = None
        self._ServiceCategory = None

    @property
    def ServiceGroupId(self):
        """服务组id
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def ServiceCategory(self):
        """服务分类
        :rtype: str
        """
        return self._ServiceCategory

    @ServiceCategory.setter
    def ServiceCategory(self, ServiceCategory):
        self._ServiceCategory = ServiceCategory


    def _deserialize(self, params):
        self._ServiceGroupId = params.get("ServiceGroupId")
        self._ServiceCategory = params.get("ServiceCategory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeModelServiceCallInfoResponse(AbstractModel):
    """DescribeModelServiceCallInfo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceCallInfo: 服务调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceCallInfo: :class:`tencentcloud.tione.v20211111.models.ServiceCallInfo`
        :param _InferGatewayCallInfo: 升级网关调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :type InferGatewayCallInfo: :class:`tencentcloud.tione.v20211111.models.InferGatewayCallInfo`
        :param _DefaultNginxGatewayCallInfo: 默认nginx网关的调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :type DefaultNginxGatewayCallInfo: :class:`tencentcloud.tione.v20211111.models.DefaultNginxGatewayCallInfo`
        :param _TJCallInfo: 太极服务的调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :type TJCallInfo: :class:`tencentcloud.tione.v20211111.models.TJCallInfo`
        :param _IntranetCallInfo: 内网调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :type IntranetCallInfo: :class:`tencentcloud.tione.v20211111.models.IntranetCallInfo`
        :param _ServiceCallInfoV2: 基于新网关的服务调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceCallInfoV2: :class:`tencentcloud.tione.v20211111.models.ServiceCallInfoV2`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ServiceCallInfo = None
        self._InferGatewayCallInfo = None
        self._DefaultNginxGatewayCallInfo = None
        self._TJCallInfo = None
        self._IntranetCallInfo = None
        self._ServiceCallInfoV2 = None
        self._RequestId = None

    @property
    def ServiceCallInfo(self):
        """服务调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ServiceCallInfo`
        """
        return self._ServiceCallInfo

    @ServiceCallInfo.setter
    def ServiceCallInfo(self, ServiceCallInfo):
        self._ServiceCallInfo = ServiceCallInfo

    @property
    def InferGatewayCallInfo(self):
        """升级网关调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.InferGatewayCallInfo`
        """
        return self._InferGatewayCallInfo

    @InferGatewayCallInfo.setter
    def InferGatewayCallInfo(self, InferGatewayCallInfo):
        self._InferGatewayCallInfo = InferGatewayCallInfo

    @property
    def DefaultNginxGatewayCallInfo(self):
        """默认nginx网关的调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.DefaultNginxGatewayCallInfo`
        """
        return self._DefaultNginxGatewayCallInfo

    @DefaultNginxGatewayCallInfo.setter
    def DefaultNginxGatewayCallInfo(self, DefaultNginxGatewayCallInfo):
        self._DefaultNginxGatewayCallInfo = DefaultNginxGatewayCallInfo

    @property
    def TJCallInfo(self):
        """太极服务的调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.TJCallInfo`
        """
        return self._TJCallInfo

    @TJCallInfo.setter
    def TJCallInfo(self, TJCallInfo):
        self._TJCallInfo = TJCallInfo

    @property
    def IntranetCallInfo(self):
        """内网调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.IntranetCallInfo`
        """
        return self._IntranetCallInfo

    @IntranetCallInfo.setter
    def IntranetCallInfo(self, IntranetCallInfo):
        self._IntranetCallInfo = IntranetCallInfo

    @property
    def ServiceCallInfoV2(self):
        """基于新网关的服务调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ServiceCallInfoV2`
        """
        return self._ServiceCallInfoV2

    @ServiceCallInfoV2.setter
    def ServiceCallInfoV2(self, ServiceCallInfoV2):
        self._ServiceCallInfoV2 = ServiceCallInfoV2

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ServiceCallInfo") is not None:
            self._ServiceCallInfo = ServiceCallInfo()
            self._ServiceCallInfo._deserialize(params.get("ServiceCallInfo"))
        if params.get("InferGatewayCallInfo") is not None:
            self._InferGatewayCallInfo = InferGatewayCallInfo()
            self._InferGatewayCallInfo._deserialize(params.get("InferGatewayCallInfo"))
        if params.get("DefaultNginxGatewayCallInfo") is not None:
            self._DefaultNginxGatewayCallInfo = DefaultNginxGatewayCallInfo()
            self._DefaultNginxGatewayCallInfo._deserialize(params.get("DefaultNginxGatewayCallInfo"))
        if params.get("TJCallInfo") is not None:
            self._TJCallInfo = TJCallInfo()
            self._TJCallInfo._deserialize(params.get("TJCallInfo"))
        if params.get("IntranetCallInfo") is not None:
            self._IntranetCallInfo = IntranetCallInfo()
            self._IntranetCallInfo._deserialize(params.get("IntranetCallInfo"))
        if params.get("ServiceCallInfoV2") is not None:
            self._ServiceCallInfoV2 = ServiceCallInfoV2()
            self._ServiceCallInfoV2._deserialize(params.get("ServiceCallInfoV2"))
        self._RequestId = params.get("RequestId")


class DescribeModelServiceGroupRequest(AbstractModel):
    """DescribeModelServiceGroup请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceGroupId: 服务组ID
        :type ServiceGroupId: str
        :param _ServiceCategory: 服务分类
        :type ServiceCategory: str
        """
        self._ServiceGroupId = None
        self._ServiceCategory = None

    @property
    def ServiceGroupId(self):
        """服务组ID
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def ServiceCategory(self):
        """服务分类
        :rtype: str
        """
        return self._ServiceCategory

    @ServiceCategory.setter
    def ServiceCategory(self, ServiceCategory):
        self._ServiceCategory = ServiceCategory


    def _deserialize(self, params):
        self._ServiceGroupId = params.get("ServiceGroupId")
        self._ServiceCategory = params.get("ServiceCategory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeModelServiceGroupResponse(AbstractModel):
    """DescribeModelServiceGroup返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceGroup: 服务组信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceGroup: :class:`tencentcloud.tione.v20211111.models.ServiceGroup`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ServiceGroup = None
        self._RequestId = None

    @property
    def ServiceGroup(self):
        """服务组信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ServiceGroup`
        """
        return self._ServiceGroup

    @ServiceGroup.setter
    def ServiceGroup(self, ServiceGroup):
        self._ServiceGroup = ServiceGroup

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ServiceGroup") is not None:
            self._ServiceGroup = ServiceGroup()
            self._ServiceGroup._deserialize(params.get("ServiceGroup"))
        self._RequestId = params.get("RequestId")


class DescribeModelServiceGroupsRequest(AbstractModel):
    """DescribeModelServiceGroups请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        :param _Limit: 返回数量，默认为20，最大值为100
        :type Limit: int
        :param _Order: 输出列表的排列顺序。取值范围：ASC：升序排列 DESC：降序排列
        :type Order: str
        :param _OrderField: 排序的依据字段， 取值范围 "CreateTime" "UpdateTime"
        :type OrderField: str
        :param _Filters: 分页参数，支持的分页过滤Name包括：
["ClusterId", "ServiceId", "ServiceGroupName", "ServiceGroupId","Status","CreatedBy","ModelVersionId"]
        :type Filters: list of Filter
        :param _TagFilters: 标签过滤参数
        :type TagFilters: list of TagFilter
        :param _ServiceCategory: 服务分类
        :type ServiceCategory: str
        """
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._OrderField = None
        self._Filters = None
        self._TagFilters = None
        self._ServiceCategory = None

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回数量，默认为20，最大值为100
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """输出列表的排列顺序。取值范围：ASC：升序排列 DESC：降序排列
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """排序的依据字段， 取值范围 "CreateTime" "UpdateTime"
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Filters(self):
        """分页参数，支持的分页过滤Name包括：
["ClusterId", "ServiceId", "ServiceGroupName", "ServiceGroupId","Status","CreatedBy","ModelVersionId"]
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签过滤参数
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def ServiceCategory(self):
        """服务分类
        :rtype: str
        """
        return self._ServiceCategory

    @ServiceCategory.setter
    def ServiceCategory(self, ServiceCategory):
        self._ServiceCategory = ServiceCategory


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        self._ServiceCategory = params.get("ServiceCategory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeModelServiceGroupsResponse(AbstractModel):
    """DescribeModelServiceGroups返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 推理服务组数量。
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _ServiceGroups: 服务组信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceGroups: list of ServiceGroup
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._ServiceGroups = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """推理服务组数量。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ServiceGroups(self):
        """服务组信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ServiceGroup
        """
        return self._ServiceGroups

    @ServiceGroups.setter
    def ServiceGroups(self, ServiceGroups):
        self._ServiceGroups = ServiceGroups

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("ServiceGroups") is not None:
            self._ServiceGroups = []
            for item in params.get("ServiceGroups"):
                obj = ServiceGroup()
                obj._deserialize(item)
                self._ServiceGroups.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeModelServiceHistoryRequest(AbstractModel):
    """DescribeModelServiceHistory请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceId: 服务Id
        :type ServiceId: str
        """
        self._ServiceId = None

    @property
    def ServiceId(self):
        """服务Id
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId


    def _deserialize(self, params):
        self._ServiceId = params.get("ServiceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeModelServiceHistoryResponse(AbstractModel):
    """DescribeModelServiceHistory返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 历史版本总数
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _ServiceHistory: 服务版本
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceHistory: list of ServiceHistory
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._ServiceHistory = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """历史版本总数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ServiceHistory(self):
        """服务版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ServiceHistory
        """
        return self._ServiceHistory

    @ServiceHistory.setter
    def ServiceHistory(self, ServiceHistory):
        self._ServiceHistory = ServiceHistory

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("ServiceHistory") is not None:
            self._ServiceHistory = []
            for item in params.get("ServiceHistory"):
                obj = ServiceHistory()
                obj._deserialize(item)
                self._ServiceHistory.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeModelServiceHotUpdatedRequest(AbstractModel):
    """DescribeModelServiceHotUpdated请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ImageInfo: 镜像信息，配置服务运行所需的镜像地址等信息
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _ModelInfo: 模型信息，需要挂载模型时填写
        :type ModelInfo: :class:`tencentcloud.tione.v20211111.models.ModelInfo`
        :param _VolumeMount: 挂载信息
        :type VolumeMount: :class:`tencentcloud.tione.v20211111.models.VolumeMount`
        """
        self._ImageInfo = None
        self._ModelInfo = None
        self._VolumeMount = None

    @property
    def ImageInfo(self):
        """镜像信息，配置服务运行所需的镜像地址等信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def ModelInfo(self):
        """模型信息，需要挂载模型时填写
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelInfo`
        """
        return self._ModelInfo

    @ModelInfo.setter
    def ModelInfo(self, ModelInfo):
        self._ModelInfo = ModelInfo

    @property
    def VolumeMount(self):
        """挂载信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.VolumeMount`
        """
        return self._VolumeMount

    @VolumeMount.setter
    def VolumeMount(self, VolumeMount):
        self._VolumeMount = VolumeMount


    def _deserialize(self, params):
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        if params.get("ModelInfo") is not None:
            self._ModelInfo = ModelInfo()
            self._ModelInfo._deserialize(params.get("ModelInfo"))
        if params.get("VolumeMount") is not None:
            self._VolumeMount = VolumeMount()
            self._VolumeMount._deserialize(params.get("VolumeMount"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeModelServiceHotUpdatedResponse(AbstractModel):
    """DescribeModelServiceHotUpdated返回参数结构体

    """

    def __init__(self):
        r"""
        :param _HotUpdatedFlag: 热更新标志位. 
Allowed 允许开启热更新.
ForbiddenForEmptyModel 未选择模型，禁止开启热更新.
ForbiddenForIllegalModelType 模型来源非法（仅支持来自模型仓库的模型），禁止开启热更新.
ForbiddenForIllegalImage 镜像来源非法（仅支持tfserving镜像），禁止开启热更新.
ForbiddenForUnAutoCleanModel 模型未配置自动清理，禁止开启热更新.
        :type HotUpdatedFlag: str
        :param _Reason: 热更新状态位的原因.
注意：此字段可能返回 null，表示取不到有效值。
        :type Reason: str
        :param _ModelTurboFlag: 模型加速标志位.Allowed 允许模型加速. Forbidden 禁止模型加速
        :type ModelTurboFlag: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._HotUpdatedFlag = None
        self._Reason = None
        self._ModelTurboFlag = None
        self._RequestId = None

    @property
    def HotUpdatedFlag(self):
        """热更新标志位. 
Allowed 允许开启热更新.
ForbiddenForEmptyModel 未选择模型，禁止开启热更新.
ForbiddenForIllegalModelType 模型来源非法（仅支持来自模型仓库的模型），禁止开启热更新.
ForbiddenForIllegalImage 镜像来源非法（仅支持tfserving镜像），禁止开启热更新.
ForbiddenForUnAutoCleanModel 模型未配置自动清理，禁止开启热更新.
        :rtype: str
        """
        return self._HotUpdatedFlag

    @HotUpdatedFlag.setter
    def HotUpdatedFlag(self, HotUpdatedFlag):
        self._HotUpdatedFlag = HotUpdatedFlag

    @property
    def Reason(self):
        """热更新状态位的原因.
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Reason

    @Reason.setter
    def Reason(self, Reason):
        self._Reason = Reason

    @property
    def ModelTurboFlag(self):
        """模型加速标志位.Allowed 允许模型加速. Forbidden 禁止模型加速
        :rtype: str
        """
        return self._ModelTurboFlag

    @ModelTurboFlag.setter
    def ModelTurboFlag(self, ModelTurboFlag):
        self._ModelTurboFlag = ModelTurboFlag

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._HotUpdatedFlag = params.get("HotUpdatedFlag")
        self._Reason = params.get("Reason")
        self._ModelTurboFlag = params.get("ModelTurboFlag")
        self._RequestId = params.get("RequestId")


class DescribeModelServiceRequest(AbstractModel):
    """DescribeModelService请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceId: 服务id
        :type ServiceId: str
        :param _ServiceCategory: 服务分类
        :type ServiceCategory: str
        """
        self._ServiceId = None
        self._ServiceCategory = None

    @property
    def ServiceId(self):
        """服务id
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId

    @property
    def ServiceCategory(self):
        """服务分类
        :rtype: str
        """
        return self._ServiceCategory

    @ServiceCategory.setter
    def ServiceCategory(self, ServiceCategory):
        self._ServiceCategory = ServiceCategory


    def _deserialize(self, params):
        self._ServiceId = params.get("ServiceId")
        self._ServiceCategory = params.get("ServiceCategory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeModelServiceResponse(AbstractModel):
    """DescribeModelService返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Service: 服务信息
        :type Service: :class:`tencentcloud.tione.v20211111.models.Service`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Service = None
        self._RequestId = None

    @property
    def Service(self):
        """服务信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.Service`
        """
        return self._Service

    @Service.setter
    def Service(self, Service):
        self._Service = Service

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Service") is not None:
            self._Service = Service()
            self._Service._deserialize(params.get("Service"))
        self._RequestId = params.get("RequestId")


class DescribeModelServiceUserInfoRequest(AbstractModel):
    """DescribeModelServiceUserInfo请求参数结构体

    """


class DescribeModelServiceUserInfoResponse(AbstractModel):
    """DescribeModelServiceUserInfo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceGroupQuota: 服务组的数量配额, 默认为25，且 >=25
        :type ServiceGroupQuota: int
        :param _ServiceGroupNumber: 服务组的当前数量
        :type ServiceGroupNumber: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ServiceGroupQuota = None
        self._ServiceGroupNumber = None
        self._RequestId = None

    @property
    def ServiceGroupQuota(self):
        """服务组的数量配额, 默认为25，且 >=25
        :rtype: int
        """
        return self._ServiceGroupQuota

    @ServiceGroupQuota.setter
    def ServiceGroupQuota(self, ServiceGroupQuota):
        self._ServiceGroupQuota = ServiceGroupQuota

    @property
    def ServiceGroupNumber(self):
        """服务组的当前数量
        :rtype: int
        """
        return self._ServiceGroupNumber

    @ServiceGroupNumber.setter
    def ServiceGroupNumber(self, ServiceGroupNumber):
        self._ServiceGroupNumber = ServiceGroupNumber

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ServiceGroupQuota = params.get("ServiceGroupQuota")
        self._ServiceGroupNumber = params.get("ServiceGroupNumber")
        self._RequestId = params.get("RequestId")


class DescribeModelServicesRequest(AbstractModel):
    """DescribeModelServices请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        :param _Limit: 返回数量，默认为20，最大值为20
        :type Limit: int
        :param _Order: 输出列表的排列顺序。取值范围：ASC：升序排列 DESC：降序排列
        :type Order: str
        :param _OrderField: 排序的依据字段， 取值范围 "CreateTime" "UpdateTime"
        :type OrderField: str
        :param _Filters: 分页参数，支持的分页过滤Name包括：
["ClusterId", "ServiceId", "ServiceGroupName", "ServiceGroupId","Status","CreatedBy","ModelId"]
        :type Filters: list of Filter
        :param _TagFilters: 标签过滤参数
        :type TagFilters: list of TagFilter
        """
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._OrderField = None
        self._Filters = None
        self._TagFilters = None

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回数量，默认为20，最大值为20
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """输出列表的排列顺序。取值范围：ASC：升序排列 DESC：降序排列
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """排序的依据字段， 取值范围 "CreateTime" "UpdateTime"
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Filters(self):
        """分页参数，支持的分页过滤Name包括：
["ClusterId", "ServiceId", "ServiceGroupName", "ServiceGroupId","Status","CreatedBy","ModelId"]
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签过滤参数
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeModelServicesResponse(AbstractModel):
    """DescribeModelServices返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 服务数量
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _Services: 无
注意：此字段可能返回 null，表示取不到有效值。
        :type Services: list of Service
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._Services = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """服务数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Services(self):
        """无
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Service
        """
        return self._Services

    @Services.setter
    def Services(self, Services):
        self._Services = Services

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Services") is not None:
            self._Services = []
            for item in params.get("Services"):
                obj = Service()
                obj._deserialize(item)
                self._Services.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeModelTagsRequest(AbstractModel):
    """DescribeModelTags请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Order: 排序值，支持Asc或Desc，默认Desc
        :type Order: str
        :param _Offset: 偏移值	
        :type Offset: int
        :param _Limit: 返回数据个数，默认20，最大支持200
        :type Limit: int
        :param _Filters: 过滤器
        :type Filters: list of Filter
        """
        self._Order = None
        self._Offset = None
        self._Limit = None
        self._Filters = None

    @property
    def Order(self):
        """排序值，支持Asc或Desc，默认Desc
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def Offset(self):
        """偏移值	
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回数据个数，默认20，最大支持200
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        """过滤器
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._Order = params.get("Order")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeModelTagsResponse(AbstractModel):
    """DescribeModelTags返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelTags: 模型标签列表
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelTags: list of str
        :param _TotalCount: 模型标签数量
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ModelTags = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def ModelTags(self):
        """模型标签列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._ModelTags

    @ModelTags.setter
    def ModelTags(self, ModelTags):
        self._ModelTags = ModelTags

    @property
    def TotalCount(self):
        """模型标签数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ModelTags = params.get("ModelTags")
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeMonitorDataRequest(AbstractModel):
    """DescribeMonitorData请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Namespace: 空间
        :type Namespace: str
        :param _MetricName: 指标名
        :type MetricName: str
        :param _Instances: 实例
        :type Instances: list of FakeInstance
        :param _Period: 周期
        :type Period: int
        :param _StartTime: 开始时间
        :type StartTime: str
        :param _EndTime: 结束时间
        :type EndTime: str
        """
        self._Namespace = None
        self._MetricName = None
        self._Instances = None
        self._Period = None
        self._StartTime = None
        self._EndTime = None

    @property
    def Namespace(self):
        """空间
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def MetricName(self):
        """指标名
        :rtype: str
        """
        return self._MetricName

    @MetricName.setter
    def MetricName(self, MetricName):
        self._MetricName = MetricName

    @property
    def Instances(self):
        """实例
        :rtype: list of FakeInstance
        """
        return self._Instances

    @Instances.setter
    def Instances(self, Instances):
        self._Instances = Instances

    @property
    def Period(self):
        """周期
        :rtype: int
        """
        return self._Period

    @Period.setter
    def Period(self, Period):
        self._Period = Period

    @property
    def StartTime(self):
        """开始时间
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """结束时间
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime


    def _deserialize(self, params):
        self._Namespace = params.get("Namespace")
        self._MetricName = params.get("MetricName")
        if params.get("Instances") is not None:
            self._Instances = []
            for item in params.get("Instances"):
                obj = FakeInstance()
                obj._deserialize(item)
                self._Instances.append(obj)
        self._Period = params.get("Period")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeMonitorDataResponse(AbstractModel):
    """DescribeMonitorData返回参数结构体

    """

    def __init__(self):
        r"""
        :param _MetricName: 指标名
注意：此字段可能返回 null，表示取不到有效值。
        :type MetricName: str
        :param _Period: 周期
注意：此字段可能返回 null，表示取不到有效值。
        :type Period: int
        :param _StartTime: 开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :type StartTime: str
        :param _EndTime: 结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :type EndTime: str
        :param _DataPoints: 点
注意：此字段可能返回 null，表示取不到有效值。
        :type DataPoints: list of FakePoint
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._MetricName = None
        self._Period = None
        self._StartTime = None
        self._EndTime = None
        self._DataPoints = None
        self._RequestId = None

    @property
    def MetricName(self):
        """指标名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._MetricName

    @MetricName.setter
    def MetricName(self, MetricName):
        self._MetricName = MetricName

    @property
    def Period(self):
        """周期
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Period

    @Period.setter
    def Period(self, Period):
        self._Period = Period

    @property
    def StartTime(self):
        """开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def DataPoints(self):
        """点
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of FakePoint
        """
        return self._DataPoints

    @DataPoints.setter
    def DataPoints(self, DataPoints):
        self._DataPoints = DataPoints

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._MetricName = params.get("MetricName")
        self._Period = params.get("Period")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        if params.get("DataPoints") is not None:
            self._DataPoints = []
            for item in params.get("DataPoints"):
                obj = FakePoint()
                obj._deserialize(item)
                self._DataPoints.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeNLPDatasetContentRequest(AbstractModel):
    """DescribeNLPDatasetContent请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _DatasetId: 数据集id
        :type DatasetId: str
        :param _SampleId: 文本md5
        :type SampleId: str
        :param _EvaluationTaskId: 评测任务id
        :type EvaluationTaskId: str
        """
        self._AutoMLTaskId = None
        self._DatasetId = None
        self._SampleId = None
        self._EvaluationTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def DatasetId(self):
        """数据集id
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def SampleId(self):
        """文本md5
        :rtype: str
        """
        return self._SampleId

    @SampleId.setter
    def SampleId(self, SampleId):
        self._SampleId = SampleId

    @property
    def EvaluationTaskId(self):
        """评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._DatasetId = params.get("DatasetId")
        self._SampleId = params.get("SampleId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNLPDatasetContentResponse(AbstractModel):
    """DescribeNLPDatasetContent返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Content: 文本内容
        :type Content: list of str
        :param _ContentSummary: 文本摘要
        :type ContentSummary: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Content = None
        self._ContentSummary = None
        self._RequestId = None

    @property
    def Content(self):
        """文本内容
        :rtype: list of str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def ContentSummary(self):
        """文本摘要
        :rtype: str
        """
        return self._ContentSummary

    @ContentSummary.setter
    def ContentSummary(self, ContentSummary):
        self._ContentSummary = ContentSummary

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Content = params.get("Content")
        self._ContentSummary = params.get("ContentSummary")
        self._RequestId = params.get("RequestId")


class DescribeNetworkConfigRequest(AbstractModel):
    """DescribeNetworkConfig请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DataConfigs: 任务数据配置
        :type DataConfigs: list of DataConfig
        """
        self._DataConfigs = None

    @property
    def DataConfigs(self):
        """任务数据配置
        :rtype: list of DataConfig
        """
        return self._DataConfigs

    @DataConfigs.setter
    def DataConfigs(self, DataConfigs):
        self._DataConfigs = DataConfigs


    def _deserialize(self, params):
        if params.get("DataConfigs") is not None:
            self._DataConfigs = []
            for item in params.get("DataConfigs"):
                obj = DataConfig()
                obj._deserialize(item)
                self._DataConfigs.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNetworkConfigResponse(AbstractModel):
    """DescribeNetworkConfig返回参数结构体

    """

    def __init__(self):
        r"""
        :param _VpcId: 数据配置关联的vpcId
        :type VpcId: str
        :param _SubnetId: 数据配置关联的subnetId
        :type SubnetId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._VpcId = None
        self._SubnetId = None
        self._RequestId = None

    @property
    def VpcId(self):
        """数据配置关联的vpcId
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """数据配置关联的subnetId
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._RequestId = params.get("RequestId")


class DescribeNotebookImageKernelsRequest(AbstractModel):
    """DescribeNotebookImageKernels请求参数结构体

    """

    def __init__(self):
        r"""
        :param _NotebookId: notebook id
        :type NotebookId: str
        """
        self._NotebookId = None

    @property
    def NotebookId(self):
        """notebook id
        :rtype: str
        """
        return self._NotebookId

    @NotebookId.setter
    def NotebookId(self, NotebookId):
        self._NotebookId = NotebookId


    def _deserialize(self, params):
        self._NotebookId = params.get("NotebookId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNotebookImageKernelsResponse(AbstractModel):
    """DescribeNotebookImageKernels返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Kernels: 镜像kernel数组
        :type Kernels: list of str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Kernels = None
        self._RequestId = None

    @property
    def Kernels(self):
        """镜像kernel数组
        :rtype: list of str
        """
        return self._Kernels

    @Kernels.setter
    def Kernels(self, Kernels):
        self._Kernels = Kernels

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Kernels = params.get("Kernels")
        self._RequestId = params.get("RequestId")


class DescribeNotebookImageRecordsRequest(AbstractModel):
    """DescribeNotebookImageRecords请求参数结构体

    """

    def __init__(self):
        r"""
        :param _NotebookId: notebook id
        :type NotebookId: str
        :param _Offset: 位移值
        :type Offset: int
        :param _Limit: 日志限制
        :type Limit: int
        :param _Filters: 状态筛选
        :type Filters: list of Filter
        """
        self._NotebookId = None
        self._Offset = None
        self._Limit = None
        self._Filters = None

    @property
    def NotebookId(self):
        """notebook id
        :rtype: str
        """
        return self._NotebookId

    @NotebookId.setter
    def NotebookId(self, NotebookId):
        self._NotebookId = NotebookId

    @property
    def Offset(self):
        """位移值
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """日志限制
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        """状态筛选
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._NotebookId = params.get("NotebookId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNotebookImageRecordsResponse(AbstractModel):
    """DescribeNotebookImageRecords返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 总条数
        :type TotalCount: int
        :param _NotebookImageRecords: 镜像保存记录
        :type NotebookImageRecords: list of NotebookImageRecord
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._NotebookImageRecords = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """总条数
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def NotebookImageRecords(self):
        """镜像保存记录
        :rtype: list of NotebookImageRecord
        """
        return self._NotebookImageRecords

    @NotebookImageRecords.setter
    def NotebookImageRecords(self, NotebookImageRecords):
        self._NotebookImageRecords = NotebookImageRecords

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("NotebookImageRecords") is not None:
            self._NotebookImageRecords = []
            for item in params.get("NotebookImageRecords"):
                obj = NotebookImageRecord()
                obj._deserialize(item)
                self._NotebookImageRecords.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeNotebookRequest(AbstractModel):
    """DescribeNotebook请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: notebook id
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """notebook id
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNotebookResponse(AbstractModel):
    """DescribeNotebook返回参数结构体

    """

    def __init__(self):
        r"""
        :param _NotebookDetail: 详情
        :type NotebookDetail: :class:`tencentcloud.tione.v20211111.models.NotebookDetail`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._NotebookDetail = None
        self._RequestId = None

    @property
    def NotebookDetail(self):
        """详情
        :rtype: :class:`tencentcloud.tione.v20211111.models.NotebookDetail`
        """
        return self._NotebookDetail

    @NotebookDetail.setter
    def NotebookDetail(self, NotebookDetail):
        self._NotebookDetail = NotebookDetail

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("NotebookDetail") is not None:
            self._NotebookDetail = NotebookDetail()
            self._NotebookDetail._deserialize(params.get("NotebookDetail"))
        self._RequestId = params.get("RequestId")


class DescribeNotebookSaveImageConfigRequest(AbstractModel):
    """DescribeNotebookSaveImageConfig请求参数结构体

    """


class DescribeNotebookSaveImageConfigResponse(AbstractModel):
    """DescribeNotebookSaveImageConfig返回参数结构体

    """

    def __init__(self):
        r"""
        :param _MaxSaveImageTimeOut: 保存镜像最大超时时间，单位分钟
注意：此字段可能返回 null，表示取不到有效值。
        :type MaxSaveImageTimeOut: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._MaxSaveImageTimeOut = None
        self._RequestId = None

    @property
    def MaxSaveImageTimeOut(self):
        """保存镜像最大超时时间，单位分钟
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._MaxSaveImageTimeOut

    @MaxSaveImageTimeOut.setter
    def MaxSaveImageTimeOut(self, MaxSaveImageTimeOut):
        self._MaxSaveImageTimeOut = MaxSaveImageTimeOut

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._MaxSaveImageTimeOut = params.get("MaxSaveImageTimeOut")
        self._RequestId = params.get("RequestId")


class DescribeNotebookSecondaryStatusRequest(AbstractModel):
    """DescribeNotebookSecondaryStatus请求参数结构体

    """

    def __init__(self):
        r"""
        :param _NotebookId: notebook实例ID
        :type NotebookId: str
        """
        self._NotebookId = None

    @property
    def NotebookId(self):
        """notebook实例ID
        :rtype: str
        """
        return self._NotebookId

    @NotebookId.setter
    def NotebookId(self, NotebookId):
        self._NotebookId = NotebookId


    def _deserialize(self, params):
        self._NotebookId = params.get("NotebookId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNotebookSecondaryStatusResponse(AbstractModel):
    """DescribeNotebookSecondaryStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _SecondaryStatus: 二级状态信息
注意：此字段可能返回 null，表示取不到有效值。
        :type SecondaryStatus: list of TrainingTaskSecondaryStatus
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._SecondaryStatus = None
        self._RequestId = None

    @property
    def SecondaryStatus(self):
        """二级状态信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TrainingTaskSecondaryStatus
        """
        return self._SecondaryStatus

    @SecondaryStatus.setter
    def SecondaryStatus(self, SecondaryStatus):
        self._SecondaryStatus = SecondaryStatus

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("SecondaryStatus") is not None:
            self._SecondaryStatus = []
            for item in params.get("SecondaryStatus"):
                obj = TrainingTaskSecondaryStatus()
                obj._deserialize(item)
                self._SecondaryStatus.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeNotebookStorageQuotaRequest(AbstractModel):
    """DescribeNotebookStorageQuota请求参数结构体

    """


class DescribeNotebookStorageQuotaResponse(AbstractModel):
    """DescribeNotebookStorageQuota返回参数结构体

    """

    def __init__(self):
        r"""
        :param _IsWhitelist: 是否为配额白名单
        :type IsWhitelist: bool
        :param _FreeCbs: 免费硬盘大小
        :type FreeCbs: int
        :param _MaxCbs: 最大可购买硬盘大小
        :type MaxCbs: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._IsWhitelist = None
        self._FreeCbs = None
        self._MaxCbs = None
        self._RequestId = None

    @property
    def IsWhitelist(self):
        """是否为配额白名单
        :rtype: bool
        """
        return self._IsWhitelist

    @IsWhitelist.setter
    def IsWhitelist(self, IsWhitelist):
        self._IsWhitelist = IsWhitelist

    @property
    def FreeCbs(self):
        """免费硬盘大小
        :rtype: int
        """
        return self._FreeCbs

    @FreeCbs.setter
    def FreeCbs(self, FreeCbs):
        self._FreeCbs = FreeCbs

    @property
    def MaxCbs(self):
        """最大可购买硬盘大小
        :rtype: int
        """
        return self._MaxCbs

    @MaxCbs.setter
    def MaxCbs(self, MaxCbs):
        self._MaxCbs = MaxCbs

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._IsWhitelist = params.get("IsWhitelist")
        self._FreeCbs = params.get("FreeCbs")
        self._MaxCbs = params.get("MaxCbs")
        self._RequestId = params.get("RequestId")


class DescribeNotebooksRequest(AbstractModel):
    """DescribeNotebooks请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        :param _Limit: 每页返回的实例数，默认为10
        :type Limit: int
        :param _Order: 输出列表的排列顺序。取值范围：ASC：升序排列 DESC：降序排列。默认为DESC
        :type Order: str
        :param _OrderField: 根据哪个字段排序，如：CreateTime、UpdateTime，默认为UpdateTime
        :type OrderField: str
        :param _Filters: 过滤器，eg：[{ "Name": "Id", "Values": ["nb-123456789"] }]

取值范围
Name（名称）：notebook1
Id（notebook ID）：nb-123456789
Status（状态）：Starting / Running / Stopped / Stopping / Failed / SubmitFailed
Creator（创建者 uin）：100014761913
ChargeType（计费类型）：PREPAID（预付费）/ POSTPAID_BY_HOUR（后付费）
ChargeStatus（计费状态）：NOT_BILLING（未开始计费）/ BILLING（计费中）/ BILLING_STORAGE（存储计费中）/ARREARS_STOP（欠费停止）
DefaultCodeRepoId（默认代码仓库ID）：cr-123456789
AdditionalCodeRepoId（关联代码仓库ID）：cr-123456789
LifecycleScriptId（生命周期ID）：ls-12312312311312
        :type Filters: list of Filter
        :param _TagFilters: 标签过滤器，eg：[{ "TagKey": "TagKeyA", "TagValue": ["TagValueA"] }]
        :type TagFilters: list of TagFilter
        """
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._OrderField = None
        self._Filters = None
        self._TagFilters = None

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """每页返回的实例数，默认为10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """输出列表的排列顺序。取值范围：ASC：升序排列 DESC：降序排列。默认为DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """根据哪个字段排序，如：CreateTime、UpdateTime，默认为UpdateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Filters(self):
        """过滤器，eg：[{ "Name": "Id", "Values": ["nb-123456789"] }]

取值范围
Name（名称）：notebook1
Id（notebook ID）：nb-123456789
Status（状态）：Starting / Running / Stopped / Stopping / Failed / SubmitFailed
Creator（创建者 uin）：100014761913
ChargeType（计费类型）：PREPAID（预付费）/ POSTPAID_BY_HOUR（后付费）
ChargeStatus（计费状态）：NOT_BILLING（未开始计费）/ BILLING（计费中）/ BILLING_STORAGE（存储计费中）/ARREARS_STOP（欠费停止）
DefaultCodeRepoId（默认代码仓库ID）：cr-123456789
AdditionalCodeRepoId（关联代码仓库ID）：cr-123456789
LifecycleScriptId（生命周期ID）：ls-12312312311312
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签过滤器，eg：[{ "TagKey": "TagKeyA", "TagValue": ["TagValueA"] }]
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeNotebooksResponse(AbstractModel):
    """DescribeNotebooks返回参数结构体

    """

    def __init__(self):
        r"""
        :param _NotebookSet: 详情
        :type NotebookSet: list of NotebookSetItem
        :param _TotalCount: 总条数
        :type TotalCount: int
        :param _EnableIdleRecycle: 是否开启闲置回收
        :type EnableIdleRecycle: bool
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._NotebookSet = None
        self._TotalCount = None
        self._EnableIdleRecycle = None
        self._RequestId = None

    @property
    def NotebookSet(self):
        """详情
        :rtype: list of NotebookSetItem
        """
        return self._NotebookSet

    @NotebookSet.setter
    def NotebookSet(self, NotebookSet):
        self._NotebookSet = NotebookSet

    @property
    def TotalCount(self):
        """总条数
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def EnableIdleRecycle(self):
        """是否开启闲置回收
        :rtype: bool
        """
        return self._EnableIdleRecycle

    @EnableIdleRecycle.setter
    def EnableIdleRecycle(self, EnableIdleRecycle):
        self._EnableIdleRecycle = EnableIdleRecycle

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("NotebookSet") is not None:
            self._NotebookSet = []
            for item in params.get("NotebookSet"):
                obj = NotebookSetItem()
                obj._deserialize(item)
                self._NotebookSet.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._EnableIdleRecycle = params.get("EnableIdleRecycle")
        self._RequestId = params.get("RequestId")


class DescribeObjectiveEvaluationOutputsRequest(AbstractModel):
    """DescribeObjectiveEvaluationOutputs请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeObjectiveEvaluationOutputsResponse(AbstractModel):
    """DescribeObjectiveEvaluationOutputs返回参数结构体

    """

    def __init__(self):
        r"""
        :param _EvaluationCosUrl: 下载链接
        :type EvaluationCosUrl: str
        :param _Name: 评测名称
        :type Name: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._EvaluationCosUrl = None
        self._Name = None
        self._RequestId = None

    @property
    def EvaluationCosUrl(self):
        """下载链接
        :rtype: str
        """
        return self._EvaluationCosUrl

    @EvaluationCosUrl.setter
    def EvaluationCosUrl(self, EvaluationCosUrl):
        self._EvaluationCosUrl = EvaluationCosUrl

    @property
    def Name(self):
        """评测名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._EvaluationCosUrl = params.get("EvaluationCosUrl")
        self._Name = params.get("Name")
        self._RequestId = params.get("RequestId")


class DescribeObjectiveEvaluationProgressRequest(AbstractModel):
    """DescribeObjectiveEvaluationProgress请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeObjectiveEvaluationProgressResponse(AbstractModel):
    """DescribeObjectiveEvaluationProgress返回参数结构体

    """

    def __init__(self):
        r"""
        :param _EvaluationProgress: [废弃]评测进度
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationProgress: list of EvaluationProgress
        :param _Progress: 评测进度
        :type Progress: float
        :param _Events:  评测进度详情
注意：此字段可能返回 null，表示取不到有效值。
        :type Events: list of ObjevalEvent
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._EvaluationProgress = None
        self._Progress = None
        self._Events = None
        self._RequestId = None

    @property
    def EvaluationProgress(self):
        """[废弃]评测进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of EvaluationProgress
        """
        return self._EvaluationProgress

    @EvaluationProgress.setter
    def EvaluationProgress(self, EvaluationProgress):
        self._EvaluationProgress = EvaluationProgress

    @property
    def Progress(self):
        """评测进度
        :rtype: float
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def Events(self):
        """ 评测进度详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ObjevalEvent
        """
        return self._Events

    @Events.setter
    def Events(self, Events):
        self._Events = Events

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EvaluationProgress") is not None:
            self._EvaluationProgress = []
            for item in params.get("EvaluationProgress"):
                obj = EvaluationProgress()
                obj._deserialize(item)
                self._EvaluationProgress.append(obj)
        self._Progress = params.get("Progress")
        if params.get("Events") is not None:
            self._Events = []
            for item in params.get("Events"):
                obj = ObjevalEvent()
                obj._deserialize(item)
                self._Events.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeObjectiveEvaluationRequest(AbstractModel):
    """DescribeObjectiveEvaluation请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeObjectiveEvaluationResponse(AbstractModel):
    """DescribeObjectiveEvaluation返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Models: 模型
注意：此字段可能返回 null，表示取不到有效值。
        :type Models: list of EvalModel
        :param _Datasets: 评测集
注意：此字段可能返回 null，表示取不到有效值。
        :type Datasets: list of SimpleCFSConfig
        :param _Name: 评测名称
        :type Name: str
        :param _Status: 状态
        :type Status: str
        :param _LogParams: 日志查询参数
注意：此字段可能返回 null，表示取不到有效值。
        :type LogParams: list of LogParam
        :param _Tags: 标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _Description: 描述
        :type Description: str
        :param _ChargeType: 计费
        :type ChargeType: str
        :param _ResourceGroupId: 资源
        :type ResourceGroupId: str
        :param _Resources: 预付费资源
注意：此字段可能返回 null，表示取不到有效值。
        :type Resources: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        :param _InstanceType: 资源类型
        :type InstanceType: str
        :param _ResourceGroupName: 资源组名称
        :type ResourceGroupName: str
        :param _DeployType: 部署类型
        :type DeployType: str
        :param _InstancePerReplicas: 单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :type InstancePerReplicas: int
        :param _Uin: Uin
        :type Uin: str
        :param _SubUin: SubUin
        :type SubUin: str
        :param _SubUinName: SubUinName
        :type SubUinName: str
        :param _Region: Region
        :type Region: str
        :param _ResourceGroupSWType: 纳管类型信息
        :type ResourceGroupSWType: str
        :param _CreateTime: 创建时间，RFC3339
        :type CreateTime: str
        :param _InstanceTypeAlias: 后付费资源信息
        :type InstanceTypeAlias: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Models = None
        self._Datasets = None
        self._Name = None
        self._Status = None
        self._LogParams = None
        self._Tags = None
        self._Description = None
        self._ChargeType = None
        self._ResourceGroupId = None
        self._Resources = None
        self._InstanceType = None
        self._ResourceGroupName = None
        self._DeployType = None
        self._InstancePerReplicas = None
        self._Uin = None
        self._SubUin = None
        self._SubUinName = None
        self._Region = None
        self._ResourceGroupSWType = None
        self._CreateTime = None
        self._InstanceTypeAlias = None
        self._RequestId = None

    @property
    def Models(self):
        """模型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of EvalModel
        """
        return self._Models

    @Models.setter
    def Models(self, Models):
        self._Models = Models

    @property
    def Datasets(self):
        """评测集
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of SimpleCFSConfig
        """
        return self._Datasets

    @Datasets.setter
    def Datasets(self, Datasets):
        self._Datasets = Datasets

    @property
    def Name(self):
        """评测名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Status(self):
        """状态
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def LogParams(self):
        """日志查询参数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of LogParam
        """
        return self._LogParams

    @LogParams.setter
    def LogParams(self, LogParams):
        self._LogParams = LogParams

    @property
    def Tags(self):
        """标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def Description(self):
        """描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def ChargeType(self):
        """计费
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceGroupId(self):
        """资源
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def Resources(self):
        """预付费资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        """
        return self._Resources

    @Resources.setter
    def Resources(self, Resources):
        self._Resources = Resources

    @property
    def InstanceType(self):
        """资源类型
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def ResourceGroupName(self):
        """资源组名称
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def DeployType(self):
        """部署类型
        :rtype: str
        """
        return self._DeployType

    @DeployType.setter
    def DeployType(self, DeployType):
        self._DeployType = DeployType

    @property
    def InstancePerReplicas(self):
        """单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :rtype: int
        """
        return self._InstancePerReplicas

    @InstancePerReplicas.setter
    def InstancePerReplicas(self, InstancePerReplicas):
        self._InstancePerReplicas = InstancePerReplicas

    @property
    def Uin(self):
        """Uin
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def SubUin(self):
        """SubUin
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def SubUinName(self):
        """SubUinName
        :rtype: str
        """
        return self._SubUinName

    @SubUinName.setter
    def SubUinName(self, SubUinName):
        self._SubUinName = SubUinName

    @property
    def Region(self):
        """Region
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def ResourceGroupSWType(self):
        """纳管类型信息
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType

    @property
    def CreateTime(self):
        """创建时间，RFC3339
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def InstanceTypeAlias(self):
        """后付费资源信息
        :rtype: str
        """
        return self._InstanceTypeAlias

    @InstanceTypeAlias.setter
    def InstanceTypeAlias(self, InstanceTypeAlias):
        self._InstanceTypeAlias = InstanceTypeAlias

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Models") is not None:
            self._Models = []
            for item in params.get("Models"):
                obj = EvalModel()
                obj._deserialize(item)
                self._Models.append(obj)
        if params.get("Datasets") is not None:
            self._Datasets = []
            for item in params.get("Datasets"):
                obj = SimpleCFSConfig()
                obj._deserialize(item)
                self._Datasets.append(obj)
        self._Name = params.get("Name")
        self._Status = params.get("Status")
        if params.get("LogParams") is not None:
            self._LogParams = []
            for item in params.get("LogParams"):
                obj = LogParam()
                obj._deserialize(item)
                self._LogParams.append(obj)
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._Description = params.get("Description")
        self._ChargeType = params.get("ChargeType")
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("Resources") is not None:
            self._Resources = ResourceInfo()
            self._Resources._deserialize(params.get("Resources"))
        self._InstanceType = params.get("InstanceType")
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._DeployType = params.get("DeployType")
        self._InstancePerReplicas = params.get("InstancePerReplicas")
        self._Uin = params.get("Uin")
        self._SubUin = params.get("SubUin")
        self._SubUinName = params.get("SubUinName")
        self._Region = params.get("Region")
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        self._CreateTime = params.get("CreateTime")
        self._InstanceTypeAlias = params.get("InstanceTypeAlias")
        self._RequestId = params.get("RequestId")


class DescribeObjectiveEvaluationsRequest(AbstractModel):
    """DescribeObjectiveEvaluations请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤
        :type Filters: list of Filter
        :param _Offset: Offset
        :type Offset: int
        :param _Limit: Limit
        :type Limit: int
        :param _TagFilters: 标签过滤
        :type TagFilters: list of TagFilter
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._TagFilters = None

    @property
    def Filters(self):
        """过滤
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Limit
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def TagFilters(self):
        """标签过滤
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeObjectiveEvaluationsResponse(AbstractModel):
    """DescribeObjectiveEvaluations返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 总数
        :type TotalCount: int
        :param _Evaluations: 评测列表
        :type Evaluations: list of ObjectiveEvaluation
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._Evaluations = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """总数
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Evaluations(self):
        """评测列表
        :rtype: list of ObjectiveEvaluation
        """
        return self._Evaluations

    @Evaluations.setter
    def Evaluations(self, Evaluations):
        self._Evaluations = Evaluations

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Evaluations") is not None:
            self._Evaluations = []
            for item in params.get("Evaluations"):
                obj = ObjectiveEvaluation()
                obj._deserialize(item)
                self._Evaluations.append(obj)
        self._RequestId = params.get("RequestId")


class DescribePendingTrainingTasksByPriorityRequest(AbstractModel):
    """DescribePendingTrainingTasksByPriority请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组 id
        :type ResourceGroupId: str
        :param _Filters: 过滤器，eg：[{ "Name": "Id", "Values": ["train-23091792777383936"] }]

取值范围：
Name（名称）：task1
Id（task ID）：train-23091792777383936
Status（状态）：SUBMITTING/PENDING/STARTING / RUNNING / STOPPING / STOPPED / FAILED / SUCCEED / SUBMIT_FAILED
ResourceGroupId（资源组 Id）：trsg-kvvfrwl7
Creator（创建者 uin）：100014761913
ChargeType（计费类型）：PREPAID（预付费）/ POSTPAID_BY_HOUR（后付费）
CHARGE_STATUS（计费状态）：NOT_BILLING（未开始计费）/ BILLING（计费中）/ ARREARS_STOP（欠费停止）
        :type Filters: list of Filter
        """
        self._ResourceGroupId = None
        self._Filters = None

    @property
    def ResourceGroupId(self):
        """资源组 id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def Filters(self):
        """过滤器，eg：[{ "Name": "Id", "Values": ["train-23091792777383936"] }]

取值范围：
Name（名称）：task1
Id（task ID）：train-23091792777383936
Status（状态）：SUBMITTING/PENDING/STARTING / RUNNING / STOPPING / STOPPED / FAILED / SUCCEED / SUBMIT_FAILED
ResourceGroupId（资源组 Id）：trsg-kvvfrwl7
Creator（创建者 uin）：100014761913
ChargeType（计费类型）：PREPAID（预付费）/ POSTPAID_BY_HOUR（后付费）
CHARGE_STATUS（计费状态）：NOT_BILLING（未开始计费）/ BILLING（计费中）/ ARREARS_STOP（欠费停止）
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribePendingTrainingTasksByPriorityResponse(AbstractModel):
    """DescribePendingTrainingTasksByPriority返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TrainingTaskSetItems: 训练任务集
        :type TrainingTaskSetItems: list of TrainingTaskSetItem
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TrainingTaskSetItems = None
        self._RequestId = None

    @property
    def TrainingTaskSetItems(self):
        """训练任务集
        :rtype: list of TrainingTaskSetItem
        """
        return self._TrainingTaskSetItems

    @TrainingTaskSetItems.setter
    def TrainingTaskSetItems(self, TrainingTaskSetItems):
        self._TrainingTaskSetItems = TrainingTaskSetItems

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TrainingTaskSetItems") is not None:
            self._TrainingTaskSetItems = []
            for item in params.get("TrainingTaskSetItems"):
                obj = TrainingTaskSetItem()
                obj._deserialize(item)
                self._TrainingTaskSetItems.append(obj)
        self._RequestId = params.get("RequestId")


class DescribePlatformImagesRequest(AbstractModel):
    """DescribePlatformImages请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤器,  Name支持ImageId/ImageName/SupportDataPipeline/AllowSaveAllContent/ImageRange，其中ImageRange支持枚举值Train,Inference,Notebook
        :type Filters: list of Filter
        :param _Offset: 偏移信息
        :type Offset: int
        :param _Limit: 返回数量, 默认100
        :type Limit: int
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None

    @property
    def Filters(self):
        """过滤器,  Name支持ImageId/ImageName/SupportDataPipeline/AllowSaveAllContent/ImageRange，其中ImageRange支持枚举值Train,Inference,Notebook
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """偏移信息
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回数量, 默认100
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribePlatformImagesResponse(AbstractModel):
    """DescribePlatformImages返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 数量
        :type TotalCount: int
        :param _PlatformImageInfos: 镜像列表
        :type PlatformImageInfos: list of PlatformImageInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._PlatformImageInfos = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """数量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def PlatformImageInfos(self):
        """镜像列表
        :rtype: list of PlatformImageInfo
        """
        return self._PlatformImageInfos

    @PlatformImageInfos.setter
    def PlatformImageInfos(self, PlatformImageInfos):
        self._PlatformImageInfos = PlatformImageInfos

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("PlatformImageInfos") is not None:
            self._PlatformImageInfos = []
            for item in params.get("PlatformImageInfos"):
                obj = PlatformImageInfo()
                obj._deserialize(item)
                self._PlatformImageInfos.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeProjectRequest(AbstractModel):
    """DescribeProject请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ProjectId: 工程ID
        :type ProjectId: str
        """
        self._ProjectId = None

    @property
    def ProjectId(self):
        """工程ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeProjectResponse(AbstractModel):
    """DescribeProject返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ProjectDetail: 工程详情
        :type ProjectDetail: :class:`tencentcloud.tione.v20211111.models.ProjectDetail`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ProjectDetail = None
        self._RequestId = None

    @property
    def ProjectDetail(self):
        """工程详情
        :rtype: :class:`tencentcloud.tione.v20211111.models.ProjectDetail`
        """
        return self._ProjectDetail

    @ProjectDetail.setter
    def ProjectDetail(self, ProjectDetail):
        self._ProjectDetail = ProjectDetail

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ProjectDetail") is not None:
            self._ProjectDetail = ProjectDetail()
            self._ProjectDetail._deserialize(params.get("ProjectDetail"))
        self._RequestId = params.get("RequestId")


class DescribeProjectsRequest(AbstractModel):
    """DescribeProjects请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤器，eg：[{ "Name": "ProjectName", "Values": ["demo"] }]

取值范围：
ProjectName（名称）：my-工程_01
ProjectId（工程ID）：pro-2342sdsads12
        :type Filters: list of Filter
        :param _TagFilters: 标签过滤器，eg：[{ "TagKey": "TagKeyA", "TagValue": ["TagValueA"] }]
        :type TagFilters: list of TagFilter
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        :param _Limit: 返回数量，默认为10，最大为200
        :type Limit: int
        :param _Order: 输出列表的排列顺序。取值范围：ASC（升序排列）/ DESC（降序排列），默认为DESC
        :type Order: str
        :param _OrderField: 排序的依据字段， 取值范围 "CreateTime" "UpdateTime"
        :type OrderField: str
        """
        self._Filters = None
        self._TagFilters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._OrderField = None

    @property
    def Filters(self):
        """过滤器，eg：[{ "Name": "ProjectName", "Values": ["demo"] }]

取值范围：
ProjectName（名称）：my-工程_01
ProjectId（工程ID）：pro-2342sdsads12
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签过滤器，eg：[{ "TagKey": "TagKeyA", "TagValue": ["TagValueA"] }]
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回数量，默认为10，最大为200
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """输出列表的排列顺序。取值范围：ASC（升序排列）/ DESC（降序排列），默认为DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """排序的依据字段， 取值范围 "CreateTime" "UpdateTime"
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeProjectsResponse(AbstractModel):
    """DescribeProjects返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 总量
        :type TotalCount: int
        :param _ProjectSet: 工程详情数组
        :type ProjectSet: list of ProjectDetail
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._ProjectSet = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """总量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def ProjectSet(self):
        """工程详情数组
        :rtype: list of ProjectDetail
        """
        return self._ProjectSet

    @ProjectSet.setter
    def ProjectSet(self, ProjectSet):
        self._ProjectSet = ProjectSet

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("ProjectSet") is not None:
            self._ProjectSet = []
            for item in params.get("ProjectSet"):
                obj = ProjectDetail()
                obj._deserialize(item)
                self._ProjectSet.append(obj)
        self._RequestId = params.get("RequestId")


class DescribePublicAlgoGroupListRequest(AbstractModel):
    """DescribePublicAlgoGroupList请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤器
        :type Filters: list of Filter
        :param _Offset: 偏移量
        :type Offset: int
        :param _Limit: 返回记录条数，默认10
        :type Limit: int
        :param _OrderField: 排序字段，默认CreateTime
        :type OrderField: str
        :param _Order: 排序方式：ASC/DESC，默认DESC
        :type Order: str
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._OrderField = None
        self._Order = None

    @property
    def Filters(self):
        """过滤器
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回记录条数，默认10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def OrderField(self):
        """排序字段，默认CreateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Order(self):
        """排序方式：ASC/DESC，默认DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._OrderField = params.get("OrderField")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribePublicAlgoGroupListResponse(AbstractModel):
    """DescribePublicAlgoGroupList返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 算法组数量
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _PublicAlgoGroups: 公共算法组列表
注意：此字段可能返回 null，表示取不到有效值。
        :type PublicAlgoGroups: list of PublicAlgoGroup
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._PublicAlgoGroups = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """算法组数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def PublicAlgoGroups(self):
        """公共算法组列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of PublicAlgoGroup
        """
        return self._PublicAlgoGroups

    @PublicAlgoGroups.setter
    def PublicAlgoGroups(self, PublicAlgoGroups):
        self._PublicAlgoGroups = PublicAlgoGroups

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("PublicAlgoGroups") is not None:
            self._PublicAlgoGroups = []
            for item in params.get("PublicAlgoGroups"):
                obj = PublicAlgoGroup()
                obj._deserialize(item)
                self._PublicAlgoGroups.append(obj)
        self._RequestId = params.get("RequestId")


class DescribePublicAlgoSeriesListRequest(AbstractModel):
    """DescribePublicAlgoSeriesList请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤器
        :type Filters: list of Filter
        :param _Offset: 偏移量
        :type Offset: int
        :param _Limit: 返回记录条数，默认10
        :type Limit: int
        :param _OrderField: 排序字段，默认CreateTime
        :type OrderField: str
        :param _Order: 排序方式：ASC/DESC，默认DESC
        :type Order: str
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._OrderField = None
        self._Order = None

    @property
    def Filters(self):
        """过滤器
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回记录条数，默认10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def OrderField(self):
        """排序字段，默认CreateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Order(self):
        """排序方式：ASC/DESC，默认DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._OrderField = params.get("OrderField")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribePublicAlgoSeriesListResponse(AbstractModel):
    """DescribePublicAlgoSeriesList返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 算法组数量
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _PublicAlgoSeries: 公共算法系列列表
注意：此字段可能返回 null，表示取不到有效值。
        :type PublicAlgoSeries: list of PublicAlgoSeries
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._PublicAlgoSeries = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """算法组数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def PublicAlgoSeries(self):
        """公共算法系列列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of PublicAlgoSeries
        """
        return self._PublicAlgoSeries

    @PublicAlgoSeries.setter
    def PublicAlgoSeries(self, PublicAlgoSeries):
        self._PublicAlgoSeries = PublicAlgoSeries

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("PublicAlgoSeries") is not None:
            self._PublicAlgoSeries = []
            for item in params.get("PublicAlgoSeries"):
                obj = PublicAlgoSeries()
                obj._deserialize(item)
                self._PublicAlgoSeries.append(obj)
        self._RequestId = params.get("RequestId")


class DescribePublicAlgoVersionListRequest(AbstractModel):
    """DescribePublicAlgoVersionList请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤器
        :type Filters: list of Filter
        :param _Offset: 偏移量
        :type Offset: int
        :param _Limit: 返回记录条数，默认10
        :type Limit: int
        :param _NeedsAggregate: 是否需要聚合
        :type NeedsAggregate: bool
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._NeedsAggregate = None

    @property
    def Filters(self):
        """过滤器
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回记录条数，默认10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def NeedsAggregate(self):
        """是否需要聚合
        :rtype: bool
        """
        return self._NeedsAggregate

    @NeedsAggregate.setter
    def NeedsAggregate(self, NeedsAggregate):
        self._NeedsAggregate = NeedsAggregate


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._NeedsAggregate = params.get("NeedsAggregate")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribePublicAlgoVersionListResponse(AbstractModel):
    """DescribePublicAlgoVersionList返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 算法版本数量
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _PublicAlgoVersions: 公共算法版本列表
注意：此字段可能返回 null，表示取不到有效值。
        :type PublicAlgoVersions: list of PublicAlgoVersion
        :param _AggregatePublicAlgoVersions: 聚合后的公共算法版本列表
注意：此字段可能返回 null，表示取不到有效值。
        :type AggregatePublicAlgoVersions: list of AggregatePublicAlgoVersion
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._PublicAlgoVersions = None
        self._AggregatePublicAlgoVersions = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """算法版本数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def PublicAlgoVersions(self):
        """公共算法版本列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of PublicAlgoVersion
        """
        return self._PublicAlgoVersions

    @PublicAlgoVersions.setter
    def PublicAlgoVersions(self, PublicAlgoVersions):
        self._PublicAlgoVersions = PublicAlgoVersions

    @property
    def AggregatePublicAlgoVersions(self):
        """聚合后的公共算法版本列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of AggregatePublicAlgoVersion
        """
        return self._AggregatePublicAlgoVersions

    @AggregatePublicAlgoVersions.setter
    def AggregatePublicAlgoVersions(self, AggregatePublicAlgoVersions):
        self._AggregatePublicAlgoVersions = AggregatePublicAlgoVersions

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("PublicAlgoVersions") is not None:
            self._PublicAlgoVersions = []
            for item in params.get("PublicAlgoVersions"):
                obj = PublicAlgoVersion()
                obj._deserialize(item)
                self._PublicAlgoVersions.append(obj)
        if params.get("AggregatePublicAlgoVersions") is not None:
            self._AggregatePublicAlgoVersions = []
            for item in params.get("AggregatePublicAlgoVersions"):
                obj = AggregatePublicAlgoVersion()
                obj._deserialize(item)
                self._AggregatePublicAlgoVersions.append(obj)
        self._RequestId = params.get("RequestId")


class DescribePublicKeyRequest(AbstractModel):
    """DescribePublicKey请求参数结构体

    """

    def __init__(self):
        r"""
        :param _KeyId: 公钥ID
        :type KeyId: str
        :param _EncryptAlgorithm: 算法类型
        :type EncryptAlgorithm: str
        """
        self._KeyId = None
        self._EncryptAlgorithm = None

    @property
    def KeyId(self):
        """公钥ID
        :rtype: str
        """
        return self._KeyId

    @KeyId.setter
    def KeyId(self, KeyId):
        self._KeyId = KeyId

    @property
    def EncryptAlgorithm(self):
        """算法类型
        :rtype: str
        """
        return self._EncryptAlgorithm

    @EncryptAlgorithm.setter
    def EncryptAlgorithm(self, EncryptAlgorithm):
        self._EncryptAlgorithm = EncryptAlgorithm


    def _deserialize(self, params):
        self._KeyId = params.get("KeyId")
        self._EncryptAlgorithm = params.get("EncryptAlgorithm")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribePublicKeyResponse(AbstractModel):
    """DescribePublicKey返回参数结构体

    """

    def __init__(self):
        r"""
        :param _KeyId: 密钥公钥ID。
        :type KeyId: str
        :param _PublicKey: 经过base64编码的公钥内容。
        :type PublicKey: str
        :param _PublicKeyPem: PEM格式的公钥内容。
        :type PublicKeyPem: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._KeyId = None
        self._PublicKey = None
        self._PublicKeyPem = None
        self._RequestId = None

    @property
    def KeyId(self):
        """密钥公钥ID。
        :rtype: str
        """
        return self._KeyId

    @KeyId.setter
    def KeyId(self, KeyId):
        self._KeyId = KeyId

    @property
    def PublicKey(self):
        """经过base64编码的公钥内容。
        :rtype: str
        """
        return self._PublicKey

    @PublicKey.setter
    def PublicKey(self, PublicKey):
        self._PublicKey = PublicKey

    @property
    def PublicKeyPem(self):
        """PEM格式的公钥内容。
        :rtype: str
        """
        return self._PublicKeyPem

    @PublicKeyPem.setter
    def PublicKeyPem(self, PublicKeyPem):
        self._PublicKeyPem = PublicKeyPem

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._KeyId = params.get("KeyId")
        self._PublicKey = params.get("PublicKey")
        self._PublicKeyPem = params.get("PublicKeyPem")
        self._RequestId = params.get("RequestId")


class DescribeRecommendedBillingSpecRequest(AbstractModel):
    """DescribeRecommendedBillingSpec请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Specs: 推荐机型配置
        :type Specs: list of RecommendedSpec
        :param _TaskType: 枚举值：空、TRAIN、NOTEBOOK、INFERENCE
        :type TaskType: str
        """
        self._Specs = None
        self._TaskType = None

    @property
    def Specs(self):
        """推荐机型配置
        :rtype: list of RecommendedSpec
        """
        return self._Specs

    @Specs.setter
    def Specs(self, Specs):
        self._Specs = Specs

    @property
    def TaskType(self):
        """枚举值：空、TRAIN、NOTEBOOK、INFERENCE
        :rtype: str
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType


    def _deserialize(self, params):
        if params.get("Specs") is not None:
            self._Specs = []
            for item in params.get("Specs"):
                obj = RecommendedSpec()
                obj._deserialize(item)
                self._Specs.append(obj)
        self._TaskType = params.get("TaskType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeRecommendedBillingSpecResponse(AbstractModel):
    """DescribeRecommendedBillingSpec返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Specs: 有库存的推荐机型
注意：此字段可能返回 null，表示取不到有效值。
        :type Specs: list of Spec
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Specs = None
        self._RequestId = None

    @property
    def Specs(self):
        """有库存的推荐机型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Spec
        """
        return self._Specs

    @Specs.setter
    def Specs(self, Specs):
        self._Specs = Specs

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Specs") is not None:
            self._Specs = []
            for item in params.get("Specs"):
                obj = Spec()
                obj._deserialize(item)
                self._Specs.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeRecyclePoliciesRequest(AbstractModel):
    """DescribeRecyclePolicies请求参数结构体

    """


class DescribeRecyclePoliciesResponse(AbstractModel):
    """DescribeRecyclePolicies返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RecyclePolicySet: 详情信息
        :type RecyclePolicySet: list of RecyclePolicyDetail
        :param _TotalCount: 总数
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RecyclePolicySet = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def RecyclePolicySet(self):
        """详情信息
        :rtype: list of RecyclePolicyDetail
        """
        return self._RecyclePolicySet

    @RecyclePolicySet.setter
    def RecyclePolicySet(self, RecyclePolicySet):
        self._RecyclePolicySet = RecyclePolicySet

    @property
    def TotalCount(self):
        """总数
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("RecyclePolicySet") is not None:
            self._RecyclePolicySet = []
            for item in params.get("RecyclePolicySet"):
                obj = RecyclePolicyDetail()
                obj._deserialize(item)
                self._RecyclePolicySet.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeSceneListRequest(AbstractModel):
    """DescribeSceneList请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤项
        :type Filters: list of Filter
        :param _Offset: 偏移量
        :type Offset: int
        :param _Limit: 限制量
        :type Limit: int
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None

    @property
    def Filters(self):
        """过滤项
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """限制量
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSceneListResponse(AbstractModel):
    """DescribeSceneList返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Scenes: 场景列表
注意：此字段可能返回 null，表示取不到有效值。
        :type Scenes: list of Scene
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Scenes = None
        self._RequestId = None

    @property
    def Scenes(self):
        """场景列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Scene
        """
        return self._Scenes

    @Scenes.setter
    def Scenes(self, Scenes):
        self._Scenes = Scenes

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Scenes") is not None:
            self._Scenes = []
            for item in params.get("Scenes"):
                obj = Scene()
                obj._deserialize(item)
                self._Scenes.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSchemaTaskRequest(AbstractModel):
    """DescribeSchemaTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        """
        self._TaskId = None
        self._DatasetId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._DatasetId = params.get("DatasetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSchemaTaskResponse(AbstractModel):
    """DescribeSchemaTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskStatus: 任务状态。STATUS_PROCESS 处理中；STATUS_SUCCESS 处理完成。
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskStatus: str
        :param _Progress: 任务整体进度
注意：此字段可能返回 null，表示取不到有效值。
        :type Progress: float
        :param _Stages: 各阶段任务详情
注意：此字段可能返回 null，表示取不到有效值。
        :type Stages: list of TaskStageInfo
        :param _TaskId: 任务ID
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskStatus = None
        self._Progress = None
        self._Stages = None
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskStatus(self):
        """任务状态。STATUS_PROCESS 处理中；STATUS_SUCCESS 处理完成。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskStatus

    @TaskStatus.setter
    def TaskStatus(self, TaskStatus):
        self._TaskStatus = TaskStatus

    @property
    def Progress(self):
        """任务整体进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def Stages(self):
        """各阶段任务详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TaskStageInfo
        """
        return self._Stages

    @Stages.setter
    def Stages(self, Stages):
        self._Stages = Stages

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskStatus = params.get("TaskStatus")
        self._Progress = params.get("Progress")
        if params.get("Stages") is not None:
            self._Stages = []
            for item in params.get("Stages"):
                obj = TaskStageInfo()
                obj._deserialize(item)
                self._Stages.append(obj)
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class DescribeScoringDetailRequest(AbstractModel):
    """DescribeScoringDetail请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _Filters: 过滤
        :type Filters: list of EvalFilter
        :param _Index: 不包含筛选条件的绝对序号——这是总体的第几条: 从1开始
        :type Index: int
        :param _Direction: 基于Index和Filters的上一条、下一条
        :type Direction: str
        """
        self._TaskId = None
        self._Filters = None
        self._Index = None
        self._Direction = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Filters(self):
        """过滤
        :rtype: list of EvalFilter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Index(self):
        """不包含筛选条件的绝对序号——这是总体的第几条: 从1开始
        :rtype: int
        """
        return self._Index

    @Index.setter
    def Index(self, Index):
        self._Index = Index

    @property
    def Direction(self):
        """基于Index和Filters的上一条、下一条
        :rtype: str
        """
        return self._Direction

    @Direction.setter
    def Direction(self, Direction):
        self._Direction = Direction


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = EvalFilter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Index = params.get("Index")
        self._Direction = params.get("Direction")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeScoringDetailResponse(AbstractModel):
    """DescribeScoringDetail返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: TaskId
        :type TaskId: str
        :param _Filters: 用户请求时的过滤器
注意：此字段可能返回 null，表示取不到有效值。
        :type Filters: list of EvalFilter
        :param _DatasetProgress:  此刻各数据集的打分情况
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetProgress: list of DatasetProgress
        :param _Index: 返回的是第几条
        :type Index: int
        :param _ScoreInfo: prompt、response和打分
注意：此字段可能返回 null，表示取不到有效值。
        :type ScoreInfo: :class:`tencentcloud.tione.v20211111.models.ScoreInfo`
        :param _Tip: Tip 提示
        :type Tip: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._Filters = None
        self._DatasetProgress = None
        self._Index = None
        self._ScoreInfo = None
        self._Tip = None
        self._RequestId = None

    @property
    def TaskId(self):
        """TaskId
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Filters(self):
        """用户请求时的过滤器
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of EvalFilter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def DatasetProgress(self):
        """ 此刻各数据集的打分情况
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DatasetProgress
        """
        return self._DatasetProgress

    @DatasetProgress.setter
    def DatasetProgress(self, DatasetProgress):
        self._DatasetProgress = DatasetProgress

    @property
    def Index(self):
        """返回的是第几条
        :rtype: int
        """
        return self._Index

    @Index.setter
    def Index(self, Index):
        self._Index = Index

    @property
    def ScoreInfo(self):
        """prompt、response和打分
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ScoreInfo`
        """
        return self._ScoreInfo

    @ScoreInfo.setter
    def ScoreInfo(self, ScoreInfo):
        self._ScoreInfo = ScoreInfo

    @property
    def Tip(self):
        """Tip 提示
        :rtype: str
        """
        return self._Tip

    @Tip.setter
    def Tip(self, Tip):
        self._Tip = Tip

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = EvalFilter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("DatasetProgress") is not None:
            self._DatasetProgress = []
            for item in params.get("DatasetProgress"):
                obj = DatasetProgress()
                obj._deserialize(item)
                self._DatasetProgress.append(obj)
        self._Index = params.get("Index")
        if params.get("ScoreInfo") is not None:
            self._ScoreInfo = ScoreInfo()
            self._ScoreInfo._deserialize(params.get("ScoreInfo"))
        self._Tip = params.get("Tip")
        self._RequestId = params.get("RequestId")


class DescribeStorageRequest(AbstractModel):
    """DescribeStorage请求参数结构体

    """


class DescribeStorageResponse(AbstractModel):
    """DescribeStorage返回参数结构体

    """

    def __init__(self):
        r"""
        :param _MountedList: 挂载好的CFS ID列表
        :type MountedList: list of str
        :param _MountingList: 挂载中的CFS ID列表
        :type MountingList: list of str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._MountedList = None
        self._MountingList = None
        self._RequestId = None

    @property
    def MountedList(self):
        """挂载好的CFS ID列表
        :rtype: list of str
        """
        return self._MountedList

    @MountedList.setter
    def MountedList(self, MountedList):
        self._MountedList = MountedList

    @property
    def MountingList(self):
        """挂载中的CFS ID列表
        :rtype: list of str
        """
        return self._MountingList

    @MountingList.setter
    def MountingList(self, MountingList):
        self._MountingList = MountingList

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._MountedList = params.get("MountedList")
        self._MountingList = params.get("MountingList")
        self._RequestId = params.get("RequestId")


class DescribeSubjectiveEvaluationOutputsRequest(AbstractModel):
    """DescribeSubjectiveEvaluationOutputs请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSubjectiveEvaluationOutputsResponse(AbstractModel):
    """DescribeSubjectiveEvaluationOutputs返回参数结构体

    """

    def __init__(self):
        r"""
        :param _EvaluationCosUrl: 下载链接
        :type EvaluationCosUrl: str
        :param _Name: 评测名称
        :type Name: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._EvaluationCosUrl = None
        self._Name = None
        self._RequestId = None

    @property
    def EvaluationCosUrl(self):
        """下载链接
        :rtype: str
        """
        return self._EvaluationCosUrl

    @EvaluationCosUrl.setter
    def EvaluationCosUrl(self, EvaluationCosUrl):
        self._EvaluationCosUrl = EvaluationCosUrl

    @property
    def Name(self):
        """评测名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._EvaluationCosUrl = params.get("EvaluationCosUrl")
        self._Name = params.get("Name")
        self._RequestId = params.get("RequestId")


class DescribeSubjectiveEvaluationProgressRequest(AbstractModel):
    """DescribeSubjectiveEvaluationProgress请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSubjectiveEvaluationProgressResponse(AbstractModel):
    """DescribeSubjectiveEvaluationProgress返回参数结构体

    """

    def __init__(self):
        r"""
        :param _EvaluationProgress: 评测进度
        :type EvaluationProgress: list of EvaluationProgress
        :param _Progress: 评测进度
        :type Progress: float
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._EvaluationProgress = None
        self._Progress = None
        self._RequestId = None

    @property
    def EvaluationProgress(self):
        """评测进度
        :rtype: list of EvaluationProgress
        """
        return self._EvaluationProgress

    @EvaluationProgress.setter
    def EvaluationProgress(self, EvaluationProgress):
        self._EvaluationProgress = EvaluationProgress

    @property
    def Progress(self):
        """评测进度
        :rtype: float
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EvaluationProgress") is not None:
            self._EvaluationProgress = []
            for item in params.get("EvaluationProgress"):
                obj = EvaluationProgress()
                obj._deserialize(item)
                self._EvaluationProgress.append(obj)
        self._Progress = params.get("Progress")
        self._RequestId = params.get("RequestId")


class DescribeSubjectiveEvaluationRequest(AbstractModel):
    """DescribeSubjectiveEvaluation请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSubjectiveEvaluationResponse(AbstractModel):
    """DescribeSubjectiveEvaluation返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelProgress: 模型与标注、得分
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelProgress: list of ModelProgress
        :param _DatasetAndResults: 评测集及其对应推理结果信息
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetAndResults: list of DatasetWithResults
        :param _Name: 评测名称
        :type Name: str
        :param _Status: 评测状态
        :type Status: str
        :param _LogParams: 日志查询参数
注意：此字段可能返回 null，表示取不到有效值。
        :type LogParams: list of LogParam
        :param _Tags: 标签
        :type Tags: list of Tag
        :param _Description: 描述
        :type Description: str
        :param _ChargeType: 计费
        :type ChargeType: str
        :param _ResourceGroupId: 资源
        :type ResourceGroupId: str
        :param _Resources: 预付费资源
注意：此字段可能返回 null，表示取不到有效值。
        :type Resources: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        :param _InstanceType: 资源类型
        :type InstanceType: str
        :param _ResourceGroupName: 资源组名称
        :type ResourceGroupName: str
        :param _DeployType: 部署类型
        :type DeployType: str
        :param _InstancePerReplicas: 单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :type InstancePerReplicas: int
        :param _Uin: Uin
        :type Uin: str
        :param _SubUin: SubUin
        :type SubUin: str
        :param _SubUinName: SubUinName
        :type SubUinName: str
        :param _Region: Region
        :type Region: str
        :param _OutputCFSConfig: 输出CFS路径
注意：此字段可能返回 null，表示取不到有效值。
        :type OutputCFSConfig: :class:`tencentcloud.tione.v20211111.models.SimpleCFSConfig`
        :param _Models: 模型
注意：此字段可能返回 null，表示取不到有效值。
        :type Models: list of EvalModel
        :param _Datasets: 评测集
注意：此字段可能返回 null，表示取不到有效值。
        :type Datasets: list of SimpleCFSConfig
        :param _ResourceGroupSWType: 纳管类型信息
        :type ResourceGroupSWType: str
        :param _CreateTime: 创建时间，RFC3339
        :type CreateTime: str
        :param _InstanceTypeAlias: 后付费资源信息
        :type InstanceTypeAlias: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ModelProgress = None
        self._DatasetAndResults = None
        self._Name = None
        self._Status = None
        self._LogParams = None
        self._Tags = None
        self._Description = None
        self._ChargeType = None
        self._ResourceGroupId = None
        self._Resources = None
        self._InstanceType = None
        self._ResourceGroupName = None
        self._DeployType = None
        self._InstancePerReplicas = None
        self._Uin = None
        self._SubUin = None
        self._SubUinName = None
        self._Region = None
        self._OutputCFSConfig = None
        self._Models = None
        self._Datasets = None
        self._ResourceGroupSWType = None
        self._CreateTime = None
        self._InstanceTypeAlias = None
        self._RequestId = None

    @property
    def ModelProgress(self):
        """模型与标注、得分
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ModelProgress
        """
        return self._ModelProgress

    @ModelProgress.setter
    def ModelProgress(self, ModelProgress):
        self._ModelProgress = ModelProgress

    @property
    def DatasetAndResults(self):
        """评测集及其对应推理结果信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DatasetWithResults
        """
        return self._DatasetAndResults

    @DatasetAndResults.setter
    def DatasetAndResults(self, DatasetAndResults):
        self._DatasetAndResults = DatasetAndResults

    @property
    def Name(self):
        """评测名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Status(self):
        """评测状态
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def LogParams(self):
        """日志查询参数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of LogParam
        """
        return self._LogParams

    @LogParams.setter
    def LogParams(self, LogParams):
        self._LogParams = LogParams

    @property
    def Tags(self):
        """标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def Description(self):
        """描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def ChargeType(self):
        """计费
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceGroupId(self):
        """资源
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def Resources(self):
        """预付费资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        """
        return self._Resources

    @Resources.setter
    def Resources(self, Resources):
        self._Resources = Resources

    @property
    def InstanceType(self):
        """资源类型
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def ResourceGroupName(self):
        """资源组名称
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def DeployType(self):
        """部署类型
        :rtype: str
        """
        return self._DeployType

    @DeployType.setter
    def DeployType(self, DeployType):
        self._DeployType = DeployType

    @property
    def InstancePerReplicas(self):
        """单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :rtype: int
        """
        return self._InstancePerReplicas

    @InstancePerReplicas.setter
    def InstancePerReplicas(self, InstancePerReplicas):
        self._InstancePerReplicas = InstancePerReplicas

    @property
    def Uin(self):
        """Uin
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def SubUin(self):
        """SubUin
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def SubUinName(self):
        """SubUinName
        :rtype: str
        """
        return self._SubUinName

    @SubUinName.setter
    def SubUinName(self, SubUinName):
        self._SubUinName = SubUinName

    @property
    def Region(self):
        """Region
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def OutputCFSConfig(self):
        """输出CFS路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.SimpleCFSConfig`
        """
        return self._OutputCFSConfig

    @OutputCFSConfig.setter
    def OutputCFSConfig(self, OutputCFSConfig):
        self._OutputCFSConfig = OutputCFSConfig

    @property
    def Models(self):
        """模型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of EvalModel
        """
        return self._Models

    @Models.setter
    def Models(self, Models):
        self._Models = Models

    @property
    def Datasets(self):
        """评测集
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of SimpleCFSConfig
        """
        return self._Datasets

    @Datasets.setter
    def Datasets(self, Datasets):
        self._Datasets = Datasets

    @property
    def ResourceGroupSWType(self):
        """纳管类型信息
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType

    @property
    def CreateTime(self):
        """创建时间，RFC3339
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def InstanceTypeAlias(self):
        """后付费资源信息
        :rtype: str
        """
        return self._InstanceTypeAlias

    @InstanceTypeAlias.setter
    def InstanceTypeAlias(self, InstanceTypeAlias):
        self._InstanceTypeAlias = InstanceTypeAlias

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ModelProgress") is not None:
            self._ModelProgress = []
            for item in params.get("ModelProgress"):
                obj = ModelProgress()
                obj._deserialize(item)
                self._ModelProgress.append(obj)
        if params.get("DatasetAndResults") is not None:
            self._DatasetAndResults = []
            for item in params.get("DatasetAndResults"):
                obj = DatasetWithResults()
                obj._deserialize(item)
                self._DatasetAndResults.append(obj)
        self._Name = params.get("Name")
        self._Status = params.get("Status")
        if params.get("LogParams") is not None:
            self._LogParams = []
            for item in params.get("LogParams"):
                obj = LogParam()
                obj._deserialize(item)
                self._LogParams.append(obj)
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._Description = params.get("Description")
        self._ChargeType = params.get("ChargeType")
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("Resources") is not None:
            self._Resources = ResourceInfo()
            self._Resources._deserialize(params.get("Resources"))
        self._InstanceType = params.get("InstanceType")
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._DeployType = params.get("DeployType")
        self._InstancePerReplicas = params.get("InstancePerReplicas")
        self._Uin = params.get("Uin")
        self._SubUin = params.get("SubUin")
        self._SubUinName = params.get("SubUinName")
        self._Region = params.get("Region")
        if params.get("OutputCFSConfig") is not None:
            self._OutputCFSConfig = SimpleCFSConfig()
            self._OutputCFSConfig._deserialize(params.get("OutputCFSConfig"))
        if params.get("Models") is not None:
            self._Models = []
            for item in params.get("Models"):
                obj = EvalModel()
                obj._deserialize(item)
                self._Models.append(obj)
        if params.get("Datasets") is not None:
            self._Datasets = []
            for item in params.get("Datasets"):
                obj = SimpleCFSConfig()
                obj._deserialize(item)
                self._Datasets.append(obj)
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        self._CreateTime = params.get("CreateTime")
        self._InstanceTypeAlias = params.get("InstanceTypeAlias")
        self._RequestId = params.get("RequestId")


class DescribeSubjectiveEvaluationsRequest(AbstractModel):
    """DescribeSubjectiveEvaluations请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤
        :type Filters: list of Filter
        :param _Offset: Offset
        :type Offset: int
        :param _Limit: Limit
        :type Limit: int
        :param _TagFilters: 标签过滤
        :type TagFilters: list of TagFilter
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None
        self._TagFilters = None

    @property
    def Filters(self):
        """过滤
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Limit
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def TagFilters(self):
        """标签过滤
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSubjectiveEvaluationsResponse(AbstractModel):
    """DescribeSubjectiveEvaluations返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 总数
        :type TotalCount: int
        :param _Evaluations: 评测列表
        :type Evaluations: list of SubjectiveEvaluation
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._Evaluations = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """总数
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Evaluations(self):
        """评测列表
        :rtype: list of SubjectiveEvaluation
        """
        return self._Evaluations

    @Evaluations.setter
    def Evaluations(self, Evaluations):
        self._Evaluations = Evaluations

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Evaluations") is not None:
            self._Evaluations = []
            for item in params.get("Evaluations"):
                obj = SubjectiveEvaluation()
                obj._deserialize(item)
                self._Evaluations.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSubuinDependencyAccessibilityRequest(AbstractModel):
    """DescribeSubuinDependencyAccessibility请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DependencyList: 描述子数组
        :type DependencyList: list of Dependency
        """
        self._DependencyList = None

    @property
    def DependencyList(self):
        """描述子数组
        :rtype: list of Dependency
        """
        return self._DependencyList

    @DependencyList.setter
    def DependencyList(self, DependencyList):
        self._DependencyList = DependencyList


    def _deserialize(self, params):
        if params.get("DependencyList") is not None:
            self._DependencyList = []
            for item in params.get("DependencyList"):
                obj = Dependency()
                obj._deserialize(item)
                self._DependencyList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSubuinDependencyAccessibilityResponse(AbstractModel):
    """DescribeSubuinDependencyAccessibility返回参数结构体

    """

    def __init__(self):
        r"""
        :param _DependencyAccessibilityList: 描述子数组
注意：此字段可能返回 null，表示取不到有效值。
        :type DependencyAccessibilityList: list of DependencyAccessibility
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._DependencyAccessibilityList = None
        self._RequestId = None

    @property
    def DependencyAccessibilityList(self):
        """描述子数组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DependencyAccessibility
        """
        return self._DependencyAccessibilityList

    @DependencyAccessibilityList.setter
    def DependencyAccessibilityList(self, DependencyAccessibilityList):
        self._DependencyAccessibilityList = DependencyAccessibilityList

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("DependencyAccessibilityList") is not None:
            self._DependencyAccessibilityList = []
            for item in params.get("DependencyAccessibilityList"):
                obj = DependencyAccessibility()
                obj._deserialize(item)
                self._DependencyAccessibilityList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeSupportedInstanceTypeRequest(AbstractModel):
    """DescribeSupportedInstanceType请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccelerateTaskInfoList: 需要查询的模型优化任务信息列表
        :type ModelAccelerateTaskInfoList: list of ModelAccelerateTaskInfo
        """
        self._ModelAccelerateTaskInfoList = None

    @property
    def ModelAccelerateTaskInfoList(self):
        """需要查询的模型优化任务信息列表
        :rtype: list of ModelAccelerateTaskInfo
        """
        return self._ModelAccelerateTaskInfoList

    @ModelAccelerateTaskInfoList.setter
    def ModelAccelerateTaskInfoList(self, ModelAccelerateTaskInfoList):
        self._ModelAccelerateTaskInfoList = ModelAccelerateTaskInfoList


    def _deserialize(self, params):
        if params.get("ModelAccelerateTaskInfoList") is not None:
            self._ModelAccelerateTaskInfoList = []
            for item in params.get("ModelAccelerateTaskInfoList"):
                obj = ModelAccelerateTaskInfo()
                obj._deserialize(item)
                self._ModelAccelerateTaskInfoList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeSupportedInstanceTypeResponse(AbstractModel):
    """DescribeSupportedInstanceType返回参数结构体

    """

    def __init__(self):
        r"""
        :param _SupportedGPUList: 多个/单个模型优化任务支持的GPU实例类型列表
注意：此字段可能返回 null，表示取不到有效值。
        :type SupportedGPUList: list of str
        :param _ModelAccResourceConfigInfos: 模型优化资源配置列表
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccResourceConfigInfos: list of ModelAccResourceConfigInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._SupportedGPUList = None
        self._ModelAccResourceConfigInfos = None
        self._RequestId = None

    @property
    def SupportedGPUList(self):
        """多个/单个模型优化任务支持的GPU实例类型列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._SupportedGPUList

    @SupportedGPUList.setter
    def SupportedGPUList(self, SupportedGPUList):
        self._SupportedGPUList = SupportedGPUList

    @property
    def ModelAccResourceConfigInfos(self):
        """模型优化资源配置列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ModelAccResourceConfigInfo
        """
        return self._ModelAccResourceConfigInfos

    @ModelAccResourceConfigInfos.setter
    def ModelAccResourceConfigInfos(self, ModelAccResourceConfigInfos):
        self._ModelAccResourceConfigInfos = ModelAccResourceConfigInfos

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._SupportedGPUList = params.get("SupportedGPUList")
        if params.get("ModelAccResourceConfigInfos") is not None:
            self._ModelAccResourceConfigInfos = []
            for item in params.get("ModelAccResourceConfigInfos"):
                obj = ModelAccResourceConfigInfo()
                obj._deserialize(item)
                self._ModelAccResourceConfigInfos.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTAIJITemplateListRequest(AbstractModel):
    """DescribeTAIJITemplateList请求参数结构体

    """


class DescribeTAIJITemplateListResponse(AbstractModel):
    """DescribeTAIJITemplateList返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TemplateList: 太极模板列表
        :type TemplateList: list of TAIJITemplateInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TemplateList = None
        self._RequestId = None

    @property
    def TemplateList(self):
        """太极模板列表
        :rtype: list of TAIJITemplateInfo
        """
        return self._TemplateList

    @TemplateList.setter
    def TemplateList(self, TemplateList):
        self._TemplateList = TemplateList

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TemplateList") is not None:
            self._TemplateList = []
            for item in params.get("TemplateList"):
                obj = TAIJITemplateInfo()
                obj._deserialize(item)
                self._TemplateList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTAIJITemplateRequest(AbstractModel):
    """DescribeTAIJITemplate请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TemplateId: 查询对应模板的详细信息
        :type TemplateId: str
        """
        self._TemplateId = None

    @property
    def TemplateId(self):
        """查询对应模板的详细信息
        :rtype: str
        """
        return self._TemplateId

    @TemplateId.setter
    def TemplateId(self, TemplateId):
        self._TemplateId = TemplateId


    def _deserialize(self, params):
        self._TemplateId = params.get("TemplateId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTAIJITemplateResponse(AbstractModel):
    """DescribeTAIJITemplate返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Template: 太极模板
        :type Template: :class:`tencentcloud.tione.v20211111.models.TAIJITemplate`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Template = None
        self._RequestId = None

    @property
    def Template(self):
        """太极模板
        :rtype: :class:`tencentcloud.tione.v20211111.models.TAIJITemplate`
        """
        return self._Template

    @Template.setter
    def Template(self, Template):
        self._Template = Template

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Template") is not None:
            self._Template = TAIJITemplate()
            self._Template._deserialize(params.get("Template"))
        self._RequestId = params.get("RequestId")


class DescribeTAIJITrainingMetricsRequest(AbstractModel):
    """DescribeTAIJITrainingMetrics请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTAIJITrainingMetricsResponse(AbstractModel):
    """DescribeTAIJITrainingMetrics返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _Data: 训练指标数据
注意：此字段可能返回 null，表示取不到有效值。
        :type Data: list of CustomTrainingData
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._Data = None
        self._RequestId = None

    @property
    def TaskId(self):
        """任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Data(self):
        """训练指标数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of CustomTrainingData
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = CustomTrainingData()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTJResourceDetailRequest(AbstractModel):
    """DescribeTJResourceDetail请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TJAppGroupId: 指定太极应用组id查询
        :type TJAppGroupId: str
        """
        self._TJAppGroupId = None

    @property
    def TJAppGroupId(self):
        """指定太极应用组id查询
        :rtype: str
        """
        return self._TJAppGroupId

    @TJAppGroupId.setter
    def TJAppGroupId(self, TJAppGroupId):
        self._TJAppGroupId = TJAppGroupId


    def _deserialize(self, params):
        self._TJAppGroupId = params.get("TJAppGroupId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTJResourceDetailResponse(AbstractModel):
    """DescribeTJResourceDetail返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AppGroupId: 太极应用组ID
注意：此字段可能返回 null，表示取不到有效值。
        :type AppGroupId: str
        :param _TJResourceDetail: 太极应用组资源详情
        :type TJResourceDetail: list of TJResourceDetail
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AppGroupId = None
        self._TJResourceDetail = None
        self._RequestId = None

    @property
    def AppGroupId(self):
        """太极应用组ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AppGroupId

    @AppGroupId.setter
    def AppGroupId(self, AppGroupId):
        self._AppGroupId = AppGroupId

    @property
    def TJResourceDetail(self):
        """太极应用组资源详情
        :rtype: list of TJResourceDetail
        """
        return self._TJResourceDetail

    @TJResourceDetail.setter
    def TJResourceDetail(self, TJResourceDetail):
        self._TJResourceDetail = TJResourceDetail

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AppGroupId = params.get("AppGroupId")
        if params.get("TJResourceDetail") is not None:
            self._TJResourceDetail = []
            for item in params.get("TJResourceDetail"):
                obj = TJResourceDetail()
                obj._deserialize(item)
                self._TJResourceDetail.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTaskComparisonASRBadCaseInfoRequest(AbstractModel):
    """DescribeTaskComparisonASRBadCaseInfo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskComparisonId: 任务Id
        :type TaskComparisonId: str
        :param _Limit: 分页数
        :type Limit: int
        :param _Offset: 分页偏移量
        :type Offset: int
        :param _Filters: 业务关联过滤条件
        :type Filters: list of Filter
        """
        self._TaskComparisonId = None
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def TaskComparisonId(self):
        """任务Id
        :rtype: str
        """
        return self._TaskComparisonId

    @TaskComparisonId.setter
    def TaskComparisonId(self, TaskComparisonId):
        self._TaskComparisonId = TaskComparisonId

    @property
    def Limit(self):
        """分页数
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """分页偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """业务关联过滤条件
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._TaskComparisonId = params.get("TaskComparisonId")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTaskComparisonASRBadCaseInfoResponse(AbstractModel):
    """DescribeTaskComparisonASRBadCaseInfo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ASRBadCases: badcase列表
        :type ASRBadCases: list of ASRBadCase
        :param _TotalCount: badcase总数
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ASRBadCases = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def ASRBadCases(self):
        """badcase列表
        :rtype: list of ASRBadCase
        """
        return self._ASRBadCases

    @ASRBadCases.setter
    def ASRBadCases(self, ASRBadCases):
        self._ASRBadCases = ASRBadCases

    @property
    def TotalCount(self):
        """badcase总数
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ASRBadCases") is not None:
            self._ASRBadCases = []
            for item in params.get("ASRBadCases"):
                obj = ASRBadCase()
                obj._deserialize(item)
                self._ASRBadCases.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeTaskComparisonNLUBadCaseInfoRequest(AbstractModel):
    """DescribeTaskComparisonNLUBadCaseInfo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskComparisonId: 任务Id
        :type TaskComparisonId: str
        :param _Limit: 分页数
        :type Limit: int
        :param _Offset: 分页偏移量
        :type Offset: int
        :param _Filters: 业务关联过滤条件
        :type Filters: list of Filter
        """
        self._TaskComparisonId = None
        self._Limit = None
        self._Offset = None
        self._Filters = None

    @property
    def TaskComparisonId(self):
        """任务Id
        :rtype: str
        """
        return self._TaskComparisonId

    @TaskComparisonId.setter
    def TaskComparisonId(self, TaskComparisonId):
        self._TaskComparisonId = TaskComparisonId

    @property
    def Limit(self):
        """分页数
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """分页偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Filters(self):
        """业务关联过滤条件
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._TaskComparisonId = params.get("TaskComparisonId")
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTaskComparisonNLUBadCaseInfoResponse(AbstractModel):
    """DescribeTaskComparisonNLUBadCaseInfo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _BadCaseInfoList: BadCase列表
        :type BadCaseInfoList: list of NLUBadCase
        :param _TotalCount: 100
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._BadCaseInfoList = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def BadCaseInfoList(self):
        """BadCase列表
        :rtype: list of NLUBadCase
        """
        return self._BadCaseInfoList

    @BadCaseInfoList.setter
    def BadCaseInfoList(self, BadCaseInfoList):
        self._BadCaseInfoList = BadCaseInfoList

    @property
    def TotalCount(self):
        """100
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("BadCaseInfoList") is not None:
            self._BadCaseInfoList = []
            for item in params.get("BadCaseInfoList"):
                obj = NLUBadCase()
                obj._deserialize(item)
                self._BadCaseInfoList.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeTaskComparisonRequest(AbstractModel):
    """DescribeTaskComparison请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskComparisonId: 任务ID
        :type TaskComparisonId: str
        """
        self._TaskComparisonId = None

    @property
    def TaskComparisonId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskComparisonId

    @TaskComparisonId.setter
    def TaskComparisonId(self, TaskComparisonId):
        self._TaskComparisonId = TaskComparisonId


    def _deserialize(self, params):
        self._TaskComparisonId = params.get("TaskComparisonId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTaskComparisonResponse(AbstractModel):
    """DescribeTaskComparison返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskComparisonDetail: 任务详情
        :type TaskComparisonDetail: :class:`tencentcloud.tione.v20211111.models.TaskComparisonDetail`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskComparisonDetail = None
        self._RequestId = None

    @property
    def TaskComparisonDetail(self):
        """任务详情
        :rtype: :class:`tencentcloud.tione.v20211111.models.TaskComparisonDetail`
        """
        return self._TaskComparisonDetail

    @TaskComparisonDetail.setter
    def TaskComparisonDetail(self, TaskComparisonDetail):
        self._TaskComparisonDetail = TaskComparisonDetail

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TaskComparisonDetail") is not None:
            self._TaskComparisonDetail = TaskComparisonDetail()
            self._TaskComparisonDetail._deserialize(params.get("TaskComparisonDetail"))
        self._RequestId = params.get("RequestId")


class DescribeTaskComparisonsRequest(AbstractModel):
    """DescribeTaskComparisons请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Tags: 标签过滤条件
        :type Tags: list of Tag
        :param _Filters: 业务关联过滤条件
        :type Filters: list of Filter
        :param _Limit: 分页数量
        :type Limit: int
        :param _Offset: 分页偏移量
        :type Offset: int
        :param _Order: 结果排序业务字段, 默认任务创建时间
        :type Order: str
        :param _OrderField: 结果排序规则，ASC(升序), DESC(降序)
        :type OrderField: str
        """
        self._Tags = None
        self._Filters = None
        self._Limit = None
        self._Offset = None
        self._Order = None
        self._OrderField = None

    @property
    def Tags(self):
        """标签过滤条件
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def Filters(self):
        """业务关联过滤条件
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Limit(self):
        """分页数量
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Offset(self):
        """分页偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Order(self):
        """结果排序业务字段, 默认任务创建时间
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """结果排序规则，ASC(升序), DESC(降序)
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField


    def _deserialize(self, params):
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Limit = params.get("Limit")
        self._Offset = params.get("Offset")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTaskComparisonsResponse(AbstractModel):
    """DescribeTaskComparisons返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 任务总数
        :type TotalCount: int
        :param _TaskComparisons: 任务数组
        :type TaskComparisons: list of TaskComparisonDetail
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._TaskComparisons = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """任务总数
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def TaskComparisons(self):
        """任务数组
        :rtype: list of TaskComparisonDetail
        """
        return self._TaskComparisons

    @TaskComparisons.setter
    def TaskComparisons(self, TaskComparisons):
        self._TaskComparisons = TaskComparisons

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("TaskComparisons") is not None:
            self._TaskComparisons = []
            for item in params.get("TaskComparisons"):
                obj = TaskComparisonDetail()
                obj._deserialize(item)
                self._TaskComparisons.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTaskDisplayConfigRequest(AbstractModel):
    """DescribeTaskDisplayConfig请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTaskDisplayConfigResponse(AbstractModel):
    """DescribeTaskDisplayConfig返回参数结构体

    """

    def __init__(self):
        r"""
        :param _BgColor: 背景颜色
        :type BgColor: str
        :param _FontFamily: 字体系列
        :type FontFamily: str
        :param _FontSize: 字体大小
        :type FontSize: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._BgColor = None
        self._FontFamily = None
        self._FontSize = None
        self._RequestId = None

    @property
    def BgColor(self):
        """背景颜色
        :rtype: str
        """
        return self._BgColor

    @BgColor.setter
    def BgColor(self, BgColor):
        self._BgColor = BgColor

    @property
    def FontFamily(self):
        """字体系列
        :rtype: str
        """
        return self._FontFamily

    @FontFamily.setter
    def FontFamily(self, FontFamily):
        self._FontFamily = FontFamily

    @property
    def FontSize(self):
        """字体大小
        :rtype: str
        """
        return self._FontSize

    @FontSize.setter
    def FontSize(self, FontSize):
        self._FontSize = FontSize

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._BgColor = params.get("BgColor")
        self._FontFamily = params.get("FontFamily")
        self._FontSize = params.get("FontSize")
        self._RequestId = params.get("RequestId")


class DescribeTaskProcessRequest(AbstractModel):
    """DescribeTaskProcess请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTaskProcessResponse(AbstractModel):
    """DescribeTaskProcess返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        :param _Total: 数量总计
        :type Total: int
        :param _Finished: 已完成数量
        :type Finished: int
        :param _Stage: 阶段
注意：此字段可能返回 null，表示取不到有效值。
        :type Stage: str
        :param _CurrentTime: 上报时间（单位为）
注意：此字段可能返回 null，表示取不到有效值。
        :type CurrentTime: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._Total = None
        self._Finished = None
        self._Stage = None
        self._CurrentTime = None
        self._RequestId = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Total(self):
        """数量总计
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def Finished(self):
        """已完成数量
        :rtype: int
        """
        return self._Finished

    @Finished.setter
    def Finished(self, Finished):
        self._Finished = Finished

    @property
    def Stage(self):
        """阶段
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Stage

    @Stage.setter
    def Stage(self, Stage):
        self._Stage = Stage

    @property
    def CurrentTime(self):
        """上报时间（单位为）
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._CurrentTime

    @CurrentTime.setter
    def CurrentTime(self, CurrentTime):
        self._CurrentTime = CurrentTime

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Total = params.get("Total")
        self._Finished = params.get("Finished")
        self._Stage = params.get("Stage")
        self._CurrentTime = params.get("CurrentTime")
        self._RequestId = params.get("RequestId")


class DescribeTempCosInfoRequest(AbstractModel):
    """DescribeTempCosInfo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceGroupId: 服务组id
        :type ServiceGroupId: str
        """
        self._ServiceGroupId = None

    @property
    def ServiceGroupId(self):
        """服务组id
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId


    def _deserialize(self, params):
        self._ServiceGroupId = params.get("ServiceGroupId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTempCosInfoResponse(AbstractModel):
    """DescribeTempCosInfo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TempCosCredential: 临时鉴权信息
        :type TempCosCredential: :class:`tencentcloud.tione.v20211111.models.TempCosCredential`
        :param _TempFolder: 保存图片的临时目录
        :type TempFolder: str
        :param _TempBucket: 保存图片的存储桶名称
        :type TempBucket: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TempCosCredential = None
        self._TempFolder = None
        self._TempBucket = None
        self._RequestId = None

    @property
    def TempCosCredential(self):
        """临时鉴权信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.TempCosCredential`
        """
        return self._TempCosCredential

    @TempCosCredential.setter
    def TempCosCredential(self, TempCosCredential):
        self._TempCosCredential = TempCosCredential

    @property
    def TempFolder(self):
        """保存图片的临时目录
        :rtype: str
        """
        return self._TempFolder

    @TempFolder.setter
    def TempFolder(self, TempFolder):
        self._TempFolder = TempFolder

    @property
    def TempBucket(self):
        """保存图片的存储桶名称
        :rtype: str
        """
        return self._TempBucket

    @TempBucket.setter
    def TempBucket(self, TempBucket):
        self._TempBucket = TempBucket

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TempCosCredential") is not None:
            self._TempCosCredential = TempCosCredential()
            self._TempCosCredential._deserialize(params.get("TempCosCredential"))
        self._TempFolder = params.get("TempFolder")
        self._TempBucket = params.get("TempBucket")
        self._RequestId = params.get("RequestId")


class DescribeTencentLabClassInfoRequest(AbstractModel):
    """DescribeTencentLabClassInfo请求参数结构体

    """


class DescribeTencentLabClassInfoResponse(AbstractModel):
    """DescribeTencentLabClassInfo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceId: 当前用户正在使用的腾学会课程id, 若为空，则无正在使用课程
        :type ResourceId: str
        :param _Uin: 此用户uin,为空则此用户非腾学汇正在上课用户
        :type Uin: str
        :param _SubUin: 此用户 subuin,为空则此用户非腾学汇正在上课用户
        :type SubUin: str
        :param _ClassType: 此用户的课程涉及到的模块, 如 ["notebook", "automl-classify"]
        :type ClassType: list of str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ResourceId = None
        self._Uin = None
        self._SubUin = None
        self._ClassType = None
        self._RequestId = None

    @property
    def ResourceId(self):
        """当前用户正在使用的腾学会课程id, 若为空，则无正在使用课程
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def Uin(self):
        """此用户uin,为空则此用户非腾学汇正在上课用户
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def SubUin(self):
        """此用户 subuin,为空则此用户非腾学汇正在上课用户
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def ClassType(self):
        """此用户的课程涉及到的模块, 如 ["notebook", "automl-classify"]
        :rtype: list of str
        """
        return self._ClassType

    @ClassType.setter
    def ClassType(self, ClassType):
        self._ClassType = ClassType

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ResourceId = params.get("ResourceId")
        self._Uin = params.get("Uin")
        self._SubUin = params.get("SubUin")
        self._ClassType = params.get("ClassType")
        self._RequestId = params.get("RequestId")


class DescribeTensorBoardTaskRequest(AbstractModel):
    """DescribeTensorBoardTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTensorBoardTaskResponse(AbstractModel):
    """DescribeTensorBoardTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: TensorBoard ID
        :type Id: str
        :param _Status: TensorBoard状态
        :type Status: str
        :param _Url: TensorBoard Url
注意：此字段可能返回 null，表示取不到有效值。
        :type Url: str
        :param _SummaryDataConfig: TensorBoard Summary存储配置
注意：此字段可能返回 null，表示取不到有效值。
        :type SummaryDataConfig: :class:`tencentcloud.tione.v20211111.models.DataConfig`
        :param _SummaryAbsolutePath: Summary相对路径
注意：此字段可能返回 null，表示取不到有效值。
        :type SummaryAbsolutePath: str
        :param _Message: TensorBoard实例信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Message: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Id = None
        self._Status = None
        self._Url = None
        self._SummaryDataConfig = None
        self._SummaryAbsolutePath = None
        self._Message = None
        self._RequestId = None

    @property
    def Id(self):
        """TensorBoard ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Status(self):
        """TensorBoard状态
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Url(self):
        """TensorBoard Url
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Url

    @Url.setter
    def Url(self, Url):
        self._Url = Url

    @property
    def SummaryDataConfig(self):
        """TensorBoard Summary存储配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.DataConfig`
        """
        return self._SummaryDataConfig

    @SummaryDataConfig.setter
    def SummaryDataConfig(self, SummaryDataConfig):
        self._SummaryDataConfig = SummaryDataConfig

    @property
    def SummaryAbsolutePath(self):
        """Summary相对路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SummaryAbsolutePath

    @SummaryAbsolutePath.setter
    def SummaryAbsolutePath(self, SummaryAbsolutePath):
        self._SummaryAbsolutePath = SummaryAbsolutePath

    @property
    def Message(self):
        """TensorBoard实例信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Status = params.get("Status")
        self._Url = params.get("Url")
        if params.get("SummaryDataConfig") is not None:
            self._SummaryDataConfig = DataConfig()
            self._SummaryDataConfig._deserialize(params.get("SummaryDataConfig"))
        self._SummaryAbsolutePath = params.get("SummaryAbsolutePath")
        self._Message = params.get("Message")
        self._RequestId = params.get("RequestId")


class DescribeTextTaskInfoRequest(AbstractModel):
    """DescribeTextTaskInfo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _Offset: 偏移量
        :type Offset: int
        :param _Limit: 限制数
        :type Limit: int
        :param _Filters: 过滤参数

        :type Filters: list of Filter
        """
        self._TaskId = None
        self._Offset = None
        self._Limit = None
        self._Filters = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Offset(self):
        """偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """限制数
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Filters(self):
        """过滤参数

        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTextTaskInfoResponse(AbstractModel):
    """DescribeTextTaskInfo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Total: 条件命中总数

        :type Total: int
        :param _TextList: 扩展预料库云小微
        :type TextList: list of LabelTextInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Total = None
        self._TextList = None
        self._RequestId = None

    @property
    def Total(self):
        """条件命中总数

        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def TextList(self):
        """扩展预料库云小微
        :rtype: list of LabelTextInfo
        """
        return self._TextList

    @TextList.setter
    def TextList(self, TextList):
        self._TextList = TextList

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Total = params.get("Total")
        if params.get("TextList") is not None:
            self._TextList = []
            for item in params.get("TextList"):
                obj = LabelTextInfo()
                obj._deserialize(item)
                self._TextList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTrainingFrameworksRequest(AbstractModel):
    """DescribeTrainingFrameworks请求参数结构体

    """

    def __init__(self):
        r"""
        :param _JobType: 任务框架类型
        :type JobType: str
        """
        self._JobType = None

    @property
    def JobType(self):
        """任务框架类型
        :rtype: str
        """
        return self._JobType

    @JobType.setter
    def JobType(self, JobType):
        self._JobType = JobType


    def _deserialize(self, params):
        self._JobType = params.get("JobType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTrainingFrameworksResponse(AbstractModel):
    """DescribeTrainingFrameworks返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FrameworkInfos: 框架信息列表
        :type FrameworkInfos: list of FrameworkInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FrameworkInfos = None
        self._RequestId = None

    @property
    def FrameworkInfos(self):
        """框架信息列表
        :rtype: list of FrameworkInfo
        """
        return self._FrameworkInfos

    @FrameworkInfos.setter
    def FrameworkInfos(self, FrameworkInfos):
        self._FrameworkInfos = FrameworkInfos

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FrameworkInfos") is not None:
            self._FrameworkInfos = []
            for item in params.get("FrameworkInfos"):
                obj = FrameworkInfo()
                obj._deserialize(item)
                self._FrameworkInfos.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTrainingMetricsRequest(AbstractModel):
    """DescribeTrainingMetrics请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTrainingMetricsResponse(AbstractModel):
    """DescribeTrainingMetrics返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _Data: 训练指标数据
注意：此字段可能返回 null，表示取不到有效值。
        :type Data: list of CustomTrainingData
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._Data = None
        self._RequestId = None

    @property
    def TaskId(self):
        """任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Data(self):
        """训练指标数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of CustomTrainingData
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = CustomTrainingData()
                obj._deserialize(item)
                self._Data.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTrainingModelVersionRequest(AbstractModel):
    """DescribeTrainingModelVersion请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TrainingModelVersionId: 模型版本ID
        :type TrainingModelVersionId: str
        """
        self._TrainingModelVersionId = None

    @property
    def TrainingModelVersionId(self):
        """模型版本ID
        :rtype: str
        """
        return self._TrainingModelVersionId

    @TrainingModelVersionId.setter
    def TrainingModelVersionId(self, TrainingModelVersionId):
        self._TrainingModelVersionId = TrainingModelVersionId


    def _deserialize(self, params):
        self._TrainingModelVersionId = params.get("TrainingModelVersionId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTrainingModelVersionResponse(AbstractModel):
    """DescribeTrainingModelVersion返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TrainingModelVersion: 模型版本
        :type TrainingModelVersion: :class:`tencentcloud.tione.v20211111.models.TrainingModelVersionDTO`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TrainingModelVersion = None
        self._RequestId = None

    @property
    def TrainingModelVersion(self):
        """模型版本
        :rtype: :class:`tencentcloud.tione.v20211111.models.TrainingModelVersionDTO`
        """
        return self._TrainingModelVersion

    @TrainingModelVersion.setter
    def TrainingModelVersion(self, TrainingModelVersion):
        self._TrainingModelVersion = TrainingModelVersion

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TrainingModelVersion") is not None:
            self._TrainingModelVersion = TrainingModelVersionDTO()
            self._TrainingModelVersion._deserialize(params.get("TrainingModelVersion"))
        self._RequestId = params.get("RequestId")


class DescribeTrainingModelVersionsRequest(AbstractModel):
    """DescribeTrainingModelVersions请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TrainingModelId: 模型ID
        :type TrainingModelId: str
        :param _Filters: 过滤条件
Filter.Name: 枚举值:
    TrainingModelVersionId (模型版本ID)
    ModelVersionType (模型版本类型) 其值支持: NORMAL(通用) ACCELERATE (加速)
    ModelFormat（模型格式）其值Filter.Values支持：
TORCH_SCRIPT/PYTORCH/DETECTRON2/SAVED_MODEL/FROZEN_GRAPH/PMML
    AlgorithmFramework (算法框架) 其值Filter.Values支持：TENSORFLOW/PYTORCH/DETECTRON2
Filter.Values: 当长度为1时，支持模糊查询; 不为1时，精确查询
每次请求的Filters的上限为10，Filter.Values的上限为100
        :type Filters: list of Filter
        """
        self._TrainingModelId = None
        self._Filters = None

    @property
    def TrainingModelId(self):
        """模型ID
        :rtype: str
        """
        return self._TrainingModelId

    @TrainingModelId.setter
    def TrainingModelId(self, TrainingModelId):
        self._TrainingModelId = TrainingModelId

    @property
    def Filters(self):
        """过滤条件
Filter.Name: 枚举值:
    TrainingModelVersionId (模型版本ID)
    ModelVersionType (模型版本类型) 其值支持: NORMAL(通用) ACCELERATE (加速)
    ModelFormat（模型格式）其值Filter.Values支持：
TORCH_SCRIPT/PYTORCH/DETECTRON2/SAVED_MODEL/FROZEN_GRAPH/PMML
    AlgorithmFramework (算法框架) 其值Filter.Values支持：TENSORFLOW/PYTORCH/DETECTRON2
Filter.Values: 当长度为1时，支持模糊查询; 不为1时，精确查询
每次请求的Filters的上限为10，Filter.Values的上限为100
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters


    def _deserialize(self, params):
        self._TrainingModelId = params.get("TrainingModelId")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTrainingModelVersionsResponse(AbstractModel):
    """DescribeTrainingModelVersions返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TrainingModelVersions: 模型版本列表
        :type TrainingModelVersions: list of TrainingModelVersionDTO
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TrainingModelVersions = None
        self._RequestId = None

    @property
    def TrainingModelVersions(self):
        """模型版本列表
        :rtype: list of TrainingModelVersionDTO
        """
        return self._TrainingModelVersions

    @TrainingModelVersions.setter
    def TrainingModelVersions(self, TrainingModelVersions):
        self._TrainingModelVersions = TrainingModelVersions

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TrainingModelVersions") is not None:
            self._TrainingModelVersions = []
            for item in params.get("TrainingModelVersions"):
                obj = TrainingModelVersionDTO()
                obj._deserialize(item)
                self._TrainingModelVersions.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTrainingModelsRequest(AbstractModel):
    """DescribeTrainingModels请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤器
Filter.Name: 枚举值:
keyword (模型名称)
TrainingModelId (模型ID)
ModelVersionType (模型版本类型) 其值Filter.Values支持: NORMAL(通用) ACCELERATE (加速)
TrainingModelSource (模型来源) 其值Filter.Values支持： JOB/COS
ModelFormat（模型格式）其值Filter.Values支持：
PYTORCH/TORCH_SCRIPT/DETECTRON2/SAVED_MODEL/FROZEN_GRAPH/PMML/MMDETECTION/ONNX/HUGGING_FACE
Filter.Values: 当长度为1时，支持模糊查询; 不为1时，精确查询
每次请求的Filters的上限为10，Filter.Values的上限为100
Filter.Fuzzy取值：true/false，是否支持模糊匹配
        :type Filters: list of Filter
        :param _OrderField: 排序字段，默认CreateTime
        :type OrderField: str
        :param _Order: 排序方式，ASC/DESC，默认DESC
        :type Order: str
        :param _Offset: 偏移量
        :type Offset: int
        :param _Limit: 返回结果数量
        :type Limit: int
        :param _TagFilters: 标签过滤
        :type TagFilters: list of TagFilter
        :param _WithModelVersions: 是否同时返回模型版本列表
        :type WithModelVersions: bool
        :param _ModelAffiliation: 模型所属模块; 枚举值：MODEL_REPO 模型仓库 AI_MARKET AI市场，不传则查询模型仓库模型
        :type ModelAffiliation: str
        """
        self._Filters = None
        self._OrderField = None
        self._Order = None
        self._Offset = None
        self._Limit = None
        self._TagFilters = None
        self._WithModelVersions = None
        self._ModelAffiliation = None

    @property
    def Filters(self):
        """过滤器
Filter.Name: 枚举值:
keyword (模型名称)
TrainingModelId (模型ID)
ModelVersionType (模型版本类型) 其值Filter.Values支持: NORMAL(通用) ACCELERATE (加速)
TrainingModelSource (模型来源) 其值Filter.Values支持： JOB/COS
ModelFormat（模型格式）其值Filter.Values支持：
PYTORCH/TORCH_SCRIPT/DETECTRON2/SAVED_MODEL/FROZEN_GRAPH/PMML/MMDETECTION/ONNX/HUGGING_FACE
Filter.Values: 当长度为1时，支持模糊查询; 不为1时，精确查询
每次请求的Filters的上限为10，Filter.Values的上限为100
Filter.Fuzzy取值：true/false，是否支持模糊匹配
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def OrderField(self):
        """排序字段，默认CreateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Order(self):
        """排序方式，ASC/DESC，默认DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def Offset(self):
        """偏移量
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回结果数量
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def TagFilters(self):
        """标签过滤
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def WithModelVersions(self):
        """是否同时返回模型版本列表
        :rtype: bool
        """
        return self._WithModelVersions

    @WithModelVersions.setter
    def WithModelVersions(self, WithModelVersions):
        self._WithModelVersions = WithModelVersions

    @property
    def ModelAffiliation(self):
        """模型所属模块; 枚举值：MODEL_REPO 模型仓库 AI_MARKET AI市场，不传则查询模型仓库模型
        :rtype: str
        """
        return self._ModelAffiliation

    @ModelAffiliation.setter
    def ModelAffiliation(self, ModelAffiliation):
        self._ModelAffiliation = ModelAffiliation


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._OrderField = params.get("OrderField")
        self._Order = params.get("Order")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        self._WithModelVersions = params.get("WithModelVersions")
        self._ModelAffiliation = params.get("ModelAffiliation")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTrainingModelsResponse(AbstractModel):
    """DescribeTrainingModels返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TrainingModels: 模型列表
        :type TrainingModels: list of TrainingModelDTO
        :param _TotalCount: 模型总数
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TrainingModels = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def TrainingModels(self):
        """模型列表
        :rtype: list of TrainingModelDTO
        """
        return self._TrainingModels

    @TrainingModels.setter
    def TrainingModels(self, TrainingModels):
        self._TrainingModels = TrainingModels

    @property
    def TotalCount(self):
        """模型总数
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TrainingModels") is not None:
            self._TrainingModels = []
            for item in params.get("TrainingModels"):
                obj = TrainingModelDTO()
                obj._deserialize(item)
                self._TrainingModels.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeTrainingTaskPluginRequest(AbstractModel):
    """DescribeTrainingTaskPlugin请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 当前任务ID
        :type TaskId: str
        :param _HookName: 当前请求注入点
        :type HookName: str
        :param _CacheVersion: 缓存的插件版本
        :type CacheVersion: str
        :param _FastRead: 快速读，用于轮询插件是否发生修改
        :type FastRead: bool
        """
        self._TaskId = None
        self._HookName = None
        self._CacheVersion = None
        self._FastRead = None

    @property
    def TaskId(self):
        """当前任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def HookName(self):
        """当前请求注入点
        :rtype: str
        """
        return self._HookName

    @HookName.setter
    def HookName(self, HookName):
        self._HookName = HookName

    @property
    def CacheVersion(self):
        """缓存的插件版本
        :rtype: str
        """
        return self._CacheVersion

    @CacheVersion.setter
    def CacheVersion(self, CacheVersion):
        self._CacheVersion = CacheVersion

    @property
    def FastRead(self):
        """快速读，用于轮询插件是否发生修改
        :rtype: bool
        """
        return self._FastRead

    @FastRead.setter
    def FastRead(self, FastRead):
        self._FastRead = FastRead


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._HookName = params.get("HookName")
        self._CacheVersion = params.get("CacheVersion")
        self._FastRead = params.get("FastRead")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTrainingTaskPluginResponse(AbstractModel):
    """DescribeTrainingTaskPlugin返回参数结构体

    """

    def __init__(self):
        r"""
        :param _PluginInfo: 插件信息
        :type PluginInfo: :class:`tencentcloud.tione.v20211111.models.PluginInfo`
        :param _CacheValid: 缓存是否有效
        :type CacheValid: bool
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._PluginInfo = None
        self._CacheValid = None
        self._RequestId = None

    @property
    def PluginInfo(self):
        """插件信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.PluginInfo`
        """
        return self._PluginInfo

    @PluginInfo.setter
    def PluginInfo(self, PluginInfo):
        self._PluginInfo = PluginInfo

    @property
    def CacheValid(self):
        """缓存是否有效
        :rtype: bool
        """
        return self._CacheValid

    @CacheValid.setter
    def CacheValid(self, CacheValid):
        self._CacheValid = CacheValid

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("PluginInfo") is not None:
            self._PluginInfo = PluginInfo()
            self._PluginInfo._deserialize(params.get("PluginInfo"))
        self._CacheValid = params.get("CacheValid")
        self._RequestId = params.get("RequestId")


class DescribeTrainingTaskPodUrlRequest(AbstractModel):
    """DescribeTrainingTaskPodUrl请求参数结构体

    """

    def __init__(self):
        r"""
        :param _PodName: 任务实例名
        :type PodName: str
        """
        self._PodName = None

    @property
    def PodName(self):
        """任务实例名
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName


    def _deserialize(self, params):
        self._PodName = params.get("PodName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTrainingTaskPodUrlResponse(AbstractModel):
    """DescribeTrainingTaskPodUrl返回参数结构体

    """

    def __init__(self):
        r"""
        :param _PodUrl: Pod登录URL
        :type PodUrl: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._PodUrl = None
        self._RequestId = None

    @property
    def PodUrl(self):
        """Pod登录URL
        :rtype: str
        """
        return self._PodUrl

    @PodUrl.setter
    def PodUrl(self, PodUrl):
        self._PodUrl = PodUrl

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._PodUrl = params.get("PodUrl")
        self._RequestId = params.get("RequestId")


class DescribeTrainingTaskPodsRequest(AbstractModel):
    """DescribeTrainingTaskPods请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: 训练任务ID
        :type Id: str
        :param _RequireGpuNames: 是否返回拼接好的 GPU 名称
        :type RequireGpuNames: bool
        """
        self._Id = None
        self._RequireGpuNames = None

    @property
    def Id(self):
        """训练任务ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def RequireGpuNames(self):
        """是否返回拼接好的 GPU 名称
        :rtype: bool
        """
        return self._RequireGpuNames

    @RequireGpuNames.setter
    def RequireGpuNames(self, RequireGpuNames):
        self._RequireGpuNames = RequireGpuNames


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._RequireGpuNames = params.get("RequireGpuNames")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTrainingTaskPodsResponse(AbstractModel):
    """DescribeTrainingTaskPods返回参数结构体

    """

    def __init__(self):
        r"""
        :param _PodNames: pod名称列表
        :type PodNames: list of str
        :param _TotalCount: 数量
        :type TotalCount: int
        :param _PodInfoList: pod详细信息
        :type PodInfoList: list of PodInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._PodNames = None
        self._TotalCount = None
        self._PodInfoList = None
        self._RequestId = None

    @property
    def PodNames(self):
        """pod名称列表
        :rtype: list of str
        """
        return self._PodNames

    @PodNames.setter
    def PodNames(self, PodNames):
        self._PodNames = PodNames

    @property
    def TotalCount(self):
        """数量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def PodInfoList(self):
        """pod详细信息
        :rtype: list of PodInfo
        """
        return self._PodInfoList

    @PodInfoList.setter
    def PodInfoList(self, PodInfoList):
        self._PodInfoList = PodInfoList

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._PodNames = params.get("PodNames")
        self._TotalCount = params.get("TotalCount")
        if params.get("PodInfoList") is not None:
            self._PodInfoList = []
            for item in params.get("PodInfoList"):
                obj = PodInfo()
                obj._deserialize(item)
                self._PodInfoList.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTrainingTaskRequest(AbstractModel):
    """DescribeTrainingTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: 训练任务ID
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """训练任务ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTrainingTaskResponse(AbstractModel):
    """DescribeTrainingTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TrainingTaskDetail: 训练任务详情
        :type TrainingTaskDetail: :class:`tencentcloud.tione.v20211111.models.TrainingTaskDetail`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TrainingTaskDetail = None
        self._RequestId = None

    @property
    def TrainingTaskDetail(self):
        """训练任务详情
        :rtype: :class:`tencentcloud.tione.v20211111.models.TrainingTaskDetail`
        """
        return self._TrainingTaskDetail

    @TrainingTaskDetail.setter
    def TrainingTaskDetail(self, TrainingTaskDetail):
        self._TrainingTaskDetail = TrainingTaskDetail

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TrainingTaskDetail") is not None:
            self._TrainingTaskDetail = TrainingTaskDetail()
            self._TrainingTaskDetail._deserialize(params.get("TrainingTaskDetail"))
        self._RequestId = params.get("RequestId")


class DescribeTrainingTaskSecondaryStatusRequest(AbstractModel):
    """DescribeTrainingTaskSecondaryStatus请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: 训练任务ID
        :type Id: str
        :param _PodName: Pod名称
        :type PodName: str
        """
        self._Id = None
        self._PodName = None

    @property
    def Id(self):
        """训练任务ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def PodName(self):
        """Pod名称
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._PodName = params.get("PodName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTrainingTaskSecondaryStatusResponse(AbstractModel):
    """DescribeTrainingTaskSecondaryStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _SecondaryStatus: 二级状态信息
注意：此字段可能返回 null，表示取不到有效值。
        :type SecondaryStatus: list of TrainingTaskSecondaryStatus
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._SecondaryStatus = None
        self._RequestId = None

    @property
    def SecondaryStatus(self):
        """二级状态信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TrainingTaskSecondaryStatus
        """
        return self._SecondaryStatus

    @SecondaryStatus.setter
    def SecondaryStatus(self, SecondaryStatus):
        self._SecondaryStatus = SecondaryStatus

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("SecondaryStatus") is not None:
            self._SecondaryStatus = []
            for item in params.get("SecondaryStatus"):
                obj = TrainingTaskSecondaryStatus()
                obj._deserialize(item)
                self._SecondaryStatus.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeTrainingTasksRequest(AbstractModel):
    """DescribeTrainingTasks请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤器，eg：[{ "Name": "Id", "Values": ["train-23091792777383936"] }]

取值范围：
Name（名称）：task1
Id（task ID）：train-23091792777383936
Status（状态）：SUBMITTING/PENDING/STARTING / RUNNING / STOPPING / STOPPED / FAILED / SUCCEED / SUBMIT_FAILED
ResourceGroupId（资源组 Id）：trsg-kvvfrwl7
Creator（创建者 uin）：100014761913
ChargeType（计费类型）：PREPAID（预付费）/ POSTPAID_BY_HOUR（后付费）
CHARGE_STATUS（计费状态）：NOT_BILLING（未开始计费）/ BILLING（计费中）/ ARREARS_STOP（欠费停止）
        :type Filters: list of Filter
        :param _TagFilters: 标签过滤器，eg：[{ "TagKey": "TagKeyA", "TagValue": ["TagValueA"] }]
        :type TagFilters: list of TagFilter
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        :param _Limit: 返回数量，默认为10，最大为50
        :type Limit: int
        :param _Order: 输出列表的排列顺序。取值范围：ASC（升序排列）/ DESC（降序排列），默认为DESC
        :type Order: str
        :param _OrderField: 排序的依据字段， 取值范围 "CreateTime" 、"UpdateTime"、"StartTime"，默认为UpdateTime
        :type OrderField: str
        """
        self._Filters = None
        self._TagFilters = None
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._OrderField = None

    @property
    def Filters(self):
        """过滤器，eg：[{ "Name": "Id", "Values": ["train-23091792777383936"] }]

取值范围：
Name（名称）：task1
Id（task ID）：train-23091792777383936
Status（状态）：SUBMITTING/PENDING/STARTING / RUNNING / STOPPING / STOPPED / FAILED / SUCCEED / SUBMIT_FAILED
ResourceGroupId（资源组 Id）：trsg-kvvfrwl7
Creator（创建者 uin）：100014761913
ChargeType（计费类型）：PREPAID（预付费）/ POSTPAID_BY_HOUR（后付费）
CHARGE_STATUS（计费状态）：NOT_BILLING（未开始计费）/ BILLING（计费中）/ ARREARS_STOP（欠费停止）
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签过滤器，eg：[{ "TagKey": "TagKeyA", "TagValue": ["TagValueA"] }]
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回数量，默认为10，最大为50
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """输出列表的排列顺序。取值范围：ASC（升序排列）/ DESC（降序排列），默认为DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """排序的依据字段， 取值范围 "CreateTime" 、"UpdateTime"、"StartTime"，默认为UpdateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeTrainingTasksResponse(AbstractModel):
    """DescribeTrainingTasks返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TrainingTaskSet: 训练任务集
        :type TrainingTaskSet: list of TrainingTaskSetItem
        :param _TotalCount: 数量
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TrainingTaskSet = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def TrainingTaskSet(self):
        """训练任务集
        :rtype: list of TrainingTaskSetItem
        """
        return self._TrainingTaskSet

    @TrainingTaskSet.setter
    def TrainingTaskSet(self, TrainingTaskSet):
        self._TrainingTaskSet = TrainingTaskSet

    @property
    def TotalCount(self):
        """数量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("TrainingTaskSet") is not None:
            self._TrainingTaskSet = []
            for item in params.get("TrainingTaskSet"):
                obj = TrainingTaskSetItem()
                obj._deserialize(item)
                self._TrainingTaskSet.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DescribeUserNetworkTopologyRequest(AbstractModel):
    """DescribeUserNetworkTopology请求参数结构体

    """

    def __init__(self):
        r"""
        :param _VpcId: 只返回指定对应Vpc下的 EndpointInfo，为空表示不过滤
        :type VpcId: str
        :param _SubnetId: 只返回指定对应Subnet下的 EndpointInfo，为空表示不过滤
        :type SubnetId: str
        """
        self._VpcId = None
        self._SubnetId = None

    @property
    def VpcId(self):
        """只返回指定对应Vpc下的 EndpointInfo，为空表示不过滤
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """只返回指定对应Subnet下的 EndpointInfo，为空表示不过滤
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId


    def _deserialize(self, params):
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeUserNetworkTopologyResponse(AbstractModel):
    """DescribeUserNetworkTopology返回参数结构体

    """

    def __init__(self):
        r"""
        :param _NetworkGroups: 默认集群网络拓扑信息
注意：此字段可能返回 null，表示取不到有效值。
        :type NetworkGroups: list of NetworkGroup
        :param _SWNetworkGroups: 纳管集群网络拓扑信息
注意：此字段可能返回 null，表示取不到有效值。
        :type SWNetworkGroups: list of NetworkGroup
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._NetworkGroups = None
        self._SWNetworkGroups = None
        self._RequestId = None

    @property
    def NetworkGroups(self):
        """默认集群网络拓扑信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of NetworkGroup
        """
        return self._NetworkGroups

    @NetworkGroups.setter
    def NetworkGroups(self, NetworkGroups):
        self._NetworkGroups = NetworkGroups

    @property
    def SWNetworkGroups(self):
        """纳管集群网络拓扑信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of NetworkGroup
        """
        return self._SWNetworkGroups

    @SWNetworkGroups.setter
    def SWNetworkGroups(self, SWNetworkGroups):
        self._SWNetworkGroups = SWNetworkGroups

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("NetworkGroups") is not None:
            self._NetworkGroups = []
            for item in params.get("NetworkGroups"):
                obj = NetworkGroup()
                obj._deserialize(item)
                self._NetworkGroups.append(obj)
        if params.get("SWNetworkGroups") is not None:
            self._SWNetworkGroups = []
            for item in params.get("SWNetworkGroups"):
                obj = NetworkGroup()
                obj._deserialize(item)
                self._SWNetworkGroups.append(obj)
        self._RequestId = params.get("RequestId")


class DescribeUserSceneTagsRequest(AbstractModel):
    """DescribeUserSceneTags请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 数据集查询过滤条件，多个Filter之间的关系为逻辑与（AND）关系，过滤字段Filter.Name，类型为String
DatasetName，数据集名称
DatasetScope，数据集范围，SCOPE_DATASET_PRIVATE或SCOPE_DATASET_PUBLIC
        :type Filters: list of Filter
        :param _Order: 排序值，支持Asc或Desc，默认Desc
        :type Order: str
        :param _Offset: 偏移值
        :type Offset: int
        :param _Limit: 返回数据个数，默认20，最大支持200
        :type Limit: int
        """
        self._Filters = None
        self._Order = None
        self._Offset = None
        self._Limit = None

    @property
    def Filters(self):
        """数据集查询过滤条件，多个Filter之间的关系为逻辑与（AND）关系，过滤字段Filter.Name，类型为String
DatasetName，数据集名称
DatasetScope，数据集范围，SCOPE_DATASET_PRIVATE或SCOPE_DATASET_PUBLIC
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Order(self):
        """排序值，支持Asc或Desc，默认Desc
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def Offset(self):
        """偏移值
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """返回数据个数，默认20，最大支持200
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Order = params.get("Order")
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeUserSceneTagsResponse(AbstractModel):
    """DescribeUserSceneTags返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 总量
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _SceneTags: 标签
        :type SceneTags: list of str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._SceneTags = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """总量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def SceneTags(self):
        """标签
        :rtype: list of str
        """
        return self._SceneTags

    @SceneTags.setter
    def SceneTags(self, SceneTags):
        self._SceneTags = SceneTags

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        self._SceneTags = params.get("SceneTags")
        self._RequestId = params.get("RequestId")


class DescribeVpcPrivateLinkRequest(AbstractModel):
    """DescribeVpcPrivateLink请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: id值
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """id值
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVpcPrivateLinkResponse(AbstractModel):
    """DescribeVpcPrivateLink返回参数结构体

    """

    def __init__(self):
        r"""
        :param _VpcPrivateLinkDetail: 详情信息
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcPrivateLinkDetail: :class:`tencentcloud.tione.v20211111.models.VpcPrivateLinkDetail`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._VpcPrivateLinkDetail = None
        self._RequestId = None

    @property
    def VpcPrivateLinkDetail(self):
        """详情信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.VpcPrivateLinkDetail`
        """
        return self._VpcPrivateLinkDetail

    @VpcPrivateLinkDetail.setter
    def VpcPrivateLinkDetail(self, VpcPrivateLinkDetail):
        self._VpcPrivateLinkDetail = VpcPrivateLinkDetail

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("VpcPrivateLinkDetail") is not None:
            self._VpcPrivateLinkDetail = VpcPrivateLinkDetail()
            self._VpcPrivateLinkDetail._deserialize(params.get("VpcPrivateLinkDetail"))
        self._RequestId = params.get("RequestId")


class DescribeVpcPrivateLinksRequest(AbstractModel):
    """DescribeVpcPrivateLinks请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Offset: 偏移量，默认为0
        :type Offset: int
        :param _Limit: 每页返回的实例数，默认为10
        :type Limit: int
        :param _Order: 输出列表的排列顺序。取值范围：ASC：升序排列 DESC：降序排列。默认为DESC
        :type Order: str
        :param _OrderField: 根据哪个字段排序，如：CreateTime、UpdateTime，默认为UpdateTime
        :type OrderField: str
        :param _Filters: 过滤器，eg：[{ "Name": "Name", "Values": ["myCodeRepoName"] }]
        :type Filters: list of Filter
        :param _TagFilters: 标签过滤器，eg：[{ "TagKey": "TagKeyA", "TagValue": ["TagValueA"] }]	
        :type TagFilters: list of TagFilter
        """
        self._Offset = None
        self._Limit = None
        self._Order = None
        self._OrderField = None
        self._Filters = None
        self._TagFilters = None

    @property
    def Offset(self):
        """偏移量，默认为0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """每页返回的实例数，默认为10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def Order(self):
        """输出列表的排列顺序。取值范围：ASC：升序排列 DESC：降序排列。默认为DESC
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def OrderField(self):
        """根据哪个字段排序，如：CreateTime、UpdateTime，默认为UpdateTime
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Filters(self):
        """过滤器，eg：[{ "Name": "Name", "Values": ["myCodeRepoName"] }]
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def TagFilters(self):
        """标签过滤器，eg：[{ "TagKey": "TagKeyA", "TagValue": ["TagValueA"] }]	
        :rtype: list of TagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._Order = params.get("Order")
        self._OrderField = params.get("OrderField")
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = TagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DescribeVpcPrivateLinksResponse(AbstractModel):
    """DescribeVpcPrivateLinks返回参数结构体

    """

    def __init__(self):
        r"""
        :param _VpcPrivateLinkSet: 详情信息
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcPrivateLinkSet: list of VpcPrivateLinkDetail
        :param _TotalCount: 总数
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._VpcPrivateLinkSet = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def VpcPrivateLinkSet(self):
        """详情信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of VpcPrivateLinkDetail
        """
        return self._VpcPrivateLinkSet

    @VpcPrivateLinkSet.setter
    def VpcPrivateLinkSet(self, VpcPrivateLinkSet):
        self._VpcPrivateLinkSet = VpcPrivateLinkSet

    @property
    def TotalCount(self):
        """总数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("VpcPrivateLinkSet") is not None:
            self._VpcPrivateLinkSet = []
            for item in params.get("VpcPrivateLinkSet"):
                obj = VpcPrivateLinkDetail()
                obj._deserialize(item)
                self._VpcPrivateLinkSet.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class DestroyBillingResourceRequest(AbstractModel):
    """DestroyBillingResource请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceIds: 资源组节点id列表
注意: 单次最多100个
        :type ResourceIds: list of str
        :param _ResourceGroupId: 资源组id
        :type ResourceGroupId: str
        """
        self._ResourceIds = None
        self._ResourceGroupId = None

    @property
    def ResourceIds(self):
        """资源组节点id列表
注意: 单次最多100个
        :rtype: list of str
        """
        return self._ResourceIds

    @ResourceIds.setter
    def ResourceIds(self, ResourceIds):
        self._ResourceIds = ResourceIds

    @property
    def ResourceGroupId(self):
        """资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId


    def _deserialize(self, params):
        self._ResourceIds = params.get("ResourceIds")
        self._ResourceGroupId = params.get("ResourceGroupId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DestroyBillingResourceResponse(AbstractModel):
    """DestroyBillingResource返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FailResources: 节点失败详情
注意：此字段可能返回 null，表示取不到有效值。
        :type FailResources: list of FailResource
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FailResources = None
        self._RequestId = None

    @property
    def FailResources(self):
        """节点失败详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of FailResource
        """
        return self._FailResources

    @FailResources.setter
    def FailResources(self, FailResources):
        self._FailResources = FailResources

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FailResources") is not None:
            self._FailResources = []
            for item in params.get("FailResources"):
                obj = FailResource()
                obj._deserialize(item)
                self._FailResources.append(obj)
        self._RequestId = params.get("RequestId")


class DetectionLabelInfo(AbstractModel):
    """图像检测参数信息

    """

    def __init__(self):
        r"""
        :param _Points: 点坐标列表
注意：此字段可能返回 null，表示取不到有效值。
        :type Points: list of PointInfo
        :param _Labels: 标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Labels: list of str
        :param _FrameType: 类别
注意：此字段可能返回 null，表示取不到有效值。
        :type FrameType: str
        """
        self._Points = None
        self._Labels = None
        self._FrameType = None

    @property
    def Points(self):
        """点坐标列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of PointInfo
        """
        return self._Points

    @Points.setter
    def Points(self, Points):
        self._Points = Points

    @property
    def Labels(self):
        """标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._Labels

    @Labels.setter
    def Labels(self, Labels):
        self._Labels = Labels

    @property
    def FrameType(self):
        """类别
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FrameType

    @FrameType.setter
    def FrameType(self, FrameType):
        self._FrameType = FrameType


    def _deserialize(self, params):
        if params.get("Points") is not None:
            self._Points = []
            for item in params.get("Points"):
                obj = PointInfo()
                obj._deserialize(item)
                self._Points.append(obj)
        self._Labels = params.get("Labels")
        self._FrameType = params.get("FrameType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeviceImageInfo(AbstractModel):
    """设备对应的镜像信息

    """

    def __init__(self):
        r"""
        :param _DeviceType: 设备类型, 支持GPU等
注意：此字段可能返回 null，表示取不到有效值。
        :type DeviceType: str
        :param _ImageInfo: 镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        self._DeviceType = None
        self._ImageInfo = None

    @property
    def DeviceType(self):
        """设备类型, 支持GPU等
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DeviceType

    @DeviceType.setter
    def DeviceType(self, DeviceType):
        self._DeviceType = DeviceType

    @property
    def ImageInfo(self):
        """镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo


    def _deserialize(self, params):
        self._DeviceType = params.get("DeviceType")
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DeviceMaterialInfo(AbstractModel):
    """对应设备的物料信息

    """

    def __init__(self):
        r"""
        :param _DeviceType: 设备信息
注意：此字段可能返回 null，表示取不到有效值。
        :type DeviceType: str
        :param _MaterialInfo: 物料信息
注意：此字段可能返回 null，表示取不到有效值。
        :type MaterialInfo: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        """
        self._DeviceType = None
        self._MaterialInfo = None

    @property
    def DeviceType(self):
        """设备信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DeviceType

    @DeviceType.setter
    def DeviceType(self, DeviceType):
        self._DeviceType = DeviceType

    @property
    def MaterialInfo(self):
        """物料信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        """
        return self._MaterialInfo

    @MaterialInfo.setter
    def MaterialInfo(self, MaterialInfo):
        self._MaterialInfo = MaterialInfo


    def _deserialize(self, params):
        self._DeviceType = params.get("DeviceType")
        if params.get("MaterialInfo") is not None:
            self._MaterialInfo = MaterialInfo()
            self._MaterialInfo._deserialize(params.get("MaterialInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Dimension(AbstractModel):
    """监控数据查询维度

    """

    def __init__(self):
        r"""
        :param _Name: 名字
        :type Name: str
        :param _Value: 值
        :type Value: str
        """
        self._Name = None
        self._Value = None

    @property
    def Name(self):
        """名字
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Value(self):
        """值
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DimensionMonitor(AbstractModel):
    """实例对象的维度组合

    """

    def __init__(self):
        r"""
        :param _Name: 实例维度名称
        :type Name: str
        :param _Value: 实例维度值
        :type Value: str
        """
        self._Name = None
        self._Value = None

    @property
    def Name(self):
        """实例维度名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Value(self):
        """实例维度值
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DiskInfo(AbstractModel):
    """计费磁盘信息

    """

    def __init__(self):
        r"""
        :param _Id: 磁盘id，CBS场景下为disk-abcdefg，nvme场景为空
注意：此字段可能返回 null，表示取不到有效值。
        :type Id: str
        :param _Type: 磁盘类型(NVME or CBS)
注意：此字段可能返回 null，表示取不到有效值。
        :type Type: str
        :param _Device: 磁盘在节点/dev目录下的设备名，CBS为vd{b-z}, NVME为nvmeXnY
注意：此字段可能返回 null，表示取不到有效值。
        :type Device: str
        """
        self._Id = None
        self._Type = None
        self._Device = None

    @property
    def Id(self):
        """磁盘id，CBS场景下为disk-abcdefg，nvme场景为空
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Type(self):
        """磁盘类型(NVME or CBS)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Device(self):
        """磁盘在节点/dev目录下的设备名，CBS为vd{b-z}, NVME为nvmeXnY
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Device

    @Device.setter
    def Device(self, Device):
        self._Device = Device


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Type = params.get("Type")
        self._Device = params.get("Device")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DownloadTrainingMetricsRequest(AbstractModel):
    """DownloadTrainingMetrics请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DownloadTrainingMetricsResponse(AbstractModel):
    """DownloadTrainingMetrics返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _URL: 任务指标数据文件资源定位符
注意：此字段可能返回 null，表示取不到有效值。
        :type URL: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._URL = None
        self._RequestId = None

    @property
    def TaskId(self):
        """任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def URL(self):
        """任务指标数据文件资源定位符
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._URL

    @URL.setter
    def URL(self, URL):
        self._URL = URL

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._URL = params.get("URL")
        self._RequestId = params.get("RequestId")


class DropKnowledgeBaseRequest(AbstractModel):
    """DropKnowledgeBase请求参数结构体

    """

    def __init__(self):
        r"""
        :param _KnowledgeBaseId: 知识库Id
        :type KnowledgeBaseId: str
        """
        self._KnowledgeBaseId = None

    @property
    def KnowledgeBaseId(self):
        """知识库Id
        :rtype: str
        """
        return self._KnowledgeBaseId

    @KnowledgeBaseId.setter
    def KnowledgeBaseId(self, KnowledgeBaseId):
        self._KnowledgeBaseId = KnowledgeBaseId


    def _deserialize(self, params):
        self._KnowledgeBaseId = params.get("KnowledgeBaseId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class DropKnowledgeBaseResponse(AbstractModel):
    """DropKnowledgeBase返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class EMSCreateServiceArgs(AbstractModel):
    """调用 EMS 创建服务接口的参数

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 预付费模式下所属的资源组id
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _Resources: 计算资源需求,预付费模式
注意：此字段可能返回 null，表示取不到有效值。
        :type Resources: :class:`tencentcloud.tione.v20211111.models.EMSResourceInfo`
        """
        self._ResourceGroupId = None
        self._Resources = None

    @property
    def ResourceGroupId(self):
        """预付费模式下所属的资源组id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def Resources(self):
        """计算资源需求,预付费模式
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.EMSResourceInfo`
        """
        return self._Resources

    @Resources.setter
    def Resources(self, Resources):
        self._Resources = Resources


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("Resources") is not None:
            self._Resources = EMSResourceInfo()
            self._Resources._deserialize(params.get("Resources"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EMSResourceInfo(AbstractModel):
    """调用 EMS 创建服务接口的资源配置

    """

    def __init__(self):
        r"""
        :param _Cpu: 处理器资源, 单位为1/1000核
注意：此字段可能返回 null，表示取不到有效值。
        :type Cpu: int
        :param _Memory: 内存资源, 单位为1M
注意：此字段可能返回 null，表示取不到有效值。
        :type Memory: int
        :param _Gpu: Gpu卡个数资源, 单位为0.01单位的GpuType.
注意：此字段可能返回 null，表示取不到有效值。
        :type Gpu: int
        :param _GpuType: Gpu卡型号
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuType: str
        """
        self._Cpu = None
        self._Memory = None
        self._Gpu = None
        self._GpuType = None

    @property
    def Cpu(self):
        """处理器资源, 单位为1/1000核
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Cpu

    @Cpu.setter
    def Cpu(self, Cpu):
        self._Cpu = Cpu

    @property
    def Memory(self):
        """内存资源, 单位为1M
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Memory

    @Memory.setter
    def Memory(self, Memory):
        self._Memory = Memory

    @property
    def Gpu(self):
        """Gpu卡个数资源, 单位为0.01单位的GpuType.
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Gpu

    @Gpu.setter
    def Gpu(self, Gpu):
        self._Gpu = Gpu

    @property
    def GpuType(self):
        """Gpu卡型号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType


    def _deserialize(self, params):
        self._Cpu = params.get("Cpu")
        self._Memory = params.get("Memory")
        self._Gpu = params.get("Gpu")
        self._GpuType = params.get("GpuType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EMSTask(AbstractModel):
    """模型服务任务详情

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type AutoMLTaskId: str
        :param _EMSTaskId: 模型服务任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type EMSTaskId: str
        :param _TaskVersion: 自动学习任务版本
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskVersion: str
        :param _Tags: 自动学习任务关联标签信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _TaskDescription: 自动学习任务描述信息
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskDescription: str
        :param _SceneName: 自动学习任务场景名称
注意：此字段可能返回 null，表示取不到有效值。
        :type SceneName: str
        :param _Creator: 自动学习任务创建者信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Creator: str
        :param _Updator: 自动学习任务更新者信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Updator: str
        :param _EMSTaskStatus: 自动学习发布模型服务实例状态
注意：此字段可能返回 null，表示取不到有效值。
        :type EMSTaskStatus: str
        :param _EMSTaskBusinessStatus: 自动学习发布模型服务business状态
注意：此字段可能返回 null，表示取不到有效值。
        :type EMSTaskBusinessStatus: str
        :param _EMSTaskStartTime: 自动学习发布模型服务任务创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type EMSTaskStartTime: str
        :param _ErrorMsg: 自动学习发布模型服务任务错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrorMsg: str
        :param _ChargeType: 自动学习发布模型服务任务付费模式
注意：此字段可能返回 null，表示取不到有效值。
        :type ChargeType: str
        :param _ChargeStatus: 自动学习发布模型服务计费状态
注意：此字段可能返回 null，表示取不到有效值。
        :type ChargeStatus: str
        :param _PublishResourceInfo: 自动学习发布模型服务资源配置情况
注意：此字段可能返回 null，表示取不到有效值。
        :type PublishResourceInfo: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        :param _MaxServiceHours: 自动学习发布模型服务运行最大小时， 0表示不限制时间
注意：此字段可能返回 null，表示取不到有效值。
        :type MaxServiceHours: int
        :param _ResourceGroupId: 预付费资源组id
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _SceneId: 场景ID
注意：此字段可能返回 null，表示取不到有效值。
        :type SceneId: str
        :param _SceneDomain: 场景领域
注意：此字段可能返回 null，表示取不到有效值。
        :type SceneDomain: str
        :param _BillingInfo: 自动学习发布模型服务计费情况
注意：此字段可能返回 null，表示取不到有效值。
        :type BillingInfo: str
        """
        self._AutoMLTaskId = None
        self._EMSTaskId = None
        self._TaskVersion = None
        self._Tags = None
        self._TaskDescription = None
        self._SceneName = None
        self._Creator = None
        self._Updator = None
        self._EMSTaskStatus = None
        self._EMSTaskBusinessStatus = None
        self._EMSTaskStartTime = None
        self._ErrorMsg = None
        self._ChargeType = None
        self._ChargeStatus = None
        self._PublishResourceInfo = None
        self._MaxServiceHours = None
        self._ResourceGroupId = None
        self._SceneId = None
        self._SceneDomain = None
        self._BillingInfo = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EMSTaskId(self):
        """模型服务任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId

    @property
    def TaskVersion(self):
        """自动学习任务版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskVersion

    @TaskVersion.setter
    def TaskVersion(self, TaskVersion):
        self._TaskVersion = TaskVersion

    @property
    def Tags(self):
        """自动学习任务关联标签信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def TaskDescription(self):
        """自动学习任务描述信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskDescription

    @TaskDescription.setter
    def TaskDescription(self, TaskDescription):
        self._TaskDescription = TaskDescription

    @property
    def SceneName(self):
        """自动学习任务场景名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SceneName

    @SceneName.setter
    def SceneName(self, SceneName):
        self._SceneName = SceneName

    @property
    def Creator(self):
        """自动学习任务创建者信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def Updator(self):
        """自动学习任务更新者信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Updator

    @Updator.setter
    def Updator(self, Updator):
        self._Updator = Updator

    @property
    def EMSTaskStatus(self):
        """自动学习发布模型服务实例状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EMSTaskStatus

    @EMSTaskStatus.setter
    def EMSTaskStatus(self, EMSTaskStatus):
        self._EMSTaskStatus = EMSTaskStatus

    @property
    def EMSTaskBusinessStatus(self):
        """自动学习发布模型服务business状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EMSTaskBusinessStatus

    @EMSTaskBusinessStatus.setter
    def EMSTaskBusinessStatus(self, EMSTaskBusinessStatus):
        self._EMSTaskBusinessStatus = EMSTaskBusinessStatus

    @property
    def EMSTaskStartTime(self):
        """自动学习发布模型服务任务创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EMSTaskStartTime

    @EMSTaskStartTime.setter
    def EMSTaskStartTime(self, EMSTaskStartTime):
        self._EMSTaskStartTime = EMSTaskStartTime

    @property
    def ErrorMsg(self):
        """自动学习发布模型服务任务错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrorMsg

    @ErrorMsg.setter
    def ErrorMsg(self, ErrorMsg):
        self._ErrorMsg = ErrorMsg

    @property
    def ChargeType(self):
        """自动学习发布模型服务任务付费模式
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ChargeStatus(self):
        """自动学习发布模型服务计费状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ChargeStatus

    @ChargeStatus.setter
    def ChargeStatus(self, ChargeStatus):
        self._ChargeStatus = ChargeStatus

    @property
    def PublishResourceInfo(self):
        """自动学习发布模型服务资源配置情况
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        """
        return self._PublishResourceInfo

    @PublishResourceInfo.setter
    def PublishResourceInfo(self, PublishResourceInfo):
        self._PublishResourceInfo = PublishResourceInfo

    @property
    def MaxServiceHours(self):
        """自动学习发布模型服务运行最大小时， 0表示不限制时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._MaxServiceHours

    @MaxServiceHours.setter
    def MaxServiceHours(self, MaxServiceHours):
        self._MaxServiceHours = MaxServiceHours

    @property
    def ResourceGroupId(self):
        """预付费资源组id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def SceneId(self):
        """场景ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SceneId

    @SceneId.setter
    def SceneId(self, SceneId):
        self._SceneId = SceneId

    @property
    def SceneDomain(self):
        """场景领域
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SceneDomain

    @SceneDomain.setter
    def SceneDomain(self, SceneDomain):
        self._SceneDomain = SceneDomain

    @property
    def BillingInfo(self):
        """自动学习发布模型服务计费情况
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._BillingInfo

    @BillingInfo.setter
    def BillingInfo(self, BillingInfo):
        self._BillingInfo = BillingInfo


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EMSTaskId = params.get("EMSTaskId")
        self._TaskVersion = params.get("TaskVersion")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._TaskDescription = params.get("TaskDescription")
        self._SceneName = params.get("SceneName")
        self._Creator = params.get("Creator")
        self._Updator = params.get("Updator")
        self._EMSTaskStatus = params.get("EMSTaskStatus")
        self._EMSTaskBusinessStatus = params.get("EMSTaskBusinessStatus")
        self._EMSTaskStartTime = params.get("EMSTaskStartTime")
        self._ErrorMsg = params.get("ErrorMsg")
        self._ChargeType = params.get("ChargeType")
        self._ChargeStatus = params.get("ChargeStatus")
        if params.get("PublishResourceInfo") is not None:
            self._PublishResourceInfo = ResourceConfigInfo()
            self._PublishResourceInfo._deserialize(params.get("PublishResourceInfo"))
        self._MaxServiceHours = params.get("MaxServiceHours")
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._SceneId = params.get("SceneId")
        self._SceneDomain = params.get("SceneDomain")
        self._BillingInfo = params.get("BillingInfo")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EMSTaskGroup(AbstractModel):
    """自动学习模型服务发布任务组信息

    """

    def __init__(self):
        r"""
        :param _TaskGroupId: 自动学习任务组id
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskGroupId: str
        :param _TaskName: 自动学习任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskName: str
        :param _EMSTasks: 自动学习模型发布任务详情
注意：此字段可能返回 null，表示取不到有效值。
        :type EMSTasks: list of EMSTask
        """
        self._TaskGroupId = None
        self._TaskName = None
        self._EMSTasks = None

    @property
    def TaskGroupId(self):
        """自动学习任务组id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskGroupId

    @TaskGroupId.setter
    def TaskGroupId(self, TaskGroupId):
        self._TaskGroupId = TaskGroupId

    @property
    def TaskName(self):
        """自动学习任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def EMSTasks(self):
        """自动学习模型发布任务详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of EMSTask
        """
        return self._EMSTasks

    @EMSTasks.setter
    def EMSTasks(self, EMSTasks):
        self._EMSTasks = EMSTasks


    def _deserialize(self, params):
        self._TaskGroupId = params.get("TaskGroupId")
        self._TaskName = params.get("TaskName")
        if params.get("EMSTasks") is not None:
            self._EMSTasks = []
            for item in params.get("EMSTasks"):
                obj = EMSTask()
                obj._deserialize(item)
                self._EMSTasks.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EnableBatchTaskClsConfigRequest(AbstractModel):
    """EnableBatchTaskClsConfig请求参数结构体

    """

    def __init__(self):
        r"""
        :param _BatchTaskId: 批量预测任务ID
        :type BatchTaskId: str
        :param _LogEnable: 是否开启CLS日志投递
        :type LogEnable: bool
        :param _LogConfig: EnableCls为true时，填写日志配置
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        self._BatchTaskId = None
        self._LogEnable = None
        self._LogConfig = None

    @property
    def BatchTaskId(self):
        """批量预测任务ID
        :rtype: str
        """
        return self._BatchTaskId

    @BatchTaskId.setter
    def BatchTaskId(self, BatchTaskId):
        self._BatchTaskId = BatchTaskId

    @property
    def LogEnable(self):
        """是否开启CLS日志投递
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def LogConfig(self):
        """EnableCls为true时，填写日志配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig


    def _deserialize(self, params):
        self._BatchTaskId = params.get("BatchTaskId")
        self._LogEnable = params.get("LogEnable")
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EnableBatchTaskClsConfigResponse(AbstractModel):
    """EnableBatchTaskClsConfig返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class EnableNotebookClsConfigRequest(AbstractModel):
    """EnableNotebookClsConfig请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: notebook ID
        :type Id: str
        :param _LogEnable: 是否开启CLS日志投递
        :type LogEnable: bool
        :param _LogConfig: EnableCls为true时，填写日志配置
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        self._Id = None
        self._LogEnable = None
        self._LogConfig = None

    @property
    def Id(self):
        """notebook ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def LogEnable(self):
        """是否开启CLS日志投递
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def LogConfig(self):
        """EnableCls为true时，填写日志配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._LogEnable = params.get("LogEnable")
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EnableNotebookClsConfigResponse(AbstractModel):
    """EnableNotebookClsConfig返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class EnableTrainingTaskClsConfigRequest(AbstractModel):
    """EnableTrainingTaskClsConfig请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 训练任务ID
        :type TaskId: str
        :param _LogEnable: 是否开启CLS日志投递
        :type LogEnable: bool
        :param _LogConfig: 日志配置
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        self._TaskId = None
        self._LogEnable = None
        self._LogConfig = None

    @property
    def TaskId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def LogEnable(self):
        """是否开启CLS日志投递
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def LogConfig(self):
        """日志配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._LogEnable = params.get("LogEnable")
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EnableTrainingTaskClsConfigResponse(AbstractModel):
    """EnableTrainingTaskClsConfig返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class EncodedStartCmdInfo(AbstractModel):
    """编码后的启动命令信息

    """

    def __init__(self):
        r"""
        :param _StartCmdInfo: 任务的启动命令，以base64格式输入，注意转换时需要完整输入{"StartCmd":"","PsStartCmd":"","WorkerStartCmd":""}
        :type StartCmdInfo: str
        """
        self._StartCmdInfo = None

    @property
    def StartCmdInfo(self):
        """任务的启动命令，以base64格式输入，注意转换时需要完整输入{"StartCmd":"","PsStartCmd":"","WorkerStartCmd":""}
        :rtype: str
        """
        return self._StartCmdInfo

    @StartCmdInfo.setter
    def StartCmdInfo(self, StartCmdInfo):
        self._StartCmdInfo = StartCmdInfo


    def _deserialize(self, params):
        self._StartCmdInfo = params.get("StartCmdInfo")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EndPointInfo(AbstractModel):
    """终端节点信息

    """

    def __init__(self):
        r"""
        :param _EndPointId: 终端节点ID
        :type EndPointId: str
        :param _EndPointName: 终端节点名称
        :type EndPointName: str
        :param _EndPointState: 终端节点状态，ACTIVE：可用，PENDING：待接受，ACCEPTING：接受中，REJECTED：已拒绝，FAILED：失败，NOT_FOUND：查询失败
        :type EndPointState: str
        :param _ServiceVip: 终端节点VIP
        :type ServiceVip: str
        """
        self._EndPointId = None
        self._EndPointName = None
        self._EndPointState = None
        self._ServiceVip = None

    @property
    def EndPointId(self):
        """终端节点ID
        :rtype: str
        """
        return self._EndPointId

    @EndPointId.setter
    def EndPointId(self, EndPointId):
        self._EndPointId = EndPointId

    @property
    def EndPointName(self):
        """终端节点名称
        :rtype: str
        """
        return self._EndPointName

    @EndPointName.setter
    def EndPointName(self, EndPointName):
        self._EndPointName = EndPointName

    @property
    def EndPointState(self):
        """终端节点状态，ACTIVE：可用，PENDING：待接受，ACCEPTING：接受中，REJECTED：已拒绝，FAILED：失败，NOT_FOUND：查询失败
        :rtype: str
        """
        return self._EndPointState

    @EndPointState.setter
    def EndPointState(self, EndPointState):
        self._EndPointState = EndPointState

    @property
    def ServiceVip(self):
        """终端节点VIP
        :rtype: str
        """
        return self._ServiceVip

    @ServiceVip.setter
    def ServiceVip(self, ServiceVip):
        self._ServiceVip = ServiceVip


    def _deserialize(self, params):
        self._EndPointId = params.get("EndPointId")
        self._EndPointName = params.get("EndPointName")
        self._EndPointState = params.get("EndPointState")
        self._ServiceVip = params.get("ServiceVip")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EngineVersion(AbstractModel):
    """引擎版本

    """

    def __init__(self):
        r"""
        :param _Version: 引擎版本
注意：此字段可能返回 null，表示取不到有效值。
        :type Version: str
        :param _Image: 运行镜像
注意：此字段可能返回 null，表示取不到有效值。
        :type Image: str
        :param _IsSupportIntEightQuantization: 是否支持int8量化
注意：此字段可能返回 null，表示取不到有效值。
        :type IsSupportIntEightQuantization: bool
        :param _FrameworkVersion: 框架版本
注意：此字段可能返回 null，表示取不到有效值。
        :type FrameworkVersion: str
        """
        self._Version = None
        self._Image = None
        self._IsSupportIntEightQuantization = None
        self._FrameworkVersion = None

    @property
    def Version(self):
        """引擎版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def Image(self):
        """运行镜像
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Image

    @Image.setter
    def Image(self, Image):
        self._Image = Image

    @property
    def IsSupportIntEightQuantization(self):
        """是否支持int8量化
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsSupportIntEightQuantization

    @IsSupportIntEightQuantization.setter
    def IsSupportIntEightQuantization(self, IsSupportIntEightQuantization):
        self._IsSupportIntEightQuantization = IsSupportIntEightQuantization

    @property
    def FrameworkVersion(self):
        """框架版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FrameworkVersion

    @FrameworkVersion.setter
    def FrameworkVersion(self, FrameworkVersion):
        self._FrameworkVersion = FrameworkVersion


    def _deserialize(self, params):
        self._Version = params.get("Version")
        self._Image = params.get("Image")
        self._IsSupportIntEightQuantization = params.get("IsSupportIntEightQuantization")
        self._FrameworkVersion = params.get("FrameworkVersion")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EnvVar(AbstractModel):
    """环境变量

    """

    def __init__(self):
        r"""
        :param _Name: 环境变量key
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _Value: 环境变量value
注意：此字段可能返回 null，表示取不到有效值。
        :type Value: str
        """
        self._Name = None
        self._Value = None

    @property
    def Name(self):
        """环境变量key
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Value(self):
        """环境变量value
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ErrorInfo(AbstractModel):
    """错误信息

    """

    def __init__(self):
        r"""
        :param _Code: 错误码
注意：此字段可能返回 null，表示取不到有效值。
        :type Code: str
        :param _Message: 错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Message: str
        """
        self._Code = None
        self._Message = None

    @property
    def Code(self):
        """错误码
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Code

    @Code.setter
    def Code(self, Code):
        self._Code = Code

    @property
    def Message(self):
        """错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message


    def _deserialize(self, params):
        self._Code = params.get("Code")
        self._Message = params.get("Message")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EvalFilter(AbstractModel):
    """EvalFilter

    """

    def __init__(self):
        r"""
        :param _Name: 过滤字段名称	
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _Values: 过滤字段取值	
注意：此字段可能返回 null，表示取不到有效值。
        :type Values: list of str
        :param _Negative: 是否开启反向查询
注意：此字段可能返回 null，表示取不到有效值。
        :type Negative: bool
        :param _Fuzzy: 是否开启模糊匹配	
注意：此字段可能返回 null，表示取不到有效值。
        :type Fuzzy: bool
        """
        self._Name = None
        self._Values = None
        self._Negative = None
        self._Fuzzy = None

    @property
    def Name(self):
        """过滤字段名称	
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Values(self):
        """过滤字段取值	
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values

    @property
    def Negative(self):
        """是否开启反向查询
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._Negative

    @Negative.setter
    def Negative(self, Negative):
        self._Negative = Negative

    @property
    def Fuzzy(self):
        """是否开启模糊匹配	
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._Fuzzy

    @Fuzzy.setter
    def Fuzzy(self, Fuzzy):
        self._Fuzzy = Fuzzy


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Values = params.get("Values")
        self._Negative = params.get("Negative")
        self._Fuzzy = params.get("Fuzzy")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EvalModel(AbstractModel):
    """EvalModel

    """

    def __init__(self):
        r"""
        :param _Checkpoint: 任务式建模Checkpoint结构体
注意：此字段可能返回 null，表示取不到有效值。
        :type Checkpoint: :class:`tencentcloud.tione.v20211111.models.CheckpointInfo`
        :param _ModelCFSConfig: 模型通过CFS路径指定
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelCFSConfig: :class:`tencentcloud.tione.v20211111.models.SimpleCFSConfig`
        :param _PublicAlgo: 内置大模型
注意：此字段可能返回 null，表示取不到有效值。
        :type PublicAlgo: :class:`tencentcloud.tione.v20211111.models.PublicAlgo`
        :param _InferParam: 推理超参
注意：此字段可能返回 null，表示取不到有效值。
        :type InferParam: str
        """
        self._Checkpoint = None
        self._ModelCFSConfig = None
        self._PublicAlgo = None
        self._InferParam = None

    @property
    def Checkpoint(self):
        """任务式建模Checkpoint结构体
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CheckpointInfo`
        """
        return self._Checkpoint

    @Checkpoint.setter
    def Checkpoint(self, Checkpoint):
        self._Checkpoint = Checkpoint

    @property
    def ModelCFSConfig(self):
        """模型通过CFS路径指定
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.SimpleCFSConfig`
        """
        return self._ModelCFSConfig

    @ModelCFSConfig.setter
    def ModelCFSConfig(self, ModelCFSConfig):
        self._ModelCFSConfig = ModelCFSConfig

    @property
    def PublicAlgo(self):
        """内置大模型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.PublicAlgo`
        """
        return self._PublicAlgo

    @PublicAlgo.setter
    def PublicAlgo(self, PublicAlgo):
        self._PublicAlgo = PublicAlgo

    @property
    def InferParam(self):
        """推理超参
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InferParam

    @InferParam.setter
    def InferParam(self, InferParam):
        self._InferParam = InferParam


    def _deserialize(self, params):
        if params.get("Checkpoint") is not None:
            self._Checkpoint = CheckpointInfo()
            self._Checkpoint._deserialize(params.get("Checkpoint"))
        if params.get("ModelCFSConfig") is not None:
            self._ModelCFSConfig = SimpleCFSConfig()
            self._ModelCFSConfig._deserialize(params.get("ModelCFSConfig"))
        if params.get("PublicAlgo") is not None:
            self._PublicAlgo = PublicAlgo()
            self._PublicAlgo._deserialize(params.get("PublicAlgo"))
        self._InferParam = params.get("InferParam")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EvaluateTaskInfo(AbstractModel):
    """对比评测任务中单个任务的信息

    """

    def __init__(self):
        r"""
        :param _Name: 任务名称
        :type Name: str
        :param _XiaoWeiNLPEvaluateItem: 云小微NLP任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :type XiaoWeiNLPEvaluateItem: :class:`tencentcloud.tione.v20211111.models.XiaoWeiNLPEvaluateItem`
        :param _XiaoWeiASREvaluateItem: 云小微ASR任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :type XiaoWeiASREvaluateItem: :class:`tencentcloud.tione.v20211111.models.XiaoWeiASREvaluateItem`
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _Status: 任务状态
        :type Status: str
        :param _AsrAccuracy: 评测指标
注意：此字段可能返回 null，表示取不到有效值。
        :type AsrAccuracy: :class:`tencentcloud.tione.v20211111.models.ScalarItem`
        :param _TaskProgress: 评测进度
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskProgress: int
        :param _ErrorMsg: 错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrorMsg: str
        """
        self._Name = None
        self._XiaoWeiNLPEvaluateItem = None
        self._XiaoWeiASREvaluateItem = None
        self._CreateTime = None
        self._Status = None
        self._AsrAccuracy = None
        self._TaskProgress = None
        self._ErrorMsg = None

    @property
    def Name(self):
        """任务名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def XiaoWeiNLPEvaluateItem(self):
        """云小微NLP任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.XiaoWeiNLPEvaluateItem`
        """
        return self._XiaoWeiNLPEvaluateItem

    @XiaoWeiNLPEvaluateItem.setter
    def XiaoWeiNLPEvaluateItem(self, XiaoWeiNLPEvaluateItem):
        self._XiaoWeiNLPEvaluateItem = XiaoWeiNLPEvaluateItem

    @property
    def XiaoWeiASREvaluateItem(self):
        """云小微ASR任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.XiaoWeiASREvaluateItem`
        """
        return self._XiaoWeiASREvaluateItem

    @XiaoWeiASREvaluateItem.setter
    def XiaoWeiASREvaluateItem(self, XiaoWeiASREvaluateItem):
        self._XiaoWeiASREvaluateItem = XiaoWeiASREvaluateItem

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Status(self):
        """任务状态
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def AsrAccuracy(self):
        """评测指标
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ScalarItem`
        """
        return self._AsrAccuracy

    @AsrAccuracy.setter
    def AsrAccuracy(self, AsrAccuracy):
        self._AsrAccuracy = AsrAccuracy

    @property
    def TaskProgress(self):
        """评测进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TaskProgress

    @TaskProgress.setter
    def TaskProgress(self, TaskProgress):
        self._TaskProgress = TaskProgress

    @property
    def ErrorMsg(self):
        """错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrorMsg

    @ErrorMsg.setter
    def ErrorMsg(self, ErrorMsg):
        self._ErrorMsg = ErrorMsg


    def _deserialize(self, params):
        self._Name = params.get("Name")
        if params.get("XiaoWeiNLPEvaluateItem") is not None:
            self._XiaoWeiNLPEvaluateItem = XiaoWeiNLPEvaluateItem()
            self._XiaoWeiNLPEvaluateItem._deserialize(params.get("XiaoWeiNLPEvaluateItem"))
        if params.get("XiaoWeiASREvaluateItem") is not None:
            self._XiaoWeiASREvaluateItem = XiaoWeiASREvaluateItem()
            self._XiaoWeiASREvaluateItem._deserialize(params.get("XiaoWeiASREvaluateItem"))
        self._CreateTime = params.get("CreateTime")
        self._Status = params.get("Status")
        if params.get("AsrAccuracy") is not None:
            self._AsrAccuracy = ScalarItem()
            self._AsrAccuracy._deserialize(params.get("AsrAccuracy"))
        self._TaskProgress = params.get("TaskProgress")
        self._ErrorMsg = params.get("ErrorMsg")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EvaluateTaskItem(AbstractModel):
    """对比评测任务的元素

    """

    def __init__(self):
        r"""
        :param _EvaluationType: 评测类型asr或者nlp
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationType: str
        :param _Name: 任务名称
        :type Name: str
        :param _XiaoWeiNLPEvaluateItem: 云小微NLP任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :type XiaoWeiNLPEvaluateItem: :class:`tencentcloud.tione.v20211111.models.XiaoWeiNLPEvaluateItem`
        :param _XiaoWeiASREvaluateItem: 云小微ASR任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :type XiaoWeiASREvaluateItem: :class:`tencentcloud.tione.v20211111.models.XiaoWeiASREvaluateItem`
        """
        self._EvaluationType = None
        self._Name = None
        self._XiaoWeiNLPEvaluateItem = None
        self._XiaoWeiASREvaluateItem = None

    @property
    def EvaluationType(self):
        """评测类型asr或者nlp
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationType

    @EvaluationType.setter
    def EvaluationType(self, EvaluationType):
        self._EvaluationType = EvaluationType

    @property
    def Name(self):
        """任务名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def XiaoWeiNLPEvaluateItem(self):
        """云小微NLP任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.XiaoWeiNLPEvaluateItem`
        """
        return self._XiaoWeiNLPEvaluateItem

    @XiaoWeiNLPEvaluateItem.setter
    def XiaoWeiNLPEvaluateItem(self, XiaoWeiNLPEvaluateItem):
        self._XiaoWeiNLPEvaluateItem = XiaoWeiNLPEvaluateItem

    @property
    def XiaoWeiASREvaluateItem(self):
        """云小微ASR任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.XiaoWeiASREvaluateItem`
        """
        return self._XiaoWeiASREvaluateItem

    @XiaoWeiASREvaluateItem.setter
    def XiaoWeiASREvaluateItem(self, XiaoWeiASREvaluateItem):
        self._XiaoWeiASREvaluateItem = XiaoWeiASREvaluateItem


    def _deserialize(self, params):
        self._EvaluationType = params.get("EvaluationType")
        self._Name = params.get("Name")
        if params.get("XiaoWeiNLPEvaluateItem") is not None:
            self._XiaoWeiNLPEvaluateItem = XiaoWeiNLPEvaluateItem()
            self._XiaoWeiNLPEvaluateItem._deserialize(params.get("XiaoWeiNLPEvaluateItem"))
        if params.get("XiaoWeiASREvaluateItem") is not None:
            self._XiaoWeiASREvaluateItem = XiaoWeiASREvaluateItem()
            self._XiaoWeiASREvaluateItem._deserialize(params.get("XiaoWeiASREvaluateItem"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EvaluationDataInfo(AbstractModel):
    """评测数据信息

    """

    def __init__(self):
        r"""
        :param _TotalSampleCount: 测试数据集样本数量
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalSampleCount: int
        :param _TestDataSetNames: 测试数据集名称
注意：此字段可能返回 null，表示取不到有效值。
        :type TestDataSetNames: list of str
        """
        self._TotalSampleCount = None
        self._TestDataSetNames = None

    @property
    def TotalSampleCount(self):
        """测试数据集样本数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalSampleCount

    @TotalSampleCount.setter
    def TotalSampleCount(self, TotalSampleCount):
        self._TotalSampleCount = TotalSampleCount

    @property
    def TestDataSetNames(self):
        """测试数据集名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._TestDataSetNames

    @TestDataSetNames.setter
    def TestDataSetNames(self, TestDataSetNames):
        self._TestDataSetNames = TestDataSetNames


    def _deserialize(self, params):
        self._TotalSampleCount = params.get("TotalSampleCount")
        self._TestDataSetNames = params.get("TestDataSetNames")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EvaluationDatasetCategoryEntry(AbstractModel):
    """评测内置数据集类别

    """

    def __init__(self):
        r"""
        :param _Category: 评测集类别
        :type Category: str
        :param _ObjectiveDatasets: 内置客观评测集
        :type ObjectiveDatasets: list of BuiltInEvaluationDataset
        :param _Entries: 子类别
        :type Entries: list of EvaluationDatasetCategoryEntry
        """
        self._Category = None
        self._ObjectiveDatasets = None
        self._Entries = None

    @property
    def Category(self):
        """评测集类别
        :rtype: str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def ObjectiveDatasets(self):
        """内置客观评测集
        :rtype: list of BuiltInEvaluationDataset
        """
        return self._ObjectiveDatasets

    @ObjectiveDatasets.setter
    def ObjectiveDatasets(self, ObjectiveDatasets):
        self._ObjectiveDatasets = ObjectiveDatasets

    @property
    def Entries(self):
        """子类别
        :rtype: list of EvaluationDatasetCategoryEntry
        """
        return self._Entries

    @Entries.setter
    def Entries(self, Entries):
        self._Entries = Entries


    def _deserialize(self, params):
        self._Category = params.get("Category")
        if params.get("ObjectiveDatasets") is not None:
            self._ObjectiveDatasets = []
            for item in params.get("ObjectiveDatasets"):
                obj = BuiltInEvaluationDataset()
                obj._deserialize(item)
                self._ObjectiveDatasets.append(obj)
        if params.get("Entries") is not None:
            self._Entries = []
            for item in params.get("Entries"):
                obj = EvaluationDatasetCategoryEntry()
                obj._deserialize(item)
                self._Entries.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EvaluationEventAttachment(AbstractModel):
    """评测时间附属信息

    """

    def __init__(self):
        r"""
        :param _Type: 附属信息类别
        :type Type: str
        :param _ObjectiveMetrics: 客观评测指标
        :type ObjectiveMetrics: list of ObjectiveMetric
        """
        self._Type = None
        self._ObjectiveMetrics = None

    @property
    def Type(self):
        """附属信息类别
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def ObjectiveMetrics(self):
        """客观评测指标
        :rtype: list of ObjectiveMetric
        """
        return self._ObjectiveMetrics

    @ObjectiveMetrics.setter
    def ObjectiveMetrics(self, ObjectiveMetrics):
        self._ObjectiveMetrics = ObjectiveMetrics


    def _deserialize(self, params):
        self._Type = params.get("Type")
        if params.get("ObjectiveMetrics") is not None:
            self._ObjectiveMetrics = []
            for item in params.get("ObjectiveMetrics"):
                obj = ObjectiveMetric()
                obj._deserialize(item)
                self._ObjectiveMetrics.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EvaluationProgress(AbstractModel):
    """评测进度

    """

    def __init__(self):
        r"""
        :param _CompletionTime: CompletionTime 完成时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CompletionTime: str
        :param _Progress: 进度
注意：此字段可能返回 null，表示取不到有效值。
        :type Progress: float
        :param _DatasetFilepath: 评测集CFS路径
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetFilepath: str
        :param _ModelIndex: 已完成的模型，从1开始
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelIndex: int
        :param _ObjectiveMetrics: 客观评测指标
注意：此字段可能返回 null，表示取不到有效值。
        :type ObjectiveMetrics: list of ObjectiveMetric
        """
        self._CompletionTime = None
        self._Progress = None
        self._DatasetFilepath = None
        self._ModelIndex = None
        self._ObjectiveMetrics = None

    @property
    def CompletionTime(self):
        """CompletionTime 完成时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CompletionTime

    @CompletionTime.setter
    def CompletionTime(self, CompletionTime):
        self._CompletionTime = CompletionTime

    @property
    def Progress(self):
        """进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def DatasetFilepath(self):
        """评测集CFS路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetFilepath

    @DatasetFilepath.setter
    def DatasetFilepath(self, DatasetFilepath):
        self._DatasetFilepath = DatasetFilepath

    @property
    def ModelIndex(self):
        """已完成的模型，从1开始
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ModelIndex

    @ModelIndex.setter
    def ModelIndex(self, ModelIndex):
        self._ModelIndex = ModelIndex

    @property
    def ObjectiveMetrics(self):
        """客观评测指标
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ObjectiveMetric
        """
        return self._ObjectiveMetrics

    @ObjectiveMetrics.setter
    def ObjectiveMetrics(self, ObjectiveMetrics):
        self._ObjectiveMetrics = ObjectiveMetrics


    def _deserialize(self, params):
        self._CompletionTime = params.get("CompletionTime")
        self._Progress = params.get("Progress")
        self._DatasetFilepath = params.get("DatasetFilepath")
        self._ModelIndex = params.get("ModelIndex")
        if params.get("ObjectiveMetrics") is not None:
            self._ObjectiveMetrics = []
            for item in params.get("ObjectiveMetrics"):
                obj = ObjectiveMetric()
                obj._deserialize(item)
                self._ObjectiveMetrics.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EvaluationSummary(AbstractModel):
    """EvaluationSummary

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _EvaluationType: 评测类型
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationType: str
        :param _CheckpointInfo: 任务式建模Checkpoint结构体
注意：此字段可能返回 null，表示取不到有效值。
        :type CheckpointInfo: :class:`tencentcloud.tione.v20211111.models.CheckpointInfo`
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _ObjectiveMetrics: 客观评测指标
注意：此字段可能返回 null，表示取不到有效值。
        :type ObjectiveMetrics: list of ObjectiveMetric
        :param _SubjectiveMetrics: 主观评测指标
注意：此字段可能返回 null，表示取不到有效值。
        :type SubjectiveMetrics: list of SubjectiveMetric
        :param _TaskName: 评测名称
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskName: str
        """
        self._TaskId = None
        self._EvaluationType = None
        self._CheckpointInfo = None
        self._CreateTime = None
        self._ObjectiveMetrics = None
        self._SubjectiveMetrics = None
        self._TaskName = None

    @property
    def TaskId(self):
        """任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def EvaluationType(self):
        """评测类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationType

    @EvaluationType.setter
    def EvaluationType(self, EvaluationType):
        self._EvaluationType = EvaluationType

    @property
    def CheckpointInfo(self):
        """任务式建模Checkpoint结构体
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CheckpointInfo`
        """
        return self._CheckpointInfo

    @CheckpointInfo.setter
    def CheckpointInfo(self, CheckpointInfo):
        self._CheckpointInfo = CheckpointInfo

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ObjectiveMetrics(self):
        """客观评测指标
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ObjectiveMetric
        """
        return self._ObjectiveMetrics

    @ObjectiveMetrics.setter
    def ObjectiveMetrics(self, ObjectiveMetrics):
        self._ObjectiveMetrics = ObjectiveMetrics

    @property
    def SubjectiveMetrics(self):
        """主观评测指标
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of SubjectiveMetric
        """
        return self._SubjectiveMetrics

    @SubjectiveMetrics.setter
    def SubjectiveMetrics(self, SubjectiveMetrics):
        self._SubjectiveMetrics = SubjectiveMetrics

    @property
    def TaskName(self):
        """评测名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._EvaluationType = params.get("EvaluationType")
        if params.get("CheckpointInfo") is not None:
            self._CheckpointInfo = CheckpointInfo()
            self._CheckpointInfo._deserialize(params.get("CheckpointInfo"))
        self._CreateTime = params.get("CreateTime")
        if params.get("ObjectiveMetrics") is not None:
            self._ObjectiveMetrics = []
            for item in params.get("ObjectiveMetrics"):
                obj = ObjectiveMetric()
                obj._deserialize(item)
                self._ObjectiveMetrics.append(obj)
        if params.get("SubjectiveMetrics") is not None:
            self._SubjectiveMetrics = []
            for item in params.get("SubjectiveMetrics"):
                obj = SubjectiveMetric()
                obj._deserialize(item)
                self._SubjectiveMetrics.append(obj)
        self._TaskName = params.get("TaskName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EvaluationTask(AbstractModel):
    """自动学习评测任务

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 自动学习评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationTaskId: str
        :param _TaskVersion: 自动学习任务版本
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskVersion: str
        :param _Tags: 关联标签信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _TaskDescription: 自动学习任务描述信息
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskDescription: str
        :param _SceneName: 自动学习任务场景
注意：此字段可能返回 null，表示取不到有效值。
        :type SceneName: str
        :param _Creator: 自动学习任务创建者信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Creator: str
        :param _Updator: 自动学习任务更新者信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Updator: str
        :param _EvaluationTaskStatus: 自动学习评测任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationTaskStatus: str
        :param _EvaluationTaskProgress: 自动学习评测任务进度百分比, 范围为[0, 100]
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationTaskProgress: int
        :param _EvaluationTaskStartTime: 自动学习评测任务创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationTaskStartTime: str
        :param _EvaluationTaskEndTime: 自动学习评测任务截止时间
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationTaskEndTime: str
        :param _ErrorMsg: 自动学习评测任务错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrorMsg: str
        :param _ChargeType: 自动学习评测任务付费模式，当前为限时免费
注意：此字段可能返回 null，表示取不到有效值。
        :type ChargeType: str
        :param _ChargeStatus: 自动学习评测任务收费状态
注意：此字段可能返回 null，表示取不到有效值。
        :type ChargeStatus: str
        :param _WaitNumber: 自动学习评测任务当前排队信息
注意：此字段可能返回 null，表示取不到有效值。
        :type WaitNumber: int
        :param _SceneId: 场景ID
注意：此字段可能返回 null，表示取不到有效值。
        :type SceneId: str
        :param _SceneDomain: 场景领域
注意：此字段可能返回 null，表示取不到有效值。
        :type SceneDomain: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._TaskVersion = None
        self._Tags = None
        self._TaskDescription = None
        self._SceneName = None
        self._Creator = None
        self._Updator = None
        self._EvaluationTaskStatus = None
        self._EvaluationTaskProgress = None
        self._EvaluationTaskStartTime = None
        self._EvaluationTaskEndTime = None
        self._ErrorMsg = None
        self._ChargeType = None
        self._ChargeStatus = None
        self._WaitNumber = None
        self._SceneId = None
        self._SceneDomain = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """自动学习评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def TaskVersion(self):
        """自动学习任务版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskVersion

    @TaskVersion.setter
    def TaskVersion(self, TaskVersion):
        self._TaskVersion = TaskVersion

    @property
    def Tags(self):
        """关联标签信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def TaskDescription(self):
        """自动学习任务描述信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskDescription

    @TaskDescription.setter
    def TaskDescription(self, TaskDescription):
        self._TaskDescription = TaskDescription

    @property
    def SceneName(self):
        """自动学习任务场景
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SceneName

    @SceneName.setter
    def SceneName(self, SceneName):
        self._SceneName = SceneName

    @property
    def Creator(self):
        """自动学习任务创建者信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def Updator(self):
        """自动学习任务更新者信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Updator

    @Updator.setter
    def Updator(self, Updator):
        self._Updator = Updator

    @property
    def EvaluationTaskStatus(self):
        """自动学习评测任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationTaskStatus

    @EvaluationTaskStatus.setter
    def EvaluationTaskStatus(self, EvaluationTaskStatus):
        self._EvaluationTaskStatus = EvaluationTaskStatus

    @property
    def EvaluationTaskProgress(self):
        """自动学习评测任务进度百分比, 范围为[0, 100]
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._EvaluationTaskProgress

    @EvaluationTaskProgress.setter
    def EvaluationTaskProgress(self, EvaluationTaskProgress):
        self._EvaluationTaskProgress = EvaluationTaskProgress

    @property
    def EvaluationTaskStartTime(self):
        """自动学习评测任务创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationTaskStartTime

    @EvaluationTaskStartTime.setter
    def EvaluationTaskStartTime(self, EvaluationTaskStartTime):
        self._EvaluationTaskStartTime = EvaluationTaskStartTime

    @property
    def EvaluationTaskEndTime(self):
        """自动学习评测任务截止时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationTaskEndTime

    @EvaluationTaskEndTime.setter
    def EvaluationTaskEndTime(self, EvaluationTaskEndTime):
        self._EvaluationTaskEndTime = EvaluationTaskEndTime

    @property
    def ErrorMsg(self):
        """自动学习评测任务错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrorMsg

    @ErrorMsg.setter
    def ErrorMsg(self, ErrorMsg):
        self._ErrorMsg = ErrorMsg

    @property
    def ChargeType(self):
        """自动学习评测任务付费模式，当前为限时免费
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ChargeStatus(self):
        """自动学习评测任务收费状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ChargeStatus

    @ChargeStatus.setter
    def ChargeStatus(self, ChargeStatus):
        self._ChargeStatus = ChargeStatus

    @property
    def WaitNumber(self):
        """自动学习评测任务当前排队信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._WaitNumber

    @WaitNumber.setter
    def WaitNumber(self, WaitNumber):
        self._WaitNumber = WaitNumber

    @property
    def SceneId(self):
        """场景ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SceneId

    @SceneId.setter
    def SceneId(self, SceneId):
        self._SceneId = SceneId

    @property
    def SceneDomain(self):
        """场景领域
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SceneDomain

    @SceneDomain.setter
    def SceneDomain(self, SceneDomain):
        self._SceneDomain = SceneDomain


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._TaskVersion = params.get("TaskVersion")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._TaskDescription = params.get("TaskDescription")
        self._SceneName = params.get("SceneName")
        self._Creator = params.get("Creator")
        self._Updator = params.get("Updator")
        self._EvaluationTaskStatus = params.get("EvaluationTaskStatus")
        self._EvaluationTaskProgress = params.get("EvaluationTaskProgress")
        self._EvaluationTaskStartTime = params.get("EvaluationTaskStartTime")
        self._EvaluationTaskEndTime = params.get("EvaluationTaskEndTime")
        self._ErrorMsg = params.get("ErrorMsg")
        self._ChargeType = params.get("ChargeType")
        self._ChargeStatus = params.get("ChargeStatus")
        self._WaitNumber = params.get("WaitNumber")
        self._SceneId = params.get("SceneId")
        self._SceneDomain = params.get("SceneDomain")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class EvaluationTaskGroup(AbstractModel):
    """自动学习评测任务组信息

    """

    def __init__(self):
        r"""
        :param _TaskGroupId: 自动学习任务组id
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskGroupId: str
        :param _TaskName: 自动学习任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskName: str
        :param _EvaluationTasks: 评测任务详情
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationTasks: list of EvaluationTask
        """
        self._TaskGroupId = None
        self._TaskName = None
        self._EvaluationTasks = None

    @property
    def TaskGroupId(self):
        """自动学习任务组id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskGroupId

    @TaskGroupId.setter
    def TaskGroupId(self, TaskGroupId):
        self._TaskGroupId = TaskGroupId

    @property
    def TaskName(self):
        """自动学习任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def EvaluationTasks(self):
        """评测任务详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of EvaluationTask
        """
        return self._EvaluationTasks

    @EvaluationTasks.setter
    def EvaluationTasks(self, EvaluationTasks):
        self._EvaluationTasks = EvaluationTasks


    def _deserialize(self, params):
        self._TaskGroupId = params.get("TaskGroupId")
        self._TaskName = params.get("TaskName")
        if params.get("EvaluationTasks") is not None:
            self._EvaluationTasks = []
            for item in params.get("EvaluationTasks"):
                obj = EvaluationTask()
                obj._deserialize(item)
                self._EvaluationTasks.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Event(AbstractModel):
    """K8s的Event

    """

    def __init__(self):
        r"""
        :param _Id: 事件的id
注意：此字段可能返回 null，表示取不到有效值。
        :type Id: str
        :param _Message: 事件的具体信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Message: str
        :param _FirstTimestamp: 事件第一次发生的时间
注意：此字段可能返回 null，表示取不到有效值。
        :type FirstTimestamp: str
        :param _LastTimestamp: 事件最后一次发生的时间
注意：此字段可能返回 null，表示取不到有效值。
        :type LastTimestamp: str
        :param _Count: 事件发生的次数
注意：此字段可能返回 null，表示取不到有效值。
        :type Count: int
        :param _Type: 事件的类型
注意：此字段可能返回 null，表示取不到有效值。
        :type Type: str
        :param _ResourceKind: 事件关联的资源的类型
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceKind: str
        :param _ResourceName: 事件关联的资源的名字
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceName: str
        """
        self._Id = None
        self._Message = None
        self._FirstTimestamp = None
        self._LastTimestamp = None
        self._Count = None
        self._Type = None
        self._ResourceKind = None
        self._ResourceName = None

    @property
    def Id(self):
        """事件的id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Message(self):
        """事件的具体信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message

    @property
    def FirstTimestamp(self):
        """事件第一次发生的时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FirstTimestamp

    @FirstTimestamp.setter
    def FirstTimestamp(self, FirstTimestamp):
        self._FirstTimestamp = FirstTimestamp

    @property
    def LastTimestamp(self):
        """事件最后一次发生的时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LastTimestamp

    @LastTimestamp.setter
    def LastTimestamp(self, LastTimestamp):
        self._LastTimestamp = LastTimestamp

    @property
    def Count(self):
        """事件发生的次数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def Type(self):
        """事件的类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def ResourceKind(self):
        """事件关联的资源的类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceKind

    @ResourceKind.setter
    def ResourceKind(self, ResourceKind):
        self._ResourceKind = ResourceKind

    @property
    def ResourceName(self):
        """事件关联的资源的名字
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceName

    @ResourceName.setter
    def ResourceName(self, ResourceName):
        self._ResourceName = ResourceName


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Message = params.get("Message")
        self._FirstTimestamp = params.get("FirstTimestamp")
        self._LastTimestamp = params.get("LastTimestamp")
        self._Count = params.get("Count")
        self._Type = params.get("Type")
        self._ResourceKind = params.get("ResourceKind")
        self._ResourceName = params.get("ResourceName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExceptionInfo(AbstractModel):
    """异常信息

    """

    def __init__(self):
        r"""
        :param _Code: 1: PodNotReady
2: PathNotExist
注意：此字段可能返回 null，表示取不到有效值。
        :type Code: int
        :param _Message: 提示信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Message: str
        """
        self._Code = None
        self._Message = None

    @property
    def Code(self):
        """1: PodNotReady
2: PathNotExist
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Code

    @Code.setter
    def Code(self, Code):
        self._Code = Code

    @property
    def Message(self):
        """提示信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message


    def _deserialize(self, params):
        self._Code = params.get("Code")
        self._Message = params.get("Message")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExcludeConfig(AbstractModel):
    """Notebook收回策略中的排除配置

    """

    def __init__(self):
        r"""
        :param _ExcludeNotebooks: Notebook元信息数组列表
        :type ExcludeNotebooks: list of NotebookMetaInfo
        """
        self._ExcludeNotebooks = None

    @property
    def ExcludeNotebooks(self):
        """Notebook元信息数组列表
        :rtype: list of NotebookMetaInfo
        """
        return self._ExcludeNotebooks

    @ExcludeNotebooks.setter
    def ExcludeNotebooks(self, ExcludeNotebooks):
        self._ExcludeNotebooks = ExcludeNotebooks


    def _deserialize(self, params):
        if params.get("ExcludeNotebooks") is not None:
            self._ExcludeNotebooks = []
            for item in params.get("ExcludeNotebooks"):
                obj = NotebookMetaInfo()
                obj._deserialize(item)
                self._ExcludeNotebooks.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExecuteError(AbstractModel):
    """执行错误信息

    """

    def __init__(self):
        r"""
        :param _Code: 错误码
注意：此字段可能返回 null，表示取不到有效值。
        :type Code: str
        :param _Message: 错误描述
注意：此字段可能返回 null，表示取不到有效值。
        :type Message: str
        :param _Args: 错误信息参数
注意：此字段可能返回 null，表示取不到有效值。
        :type Args: list of str
        """
        self._Code = None
        self._Message = None
        self._Args = None

    @property
    def Code(self):
        """错误码
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Code

    @Code.setter
    def Code(self, Code):
        self._Code = Code

    @property
    def Message(self):
        """错误描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message

    @property
    def Args(self):
        """错误信息参数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._Args

    @Args.setter
    def Args(self, Args):
        self._Args = Args


    def _deserialize(self, params):
        self._Code = params.get("Code")
        self._Message = params.get("Message")
        self._Args = params.get("Args")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExtendedCorpus(AbstractModel):
    """扩展预料库`云小微`

    """

    def __init__(self):
        r"""
        :param _Content: 扩展内容
        :type Content: str
        :param _BeHit: 被命中(true命中，false未命中)
        :type BeHit: bool
        """
        self._Content = None
        self._BeHit = None

    @property
    def Content(self):
        """扩展内容
        :rtype: str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def BeHit(self):
        """被命中(true命中，false未命中)
        :rtype: bool
        """
        return self._BeHit

    @BeHit.setter
    def BeHit(self, BeHit):
        self._BeHit = BeHit


    def _deserialize(self, params):
        self._Content = params.get("Content")
        self._BeHit = params.get("BeHit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ExtendedResourceList(AbstractModel):
    """扩展资源

    """


class FSPathAccessibility(AbstractModel):
    """CFS、CFSTurbo等文件系统中的文件目录是否能访问的信息

    """

    def __init__(self):
        r"""
        :param _FSPathInfo: 文件系统中文件目录的信息
        :type FSPathInfo: :class:`tencentcloud.tione.v20211111.models.FSPathInfo`
        :param _Accessible: 当前子账号是否有权限访问指定的FSPathInfo目录
        :type Accessible: bool
        """
        self._FSPathInfo = None
        self._Accessible = None

    @property
    def FSPathInfo(self):
        """文件系统中文件目录的信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.FSPathInfo`
        """
        return self._FSPathInfo

    @FSPathInfo.setter
    def FSPathInfo(self, FSPathInfo):
        self._FSPathInfo = FSPathInfo

    @property
    def Accessible(self):
        """当前子账号是否有权限访问指定的FSPathInfo目录
        :rtype: bool
        """
        return self._Accessible

    @Accessible.setter
    def Accessible(self, Accessible):
        self._Accessible = Accessible


    def _deserialize(self, params):
        if params.get("FSPathInfo") is not None:
            self._FSPathInfo = FSPathInfo()
            self._FSPathInfo._deserialize(params.get("FSPathInfo"))
        self._Accessible = params.get("Accessible")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FSPathInfo(AbstractModel):
    """CFS、CFSTurbo等文件系统中的文件目录信息

    """

    def __init__(self):
        r"""
        :param _FSType: 文件系统类型
        :type FSType: str
        :param _FSId: 文件系统的唯一标识符，如果是CFS、CFSTurbofs等则为实例ID，如果是cos则是bucket名（包含appid)
        :type FSId: str
        :param _FSPath: 文件系统中的路径名
        :type FSPath: str
        """
        self._FSType = None
        self._FSId = None
        self._FSPath = None

    @property
    def FSType(self):
        """文件系统类型
        :rtype: str
        """
        return self._FSType

    @FSType.setter
    def FSType(self, FSType):
        self._FSType = FSType

    @property
    def FSId(self):
        """文件系统的唯一标识符，如果是CFS、CFSTurbofs等则为实例ID，如果是cos则是bucket名（包含appid)
        :rtype: str
        """
        return self._FSId

    @FSId.setter
    def FSId(self, FSId):
        self._FSId = FSId

    @property
    def FSPath(self):
        """文件系统中的路径名
        :rtype: str
        """
        return self._FSPath

    @FSPath.setter
    def FSPath(self, FSPath):
        self._FSPath = FSPath


    def _deserialize(self, params):
        self._FSType = params.get("FSType")
        self._FSId = params.get("FSId")
        self._FSPath = params.get("FSPath")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FailResource(AbstractModel):
    """错误资源信息

    """

    def __init__(self):
        r"""
        :param _ResourceId: 资源组节点id
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceId: str
        :param _FailMsg: 失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :type FailMsg: str
        """
        self._ResourceId = None
        self._FailMsg = None

    @property
    def ResourceId(self):
        """资源组节点id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def FailMsg(self):
        """失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FailMsg

    @FailMsg.setter
    def FailMsg(self, FailMsg):
        self._FailMsg = FailMsg


    def _deserialize(self, params):
        self._ResourceId = params.get("ResourceId")
        self._FailMsg = params.get("FailMsg")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FailedPostpaidSWInstance(AbstractModel):
    """按量计费纳管失败的节点信息

    """

    def __init__(self):
        r"""
        :param _CVMInstanceId: CVM节点ID
注意：此字段可能返回 null，表示取不到有效值。
        :type CVMInstanceId: str
        :param _FailedErrorMessage: 纳管失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :type FailedErrorMessage: str
        """
        self._CVMInstanceId = None
        self._FailedErrorMessage = None

    @property
    def CVMInstanceId(self):
        """CVM节点ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CVMInstanceId

    @CVMInstanceId.setter
    def CVMInstanceId(self, CVMInstanceId):
        self._CVMInstanceId = CVMInstanceId

    @property
    def FailedErrorMessage(self):
        """纳管失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FailedErrorMessage

    @FailedErrorMessage.setter
    def FailedErrorMessage(self, FailedErrorMessage):
        self._FailedErrorMessage = FailedErrorMessage


    def _deserialize(self, params):
        self._CVMInstanceId = params.get("CVMInstanceId")
        self._FailedErrorMessage = params.get("FailedErrorMessage")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FakeInstance(AbstractModel):
    """监控数据查询实例

    """

    def __init__(self):
        r"""
        :param _Dimensions: 无
注意：此字段可能返回 null，表示取不到有效值。
        :type Dimensions: list of Dimension
        """
        self._Dimensions = None

    @property
    def Dimensions(self):
        """无
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Dimension
        """
        return self._Dimensions

    @Dimensions.setter
    def Dimensions(self, Dimensions):
        self._Dimensions = Dimensions


    def _deserialize(self, params):
        if params.get("Dimensions") is not None:
            self._Dimensions = []
            for item in params.get("Dimensions"):
                obj = Dimension()
                obj._deserialize(item)
                self._Dimensions.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FakePoint(AbstractModel):
    """数据点

    """

    def __init__(self):
        r"""
        :param _Dimensions: 维度
注意：此字段可能返回 null，表示取不到有效值。
        :type Dimensions: list of Dimension
        :param _Timestamps: 时间戳
注意：此字段可能返回 null，表示取不到有效值。
        :type Timestamps: list of float
        :param _Values: 值
注意：此字段可能返回 null，表示取不到有效值。
        :type Values: list of float
        """
        self._Dimensions = None
        self._Timestamps = None
        self._Values = None

    @property
    def Dimensions(self):
        """维度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Dimension
        """
        return self._Dimensions

    @Dimensions.setter
    def Dimensions(self, Dimensions):
        self._Dimensions = Dimensions

    @property
    def Timestamps(self):
        """时间戳
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._Timestamps

    @Timestamps.setter
    def Timestamps(self, Timestamps):
        self._Timestamps = Timestamps

    @property
    def Values(self):
        """值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values


    def _deserialize(self, params):
        if params.get("Dimensions") is not None:
            self._Dimensions = []
            for item in params.get("Dimensions"):
                obj = Dimension()
                obj._deserialize(item)
                self._Dimensions.append(obj)
        self._Timestamps = params.get("Timestamps")
        self._Values = params.get("Values")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FetchJobRequest(AbstractModel):
    """FetchJob请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DataSourceId: 数据源ID,CFS类型就是CFS ID
        :type DataSourceId: str
        :param _WorkerToken: 拉取者Token
        :type WorkerToken: str
        """
        self._DataSourceId = None
        self._WorkerToken = None

    @property
    def DataSourceId(self):
        """数据源ID,CFS类型就是CFS ID
        :rtype: str
        """
        return self._DataSourceId

    @DataSourceId.setter
    def DataSourceId(self, DataSourceId):
        self._DataSourceId = DataSourceId

    @property
    def WorkerToken(self):
        """拉取者Token
        :rtype: str
        """
        return self._WorkerToken

    @WorkerToken.setter
    def WorkerToken(self, WorkerToken):
        self._WorkerToken = WorkerToken


    def _deserialize(self, params):
        self._DataSourceId = params.get("DataSourceId")
        self._WorkerToken = params.get("WorkerToken")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FetchJobResponse(AbstractModel):
    """FetchJob返回参数结构体

    """

    def __init__(self):
        r"""
        :param _JobId: 任务Id
注意：此字段可能返回 null，表示取不到有效值。
        :type JobId: str
        :param _JobInput: 任务输入
注意：此字段可能返回 null，表示取不到有效值。
        :type JobInput: :class:`tencentcloud.tione.v20211111.models.JobInput`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._JobId = None
        self._JobInput = None
        self._RequestId = None

    @property
    def JobId(self):
        """任务Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def JobInput(self):
        """任务输入
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.JobInput`
        """
        return self._JobInput

    @JobInput.setter
    def JobInput(self, JobInput):
        self._JobInput = JobInput

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        if params.get("JobInput") is not None:
            self._JobInput = JobInput()
            self._JobInput._deserialize(params.get("JobInput"))
        self._RequestId = params.get("RequestId")


class FieldValueCount(AbstractModel):
    """统计信息详情

    """

    def __init__(self):
        r"""
        :param _FieldValue: 字段名
        :type FieldValue: str
        :param _FieldCount: 值个数
        :type FieldCount: int
        :param _FieldPercentage: 值百分比
        :type FieldPercentage: float
        """
        self._FieldValue = None
        self._FieldCount = None
        self._FieldPercentage = None

    @property
    def FieldValue(self):
        """字段名
        :rtype: str
        """
        return self._FieldValue

    @FieldValue.setter
    def FieldValue(self, FieldValue):
        self._FieldValue = FieldValue

    @property
    def FieldCount(self):
        """值个数
        :rtype: int
        """
        return self._FieldCount

    @FieldCount.setter
    def FieldCount(self, FieldCount):
        self._FieldCount = FieldCount

    @property
    def FieldPercentage(self):
        """值百分比
        :rtype: float
        """
        return self._FieldPercentage

    @FieldPercentage.setter
    def FieldPercentage(self, FieldPercentage):
        self._FieldPercentage = FieldPercentage


    def _deserialize(self, params):
        self._FieldValue = params.get("FieldValue")
        self._FieldCount = params.get("FieldCount")
        self._FieldPercentage = params.get("FieldPercentage")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FileInfo(AbstractModel):
    """文件信息

    """

    def __init__(self):
        r"""
        :param _Name: 文件名
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _IsDir: 是否是文件夹
注意：此字段可能返回 null，表示取不到有效值。
        :type IsDir: bool
        :param _AbsolutePath: 文件的绝对路径
注意：此字段可能返回 null，表示取不到有效值。
        :type AbsolutePath: str
        :param _SourceInfo: 文件来源
注意：此字段可能返回 null，表示取不到有效值。
        :type SourceInfo: :class:`tencentcloud.tione.v20211111.models.SourceInfo`
        :param _SizeLow: 文件大小（单位Byte）。SizeLow为低32位。文件实际大小为SizeHigh << 32 + SizeLow。若为文件夹，该字段无意义。
注意：此字段可能返回 null，表示取不到有效值。
        :type SizeLow: int
        :param _SizeHigh: 件大小（单位Byte）。SizeHigh为高32位。文件实际大小为SizeHigh << 32 + SizeLow。若为文件夹，该字段无意义。
注意：此字段可能返回 null，表示取不到有效值。
        :type SizeHigh: int
        :param _UpdateTimestamp: 修改时间戳
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTimestamp: int
        """
        self._Name = None
        self._IsDir = None
        self._AbsolutePath = None
        self._SourceInfo = None
        self._SizeLow = None
        self._SizeHigh = None
        self._UpdateTimestamp = None

    @property
    def Name(self):
        """文件名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def IsDir(self):
        """是否是文件夹
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsDir

    @IsDir.setter
    def IsDir(self, IsDir):
        self._IsDir = IsDir

    @property
    def AbsolutePath(self):
        """文件的绝对路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AbsolutePath

    @AbsolutePath.setter
    def AbsolutePath(self, AbsolutePath):
        self._AbsolutePath = AbsolutePath

    @property
    def SourceInfo(self):
        """文件来源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.SourceInfo`
        """
        return self._SourceInfo

    @SourceInfo.setter
    def SourceInfo(self, SourceInfo):
        self._SourceInfo = SourceInfo

    @property
    def SizeLow(self):
        """文件大小（单位Byte）。SizeLow为低32位。文件实际大小为SizeHigh << 32 + SizeLow。若为文件夹，该字段无意义。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._SizeLow

    @SizeLow.setter
    def SizeLow(self, SizeLow):
        self._SizeLow = SizeLow

    @property
    def SizeHigh(self):
        """件大小（单位Byte）。SizeHigh为高32位。文件实际大小为SizeHigh << 32 + SizeLow。若为文件夹，该字段无意义。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._SizeHigh

    @SizeHigh.setter
    def SizeHigh(self, SizeHigh):
        self._SizeHigh = SizeHigh

    @property
    def UpdateTimestamp(self):
        """修改时间戳
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._UpdateTimestamp

    @UpdateTimestamp.setter
    def UpdateTimestamp(self, UpdateTimestamp):
        self._UpdateTimestamp = UpdateTimestamp


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._IsDir = params.get("IsDir")
        self._AbsolutePath = params.get("AbsolutePath")
        if params.get("SourceInfo") is not None:
            self._SourceInfo = SourceInfo()
            self._SourceInfo._deserialize(params.get("SourceInfo"))
        self._SizeLow = params.get("SizeLow")
        self._SizeHigh = params.get("SizeHigh")
        self._UpdateTimestamp = params.get("UpdateTimestamp")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FilePreview(AbstractModel):
    """预览文件

    """

    def __init__(self):
        r"""
        :param _FileName: 文件名
注意：此字段可能返回 null，表示取不到有效值。
        :type FileName: str
        :param _Content: 文件内容
注意：此字段可能返回 null，表示取不到有效值。
        :type Content: str
        """
        self._FileName = None
        self._Content = None

    @property
    def FileName(self):
        """文件名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def Content(self):
        """文件内容
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content


    def _deserialize(self, params):
        self._FileName = params.get("FileName")
        self._Content = params.get("Content")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FileStatus(AbstractModel):
    """文件状态

    """

    def __init__(self):
        r"""
        :param _DataSourceId: cfs id
注意：此字段可能返回 null，表示取不到有效值。
        :type DataSourceId: str
        :param _Path: 路径
注意：此字段可能返回 null，表示取不到有效值。
        :type Path: str
        :param _ExceptionInfo: 异常信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ExceptionInfo: :class:`tencentcloud.tione.v20211111.models.ExceptionInfo`
        :param _IsDir: 是否是文件夹
注意：此字段可能返回 null，表示取不到有效值。
        :type IsDir: bool
        """
        self._DataSourceId = None
        self._Path = None
        self._ExceptionInfo = None
        self._IsDir = None

    @property
    def DataSourceId(self):
        """cfs id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DataSourceId

    @DataSourceId.setter
    def DataSourceId(self, DataSourceId):
        self._DataSourceId = DataSourceId

    @property
    def Path(self):
        """路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def ExceptionInfo(self):
        """异常信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ExceptionInfo`
        """
        return self._ExceptionInfo

    @ExceptionInfo.setter
    def ExceptionInfo(self, ExceptionInfo):
        self._ExceptionInfo = ExceptionInfo

    @property
    def IsDir(self):
        """是否是文件夹
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsDir

    @IsDir.setter
    def IsDir(self, IsDir):
        self._IsDir = IsDir


    def _deserialize(self, params):
        self._DataSourceId = params.get("DataSourceId")
        self._Path = params.get("Path")
        if params.get("ExceptionInfo") is not None:
            self._ExceptionInfo = ExceptionInfo()
            self._ExceptionInfo._deserialize(params.get("ExceptionInfo"))
        self._IsDir = params.get("IsDir")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FileSystemInfoWithPathAccessibility(AbstractModel):
    """包含可访问目录列表的文件系统信息

    """

    def __init__(self):
        r"""
        :param _AppId: 13540086
        :type AppId: int
        :param _CreationTime: 创建时间
        :type CreationTime: str
        :param _CreationToken: 用户自定义名称
注意：此字段可能返回 null，表示取不到有效值。
        :type CreationToken: str
        :param _FsName: 用户自定义名称
注意：此字段可能返回 null，表示取不到有效值。
        :type FsName: str
        :param _FileSystemId: 文件系统 ID
        :type FileSystemId: str
        :param _LifeCycleState: 文件系统状态。取值范围：
- creating:创建中
- mounting:挂载中
- create_failed:创建失败
- available:可使用
- unserviced:停服中
- upgrading:升级中
注意：此字段可能返回 null，表示取不到有效值。
        :type LifeCycleState: str
        :param _SizeByte: 文件系统已使用容量。单位：Byte
注意：此字段可能返回 null，表示取不到有效值。
        :type SizeByte: int
        :param _SizeLimit: 文件系统空间限制。单位:GiB
注意：此字段可能返回 null，表示取不到有效值。
        :type SizeLimit: int
        :param _ZoneId: 区域 ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ZoneId: int
        :param _Zone: 区域名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Zone: str
        :param _Protocol: 文件系统协议类型, 支持 NFS,CIFS,TURBO
注意：此字段可能返回 null，表示取不到有效值。
        :type Protocol: str
        :param _StorageType: 存储类型，HP：通用性能型；SD：通用标准型；TP:turbo性能型；TB：turbo标准型；THP：吞吐型
注意：此字段可能返回 null，表示取不到有效值。
        :type StorageType: str
        :param _StorageResourcePkg: 文件系统绑定的预付费存储包
注意：此字段可能返回 null，表示取不到有效值。
        :type StorageResourcePkg: str
        :param _Capacity: 文件系统容量规格上限
单位:GiB
注意：此字段可能返回 null，表示取不到有效值。
        :type Capacity: int
        :param _BandwidthLimit: 文件系统吞吐上限，吞吐上限是根据文件系统当前已使用存储量、绑定的存储资源包以及吞吐资源包一同确定. 单位MiB/s
注意：此字段可能返回 null，表示取不到有效值。
        :type BandwidthLimit: int
        :param _Tags: 文件系统标签列表
        :type Tags: list of Tag
        :param _FullAccess: 是否整个文件系统都有权限访问
        :type FullAccess: bool
        :param _PathAccessibilitiyList: 可访问的目录清单
        :type PathAccessibilitiyList: list of FSPathAccessibility
        :param _TieringState: 文件系统生命周期管理状态
注意：此字段可能返回 null，表示取不到有效值。
        :type TieringState: str
        """
        self._AppId = None
        self._CreationTime = None
        self._CreationToken = None
        self._FsName = None
        self._FileSystemId = None
        self._LifeCycleState = None
        self._SizeByte = None
        self._SizeLimit = None
        self._ZoneId = None
        self._Zone = None
        self._Protocol = None
        self._StorageType = None
        self._StorageResourcePkg = None
        self._Capacity = None
        self._BandwidthLimit = None
        self._Tags = None
        self._FullAccess = None
        self._PathAccessibilitiyList = None
        self._TieringState = None

    @property
    def AppId(self):
        """13540086
        :rtype: int
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId

    @property
    def CreationTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreationTime

    @CreationTime.setter
    def CreationTime(self, CreationTime):
        self._CreationTime = CreationTime

    @property
    def CreationToken(self):
        """用户自定义名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreationToken

    @CreationToken.setter
    def CreationToken(self, CreationToken):
        self._CreationToken = CreationToken

    @property
    def FsName(self):
        """用户自定义名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FsName

    @FsName.setter
    def FsName(self, FsName):
        self._FsName = FsName

    @property
    def FileSystemId(self):
        """文件系统 ID
        :rtype: str
        """
        return self._FileSystemId

    @FileSystemId.setter
    def FileSystemId(self, FileSystemId):
        self._FileSystemId = FileSystemId

    @property
    def LifeCycleState(self):
        """文件系统状态。取值范围：
- creating:创建中
- mounting:挂载中
- create_failed:创建失败
- available:可使用
- unserviced:停服中
- upgrading:升级中
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LifeCycleState

    @LifeCycleState.setter
    def LifeCycleState(self, LifeCycleState):
        self._LifeCycleState = LifeCycleState

    @property
    def SizeByte(self):
        """文件系统已使用容量。单位：Byte
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._SizeByte

    @SizeByte.setter
    def SizeByte(self, SizeByte):
        self._SizeByte = SizeByte

    @property
    def SizeLimit(self):
        """文件系统空间限制。单位:GiB
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._SizeLimit

    @SizeLimit.setter
    def SizeLimit(self, SizeLimit):
        self._SizeLimit = SizeLimit

    @property
    def ZoneId(self):
        """区域 ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ZoneId

    @ZoneId.setter
    def ZoneId(self, ZoneId):
        self._ZoneId = ZoneId

    @property
    def Zone(self):
        """区域名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Zone

    @Zone.setter
    def Zone(self, Zone):
        self._Zone = Zone

    @property
    def Protocol(self):
        """文件系统协议类型, 支持 NFS,CIFS,TURBO
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Protocol

    @Protocol.setter
    def Protocol(self, Protocol):
        self._Protocol = Protocol

    @property
    def StorageType(self):
        """存储类型，HP：通用性能型；SD：通用标准型；TP:turbo性能型；TB：turbo标准型；THP：吞吐型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StorageType

    @StorageType.setter
    def StorageType(self, StorageType):
        self._StorageType = StorageType

    @property
    def StorageResourcePkg(self):
        """文件系统绑定的预付费存储包
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StorageResourcePkg

    @StorageResourcePkg.setter
    def StorageResourcePkg(self, StorageResourcePkg):
        self._StorageResourcePkg = StorageResourcePkg

    @property
    def Capacity(self):
        """文件系统容量规格上限
单位:GiB
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Capacity

    @Capacity.setter
    def Capacity(self, Capacity):
        self._Capacity = Capacity

    @property
    def BandwidthLimit(self):
        """文件系统吞吐上限，吞吐上限是根据文件系统当前已使用存储量、绑定的存储资源包以及吞吐资源包一同确定. 单位MiB/s
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._BandwidthLimit

    @BandwidthLimit.setter
    def BandwidthLimit(self, BandwidthLimit):
        self._BandwidthLimit = BandwidthLimit

    @property
    def Tags(self):
        """文件系统标签列表
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def FullAccess(self):
        """是否整个文件系统都有权限访问
        :rtype: bool
        """
        return self._FullAccess

    @FullAccess.setter
    def FullAccess(self, FullAccess):
        self._FullAccess = FullAccess

    @property
    def PathAccessibilitiyList(self):
        """可访问的目录清单
        :rtype: list of FSPathAccessibility
        """
        return self._PathAccessibilitiyList

    @PathAccessibilitiyList.setter
    def PathAccessibilitiyList(self, PathAccessibilitiyList):
        self._PathAccessibilitiyList = PathAccessibilitiyList

    @property
    def TieringState(self):
        """文件系统生命周期管理状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TieringState

    @TieringState.setter
    def TieringState(self, TieringState):
        self._TieringState = TieringState


    def _deserialize(self, params):
        self._AppId = params.get("AppId")
        self._CreationTime = params.get("CreationTime")
        self._CreationToken = params.get("CreationToken")
        self._FsName = params.get("FsName")
        self._FileSystemId = params.get("FileSystemId")
        self._LifeCycleState = params.get("LifeCycleState")
        self._SizeByte = params.get("SizeByte")
        self._SizeLimit = params.get("SizeLimit")
        self._ZoneId = params.get("ZoneId")
        self._Zone = params.get("Zone")
        self._Protocol = params.get("Protocol")
        self._StorageType = params.get("StorageType")
        self._StorageResourcePkg = params.get("StorageResourcePkg")
        self._Capacity = params.get("Capacity")
        self._BandwidthLimit = params.get("BandwidthLimit")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._FullAccess = params.get("FullAccess")
        if params.get("PathAccessibilitiyList") is not None:
            self._PathAccessibilitiyList = []
            for item in params.get("PathAccessibilitiyList"):
                obj = FSPathAccessibility()
                obj._deserialize(item)
                self._PathAccessibilitiyList.append(obj)
        self._TieringState = params.get("TieringState")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Filter(AbstractModel):
    """过滤器

    """

    def __init__(self):
        r"""
        :param _Name: 过滤字段名称
        :type Name: str
        :param _Values: 过滤字段取值
        :type Values: list of str
        :param _Negative: 是否开启反向查询
        :type Negative: bool
        :param _Fuzzy: 是否开启模糊匹配
        :type Fuzzy: bool
        """
        self._Name = None
        self._Values = None
        self._Negative = None
        self._Fuzzy = None

    @property
    def Name(self):
        """过滤字段名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Values(self):
        """过滤字段取值
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values

    @property
    def Negative(self):
        """是否开启反向查询
        :rtype: bool
        """
        return self._Negative

    @Negative.setter
    def Negative(self, Negative):
        self._Negative = Negative

    @property
    def Fuzzy(self):
        """是否开启模糊匹配
        :rtype: bool
        """
        return self._Fuzzy

    @Fuzzy.setter
    def Fuzzy(self, Fuzzy):
        self._Fuzzy = Fuzzy


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Values = params.get("Values")
        self._Negative = params.get("Negative")
        self._Fuzzy = params.get("Fuzzy")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FilterLabelInfo(AbstractModel):
    """图片列表查询结果详情

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集id
        :type DatasetId: str
        :param _FileId: 文件ID
        :type FileId: str
        :param _FileName: 文件路径
        :type FileName: str
        :param _ClassificationLabels: 分类标签结果
注意：此字段可能返回 null，表示取不到有效值。
        :type ClassificationLabels: list of str
        :param _DetectionLabels: 检测标签结果
注意：此字段可能返回 null，表示取不到有效值。
        :type DetectionLabels: list of DetectionLabelInfo
        :param _SegmentationLabels: 分割标签结果
注意：此字段可能返回 null，表示取不到有效值。
        :type SegmentationLabels: list of SegmentationInfo
        :param _RGBPath: RGB 图片路径
注意：此字段可能返回 null，表示取不到有效值。
        :type RGBPath: str
        :param _LabelTemplateType: 标签模板类型
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelTemplateType: str
        :param _DownloadUrl: 下载url链接
注意：此字段可能返回 null，表示取不到有效值。
        :type DownloadUrl: str
        :param _DownloadThumbnailUrl: 缩略图下载链接
注意：此字段可能返回 null，表示取不到有效值。
        :type DownloadThumbnailUrl: str
        :param _DownloadRGBUrl: 分割结果图片下载链接
注意：此字段可能返回 null，表示取不到有效值。
        :type DownloadRGBUrl: str
        :param _OcrScene: OCR场景
IDENTITY：识别
STRUCTURE：智能结构化
注意：此字段可能返回 null，表示取不到有效值。
        :type OcrScene: str
        :param _OcrLabels: OCR场景标签列表
注意：此字段可能返回 null，表示取不到有效值。
        :type OcrLabels: list of OcrLabelInfo
        :param _OcrLabelInfo: OCR场景标签信息
注意：此字段可能返回 null，表示取不到有效值。
        :type OcrLabelInfo: str
        :param _TextClassificationLabelList: 文本分类场景标签结果，内容是json结构
注意：此字段可能返回 null，表示取不到有效值。
        :type TextClassificationLabelList: str
        :param _RowText: 文本内容，返回50字符
注意：此字段可能返回 null，表示取不到有效值。
        :type RowText: str
        :param _ContentOmit: 文本内容是否完全返回
注意：此字段可能返回 null，表示取不到有效值。
        :type ContentOmit: bool
        """
        self._DatasetId = None
        self._FileId = None
        self._FileName = None
        self._ClassificationLabels = None
        self._DetectionLabels = None
        self._SegmentationLabels = None
        self._RGBPath = None
        self._LabelTemplateType = None
        self._DownloadUrl = None
        self._DownloadThumbnailUrl = None
        self._DownloadRGBUrl = None
        self._OcrScene = None
        self._OcrLabels = None
        self._OcrLabelInfo = None
        self._TextClassificationLabelList = None
        self._RowText = None
        self._ContentOmit = None

    @property
    def DatasetId(self):
        """数据集id
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def FileId(self):
        """文件ID
        :rtype: str
        """
        return self._FileId

    @FileId.setter
    def FileId(self, FileId):
        self._FileId = FileId

    @property
    def FileName(self):
        """文件路径
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def ClassificationLabels(self):
        """分类标签结果
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._ClassificationLabels

    @ClassificationLabels.setter
    def ClassificationLabels(self, ClassificationLabels):
        self._ClassificationLabels = ClassificationLabels

    @property
    def DetectionLabels(self):
        """检测标签结果
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DetectionLabelInfo
        """
        return self._DetectionLabels

    @DetectionLabels.setter
    def DetectionLabels(self, DetectionLabels):
        self._DetectionLabels = DetectionLabels

    @property
    def SegmentationLabels(self):
        """分割标签结果
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of SegmentationInfo
        """
        return self._SegmentationLabels

    @SegmentationLabels.setter
    def SegmentationLabels(self, SegmentationLabels):
        self._SegmentationLabels = SegmentationLabels

    @property
    def RGBPath(self):
        """RGB 图片路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RGBPath

    @RGBPath.setter
    def RGBPath(self, RGBPath):
        self._RGBPath = RGBPath

    @property
    def LabelTemplateType(self):
        """标签模板类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LabelTemplateType

    @LabelTemplateType.setter
    def LabelTemplateType(self, LabelTemplateType):
        self._LabelTemplateType = LabelTemplateType

    @property
    def DownloadUrl(self):
        """下载url链接
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def DownloadThumbnailUrl(self):
        """缩略图下载链接
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DownloadThumbnailUrl

    @DownloadThumbnailUrl.setter
    def DownloadThumbnailUrl(self, DownloadThumbnailUrl):
        self._DownloadThumbnailUrl = DownloadThumbnailUrl

    @property
    def DownloadRGBUrl(self):
        """分割结果图片下载链接
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DownloadRGBUrl

    @DownloadRGBUrl.setter
    def DownloadRGBUrl(self, DownloadRGBUrl):
        self._DownloadRGBUrl = DownloadRGBUrl

    @property
    def OcrScene(self):
        """OCR场景
IDENTITY：识别
STRUCTURE：智能结构化
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._OcrScene

    @OcrScene.setter
    def OcrScene(self, OcrScene):
        self._OcrScene = OcrScene

    @property
    def OcrLabels(self):
        """OCR场景标签列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of OcrLabelInfo
        """
        return self._OcrLabels

    @OcrLabels.setter
    def OcrLabels(self, OcrLabels):
        self._OcrLabels = OcrLabels

    @property
    def OcrLabelInfo(self):
        """OCR场景标签信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._OcrLabelInfo

    @OcrLabelInfo.setter
    def OcrLabelInfo(self, OcrLabelInfo):
        self._OcrLabelInfo = OcrLabelInfo

    @property
    def TextClassificationLabelList(self):
        """文本分类场景标签结果，内容是json结构
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TextClassificationLabelList

    @TextClassificationLabelList.setter
    def TextClassificationLabelList(self, TextClassificationLabelList):
        self._TextClassificationLabelList = TextClassificationLabelList

    @property
    def RowText(self):
        """文本内容，返回50字符
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RowText

    @RowText.setter
    def RowText(self, RowText):
        self._RowText = RowText

    @property
    def ContentOmit(self):
        """文本内容是否完全返回
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._ContentOmit

    @ContentOmit.setter
    def ContentOmit(self, ContentOmit):
        self._ContentOmit = ContentOmit


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._FileId = params.get("FileId")
        self._FileName = params.get("FileName")
        self._ClassificationLabels = params.get("ClassificationLabels")
        if params.get("DetectionLabels") is not None:
            self._DetectionLabels = []
            for item in params.get("DetectionLabels"):
                obj = DetectionLabelInfo()
                obj._deserialize(item)
                self._DetectionLabels.append(obj)
        if params.get("SegmentationLabels") is not None:
            self._SegmentationLabels = []
            for item in params.get("SegmentationLabels"):
                obj = SegmentationInfo()
                obj._deserialize(item)
                self._SegmentationLabels.append(obj)
        self._RGBPath = params.get("RGBPath")
        self._LabelTemplateType = params.get("LabelTemplateType")
        self._DownloadUrl = params.get("DownloadUrl")
        self._DownloadThumbnailUrl = params.get("DownloadThumbnailUrl")
        self._DownloadRGBUrl = params.get("DownloadRGBUrl")
        self._OcrScene = params.get("OcrScene")
        if params.get("OcrLabels") is not None:
            self._OcrLabels = []
            for item in params.get("OcrLabels"):
                obj = OcrLabelInfo()
                obj._deserialize(item)
                self._OcrLabels.append(obj)
        self._OcrLabelInfo = params.get("OcrLabelInfo")
        self._TextClassificationLabelList = params.get("TextClassificationLabelList")
        self._RowText = params.get("RowText")
        self._ContentOmit = params.get("ContentOmit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FlowDetail(AbstractModel):
    """工作流详情

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流Id
        :type FlowId: str
        :param _ProjectId: 工程ID
        :type ProjectId: str
        :param _FlowName: 工作流名称
        :type FlowName: str
        :param _Uin: 创建工作流的uin
        :type Uin: str
        :param _SubUin: 创建工作流的subuin
        :type SubUin: str
        :param _Description: 工作部描述
        :type Description: str
        :param _CanvasData: 画布信息
        :type CanvasData: str
        :param _EnableCron: 是否开启定时任务
        :type EnableCron: bool
        :param _CronSchedule: 定时运行配置
        :type CronSchedule: str
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        :param _LastRunTime: 最后运行的时间
        :type LastRunTime: str
        :param _Status: 工作流状态。值如下：
   NotRun: 新保存未运行
   Starting:启动中
   Running： 运行中
   Stopping： 停止中
   Stopped： 已停止
   Failed：失败
   Succeeded：成功
        :type Status: str
        :param _EnableWhiteListWait: 是否开启白名单等待
        :type EnableWhiteListWait: bool
        :param _WhiteListWaitHours: 白名单等待时间
        :type WhiteListWaitHours: int
        :param _Message: 工作流信息
        :type Message: str
        :param _CosBucket: 工作流的COS桶
        :type CosBucket: str
        :param _CosPath: 工作流的COS路径
        :type CosPath: str
        """
        self._FlowId = None
        self._ProjectId = None
        self._FlowName = None
        self._Uin = None
        self._SubUin = None
        self._Description = None
        self._CanvasData = None
        self._EnableCron = None
        self._CronSchedule = None
        self._CreateTime = None
        self._UpdateTime = None
        self._LastRunTime = None
        self._Status = None
        self._EnableWhiteListWait = None
        self._WhiteListWaitHours = None
        self._Message = None
        self._CosBucket = None
        self._CosPath = None

    @property
    def FlowId(self):
        """工作流Id
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def ProjectId(self):
        """工程ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def FlowName(self):
        """工作流名称
        :rtype: str
        """
        return self._FlowName

    @FlowName.setter
    def FlowName(self, FlowName):
        self._FlowName = FlowName

    @property
    def Uin(self):
        """创建工作流的uin
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def SubUin(self):
        """创建工作流的subuin
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def Description(self):
        """工作部描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def CanvasData(self):
        """画布信息
        :rtype: str
        """
        return self._CanvasData

    @CanvasData.setter
    def CanvasData(self, CanvasData):
        self._CanvasData = CanvasData

    @property
    def EnableCron(self):
        """是否开启定时任务
        :rtype: bool
        """
        return self._EnableCron

    @EnableCron.setter
    def EnableCron(self, EnableCron):
        self._EnableCron = EnableCron

    @property
    def CronSchedule(self):
        """定时运行配置
        :rtype: str
        """
        return self._CronSchedule

    @CronSchedule.setter
    def CronSchedule(self, CronSchedule):
        self._CronSchedule = CronSchedule

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def LastRunTime(self):
        """最后运行的时间
        :rtype: str
        """
        return self._LastRunTime

    @LastRunTime.setter
    def LastRunTime(self, LastRunTime):
        self._LastRunTime = LastRunTime

    @property
    def Status(self):
        """工作流状态。值如下：
   NotRun: 新保存未运行
   Starting:启动中
   Running： 运行中
   Stopping： 停止中
   Stopped： 已停止
   Failed：失败
   Succeeded：成功
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def EnableWhiteListWait(self):
        """是否开启白名单等待
        :rtype: bool
        """
        return self._EnableWhiteListWait

    @EnableWhiteListWait.setter
    def EnableWhiteListWait(self, EnableWhiteListWait):
        self._EnableWhiteListWait = EnableWhiteListWait

    @property
    def WhiteListWaitHours(self):
        """白名单等待时间
        :rtype: int
        """
        return self._WhiteListWaitHours

    @WhiteListWaitHours.setter
    def WhiteListWaitHours(self, WhiteListWaitHours):
        self._WhiteListWaitHours = WhiteListWaitHours

    @property
    def Message(self):
        """工作流信息
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message

    @property
    def CosBucket(self):
        """工作流的COS桶
        :rtype: str
        """
        return self._CosBucket

    @CosBucket.setter
    def CosBucket(self, CosBucket):
        self._CosBucket = CosBucket

    @property
    def CosPath(self):
        """工作流的COS路径
        :rtype: str
        """
        return self._CosPath

    @CosPath.setter
    def CosPath(self, CosPath):
        self._CosPath = CosPath


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._ProjectId = params.get("ProjectId")
        self._FlowName = params.get("FlowName")
        self._Uin = params.get("Uin")
        self._SubUin = params.get("SubUin")
        self._Description = params.get("Description")
        self._CanvasData = params.get("CanvasData")
        self._EnableCron = params.get("EnableCron")
        self._CronSchedule = params.get("CronSchedule")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._LastRunTime = params.get("LastRunTime")
        self._Status = params.get("Status")
        self._EnableWhiteListWait = params.get("EnableWhiteListWait")
        self._WhiteListWaitHours = params.get("WhiteListWaitHours")
        self._Message = params.get("Message")
        self._CosBucket = params.get("CosBucket")
        self._CosPath = params.get("CosPath")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FlowEdge(AbstractModel):
    """工作流的边

    """

    def __init__(self):
        r"""
        :param _Uuid: 前端生成的uuid
        :type Uuid: str
        :param _FromNodeUuid: 边的起点节点的uuid
        :type FromNodeUuid: str
        :param _ToNodeUuid: 边的终点节点的uuid
        :type ToNodeUuid: str
        :param _FromDataKey: 边的起点节点连接的key的名称
        :type FromDataKey: str
        :param _ToDataKey: 边的终点节点连接的key的名称
        :type ToDataKey: str
        """
        self._Uuid = None
        self._FromNodeUuid = None
        self._ToNodeUuid = None
        self._FromDataKey = None
        self._ToDataKey = None

    @property
    def Uuid(self):
        """前端生成的uuid
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def FromNodeUuid(self):
        """边的起点节点的uuid
        :rtype: str
        """
        return self._FromNodeUuid

    @FromNodeUuid.setter
    def FromNodeUuid(self, FromNodeUuid):
        self._FromNodeUuid = FromNodeUuid

    @property
    def ToNodeUuid(self):
        """边的终点节点的uuid
        :rtype: str
        """
        return self._ToNodeUuid

    @ToNodeUuid.setter
    def ToNodeUuid(self, ToNodeUuid):
        self._ToNodeUuid = ToNodeUuid

    @property
    def FromDataKey(self):
        """边的起点节点连接的key的名称
        :rtype: str
        """
        return self._FromDataKey

    @FromDataKey.setter
    def FromDataKey(self, FromDataKey):
        self._FromDataKey = FromDataKey

    @property
    def ToDataKey(self):
        """边的终点节点连接的key的名称
        :rtype: str
        """
        return self._ToDataKey

    @ToDataKey.setter
    def ToDataKey(self, ToDataKey):
        self._ToDataKey = ToDataKey


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._FromNodeUuid = params.get("FromNodeUuid")
        self._ToNodeUuid = params.get("ToNodeUuid")
        self._FromDataKey = params.get("FromDataKey")
        self._ToDataKey = params.get("ToDataKey")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FlowNode(AbstractModel):
    """工作流的节点

    """

    def __init__(self):
        r"""
        :param _Uuid: 前端生成的uuid
        :type Uuid: str
        :param _FlowNodeName: 节点名称
        :type FlowNodeName: str
        :param _ModuleId: 算子ID
        :type ModuleId: str
        :param _NodeType: 节点类型。 Root: 根节点； Data:数据节点； Training: 任务建模
        :type NodeType: str
        :param _CanvasData: 画布信息
        :type CanvasData: str
        :param _CreateTimeMilliseconds: 画布上生成这个节点的时间戳
        :type CreateTimeMilliseconds: int
        :param _JobData: 提交的参数
        :type JobData: str
        """
        self._Uuid = None
        self._FlowNodeName = None
        self._ModuleId = None
        self._NodeType = None
        self._CanvasData = None
        self._CreateTimeMilliseconds = None
        self._JobData = None

    @property
    def Uuid(self):
        """前端生成的uuid
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def FlowNodeName(self):
        """节点名称
        :rtype: str
        """
        return self._FlowNodeName

    @FlowNodeName.setter
    def FlowNodeName(self, FlowNodeName):
        self._FlowNodeName = FlowNodeName

    @property
    def ModuleId(self):
        """算子ID
        :rtype: str
        """
        return self._ModuleId

    @ModuleId.setter
    def ModuleId(self, ModuleId):
        self._ModuleId = ModuleId

    @property
    def NodeType(self):
        """节点类型。 Root: 根节点； Data:数据节点； Training: 任务建模
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def CanvasData(self):
        """画布信息
        :rtype: str
        """
        return self._CanvasData

    @CanvasData.setter
    def CanvasData(self, CanvasData):
        self._CanvasData = CanvasData

    @property
    def CreateTimeMilliseconds(self):
        """画布上生成这个节点的时间戳
        :rtype: int
        """
        return self._CreateTimeMilliseconds

    @CreateTimeMilliseconds.setter
    def CreateTimeMilliseconds(self, CreateTimeMilliseconds):
        self._CreateTimeMilliseconds = CreateTimeMilliseconds

    @property
    def JobData(self):
        """提交的参数
        :rtype: str
        """
        return self._JobData

    @JobData.setter
    def JobData(self, JobData):
        self._JobData = JobData


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._FlowNodeName = params.get("FlowNodeName")
        self._ModuleId = params.get("ModuleId")
        self._NodeType = params.get("NodeType")
        self._CanvasData = params.get("CanvasData")
        self._CreateTimeMilliseconds = params.get("CreateTimeMilliseconds")
        self._JobData = params.get("JobData")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FlowRunDetail(AbstractModel):
    """工作流执行详情

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流Id
        :type FlowId: str
        :param _FlowRunId: 工作流的执行Id
        :type FlowRunId: str
        :param _RunType: 执行类型。 Whole：整体运行； StartNode: 起点运行; EndNode: 运行到某点; OneNode运行某点; CronWhole: 定时运行
        :type RunType: str
        :param _Uin: 创建工作流的uin
        :type Uin: str
        :param _SubUin: 创建工作流的subuin
        :type SubUin: str
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        :param _StartTime: 任务开始时间
        :type StartTime: str
        :param _EndTime: 任务结束时间
        :type EndTime: str
        :param _Status: 工作流状态。值如下：
   NotRun: 新保存未运行
   Starting:启动中
   Running： 运行中
   Stopping： 停止中
   Stopped： 已停止
   Failed：失败
   Succeeded：成功
        :type Status: str
        :param _RuntimeInSeconds: 运行时长
        :type RuntimeInSeconds: int
        :param _CanvasData: 画布信息
        :type CanvasData: str
        :param _CosBucket: 工作流的COS桶
        :type CosBucket: str
        :param _CosPath: 工作流的COS路径
        :type CosPath: str
        :param _ProjectId: 工程ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ProjectId: str
        """
        self._FlowId = None
        self._FlowRunId = None
        self._RunType = None
        self._Uin = None
        self._SubUin = None
        self._CreateTime = None
        self._UpdateTime = None
        self._StartTime = None
        self._EndTime = None
        self._Status = None
        self._RuntimeInSeconds = None
        self._CanvasData = None
        self._CosBucket = None
        self._CosPath = None
        self._ProjectId = None

    @property
    def FlowId(self):
        """工作流Id
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def FlowRunId(self):
        """工作流的执行Id
        :rtype: str
        """
        return self._FlowRunId

    @FlowRunId.setter
    def FlowRunId(self, FlowRunId):
        self._FlowRunId = FlowRunId

    @property
    def RunType(self):
        """执行类型。 Whole：整体运行； StartNode: 起点运行; EndNode: 运行到某点; OneNode运行某点; CronWhole: 定时运行
        :rtype: str
        """
        return self._RunType

    @RunType.setter
    def RunType(self, RunType):
        self._RunType = RunType

    @property
    def Uin(self):
        """创建工作流的uin
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def SubUin(self):
        """创建工作流的subuin
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def StartTime(self):
        """任务开始时间
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """任务结束时间
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Status(self):
        """工作流状态。值如下：
   NotRun: 新保存未运行
   Starting:启动中
   Running： 运行中
   Stopping： 停止中
   Stopped： 已停止
   Failed：失败
   Succeeded：成功
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RuntimeInSeconds(self):
        """运行时长
        :rtype: int
        """
        return self._RuntimeInSeconds

    @RuntimeInSeconds.setter
    def RuntimeInSeconds(self, RuntimeInSeconds):
        self._RuntimeInSeconds = RuntimeInSeconds

    @property
    def CanvasData(self):
        """画布信息
        :rtype: str
        """
        return self._CanvasData

    @CanvasData.setter
    def CanvasData(self, CanvasData):
        self._CanvasData = CanvasData

    @property
    def CosBucket(self):
        """工作流的COS桶
        :rtype: str
        """
        return self._CosBucket

    @CosBucket.setter
    def CosBucket(self, CosBucket):
        self._CosBucket = CosBucket

    @property
    def CosPath(self):
        """工作流的COS路径
        :rtype: str
        """
        return self._CosPath

    @CosPath.setter
    def CosPath(self, CosPath):
        self._CosPath = CosPath

    @property
    def ProjectId(self):
        """工程ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._FlowRunId = params.get("FlowRunId")
        self._RunType = params.get("RunType")
        self._Uin = params.get("Uin")
        self._SubUin = params.get("SubUin")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._Status = params.get("Status")
        self._RuntimeInSeconds = params.get("RuntimeInSeconds")
        self._CanvasData = params.get("CanvasData")
        self._CosBucket = params.get("CosBucket")
        self._CosPath = params.get("CosPath")
        self._ProjectId = params.get("ProjectId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FlowRunNode(AbstractModel):
    """工作流运行的节点

    """

    def __init__(self):
        r"""
        :param _Uuid: 前端生成的uuid
        :type Uuid: str
        :param _FlowRunNodeName: 节点名称
        :type FlowRunNodeName: str
        :param _ModuleId: 算子ID
        :type ModuleId: str
        :param _NodeType: 节点类型。 Root: 根节点； Training: 任务建模；ModelRepository: 模型仓库；ModelService: 模型服务
        :type NodeType: str
        :param _CanvasData: 画布信息
        :type CanvasData: str
        :param _JobData: 提交的参数
        :type JobData: str
        :param _FlowRunNodeId: 运行的节点的ID
        :type FlowRunNodeId: str
        :param _Status: 节点的状态
   NotRun:    新保存未运行
   Starting:   启动中
   Running： 运行中
   Stopping： 停止中
   Stopped： 已停止
   Failed：     失败（异常）
   Succeeded：成功（运行完成）
        :type Status: str
        :param _Message: 节点信息，如： 资源配额不足、拉取镜像失败
        :type Message: str
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        :param _StartTime: 任务开始时间
        :type StartTime: str
        :param _EndTime: 任务结束时间
        :type EndTime: str
        :param _JobId: 任务的ID。 如：任务建模ID、模型仓库ID
        :type JobId: str
        :param _RuntimeInSeconds: 运行时长
        :type RuntimeInSeconds: int
        :param _ChargeStatus: 计费状态，eg：
    NONE("预付费缺省值"),
    NOT_BILLING("未开始计费"),
    BILLING("计费中"),
    WHITELIST_USING("白名单免费试用中"),
    WHITELIST_STOP("白名单到期停止"),
    ARREARS_STOP("欠费停止");
        :type ChargeStatus: str
        :param _BillingInfo: 计费金额信息，eg：2.00元/小时 (for后付费)
        :type BillingInfo: str
        """
        self._Uuid = None
        self._FlowRunNodeName = None
        self._ModuleId = None
        self._NodeType = None
        self._CanvasData = None
        self._JobData = None
        self._FlowRunNodeId = None
        self._Status = None
        self._Message = None
        self._CreateTime = None
        self._UpdateTime = None
        self._StartTime = None
        self._EndTime = None
        self._JobId = None
        self._RuntimeInSeconds = None
        self._ChargeStatus = None
        self._BillingInfo = None

    @property
    def Uuid(self):
        """前端生成的uuid
        :rtype: str
        """
        return self._Uuid

    @Uuid.setter
    def Uuid(self, Uuid):
        self._Uuid = Uuid

    @property
    def FlowRunNodeName(self):
        """节点名称
        :rtype: str
        """
        return self._FlowRunNodeName

    @FlowRunNodeName.setter
    def FlowRunNodeName(self, FlowRunNodeName):
        self._FlowRunNodeName = FlowRunNodeName

    @property
    def ModuleId(self):
        """算子ID
        :rtype: str
        """
        return self._ModuleId

    @ModuleId.setter
    def ModuleId(self, ModuleId):
        self._ModuleId = ModuleId

    @property
    def NodeType(self):
        """节点类型。 Root: 根节点； Training: 任务建模；ModelRepository: 模型仓库；ModelService: 模型服务
        :rtype: str
        """
        return self._NodeType

    @NodeType.setter
    def NodeType(self, NodeType):
        self._NodeType = NodeType

    @property
    def CanvasData(self):
        """画布信息
        :rtype: str
        """
        return self._CanvasData

    @CanvasData.setter
    def CanvasData(self, CanvasData):
        self._CanvasData = CanvasData

    @property
    def JobData(self):
        """提交的参数
        :rtype: str
        """
        return self._JobData

    @JobData.setter
    def JobData(self, JobData):
        self._JobData = JobData

    @property
    def FlowRunNodeId(self):
        """运行的节点的ID
        :rtype: str
        """
        return self._FlowRunNodeId

    @FlowRunNodeId.setter
    def FlowRunNodeId(self, FlowRunNodeId):
        self._FlowRunNodeId = FlowRunNodeId

    @property
    def Status(self):
        """节点的状态
   NotRun:    新保存未运行
   Starting:   启动中
   Running： 运行中
   Stopping： 停止中
   Stopped： 已停止
   Failed：     失败（异常）
   Succeeded：成功（运行完成）
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Message(self):
        """节点信息，如： 资源配额不足、拉取镜像失败
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def StartTime(self):
        """任务开始时间
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """任务结束时间
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def JobId(self):
        """任务的ID。 如：任务建模ID、模型仓库ID
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def RuntimeInSeconds(self):
        """运行时长
        :rtype: int
        """
        return self._RuntimeInSeconds

    @RuntimeInSeconds.setter
    def RuntimeInSeconds(self, RuntimeInSeconds):
        self._RuntimeInSeconds = RuntimeInSeconds

    @property
    def ChargeStatus(self):
        """计费状态，eg：
    NONE("预付费缺省值"),
    NOT_BILLING("未开始计费"),
    BILLING("计费中"),
    WHITELIST_USING("白名单免费试用中"),
    WHITELIST_STOP("白名单到期停止"),
    ARREARS_STOP("欠费停止");
        :rtype: str
        """
        return self._ChargeStatus

    @ChargeStatus.setter
    def ChargeStatus(self, ChargeStatus):
        self._ChargeStatus = ChargeStatus

    @property
    def BillingInfo(self):
        """计费金额信息，eg：2.00元/小时 (for后付费)
        :rtype: str
        """
        return self._BillingInfo

    @BillingInfo.setter
    def BillingInfo(self, BillingInfo):
        self._BillingInfo = BillingInfo


    def _deserialize(self, params):
        self._Uuid = params.get("Uuid")
        self._FlowRunNodeName = params.get("FlowRunNodeName")
        self._ModuleId = params.get("ModuleId")
        self._NodeType = params.get("NodeType")
        self._CanvasData = params.get("CanvasData")
        self._JobData = params.get("JobData")
        self._FlowRunNodeId = params.get("FlowRunNodeId")
        self._Status = params.get("Status")
        self._Message = params.get("Message")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._JobId = params.get("JobId")
        self._RuntimeInSeconds = params.get("RuntimeInSeconds")
        self._ChargeStatus = params.get("ChargeStatus")
        self._BillingInfo = params.get("BillingInfo")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FlowSummaryDetail(AbstractModel):
    """工作流详情

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流Id
        :type FlowId: str
        :param _ProjectId: 工程ID
        :type ProjectId: str
        :param _FlowName: 工作流名称
        :type FlowName: str
        :param _Uin: 创建工作流的uin
        :type Uin: str
        :param _SubUin: 创建工作流的subuin
        :type SubUin: str
        :param _Description: 工作部描述
        :type Description: str
        :param _CanvasData: 画布信息
        :type CanvasData: str
        :param _EnableCron: 是否开启定时任务
        :type EnableCron: bool
        :param _CronSchedule: 定时运行配置
        :type CronSchedule: str
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        :param _LastRunTime: 最后运行的时间
        :type LastRunTime: str
        :param _Status: 工作流状态。值如下：
   NotRun: 新保存未运行
   Starting:启动中
   Running： 运行中
   Stopping： 停止中
   Stopped： 已停止
   Failed：失败
   Succeeded：成功
        :type Status: str
        :param _EnableWhiteListWait: 是否开启白名单等待
        :type EnableWhiteListWait: bool
        :param _WhiteListWaitHours: 白名单等待时间
        :type WhiteListWaitHours: int
        :param _Message: 工作流信息
        :type Message: str
        """
        self._FlowId = None
        self._ProjectId = None
        self._FlowName = None
        self._Uin = None
        self._SubUin = None
        self._Description = None
        self._CanvasData = None
        self._EnableCron = None
        self._CronSchedule = None
        self._CreateTime = None
        self._UpdateTime = None
        self._LastRunTime = None
        self._Status = None
        self._EnableWhiteListWait = None
        self._WhiteListWaitHours = None
        self._Message = None

    @property
    def FlowId(self):
        """工作流Id
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def ProjectId(self):
        """工程ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def FlowName(self):
        """工作流名称
        :rtype: str
        """
        return self._FlowName

    @FlowName.setter
    def FlowName(self, FlowName):
        self._FlowName = FlowName

    @property
    def Uin(self):
        """创建工作流的uin
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def SubUin(self):
        """创建工作流的subuin
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def Description(self):
        """工作部描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def CanvasData(self):
        """画布信息
        :rtype: str
        """
        return self._CanvasData

    @CanvasData.setter
    def CanvasData(self, CanvasData):
        self._CanvasData = CanvasData

    @property
    def EnableCron(self):
        """是否开启定时任务
        :rtype: bool
        """
        return self._EnableCron

    @EnableCron.setter
    def EnableCron(self, EnableCron):
        self._EnableCron = EnableCron

    @property
    def CronSchedule(self):
        """定时运行配置
        :rtype: str
        """
        return self._CronSchedule

    @CronSchedule.setter
    def CronSchedule(self, CronSchedule):
        self._CronSchedule = CronSchedule

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def LastRunTime(self):
        """最后运行的时间
        :rtype: str
        """
        return self._LastRunTime

    @LastRunTime.setter
    def LastRunTime(self, LastRunTime):
        self._LastRunTime = LastRunTime

    @property
    def Status(self):
        """工作流状态。值如下：
   NotRun: 新保存未运行
   Starting:启动中
   Running： 运行中
   Stopping： 停止中
   Stopped： 已停止
   Failed：失败
   Succeeded：成功
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def EnableWhiteListWait(self):
        """是否开启白名单等待
        :rtype: bool
        """
        return self._EnableWhiteListWait

    @EnableWhiteListWait.setter
    def EnableWhiteListWait(self, EnableWhiteListWait):
        self._EnableWhiteListWait = EnableWhiteListWait

    @property
    def WhiteListWaitHours(self):
        """白名单等待时间
        :rtype: int
        """
        return self._WhiteListWaitHours

    @WhiteListWaitHours.setter
    def WhiteListWaitHours(self, WhiteListWaitHours):
        self._WhiteListWaitHours = WhiteListWaitHours

    @property
    def Message(self):
        """工作流信息
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._ProjectId = params.get("ProjectId")
        self._FlowName = params.get("FlowName")
        self._Uin = params.get("Uin")
        self._SubUin = params.get("SubUin")
        self._Description = params.get("Description")
        self._CanvasData = params.get("CanvasData")
        self._EnableCron = params.get("EnableCron")
        self._CronSchedule = params.get("CronSchedule")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._LastRunTime = params.get("LastRunTime")
        self._Status = params.get("Status")
        self._EnableWhiteListWait = params.get("EnableWhiteListWait")
        self._WhiteListWaitHours = params.get("WhiteListWaitHours")
        self._Message = params.get("Message")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FrameworkInfo(AbstractModel):
    """框架信息列表

    """

    def __init__(self):
        r"""
        :param _Name: 框架名称
        :type Name: str
        :param _VersionInfos: 框架版本以及对应的训练模式
        :type VersionInfos: list of FrameworkVersion
        """
        self._Name = None
        self._VersionInfos = None

    @property
    def Name(self):
        """框架名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def VersionInfos(self):
        """框架版本以及对应的训练模式
        :rtype: list of FrameworkVersion
        """
        return self._VersionInfos

    @VersionInfos.setter
    def VersionInfos(self, VersionInfos):
        self._VersionInfos = VersionInfos


    def _deserialize(self, params):
        self._Name = params.get("Name")
        if params.get("VersionInfos") is not None:
            self._VersionInfos = []
            for item in params.get("VersionInfos"):
                obj = FrameworkVersion()
                obj._deserialize(item)
                self._VersionInfos.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class FrameworkVersion(AbstractModel):
    """框架版本以及对应的训练模式

    """

    def __init__(self):
        r"""
        :param _Version: 框架版本
        :type Version: str
        :param _TrainingModes: 训练模式
        :type TrainingModes: list of str
        :param _Environment: 框架运行环境
        :type Environment: str
        """
        self._Version = None
        self._TrainingModes = None
        self._Environment = None

    @property
    def Version(self):
        """框架版本
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def TrainingModes(self):
        """训练模式
        :rtype: list of str
        """
        return self._TrainingModes

    @TrainingModes.setter
    def TrainingModes(self, TrainingModes):
        self._TrainingModes = TrainingModes

    @property
    def Environment(self):
        """框架运行环境
        :rtype: str
        """
        return self._Environment

    @Environment.setter
    def Environment(self, Environment):
        self._Environment = Environment


    def _deserialize(self, params):
        self._Version = params.get("Version")
        self._TrainingModes = params.get("TrainingModes")
        self._Environment = params.get("Environment")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetComparedPredictionsRequest(AbstractModel):
    """GetComparedPredictions请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Offset: 偏移量，默认0
        :type Offset: int
        :param _Limit: 结果限制数量，默认10
        :type Limit: int
        :param _OrderField: 结果排序业务字段
        :type OrderField: str
        :param _Order: 结果排序规则
        :type Order: str
        :param _AutoMLEvaluateTaskIds: 自动学习评测任务id
        :type AutoMLEvaluateTaskIds: list of str
        :param _Type: single or multi
        :type Type: str
        :param _QueryType: ALL, BAD_CASE, GOOD_CASE
        :type QueryType: str
        :param _TagFilters: tag过滤
        :type TagFilters: list of ComparisonTagFilter
        :param _TagSorters: tag排序
        :type TagSorters: list of TagSorter
        :param _ResultFilters: 结果过滤
        :type ResultFilters: list of ResultFilter
        :param _SortOn: 排序、筛选所基于任务的SID
        :type SortOn: str
        """
        self._Offset = None
        self._Limit = None
        self._OrderField = None
        self._Order = None
        self._AutoMLEvaluateTaskIds = None
        self._Type = None
        self._QueryType = None
        self._TagFilters = None
        self._TagSorters = None
        self._ResultFilters = None
        self._SortOn = None

    @property
    def Offset(self):
        """偏移量，默认0
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """结果限制数量，默认10
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit

    @property
    def OrderField(self):
        """结果排序业务字段
        :rtype: str
        """
        return self._OrderField

    @OrderField.setter
    def OrderField(self, OrderField):
        self._OrderField = OrderField

    @property
    def Order(self):
        """结果排序规则
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order

    @property
    def AutoMLEvaluateTaskIds(self):
        """自动学习评测任务id
        :rtype: list of str
        """
        return self._AutoMLEvaluateTaskIds

    @AutoMLEvaluateTaskIds.setter
    def AutoMLEvaluateTaskIds(self, AutoMLEvaluateTaskIds):
        self._AutoMLEvaluateTaskIds = AutoMLEvaluateTaskIds

    @property
    def Type(self):
        """single or multi
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def QueryType(self):
        """ALL, BAD_CASE, GOOD_CASE
        :rtype: str
        """
        return self._QueryType

    @QueryType.setter
    def QueryType(self, QueryType):
        self._QueryType = QueryType

    @property
    def TagFilters(self):
        """tag过滤
        :rtype: list of ComparisonTagFilter
        """
        return self._TagFilters

    @TagFilters.setter
    def TagFilters(self, TagFilters):
        self._TagFilters = TagFilters

    @property
    def TagSorters(self):
        """tag排序
        :rtype: list of TagSorter
        """
        return self._TagSorters

    @TagSorters.setter
    def TagSorters(self, TagSorters):
        self._TagSorters = TagSorters

    @property
    def ResultFilters(self):
        """结果过滤
        :rtype: list of ResultFilter
        """
        return self._ResultFilters

    @ResultFilters.setter
    def ResultFilters(self, ResultFilters):
        self._ResultFilters = ResultFilters

    @property
    def SortOn(self):
        """排序、筛选所基于任务的SID
        :rtype: str
        """
        return self._SortOn

    @SortOn.setter
    def SortOn(self, SortOn):
        self._SortOn = SortOn


    def _deserialize(self, params):
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        self._OrderField = params.get("OrderField")
        self._Order = params.get("Order")
        self._AutoMLEvaluateTaskIds = params.get("AutoMLEvaluateTaskIds")
        self._Type = params.get("Type")
        self._QueryType = params.get("QueryType")
        if params.get("TagFilters") is not None:
            self._TagFilters = []
            for item in params.get("TagFilters"):
                obj = ComparisonTagFilter()
                obj._deserialize(item)
                self._TagFilters.append(obj)
        if params.get("TagSorters") is not None:
            self._TagSorters = []
            for item in params.get("TagSorters"):
                obj = TagSorter()
                obj._deserialize(item)
                self._TagSorters.append(obj)
        if params.get("ResultFilters") is not None:
            self._ResultFilters = []
            for item in params.get("ResultFilters"):
                obj = ResultFilter()
                obj._deserialize(item)
                self._ResultFilters.append(obj)
        self._SortOn = params.get("SortOn")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetComparedPredictionsResponse(AbstractModel):
    """GetComparedPredictions返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLEvaluateTaskIds: 本次请求的所有的自动学习评测任务id
        :type AutoMLEvaluateTaskIds: list of str
        :param _ComparedPredictions: 预测结果
        :type ComparedPredictions: list of ComparedPrediction
        :param _TotalCount: 预测结果总量
        :type TotalCount: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLEvaluateTaskIds = None
        self._ComparedPredictions = None
        self._TotalCount = None
        self._RequestId = None

    @property
    def AutoMLEvaluateTaskIds(self):
        """本次请求的所有的自动学习评测任务id
        :rtype: list of str
        """
        return self._AutoMLEvaluateTaskIds

    @AutoMLEvaluateTaskIds.setter
    def AutoMLEvaluateTaskIds(self, AutoMLEvaluateTaskIds):
        self._AutoMLEvaluateTaskIds = AutoMLEvaluateTaskIds

    @property
    def ComparedPredictions(self):
        """预测结果
        :rtype: list of ComparedPrediction
        """
        return self._ComparedPredictions

    @ComparedPredictions.setter
    def ComparedPredictions(self, ComparedPredictions):
        self._ComparedPredictions = ComparedPredictions

    @property
    def TotalCount(self):
        """预测结果总量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLEvaluateTaskIds = params.get("AutoMLEvaluateTaskIds")
        if params.get("ComparedPredictions") is not None:
            self._ComparedPredictions = []
            for item in params.get("ComparedPredictions"):
                obj = ComparedPrediction()
                obj._deserialize(item)
                self._ComparedPredictions.append(obj)
        self._TotalCount = params.get("TotalCount")
        self._RequestId = params.get("RequestId")


class GetEvaluationSummariesRequest(AbstractModel):
    """GetEvaluationSummaries请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TrainTaskId: 训练任务id
        :type TrainTaskId: str
        """
        self._TrainTaskId = None

    @property
    def TrainTaskId(self):
        """训练任务id
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId


    def _deserialize(self, params):
        self._TrainTaskId = params.get("TrainTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetEvaluationSummariesResponse(AbstractModel):
    """GetEvaluationSummaries返回参数结构体

    """

    def __init__(self):
        r"""
        :param _EvaluationSummaries: 评测结果
        :type EvaluationSummaries: list of EvaluationSummary
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._EvaluationSummaries = None
        self._RequestId = None

    @property
    def EvaluationSummaries(self):
        """评测结果
        :rtype: list of EvaluationSummary
        """
        return self._EvaluationSummaries

    @EvaluationSummaries.setter
    def EvaluationSummaries(self, EvaluationSummaries):
        self._EvaluationSummaries = EvaluationSummaries

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EvaluationSummaries") is not None:
            self._EvaluationSummaries = []
            for item in params.get("EvaluationSummaries"):
                obj = EvaluationSummary()
                obj._deserialize(item)
                self._EvaluationSummaries.append(obj)
        self._RequestId = params.get("RequestId")


class GetMonitorDataRequest(AbstractModel):
    """GetMonitorData请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Namespace: 命名空间，如QCE/CVM
        :type Namespace: str
        :param _MetricName: 指标名称，如CPUUsage，仅支持单指标拉取
        :type MetricName: str
        :param _Instances: 实例对象的维度组合，格式为key-value键值对形式的集合
        :type Instances: list of InstanceMonitor
        :param _Period: 监控统计周期，如60。默认为取值为300，单位为s。
        :type Period: int
        :param _StartTime: 起始时间，如2018-09-22T19:51:23+08:00
        :type StartTime: str
        :param _EndTime: 结束时间，如2018-09-22T20:51:23+08:00，默认为当前时间。 EndTime不能小于StartTime
        :type EndTime: str
        :param _SpecifyStatistics: 返回多种统计方式数据。avg, max, min (1,2,4)可以自由组合
        :type SpecifyStatistics: int
        """
        self._Namespace = None
        self._MetricName = None
        self._Instances = None
        self._Period = None
        self._StartTime = None
        self._EndTime = None
        self._SpecifyStatistics = None

    @property
    def Namespace(self):
        """命名空间，如QCE/CVM
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def MetricName(self):
        """指标名称，如CPUUsage，仅支持单指标拉取
        :rtype: str
        """
        return self._MetricName

    @MetricName.setter
    def MetricName(self, MetricName):
        self._MetricName = MetricName

    @property
    def Instances(self):
        """实例对象的维度组合，格式为key-value键值对形式的集合
        :rtype: list of InstanceMonitor
        """
        return self._Instances

    @Instances.setter
    def Instances(self, Instances):
        self._Instances = Instances

    @property
    def Period(self):
        """监控统计周期，如60。默认为取值为300，单位为s。
        :rtype: int
        """
        return self._Period

    @Period.setter
    def Period(self, Period):
        self._Period = Period

    @property
    def StartTime(self):
        """起始时间，如2018-09-22T19:51:23+08:00
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """结束时间，如2018-09-22T20:51:23+08:00，默认为当前时间。 EndTime不能小于StartTime
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def SpecifyStatistics(self):
        """返回多种统计方式数据。avg, max, min (1,2,4)可以自由组合
        :rtype: int
        """
        return self._SpecifyStatistics

    @SpecifyStatistics.setter
    def SpecifyStatistics(self, SpecifyStatistics):
        self._SpecifyStatistics = SpecifyStatistics


    def _deserialize(self, params):
        self._Namespace = params.get("Namespace")
        self._MetricName = params.get("MetricName")
        if params.get("Instances") is not None:
            self._Instances = []
            for item in params.get("Instances"):
                obj = InstanceMonitor()
                obj._deserialize(item)
                self._Instances.append(obj)
        self._Period = params.get("Period")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._SpecifyStatistics = params.get("SpecifyStatistics")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetMonitorDataResponse(AbstractModel):
    """GetMonitorData返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Period: 统计周期
        :type Period: int
        :param _MetricName: 指标名
        :type MetricName: str
        :param _DataPoints: 数据点数组
        :type DataPoints: list of DataPointMonitor
        :param _StartTime: 开始时间
        :type StartTime: str
        :param _EndTime: 结束时间
        :type EndTime: str
        :param _Msg: 返回信息
        :type Msg: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Period = None
        self._MetricName = None
        self._DataPoints = None
        self._StartTime = None
        self._EndTime = None
        self._Msg = None
        self._RequestId = None

    @property
    def Period(self):
        """统计周期
        :rtype: int
        """
        return self._Period

    @Period.setter
    def Period(self, Period):
        self._Period = Period

    @property
    def MetricName(self):
        """指标名
        :rtype: str
        """
        return self._MetricName

    @MetricName.setter
    def MetricName(self, MetricName):
        self._MetricName = MetricName

    @property
    def DataPoints(self):
        """数据点数组
        :rtype: list of DataPointMonitor
        """
        return self._DataPoints

    @DataPoints.setter
    def DataPoints(self, DataPoints):
        self._DataPoints = DataPoints

    @property
    def StartTime(self):
        """开始时间
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """结束时间
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Msg(self):
        """返回信息
        :rtype: str
        """
        return self._Msg

    @Msg.setter
    def Msg(self, Msg):
        self._Msg = Msg

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Period = params.get("Period")
        self._MetricName = params.get("MetricName")
        if params.get("DataPoints") is not None:
            self._DataPoints = []
            for item in params.get("DataPoints"):
                obj = DataPointMonitor()
                obj._deserialize(item)
                self._DataPoints.append(obj)
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._Msg = params.get("Msg")
        self._RequestId = params.get("RequestId")


class GetObjectiveEvaluationOutputsRequest(AbstractModel):
    """GetObjectiveEvaluationOutputs请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetObjectiveEvaluationOutputsResponse(AbstractModel):
    """GetObjectiveEvaluationOutputs返回参数结构体

    """

    def __init__(self):
        r"""
        :param _EvaluationCosUrl: 下载链接
        :type EvaluationCosUrl: str
        :param _Name: 评测名称
        :type Name: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._EvaluationCosUrl = None
        self._Name = None
        self._RequestId = None

    @property
    def EvaluationCosUrl(self):
        """下载链接
        :rtype: str
        """
        return self._EvaluationCosUrl

    @EvaluationCosUrl.setter
    def EvaluationCosUrl(self, EvaluationCosUrl):
        self._EvaluationCosUrl = EvaluationCosUrl

    @property
    def Name(self):
        """评测名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._EvaluationCosUrl = params.get("EvaluationCosUrl")
        self._Name = params.get("Name")
        self._RequestId = params.get("RequestId")


class GetObjectiveEvaluationProgressRequest(AbstractModel):
    """GetObjectiveEvaluationProgress请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetObjectiveEvaluationProgressResponse(AbstractModel):
    """GetObjectiveEvaluationProgress返回参数结构体

    """

    def __init__(self):
        r"""
        :param _EvaluationProgress: 评测进度
        :type EvaluationProgress: list of EvaluationProgress
        :param _Progress: 评测进度
        :type Progress: float
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._EvaluationProgress = None
        self._Progress = None
        self._RequestId = None

    @property
    def EvaluationProgress(self):
        """评测进度
        :rtype: list of EvaluationProgress
        """
        return self._EvaluationProgress

    @EvaluationProgress.setter
    def EvaluationProgress(self, EvaluationProgress):
        self._EvaluationProgress = EvaluationProgress

    @property
    def Progress(self):
        """评测进度
        :rtype: float
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EvaluationProgress") is not None:
            self._EvaluationProgress = []
            for item in params.get("EvaluationProgress"):
                obj = EvaluationProgress()
                obj._deserialize(item)
                self._EvaluationProgress.append(obj)
        self._Progress = params.get("Progress")
        self._RequestId = params.get("RequestId")


class GetObjectiveEvaluationsRequest(AbstractModel):
    """GetObjectiveEvaluations请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤
        :type Filters: list of Filter
        :param _Offset: Offset
        :type Offset: int
        :param _Limit: Limit
        :type Limit: int
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None

    @property
    def Filters(self):
        """过滤
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Limit
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetObjectiveEvaluationsResponse(AbstractModel):
    """GetObjectiveEvaluations返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 总数
        :type TotalCount: int
        :param _Evaluations: 评测列表
        :type Evaluations: list of ObjectiveEvaluation
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._Evaluations = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """总数
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Evaluations(self):
        """评测列表
        :rtype: list of ObjectiveEvaluation
        """
        return self._Evaluations

    @Evaluations.setter
    def Evaluations(self, Evaluations):
        self._Evaluations = Evaluations

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Evaluations") is not None:
            self._Evaluations = []
            for item in params.get("Evaluations"):
                obj = ObjectiveEvaluation()
                obj._deserialize(item)
                self._Evaluations.append(obj)
        self._RequestId = params.get("RequestId")


class GetPublicKeyRequest(AbstractModel):
    """GetPublicKey请求参数结构体

    """

    def __init__(self):
        r"""
        :param _KeyId: 公钥ID
        :type KeyId: str
        """
        self._KeyId = None

    @property
    def KeyId(self):
        """公钥ID
        :rtype: str
        """
        return self._KeyId

    @KeyId.setter
    def KeyId(self, KeyId):
        self._KeyId = KeyId


    def _deserialize(self, params):
        self._KeyId = params.get("KeyId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetPublicKeyResponse(AbstractModel):
    """GetPublicKey返回参数结构体

    """

    def __init__(self):
        r"""
        :param _KeyId: 密钥公钥ID。
        :type KeyId: str
        :param _PublicKey: 经过base64编码的公钥内容。
        :type PublicKey: str
        :param _PublicKeyPem: PEM格式的公钥内容。
        :type PublicKeyPem: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._KeyId = None
        self._PublicKey = None
        self._PublicKeyPem = None
        self._RequestId = None

    @property
    def KeyId(self):
        """密钥公钥ID。
        :rtype: str
        """
        return self._KeyId

    @KeyId.setter
    def KeyId(self, KeyId):
        self._KeyId = KeyId

    @property
    def PublicKey(self):
        """经过base64编码的公钥内容。
        :rtype: str
        """
        return self._PublicKey

    @PublicKey.setter
    def PublicKey(self, PublicKey):
        self._PublicKey = PublicKey

    @property
    def PublicKeyPem(self):
        """PEM格式的公钥内容。
        :rtype: str
        """
        return self._PublicKeyPem

    @PublicKeyPem.setter
    def PublicKeyPem(self, PublicKeyPem):
        self._PublicKeyPem = PublicKeyPem

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._KeyId = params.get("KeyId")
        self._PublicKey = params.get("PublicKey")
        self._PublicKeyPem = params.get("PublicKeyPem")
        self._RequestId = params.get("RequestId")


class GetSubjectiveEvaluationOutputsRequest(AbstractModel):
    """GetSubjectiveEvaluationOutputs请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetSubjectiveEvaluationOutputsResponse(AbstractModel):
    """GetSubjectiveEvaluationOutputs返回参数结构体

    """

    def __init__(self):
        r"""
        :param _EvaluationCosUrl: 下载链接
        :type EvaluationCosUrl: str
        :param _Name: 评测名称
        :type Name: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._EvaluationCosUrl = None
        self._Name = None
        self._RequestId = None

    @property
    def EvaluationCosUrl(self):
        """下载链接
        :rtype: str
        """
        return self._EvaluationCosUrl

    @EvaluationCosUrl.setter
    def EvaluationCosUrl(self, EvaluationCosUrl):
        self._EvaluationCosUrl = EvaluationCosUrl

    @property
    def Name(self):
        """评测名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._EvaluationCosUrl = params.get("EvaluationCosUrl")
        self._Name = params.get("Name")
        self._RequestId = params.get("RequestId")


class GetSubjectiveEvaluationProgressRequest(AbstractModel):
    """GetSubjectiveEvaluationProgress请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetSubjectiveEvaluationProgressResponse(AbstractModel):
    """GetSubjectiveEvaluationProgress返回参数结构体

    """

    def __init__(self):
        r"""
        :param _EvaluationProgress: 评测进度
        :type EvaluationProgress: list of EvaluationProgress
        :param _Progress: 评测进度
        :type Progress: float
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._EvaluationProgress = None
        self._Progress = None
        self._RequestId = None

    @property
    def EvaluationProgress(self):
        """评测进度
        :rtype: list of EvaluationProgress
        """
        return self._EvaluationProgress

    @EvaluationProgress.setter
    def EvaluationProgress(self, EvaluationProgress):
        self._EvaluationProgress = EvaluationProgress

    @property
    def Progress(self):
        """评测进度
        :rtype: float
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("EvaluationProgress") is not None:
            self._EvaluationProgress = []
            for item in params.get("EvaluationProgress"):
                obj = EvaluationProgress()
                obj._deserialize(item)
                self._EvaluationProgress.append(obj)
        self._Progress = params.get("Progress")
        self._RequestId = params.get("RequestId")


class GetSubjectiveEvaluationsRequest(AbstractModel):
    """GetSubjectiveEvaluations请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Filters: 过滤
        :type Filters: list of Filter
        :param _Offset: Offset
        :type Offset: int
        :param _Limit: Limit
        :type Limit: int
        """
        self._Filters = None
        self._Offset = None
        self._Limit = None

    @property
    def Filters(self):
        """过滤
        :rtype: list of Filter
        """
        return self._Filters

    @Filters.setter
    def Filters(self, Filters):
        self._Filters = Filters

    @property
    def Offset(self):
        """Offset
        :rtype: int
        """
        return self._Offset

    @Offset.setter
    def Offset(self, Offset):
        self._Offset = Offset

    @property
    def Limit(self):
        """Limit
        :rtype: int
        """
        return self._Limit

    @Limit.setter
    def Limit(self, Limit):
        self._Limit = Limit


    def _deserialize(self, params):
        if params.get("Filters") is not None:
            self._Filters = []
            for item in params.get("Filters"):
                obj = Filter()
                obj._deserialize(item)
                self._Filters.append(obj)
        self._Offset = params.get("Offset")
        self._Limit = params.get("Limit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GetSubjectiveEvaluationsResponse(AbstractModel):
    """GetSubjectiveEvaluations返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TotalCount: 总数
        :type TotalCount: int
        :param _Evaluations: 评测列表
        :type Evaluations: list of SubjectiveEvaluation
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TotalCount = None
        self._Evaluations = None
        self._RequestId = None

    @property
    def TotalCount(self):
        """总数
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Evaluations(self):
        """评测列表
        :rtype: list of SubjectiveEvaluation
        """
        return self._Evaluations

    @Evaluations.setter
    def Evaluations(self, Evaluations):
        self._Evaluations = Evaluations

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TotalCount = params.get("TotalCount")
        if params.get("Evaluations") is not None:
            self._Evaluations = []
            for item in params.get("Evaluations"):
                obj = SubjectiveEvaluation()
                obj._deserialize(item)
                self._Evaluations.append(obj)
        self._RequestId = params.get("RequestId")


class GitConfig(AbstractModel):
    """存储库Git相关配置

    """

    def __init__(self):
        r"""
        :param _RepositoryUrl: git地址
        :type RepositoryUrl: str
        :param _Branch: 代码分支
注意：此字段可能返回 null，表示取不到有效值。
        :type Branch: str
        """
        self._RepositoryUrl = None
        self._Branch = None

    @property
    def RepositoryUrl(self):
        """git地址
        :rtype: str
        """
        return self._RepositoryUrl

    @RepositoryUrl.setter
    def RepositoryUrl(self, RepositoryUrl):
        self._RepositoryUrl = RepositoryUrl

    @property
    def Branch(self):
        """代码分支
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Branch

    @Branch.setter
    def Branch(self, Branch):
        self._Branch = Branch


    def _deserialize(self, params):
        self._RepositoryUrl = params.get("RepositoryUrl")
        self._Branch = params.get("Branch")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GitSecret(AbstractModel):
    """Git凭证

    """

    def __init__(self):
        r"""
        :param _NoSecret: 无密钥，默认选项
        :type NoSecret: bool
        :param _Secret: 【deprecated】Git用户名密码base64编码后的字符串
编码前的内容应为Json字符串，如
{"UserName": "用户名", "Password":"密码"}
        :type Secret: str
        :param _KeyId: 加密公钥ID
        :type KeyId: str
        :param _Username: 用户名
        :type Username: str
        :param _Password: 用使用PublicKey加密的密文
        :type Password: str
        """
        self._NoSecret = None
        self._Secret = None
        self._KeyId = None
        self._Username = None
        self._Password = None

    @property
    def NoSecret(self):
        """无密钥，默认选项
        :rtype: bool
        """
        return self._NoSecret

    @NoSecret.setter
    def NoSecret(self, NoSecret):
        self._NoSecret = NoSecret

    @property
    def Secret(self):
        """【deprecated】Git用户名密码base64编码后的字符串
编码前的内容应为Json字符串，如
{"UserName": "用户名", "Password":"密码"}
        :rtype: str
        """
        return self._Secret

    @Secret.setter
    def Secret(self, Secret):
        self._Secret = Secret

    @property
    def KeyId(self):
        """加密公钥ID
        :rtype: str
        """
        return self._KeyId

    @KeyId.setter
    def KeyId(self, KeyId):
        self._KeyId = KeyId

    @property
    def Username(self):
        """用户名
        :rtype: str
        """
        return self._Username

    @Username.setter
    def Username(self, Username):
        self._Username = Username

    @property
    def Password(self):
        """用使用PublicKey加密的密文
        :rtype: str
        """
        return self._Password

    @Password.setter
    def Password(self, Password):
        self._Password = Password


    def _deserialize(self, params):
        self._NoSecret = params.get("NoSecret")
        self._Secret = params.get("Secret")
        self._KeyId = params.get("KeyId")
        self._Username = params.get("Username")
        self._Password = params.get("Password")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GooseFS(AbstractModel):
    """配置GooseFS参数

    """

    def __init__(self):
        r"""
        :param _Id: goosefs实例id
注意：此字段可能返回 null，表示取不到有效值。
        :type Id: str
        :param _Type: GooseFS类型，包括GooseFS和GooseFSx
注意：此字段可能返回 null，表示取不到有效值。
        :type Type: str
        :param _Path: GooseFSx实例需要挂载的路径
注意：此字段可能返回 null，表示取不到有效值。
        :type Path: str
        :param _NameSpace: GooseFS命名空间
注意：此字段可能返回 null，表示取不到有效值。
        :type NameSpace: str
        """
        self._Id = None
        self._Type = None
        self._Path = None
        self._NameSpace = None

    @property
    def Id(self):
        """goosefs实例id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Type(self):
        """GooseFS类型，包括GooseFS和GooseFSx
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Path(self):
        """GooseFSx实例需要挂载的路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def NameSpace(self):
        """GooseFS命名空间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._NameSpace

    @NameSpace.setter
    def NameSpace(self, NameSpace):
        self._NameSpace = NameSpace


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Type = params.get("Type")
        self._Path = params.get("Path")
        self._NameSpace = params.get("NameSpace")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GooseFSx(AbstractModel):
    """GosseFSx的配置

    """

    def __init__(self):
        r"""
        :param _Id: goosefsx实例id
        :type Id: str
        :param _Path: GooseFSx实例需要挂载的路径
        :type Path: str
        """
        self._Id = None
        self._Path = None

    @property
    def Id(self):
        """goosefsx实例id
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Path(self):
        """GooseFSx实例需要挂载的路径
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Path = params.get("Path")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GpuDetail(AbstractModel):
    """gpu 详情

    """

    def __init__(self):
        r"""
        :param _Name: GPU 显卡类型；枚举值: V100 A100 T4
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _Value: GPU 显卡数；单位为1/100卡，比如100代表1卡
注意：此字段可能返回 null，表示取不到有效值。
        :type Value: int
        """
        self._Name = None
        self._Value = None

    @property
    def Name(self):
        """GPU 显卡类型；枚举值: V100 A100 T4
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Value(self):
        """GPU 显卡数；单位为1/100卡，比如100代表1卡
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GpuInfo(AbstractModel):
    """GPU 信息

    """

    def __init__(self):
        r"""
        :param _GpuName: {PodName}-{GpuIdx}
        :type GpuName: str
        """
        self._GpuName = None

    @property
    def GpuName(self):
        """{PodName}-{GpuIdx}
        :rtype: str
        """
        return self._GpuName

    @GpuName.setter
    def GpuName(self, GpuName):
        self._GpuName = GpuName


    def _deserialize(self, params):
        self._GpuName = params.get("GpuName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GpuResourcePackage(AbstractModel):
    """在设置了GPU配比后，每单位GPU的算力资源配比

    """

    def __init__(self):
        r"""
        :param _Gpu: GPU量，默认为100单位（即一张GPU卡）
        :type Gpu: int
        :param _Cpu: 每单位GPU下配比CPU的数量，单位为1/1000核
        :type Cpu: int
        :param _Memory: 每单位GPU下配比内存的数量，单位为MB
        :type Memory: int
        """
        self._Gpu = None
        self._Cpu = None
        self._Memory = None

    @property
    def Gpu(self):
        """GPU量，默认为100单位（即一张GPU卡）
        :rtype: int
        """
        return self._Gpu

    @Gpu.setter
    def Gpu(self, Gpu):
        self._Gpu = Gpu

    @property
    def Cpu(self):
        """每单位GPU下配比CPU的数量，单位为1/1000核
        :rtype: int
        """
        return self._Cpu

    @Cpu.setter
    def Cpu(self, Cpu):
        self._Cpu = Cpu

    @property
    def Memory(self):
        """每单位GPU下配比内存的数量，单位为MB
        :rtype: int
        """
        return self._Memory

    @Memory.setter
    def Memory(self, Memory):
        self._Memory = Memory


    def _deserialize(self, params):
        self._Gpu = params.get("Gpu")
        self._Cpu = params.get("Cpu")
        self._Memory = params.get("Memory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GpuTypeResource(AbstractModel):
    """资源组中按GPU卡型号聚合的算力可用信息

    """

    def __init__(self):
        r"""
        :param _GpuType: GPU卡型号
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuType: str
        :param _OctonaryFullIdleCard: 八卡机型整机空闲总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :type OctonaryFullIdleCard: int
        :param _OctonaryPartIdleCard: 八卡机型非整机空闲总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :type OctonaryPartIdleCard: int
        :param _QuaternaryFullIdleCard: 四卡机型整机空闲总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :type QuaternaryFullIdleCard: int
        :param _QuaternaryPartIdleCard: 四卡机型非整机总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :type QuaternaryPartIdleCard: int
        :param _BinaryFullIdleCard: 两卡机型整机空闲总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :type BinaryFullIdleCard: int
        :param _BinaryPartIdleCard: 两卡机型非整机空闲总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :type BinaryPartIdleCard: int
        :param _SingleFullIdleCard: 单卡机型整机空闲总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :type SingleFullIdleCard: int
        :param _SinglePartIdleCard: 单卡机型非整机空闲总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :type SinglePartIdleCard: int
        :param _ResourcePackage: 开启了GPU配比后，每单位GPU的算力资源配比
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourcePackage: :class:`tencentcloud.tione.v20211111.models.GpuResourcePackage`
        """
        self._GpuType = None
        self._OctonaryFullIdleCard = None
        self._OctonaryPartIdleCard = None
        self._QuaternaryFullIdleCard = None
        self._QuaternaryPartIdleCard = None
        self._BinaryFullIdleCard = None
        self._BinaryPartIdleCard = None
        self._SingleFullIdleCard = None
        self._SinglePartIdleCard = None
        self._ResourcePackage = None

    @property
    def GpuType(self):
        """GPU卡型号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType

    @property
    def OctonaryFullIdleCard(self):
        """八卡机型整机空闲总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._OctonaryFullIdleCard

    @OctonaryFullIdleCard.setter
    def OctonaryFullIdleCard(self, OctonaryFullIdleCard):
        self._OctonaryFullIdleCard = OctonaryFullIdleCard

    @property
    def OctonaryPartIdleCard(self):
        """八卡机型非整机空闲总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._OctonaryPartIdleCard

    @OctonaryPartIdleCard.setter
    def OctonaryPartIdleCard(self, OctonaryPartIdleCard):
        self._OctonaryPartIdleCard = OctonaryPartIdleCard

    @property
    def QuaternaryFullIdleCard(self):
        """四卡机型整机空闲总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._QuaternaryFullIdleCard

    @QuaternaryFullIdleCard.setter
    def QuaternaryFullIdleCard(self, QuaternaryFullIdleCard):
        self._QuaternaryFullIdleCard = QuaternaryFullIdleCard

    @property
    def QuaternaryPartIdleCard(self):
        """四卡机型非整机总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._QuaternaryPartIdleCard

    @QuaternaryPartIdleCard.setter
    def QuaternaryPartIdleCard(self, QuaternaryPartIdleCard):
        self._QuaternaryPartIdleCard = QuaternaryPartIdleCard

    @property
    def BinaryFullIdleCard(self):
        """两卡机型整机空闲总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._BinaryFullIdleCard

    @BinaryFullIdleCard.setter
    def BinaryFullIdleCard(self, BinaryFullIdleCard):
        self._BinaryFullIdleCard = BinaryFullIdleCard

    @property
    def BinaryPartIdleCard(self):
        """两卡机型非整机空闲总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._BinaryPartIdleCard

    @BinaryPartIdleCard.setter
    def BinaryPartIdleCard(self, BinaryPartIdleCard):
        self._BinaryPartIdleCard = BinaryPartIdleCard

    @property
    def SingleFullIdleCard(self):
        """单卡机型整机空闲总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._SingleFullIdleCard

    @SingleFullIdleCard.setter
    def SingleFullIdleCard(self, SingleFullIdleCard):
        self._SingleFullIdleCard = SingleFullIdleCard

    @property
    def SinglePartIdleCard(self):
        """单卡机型非整机空闲总卡数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._SinglePartIdleCard

    @SinglePartIdleCard.setter
    def SinglePartIdleCard(self, SinglePartIdleCard):
        self._SinglePartIdleCard = SinglePartIdleCard

    @property
    def ResourcePackage(self):
        """开启了GPU配比后，每单位GPU的算力资源配比
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.GpuResourcePackage`
        """
        return self._ResourcePackage

    @ResourcePackage.setter
    def ResourcePackage(self, ResourcePackage):
        self._ResourcePackage = ResourcePackage


    def _deserialize(self, params):
        self._GpuType = params.get("GpuType")
        self._OctonaryFullIdleCard = params.get("OctonaryFullIdleCard")
        self._OctonaryPartIdleCard = params.get("OctonaryPartIdleCard")
        self._QuaternaryFullIdleCard = params.get("QuaternaryFullIdleCard")
        self._QuaternaryPartIdleCard = params.get("QuaternaryPartIdleCard")
        self._BinaryFullIdleCard = params.get("BinaryFullIdleCard")
        self._BinaryPartIdleCard = params.get("BinaryPartIdleCard")
        self._SingleFullIdleCard = params.get("SingleFullIdleCard")
        self._SinglePartIdleCard = params.get("SinglePartIdleCard")
        if params.get("ResourcePackage") is not None:
            self._ResourcePackage = GpuResourcePackage()
            self._ResourcePackage._deserialize(params.get("ResourcePackage"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class GroupResource(AbstractModel):
    """资源信息

    """

    def __init__(self):
        r"""
        :param _Cpu: CPU核数; 单位为1/1000核，比如100表示0.1核
        :type Cpu: int
        :param _Memory: 内存；单位为MB
        :type Memory: int
        :param _Gpu: 总卡数；GPUDetail 显卡数之和；单位为1/100卡，比如100代表1卡
注意：此字段可能返回 null，表示取不到有效值。
        :type Gpu: int
        :param _GpuDetailSet: Gpu详情
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuDetailSet: list of GpuDetail
        :param _GpuMemory: 显存；单位为1/100GB，比如100代表1GB
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuMemory: int
        """
        self._Cpu = None
        self._Memory = None
        self._Gpu = None
        self._GpuDetailSet = None
        self._GpuMemory = None

    @property
    def Cpu(self):
        """CPU核数; 单位为1/1000核，比如100表示0.1核
        :rtype: int
        """
        return self._Cpu

    @Cpu.setter
    def Cpu(self, Cpu):
        self._Cpu = Cpu

    @property
    def Memory(self):
        """内存；单位为MB
        :rtype: int
        """
        return self._Memory

    @Memory.setter
    def Memory(self, Memory):
        self._Memory = Memory

    @property
    def Gpu(self):
        """总卡数；GPUDetail 显卡数之和；单位为1/100卡，比如100代表1卡
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Gpu

    @Gpu.setter
    def Gpu(self, Gpu):
        self._Gpu = Gpu

    @property
    def GpuDetailSet(self):
        """Gpu详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of GpuDetail
        """
        return self._GpuDetailSet

    @GpuDetailSet.setter
    def GpuDetailSet(self, GpuDetailSet):
        self._GpuDetailSet = GpuDetailSet

    @property
    def GpuMemory(self):
        """显存；单位为1/100GB，比如100代表1GB
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._GpuMemory

    @GpuMemory.setter
    def GpuMemory(self, GpuMemory):
        self._GpuMemory = GpuMemory


    def _deserialize(self, params):
        self._Cpu = params.get("Cpu")
        self._Memory = params.get("Memory")
        self._Gpu = params.get("Gpu")
        if params.get("GpuDetailSet") is not None:
            self._GpuDetailSet = []
            for item in params.get("GpuDetailSet"):
                obj = GpuDetail()
                obj._deserialize(item)
                self._GpuDetailSet.append(obj)
        self._GpuMemory = params.get("GpuMemory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class HDFSConfig(AbstractModel):
    """HDFS的参数配置

    """

    def __init__(self):
        r"""
        :param _Id: 集群实例ID,实例ID形如: emr-xxxxxxxx
        :type Id: str
        :param _Path: 路径
        :type Path: str
        """
        self._Id = None
        self._Path = None

    @property
    def Id(self):
        """集群实例ID,实例ID形如: emr-xxxxxxxx
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Path(self):
        """路径
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Path = params.get("Path")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class HorizontalPodAutoscaler(AbstractModel):
    """hpa的描述

    """

    def __init__(self):
        r"""
        :param _MinReplicas: 最小实例数
注意：此字段可能返回 null，表示取不到有效值。
        :type MinReplicas: int
        :param _MaxReplicas: 最大实例数
注意：此字段可能返回 null，表示取不到有效值。
        :type MaxReplicas: int
        :param _HpaMetrics: 支持：
"gpu-util": GPU利用率。范围{10, 100}      "cpu-util": CPU利用率。范围{10, 100}	      "memory-util": 内存利用率。范围{10, 100}      "service-qps": 单个实例QPS值。范围{1, 5000}
"concurrency-util":单个实例请求数量值。范围{1,100000}
注意：此字段可能返回 null，表示取不到有效值。
        :type HpaMetrics: list of Option
        """
        self._MinReplicas = None
        self._MaxReplicas = None
        self._HpaMetrics = None

    @property
    def MinReplicas(self):
        """最小实例数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._MinReplicas

    @MinReplicas.setter
    def MinReplicas(self, MinReplicas):
        self._MinReplicas = MinReplicas

    @property
    def MaxReplicas(self):
        """最大实例数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._MaxReplicas

    @MaxReplicas.setter
    def MaxReplicas(self, MaxReplicas):
        self._MaxReplicas = MaxReplicas

    @property
    def HpaMetrics(self):
        """支持：
"gpu-util": GPU利用率。范围{10, 100}      "cpu-util": CPU利用率。范围{10, 100}	      "memory-util": 内存利用率。范围{10, 100}      "service-qps": 单个实例QPS值。范围{1, 5000}
"concurrency-util":单个实例请求数量值。范围{1,100000}
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Option
        """
        return self._HpaMetrics

    @HpaMetrics.setter
    def HpaMetrics(self, HpaMetrics):
        self._HpaMetrics = HpaMetrics


    def _deserialize(self, params):
        self._MinReplicas = params.get("MinReplicas")
        self._MaxReplicas = params.get("MaxReplicas")
        if params.get("HpaMetrics") is not None:
            self._HpaMetrics = []
            for item in params.get("HpaMetrics"):
                obj = Option()
                obj._deserialize(item)
                self._HpaMetrics.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class HostPathSource(AbstractModel):
    """主机路径存储信息

    """

    def __init__(self):
        r"""
        :param _Path: 主机源路径
        :type Path: str
        """
        self._Path = None

    @property
    def Path(self):
        """主机源路径
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path


    def _deserialize(self, params):
        self._Path = params.get("Path")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class HyperParameter(AbstractModel):
    """模型专业参数

    """

    def __init__(self):
        r"""
        :param _MaxNNZ: 最大nnz数
注意：此字段可能返回 null，表示取不到有效值。
        :type MaxNNZ: str
        :param _SlotNum: slot数
注意：此字段可能返回 null，表示取不到有效值。
        :type SlotNum: str
        :param _CpuCachePercentage: gpu cache 使用率
注意：此字段可能返回 null，表示取不到有效值。
        :type CpuCachePercentage: str
        :param _GpuCachePercentage: cpu cache 使用率
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuCachePercentage: str
        :param _EnableDistributed: 是否开启分布式模式(true/false)
注意：此字段可能返回 null，表示取不到有效值。
        :type EnableDistributed: str
        :param _MinBlockSizePt: TORCH_SCRIPT、MMDETECTION、DETECTRON2、HUGGINGFACE格式在进行优化时切分子图的最小算子数目，一般无需进行改动，默认为3
注意：此字段可能返回 null，表示取不到有效值。
        :type MinBlockSizePt: str
        :param _MinBlockSizeTf: FROZEN_GRAPH、SAVED_MODEL格式在进行优化时切分子图的最小算子数目，一般无需进行改动，默认为10
注意：此字段可能返回 null，表示取不到有效值。
        :type MinBlockSizeTf: str
        :param _Encrypted: 内部参数，模型是否加密
注意：此字段可能返回 null，表示取不到有效值。
        :type Encrypted: bool
        :param _PipelineArgs: Stable Diffusion 模型优化参数
注意：此字段可能返回 null，表示取不到有效值。
        :type PipelineArgs: str
        :param _LoraScale: Stable Diffusion 模型优化参数，控制Lora模型的影响效果
注意：此字段可能返回 null，表示取不到有效值。
        :type LoraScale: str
        """
        self._MaxNNZ = None
        self._SlotNum = None
        self._CpuCachePercentage = None
        self._GpuCachePercentage = None
        self._EnableDistributed = None
        self._MinBlockSizePt = None
        self._MinBlockSizeTf = None
        self._Encrypted = None
        self._PipelineArgs = None
        self._LoraScale = None

    @property
    def MaxNNZ(self):
        """最大nnz数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._MaxNNZ

    @MaxNNZ.setter
    def MaxNNZ(self, MaxNNZ):
        self._MaxNNZ = MaxNNZ

    @property
    def SlotNum(self):
        """slot数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SlotNum

    @SlotNum.setter
    def SlotNum(self, SlotNum):
        self._SlotNum = SlotNum

    @property
    def CpuCachePercentage(self):
        """gpu cache 使用率
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CpuCachePercentage

    @CpuCachePercentage.setter
    def CpuCachePercentage(self, CpuCachePercentage):
        self._CpuCachePercentage = CpuCachePercentage

    @property
    def GpuCachePercentage(self):
        """cpu cache 使用率
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GpuCachePercentage

    @GpuCachePercentage.setter
    def GpuCachePercentage(self, GpuCachePercentage):
        self._GpuCachePercentage = GpuCachePercentage

    @property
    def EnableDistributed(self):
        """是否开启分布式模式(true/false)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EnableDistributed

    @EnableDistributed.setter
    def EnableDistributed(self, EnableDistributed):
        self._EnableDistributed = EnableDistributed

    @property
    def MinBlockSizePt(self):
        """TORCH_SCRIPT、MMDETECTION、DETECTRON2、HUGGINGFACE格式在进行优化时切分子图的最小算子数目，一般无需进行改动，默认为3
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._MinBlockSizePt

    @MinBlockSizePt.setter
    def MinBlockSizePt(self, MinBlockSizePt):
        self._MinBlockSizePt = MinBlockSizePt

    @property
    def MinBlockSizeTf(self):
        """FROZEN_GRAPH、SAVED_MODEL格式在进行优化时切分子图的最小算子数目，一般无需进行改动，默认为10
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._MinBlockSizeTf

    @MinBlockSizeTf.setter
    def MinBlockSizeTf(self, MinBlockSizeTf):
        self._MinBlockSizeTf = MinBlockSizeTf

    @property
    def Encrypted(self):
        """内部参数，模型是否加密
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._Encrypted

    @Encrypted.setter
    def Encrypted(self, Encrypted):
        self._Encrypted = Encrypted

    @property
    def PipelineArgs(self):
        """Stable Diffusion 模型优化参数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PipelineArgs

    @PipelineArgs.setter
    def PipelineArgs(self, PipelineArgs):
        self._PipelineArgs = PipelineArgs

    @property
    def LoraScale(self):
        """Stable Diffusion 模型优化参数，控制Lora模型的影响效果
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LoraScale

    @LoraScale.setter
    def LoraScale(self, LoraScale):
        self._LoraScale = LoraScale


    def _deserialize(self, params):
        self._MaxNNZ = params.get("MaxNNZ")
        self._SlotNum = params.get("SlotNum")
        self._CpuCachePercentage = params.get("CpuCachePercentage")
        self._GpuCachePercentage = params.get("GpuCachePercentage")
        self._EnableDistributed = params.get("EnableDistributed")
        self._MinBlockSizePt = params.get("MinBlockSizePt")
        self._MinBlockSizeTf = params.get("MinBlockSizeTf")
        self._Encrypted = params.get("Encrypted")
        self._PipelineArgs = params.get("PipelineArgs")
        self._LoraScale = params.get("LoraScale")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Image(AbstractModel):
    """图片相关信息

    """

    def __init__(self):
        r"""
        :param _FileId: 文件id
        :type FileId: str
        :param _FileName: 文件名称
        :type FileName: str
        :param _FileUrl: 文件下载链接
        :type FileUrl: str
        :param _FileStatus: 1=已标注；2=未标注；3=预标注
        :type FileStatus: int
        :param _DataThumbnailUrl: 缩略图链接
        :type DataThumbnailUrl: str
        :param _AnnotationResult: 标注结果
        :type AnnotationResult: str
        """
        self._FileId = None
        self._FileName = None
        self._FileUrl = None
        self._FileStatus = None
        self._DataThumbnailUrl = None
        self._AnnotationResult = None

    @property
    def FileId(self):
        """文件id
        :rtype: str
        """
        return self._FileId

    @FileId.setter
    def FileId(self, FileId):
        self._FileId = FileId

    @property
    def FileName(self):
        """文件名称
        :rtype: str
        """
        return self._FileName

    @FileName.setter
    def FileName(self, FileName):
        self._FileName = FileName

    @property
    def FileUrl(self):
        """文件下载链接
        :rtype: str
        """
        return self._FileUrl

    @FileUrl.setter
    def FileUrl(self, FileUrl):
        self._FileUrl = FileUrl

    @property
    def FileStatus(self):
        """1=已标注；2=未标注；3=预标注
        :rtype: int
        """
        return self._FileStatus

    @FileStatus.setter
    def FileStatus(self, FileStatus):
        self._FileStatus = FileStatus

    @property
    def DataThumbnailUrl(self):
        """缩略图链接
        :rtype: str
        """
        return self._DataThumbnailUrl

    @DataThumbnailUrl.setter
    def DataThumbnailUrl(self, DataThumbnailUrl):
        self._DataThumbnailUrl = DataThumbnailUrl

    @property
    def AnnotationResult(self):
        """标注结果
        :rtype: str
        """
        return self._AnnotationResult

    @AnnotationResult.setter
    def AnnotationResult(self, AnnotationResult):
        self._AnnotationResult = AnnotationResult


    def _deserialize(self, params):
        self._FileId = params.get("FileId")
        self._FileName = params.get("FileName")
        self._FileUrl = params.get("FileUrl")
        self._FileStatus = params.get("FileStatus")
        self._DataThumbnailUrl = params.get("DataThumbnailUrl")
        self._AnnotationResult = params.get("AnnotationResult")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageData(AbstractModel):
    """包含标注图片的一些信息

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetId: str
        :param _RelativePath: 相对路径
注意：此字段可能返回 null，表示取不到有效值。
        :type RelativePath: str
        :param _DownloadUrl: 下载链接
注意：此字段可能返回 null，表示取不到有效值。
        :type DownloadUrl: str
        :param _DownloadThumbnailUrl: 缩略图下载链接
注意：此字段可能返回 null，表示取不到有效值。
        :type DownloadThumbnailUrl: str
        """
        self._DatasetId = None
        self._RelativePath = None
        self._DownloadUrl = None
        self._DownloadThumbnailUrl = None

    @property
    def DatasetId(self):
        """数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def RelativePath(self):
        """相对路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RelativePath

    @RelativePath.setter
    def RelativePath(self, RelativePath):
        self._RelativePath = RelativePath

    @property
    def DownloadUrl(self):
        """下载链接
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DownloadUrl

    @DownloadUrl.setter
    def DownloadUrl(self, DownloadUrl):
        self._DownloadUrl = DownloadUrl

    @property
    def DownloadThumbnailUrl(self):
        """缩略图下载链接
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DownloadThumbnailUrl

    @DownloadThumbnailUrl.setter
    def DownloadThumbnailUrl(self, DownloadThumbnailUrl):
        self._DownloadThumbnailUrl = DownloadThumbnailUrl


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._RelativePath = params.get("RelativePath")
        self._DownloadUrl = params.get("DownloadUrl")
        self._DownloadThumbnailUrl = params.get("DownloadThumbnailUrl")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageFIlter(AbstractModel):
    """镜像列表过滤

    """

    def __init__(self):
        r"""
        :param _Name: 过滤字段名称
        :type Name: str
        :param _Values: 过滤值
        :type Values: list of str
        :param _Negative: 是否反选
        :type Negative: bool
        """
        self._Name = None
        self._Values = None
        self._Negative = None

    @property
    def Name(self):
        """过滤字段名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Values(self):
        """过滤值
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values

    @property
    def Negative(self):
        """是否反选
        :rtype: bool
        """
        return self._Negative

    @Negative.setter
    def Negative(self, Negative):
        self._Negative = Negative


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Values = params.get("Values")
        self._Negative = params.get("Negative")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageId(AbstractModel):
    """图片id

    """

    def __init__(self):
        r"""
        :param _FileId: 文件id
        :type FileId: str
        :param _Path: 文件路径
        :type Path: str
        """
        self._FileId = None
        self._Path = None

    @property
    def FileId(self):
        """文件id
        :rtype: str
        """
        return self._FileId

    @FileId.setter
    def FileId(self, FileId):
        self._FileId = FileId

    @property
    def Path(self):
        """文件路径
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path


    def _deserialize(self, params):
        self._FileId = params.get("FileId")
        self._Path = params.get("Path")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageInfo(AbstractModel):
    """镜像描述信息

    """

    def __init__(self):
        r"""
        :param _ImageType: 镜像类型：TCR为腾讯云TCR镜像; CCR为腾讯云TCR个人版镜像，PreSet为平台预置镜像，CUSTOM为第三方自定义镜像
        :type ImageType: str
        :param _ImageUrl: 镜像地址
        :type ImageUrl: str
        :param _RegistryRegion: TCR镜像对应的地域
注意：此字段可能返回 null，表示取不到有效值。
        :type RegistryRegion: str
        :param _RegistryId: TCR镜像对应的实例id
注意：此字段可能返回 null，表示取不到有效值。
        :type RegistryId: str
        :param _AllowSaveAllContent: 是否允许导出全部内容
注意：此字段可能返回 null，表示取不到有效值。
        :type AllowSaveAllContent: bool
        :param _ImageName: 镜像名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageName: str
        :param _SupportDataPipeline: 是否支持数据构建
注意：此字段可能返回 null，表示取不到有效值。
        :type SupportDataPipeline: bool
        :param _ImageSecret: 镜像仓库用户名密码信息(仅当ImageType为CUSTOM第三方镜像的时候需要)
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageSecret: :class:`tencentcloud.tione.v20211111.models.ImageSecret`
        :param _ImageId: 镜像ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageId: str
        :param _RegionScope: 镜像支持的地域 all(所有地域)/autonomous(自动驾驶地域)/general(通用地域)	
        :type RegionScope: str
        """
        self._ImageType = None
        self._ImageUrl = None
        self._RegistryRegion = None
        self._RegistryId = None
        self._AllowSaveAllContent = None
        self._ImageName = None
        self._SupportDataPipeline = None
        self._ImageSecret = None
        self._ImageId = None
        self._RegionScope = None

    @property
    def ImageType(self):
        """镜像类型：TCR为腾讯云TCR镜像; CCR为腾讯云TCR个人版镜像，PreSet为平台预置镜像，CUSTOM为第三方自定义镜像
        :rtype: str
        """
        return self._ImageType

    @ImageType.setter
    def ImageType(self, ImageType):
        self._ImageType = ImageType

    @property
    def ImageUrl(self):
        """镜像地址
        :rtype: str
        """
        return self._ImageUrl

    @ImageUrl.setter
    def ImageUrl(self, ImageUrl):
        self._ImageUrl = ImageUrl

    @property
    def RegistryRegion(self):
        """TCR镜像对应的地域
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RegistryRegion

    @RegistryRegion.setter
    def RegistryRegion(self, RegistryRegion):
        self._RegistryRegion = RegistryRegion

    @property
    def RegistryId(self):
        """TCR镜像对应的实例id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RegistryId

    @RegistryId.setter
    def RegistryId(self, RegistryId):
        self._RegistryId = RegistryId

    @property
    def AllowSaveAllContent(self):
        """是否允许导出全部内容
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._AllowSaveAllContent

    @AllowSaveAllContent.setter
    def AllowSaveAllContent(self, AllowSaveAllContent):
        self._AllowSaveAllContent = AllowSaveAllContent

    @property
    def ImageName(self):
        """镜像名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def SupportDataPipeline(self):
        """是否支持数据构建
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._SupportDataPipeline

    @SupportDataPipeline.setter
    def SupportDataPipeline(self, SupportDataPipeline):
        self._SupportDataPipeline = SupportDataPipeline

    @property
    def ImageSecret(self):
        """镜像仓库用户名密码信息(仅当ImageType为CUSTOM第三方镜像的时候需要)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageSecret`
        """
        return self._ImageSecret

    @ImageSecret.setter
    def ImageSecret(self, ImageSecret):
        self._ImageSecret = ImageSecret

    @property
    def ImageId(self):
        """镜像ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def RegionScope(self):
        """镜像支持的地域 all(所有地域)/autonomous(自动驾驶地域)/general(通用地域)	
        :rtype: str
        """
        return self._RegionScope

    @RegionScope.setter
    def RegionScope(self, RegionScope):
        self._RegionScope = RegionScope


    def _deserialize(self, params):
        self._ImageType = params.get("ImageType")
        self._ImageUrl = params.get("ImageUrl")
        self._RegistryRegion = params.get("RegistryRegion")
        self._RegistryId = params.get("RegistryId")
        self._AllowSaveAllContent = params.get("AllowSaveAllContent")
        self._ImageName = params.get("ImageName")
        self._SupportDataPipeline = params.get("SupportDataPipeline")
        if params.get("ImageSecret") is not None:
            self._ImageSecret = ImageSecret()
            self._ImageSecret._deserialize(params.get("ImageSecret"))
        self._ImageId = params.get("ImageId")
        self._RegionScope = params.get("RegionScope")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageSecret(AbstractModel):
    """自定义镜像仓库凭据

    """

    def __init__(self):
        r"""
        :param _KeyId: 用于加密密码的KMS公钥ID
注意：此字段可能返回 null，表示取不到有效值。
        :type KeyId: str
        :param _Username: 用户名
注意：此字段可能返回 null，表示取不到有效值。
        :type Username: str
        :param _Password: 密码,base64编码； 当keyId不为空时，密码是加密后的
注意：此字段可能返回 null，表示取不到有效值。
        :type Password: str
        :param _SecretId: 用户凭据ID
注意：此字段可能返回 null，表示取不到有效值。
        :type SecretId: str
        """
        self._KeyId = None
        self._Username = None
        self._Password = None
        self._SecretId = None

    @property
    def KeyId(self):
        """用于加密密码的KMS公钥ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._KeyId

    @KeyId.setter
    def KeyId(self, KeyId):
        self._KeyId = KeyId

    @property
    def Username(self):
        """用户名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Username

    @Username.setter
    def Username(self, Username):
        self._Username = Username

    @property
    def Password(self):
        """密码,base64编码； 当keyId不为空时，密码是加密后的
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Password

    @Password.setter
    def Password(self, Password):
        self._Password = Password

    @property
    def SecretId(self):
        """用户凭据ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SecretId

    @SecretId.setter
    def SecretId(self, SecretId):
        self._SecretId = SecretId


    def _deserialize(self, params):
        self._KeyId = params.get("KeyId")
        self._Username = params.get("Username")
        self._Password = params.get("Password")
        self._SecretId = params.get("SecretId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageUrl(AbstractModel):
    """多模态对话图片信息

    """

    def __init__(self):
        r"""
        :param _Url: 图片url
        :type Url: str
        """
        self._Url = None

    @property
    def Url(self):
        """图片url
        :rtype: str
        """
        return self._Url

    @Url.setter
    def Url(self, Url):
        self._Url = Url


    def _deserialize(self, params):
        self._Url = params.get("Url")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImageUrlInfo(AbstractModel):
    """图像url 链接

    """

    def __init__(self):
        r"""
        :param _FileId: 文件id
注意：此字段可能返回 null，表示取不到有效值。
        :type FileId: str
        :param _ImageUrl: 图片下载URL
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageUrl: str
        :param _ThumbnailUrl: 图片缩略图url
注意：此字段可能返回 null，表示取不到有效值。
        :type ThumbnailUrl: str
        """
        self._FileId = None
        self._ImageUrl = None
        self._ThumbnailUrl = None

    @property
    def FileId(self):
        """文件id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FileId

    @FileId.setter
    def FileId(self, FileId):
        self._FileId = FileId

    @property
    def ImageUrl(self):
        """图片下载URL
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ImageUrl

    @ImageUrl.setter
    def ImageUrl(self, ImageUrl):
        self._ImageUrl = ImageUrl

    @property
    def ThumbnailUrl(self):
        """图片缩略图url
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ThumbnailUrl

    @ThumbnailUrl.setter
    def ThumbnailUrl(self, ThumbnailUrl):
        self._ThumbnailUrl = ThumbnailUrl


    def _deserialize(self, params):
        self._FileId = params.get("FileId")
        self._ImageUrl = params.get("ImageUrl")
        self._ThumbnailUrl = params.get("ThumbnailUrl")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImportAlgoRequest(AbstractModel):
    """ImportAlgo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AlgoGroupId: 个人算法组Id，创建新算法组时该字段填空
        :type AlgoGroupId: str
        :param _PublicAlgoVersionId: 公共算法版本Id
        :type PublicAlgoVersionId: str
        :param _TrainCodeInfo: 训练代码物料信息, 创建新版本时可选填
        :type TrainCodeInfo: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        :param _NotebookLifecycleScriptId: notebook生命周期脚本Id, 创建新版本时可选填
        :type NotebookLifecycleScriptId: str
        :param _NotebookLifecycleScriptName: notebook生命周期脚本名字, 创建新版本时可选填
        :type NotebookLifecycleScriptName: str
        :param _Tags: tag列表
        :type Tags: list of Tag
        :param _AlgoVersion: 版本号,  创建新算法版本时需填
        :type AlgoVersion: str
        """
        self._AlgoGroupId = None
        self._PublicAlgoVersionId = None
        self._TrainCodeInfo = None
        self._NotebookLifecycleScriptId = None
        self._NotebookLifecycleScriptName = None
        self._Tags = None
        self._AlgoVersion = None

    @property
    def AlgoGroupId(self):
        """个人算法组Id，创建新算法组时该字段填空
        :rtype: str
        """
        return self._AlgoGroupId

    @AlgoGroupId.setter
    def AlgoGroupId(self, AlgoGroupId):
        self._AlgoGroupId = AlgoGroupId

    @property
    def PublicAlgoVersionId(self):
        """公共算法版本Id
        :rtype: str
        """
        return self._PublicAlgoVersionId

    @PublicAlgoVersionId.setter
    def PublicAlgoVersionId(self, PublicAlgoVersionId):
        self._PublicAlgoVersionId = PublicAlgoVersionId

    @property
    def TrainCodeInfo(self):
        """训练代码物料信息, 创建新版本时可选填
        :rtype: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        """
        return self._TrainCodeInfo

    @TrainCodeInfo.setter
    def TrainCodeInfo(self, TrainCodeInfo):
        self._TrainCodeInfo = TrainCodeInfo

    @property
    def NotebookLifecycleScriptId(self):
        """notebook生命周期脚本Id, 创建新版本时可选填
        :rtype: str
        """
        return self._NotebookLifecycleScriptId

    @NotebookLifecycleScriptId.setter
    def NotebookLifecycleScriptId(self, NotebookLifecycleScriptId):
        self._NotebookLifecycleScriptId = NotebookLifecycleScriptId

    @property
    def NotebookLifecycleScriptName(self):
        """notebook生命周期脚本名字, 创建新版本时可选填
        :rtype: str
        """
        return self._NotebookLifecycleScriptName

    @NotebookLifecycleScriptName.setter
    def NotebookLifecycleScriptName(self, NotebookLifecycleScriptName):
        self._NotebookLifecycleScriptName = NotebookLifecycleScriptName

    @property
    def Tags(self):
        """tag列表
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def AlgoVersion(self):
        """版本号,  创建新算法版本时需填
        :rtype: str
        """
        return self._AlgoVersion

    @AlgoVersion.setter
    def AlgoVersion(self, AlgoVersion):
        self._AlgoVersion = AlgoVersion


    def _deserialize(self, params):
        self._AlgoGroupId = params.get("AlgoGroupId")
        self._PublicAlgoVersionId = params.get("PublicAlgoVersionId")
        if params.get("TrainCodeInfo") is not None:
            self._TrainCodeInfo = MaterialInfo()
            self._TrainCodeInfo._deserialize(params.get("TrainCodeInfo"))
        self._NotebookLifecycleScriptId = params.get("NotebookLifecycleScriptId")
        self._NotebookLifecycleScriptName = params.get("NotebookLifecycleScriptName")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._AlgoVersion = params.get("AlgoVersion")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ImportAlgoResponse(AbstractModel):
    """ImportAlgo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AlgoVersionId: 算法版本Id
注意：此字段可能返回 null，表示取不到有效值。
        :type AlgoVersionId: str
        :param _AlgoGroupId: 算法组Id
注意：此字段可能返回 null，表示取不到有效值。
        :type AlgoGroupId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AlgoVersionId = None
        self._AlgoGroupId = None
        self._RequestId = None

    @property
    def AlgoVersionId(self):
        """算法版本Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AlgoVersionId

    @AlgoVersionId.setter
    def AlgoVersionId(self, AlgoVersionId):
        self._AlgoVersionId = AlgoVersionId

    @property
    def AlgoGroupId(self):
        """算法组Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AlgoGroupId

    @AlgoGroupId.setter
    def AlgoGroupId(self, AlgoGroupId):
        self._AlgoGroupId = AlgoGroupId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AlgoVersionId = params.get("AlgoVersionId")
        self._AlgoGroupId = params.get("AlgoGroupId")
        self._RequestId = params.get("RequestId")


class IndexCondition(AbstractModel):
    """Notebook回收策略中的指标条件

    """

    def __init__(self):
        r"""
        :param _IndexName: 指标名称
        :type IndexName: str
        :param _Operator: 判断条件
        :type Operator: str
        :param _Value: 指标值
        :type Value: int
        """
        self._IndexName = None
        self._Operator = None
        self._Value = None

    @property
    def IndexName(self):
        """指标名称
        :rtype: str
        """
        return self._IndexName

    @IndexName.setter
    def IndexName(self, IndexName):
        self._IndexName = IndexName

    @property
    def Operator(self):
        """判断条件
        :rtype: str
        """
        return self._Operator

    @Operator.setter
    def Operator(self, Operator):
        self._Operator = Operator

    @property
    def Value(self):
        """指标值
        :rtype: int
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._IndexName = params.get("IndexName")
        self._Operator = params.get("Operator")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InferCodeInfo(AbstractModel):
    """推理代码的信息

    """

    def __init__(self):
        r"""
        :param _CosPathInfo: 推理代码所在的cos详情
注意：此字段可能返回 null，表示取不到有效值。
        :type CosPathInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        self._CosPathInfo = None

    @property
    def CosPathInfo(self):
        """推理代码所在的cos详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._CosPathInfo

    @CosPathInfo.setter
    def CosPathInfo(self, CosPathInfo):
        self._CosPathInfo = CosPathInfo


    def _deserialize(self, params):
        if params.get("CosPathInfo") is not None:
            self._CosPathInfo = CosPathInfo()
            self._CosPathInfo._deserialize(params.get("CosPathInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InferEMSProxyRequest(AbstractModel):
    """InferEMSProxy请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _ImageCosPaths: 图片列表
        :type ImageCosPaths: list of str
        :param _EMSTaskId: 在线服务ID
        :type EMSTaskId: str
        :param _OcrKeys: OCR 结构化key列表
        :type OcrKeys: list of str
        :param _NLPSamples: 文本分类的样本列表
        :type NLPSamples: list of NLPSample
        """
        self._AutoMLTaskId = None
        self._ImageCosPaths = None
        self._EMSTaskId = None
        self._OcrKeys = None
        self._NLPSamples = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def ImageCosPaths(self):
        """图片列表
        :rtype: list of str
        """
        return self._ImageCosPaths

    @ImageCosPaths.setter
    def ImageCosPaths(self, ImageCosPaths):
        self._ImageCosPaths = ImageCosPaths

    @property
    def EMSTaskId(self):
        """在线服务ID
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId

    @property
    def OcrKeys(self):
        """OCR 结构化key列表
        :rtype: list of str
        """
        return self._OcrKeys

    @OcrKeys.setter
    def OcrKeys(self, OcrKeys):
        self._OcrKeys = OcrKeys

    @property
    def NLPSamples(self):
        """文本分类的样本列表
        :rtype: list of NLPSample
        """
        return self._NLPSamples

    @NLPSamples.setter
    def NLPSamples(self, NLPSamples):
        self._NLPSamples = NLPSamples


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._ImageCosPaths = params.get("ImageCosPaths")
        self._EMSTaskId = params.get("EMSTaskId")
        self._OcrKeys = params.get("OcrKeys")
        if params.get("NLPSamples") is not None:
            self._NLPSamples = []
            for item in params.get("NLPSamples"):
                obj = NLPSample()
                obj._deserialize(item)
                self._NLPSamples.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InferEMSProxyResponse(AbstractModel):
    """InferEMSProxy返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _EMSTaskId: 在线学习任务ID
        :type EMSTaskId: str
        :param _SceneType: 场景类型
        :type SceneType: str
        :param _InferenceResults: 推理结果
注意：此字段可能返回 null，表示取不到有效值。
        :type InferenceResults: list of str
        :param _InferUrl: 在线服务调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type InferUrl: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EMSTaskId = None
        self._SceneType = None
        self._InferenceResults = None
        self._InferUrl = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EMSTaskId(self):
        """在线学习任务ID
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId

    @property
    def SceneType(self):
        """场景类型
        :rtype: str
        """
        return self._SceneType

    @SceneType.setter
    def SceneType(self, SceneType):
        self._SceneType = SceneType

    @property
    def InferenceResults(self):
        """推理结果
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._InferenceResults

    @InferenceResults.setter
    def InferenceResults(self, InferenceResults):
        self._InferenceResults = InferenceResults

    @property
    def InferUrl(self):
        """在线服务调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InferUrl

    @InferUrl.setter
    def InferUrl(self, InferUrl):
        self._InferUrl = InferUrl

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EMSTaskId = params.get("EMSTaskId")
        self._SceneType = params.get("SceneType")
        self._InferenceResults = params.get("InferenceResults")
        self._InferUrl = params.get("InferUrl")
        self._RequestId = params.get("RequestId")


class InferGatewayCallInfo(AbstractModel):
    """服务的调用信息，服务组下唯一

    """

    def __init__(self):
        r"""
        :param _VpcHttpAddr: 内网http调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcHttpAddr: str
        :param _VpcHttpsAddr: 内网https调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcHttpsAddr: str
        :param _VpcGrpcTlsAddr: 内网grpc调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcGrpcTlsAddr: str
        :param _VpcId: 可访问的vpcid
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcId: str
        :param _SubnetId: 后端ip对应的子网
注意：此字段可能返回 null，表示取不到有效值。
        :type SubnetId: str
        """
        self._VpcHttpAddr = None
        self._VpcHttpsAddr = None
        self._VpcGrpcTlsAddr = None
        self._VpcId = None
        self._SubnetId = None

    @property
    def VpcHttpAddr(self):
        """内网http调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VpcHttpAddr

    @VpcHttpAddr.setter
    def VpcHttpAddr(self, VpcHttpAddr):
        self._VpcHttpAddr = VpcHttpAddr

    @property
    def VpcHttpsAddr(self):
        """内网https调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VpcHttpsAddr

    @VpcHttpsAddr.setter
    def VpcHttpsAddr(self, VpcHttpsAddr):
        self._VpcHttpsAddr = VpcHttpsAddr

    @property
    def VpcGrpcTlsAddr(self):
        """内网grpc调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VpcGrpcTlsAddr

    @VpcGrpcTlsAddr.setter
    def VpcGrpcTlsAddr(self, VpcGrpcTlsAddr):
        self._VpcGrpcTlsAddr = VpcGrpcTlsAddr

    @property
    def VpcId(self):
        """可访问的vpcid
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """后端ip对应的子网
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId


    def _deserialize(self, params):
        self._VpcHttpAddr = params.get("VpcHttpAddr")
        self._VpcHttpsAddr = params.get("VpcHttpsAddr")
        self._VpcGrpcTlsAddr = params.get("VpcGrpcTlsAddr")
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InferTemplate(AbstractModel):
    """推理镜像详情

    """

    def __init__(self):
        r"""
        :param _InferTemplateId: 模板ID
        :type InferTemplateId: str
        :param _InferTemplateImage: 模板镜像
        :type InferTemplateImage: str
        """
        self._InferTemplateId = None
        self._InferTemplateImage = None

    @property
    def InferTemplateId(self):
        """模板ID
        :rtype: str
        """
        return self._InferTemplateId

    @InferTemplateId.setter
    def InferTemplateId(self, InferTemplateId):
        self._InferTemplateId = InferTemplateId

    @property
    def InferTemplateImage(self):
        """模板镜像
        :rtype: str
        """
        return self._InferTemplateImage

    @InferTemplateImage.setter
    def InferTemplateImage(self, InferTemplateImage):
        self._InferTemplateImage = InferTemplateImage


    def _deserialize(self, params):
        self._InferTemplateId = params.get("InferTemplateId")
        self._InferTemplateImage = params.get("InferTemplateImage")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InferTemplateGroup(AbstractModel):
    """推理镜像组

    """

    def __init__(self):
        r"""
        :param _Framework: 算法框架
注意：此字段可能返回 null，表示取不到有效值。
        :type Framework: str
        :param _FrameworkVersion: 版本号
注意：此字段可能返回 null，表示取不到有效值。
        :type FrameworkVersion: str
        :param _Groups: 支持的训练框架集合
注意：此字段可能返回 null，表示取不到有效值。
        :type Groups: list of str
        :param _InferTemplates: 镜像模板参数列表
注意：此字段可能返回 null，表示取不到有效值。
        :type InferTemplates: list of InferTemplate
        """
        self._Framework = None
        self._FrameworkVersion = None
        self._Groups = None
        self._InferTemplates = None

    @property
    def Framework(self):
        """算法框架
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Framework

    @Framework.setter
    def Framework(self, Framework):
        self._Framework = Framework

    @property
    def FrameworkVersion(self):
        """版本号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FrameworkVersion

    @FrameworkVersion.setter
    def FrameworkVersion(self, FrameworkVersion):
        self._FrameworkVersion = FrameworkVersion

    @property
    def Groups(self):
        """支持的训练框架集合
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._Groups

    @Groups.setter
    def Groups(self, Groups):
        self._Groups = Groups

    @property
    def InferTemplates(self):
        """镜像模板参数列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of InferTemplate
        """
        return self._InferTemplates

    @InferTemplates.setter
    def InferTemplates(self, InferTemplates):
        self._InferTemplates = InferTemplates


    def _deserialize(self, params):
        self._Framework = params.get("Framework")
        self._FrameworkVersion = params.get("FrameworkVersion")
        self._Groups = params.get("Groups")
        if params.get("InferTemplates") is not None:
            self._InferTemplates = []
            for item in params.get("InferTemplates"):
                obj = InferTemplate()
                obj._deserialize(item)
                self._InferTemplates.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class IngressPrivateLinkInfo(AbstractModel):
    """私有连接通道信息

    """

    def __init__(self):
        r"""
        :param _VpcId: 用户VpcId
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcId: str
        :param _SubnetId: 用户子网ID
注意：此字段可能返回 null，表示取不到有效值。
        :type SubnetId: str
        :param _InnerHttpAddr: 内网http调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type InnerHttpAddr: list of str
        :param _InnerHttpsAddr: 内网https调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type InnerHttpsAddr: list of str
        :param _State: 私有连接状态
注意：此字段可能返回 null，表示取不到有效值。
        :type State: str
        """
        self._VpcId = None
        self._SubnetId = None
        self._InnerHttpAddr = None
        self._InnerHttpsAddr = None
        self._State = None

    @property
    def VpcId(self):
        """用户VpcId
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """用户子网ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def InnerHttpAddr(self):
        """内网http调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._InnerHttpAddr

    @InnerHttpAddr.setter
    def InnerHttpAddr(self, InnerHttpAddr):
        self._InnerHttpAddr = InnerHttpAddr

    @property
    def InnerHttpsAddr(self):
        """内网https调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._InnerHttpsAddr

    @InnerHttpsAddr.setter
    def InnerHttpsAddr(self, InnerHttpsAddr):
        self._InnerHttpsAddr = InnerHttpsAddr

    @property
    def State(self):
        """私有连接状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State


    def _deserialize(self, params):
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._InnerHttpAddr = params.get("InnerHttpAddr")
        self._InnerHttpsAddr = params.get("InnerHttpsAddr")
        self._State = params.get("State")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Instance(AbstractModel):
    """资源组节点信息

    """

    def __init__(self):
        r"""
        :param _InstanceId: 资源组节点id
        :type InstanceId: str
        :param _UsedResource: 节点已用资源
注意：此字段可能返回 null，表示取不到有效值。
        :type UsedResource: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        :param _TotalResource: 节点总资源
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalResource: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        :param _InstanceStatus: 节点状态 
注意：此字段为枚举值
说明: 
DEPLOYING: 部署中
RUNNING: 运行中 
DEPLOY_FAILED: 部署失败
 RELEASING 释放中 
RELEASED：已释放 
EXCEPTION：异常
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceStatus: str
        :param _SubUin: 创建人
        :type SubUin: str
        :param _CreateTime: 创建时间: 
注意：北京时间，比如: 2021-12-01 12:00:00
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _ExpireTime: 到期时间
注意：北京时间，比如：2021-12-11 12:00:00
注意：此字段可能返回 null，表示取不到有效值。
        :type ExpireTime: str
        :param _AutoRenewFlag: 自动续费标识
注意：此字段为枚举值
说明：
NOTIFY_AND_MANUAL_RENEW：手动续费(取消自动续费)且到期通知
NOTIFY_AND_AUTO_RENEW：自动续费且到期通知
DISABLE_NOTIFY_AND_MANUAL_RENEW：手动续费(取消自动续费)且到期不通知
注意：此字段可能返回 null，表示取不到有效值。
        :type AutoRenewFlag: str
        :param _SpecId: 计费项ID
        :type SpecId: str
        :param _SpecAlias: 计费项别名
        :type SpecAlias: str
        :param _SpecFeatures: 计费项特性列表
注意：此字段可能返回 null，表示取不到有效值。
        :type SpecFeatures: list of str
        :param _IsByYear: 计费项是否包年
        :type IsByYear: bool
        :param _IsExclusiveSale: 计费项是否包销
        :type IsExclusiveSale: bool
        :param _IsExclusiveSaleExpired: 实例是否到包销过期时间
        :type IsExclusiveSaleExpired: bool
        :param _Pid: 计费项pid
注意：此字段可能返回 null，表示取不到有效值。
        :type Pid: str
        :param _CategoryId: 计费项CategoryId
注意：此字段可能返回 null，表示取不到有效值。
        :type CategoryId: str
        :param _ExclusiveDuration: 包销时长
注意：此字段可能返回 null，表示取不到有效值。
        :type ExclusiveDuration: str
        :param _IsSWFinished: 纳管实例是否付费完成
        :type IsSWFinished: bool
        :param _SWSpecId: 纳管计费项
注意：此字段可能返回 null，表示取不到有效值。
        :type SWSpecId: str
        :param _CvmResourceExpireTime: 纳管cvm实例到期时间
        :type CvmResourceExpireTime: str
        :param _CvmInstanceId: 纳管cvmid
        :type CvmInstanceId: str
        :param _ErrCode: 部署失败错误码
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrCode: str
        :param _ErrMsg: 部署失败错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrMsg: str
        :param _AvailableResource: 节点可用资源
注意：此字段可能返回 null，表示取不到有效值。
        :type AvailableResource: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        :param _HasIdleDisk: 节点是否有空闲数据盘
注意：此字段可能返回 null，表示取不到有效值。
        :type HasIdleDisk: bool
        :param _InstancePayMode: 节点的计费类型，包年包月或者按量付费
注意：此字段可能返回 null，表示取不到有效值。
        :type InstancePayMode: str
        :param _InstanceReleaseSubUin: 节点释放人的子账号
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceReleaseSubUin: str
        :param _InstanceIP: 资源组节点的IP
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceIP: str
        :param _InstanceName: 资源组节点的名称
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceName: str
        :param _AppId: AppId
注意：此字段可能返回 null，表示取不到有效值。
        :type AppId: int
        """
        self._InstanceId = None
        self._UsedResource = None
        self._TotalResource = None
        self._InstanceStatus = None
        self._SubUin = None
        self._CreateTime = None
        self._ExpireTime = None
        self._AutoRenewFlag = None
        self._SpecId = None
        self._SpecAlias = None
        self._SpecFeatures = None
        self._IsByYear = None
        self._IsExclusiveSale = None
        self._IsExclusiveSaleExpired = None
        self._Pid = None
        self._CategoryId = None
        self._ExclusiveDuration = None
        self._IsSWFinished = None
        self._SWSpecId = None
        self._CvmResourceExpireTime = None
        self._CvmInstanceId = None
        self._ErrCode = None
        self._ErrMsg = None
        self._AvailableResource = None
        self._HasIdleDisk = None
        self._InstancePayMode = None
        self._InstanceReleaseSubUin = None
        self._InstanceIP = None
        self._InstanceName = None
        self._AppId = None

    @property
    def InstanceId(self):
        """资源组节点id
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def UsedResource(self):
        """节点已用资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        """
        return self._UsedResource

    @UsedResource.setter
    def UsedResource(self, UsedResource):
        self._UsedResource = UsedResource

    @property
    def TotalResource(self):
        """节点总资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        """
        return self._TotalResource

    @TotalResource.setter
    def TotalResource(self, TotalResource):
        self._TotalResource = TotalResource

    @property
    def InstanceStatus(self):
        """节点状态 
注意：此字段为枚举值
说明: 
DEPLOYING: 部署中
RUNNING: 运行中 
DEPLOY_FAILED: 部署失败
 RELEASING 释放中 
RELEASED：已释放 
EXCEPTION：异常
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceStatus

    @InstanceStatus.setter
    def InstanceStatus(self, InstanceStatus):
        self._InstanceStatus = InstanceStatus

    @property
    def SubUin(self):
        """创建人
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def CreateTime(self):
        """创建时间: 
注意：北京时间，比如: 2021-12-01 12:00:00
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ExpireTime(self):
        """到期时间
注意：北京时间，比如：2021-12-11 12:00:00
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ExpireTime

    @ExpireTime.setter
    def ExpireTime(self, ExpireTime):
        self._ExpireTime = ExpireTime

    @property
    def AutoRenewFlag(self):
        """自动续费标识
注意：此字段为枚举值
说明：
NOTIFY_AND_MANUAL_RENEW：手动续费(取消自动续费)且到期通知
NOTIFY_AND_AUTO_RENEW：自动续费且到期通知
DISABLE_NOTIFY_AND_MANUAL_RENEW：手动续费(取消自动续费)且到期不通知
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AutoRenewFlag

    @AutoRenewFlag.setter
    def AutoRenewFlag(self, AutoRenewFlag):
        self._AutoRenewFlag = AutoRenewFlag

    @property
    def SpecId(self):
        """计费项ID
        :rtype: str
        """
        return self._SpecId

    @SpecId.setter
    def SpecId(self, SpecId):
        self._SpecId = SpecId

    @property
    def SpecAlias(self):
        """计费项别名
        :rtype: str
        """
        return self._SpecAlias

    @SpecAlias.setter
    def SpecAlias(self, SpecAlias):
        self._SpecAlias = SpecAlias

    @property
    def SpecFeatures(self):
        """计费项特性列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._SpecFeatures

    @SpecFeatures.setter
    def SpecFeatures(self, SpecFeatures):
        self._SpecFeatures = SpecFeatures

    @property
    def IsByYear(self):
        """计费项是否包年
        :rtype: bool
        """
        return self._IsByYear

    @IsByYear.setter
    def IsByYear(self, IsByYear):
        self._IsByYear = IsByYear

    @property
    def IsExclusiveSale(self):
        """计费项是否包销
        :rtype: bool
        """
        return self._IsExclusiveSale

    @IsExclusiveSale.setter
    def IsExclusiveSale(self, IsExclusiveSale):
        self._IsExclusiveSale = IsExclusiveSale

    @property
    def IsExclusiveSaleExpired(self):
        """实例是否到包销过期时间
        :rtype: bool
        """
        return self._IsExclusiveSaleExpired

    @IsExclusiveSaleExpired.setter
    def IsExclusiveSaleExpired(self, IsExclusiveSaleExpired):
        self._IsExclusiveSaleExpired = IsExclusiveSaleExpired

    @property
    def Pid(self):
        """计费项pid
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def CategoryId(self):
        """计费项CategoryId
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CategoryId

    @CategoryId.setter
    def CategoryId(self, CategoryId):
        self._CategoryId = CategoryId

    @property
    def ExclusiveDuration(self):
        """包销时长
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ExclusiveDuration

    @ExclusiveDuration.setter
    def ExclusiveDuration(self, ExclusiveDuration):
        self._ExclusiveDuration = ExclusiveDuration

    @property
    def IsSWFinished(self):
        """纳管实例是否付费完成
        :rtype: bool
        """
        return self._IsSWFinished

    @IsSWFinished.setter
    def IsSWFinished(self, IsSWFinished):
        self._IsSWFinished = IsSWFinished

    @property
    def SWSpecId(self):
        """纳管计费项
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SWSpecId

    @SWSpecId.setter
    def SWSpecId(self, SWSpecId):
        self._SWSpecId = SWSpecId

    @property
    def CvmResourceExpireTime(self):
        """纳管cvm实例到期时间
        :rtype: str
        """
        return self._CvmResourceExpireTime

    @CvmResourceExpireTime.setter
    def CvmResourceExpireTime(self, CvmResourceExpireTime):
        self._CvmResourceExpireTime = CvmResourceExpireTime

    @property
    def CvmInstanceId(self):
        """纳管cvmid
        :rtype: str
        """
        return self._CvmInstanceId

    @CvmInstanceId.setter
    def CvmInstanceId(self, CvmInstanceId):
        self._CvmInstanceId = CvmInstanceId

    @property
    def ErrCode(self):
        """部署失败错误码
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrCode

    @ErrCode.setter
    def ErrCode(self, ErrCode):
        self._ErrCode = ErrCode

    @property
    def ErrMsg(self):
        """部署失败错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrMsg

    @ErrMsg.setter
    def ErrMsg(self, ErrMsg):
        self._ErrMsg = ErrMsg

    @property
    def AvailableResource(self):
        """节点可用资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        """
        return self._AvailableResource

    @AvailableResource.setter
    def AvailableResource(self, AvailableResource):
        self._AvailableResource = AvailableResource

    @property
    def HasIdleDisk(self):
        """节点是否有空闲数据盘
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._HasIdleDisk

    @HasIdleDisk.setter
    def HasIdleDisk(self, HasIdleDisk):
        self._HasIdleDisk = HasIdleDisk

    @property
    def InstancePayMode(self):
        """节点的计费类型，包年包月或者按量付费
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstancePayMode

    @InstancePayMode.setter
    def InstancePayMode(self, InstancePayMode):
        self._InstancePayMode = InstancePayMode

    @property
    def InstanceReleaseSubUin(self):
        """节点释放人的子账号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceReleaseSubUin

    @InstanceReleaseSubUin.setter
    def InstanceReleaseSubUin(self, InstanceReleaseSubUin):
        self._InstanceReleaseSubUin = InstanceReleaseSubUin

    @property
    def InstanceIP(self):
        """资源组节点的IP
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceIP

    @InstanceIP.setter
    def InstanceIP(self, InstanceIP):
        self._InstanceIP = InstanceIP

    @property
    def InstanceName(self):
        """资源组节点的名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceName

    @InstanceName.setter
    def InstanceName(self, InstanceName):
        self._InstanceName = InstanceName

    @property
    def AppId(self):
        """AppId
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId


    def _deserialize(self, params):
        self._InstanceId = params.get("InstanceId")
        if params.get("UsedResource") is not None:
            self._UsedResource = ResourceInfo()
            self._UsedResource._deserialize(params.get("UsedResource"))
        if params.get("TotalResource") is not None:
            self._TotalResource = ResourceInfo()
            self._TotalResource._deserialize(params.get("TotalResource"))
        self._InstanceStatus = params.get("InstanceStatus")
        self._SubUin = params.get("SubUin")
        self._CreateTime = params.get("CreateTime")
        self._ExpireTime = params.get("ExpireTime")
        self._AutoRenewFlag = params.get("AutoRenewFlag")
        self._SpecId = params.get("SpecId")
        self._SpecAlias = params.get("SpecAlias")
        self._SpecFeatures = params.get("SpecFeatures")
        self._IsByYear = params.get("IsByYear")
        self._IsExclusiveSale = params.get("IsExclusiveSale")
        self._IsExclusiveSaleExpired = params.get("IsExclusiveSaleExpired")
        self._Pid = params.get("Pid")
        self._CategoryId = params.get("CategoryId")
        self._ExclusiveDuration = params.get("ExclusiveDuration")
        self._IsSWFinished = params.get("IsSWFinished")
        self._SWSpecId = params.get("SWSpecId")
        self._CvmResourceExpireTime = params.get("CvmResourceExpireTime")
        self._CvmInstanceId = params.get("CvmInstanceId")
        self._ErrCode = params.get("ErrCode")
        self._ErrMsg = params.get("ErrMsg")
        if params.get("AvailableResource") is not None:
            self._AvailableResource = ResourceInfo()
            self._AvailableResource._deserialize(params.get("AvailableResource"))
        self._HasIdleDisk = params.get("HasIdleDisk")
        self._InstancePayMode = params.get("InstancePayMode")
        self._InstanceReleaseSubUin = params.get("InstanceReleaseSubUin")
        self._InstanceIP = params.get("InstanceIP")
        self._InstanceName = params.get("InstanceName")
        self._AppId = params.get("AppId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceGroup(AbstractModel):
    """按GPU型号聚合的节点列表

    """

    def __init__(self):
        r"""
        :param _GpuType: GPU卡型号，可以为空，为空表示CPU机型
        :type GpuType: str
        :param _InstanceSet: 节点信息
        :type InstanceSet: list of Instance
        """
        self._GpuType = None
        self._InstanceSet = None

    @property
    def GpuType(self):
        """GPU卡型号，可以为空，为空表示CPU机型
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType

    @property
    def InstanceSet(self):
        """节点信息
        :rtype: list of Instance
        """
        return self._InstanceSet

    @InstanceSet.setter
    def InstanceSet(self, InstanceSet):
        self._InstanceSet = InstanceSet


    def _deserialize(self, params):
        self._GpuType = params.get("GpuType")
        if params.get("InstanceSet") is not None:
            self._InstanceSet = []
            for item in params.get("InstanceSet"):
                obj = Instance()
                obj._deserialize(item)
                self._InstanceSet.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceMonitor(AbstractModel):
    """实例维度组合数组

    """

    def __init__(self):
        r"""
        :param _Dimensions: 实例的维度组合
        :type Dimensions: list of Dimension
        """
        self._Dimensions = None

    @property
    def Dimensions(self):
        """实例的维度组合
        :rtype: list of Dimension
        """
        return self._Dimensions

    @Dimensions.setter
    def Dimensions(self, Dimensions):
        self._Dimensions = Dimensions


    def _deserialize(self, params):
        if params.get("Dimensions") is not None:
            self._Dimensions = []
            for item in params.get("Dimensions"):
                obj = Dimension()
                obj._deserialize(item)
                self._Dimensions.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InstanceStatusStatistic(AbstractModel):
    """资源组节点状态统计

    """

    def __init__(self):
        r"""
        :param _InstanceStatus: 节点状态
注意：枚举值
RUNNING (运行中)
DEPLOYING （部署中）
DEPLOY_FAILED （部署失败）
RELEASED （已经释放）
EXCEPTION （异常）
RELEASING （释放中）
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceStatus: str
        :param _Count: 此状态节点总数
注意：此字段可能返回 null，表示取不到有效值。
        :type Count: int
        """
        self._InstanceStatus = None
        self._Count = None

    @property
    def InstanceStatus(self):
        """节点状态
注意：枚举值
RUNNING (运行中)
DEPLOYING （部署中）
DEPLOY_FAILED （部署失败）
RELEASED （已经释放）
EXCEPTION （异常）
RELEASING （释放中）
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceStatus

    @InstanceStatus.setter
    def InstanceStatus(self, InstanceStatus):
        self._InstanceStatus = InstanceStatus

    @property
    def Count(self):
        """此状态节点总数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count


    def _deserialize(self, params):
        self._InstanceStatus = params.get("InstanceStatus")
        self._Count = params.get("Count")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class IntentSlotsPair(AbstractModel):
    """意图/槽位对

    """

    def __init__(self):
        r"""
        :param _Intent: 意图
注意：此字段可能返回 null，表示取不到有效值。
        :type Intent: str
        :param _Slots: 槽位
注意：此字段可能返回 null，表示取不到有效值。
        :type Slots: list of str
        """
        self._Intent = None
        self._Slots = None

    @property
    def Intent(self):
        """意图
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Intent

    @Intent.setter
    def Intent(self, Intent):
        self._Intent = Intent

    @property
    def Slots(self):
        """槽位
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._Slots

    @Slots.setter
    def Slots(self, Slots):
        self._Slots = Slots


    def _deserialize(self, params):
        self._Intent = params.get("Intent")
        self._Slots = params.get("Slots")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InterfaceCallTestRequest(AbstractModel):
    """InterfaceCallTest请求参数结构体

    """

    def __init__(self):
        r"""
        :param _CurlData: 请求的body
        :type CurlData: str
        :param _ApiId: 测试时对应的api-id
        :type ApiId: str
        :param _ServiceGroupId: 需要调用的服务组id,apiId为空时使用
        :type ServiceGroupId: str
        :param _RelativeUrl: 所测试接口的相对路径，apiId为空时使用
        :type RelativeUrl: str
        """
        self._CurlData = None
        self._ApiId = None
        self._ServiceGroupId = None
        self._RelativeUrl = None

    @property
    def CurlData(self):
        """请求的body
        :rtype: str
        """
        return self._CurlData

    @CurlData.setter
    def CurlData(self, CurlData):
        self._CurlData = CurlData

    @property
    def ApiId(self):
        """测试时对应的api-id
        :rtype: str
        """
        return self._ApiId

    @ApiId.setter
    def ApiId(self, ApiId):
        self._ApiId = ApiId

    @property
    def ServiceGroupId(self):
        """需要调用的服务组id,apiId为空时使用
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def RelativeUrl(self):
        """所测试接口的相对路径，apiId为空时使用
        :rtype: str
        """
        return self._RelativeUrl

    @RelativeUrl.setter
    def RelativeUrl(self, RelativeUrl):
        self._RelativeUrl = RelativeUrl


    def _deserialize(self, params):
        self._CurlData = params.get("CurlData")
        self._ApiId = params.get("ApiId")
        self._ServiceGroupId = params.get("ServiceGroupId")
        self._RelativeUrl = params.get("RelativeUrl")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class InterfaceCallTestResponse(AbstractModel):
    """InterfaceCallTest返回参数结构体

    """

    def __init__(self):
        r"""
        :param _CurlResponseRaw: 请求序列化后的回包
注意：此字段可能返回 null，表示取不到有效值。
        :type CurlResponseRaw: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._CurlResponseRaw = None
        self._RequestId = None

    @property
    def CurlResponseRaw(self):
        """请求序列化后的回包
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CurlResponseRaw

    @CurlResponseRaw.setter
    def CurlResponseRaw(self, CurlResponseRaw):
        self._CurlResponseRaw = CurlResponseRaw

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._CurlResponseRaw = params.get("CurlResponseRaw")
        self._RequestId = params.get("RequestId")


class IntranetCallInfo(AbstractModel):
    """内网调用信息

    """

    def __init__(self):
        r"""
        :param _IngressPrivateLinkInfo: 私有连接通道信息
注意：此字段可能返回 null，表示取不到有效值。
        :type IngressPrivateLinkInfo: :class:`tencentcloud.tione.v20211111.models.IngressPrivateLinkInfo`
        :param _ServiceEIPInfo: 共享弹性网卡信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceEIPInfo: list of ServiceEIPInfo
        :param _DefaultInnerCallInfos: 默认内网调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :type DefaultInnerCallInfos: list of DefaultInnerCallInfo
        :param _PrivateLinkInfos: 私有连接信息
注意：此字段可能返回 null，表示取不到有效值。
        :type PrivateLinkInfos: list of PrivateLinkInfo
        :param _PrivateLinkInfosV2: 基于新网关的私有连接信息
注意：此字段可能返回 null，表示取不到有效值。
        :type PrivateLinkInfosV2: list of PrivateLinkInfo
        """
        self._IngressPrivateLinkInfo = None
        self._ServiceEIPInfo = None
        self._DefaultInnerCallInfos = None
        self._PrivateLinkInfos = None
        self._PrivateLinkInfosV2 = None

    @property
    def IngressPrivateLinkInfo(self):
        """私有连接通道信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.IngressPrivateLinkInfo`
        """
        return self._IngressPrivateLinkInfo

    @IngressPrivateLinkInfo.setter
    def IngressPrivateLinkInfo(self, IngressPrivateLinkInfo):
        self._IngressPrivateLinkInfo = IngressPrivateLinkInfo

    @property
    def ServiceEIPInfo(self):
        """共享弹性网卡信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ServiceEIPInfo
        """
        return self._ServiceEIPInfo

    @ServiceEIPInfo.setter
    def ServiceEIPInfo(self, ServiceEIPInfo):
        self._ServiceEIPInfo = ServiceEIPInfo

    @property
    def DefaultInnerCallInfos(self):
        """默认内网调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DefaultInnerCallInfo
        """
        return self._DefaultInnerCallInfos

    @DefaultInnerCallInfos.setter
    def DefaultInnerCallInfos(self, DefaultInnerCallInfos):
        self._DefaultInnerCallInfos = DefaultInnerCallInfos

    @property
    def PrivateLinkInfos(self):
        """私有连接信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of PrivateLinkInfo
        """
        return self._PrivateLinkInfos

    @PrivateLinkInfos.setter
    def PrivateLinkInfos(self, PrivateLinkInfos):
        self._PrivateLinkInfos = PrivateLinkInfos

    @property
    def PrivateLinkInfosV2(self):
        """基于新网关的私有连接信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of PrivateLinkInfo
        """
        return self._PrivateLinkInfosV2

    @PrivateLinkInfosV2.setter
    def PrivateLinkInfosV2(self, PrivateLinkInfosV2):
        self._PrivateLinkInfosV2 = PrivateLinkInfosV2


    def _deserialize(self, params):
        if params.get("IngressPrivateLinkInfo") is not None:
            self._IngressPrivateLinkInfo = IngressPrivateLinkInfo()
            self._IngressPrivateLinkInfo._deserialize(params.get("IngressPrivateLinkInfo"))
        if params.get("ServiceEIPInfo") is not None:
            self._ServiceEIPInfo = []
            for item in params.get("ServiceEIPInfo"):
                obj = ServiceEIPInfo()
                obj._deserialize(item)
                self._ServiceEIPInfo.append(obj)
        if params.get("DefaultInnerCallInfos") is not None:
            self._DefaultInnerCallInfos = []
            for item in params.get("DefaultInnerCallInfos"):
                obj = DefaultInnerCallInfo()
                obj._deserialize(item)
                self._DefaultInnerCallInfos.append(obj)
        if params.get("PrivateLinkInfos") is not None:
            self._PrivateLinkInfos = []
            for item in params.get("PrivateLinkInfos"):
                obj = PrivateLinkInfo()
                obj._deserialize(item)
                self._PrivateLinkInfos.append(obj)
        if params.get("PrivateLinkInfosV2") is not None:
            self._PrivateLinkInfosV2 = []
            for item in params.get("PrivateLinkInfosV2"):
                obj = PrivateLinkInfo()
                obj._deserialize(item)
                self._PrivateLinkInfosV2.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class JobInput(AbstractModel):
    """任务输入

    """

    def __init__(self):
        r"""
        :param _JobType: 任务类型
注意：此字段可能返回 null，表示取不到有效值。
        :type JobType: str
        :param _DatasetId: 数据源Id
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetId: str
        :param _Uin: 主账号
注意：此字段可能返回 null，表示取不到有效值。
        :type Uin: str
        :param _SubAccountUin: 子账号
注意：此字段可能返回 null，表示取不到有效值。
        :type SubAccountUin: str
        :param _JobInpuData: 任务输入参数
注意：此字段可能返回 null，表示取不到有效值。
        :type JobInpuData: str
        :param _JobInputData: 任务输入参数
注意：此字段可能返回 null，表示取不到有效值。
        :type JobInputData: str
        """
        self._JobType = None
        self._DatasetId = None
        self._Uin = None
        self._SubAccountUin = None
        self._JobInpuData = None
        self._JobInputData = None

    @property
    def JobType(self):
        """任务类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._JobType

    @JobType.setter
    def JobType(self, JobType):
        self._JobType = JobType

    @property
    def DatasetId(self):
        """数据源Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def Uin(self):
        """主账号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def SubAccountUin(self):
        """子账号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubAccountUin

    @SubAccountUin.setter
    def SubAccountUin(self, SubAccountUin):
        self._SubAccountUin = SubAccountUin

    @property
    def JobInpuData(self):
        """任务输入参数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._JobInpuData

    @JobInpuData.setter
    def JobInpuData(self, JobInpuData):
        self._JobInpuData = JobInpuData

    @property
    def JobInputData(self):
        """任务输入参数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._JobInputData

    @JobInputData.setter
    def JobInputData(self, JobInputData):
        self._JobInputData = JobInputData


    def _deserialize(self, params):
        self._JobType = params.get("JobType")
        self._DatasetId = params.get("DatasetId")
        self._Uin = params.get("Uin")
        self._SubAccountUin = params.get("SubAccountUin")
        self._JobInpuData = params.get("JobInpuData")
        self._JobInputData = params.get("JobInputData")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class JobOutput(AbstractModel):
    """任务输出

    """

    def __init__(self):
        r"""
        :param _Error: 错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Error: :class:`tencentcloud.tione.v20211111.models.ErrorInfo`
        :param _JobOutputData: 任务输出
注意：此字段可能返回 null，表示取不到有效值。
        :type JobOutputData: str
        """
        self._Error = None
        self._JobOutputData = None

    @property
    def Error(self):
        """错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ErrorInfo`
        """
        return self._Error

    @Error.setter
    def Error(self, Error):
        self._Error = Error

    @property
    def JobOutputData(self):
        """任务输出
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._JobOutputData

    @JobOutputData.setter
    def JobOutputData(self, JobOutputData):
        self._JobOutputData = JobOutputData


    def _deserialize(self, params):
        if params.get("Error") is not None:
            self._Error = ErrorInfo()
            self._Error._deserialize(params.get("Error"))
        self._JobOutputData = params.get("JobOutputData")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class KeyPair(AbstractModel):
    """KeyPair 映射后的key（附加key或者标准key）

    """

    def __init__(self):
        r"""
        :param _Raw: 原始字段
        :type Raw: str
        :param _Key: 映射后的key（附加key或者标准key）
        :type Key: str
        :param _Idx: 索引
注意：此字段可能返回 null，表示取不到有效值。
        :type Idx: str
        """
        self._Raw = None
        self._Key = None
        self._Idx = None

    @property
    def Raw(self):
        """原始字段
        :rtype: str
        """
        return self._Raw

    @Raw.setter
    def Raw(self, Raw):
        self._Raw = Raw

    @property
    def Key(self):
        """映射后的key（附加key或者标准key）
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Idx(self):
        """索引
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Idx

    @Idx.setter
    def Idx(self, Idx):
        self._Idx = Idx


    def _deserialize(self, params):
        self._Raw = params.get("Raw")
        self._Key = params.get("Key")
        self._Idx = params.get("Idx")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class KeySetType(AbstractModel):
    """keypair set

    """

    def __init__(self):
        r"""
        :param _Keys: keyset
        :type Keys: list of KeyPair
        """
        self._Keys = None

    @property
    def Keys(self):
        """keyset
        :rtype: list of KeyPair
        """
        return self._Keys

    @Keys.setter
    def Keys(self, Keys):
        self._Keys = Keys


    def _deserialize(self, params):
        if params.get("Keys") is not None:
            self._Keys = []
            for item in params.get("Keys"):
                obj = KeyPair()
                obj._deserialize(item)
                self._Keys.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class KnowledgeDocument(AbstractModel):
    """知识库文档

    """

    def __init__(self):
        r"""
        :param _Name: 文件名
        :type Name: str
        :param _Content: 文件内容
        :type Content: str
        :param _Path: 可选，文件路径
        :type Path: str
        """
        self._Name = None
        self._Content = None
        self._Path = None

    @property
    def Name(self):
        """文件名
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Content(self):
        """文件内容
        :rtype: str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def Path(self):
        """可选，文件路径
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Content = params.get("Content")
        self._Path = params.get("Path")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LabelColor(AbstractModel):
    """标签颜色

    """

    def __init__(self):
        r"""
        :param _Num: 顺序数
        :type Num: int
        :param _Hex: hex颜色
        :type Hex: str
        """
        self._Num = None
        self._Hex = None

    @property
    def Num(self):
        """顺序数
        :rtype: int
        """
        return self._Num

    @Num.setter
    def Num(self, Num):
        self._Num = Num

    @property
    def Hex(self):
        """hex颜色
        :rtype: str
        """
        return self._Hex

    @Hex.setter
    def Hex(self, Hex):
        self._Hex = Hex


    def _deserialize(self, params):
        self._Num = params.get("Num")
        self._Hex = params.get("Hex")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LabelConfig(AbstractModel):
    """标签信息

    """

    def __init__(self):
        r"""
        :param _LabelName: 标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelName: str
        :param _LabelId: 标签id
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelId: int
        :param _Points: 标签在图像坐标点信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Points: list of Point
        :param _Blocks: OCR块结果
注意：此字段可能返回 null，表示取不到有效值。
        :type Blocks: list of OcrBlock
        """
        self._LabelName = None
        self._LabelId = None
        self._Points = None
        self._Blocks = None

    @property
    def LabelName(self):
        """标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LabelName

    @LabelName.setter
    def LabelName(self, LabelName):
        self._LabelName = LabelName

    @property
    def LabelId(self):
        """标签id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._LabelId

    @LabelId.setter
    def LabelId(self, LabelId):
        self._LabelId = LabelId

    @property
    def Points(self):
        """标签在图像坐标点信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Point
        """
        return self._Points

    @Points.setter
    def Points(self, Points):
        self._Points = Points

    @property
    def Blocks(self):
        """OCR块结果
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of OcrBlock
        """
        return self._Blocks

    @Blocks.setter
    def Blocks(self, Blocks):
        self._Blocks = Blocks


    def _deserialize(self, params):
        self._LabelName = params.get("LabelName")
        self._LabelId = params.get("LabelId")
        if params.get("Points") is not None:
            self._Points = []
            for item in params.get("Points"):
                obj = Point()
                obj._deserialize(item)
                self._Points.append(obj)
        if params.get("Blocks") is not None:
            self._Blocks = []
            for item in params.get("Blocks"):
                obj = OcrBlock()
                obj._deserialize(item)
                self._Blocks.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LabelDistributionInfo(AbstractModel):
    """标签分布

    """

    def __init__(self):
        r"""
        :param _FirstClassLabelValue: 一级标签名
        :type FirstClassLabelValue: str
        :param _FirstClassLabelCount: 标签个数
        :type FirstClassLabelCount: int
        :param _FirstClassLabelPercentage: 标签百分比
        :type FirstClassLabelPercentage: float
        :param _Choice: 文本分类题目属性(1.2.8新增)
SINGLE\MULTIPLE\MIX
描述题目是单选 还是多选；
注意：此字段可能返回 null，表示取不到有效值。
        :type Choice: str
        :param _TextClassLabelInfo: 文本数据标签分布信息
注意：此字段可能返回 null，表示取不到有效值。
        :type TextClassLabelInfo: :class:`tencentcloud.tione.v20211111.models.TextLabelDistributionInfo`
        """
        self._FirstClassLabelValue = None
        self._FirstClassLabelCount = None
        self._FirstClassLabelPercentage = None
        self._Choice = None
        self._TextClassLabelInfo = None

    @property
    def FirstClassLabelValue(self):
        """一级标签名
        :rtype: str
        """
        return self._FirstClassLabelValue

    @FirstClassLabelValue.setter
    def FirstClassLabelValue(self, FirstClassLabelValue):
        self._FirstClassLabelValue = FirstClassLabelValue

    @property
    def FirstClassLabelCount(self):
        """标签个数
        :rtype: int
        """
        return self._FirstClassLabelCount

    @FirstClassLabelCount.setter
    def FirstClassLabelCount(self, FirstClassLabelCount):
        self._FirstClassLabelCount = FirstClassLabelCount

    @property
    def FirstClassLabelPercentage(self):
        """标签百分比
        :rtype: float
        """
        return self._FirstClassLabelPercentage

    @FirstClassLabelPercentage.setter
    def FirstClassLabelPercentage(self, FirstClassLabelPercentage):
        self._FirstClassLabelPercentage = FirstClassLabelPercentage

    @property
    def Choice(self):
        """文本分类题目属性(1.2.8新增)
SINGLE\MULTIPLE\MIX
描述题目是单选 还是多选；
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Choice

    @Choice.setter
    def Choice(self, Choice):
        self._Choice = Choice

    @property
    def TextClassLabelInfo(self):
        """文本数据标签分布信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.TextLabelDistributionInfo`
        """
        return self._TextClassLabelInfo

    @TextClassLabelInfo.setter
    def TextClassLabelInfo(self, TextClassLabelInfo):
        self._TextClassLabelInfo = TextClassLabelInfo


    def _deserialize(self, params):
        self._FirstClassLabelValue = params.get("FirstClassLabelValue")
        self._FirstClassLabelCount = params.get("FirstClassLabelCount")
        self._FirstClassLabelPercentage = params.get("FirstClassLabelPercentage")
        self._Choice = params.get("Choice")
        if params.get("TextClassLabelInfo") is not None:
            self._TextClassLabelInfo = TextLabelDistributionInfo()
            self._TextClassLabelInfo._deserialize(params.get("TextClassLabelInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LabelTextInfo(AbstractModel):
    """返回的文本信息

    """

    def __init__(self):
        r"""
        :param _FileId: 文件id
        :type FileId: str
        :param _FileStatus: 标注状态：有标注结果，无标注结果
        :type FileStatus: int
        :param _TextContent: 文本内容

注意：此字段可能返回 null，表示取不到有效值。
        :type TextContent: str
        :param _AnnotationResult: 文本标注结果

注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationResult: str
        :param _ExtendedCorpus: 扩展预料库
注意：此字段可能返回 null，表示取不到有效值。
        :type ExtendedCorpus: list of ExtendedCorpus
        """
        self._FileId = None
        self._FileStatus = None
        self._TextContent = None
        self._AnnotationResult = None
        self._ExtendedCorpus = None

    @property
    def FileId(self):
        """文件id
        :rtype: str
        """
        return self._FileId

    @FileId.setter
    def FileId(self, FileId):
        self._FileId = FileId

    @property
    def FileStatus(self):
        """标注状态：有标注结果，无标注结果
        :rtype: int
        """
        return self._FileStatus

    @FileStatus.setter
    def FileStatus(self, FileStatus):
        self._FileStatus = FileStatus

    @property
    def TextContent(self):
        """文本内容

注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TextContent

    @TextContent.setter
    def TextContent(self, TextContent):
        self._TextContent = TextContent

    @property
    def AnnotationResult(self):
        """文本标注结果

注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationResult

    @AnnotationResult.setter
    def AnnotationResult(self, AnnotationResult):
        self._AnnotationResult = AnnotationResult

    @property
    def ExtendedCorpus(self):
        """扩展预料库
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ExtendedCorpus
        """
        return self._ExtendedCorpus

    @ExtendedCorpus.setter
    def ExtendedCorpus(self, ExtendedCorpus):
        self._ExtendedCorpus = ExtendedCorpus


    def _deserialize(self, params):
        self._FileId = params.get("FileId")
        self._FileStatus = params.get("FileStatus")
        self._TextContent = params.get("TextContent")
        self._AnnotationResult = params.get("AnnotationResult")
        if params.get("ExtendedCorpus") is not None:
            self._ExtendedCorpus = []
            for item in params.get("ExtendedCorpus"):
                obj = ExtendedCorpus()
                obj._deserialize(item)
                self._ExtendedCorpus.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LabelValue(AbstractModel):
    """描述label详细信息

    """

    def __init__(self):
        r"""
        :param _LabelName: 标签名称
        :type LabelName: str
        :param _LabelColor: 标签的颜色
        :type LabelColor: str
        """
        self._LabelName = None
        self._LabelColor = None

    @property
    def LabelName(self):
        """标签名称
        :rtype: str
        """
        return self._LabelName

    @LabelName.setter
    def LabelName(self, LabelName):
        self._LabelName = LabelName

    @property
    def LabelColor(self):
        """标签的颜色
        :rtype: str
        """
        return self._LabelColor

    @LabelColor.setter
    def LabelColor(self, LabelColor):
        self._LabelColor = LabelColor


    def _deserialize(self, params):
        self._LabelName = params.get("LabelName")
        self._LabelColor = params.get("LabelColor")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LifecycleScript(AbstractModel):
    """生命周期脚本信息

    """

    def __init__(self):
        r"""
        :param _Id: 生命周期脚本ID
        :type Id: str
        :param _Name: 生命周期脚本名称
        :type Name: str
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        :param _CreateScript: 创建脚本内容 (base64编码)
        :type CreateScript: str
        :param _StartScript: 启动脚本内容（base64编码）
        :type StartScript: str
        :param _Tags: 标签信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        """
        self._Id = None
        self._Name = None
        self._CreateTime = None
        self._UpdateTime = None
        self._CreateScript = None
        self._StartScript = None
        self._Tags = None

    @property
    def Id(self):
        """生命周期脚本ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """生命周期脚本名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def CreateScript(self):
        """创建脚本内容 (base64编码)
        :rtype: str
        """
        return self._CreateScript

    @CreateScript.setter
    def CreateScript(self, CreateScript):
        self._CreateScript = CreateScript

    @property
    def StartScript(self):
        """启动脚本内容（base64编码）
        :rtype: str
        """
        return self._StartScript

    @StartScript.setter
    def StartScript(self, StartScript):
        self._StartScript = StartScript

    @property
    def Tags(self):
        """标签信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._CreateScript = params.get("CreateScript")
        self._StartScript = params.get("StartScript")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LifecycleScriptItem(AbstractModel):
    """生命周期脚本列表ITEM

    """

    def __init__(self):
        r"""
        :param _Id: 生命周期脚本ID
        :type Id: str
        :param _Name: 生命周期脚本名称
        :type Name: str
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        :param _Tags: 标签信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        """
        self._Id = None
        self._Name = None
        self._CreateTime = None
        self._UpdateTime = None
        self._Tags = None

    @property
    def Id(self):
        """生命周期脚本ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """生命周期脚本名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def Tags(self):
        """标签信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LightEvalServiceInfo(AbstractModel):
    """Checkpoint 轻量体验服务信息

    """

    def __init__(self):
        r"""
        :param _CheckpointId: Checkpoint 的唯一 ID，与 CheckpointInfo.CheckpointId 对应
注意：此字段可能返回 null，表示取不到有效值。
        :type CheckpointId: str
        :param _ServiceGroupId: 推理服务组 ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceGroupId: str
        :param _ServiceGroupName: 推理服务组名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceGroupName: str
        :param _ServiceGroupStatus: 推理服务组状态
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceGroupStatus: str
        :param _ServiceCreateFailedReason: 推理服务创建失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceCreateFailedReason: str
        :param _ResourceGroupId: 资源组 ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _ResourceGroupName: 资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupName: str
        :param _ResourceInfo: 服务所需资源信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceInfo: :class:`tencentcloud.tione.v20211111.models.TrainResourceInfo`
        :param _ServiceId: 推理服务 ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceId: str
        """
        self._CheckpointId = None
        self._ServiceGroupId = None
        self._ServiceGroupName = None
        self._ServiceGroupStatus = None
        self._ServiceCreateFailedReason = None
        self._ResourceGroupId = None
        self._ResourceGroupName = None
        self._ResourceInfo = None
        self._ServiceId = None

    @property
    def CheckpointId(self):
        """Checkpoint 的唯一 ID，与 CheckpointInfo.CheckpointId 对应
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CheckpointId

    @CheckpointId.setter
    def CheckpointId(self, CheckpointId):
        self._CheckpointId = CheckpointId

    @property
    def ServiceGroupId(self):
        """推理服务组 ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def ServiceGroupName(self):
        """推理服务组名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ServiceGroupName

    @ServiceGroupName.setter
    def ServiceGroupName(self, ServiceGroupName):
        self._ServiceGroupName = ServiceGroupName

    @property
    def ServiceGroupStatus(self):
        """推理服务组状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ServiceGroupStatus

    @ServiceGroupStatus.setter
    def ServiceGroupStatus(self, ServiceGroupStatus):
        self._ServiceGroupStatus = ServiceGroupStatus

    @property
    def ServiceCreateFailedReason(self):
        """推理服务创建失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ServiceCreateFailedReason

    @ServiceCreateFailedReason.setter
    def ServiceCreateFailedReason(self, ServiceCreateFailedReason):
        self._ServiceCreateFailedReason = ServiceCreateFailedReason

    @property
    def ResourceGroupId(self):
        """资源组 ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceGroupName(self):
        """资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def ResourceInfo(self):
        """服务所需资源信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.TrainResourceInfo`
        """
        return self._ResourceInfo

    @ResourceInfo.setter
    def ResourceInfo(self, ResourceInfo):
        self._ResourceInfo = ResourceInfo

    @property
    def ServiceId(self):
        """推理服务 ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId


    def _deserialize(self, params):
        self._CheckpointId = params.get("CheckpointId")
        self._ServiceGroupId = params.get("ServiceGroupId")
        self._ServiceGroupName = params.get("ServiceGroupName")
        self._ServiceGroupStatus = params.get("ServiceGroupStatus")
        self._ServiceCreateFailedReason = params.get("ServiceCreateFailedReason")
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ResourceGroupName = params.get("ResourceGroupName")
        if params.get("ResourceInfo") is not None:
            self._ResourceInfo = TrainResourceInfo()
            self._ResourceInfo._deserialize(params.get("ResourceInfo"))
        self._ServiceId = params.get("ServiceId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LocalDisk(AbstractModel):
    """本地磁盘信息

    """

    def __init__(self):
        r"""
        :param _InstanceId: 节点ID
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceId: str
        :param _LocalPath: 本地路径
注意：此字段可能返回 null，表示取不到有效值。
        :type LocalPath: str
        """
        self._InstanceId = None
        self._LocalPath = None

    @property
    def InstanceId(self):
        """节点ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def LocalPath(self):
        """本地路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LocalPath

    @LocalPath.setter
    def LocalPath(self, LocalPath):
        self._LocalPath = LocalPath


    def _deserialize(self, params):
        self._InstanceId = params.get("InstanceId")
        self._LocalPath = params.get("LocalPath")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LogConfig(AbstractModel):
    """日志配置

    """

    def __init__(self):
        r"""
        :param _LogsetId: 日志需要投递到cls的日志集
注意：此字段可能返回 null，表示取不到有效值。
        :type LogsetId: str
        :param _TopicId: 日志需要投递到cls的主题
注意：此字段可能返回 null，表示取不到有效值。
        :type TopicId: str
        """
        self._LogsetId = None
        self._TopicId = None

    @property
    def LogsetId(self):
        """日志需要投递到cls的日志集
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LogsetId

    @LogsetId.setter
    def LogsetId(self, LogsetId):
        self._LogsetId = LogsetId

    @property
    def TopicId(self):
        """日志需要投递到cls的主题
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TopicId

    @TopicId.setter
    def TopicId(self, TopicId):
        self._TopicId = TopicId


    def _deserialize(self, params):
        self._LogsetId = params.get("LogsetId")
        self._TopicId = params.get("TopicId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LogIdentity(AbstractModel):
    """单条日志数据结构

    """

    def __init__(self):
        r"""
        :param _Id: 单条日志的ID
注意：此字段可能返回 null，表示取不到有效值。
        :type Id: str
        :param _Message: 单条日志的内容
注意：此字段可能返回 null，表示取不到有效值。
        :type Message: str
        :param _PodName: 这条日志对应的Pod名称
注意：此字段可能返回 null，表示取不到有效值。
        :type PodName: str
        :param _Timestamp: 日志的时间戳（RFC3339格式的时间字符串）
注意：此字段可能返回 null，表示取不到有效值。
        :type Timestamp: str
        """
        self._Id = None
        self._Message = None
        self._PodName = None
        self._Timestamp = None

    @property
    def Id(self):
        """单条日志的ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Message(self):
        """单条日志的内容
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message

    @property
    def PodName(self):
        """这条日志对应的Pod名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def Timestamp(self):
        """日志的时间戳（RFC3339格式的时间字符串）
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Timestamp

    @Timestamp.setter
    def Timestamp(self, Timestamp):
        self._Timestamp = Timestamp


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Message = params.get("Message")
        self._PodName = params.get("PodName")
        self._Timestamp = params.get("Timestamp")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class LogParam(AbstractModel):
    """评测日志参数

    """

    def __init__(self):
        r"""
        :param _Service: 查询用字段
注意：此字段可能返回 null，表示取不到有效值。
        :type Service: str
        :param _ServiceId: 查询用字段
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceId: str
        :param _InstanceType: 查询用字段
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceType: str
        :param _InstanceId: 查询用字段
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceId: str
        :param _StartTime: 查询起始时间
注意：此字段可能返回 null，表示取不到有效值。
        :type StartTime: str
        """
        self._Service = None
        self._ServiceId = None
        self._InstanceType = None
        self._InstanceId = None
        self._StartTime = None

    @property
    def Service(self):
        """查询用字段
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Service

    @Service.setter
    def Service(self, Service):
        self._Service = Service

    @property
    def ServiceId(self):
        """查询用字段
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId

    @property
    def InstanceType(self):
        """查询用字段
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def InstanceId(self):
        """查询用字段
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def StartTime(self):
        """查询起始时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime


    def _deserialize(self, params):
        self._Service = params.get("Service")
        self._ServiceId = params.get("ServiceId")
        self._InstanceType = params.get("InstanceType")
        self._InstanceId = params.get("InstanceId")
        self._StartTime = params.get("StartTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MLDataConfig(AbstractModel):
    """自动学习数据配置

    """

    def __init__(self):
        r"""
        :param _DataSource: 数据来源
注意：此字段可能返回 null，表示取不到有效值。
        :type DataSource: str
        :param _TrainDatasetIds: 训练数据集
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainDatasetIds: list of str
        :param _TrainDatasetLabels: 训练集标签
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainDatasetLabels: list of str
        :param _ValidationDatasetIds: 验证数据集
注意：此字段可能返回 null，表示取不到有效值。
        :type ValidationDatasetIds: list of str
        :param _ValidationDatasetLabels: 验证集标签
注意：此字段可能返回 null，表示取不到有效值。
        :type ValidationDatasetLabels: list of str
        :param _ValidationPercent: 验证集百分比
注意：此字段可能返回 null，表示取不到有效值。
        :type ValidationPercent: int
        :param _TestDatasetIds: 测试数据集
注意：此字段可能返回 null，表示取不到有效值。
        :type TestDatasetIds: list of str
        :param _TestDatasetLabels: 测试数据标签
注意：此字段可能返回 null，表示取不到有效值。
        :type TestDatasetLabels: list of str
        :param _LogEnable: 是否开启日志投递
注意：此字段可能返回 null，表示取不到有效值。
        :type LogEnable: bool
        :param _LogConfig: 日志投递配置
注意：此字段可能返回 null，表示取不到有效值。
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _TrainDatasetLabelsMap: 训练数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainDatasetLabelsMap: str
        :param _TestDatasetLabelsMap: 测试数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :type TestDatasetLabelsMap: str
        :param _ValidationDatasetLabelsMap: 验证数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :type ValidationDatasetLabelsMap: str
        :param _TrainDatasetCosPathInfo: 训练数据COS信息
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainDatasetCosPathInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _TestDatasetCosPathInfo: 评测数据COS信息
注意：此字段可能返回 null，表示取不到有效值。
        :type TestDatasetCosPathInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        self._DataSource = None
        self._TrainDatasetIds = None
        self._TrainDatasetLabels = None
        self._ValidationDatasetIds = None
        self._ValidationDatasetLabels = None
        self._ValidationPercent = None
        self._TestDatasetIds = None
        self._TestDatasetLabels = None
        self._LogEnable = None
        self._LogConfig = None
        self._TrainDatasetLabelsMap = None
        self._TestDatasetLabelsMap = None
        self._ValidationDatasetLabelsMap = None
        self._TrainDatasetCosPathInfo = None
        self._TestDatasetCosPathInfo = None

    @property
    def DataSource(self):
        """数据来源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DataSource

    @DataSource.setter
    def DataSource(self, DataSource):
        self._DataSource = DataSource

    @property
    def TrainDatasetIds(self):
        """训练数据集
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._TrainDatasetIds

    @TrainDatasetIds.setter
    def TrainDatasetIds(self, TrainDatasetIds):
        self._TrainDatasetIds = TrainDatasetIds

    @property
    def TrainDatasetLabels(self):
        """训练集标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._TrainDatasetLabels

    @TrainDatasetLabels.setter
    def TrainDatasetLabels(self, TrainDatasetLabels):
        self._TrainDatasetLabels = TrainDatasetLabels

    @property
    def ValidationDatasetIds(self):
        """验证数据集
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._ValidationDatasetIds

    @ValidationDatasetIds.setter
    def ValidationDatasetIds(self, ValidationDatasetIds):
        self._ValidationDatasetIds = ValidationDatasetIds

    @property
    def ValidationDatasetLabels(self):
        """验证集标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._ValidationDatasetLabels

    @ValidationDatasetLabels.setter
    def ValidationDatasetLabels(self, ValidationDatasetLabels):
        self._ValidationDatasetLabels = ValidationDatasetLabels

    @property
    def ValidationPercent(self):
        """验证集百分比
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ValidationPercent

    @ValidationPercent.setter
    def ValidationPercent(self, ValidationPercent):
        self._ValidationPercent = ValidationPercent

    @property
    def TestDatasetIds(self):
        """测试数据集
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._TestDatasetIds

    @TestDatasetIds.setter
    def TestDatasetIds(self, TestDatasetIds):
        self._TestDatasetIds = TestDatasetIds

    @property
    def TestDatasetLabels(self):
        """测试数据标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._TestDatasetLabels

    @TestDatasetLabels.setter
    def TestDatasetLabels(self, TestDatasetLabels):
        self._TestDatasetLabels = TestDatasetLabels

    @property
    def LogEnable(self):
        """是否开启日志投递
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def LogConfig(self):
        """日志投递配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def TrainDatasetLabelsMap(self):
        """训练数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainDatasetLabelsMap

    @TrainDatasetLabelsMap.setter
    def TrainDatasetLabelsMap(self, TrainDatasetLabelsMap):
        self._TrainDatasetLabelsMap = TrainDatasetLabelsMap

    @property
    def TestDatasetLabelsMap(self):
        """测试数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TestDatasetLabelsMap

    @TestDatasetLabelsMap.setter
    def TestDatasetLabelsMap(self, TestDatasetLabelsMap):
        self._TestDatasetLabelsMap = TestDatasetLabelsMap

    @property
    def ValidationDatasetLabelsMap(self):
        """验证数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ValidationDatasetLabelsMap

    @ValidationDatasetLabelsMap.setter
    def ValidationDatasetLabelsMap(self, ValidationDatasetLabelsMap):
        self._ValidationDatasetLabelsMap = ValidationDatasetLabelsMap

    @property
    def TrainDatasetCosPathInfo(self):
        """训练数据COS信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._TrainDatasetCosPathInfo

    @TrainDatasetCosPathInfo.setter
    def TrainDatasetCosPathInfo(self, TrainDatasetCosPathInfo):
        self._TrainDatasetCosPathInfo = TrainDatasetCosPathInfo

    @property
    def TestDatasetCosPathInfo(self):
        """评测数据COS信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._TestDatasetCosPathInfo

    @TestDatasetCosPathInfo.setter
    def TestDatasetCosPathInfo(self, TestDatasetCosPathInfo):
        self._TestDatasetCosPathInfo = TestDatasetCosPathInfo


    def _deserialize(self, params):
        self._DataSource = params.get("DataSource")
        self._TrainDatasetIds = params.get("TrainDatasetIds")
        self._TrainDatasetLabels = params.get("TrainDatasetLabels")
        self._ValidationDatasetIds = params.get("ValidationDatasetIds")
        self._ValidationDatasetLabels = params.get("ValidationDatasetLabels")
        self._ValidationPercent = params.get("ValidationPercent")
        self._TestDatasetIds = params.get("TestDatasetIds")
        self._TestDatasetLabels = params.get("TestDatasetLabels")
        self._LogEnable = params.get("LogEnable")
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        self._TrainDatasetLabelsMap = params.get("TrainDatasetLabelsMap")
        self._TestDatasetLabelsMap = params.get("TestDatasetLabelsMap")
        self._ValidationDatasetLabelsMap = params.get("ValidationDatasetLabelsMap")
        if params.get("TrainDatasetCosPathInfo") is not None:
            self._TrainDatasetCosPathInfo = CosPathInfo()
            self._TrainDatasetCosPathInfo._deserialize(params.get("TrainDatasetCosPathInfo"))
        if params.get("TestDatasetCosPathInfo") is not None:
            self._TestDatasetCosPathInfo = CosPathInfo()
            self._TestDatasetCosPathInfo._deserialize(params.get("TestDatasetCosPathInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MaterialInfo(AbstractModel):
    """物料信息

    """

    def __init__(self):
        r"""
        :param _StorageType: 存储类型
注意：此字段可能返回 null，表示取不到有效值。
        :type StorageType: str
        :param _CosPathInfo: Cos存储信息
注意：此字段可能返回 null，表示取不到有效值。
        :type CosPathInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _MaterialName: 物料名，支持Code、Model
注意：此字段可能返回 null，表示取不到有效值。
        :type MaterialName: str
        :param _MaterialType: 物料类型，支持PreSet(预置)、 Custom(自定义)
注意：此字段可能返回 null，表示取不到有效值。
        :type MaterialType: str
        :param _CFSSource: cfs物料信息
注意：此字段可能返回 null，表示取不到有效值。
        :type CFSSource: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        :param _MountPath: 训练任务挂载路径
注意：此字段可能返回 null，表示取不到有效值。
        :type MountPath: str
        """
        self._StorageType = None
        self._CosPathInfo = None
        self._MaterialName = None
        self._MaterialType = None
        self._CFSSource = None
        self._MountPath = None

    @property
    def StorageType(self):
        """存储类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StorageType

    @StorageType.setter
    def StorageType(self, StorageType):
        self._StorageType = StorageType

    @property
    def CosPathInfo(self):
        """Cos存储信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._CosPathInfo

    @CosPathInfo.setter
    def CosPathInfo(self, CosPathInfo):
        self._CosPathInfo = CosPathInfo

    @property
    def MaterialName(self):
        """物料名，支持Code、Model
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._MaterialName

    @MaterialName.setter
    def MaterialName(self, MaterialName):
        self._MaterialName = MaterialName

    @property
    def MaterialType(self):
        """物料类型，支持PreSet(预置)、 Custom(自定义)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._MaterialType

    @MaterialType.setter
    def MaterialType(self, MaterialType):
        self._MaterialType = MaterialType

    @property
    def CFSSource(self):
        """cfs物料信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        """
        return self._CFSSource

    @CFSSource.setter
    def CFSSource(self, CFSSource):
        self._CFSSource = CFSSource

    @property
    def MountPath(self):
        """训练任务挂载路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._MountPath

    @MountPath.setter
    def MountPath(self, MountPath):
        self._MountPath = MountPath


    def _deserialize(self, params):
        self._StorageType = params.get("StorageType")
        if params.get("CosPathInfo") is not None:
            self._CosPathInfo = CosPathInfo()
            self._CosPathInfo._deserialize(params.get("CosPathInfo"))
        self._MaterialName = params.get("MaterialName")
        self._MaterialType = params.get("MaterialType")
        if params.get("CFSSource") is not None:
            self._CFSSource = CFSConfig()
            self._CFSSource._deserialize(params.get("CFSSource"))
        self._MountPath = params.get("MountPath")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Message(AbstractModel):
    """对话输入内容

    """

    def __init__(self):
        r"""
        :param _Role: 角色名。支持三个角色：system、user、assistant，其中system仅开头可出现一次，也可忽略。
        :type Role: str
        :param _Content: 对话输入内容。
        :type Content: str
        :param _MultiModalContents: 多模态对话输入内容，Content与MultiModalContents两者只需要填写其中一个即可，当对话中包含多模态对话信息时，则填写本参数
        :type MultiModalContents: list of MultiModalContent
        """
        self._Role = None
        self._Content = None
        self._MultiModalContents = None

    @property
    def Role(self):
        """角色名。支持三个角色：system、user、assistant，其中system仅开头可出现一次，也可忽略。
        :rtype: str
        """
        return self._Role

    @Role.setter
    def Role(self, Role):
        self._Role = Role

    @property
    def Content(self):
        """对话输入内容。
        :rtype: str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def MultiModalContents(self):
        """多模态对话输入内容，Content与MultiModalContents两者只需要填写其中一个即可，当对话中包含多模态对话信息时，则填写本参数
        :rtype: list of MultiModalContent
        """
        return self._MultiModalContents

    @MultiModalContents.setter
    def MultiModalContents(self, MultiModalContents):
        self._MultiModalContents = MultiModalContents


    def _deserialize(self, params):
        self._Role = params.get("Role")
        self._Content = params.get("Content")
        if params.get("MultiModalContents") is not None:
            self._MultiModalContents = []
            for item in params.get("MultiModalContents"):
                obj = MultiModalContent()
                obj._deserialize(item)
                self._MultiModalContents.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class MetricData(AbstractModel):
    """指标数据

    """

    def __init__(self):
        r"""
        :param _TaskId: 训练任务id
        :type TaskId: str
        :param _Timestamp: 时间戳.unix timestamp,单位为秒
注意：此字段可能返回 null，表示取不到有效值。
        :type Timestamp: int
        :param _Uin: 用户uin
注意：此字段可能返回 null，表示取不到有效值。
        :type Uin: str
        :param _Epoch: 本次上报数据所处的训练周期数。
注意：此字段可能返回 null，表示取不到有效值。
        :type Epoch: int
        :param _Step: 本次上报数据所处的训练迭代次数。
注意：此字段可能返回 null，表示取不到有效值。
        :type Step: int
        :param _TotalSteps: 训练停止所需的迭代总数。
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalSteps: int
        :param _Points: 数据点。数组元素为不同指标的数据。数组长度不超过10。
注意：此字段可能返回 null，表示取不到有效值。
        :type Points: list of DataPoint
        """
        self._TaskId = None
        self._Timestamp = None
        self._Uin = None
        self._Epoch = None
        self._Step = None
        self._TotalSteps = None
        self._Points = None

    @property
    def TaskId(self):
        """训练任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Timestamp(self):
        """时间戳.unix timestamp,单位为秒
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Timestamp

    @Timestamp.setter
    def Timestamp(self, Timestamp):
        self._Timestamp = Timestamp

    @property
    def Uin(self):
        """用户uin
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def Epoch(self):
        """本次上报数据所处的训练周期数。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Epoch

    @Epoch.setter
    def Epoch(self, Epoch):
        self._Epoch = Epoch

    @property
    def Step(self):
        """本次上报数据所处的训练迭代次数。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Step

    @Step.setter
    def Step(self, Step):
        self._Step = Step

    @property
    def TotalSteps(self):
        """训练停止所需的迭代总数。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalSteps

    @TotalSteps.setter
    def TotalSteps(self, TotalSteps):
        self._TotalSteps = TotalSteps

    @property
    def Points(self):
        """数据点。数组元素为不同指标的数据。数组长度不超过10。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataPoint
        """
        return self._Points

    @Points.setter
    def Points(self, Points):
        self._Points = Points


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Timestamp = params.get("Timestamp")
        self._Uin = params.get("Uin")
        self._Epoch = params.get("Epoch")
        self._Step = params.get("Step")
        self._TotalSteps = params.get("TotalSteps")
        if params.get("Points") is not None:
            self._Points = []
            for item in params.get("Points"):
                obj = DataPoint()
                obj._deserialize(item)
                self._Points.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModelAccEngineVersion(AbstractModel):
    """模型加速引擎版本

    """

    def __init__(self):
        r"""
        :param _ModelFormat: 模型格式
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelFormat: str
        :param _EngineVersions: 引擎版本信息
注意：此字段可能返回 null，表示取不到有效值。
        :type EngineVersions: list of EngineVersion
        """
        self._ModelFormat = None
        self._EngineVersions = None

    @property
    def ModelFormat(self):
        """模型格式
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelFormat

    @ModelFormat.setter
    def ModelFormat(self, ModelFormat):
        self._ModelFormat = ModelFormat

    @property
    def EngineVersions(self):
        """引擎版本信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of EngineVersion
        """
        return self._EngineVersions

    @EngineVersions.setter
    def EngineVersions(self, EngineVersions):
        self._EngineVersions = EngineVersions


    def _deserialize(self, params):
        self._ModelFormat = params.get("ModelFormat")
        if params.get("EngineVersions") is not None:
            self._EngineVersions = []
            for item in params.get("EngineVersions"):
                obj = EngineVersion()
                obj._deserialize(item)
                self._EngineVersions.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModelAccResourceConfigInfo(AbstractModel):
    """模型优化资源配置

    """

    def __init__(self):
        r"""
        :param _GpuType: 卡型号
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuType: str
        :param _Cpu: cpu核数，单位1/1000
注意：此字段可能返回 null，表示取不到有效值。
        :type Cpu: int
        :param _Memory: 内存数量，单位MB
注意：此字段可能返回 null，表示取不到有效值。
        :type Memory: int
        :param _Gpu: gpu数量，单位1/100
注意：此字段可能返回 null，表示取不到有效值。
        :type Gpu: int
        """
        self._GpuType = None
        self._Cpu = None
        self._Memory = None
        self._Gpu = None

    @property
    def GpuType(self):
        """卡型号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType

    @property
    def Cpu(self):
        """cpu核数，单位1/1000
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Cpu

    @Cpu.setter
    def Cpu(self, Cpu):
        self._Cpu = Cpu

    @property
    def Memory(self):
        """内存数量，单位MB
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Memory

    @Memory.setter
    def Memory(self, Memory):
        self._Memory = Memory

    @property
    def Gpu(self):
        """gpu数量，单位1/100
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Gpu

    @Gpu.setter
    def Gpu(self, Gpu):
        self._Gpu = Gpu


    def _deserialize(self, params):
        self._GpuType = params.get("GpuType")
        self._Cpu = params.get("Cpu")
        self._Memory = params.get("Memory")
        self._Gpu = params.get("Gpu")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModelAccelerateConfig(AbstractModel):
    """模型优化配置

    """

    def __init__(self):
        r"""
        :param _OptimizeEnable: 是否开启优化开关
        :type OptimizeEnable: bool
        :param _OptimizationLevel: 优化级别
        :type OptimizationLevel: str
        :param _GpuType: gpu 卡类型
        :type GpuType: str
        """
        self._OptimizeEnable = None
        self._OptimizationLevel = None
        self._GpuType = None

    @property
    def OptimizeEnable(self):
        """是否开启优化开关
        :rtype: bool
        """
        return self._OptimizeEnable

    @OptimizeEnable.setter
    def OptimizeEnable(self, OptimizeEnable):
        self._OptimizeEnable = OptimizeEnable

    @property
    def OptimizationLevel(self):
        """优化级别
        :rtype: str
        """
        return self._OptimizationLevel

    @OptimizationLevel.setter
    def OptimizationLevel(self, OptimizationLevel):
        self._OptimizationLevel = OptimizationLevel

    @property
    def GpuType(self):
        """gpu 卡类型
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType


    def _deserialize(self, params):
        self._OptimizeEnable = params.get("OptimizeEnable")
        self._OptimizationLevel = params.get("OptimizationLevel")
        self._GpuType = params.get("GpuType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModelAccelerateTask(AbstractModel):
    """模型加速任务

    """

    def __init__(self):
        r"""
        :param _ModelAccTaskId: 模型加速任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccTaskId: str
        :param _ModelAccTaskName: 模型加速任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccTaskName: str
        :param _ModelId: 模型ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelId: str
        :param _ModelName: 模型名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelName: str
        :param _ModelVersion: 模型版本
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelVersion: str
        :param _ModelSource: 模型来源
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelSource: str
        :param _OptimizationLevel: 优化级别
注意：此字段可能返回 null，表示取不到有效值。
        :type OptimizationLevel: str
        :param _TaskStatus: 任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskStatus: str
        :param _ModelInputNum: input节点个数
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelInputNum: int
        :param _ModelInputInfos: input节点信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelInputInfos: list of ModelInputInfo
        :param _GPUType: GPU型号
注意：此字段可能返回 null，表示取不到有效值。
        :type GPUType: str
        :param _ChargeType: 计费模式
注意：此字段可能返回 null，表示取不到有效值。
        :type ChargeType: str
        :param _Speedup: 加速比
注意：此字段可能返回 null，表示取不到有效值。
        :type Speedup: str
        :param _ModelInputPath: 模型输入cos路径
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelInputPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _ModelOutputPath: 模型输出cos路径
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelOutputPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _ErrorMsg: 错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrorMsg: str
        :param _AlgorithmFramework: 算法框架
注意：此字段可能返回 null，表示取不到有效值。
        :type AlgorithmFramework: str
        :param _WaitNumber: 排队个数
注意：此字段可能返回 null，表示取不到有效值。
        :type WaitNumber: int
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _TaskProgress: 任务进度
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskProgress: int
        :param _ModelFormat: 模型格式
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelFormat: str
        :param _TensorInfos: 模型Tensor信息
注意：此字段可能返回 null，表示取不到有效值。
        :type TensorInfos: list of str
        :param _HyperParameter: 模型专业参数
注意：此字段可能返回 null，表示取不到有效值。
        :type HyperParameter: :class:`tencentcloud.tione.v20211111.models.HyperParameter`
        :param _AccEngineVersion: 加速引擎版本
注意：此字段可能返回 null，表示取不到有效值。
        :type AccEngineVersion: str
        :param _Tags: 标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _IsSaved: 优化模型是否已保存到模型仓库
注意：此字段可能返回 null，表示取不到有效值。
        :type IsSaved: bool
        :param _ModelSignature: SAVED_MODEL保存时配置的签名
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelSignature: str
        :param _QATModel: 是否是QAT模型
注意：此字段可能返回 null，表示取不到有效值。
        :type QATModel: bool
        :param _FrameworkVersion: 加速引擎对应的框架版本
注意：此字段可能返回 null，表示取不到有效值。
        :type FrameworkVersion: str
        :param _ModelVersionId: 模型版本ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelVersionId: str
        :param _ResourceGroupId: 资源组id
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _ResourceGroupName: 资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupName: str
        :param _ResourceGroupSWType: 资源组类型
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupSWType: str
        """
        self._ModelAccTaskId = None
        self._ModelAccTaskName = None
        self._ModelId = None
        self._ModelName = None
        self._ModelVersion = None
        self._ModelSource = None
        self._OptimizationLevel = None
        self._TaskStatus = None
        self._ModelInputNum = None
        self._ModelInputInfos = None
        self._GPUType = None
        self._ChargeType = None
        self._Speedup = None
        self._ModelInputPath = None
        self._ModelOutputPath = None
        self._ErrorMsg = None
        self._AlgorithmFramework = None
        self._WaitNumber = None
        self._CreateTime = None
        self._TaskProgress = None
        self._ModelFormat = None
        self._TensorInfos = None
        self._HyperParameter = None
        self._AccEngineVersion = None
        self._Tags = None
        self._IsSaved = None
        self._ModelSignature = None
        self._QATModel = None
        self._FrameworkVersion = None
        self._ModelVersionId = None
        self._ResourceGroupId = None
        self._ResourceGroupName = None
        self._ResourceGroupSWType = None

    @property
    def ModelAccTaskId(self):
        """模型加速任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelAccTaskId

    @ModelAccTaskId.setter
    def ModelAccTaskId(self, ModelAccTaskId):
        self._ModelAccTaskId = ModelAccTaskId

    @property
    def ModelAccTaskName(self):
        """模型加速任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelAccTaskName

    @ModelAccTaskName.setter
    def ModelAccTaskName(self, ModelAccTaskName):
        self._ModelAccTaskName = ModelAccTaskName

    @property
    def ModelId(self):
        """模型ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def ModelName(self):
        """模型名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelName

    @ModelName.setter
    def ModelName(self, ModelName):
        self._ModelName = ModelName

    @property
    def ModelVersion(self):
        """模型版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelVersion

    @ModelVersion.setter
    def ModelVersion(self, ModelVersion):
        self._ModelVersion = ModelVersion

    @property
    def ModelSource(self):
        """模型来源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelSource

    @ModelSource.setter
    def ModelSource(self, ModelSource):
        self._ModelSource = ModelSource

    @property
    def OptimizationLevel(self):
        """优化级别
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._OptimizationLevel

    @OptimizationLevel.setter
    def OptimizationLevel(self, OptimizationLevel):
        self._OptimizationLevel = OptimizationLevel

    @property
    def TaskStatus(self):
        """任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskStatus

    @TaskStatus.setter
    def TaskStatus(self, TaskStatus):
        self._TaskStatus = TaskStatus

    @property
    def ModelInputNum(self):
        """input节点个数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ModelInputNum

    @ModelInputNum.setter
    def ModelInputNum(self, ModelInputNum):
        self._ModelInputNum = ModelInputNum

    @property
    def ModelInputInfos(self):
        """input节点信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ModelInputInfo
        """
        return self._ModelInputInfos

    @ModelInputInfos.setter
    def ModelInputInfos(self, ModelInputInfos):
        self._ModelInputInfos = ModelInputInfos

    @property
    def GPUType(self):
        """GPU型号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GPUType

    @GPUType.setter
    def GPUType(self, GPUType):
        self._GPUType = GPUType

    @property
    def ChargeType(self):
        """计费模式
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def Speedup(self):
        """加速比
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Speedup

    @Speedup.setter
    def Speedup(self, Speedup):
        self._Speedup = Speedup

    @property
    def ModelInputPath(self):
        """模型输入cos路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._ModelInputPath

    @ModelInputPath.setter
    def ModelInputPath(self, ModelInputPath):
        self._ModelInputPath = ModelInputPath

    @property
    def ModelOutputPath(self):
        """模型输出cos路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._ModelOutputPath

    @ModelOutputPath.setter
    def ModelOutputPath(self, ModelOutputPath):
        self._ModelOutputPath = ModelOutputPath

    @property
    def ErrorMsg(self):
        """错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrorMsg

    @ErrorMsg.setter
    def ErrorMsg(self, ErrorMsg):
        self._ErrorMsg = ErrorMsg

    @property
    def AlgorithmFramework(self):
        """算法框架
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AlgorithmFramework

    @AlgorithmFramework.setter
    def AlgorithmFramework(self, AlgorithmFramework):
        self._AlgorithmFramework = AlgorithmFramework

    @property
    def WaitNumber(self):
        """排队个数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._WaitNumber

    @WaitNumber.setter
    def WaitNumber(self, WaitNumber):
        self._WaitNumber = WaitNumber

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def TaskProgress(self):
        """任务进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TaskProgress

    @TaskProgress.setter
    def TaskProgress(self, TaskProgress):
        self._TaskProgress = TaskProgress

    @property
    def ModelFormat(self):
        """模型格式
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelFormat

    @ModelFormat.setter
    def ModelFormat(self, ModelFormat):
        self._ModelFormat = ModelFormat

    @property
    def TensorInfos(self):
        """模型Tensor信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._TensorInfos

    @TensorInfos.setter
    def TensorInfos(self, TensorInfos):
        self._TensorInfos = TensorInfos

    @property
    def HyperParameter(self):
        """模型专业参数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.HyperParameter`
        """
        return self._HyperParameter

    @HyperParameter.setter
    def HyperParameter(self, HyperParameter):
        self._HyperParameter = HyperParameter

    @property
    def AccEngineVersion(self):
        """加速引擎版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AccEngineVersion

    @AccEngineVersion.setter
    def AccEngineVersion(self, AccEngineVersion):
        self._AccEngineVersion = AccEngineVersion

    @property
    def Tags(self):
        """标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def IsSaved(self):
        """优化模型是否已保存到模型仓库
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsSaved

    @IsSaved.setter
    def IsSaved(self, IsSaved):
        self._IsSaved = IsSaved

    @property
    def ModelSignature(self):
        """SAVED_MODEL保存时配置的签名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelSignature

    @ModelSignature.setter
    def ModelSignature(self, ModelSignature):
        self._ModelSignature = ModelSignature

    @property
    def QATModel(self):
        """是否是QAT模型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._QATModel

    @QATModel.setter
    def QATModel(self, QATModel):
        self._QATModel = QATModel

    @property
    def FrameworkVersion(self):
        """加速引擎对应的框架版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FrameworkVersion

    @FrameworkVersion.setter
    def FrameworkVersion(self, FrameworkVersion):
        self._FrameworkVersion = FrameworkVersion

    @property
    def ModelVersionId(self):
        """模型版本ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelVersionId

    @ModelVersionId.setter
    def ModelVersionId(self, ModelVersionId):
        self._ModelVersionId = ModelVersionId

    @property
    def ResourceGroupId(self):
        """资源组id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceGroupName(self):
        """资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def ResourceGroupSWType(self):
        """资源组类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType


    def _deserialize(self, params):
        self._ModelAccTaskId = params.get("ModelAccTaskId")
        self._ModelAccTaskName = params.get("ModelAccTaskName")
        self._ModelId = params.get("ModelId")
        self._ModelName = params.get("ModelName")
        self._ModelVersion = params.get("ModelVersion")
        self._ModelSource = params.get("ModelSource")
        self._OptimizationLevel = params.get("OptimizationLevel")
        self._TaskStatus = params.get("TaskStatus")
        self._ModelInputNum = params.get("ModelInputNum")
        if params.get("ModelInputInfos") is not None:
            self._ModelInputInfos = []
            for item in params.get("ModelInputInfos"):
                obj = ModelInputInfo()
                obj._deserialize(item)
                self._ModelInputInfos.append(obj)
        self._GPUType = params.get("GPUType")
        self._ChargeType = params.get("ChargeType")
        self._Speedup = params.get("Speedup")
        if params.get("ModelInputPath") is not None:
            self._ModelInputPath = CosPathInfo()
            self._ModelInputPath._deserialize(params.get("ModelInputPath"))
        if params.get("ModelOutputPath") is not None:
            self._ModelOutputPath = CosPathInfo()
            self._ModelOutputPath._deserialize(params.get("ModelOutputPath"))
        self._ErrorMsg = params.get("ErrorMsg")
        self._AlgorithmFramework = params.get("AlgorithmFramework")
        self._WaitNumber = params.get("WaitNumber")
        self._CreateTime = params.get("CreateTime")
        self._TaskProgress = params.get("TaskProgress")
        self._ModelFormat = params.get("ModelFormat")
        self._TensorInfos = params.get("TensorInfos")
        if params.get("HyperParameter") is not None:
            self._HyperParameter = HyperParameter()
            self._HyperParameter._deserialize(params.get("HyperParameter"))
        self._AccEngineVersion = params.get("AccEngineVersion")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._IsSaved = params.get("IsSaved")
        self._ModelSignature = params.get("ModelSignature")
        self._QATModel = params.get("QATModel")
        self._FrameworkVersion = params.get("FrameworkVersion")
        self._ModelVersionId = params.get("ModelVersionId")
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModelAccelerateTaskInfo(AbstractModel):
    """模型优化任务信息

    """

    def __init__(self):
        r"""
        :param _ModelFormat: 模型格式
        :type ModelFormat: str
        :param _EngineVersion: 引擎版本号
        :type EngineVersion: str
        :param _QATModel: 是否QAT模型
        :type QATModel: bool
        """
        self._ModelFormat = None
        self._EngineVersion = None
        self._QATModel = None

    @property
    def ModelFormat(self):
        """模型格式
        :rtype: str
        """
        return self._ModelFormat

    @ModelFormat.setter
    def ModelFormat(self, ModelFormat):
        self._ModelFormat = ModelFormat

    @property
    def EngineVersion(self):
        """引擎版本号
        :rtype: str
        """
        return self._EngineVersion

    @EngineVersion.setter
    def EngineVersion(self, EngineVersion):
        self._EngineVersion = EngineVersion

    @property
    def QATModel(self):
        """是否QAT模型
        :rtype: bool
        """
        return self._QATModel

    @QATModel.setter
    def QATModel(self, QATModel):
        self._QATModel = QATModel


    def _deserialize(self, params):
        self._ModelFormat = params.get("ModelFormat")
        self._EngineVersion = params.get("EngineVersion")
        self._QATModel = params.get("QATModel")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModelAccelerateVersion(AbstractModel):
    """优化模型版本列表

    """

    def __init__(self):
        r"""
        :param _ModelId: 模型id
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelId: str
        :param _ModelVersionId: 优化模型版本id
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelVersionId: str
        :param _ModelJobId: 优化任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelJobId: str
        :param _ModelJobName: 优化任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelJobName: str
        :param _ModelVersion: 优化后模型版本
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelVersion: str
        :param _SpeedUp: 加速比
注意：此字段可能返回 null，表示取不到有效值。
        :type SpeedUp: str
        :param _ModelSource: 模型来源/任务名称/任务版本
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelSource: :class:`tencentcloud.tione.v20211111.models.ModelSource`
        :param _CosPathInfo: 模型cos路径
注意：此字段可能返回 null，表示取不到有效值。
        :type CosPathInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _ModelFormat: 模型规范
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelFormat: str
        :param _Status: 状态
注意：此字段可能返回 null，表示取不到有效值。
        :type Status: str
        :param _Progress: 进度
注意：此字段可能返回 null，表示取不到有效值。
        :type Progress: int
        :param _ErrorMsg: 错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrorMsg: str
        :param _GPUType: GPU类型
注意：此字段可能返回 null，表示取不到有效值。
        :type GPUType: str
        :param _ModelCosPath: 模型cos路径
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelCosPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        self._ModelId = None
        self._ModelVersionId = None
        self._ModelJobId = None
        self._ModelJobName = None
        self._ModelVersion = None
        self._SpeedUp = None
        self._ModelSource = None
        self._CosPathInfo = None
        self._CreateTime = None
        self._ModelFormat = None
        self._Status = None
        self._Progress = None
        self._ErrorMsg = None
        self._GPUType = None
        self._ModelCosPath = None

    @property
    def ModelId(self):
        """模型id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def ModelVersionId(self):
        """优化模型版本id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelVersionId

    @ModelVersionId.setter
    def ModelVersionId(self, ModelVersionId):
        self._ModelVersionId = ModelVersionId

    @property
    def ModelJobId(self):
        """优化任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelJobId

    @ModelJobId.setter
    def ModelJobId(self, ModelJobId):
        self._ModelJobId = ModelJobId

    @property
    def ModelJobName(self):
        """优化任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelJobName

    @ModelJobName.setter
    def ModelJobName(self, ModelJobName):
        self._ModelJobName = ModelJobName

    @property
    def ModelVersion(self):
        """优化后模型版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelVersion

    @ModelVersion.setter
    def ModelVersion(self, ModelVersion):
        self._ModelVersion = ModelVersion

    @property
    def SpeedUp(self):
        """加速比
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SpeedUp

    @SpeedUp.setter
    def SpeedUp(self, SpeedUp):
        self._SpeedUp = SpeedUp

    @property
    def ModelSource(self):
        """模型来源/任务名称/任务版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelSource`
        """
        return self._ModelSource

    @ModelSource.setter
    def ModelSource(self, ModelSource):
        self._ModelSource = ModelSource

    @property
    def CosPathInfo(self):
        """模型cos路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._CosPathInfo

    @CosPathInfo.setter
    def CosPathInfo(self, CosPathInfo):
        self._CosPathInfo = CosPathInfo

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ModelFormat(self):
        """模型规范
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelFormat

    @ModelFormat.setter
    def ModelFormat(self, ModelFormat):
        self._ModelFormat = ModelFormat

    @property
    def Status(self):
        """状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Progress(self):
        """进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def ErrorMsg(self):
        """错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrorMsg

    @ErrorMsg.setter
    def ErrorMsg(self, ErrorMsg):
        self._ErrorMsg = ErrorMsg

    @property
    def GPUType(self):
        """GPU类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GPUType

    @GPUType.setter
    def GPUType(self, GPUType):
        self._GPUType = GPUType

    @property
    def ModelCosPath(self):
        """模型cos路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._ModelCosPath

    @ModelCosPath.setter
    def ModelCosPath(self, ModelCosPath):
        self._ModelCosPath = ModelCosPath


    def _deserialize(self, params):
        self._ModelId = params.get("ModelId")
        self._ModelVersionId = params.get("ModelVersionId")
        self._ModelJobId = params.get("ModelJobId")
        self._ModelJobName = params.get("ModelJobName")
        self._ModelVersion = params.get("ModelVersion")
        self._SpeedUp = params.get("SpeedUp")
        if params.get("ModelSource") is not None:
            self._ModelSource = ModelSource()
            self._ModelSource._deserialize(params.get("ModelSource"))
        if params.get("CosPathInfo") is not None:
            self._CosPathInfo = CosPathInfo()
            self._CosPathInfo._deserialize(params.get("CosPathInfo"))
        self._CreateTime = params.get("CreateTime")
        self._ModelFormat = params.get("ModelFormat")
        self._Status = params.get("Status")
        self._Progress = params.get("Progress")
        self._ErrorMsg = params.get("ErrorMsg")
        self._GPUType = params.get("GPUType")
        if params.get("ModelCosPath") is not None:
            self._ModelCosPath = CosPathInfo()
            self._ModelCosPath._deserialize(params.get("ModelCosPath"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModelDetail(AbstractModel):
    """模型详细信息

    """

    def __init__(self):
        r"""
        :param _ModelId: 模型Id
        :type ModelId: str
        :param _Name: 模型名称
        :type Name: str
        :param _ModelStorageInfo: 模型存储信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelStorageInfo: :class:`tencentcloud.tione.v20211111.models.ModelStorageInfo`
        :param _Tags: 模型资源标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _ModelTags: 模型标签
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelTags: list of str
        :param _SubUin: 创建者子账号
注意：此字段可能返回 null，表示取不到有效值。
        :type SubUin: str
        :param _SubUinName: 创建者名称
注意：此字段可能返回 null，表示取不到有效值。
        :type SubUinName: str
        :param _AppId: 创建者appid
注意：此字段可能返回 null，表示取不到有效值。
        :type AppId: str
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _UpdateTime: 编辑时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTime: str
        """
        self._ModelId = None
        self._Name = None
        self._ModelStorageInfo = None
        self._Tags = None
        self._ModelTags = None
        self._SubUin = None
        self._SubUinName = None
        self._AppId = None
        self._CreateTime = None
        self._UpdateTime = None

    @property
    def ModelId(self):
        """模型Id
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def Name(self):
        """模型名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ModelStorageInfo(self):
        """模型存储信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelStorageInfo`
        """
        return self._ModelStorageInfo

    @ModelStorageInfo.setter
    def ModelStorageInfo(self, ModelStorageInfo):
        self._ModelStorageInfo = ModelStorageInfo

    @property
    def Tags(self):
        """模型资源标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def ModelTags(self):
        """模型标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._ModelTags

    @ModelTags.setter
    def ModelTags(self, ModelTags):
        self._ModelTags = ModelTags

    @property
    def SubUin(self):
        """创建者子账号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def SubUinName(self):
        """创建者名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubUinName

    @SubUinName.setter
    def SubUinName(self, SubUinName):
        self._SubUinName = SubUinName

    @property
    def AppId(self):
        """创建者appid
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """编辑时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime


    def _deserialize(self, params):
        self._ModelId = params.get("ModelId")
        self._Name = params.get("Name")
        if params.get("ModelStorageInfo") is not None:
            self._ModelStorageInfo = ModelStorageInfo()
            self._ModelStorageInfo._deserialize(params.get("ModelStorageInfo"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._ModelTags = params.get("ModelTags")
        self._SubUin = params.get("SubUin")
        self._SubUinName = params.get("SubUinName")
        self._AppId = params.get("AppId")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModelInfo(AbstractModel):
    """模型描述信息

    """

    def __init__(self):
        r"""
        :param _ModelVersionId: 模型版本id, DescribeTrainingModelVersion查询模型接口时的id
自动学习类型的模型填写自动学习的任务id
        :type ModelVersionId: str
        :param _ModelId: 模型id
        :type ModelId: str
        :param _ModelName: 模型名
        :type ModelName: str
        :param _ModelVersion: 模型版本
        :type ModelVersion: str
        :param _ModelSource: 模型来源
        :type ModelSource: str
        :param _CosPathInfo: cos路径信息
        :type CosPathInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _GooseFSx: GooseFSx的配置，ModelSource为GooseFSx时有效
        :type GooseFSx: :class:`tencentcloud.tione.v20211111.models.GooseFSx`
        :param _AlgorithmFramework: 模型对应的算法框架，预留
注意：此字段可能返回 null，表示取不到有效值。
        :type AlgorithmFramework: str
        :param _ModelType: 默认为 NORMAL, 已加速模型: ACCELERATE, 自动学习模型 AUTO_ML
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelType: str
        :param _GpuType: 模型的GPU类型，仅ModelType为ACCELERATE时有效，标识加速后的模型需要运行的GPU类型
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuType: str
        :param _ModelFormat: 模型格式
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelFormat: str
        :param _CFSConfig: 模型的CFS配置
注意：此字段可能返回 null，表示取不到有效值。
        :type CFSConfig: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        :param _EnvVars: 大模型相关的内部参数
注意：此字段可能返回 null，表示取不到有效值。
        :type EnvVars: list of str
        :param _IsPrivateModel: 是否为私有化大模型
注意：此字段可能返回 null，表示取不到有效值。
        :type IsPrivateModel: bool
        :param _ModelCategory: 模型的类别 多模态MultiModal, 文本大模型 LLM
        :type ModelCategory: str
        """
        self._ModelVersionId = None
        self._ModelId = None
        self._ModelName = None
        self._ModelVersion = None
        self._ModelSource = None
        self._CosPathInfo = None
        self._GooseFSx = None
        self._AlgorithmFramework = None
        self._ModelType = None
        self._GpuType = None
        self._ModelFormat = None
        self._CFSConfig = None
        self._EnvVars = None
        self._IsPrivateModel = None
        self._ModelCategory = None

    @property
    def ModelVersionId(self):
        """模型版本id, DescribeTrainingModelVersion查询模型接口时的id
自动学习类型的模型填写自动学习的任务id
        :rtype: str
        """
        return self._ModelVersionId

    @ModelVersionId.setter
    def ModelVersionId(self, ModelVersionId):
        self._ModelVersionId = ModelVersionId

    @property
    def ModelId(self):
        """模型id
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def ModelName(self):
        """模型名
        :rtype: str
        """
        return self._ModelName

    @ModelName.setter
    def ModelName(self, ModelName):
        self._ModelName = ModelName

    @property
    def ModelVersion(self):
        """模型版本
        :rtype: str
        """
        return self._ModelVersion

    @ModelVersion.setter
    def ModelVersion(self, ModelVersion):
        self._ModelVersion = ModelVersion

    @property
    def ModelSource(self):
        """模型来源
        :rtype: str
        """
        return self._ModelSource

    @ModelSource.setter
    def ModelSource(self, ModelSource):
        self._ModelSource = ModelSource

    @property
    def CosPathInfo(self):
        """cos路径信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._CosPathInfo

    @CosPathInfo.setter
    def CosPathInfo(self, CosPathInfo):
        self._CosPathInfo = CosPathInfo

    @property
    def GooseFSx(self):
        """GooseFSx的配置，ModelSource为GooseFSx时有效
        :rtype: :class:`tencentcloud.tione.v20211111.models.GooseFSx`
        """
        return self._GooseFSx

    @GooseFSx.setter
    def GooseFSx(self, GooseFSx):
        self._GooseFSx = GooseFSx

    @property
    def AlgorithmFramework(self):
        """模型对应的算法框架，预留
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AlgorithmFramework

    @AlgorithmFramework.setter
    def AlgorithmFramework(self, AlgorithmFramework):
        self._AlgorithmFramework = AlgorithmFramework

    @property
    def ModelType(self):
        """默认为 NORMAL, 已加速模型: ACCELERATE, 自动学习模型 AUTO_ML
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelType

    @ModelType.setter
    def ModelType(self, ModelType):
        self._ModelType = ModelType

    @property
    def GpuType(self):
        """模型的GPU类型，仅ModelType为ACCELERATE时有效，标识加速后的模型需要运行的GPU类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType

    @property
    def ModelFormat(self):
        """模型格式
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelFormat

    @ModelFormat.setter
    def ModelFormat(self, ModelFormat):
        self._ModelFormat = ModelFormat

    @property
    def CFSConfig(self):
        """模型的CFS配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        """
        return self._CFSConfig

    @CFSConfig.setter
    def CFSConfig(self, CFSConfig):
        self._CFSConfig = CFSConfig

    @property
    def EnvVars(self):
        """大模型相关的内部参数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._EnvVars

    @EnvVars.setter
    def EnvVars(self, EnvVars):
        self._EnvVars = EnvVars

    @property
    def IsPrivateModel(self):
        """是否为私有化大模型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsPrivateModel

    @IsPrivateModel.setter
    def IsPrivateModel(self, IsPrivateModel):
        self._IsPrivateModel = IsPrivateModel

    @property
    def ModelCategory(self):
        """模型的类别 多模态MultiModal, 文本大模型 LLM
        :rtype: str
        """
        return self._ModelCategory

    @ModelCategory.setter
    def ModelCategory(self, ModelCategory):
        self._ModelCategory = ModelCategory


    def _deserialize(self, params):
        self._ModelVersionId = params.get("ModelVersionId")
        self._ModelId = params.get("ModelId")
        self._ModelName = params.get("ModelName")
        self._ModelVersion = params.get("ModelVersion")
        self._ModelSource = params.get("ModelSource")
        if params.get("CosPathInfo") is not None:
            self._CosPathInfo = CosPathInfo()
            self._CosPathInfo._deserialize(params.get("CosPathInfo"))
        if params.get("GooseFSx") is not None:
            self._GooseFSx = GooseFSx()
            self._GooseFSx._deserialize(params.get("GooseFSx"))
        self._AlgorithmFramework = params.get("AlgorithmFramework")
        self._ModelType = params.get("ModelType")
        self._GpuType = params.get("GpuType")
        self._ModelFormat = params.get("ModelFormat")
        if params.get("CFSConfig") is not None:
            self._CFSConfig = CFSConfig()
            self._CFSConfig._deserialize(params.get("CFSConfig"))
        self._EnvVars = params.get("EnvVars")
        self._IsPrivateModel = params.get("IsPrivateModel")
        self._ModelCategory = params.get("ModelCategory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModelInputInfo(AbstractModel):
    """模型输入信息

    """

    def __init__(self):
        r"""
        :param _ModelInputType: input数据类型
FIXED：固定
RANGE：浮动
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelInputType: str
        :param _ModelInputDimension: input数据尺寸
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelInputDimension: list of str
        """
        self._ModelInputType = None
        self._ModelInputDimension = None

    @property
    def ModelInputType(self):
        """input数据类型
FIXED：固定
RANGE：浮动
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelInputType

    @ModelInputType.setter
    def ModelInputType(self, ModelInputType):
        self._ModelInputType = ModelInputType

    @property
    def ModelInputDimension(self):
        """input数据尺寸
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._ModelInputDimension

    @ModelInputDimension.setter
    def ModelInputDimension(self, ModelInputDimension):
        self._ModelInputDimension = ModelInputDimension


    def _deserialize(self, params):
        self._ModelInputType = params.get("ModelInputType")
        self._ModelInputDimension = params.get("ModelInputDimension")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModelProgress(AbstractModel):
    """ModelProgress

    """

    def __init__(self):
        r"""
        :param _Model: 模型
注意：此字段可能返回 null，表示取不到有效值。
        :type Model: :class:`tencentcloud.tione.v20211111.models.EvalModel`
        :param _ScoredCount: 已标注数量
注意：此字段可能返回 null，表示取不到有效值。
        :type ScoredCount: int
        :param _TotalCount: 总数
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalCount: int
        :param _Score: 人工标注得分
注意：此字段可能返回 null，表示取不到有效值。
        :type Score: float
        """
        self._Model = None
        self._ScoredCount = None
        self._TotalCount = None
        self._Score = None

    @property
    def Model(self):
        """模型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.EvalModel`
        """
        return self._Model

    @Model.setter
    def Model(self, Model):
        self._Model = Model

    @property
    def ScoredCount(self):
        """已标注数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ScoredCount

    @ScoredCount.setter
    def ScoredCount(self, ScoredCount):
        self._ScoredCount = ScoredCount

    @property
    def TotalCount(self):
        """总数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def Score(self):
        """人工标注得分
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Score

    @Score.setter
    def Score(self, Score):
        self._Score = Score


    def _deserialize(self, params):
        if params.get("Model") is not None:
            self._Model = EvalModel()
            self._Model._deserialize(params.get("Model"))
        self._ScoredCount = params.get("ScoredCount")
        self._TotalCount = params.get("TotalCount")
        self._Score = params.get("Score")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModelSource(AbstractModel):
    """模型来源

    """

    def __init__(self):
        r"""
        :param _Source: 来源
注意：此字段可能返回 null，表示取不到有效值。
        :type Source: str
        :param _JobName: 来源任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type JobName: str
        :param _JobVersion: 来源任务版本
注意：此字段可能返回 null，表示取不到有效值。
        :type JobVersion: str
        :param _JobId: 来源任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type JobId: str
        :param _ModelName: 模型名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelName: str
        :param _AlgorithmFramework: 算法框架
注意：此字段可能返回 null，表示取不到有效值。
        :type AlgorithmFramework: str
        :param _TrainingPreference: 训练偏好
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainingPreference: str
        :param _ReasoningEnvironmentSource: 推理环境来源，SYSTEM/CUSTOM
注意：此字段可能返回 null，表示取不到有效值。
        :type ReasoningEnvironmentSource: str
        :param _ReasoningEnvironment: 推理环境
注意：此字段可能返回 null，表示取不到有效值。
        :type ReasoningEnvironment: str
        :param _ReasoningEnvironmentId: 推理环境id
注意：此字段可能返回 null，表示取不到有效值。
        :type ReasoningEnvironmentId: str
        :param _ReasoningImageInfo: 自定义推理环境
注意：此字段可能返回 null，表示取不到有效值。
        :type ReasoningImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        self._Source = None
        self._JobName = None
        self._JobVersion = None
        self._JobId = None
        self._ModelName = None
        self._AlgorithmFramework = None
        self._TrainingPreference = None
        self._ReasoningEnvironmentSource = None
        self._ReasoningEnvironment = None
        self._ReasoningEnvironmentId = None
        self._ReasoningImageInfo = None

    @property
    def Source(self):
        """来源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Source

    @Source.setter
    def Source(self, Source):
        self._Source = Source

    @property
    def JobName(self):
        """来源任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._JobName

    @JobName.setter
    def JobName(self, JobName):
        self._JobName = JobName

    @property
    def JobVersion(self):
        """来源任务版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._JobVersion

    @JobVersion.setter
    def JobVersion(self, JobVersion):
        self._JobVersion = JobVersion

    @property
    def JobId(self):
        """来源任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def ModelName(self):
        """模型名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelName

    @ModelName.setter
    def ModelName(self, ModelName):
        self._ModelName = ModelName

    @property
    def AlgorithmFramework(self):
        """算法框架
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AlgorithmFramework

    @AlgorithmFramework.setter
    def AlgorithmFramework(self, AlgorithmFramework):
        self._AlgorithmFramework = AlgorithmFramework

    @property
    def TrainingPreference(self):
        """训练偏好
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainingPreference

    @TrainingPreference.setter
    def TrainingPreference(self, TrainingPreference):
        self._TrainingPreference = TrainingPreference

    @property
    def ReasoningEnvironmentSource(self):
        """推理环境来源，SYSTEM/CUSTOM
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ReasoningEnvironmentSource

    @ReasoningEnvironmentSource.setter
    def ReasoningEnvironmentSource(self, ReasoningEnvironmentSource):
        self._ReasoningEnvironmentSource = ReasoningEnvironmentSource

    @property
    def ReasoningEnvironment(self):
        """推理环境
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ReasoningEnvironment

    @ReasoningEnvironment.setter
    def ReasoningEnvironment(self, ReasoningEnvironment):
        self._ReasoningEnvironment = ReasoningEnvironment

    @property
    def ReasoningEnvironmentId(self):
        """推理环境id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ReasoningEnvironmentId

    @ReasoningEnvironmentId.setter
    def ReasoningEnvironmentId(self, ReasoningEnvironmentId):
        self._ReasoningEnvironmentId = ReasoningEnvironmentId

    @property
    def ReasoningImageInfo(self):
        """自定义推理环境
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ReasoningImageInfo

    @ReasoningImageInfo.setter
    def ReasoningImageInfo(self, ReasoningImageInfo):
        self._ReasoningImageInfo = ReasoningImageInfo


    def _deserialize(self, params):
        self._Source = params.get("Source")
        self._JobName = params.get("JobName")
        self._JobVersion = params.get("JobVersion")
        self._JobId = params.get("JobId")
        self._ModelName = params.get("ModelName")
        self._AlgorithmFramework = params.get("AlgorithmFramework")
        self._TrainingPreference = params.get("TrainingPreference")
        self._ReasoningEnvironmentSource = params.get("ReasoningEnvironmentSource")
        self._ReasoningEnvironment = params.get("ReasoningEnvironment")
        self._ReasoningEnvironmentId = params.get("ReasoningEnvironmentId")
        if params.get("ReasoningImageInfo") is not None:
            self._ReasoningImageInfo = ImageInfo()
            self._ReasoningImageInfo._deserialize(params.get("ReasoningImageInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModelStorageInfo(AbstractModel):
    """模型存储信息

    """

    def __init__(self):
        r"""
        :param _StorageType: 存储介质类型
        :type StorageType: str
        :param _CFSStorage: Cfs存储配置
        :type CFSStorage: :class:`tencentcloud.tione.v20211111.models.CFSStorageInfo`
        """
        self._StorageType = None
        self._CFSStorage = None

    @property
    def StorageType(self):
        """存储介质类型
        :rtype: str
        """
        return self._StorageType

    @StorageType.setter
    def StorageType(self, StorageType):
        self._StorageType = StorageType

    @property
    def CFSStorage(self):
        """Cfs存储配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSStorageInfo`
        """
        return self._CFSStorage

    @CFSStorage.setter
    def CFSStorage(self, CFSStorage):
        self._CFSStorage = CFSStorage


    def _deserialize(self, params):
        self._StorageType = params.get("StorageType")
        if params.get("CFSStorage") is not None:
            self._CFSStorage = CFSStorageInfo()
            self._CFSStorage._deserialize(params.get("CFSStorage"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModelTrainConfig(AbstractModel):
    """模型训练配置

    """

    def __init__(self):
        r"""
        :param _ModelType: 模型偏好设置
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelType: str
        :param _IsIncrementalLearning: 是否开启增量训练
注意：此字段可能返回 null，表示取不到有效值。
        :type IsIncrementalLearning: bool
        :param _AutoMLTaskId: 增量训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type AutoMLTaskId: str
        :param _ExpectedAccuracy: 期望准确率
注意：此字段可能返回 null，表示取不到有效值。
        :type ExpectedAccuracy: int
        :param _EnableMaxTrainHours: 是否开启最长时长限制
注意：此字段可能返回 null，表示取不到有效值。
        :type EnableMaxTrainHours: bool
        :param _MaxTrainHours: 最长训练时长
注意：此字段可能返回 null，表示取不到有效值。
        :type MaxTrainHours: int
        """
        self._ModelType = None
        self._IsIncrementalLearning = None
        self._AutoMLTaskId = None
        self._ExpectedAccuracy = None
        self._EnableMaxTrainHours = None
        self._MaxTrainHours = None

    @property
    def ModelType(self):
        """模型偏好设置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelType

    @ModelType.setter
    def ModelType(self, ModelType):
        self._ModelType = ModelType

    @property
    def IsIncrementalLearning(self):
        """是否开启增量训练
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsIncrementalLearning

    @IsIncrementalLearning.setter
    def IsIncrementalLearning(self, IsIncrementalLearning):
        self._IsIncrementalLearning = IsIncrementalLearning

    @property
    def AutoMLTaskId(self):
        """增量训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def ExpectedAccuracy(self):
        """期望准确率
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ExpectedAccuracy

    @ExpectedAccuracy.setter
    def ExpectedAccuracy(self, ExpectedAccuracy):
        self._ExpectedAccuracy = ExpectedAccuracy

    @property
    def EnableMaxTrainHours(self):
        """是否开启最长时长限制
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._EnableMaxTrainHours

    @EnableMaxTrainHours.setter
    def EnableMaxTrainHours(self, EnableMaxTrainHours):
        self._EnableMaxTrainHours = EnableMaxTrainHours

    @property
    def MaxTrainHours(self):
        """最长训练时长
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._MaxTrainHours

    @MaxTrainHours.setter
    def MaxTrainHours(self, MaxTrainHours):
        self._MaxTrainHours = MaxTrainHours


    def _deserialize(self, params):
        self._ModelType = params.get("ModelType")
        self._IsIncrementalLearning = params.get("IsIncrementalLearning")
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._ExpectedAccuracy = params.get("ExpectedAccuracy")
        self._EnableMaxTrainHours = params.get("EnableMaxTrainHours")
        self._MaxTrainHours = params.get("MaxTrainHours")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAllAnnotatedResultRequest(AbstractModel):
    """ModifyAllAnnotatedResult请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAllAnnotatedResultResponse(AbstractModel):
    """ModifyAllAnnotatedResult返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ModifyAnnotateTaskReopenRequest(AbstractModel):
    """ModifyAnnotateTaskReopen请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        :param _DataSetId: 数据集ID
        :type DataSetId: str
        """
        self._TaskId = None
        self._DataSetId = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def DataSetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DataSetId

    @DataSetId.setter
    def DataSetId(self, DataSetId):
        self._DataSetId = DataSetId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._DataSetId = params.get("DataSetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAnnotateTaskReopenResponse(AbstractModel):
    """ModifyAnnotateTaskReopen返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyAnnotateTaskTagsRequest(AbstractModel):
    """ModifyAnnotateTaskTags请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _Tags: 需要修改的标签
        :type Tags: list of Tag
        """
        self._TaskId = None
        self._Tags = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Tags(self):
        """需要修改的标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAnnotateTaskTagsResponse(AbstractModel):
    """ModifyAnnotateTaskTags返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ModifyAnnotateTaskToSubmitRequest(AbstractModel):
    """ModifyAnnotateTaskToSubmit请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 标注任务ID
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """标注任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAnnotateTaskToSubmitResponse(AbstractModel):
    """ModifyAnnotateTaskToSubmit返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Success: 是否成功
        :type Success: bool
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Success = None
        self._RequestId = None

    @property
    def Success(self):
        """是否成功
        :rtype: bool
        """
        return self._Success

    @Success.setter
    def Success(self, Success):
        self._Success = Success

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Success = params.get("Success")
        self._RequestId = params.get("RequestId")


class ModifyAnnotatedResultRequest(AbstractModel):
    """ModifyAnnotatedResult请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 修改的任务
        :type TaskId: str
        :param _FileIds: 修改的文件id
        :type FileIds: list of str
        :param _AnnotationResult: 标注结果
        :type AnnotationResult: str
        :param _ExtendedCorpus: 扩展预料库
        :type ExtendedCorpus: list of ExtendedCorpus
        :param _Record: 提交的标注样本
        :type Record: :class:`tencentcloud.tione.v20211111.models.AnnotateRecord`
        """
        self._TaskId = None
        self._FileIds = None
        self._AnnotationResult = None
        self._ExtendedCorpus = None
        self._Record = None

    @property
    def TaskId(self):
        """修改的任务
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def FileIds(self):
        """修改的文件id
        :rtype: list of str
        """
        return self._FileIds

    @FileIds.setter
    def FileIds(self, FileIds):
        self._FileIds = FileIds

    @property
    def AnnotationResult(self):
        """标注结果
        :rtype: str
        """
        return self._AnnotationResult

    @AnnotationResult.setter
    def AnnotationResult(self, AnnotationResult):
        self._AnnotationResult = AnnotationResult

    @property
    def ExtendedCorpus(self):
        """扩展预料库
        :rtype: list of ExtendedCorpus
        """
        return self._ExtendedCorpus

    @ExtendedCorpus.setter
    def ExtendedCorpus(self, ExtendedCorpus):
        self._ExtendedCorpus = ExtendedCorpus

    @property
    def Record(self):
        """提交的标注样本
        :rtype: :class:`tencentcloud.tione.v20211111.models.AnnotateRecord`
        """
        return self._Record

    @Record.setter
    def Record(self, Record):
        self._Record = Record


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._FileIds = params.get("FileIds")
        self._AnnotationResult = params.get("AnnotationResult")
        if params.get("ExtendedCorpus") is not None:
            self._ExtendedCorpus = []
            for item in params.get("ExtendedCorpus"):
                obj = ExtendedCorpus()
                obj._deserialize(item)
                self._ExtendedCorpus.append(obj)
        if params.get("Record") is not None:
            self._Record = AnnotateRecord()
            self._Record._deserialize(params.get("Record"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAnnotatedResultResponse(AbstractModel):
    """ModifyAnnotatedResult返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FileIds: 修改成功的文件id
        :type FileIds: list of str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FileIds = None
        self._RequestId = None

    @property
    def FileIds(self):
        """修改成功的文件id
        :rtype: list of str
        """
        return self._FileIds

    @FileIds.setter
    def FileIds(self, FileIds):
        self._FileIds = FileIds

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FileIds = params.get("FileIds")
        self._RequestId = params.get("RequestId")


class ModifyAnnotationKeysRequest(AbstractModel):
    """ModifyAnnotationKeys请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _KeyType: key类型
        :type KeyType: int
        :param _KeySet: keypair set
        :type KeySet: :class:`tencentcloud.tione.v20211111.models.KeySetType`
        """
        self._DatasetId = None
        self._KeyType = None
        self._KeySet = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def KeyType(self):
        """key类型
        :rtype: int
        """
        return self._KeyType

    @KeyType.setter
    def KeyType(self, KeyType):
        self._KeyType = KeyType

    @property
    def KeySet(self):
        """keypair set
        :rtype: :class:`tencentcloud.tione.v20211111.models.KeySetType`
        """
        return self._KeySet

    @KeySet.setter
    def KeySet(self, KeySet):
        self._KeySet = KeySet


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._KeyType = params.get("KeyType")
        if params.get("KeySet") is not None:
            self._KeySet = KeySetType()
            self._KeySet._deserialize(params.get("KeySet"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAnnotationKeysResponse(AbstractModel):
    """ModifyAnnotationKeys返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyAutoMLTaskTagsRequest(AbstractModel):
    """ModifyAutoMLTaskTags请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务id
        :type AutoMLTaskId: str
        :param _Tags: 修改后的标签组
        :type Tags: list of Tag
        """
        self._AutoMLTaskId = None
        self._Tags = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def Tags(self):
        """修改后的标签组
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyAutoMLTaskTagsResponse(AbstractModel):
    """ModifyAutoMLTaskTags返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ErrorMsg: 出现异常时错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrorMsg: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ErrorMsg = None
        self._RequestId = None

    @property
    def ErrorMsg(self):
        """出现异常时错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrorMsg

    @ErrorMsg.setter
    def ErrorMsg(self, ErrorMsg):
        self._ErrorMsg = ErrorMsg

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ErrorMsg = params.get("ErrorMsg")
        self._RequestId = params.get("RequestId")


class ModifyBadcasePreviewStatusRequest(AbstractModel):
    """ModifyBadcasePreviewStatus请求参数结构体

    """

    def __init__(self):
        r"""
        :param _PreviewStatus: badcase预览状态，OFF(关闭), ON(开启)
        :type PreviewStatus: str
        """
        self._PreviewStatus = None

    @property
    def PreviewStatus(self):
        """badcase预览状态，OFF(关闭), ON(开启)
        :rtype: str
        """
        return self._PreviewStatus

    @PreviewStatus.setter
    def PreviewStatus(self, PreviewStatus):
        self._PreviewStatus = PreviewStatus


    def _deserialize(self, params):
        self._PreviewStatus = params.get("PreviewStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyBadcasePreviewStatusResponse(AbstractModel):
    """ModifyBadcasePreviewStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyBatchTaskTagsRequest(AbstractModel):
    """ModifyBatchTaskTags请求参数结构体

    """

    def __init__(self):
        r"""
        :param _BatchTaskId: 任务id
        :type BatchTaskId: str
        :param _Tags: 标签列表
        :type Tags: list of Tag
        """
        self._BatchTaskId = None
        self._Tags = None

    @property
    def BatchTaskId(self):
        """任务id
        :rtype: str
        """
        return self._BatchTaskId

    @BatchTaskId.setter
    def BatchTaskId(self, BatchTaskId):
        self._BatchTaskId = BatchTaskId

    @property
    def Tags(self):
        """标签列表
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._BatchTaskId = params.get("BatchTaskId")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyBatchTaskTagsResponse(AbstractModel):
    """ModifyBatchTaskTags返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyBillingDealRequest(AbstractModel):
    """ModifyBillingDeal请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 计费订单id
        :type FlowId: int
        """
        self._FlowId = None

    @property
    def FlowId(self):
        """计费订单id
        :rtype: int
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyBillingDealResponse(AbstractModel):
    """ModifyBillingDeal返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 计费订单id
        :type FlowId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowId = None
        self._RequestId = None

    @property
    def FlowId(self):
        """计费订单id
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._RequestId = params.get("RequestId")


class ModifyBillingResourceGroupRequest(AbstractModel):
    """ModifyBillingResourceGroup请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组id
        :type ResourceGroupId: str
        :param _Name: 资源组名称
注意：此字段仅支持英文、数字、下划线 _、短横 -，只能以英文、数字开头，长度为60个字
注意：此字段相同地域相同资源组类型下不可同名。
        :type Name: str
        :param _Type: 资源组类型;
枚举值:
空: 通用, TRAIN: 训练, INFERENCE: 推理
        :type Type: str
        :param _TagSet: 资源组标签列表
        :type TagSet: list of Tag
        :param _IsBareMetalResourceGroup: 是否为裸金属资源组
        :type IsBareMetalResourceGroup: bool
        :param _IsRdma: 是否为rdma资源组
        :type IsRdma: bool
        :param _ScheduleStrategy: 资源组调度策略
        :type ScheduleStrategy: str
        :param _GpuPackageEnabled: 是否限制GPU按比例申请资源
        :type GpuPackageEnabled: bool
        :param _EnableModels: 更多配置开启模块
        :type EnableModels: list of str
        :param _SpecTemps: 规格模版
        :type SpecTemps: list of SpecTemp
        :param _PresetResourceSwitch: 预设资源开关：枚举值： CLOSE,GPU.TEMPLATE
        :type PresetResourceSwitch: str
        :param _IsCanModifyPreset: 是否可修改预设资源
        :type IsCanModifyPreset: bool
        """
        self._ResourceGroupId = None
        self._Name = None
        self._Type = None
        self._TagSet = None
        self._IsBareMetalResourceGroup = None
        self._IsRdma = None
        self._ScheduleStrategy = None
        self._GpuPackageEnabled = None
        self._EnableModels = None
        self._SpecTemps = None
        self._PresetResourceSwitch = None
        self._IsCanModifyPreset = None

    @property
    def ResourceGroupId(self):
        """资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def Name(self):
        """资源组名称
注意：此字段仅支持英文、数字、下划线 _、短横 -，只能以英文、数字开头，长度为60个字
注意：此字段相同地域相同资源组类型下不可同名。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Type(self):
        """资源组类型;
枚举值:
空: 通用, TRAIN: 训练, INFERENCE: 推理
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def TagSet(self):
        """资源组标签列表
        :rtype: list of Tag
        """
        return self._TagSet

    @TagSet.setter
    def TagSet(self, TagSet):
        self._TagSet = TagSet

    @property
    def IsBareMetalResourceGroup(self):
        """是否为裸金属资源组
        :rtype: bool
        """
        return self._IsBareMetalResourceGroup

    @IsBareMetalResourceGroup.setter
    def IsBareMetalResourceGroup(self, IsBareMetalResourceGroup):
        self._IsBareMetalResourceGroup = IsBareMetalResourceGroup

    @property
    def IsRdma(self):
        """是否为rdma资源组
        :rtype: bool
        """
        return self._IsRdma

    @IsRdma.setter
    def IsRdma(self, IsRdma):
        self._IsRdma = IsRdma

    @property
    def ScheduleStrategy(self):
        """资源组调度策略
        :rtype: str
        """
        return self._ScheduleStrategy

    @ScheduleStrategy.setter
    def ScheduleStrategy(self, ScheduleStrategy):
        self._ScheduleStrategy = ScheduleStrategy

    @property
    def GpuPackageEnabled(self):
        """是否限制GPU按比例申请资源
        :rtype: bool
        """
        return self._GpuPackageEnabled

    @GpuPackageEnabled.setter
    def GpuPackageEnabled(self, GpuPackageEnabled):
        self._GpuPackageEnabled = GpuPackageEnabled

    @property
    def EnableModels(self):
        """更多配置开启模块
        :rtype: list of str
        """
        return self._EnableModels

    @EnableModels.setter
    def EnableModels(self, EnableModels):
        self._EnableModels = EnableModels

    @property
    def SpecTemps(self):
        """规格模版
        :rtype: list of SpecTemp
        """
        return self._SpecTemps

    @SpecTemps.setter
    def SpecTemps(self, SpecTemps):
        self._SpecTemps = SpecTemps

    @property
    def PresetResourceSwitch(self):
        """预设资源开关：枚举值： CLOSE,GPU.TEMPLATE
        :rtype: str
        """
        return self._PresetResourceSwitch

    @PresetResourceSwitch.setter
    def PresetResourceSwitch(self, PresetResourceSwitch):
        self._PresetResourceSwitch = PresetResourceSwitch

    @property
    def IsCanModifyPreset(self):
        """是否可修改预设资源
        :rtype: bool
        """
        return self._IsCanModifyPreset

    @IsCanModifyPreset.setter
    def IsCanModifyPreset(self, IsCanModifyPreset):
        self._IsCanModifyPreset = IsCanModifyPreset


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._Name = params.get("Name")
        self._Type = params.get("Type")
        if params.get("TagSet") is not None:
            self._TagSet = []
            for item in params.get("TagSet"):
                obj = Tag()
                obj._deserialize(item)
                self._TagSet.append(obj)
        self._IsBareMetalResourceGroup = params.get("IsBareMetalResourceGroup")
        self._IsRdma = params.get("IsRdma")
        self._ScheduleStrategy = params.get("ScheduleStrategy")
        self._GpuPackageEnabled = params.get("GpuPackageEnabled")
        self._EnableModels = params.get("EnableModels")
        if params.get("SpecTemps") is not None:
            self._SpecTemps = []
            for item in params.get("SpecTemps"):
                obj = SpecTemp()
                obj._deserialize(item)
                self._SpecTemps.append(obj)
        self._PresetResourceSwitch = params.get("PresetResourceSwitch")
        self._IsCanModifyPreset = params.get("IsCanModifyPreset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyBillingResourceGroupResponse(AbstractModel):
    """ModifyBillingResourceGroup返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组id
        :type ResourceGroupId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ResourceGroupId = None
        self._RequestId = None

    @property
    def ResourceGroupId(self):
        """资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._RequestId = params.get("RequestId")


class ModifyBillingResourceInstanceNameRequest(AbstractModel):
    """ModifyBillingResourceInstanceName请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组ID
        :type ResourceGroupId: str
        :param _ResourceInstanceId: 资源组节点ID
        :type ResourceInstanceId: str
        :param _ResourceInstanceName: 资源组节点名称
        :type ResourceInstanceName: str
        """
        self._ResourceGroupId = None
        self._ResourceInstanceId = None
        self._ResourceInstanceName = None

    @property
    def ResourceGroupId(self):
        """资源组ID
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceInstanceId(self):
        """资源组节点ID
        :rtype: str
        """
        return self._ResourceInstanceId

    @ResourceInstanceId.setter
    def ResourceInstanceId(self, ResourceInstanceId):
        self._ResourceInstanceId = ResourceInstanceId

    @property
    def ResourceInstanceName(self):
        """资源组节点名称
        :rtype: str
        """
        return self._ResourceInstanceName

    @ResourceInstanceName.setter
    def ResourceInstanceName(self, ResourceInstanceName):
        self._ResourceInstanceName = ResourceInstanceName


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ResourceInstanceId = params.get("ResourceInstanceId")
        self._ResourceInstanceName = params.get("ResourceInstanceName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyBillingResourceInstanceNameResponse(AbstractModel):
    """ModifyBillingResourceInstanceName返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyCodeRepoRequest(AbstractModel):
    """ModifyCodeRepo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: 存储库id
        :type Id: str
        :param _GitSecret: Git的认证信息
        :type GitSecret: :class:`tencentcloud.tione.v20211111.models.GitSecret`
        :param _Tags: 标签信息
        :type Tags: list of Tag
        """
        self._Id = None
        self._GitSecret = None
        self._Tags = None

    @property
    def Id(self):
        """存储库id
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def GitSecret(self):
        """Git的认证信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.GitSecret`
        """
        return self._GitSecret

    @GitSecret.setter
    def GitSecret(self, GitSecret):
        self._GitSecret = GitSecret

    @property
    def Tags(self):
        """标签信息
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._Id = params.get("Id")
        if params.get("GitSecret") is not None:
            self._GitSecret = GitSecret()
            self._GitSecret._deserialize(params.get("GitSecret"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyCodeRepoResponse(AbstractModel):
    """ModifyCodeRepo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyDataPipelineTaskTagsRequest(AbstractModel):
    """ModifyDataPipelineTaskTags请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 数据构建任务ID
        :type TaskId: str
        :param _Tags: 标签列表
        :type Tags: list of Tag
        """
        self._TaskId = None
        self._Tags = None

    @property
    def TaskId(self):
        """数据构建任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Tags(self):
        """标签列表
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyDataPipelineTaskTagsResponse(AbstractModel):
    """ModifyDataPipelineTaskTags返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 数据构建任务ID
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """数据构建任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ModifyDatasetAnnotationStatusRequest(AbstractModel):
    """ModifyDatasetAnnotationStatus请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _AnnotationType: 标注类型：
ANNOTATION_TYPE_CLASSIFICATION，图片分类
ANNOTATION_TYPE_DETECTION，目标检测
ANNOTATION_TYPE_SEGMENTATION，图片分割
ANNOTATION_TYPE_TRACKING，目标跟踪
ANNOTATION_TYPE_OCR，OCR识别
        :type AnnotationType: str
        :param _AnnotationStatus: 标注状态：
STATUS_NON_ANNOTATED，未标注
STATUS_ANNOTATED，已标注
        :type AnnotationStatus: str
        """
        self._DatasetId = None
        self._AnnotationType = None
        self._AnnotationStatus = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def AnnotationType(self):
        """标注类型：
ANNOTATION_TYPE_CLASSIFICATION，图片分类
ANNOTATION_TYPE_DETECTION，目标检测
ANNOTATION_TYPE_SEGMENTATION，图片分割
ANNOTATION_TYPE_TRACKING，目标跟踪
ANNOTATION_TYPE_OCR，OCR识别
        :rtype: str
        """
        return self._AnnotationType

    @AnnotationType.setter
    def AnnotationType(self, AnnotationType):
        self._AnnotationType = AnnotationType

    @property
    def AnnotationStatus(self):
        """标注状态：
STATUS_NON_ANNOTATED，未标注
STATUS_ANNOTATED，已标注
        :rtype: str
        """
        return self._AnnotationStatus

    @AnnotationStatus.setter
    def AnnotationStatus(self, AnnotationStatus):
        self._AnnotationStatus = AnnotationStatus


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._AnnotationType = params.get("AnnotationType")
        self._AnnotationStatus = params.get("AnnotationStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyDatasetAnnotationStatusResponse(AbstractModel):
    """ModifyDatasetAnnotationStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyDatasetDetailAnnotationRequest(AbstractModel):
    """ModifyDatasetDetailAnnotation请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _AnnotationStatus: 标注状态
        :type AnnotationStatus: str
        """
        self._DatasetId = None
        self._AnnotationStatus = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def AnnotationStatus(self):
        """标注状态
        :rtype: str
        """
        return self._AnnotationStatus

    @AnnotationStatus.setter
    def AnnotationStatus(self, AnnotationStatus):
        self._AnnotationStatus = AnnotationStatus


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._AnnotationStatus = params.get("AnnotationStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyDatasetDetailAnnotationResponse(AbstractModel):
    """ModifyDatasetDetailAnnotation返回参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._DatasetId = None
        self._RequestId = None

    @property
    def DatasetId(self):
        """数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._RequestId = params.get("RequestId")


class ModifyDatasetPerspectiveStatusRequest(AbstractModel):
    """ModifyDatasetPerspectiveStatus请求参数结构体

    """

    def __init__(self):
        r"""
        :param _PerspectiveStatus: true：开启，false：关闭
        :type PerspectiveStatus: bool
        :param _DatasetIds: 数据集Id数组
        :type DatasetIds: list of str
        """
        self._PerspectiveStatus = None
        self._DatasetIds = None

    @property
    def PerspectiveStatus(self):
        """true：开启，false：关闭
        :rtype: bool
        """
        return self._PerspectiveStatus

    @PerspectiveStatus.setter
    def PerspectiveStatus(self, PerspectiveStatus):
        self._PerspectiveStatus = PerspectiveStatus

    @property
    def DatasetIds(self):
        """数据集Id数组
        :rtype: list of str
        """
        return self._DatasetIds

    @DatasetIds.setter
    def DatasetIds(self, DatasetIds):
        self._DatasetIds = DatasetIds


    def _deserialize(self, params):
        self._PerspectiveStatus = params.get("PerspectiveStatus")
        self._DatasetIds = params.get("DatasetIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyDatasetPerspectiveStatusResponse(AbstractModel):
    """ModifyDatasetPerspectiveStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyDatasetPreviewStatusRequest(AbstractModel):
    """ModifyDatasetPreviewStatus请求参数结构体

    """

    def __init__(self):
        r"""
        :param _PreviewStatus: 数据集预览状态，true为开启，false为关闭
        :type PreviewStatus: bool
        """
        self._PreviewStatus = None

    @property
    def PreviewStatus(self):
        """数据集预览状态，true为开启，false为关闭
        :rtype: bool
        """
        return self._PreviewStatus

    @PreviewStatus.setter
    def PreviewStatus(self, PreviewStatus):
        self._PreviewStatus = PreviewStatus


    def _deserialize(self, params):
        self._PreviewStatus = params.get("PreviewStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyDatasetPreviewStatusResponse(AbstractModel):
    """ModifyDatasetPreviewStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyDatasetSceneTagsRequest(AbstractModel):
    """ModifyDatasetSceneTags请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _SceneTags: 场景标签
        :type SceneTags: list of str
        """
        self._DatasetId = None
        self._SceneTags = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def SceneTags(self):
        """场景标签
        :rtype: list of str
        """
        return self._SceneTags

    @SceneTags.setter
    def SceneTags(self, SceneTags):
        self._SceneTags = SceneTags


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._SceneTags = params.get("SceneTags")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyDatasetSceneTagsResponse(AbstractModel):
    """ModifyDatasetSceneTags返回参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._DatasetId = None
        self._RequestId = None

    @property
    def DatasetId(self):
        """数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._RequestId = params.get("RequestId")


class ModifyDatasetSchemaToSubmitRequest(AbstractModel):
    """ModifyDatasetSchemaToSubmit请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集id
        :type DatasetId: str
        :param _Schema: schema
        :type Schema: str
        :param _AnnotationSpecification: 标注规范
        :type AnnotationSpecification: str
        """
        self._DatasetId = None
        self._Schema = None
        self._AnnotationSpecification = None

    @property
    def DatasetId(self):
        """数据集id
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def Schema(self):
        """schema
        :rtype: str
        """
        return self._Schema

    @Schema.setter
    def Schema(self, Schema):
        self._Schema = Schema

    @property
    def AnnotationSpecification(self):
        """标注规范
        :rtype: str
        """
        return self._AnnotationSpecification

    @AnnotationSpecification.setter
    def AnnotationSpecification(self, AnnotationSpecification):
        self._AnnotationSpecification = AnnotationSpecification


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._Schema = params.get("Schema")
        self._AnnotationSpecification = params.get("AnnotationSpecification")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyDatasetSchemaToSubmitResponse(AbstractModel):
    """ModifyDatasetSchemaToSubmit返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class ModifyDatasetTagsRequest(AbstractModel):
    """ModifyDatasetTags请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _DatasetTags: 标签列表
        :type DatasetTags: list of Tag
        """
        self._DatasetId = None
        self._DatasetTags = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def DatasetTags(self):
        """标签列表
        :rtype: list of Tag
        """
        return self._DatasetTags

    @DatasetTags.setter
    def DatasetTags(self, DatasetTags):
        self._DatasetTags = DatasetTags


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        if params.get("DatasetTags") is not None:
            self._DatasetTags = []
            for item in params.get("DatasetTags"):
                obj = Tag()
                obj._deserialize(item)
                self._DatasetTags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyDatasetTagsResponse(AbstractModel):
    """ModifyDatasetTags返回参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._DatasetId = None
        self._RequestId = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._RequestId = params.get("RequestId")


class ModifyFixedPointRequest(AbstractModel):
    """ModifyFixedPoint请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _FixedPoint: 需要固定的点数
        :type FixedPoint: int
        """
        self._TaskId = None
        self._FixedPoint = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def FixedPoint(self):
        """需要固定的点数
        :rtype: int
        """
        return self._FixedPoint

    @FixedPoint.setter
    def FixedPoint(self, FixedPoint):
        self._FixedPoint = FixedPoint


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._FixedPoint = params.get("FixedPoint")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyFixedPointResponse(AbstractModel):
    """ModifyFixedPoint返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FixedPoint: 修改后的点数
        :type FixedPoint: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FixedPoint = None
        self._RequestId = None

    @property
    def FixedPoint(self):
        """修改后的点数
        :rtype: int
        """
        return self._FixedPoint

    @FixedPoint.setter
    def FixedPoint(self, FixedPoint):
        self._FixedPoint = FixedPoint

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FixedPoint = params.get("FixedPoint")
        self._RequestId = params.get("RequestId")


class ModifyFlowRequest(AbstractModel):
    """ModifyFlow请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流ID
        :type FlowId: str
        :param _FlowName: 工作流名称
        :type FlowName: str
        :param _Description: 工作流描述
        :type Description: str
        """
        self._FlowId = None
        self._FlowName = None
        self._Description = None

    @property
    def FlowId(self):
        """工作流ID
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def FlowName(self):
        """工作流名称
        :rtype: str
        """
        return self._FlowName

    @FlowName.setter
    def FlowName(self, FlowName):
        self._FlowName = FlowName

    @property
    def Description(self):
        """工作流描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._FlowName = params.get("FlowName")
        self._Description = params.get("Description")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyFlowResponse(AbstractModel):
    """ModifyFlow返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流的Id
        :type FlowId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowId = None
        self._RequestId = None

    @property
    def FlowId(self):
        """工作流的Id
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._RequestId = params.get("RequestId")


class ModifyFlowWhiteListWaitRequest(AbstractModel):
    """ModifyFlowWhiteListWait请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流ID
        :type FlowId: str
        :param _EnableWhiteListWait: 是否开启白名单等待。（默认开启）
        :type EnableWhiteListWait: bool
        :param _WhiteListWaitHours: 白名单等待时间
        :type WhiteListWaitHours: int
        """
        self._FlowId = None
        self._EnableWhiteListWait = None
        self._WhiteListWaitHours = None

    @property
    def FlowId(self):
        """工作流ID
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def EnableWhiteListWait(self):
        """是否开启白名单等待。（默认开启）
        :rtype: bool
        """
        return self._EnableWhiteListWait

    @EnableWhiteListWait.setter
    def EnableWhiteListWait(self, EnableWhiteListWait):
        self._EnableWhiteListWait = EnableWhiteListWait

    @property
    def WhiteListWaitHours(self):
        """白名单等待时间
        :rtype: int
        """
        return self._WhiteListWaitHours

    @WhiteListWaitHours.setter
    def WhiteListWaitHours(self, WhiteListWaitHours):
        self._WhiteListWaitHours = WhiteListWaitHours


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._EnableWhiteListWait = params.get("EnableWhiteListWait")
        self._WhiteListWaitHours = params.get("WhiteListWaitHours")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyFlowWhiteListWaitResponse(AbstractModel):
    """ModifyFlowWhiteListWait返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流ID
        :type FlowId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowId = None
        self._RequestId = None

    @property
    def FlowId(self):
        """工作流ID
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._RequestId = params.get("RequestId")


class ModifyLifecycleScriptRequest(AbstractModel):
    """ModifyLifecycleScript请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: 生命周期脚本Id
        :type Id: str
        :param _CreateScript: 创建脚本，需要base64编码，base64编码后的长度不能超过16384
        :type CreateScript: str
        :param _StartScript: 动脚本, 需要base64编码，base64编码后的长度不能超过16384
        :type StartScript: str
        :param _Tags: 标签信息
        :type Tags: list of Tag
        """
        self._Id = None
        self._CreateScript = None
        self._StartScript = None
        self._Tags = None

    @property
    def Id(self):
        """生命周期脚本Id
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def CreateScript(self):
        """创建脚本，需要base64编码，base64编码后的长度不能超过16384
        :rtype: str
        """
        return self._CreateScript

    @CreateScript.setter
    def CreateScript(self, CreateScript):
        self._CreateScript = CreateScript

    @property
    def StartScript(self):
        """动脚本, 需要base64编码，base64编码后的长度不能超过16384
        :rtype: str
        """
        return self._StartScript

    @StartScript.setter
    def StartScript(self, StartScript):
        self._StartScript = StartScript

    @property
    def Tags(self):
        """标签信息
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._CreateScript = params.get("CreateScript")
        self._StartScript = params.get("StartScript")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyLifecycleScriptResponse(AbstractModel):
    """ModifyLifecycleScript返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyModelAccTaskTagsRequest(AbstractModel):
    """ModifyModelAccTaskTags请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccTaskId: 模型加速任务ID
        :type ModelAccTaskId: str
        :param _Tags: 标签
        :type Tags: list of Tag
        """
        self._ModelAccTaskId = None
        self._Tags = None

    @property
    def ModelAccTaskId(self):
        """模型加速任务ID
        :rtype: str
        """
        return self._ModelAccTaskId

    @ModelAccTaskId.setter
    def ModelAccTaskId(self, ModelAccTaskId):
        self._ModelAccTaskId = ModelAccTaskId

    @property
    def Tags(self):
        """标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._ModelAccTaskId = params.get("ModelAccTaskId")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyModelAccTaskTagsResponse(AbstractModel):
    """ModifyModelAccTaskTags返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyModelServiceAuthorizationRequest(AbstractModel):
    """ModifyModelServiceAuthorization请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceGroupId: 服务组Id
        :type ServiceGroupId: str
        :param _AuthorizationEnable: 是否开启鉴权,true表示开启
        :type AuthorizationEnable: bool
        """
        self._ServiceGroupId = None
        self._AuthorizationEnable = None

    @property
    def ServiceGroupId(self):
        """服务组Id
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def AuthorizationEnable(self):
        """是否开启鉴权,true表示开启
        :rtype: bool
        """
        return self._AuthorizationEnable

    @AuthorizationEnable.setter
    def AuthorizationEnable(self, AuthorizationEnable):
        self._AuthorizationEnable = AuthorizationEnable


    def _deserialize(self, params):
        self._ServiceGroupId = params.get("ServiceGroupId")
        self._AuthorizationEnable = params.get("AuthorizationEnable")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyModelServiceAuthorizationResponse(AbstractModel):
    """ModifyModelServiceAuthorization返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyModelServicePartialConfigRequest(AbstractModel):
    """ModifyModelServicePartialConfig请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceId: 在线推理服务Id，需已存在
        :type ServiceId: str
        :param _ScheduledAction: 更新后服务不重启，定时停止的配置
        :type ScheduledAction: :class:`tencentcloud.tione.v20211111.models.ScheduledAction`
        :param _ServiceLimit: 更新后服务不重启，服务对应限流限频配置
        :type ServiceLimit: :class:`tencentcloud.tione.v20211111.models.ServiceLimit`
        """
        self._ServiceId = None
        self._ScheduledAction = None
        self._ServiceLimit = None

    @property
    def ServiceId(self):
        """在线推理服务Id，需已存在
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId

    @property
    def ScheduledAction(self):
        """更新后服务不重启，定时停止的配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ScheduledAction`
        """
        return self._ScheduledAction

    @ScheduledAction.setter
    def ScheduledAction(self, ScheduledAction):
        self._ScheduledAction = ScheduledAction

    @property
    def ServiceLimit(self):
        """更新后服务不重启，服务对应限流限频配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ServiceLimit`
        """
        return self._ServiceLimit

    @ServiceLimit.setter
    def ServiceLimit(self, ServiceLimit):
        self._ServiceLimit = ServiceLimit


    def _deserialize(self, params):
        self._ServiceId = params.get("ServiceId")
        if params.get("ScheduledAction") is not None:
            self._ScheduledAction = ScheduledAction()
            self._ScheduledAction._deserialize(params.get("ScheduledAction"))
        if params.get("ServiceLimit") is not None:
            self._ServiceLimit = ServiceLimit()
            self._ServiceLimit._deserialize(params.get("ServiceLimit"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyModelServicePartialConfigResponse(AbstractModel):
    """ModifyModelServicePartialConfig返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Service: 被修改后的服务配置
        :type Service: :class:`tencentcloud.tione.v20211111.models.Service`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Service = None
        self._RequestId = None

    @property
    def Service(self):
        """被修改后的服务配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.Service`
        """
        return self._Service

    @Service.setter
    def Service(self, Service):
        self._Service = Service

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Service") is not None:
            self._Service = Service()
            self._Service._deserialize(params.get("Service"))
        self._RequestId = params.get("RequestId")


class ModifyModelServiceRequest(AbstractModel):
    """ModifyModelService请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceId: 服务id
        :type ServiceId: str
        :param _ModelInfo: 模型信息，需要挂载模型时填写
        :type ModelInfo: :class:`tencentcloud.tione.v20211111.models.ModelInfo`
        :param _ImageInfo: 镜像信息，配置服务运行所需的镜像地址等信息
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _Env: 环境变量，可选参数，用于配置容器中的环境变量
        :type Env: list of EnvVar
        :param _Resources: 资源描述，指定预付费模式下的cpu,mem,gpu等信息，后付费无需填写
        :type Resources: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        :param _InstanceType: 使用DescribeBillingSpecs接口返回的规格列表中的值，或者参考实例列表:
TI.S.MEDIUM.POST	2C4G
TI.S.LARGE.POST	4C8G
TI.S.2XLARGE16.POST	8C16G
TI.S.2XLARGE32.POST	8C32G
TI.S.4XLARGE32.POST	16C32G
TI.S.4XLARGE64.POST	16C64G
TI.S.6XLARGE48.POST	24C48G
TI.S.6XLARGE96.POST	24C96G
TI.S.8XLARGE64.POST	32C64G
TI.S.8XLARGE128.POST 32C128G
TI.GN7.LARGE20.POST	4C20G T4*1/4
TI.GN7.2XLARGE40.POST	10C40G T4*1/2
TI.GN7.2XLARGE32.POST	8C32G T4*1
TI.GN7.5XLARGE80.POST	20C80G T4*1
TI.GN7.8XLARGE128.POST	32C128G T4*1
TI.GN7.10XLARGE160.POST	40C160G T4*2
TI.GN7.20XLARGE320.POST	80C320G T4*4
        :type InstanceType: str
        :param _ScaleMode: 扩缩容类型 支持：自动 - "AUTO", 手动 - "MANUAL"
        :type ScaleMode: str
        :param _Replicas: 实例数量, 不同计费模式和调节模式下对应关系如下
PREPAID 和 POSTPAID_BY_HOUR:
手动调节模式下对应 实例数量
自动调节模式下对应 基于时间的默认策略的实例数量
HYBRID_PAID:
后付费实例手动调节模式下对应 实例数量
后付费实例自动调节模式下对应 时间策略的默认策略的实例数量
        :type Replicas: int
        :param _HorizontalPodAutoscaler: 自动伸缩信息
        :type HorizontalPodAutoscaler: :class:`tencentcloud.tione.v20211111.models.HorizontalPodAutoscaler`
        :param _LogEnable: 是否开启日志投递，开启后需填写配置投递到指定cls
        :type LogEnable: bool
        :param _LogConfig: 日志配置，需要投递服务日志到指定cls时填写
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _ServiceAction: 特殊更新行为： "STOP": 停止, "RESUME": 重启, "SCALE": 扩缩容, 存在这些特殊更新行为时，会忽略其他更新字段
        :type ServiceAction: str
        :param _ServiceDescription: 服务的描述
        :type ServiceDescription: str
        :param _ScaleStrategy: 自动伸缩策略
        :type ScaleStrategy: str
        :param _CronScaleJobs: 自动伸缩策略配置 HPA : 通过HPA进行弹性伸缩 CRON 通过定时任务进行伸缩
        :type CronScaleJobs: list of CronScaleJob
        :param _HybridBillingPrepaidReplicas: 计费模式[HYBRID_PAID]时生效, 用于标识混合计费模式下的预付费实例数, 若不填则默认为1
        :type HybridBillingPrepaidReplicas: int
        :param _ModelHotUpdateEnable: 是否开启模型的热更新。默认不开启
        :type ModelHotUpdateEnable: bool
        :param _ScheduledAction: 定时停止配置
        :type ScheduledAction: :class:`tencentcloud.tione.v20211111.models.ScheduledAction`
        :param _ServiceLimit: 服务限速限流相关配置
        :type ServiceLimit: :class:`tencentcloud.tione.v20211111.models.ServiceLimit`
        :param _VolumeMount: 挂载配置，目前只支持CFS
        :type VolumeMount: :class:`tencentcloud.tione.v20211111.models.VolumeMount`
        :param _AuthorizationEnable: 是否开启鉴权、目前更新时不支持更新，仅用于方便前端提交参数，不做任何处理，且参数不展示
        :type AuthorizationEnable: bool
        :param _ModelTurboEnable: 是否开启模型的加速, 仅对StableDiffusion(动态加速)格式的模型有效。默认不开启
        :type ModelTurboEnable: bool
        :param _ServiceCategory: 服务分类
        :type ServiceCategory: str
        :param _Command: 服务的启动命令，如遇特殊字符导致配置失败，可使用CommandBase64参数
        :type Command: str
        :param _ServiceEIP: 是否开启TIONE内网访问外部，此功能仅支持后付费机型与从TIONE平台购买的预付费机型；使用从CVM选择资源组时此配置不生效。
        :type ServiceEIP: :class:`tencentcloud.tione.v20211111.models.ServiceEIP`
        :param _CommandBase64: 服务的启动命令，以base64格式进行输入，与Command同时配置时，仅当前参数生效
        :type CommandBase64: str
        :param _ServicePort: 服务端口，仅在非内置镜像时生效，默认8501。不支持输入8501-8510,6006,9092
        :type ServicePort: int
        :param _InstancePerReplicas: 单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :type InstancePerReplicas: int
        :param _DeployType: 临时参数
        :type DeployType: str
        :param _TerminationGracePeriodSeconds: 30
        :type TerminationGracePeriodSeconds: int
        :param _PreStopCommand: ["sleep","60"]
        :type PreStopCommand: list of str
        :param _Roles: 服务的角色配置
        :type Roles: list of RoleSpec
        """
        self._ServiceId = None
        self._ModelInfo = None
        self._ImageInfo = None
        self._Env = None
        self._Resources = None
        self._InstanceType = None
        self._ScaleMode = None
        self._Replicas = None
        self._HorizontalPodAutoscaler = None
        self._LogEnable = None
        self._LogConfig = None
        self._ServiceAction = None
        self._ServiceDescription = None
        self._ScaleStrategy = None
        self._CronScaleJobs = None
        self._HybridBillingPrepaidReplicas = None
        self._ModelHotUpdateEnable = None
        self._ScheduledAction = None
        self._ServiceLimit = None
        self._VolumeMount = None
        self._AuthorizationEnable = None
        self._ModelTurboEnable = None
        self._ServiceCategory = None
        self._Command = None
        self._ServiceEIP = None
        self._CommandBase64 = None
        self._ServicePort = None
        self._InstancePerReplicas = None
        self._DeployType = None
        self._TerminationGracePeriodSeconds = None
        self._PreStopCommand = None
        self._Roles = None

    @property
    def ServiceId(self):
        """服务id
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId

    @property
    def ModelInfo(self):
        """模型信息，需要挂载模型时填写
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelInfo`
        """
        return self._ModelInfo

    @ModelInfo.setter
    def ModelInfo(self, ModelInfo):
        self._ModelInfo = ModelInfo

    @property
    def ImageInfo(self):
        """镜像信息，配置服务运行所需的镜像地址等信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def Env(self):
        """环境变量，可选参数，用于配置容器中的环境变量
        :rtype: list of EnvVar
        """
        return self._Env

    @Env.setter
    def Env(self, Env):
        self._Env = Env

    @property
    def Resources(self):
        """资源描述，指定预付费模式下的cpu,mem,gpu等信息，后付费无需填写
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        """
        return self._Resources

    @Resources.setter
    def Resources(self, Resources):
        self._Resources = Resources

    @property
    def InstanceType(self):
        """使用DescribeBillingSpecs接口返回的规格列表中的值，或者参考实例列表:
TI.S.MEDIUM.POST	2C4G
TI.S.LARGE.POST	4C8G
TI.S.2XLARGE16.POST	8C16G
TI.S.2XLARGE32.POST	8C32G
TI.S.4XLARGE32.POST	16C32G
TI.S.4XLARGE64.POST	16C64G
TI.S.6XLARGE48.POST	24C48G
TI.S.6XLARGE96.POST	24C96G
TI.S.8XLARGE64.POST	32C64G
TI.S.8XLARGE128.POST 32C128G
TI.GN7.LARGE20.POST	4C20G T4*1/4
TI.GN7.2XLARGE40.POST	10C40G T4*1/2
TI.GN7.2XLARGE32.POST	8C32G T4*1
TI.GN7.5XLARGE80.POST	20C80G T4*1
TI.GN7.8XLARGE128.POST	32C128G T4*1
TI.GN7.10XLARGE160.POST	40C160G T4*2
TI.GN7.20XLARGE320.POST	80C320G T4*4
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def ScaleMode(self):
        """扩缩容类型 支持：自动 - "AUTO", 手动 - "MANUAL"
        :rtype: str
        """
        return self._ScaleMode

    @ScaleMode.setter
    def ScaleMode(self, ScaleMode):
        self._ScaleMode = ScaleMode

    @property
    def Replicas(self):
        """实例数量, 不同计费模式和调节模式下对应关系如下
PREPAID 和 POSTPAID_BY_HOUR:
手动调节模式下对应 实例数量
自动调节模式下对应 基于时间的默认策略的实例数量
HYBRID_PAID:
后付费实例手动调节模式下对应 实例数量
后付费实例自动调节模式下对应 时间策略的默认策略的实例数量
        :rtype: int
        """
        return self._Replicas

    @Replicas.setter
    def Replicas(self, Replicas):
        self._Replicas = Replicas

    @property
    def HorizontalPodAutoscaler(self):
        """自动伸缩信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.HorizontalPodAutoscaler`
        """
        return self._HorizontalPodAutoscaler

    @HorizontalPodAutoscaler.setter
    def HorizontalPodAutoscaler(self, HorizontalPodAutoscaler):
        self._HorizontalPodAutoscaler = HorizontalPodAutoscaler

    @property
    def LogEnable(self):
        """是否开启日志投递，开启后需填写配置投递到指定cls
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def LogConfig(self):
        """日志配置，需要投递服务日志到指定cls时填写
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def ServiceAction(self):
        """特殊更新行为： "STOP": 停止, "RESUME": 重启, "SCALE": 扩缩容, 存在这些特殊更新行为时，会忽略其他更新字段
        :rtype: str
        """
        return self._ServiceAction

    @ServiceAction.setter
    def ServiceAction(self, ServiceAction):
        self._ServiceAction = ServiceAction

    @property
    def ServiceDescription(self):
        """服务的描述
        :rtype: str
        """
        return self._ServiceDescription

    @ServiceDescription.setter
    def ServiceDescription(self, ServiceDescription):
        self._ServiceDescription = ServiceDescription

    @property
    def ScaleStrategy(self):
        """自动伸缩策略
        :rtype: str
        """
        return self._ScaleStrategy

    @ScaleStrategy.setter
    def ScaleStrategy(self, ScaleStrategy):
        self._ScaleStrategy = ScaleStrategy

    @property
    def CronScaleJobs(self):
        """自动伸缩策略配置 HPA : 通过HPA进行弹性伸缩 CRON 通过定时任务进行伸缩
        :rtype: list of CronScaleJob
        """
        return self._CronScaleJobs

    @CronScaleJobs.setter
    def CronScaleJobs(self, CronScaleJobs):
        self._CronScaleJobs = CronScaleJobs

    @property
    def HybridBillingPrepaidReplicas(self):
        """计费模式[HYBRID_PAID]时生效, 用于标识混合计费模式下的预付费实例数, 若不填则默认为1
        :rtype: int
        """
        return self._HybridBillingPrepaidReplicas

    @HybridBillingPrepaidReplicas.setter
    def HybridBillingPrepaidReplicas(self, HybridBillingPrepaidReplicas):
        self._HybridBillingPrepaidReplicas = HybridBillingPrepaidReplicas

    @property
    def ModelHotUpdateEnable(self):
        """是否开启模型的热更新。默认不开启
        :rtype: bool
        """
        return self._ModelHotUpdateEnable

    @ModelHotUpdateEnable.setter
    def ModelHotUpdateEnable(self, ModelHotUpdateEnable):
        self._ModelHotUpdateEnable = ModelHotUpdateEnable

    @property
    def ScheduledAction(self):
        """定时停止配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ScheduledAction`
        """
        return self._ScheduledAction

    @ScheduledAction.setter
    def ScheduledAction(self, ScheduledAction):
        self._ScheduledAction = ScheduledAction

    @property
    def ServiceLimit(self):
        """服务限速限流相关配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ServiceLimit`
        """
        return self._ServiceLimit

    @ServiceLimit.setter
    def ServiceLimit(self, ServiceLimit):
        self._ServiceLimit = ServiceLimit

    @property
    def VolumeMount(self):
        """挂载配置，目前只支持CFS
        :rtype: :class:`tencentcloud.tione.v20211111.models.VolumeMount`
        """
        return self._VolumeMount

    @VolumeMount.setter
    def VolumeMount(self, VolumeMount):
        self._VolumeMount = VolumeMount

    @property
    def AuthorizationEnable(self):
        """是否开启鉴权、目前更新时不支持更新，仅用于方便前端提交参数，不做任何处理，且参数不展示
        :rtype: bool
        """
        return self._AuthorizationEnable

    @AuthorizationEnable.setter
    def AuthorizationEnable(self, AuthorizationEnable):
        self._AuthorizationEnable = AuthorizationEnable

    @property
    def ModelTurboEnable(self):
        """是否开启模型的加速, 仅对StableDiffusion(动态加速)格式的模型有效。默认不开启
        :rtype: bool
        """
        return self._ModelTurboEnable

    @ModelTurboEnable.setter
    def ModelTurboEnable(self, ModelTurboEnable):
        self._ModelTurboEnable = ModelTurboEnable

    @property
    def ServiceCategory(self):
        """服务分类
        :rtype: str
        """
        return self._ServiceCategory

    @ServiceCategory.setter
    def ServiceCategory(self, ServiceCategory):
        self._ServiceCategory = ServiceCategory

    @property
    def Command(self):
        """服务的启动命令，如遇特殊字符导致配置失败，可使用CommandBase64参数
        :rtype: str
        """
        return self._Command

    @Command.setter
    def Command(self, Command):
        self._Command = Command

    @property
    def ServiceEIP(self):
        """是否开启TIONE内网访问外部，此功能仅支持后付费机型与从TIONE平台购买的预付费机型；使用从CVM选择资源组时此配置不生效。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ServiceEIP`
        """
        return self._ServiceEIP

    @ServiceEIP.setter
    def ServiceEIP(self, ServiceEIP):
        self._ServiceEIP = ServiceEIP

    @property
    def CommandBase64(self):
        """服务的启动命令，以base64格式进行输入，与Command同时配置时，仅当前参数生效
        :rtype: str
        """
        return self._CommandBase64

    @CommandBase64.setter
    def CommandBase64(self, CommandBase64):
        self._CommandBase64 = CommandBase64

    @property
    def ServicePort(self):
        """服务端口，仅在非内置镜像时生效，默认8501。不支持输入8501-8510,6006,9092
        :rtype: int
        """
        return self._ServicePort

    @ServicePort.setter
    def ServicePort(self, ServicePort):
        self._ServicePort = ServicePort

    @property
    def InstancePerReplicas(self):
        """单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :rtype: int
        """
        return self._InstancePerReplicas

    @InstancePerReplicas.setter
    def InstancePerReplicas(self, InstancePerReplicas):
        self._InstancePerReplicas = InstancePerReplicas

    @property
    def DeployType(self):
        """临时参数
        :rtype: str
        """
        return self._DeployType

    @DeployType.setter
    def DeployType(self, DeployType):
        self._DeployType = DeployType

    @property
    def TerminationGracePeriodSeconds(self):
        """30
        :rtype: int
        """
        return self._TerminationGracePeriodSeconds

    @TerminationGracePeriodSeconds.setter
    def TerminationGracePeriodSeconds(self, TerminationGracePeriodSeconds):
        self._TerminationGracePeriodSeconds = TerminationGracePeriodSeconds

    @property
    def PreStopCommand(self):
        """["sleep","60"]
        :rtype: list of str
        """
        return self._PreStopCommand

    @PreStopCommand.setter
    def PreStopCommand(self, PreStopCommand):
        self._PreStopCommand = PreStopCommand

    @property
    def Roles(self):
        """服务的角色配置
        :rtype: list of RoleSpec
        """
        return self._Roles

    @Roles.setter
    def Roles(self, Roles):
        self._Roles = Roles


    def _deserialize(self, params):
        self._ServiceId = params.get("ServiceId")
        if params.get("ModelInfo") is not None:
            self._ModelInfo = ModelInfo()
            self._ModelInfo._deserialize(params.get("ModelInfo"))
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        if params.get("Env") is not None:
            self._Env = []
            for item in params.get("Env"):
                obj = EnvVar()
                obj._deserialize(item)
                self._Env.append(obj)
        if params.get("Resources") is not None:
            self._Resources = ResourceInfo()
            self._Resources._deserialize(params.get("Resources"))
        self._InstanceType = params.get("InstanceType")
        self._ScaleMode = params.get("ScaleMode")
        self._Replicas = params.get("Replicas")
        if params.get("HorizontalPodAutoscaler") is not None:
            self._HorizontalPodAutoscaler = HorizontalPodAutoscaler()
            self._HorizontalPodAutoscaler._deserialize(params.get("HorizontalPodAutoscaler"))
        self._LogEnable = params.get("LogEnable")
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        self._ServiceAction = params.get("ServiceAction")
        self._ServiceDescription = params.get("ServiceDescription")
        self._ScaleStrategy = params.get("ScaleStrategy")
        if params.get("CronScaleJobs") is not None:
            self._CronScaleJobs = []
            for item in params.get("CronScaleJobs"):
                obj = CronScaleJob()
                obj._deserialize(item)
                self._CronScaleJobs.append(obj)
        self._HybridBillingPrepaidReplicas = params.get("HybridBillingPrepaidReplicas")
        self._ModelHotUpdateEnable = params.get("ModelHotUpdateEnable")
        if params.get("ScheduledAction") is not None:
            self._ScheduledAction = ScheduledAction()
            self._ScheduledAction._deserialize(params.get("ScheduledAction"))
        if params.get("ServiceLimit") is not None:
            self._ServiceLimit = ServiceLimit()
            self._ServiceLimit._deserialize(params.get("ServiceLimit"))
        if params.get("VolumeMount") is not None:
            self._VolumeMount = VolumeMount()
            self._VolumeMount._deserialize(params.get("VolumeMount"))
        self._AuthorizationEnable = params.get("AuthorizationEnable")
        self._ModelTurboEnable = params.get("ModelTurboEnable")
        self._ServiceCategory = params.get("ServiceCategory")
        self._Command = params.get("Command")
        if params.get("ServiceEIP") is not None:
            self._ServiceEIP = ServiceEIP()
            self._ServiceEIP._deserialize(params.get("ServiceEIP"))
        self._CommandBase64 = params.get("CommandBase64")
        self._ServicePort = params.get("ServicePort")
        self._InstancePerReplicas = params.get("InstancePerReplicas")
        self._DeployType = params.get("DeployType")
        self._TerminationGracePeriodSeconds = params.get("TerminationGracePeriodSeconds")
        self._PreStopCommand = params.get("PreStopCommand")
        if params.get("Roles") is not None:
            self._Roles = []
            for item in params.get("Roles"):
                obj = RoleSpec()
                obj._deserialize(item)
                self._Roles.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyModelServiceResponse(AbstractModel):
    """ModifyModelService返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Service: 生成的模型服务
注意：此字段可能返回 null，表示取不到有效值。
        :type Service: :class:`tencentcloud.tione.v20211111.models.Service`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Service = None
        self._RequestId = None

    @property
    def Service(self):
        """生成的模型服务
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.Service`
        """
        return self._Service

    @Service.setter
    def Service(self, Service):
        self._Service = Service

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("Service") is not None:
            self._Service = Service()
            self._Service._deserialize(params.get("Service"))
        self._RequestId = params.get("RequestId")


class ModifyModelTagsRequest(AbstractModel):
    """ModifyModelTags请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TrainingModelId: 模型ID
        :type TrainingModelId: str
        :param _Tags: 标签
        :type Tags: list of Tag
        """
        self._TrainingModelId = None
        self._Tags = None

    @property
    def TrainingModelId(self):
        """模型ID
        :rtype: str
        """
        return self._TrainingModelId

    @TrainingModelId.setter
    def TrainingModelId(self, TrainingModelId):
        self._TrainingModelId = TrainingModelId

    @property
    def Tags(self):
        """标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._TrainingModelId = params.get("TrainingModelId")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyModelTagsResponse(AbstractModel):
    """ModifyModelTags返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyNotebookAutoStoppingRequest(AbstractModel):
    """ModifyNotebookAutoStopping请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: id值
        :type Id: str
        :param _AutoStopping: 是否自动停止
        :type AutoStopping: bool
        :param _AutomaticStopTime: 自动停止时间，单位小时
        :type AutomaticStopTime: int
        """
        self._Id = None
        self._AutoStopping = None
        self._AutomaticStopTime = None

    @property
    def Id(self):
        """id值
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def AutoStopping(self):
        """是否自动停止
        :rtype: bool
        """
        return self._AutoStopping

    @AutoStopping.setter
    def AutoStopping(self, AutoStopping):
        self._AutoStopping = AutoStopping

    @property
    def AutomaticStopTime(self):
        """自动停止时间，单位小时
        :rtype: int
        """
        return self._AutomaticStopTime

    @AutomaticStopTime.setter
    def AutomaticStopTime(self, AutomaticStopTime):
        self._AutomaticStopTime = AutomaticStopTime


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._AutoStopping = params.get("AutoStopping")
        self._AutomaticStopTime = params.get("AutomaticStopTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyNotebookAutoStoppingResponse(AbstractModel):
    """ModifyNotebookAutoStopping返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyNotebookRequest(AbstractModel):
    """ModifyNotebook请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: notebook id
        :type Id: str
        :param _Name: 名称。不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :type Name: str
        :param _ChargeType: （不允许修改）计算资源付费模式 ，可选值为：
PREPAID：预付费，即包年包月
POSTPAID_BY_HOUR：按小时后付费
        :type ChargeType: str
        :param _ResourceConf: 计算资源配置
        :type ResourceConf: :class:`tencentcloud.tione.v20211111.models.ResourceConf`
        :param _AutoStopping: 是否自动停止
        :type AutoStopping: bool
        :param _DirectInternetAccess: 是否访问公网
        :type DirectInternetAccess: bool
        :param _RootAccess: 是否ROOT权限
        :type RootAccess: bool
        :param _LogEnable: 是否上报日志
        :type LogEnable: bool
        :param _ResourceGroupId: 资源组ID(for预付费)
        :type ResourceGroupId: str
        :param _VpcId: （不允许修改）Vpc-Id
        :type VpcId: str
        :param _SubnetId: （不允许修改）子网Id
        :type SubnetId: str
        :param _VolumeSizeInGB: 存储卷大小，单位GB
        :type VolumeSizeInGB: int
        :param _VolumeSourceType: （不允许修改）存储的类型。取值包含： 
    FREE:    预付费的免费存储
    CLOUD_PREMIUM： 高性能云硬盘
    CLOUD_SSD： SSD云硬盘
    CFS:     CFS存储，包含NFS和turbo
        :type VolumeSourceType: str
        :param _VolumeSourceCFS: （不允许修改）CFS存储的配置
        :type VolumeSourceCFS: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        :param _LogConfig: 日志配置
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _LifecycleScriptId: 生命周期脚本的ID
        :type LifecycleScriptId: str
        :param _DefaultCodeRepoId: 默认GIT存储库的ID
        :type DefaultCodeRepoId: str
        :param _AdditionalCodeRepoIds: 其他GIT存储库的ID，最多3个
        :type AdditionalCodeRepoIds: list of str
        :param _AutomaticStopTime: 自动停止时间，单位小时
        :type AutomaticStopTime: int
        :param _Tags: 标签配置
        :type Tags: list of Tag
        :param _DataConfigs: 数据配置，只支持WEDATA_HDFS
        :type DataConfigs: list of DataConfig
        :param _ImageInfo: 镜像信息
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _ImageType: 镜像类型，包括SYSTEM、TCR、CCR
        :type ImageType: str
        :param _SSHConfig: SSH配置
        :type SSHConfig: :class:`tencentcloud.tione.v20211111.models.SSHConfig`
        :param _DataPipelineTaskId: 数据构建任务ID
        :type DataPipelineTaskId: str
        :param _UserType: 用户类型
        :type UserType: str
        :param _Envs: 自定义环境变量
        :type Envs: list of EnvVar
        """
        self._Id = None
        self._Name = None
        self._ChargeType = None
        self._ResourceConf = None
        self._AutoStopping = None
        self._DirectInternetAccess = None
        self._RootAccess = None
        self._LogEnable = None
        self._ResourceGroupId = None
        self._VpcId = None
        self._SubnetId = None
        self._VolumeSizeInGB = None
        self._VolumeSourceType = None
        self._VolumeSourceCFS = None
        self._LogConfig = None
        self._LifecycleScriptId = None
        self._DefaultCodeRepoId = None
        self._AdditionalCodeRepoIds = None
        self._AutomaticStopTime = None
        self._Tags = None
        self._DataConfigs = None
        self._ImageInfo = None
        self._ImageType = None
        self._SSHConfig = None
        self._DataPipelineTaskId = None
        self._UserType = None
        self._Envs = None

    @property
    def Id(self):
        """notebook id
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """名称。不超过60个字符，仅支持中英文、数字、下划线"_"、短横"-"，只能以中英文、数字开头
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ChargeType(self):
        """（不允许修改）计算资源付费模式 ，可选值为：
PREPAID：预付费，即包年包月
POSTPAID_BY_HOUR：按小时后付费
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceConf(self):
        """计算资源配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceConf`
        """
        return self._ResourceConf

    @ResourceConf.setter
    def ResourceConf(self, ResourceConf):
        self._ResourceConf = ResourceConf

    @property
    def AutoStopping(self):
        """是否自动停止
        :rtype: bool
        """
        return self._AutoStopping

    @AutoStopping.setter
    def AutoStopping(self, AutoStopping):
        self._AutoStopping = AutoStopping

    @property
    def DirectInternetAccess(self):
        """是否访问公网
        :rtype: bool
        """
        return self._DirectInternetAccess

    @DirectInternetAccess.setter
    def DirectInternetAccess(self, DirectInternetAccess):
        self._DirectInternetAccess = DirectInternetAccess

    @property
    def RootAccess(self):
        """是否ROOT权限
        :rtype: bool
        """
        return self._RootAccess

    @RootAccess.setter
    def RootAccess(self, RootAccess):
        self._RootAccess = RootAccess

    @property
    def LogEnable(self):
        """是否上报日志
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def ResourceGroupId(self):
        """资源组ID(for预付费)
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def VpcId(self):
        """（不允许修改）Vpc-Id
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """（不允许修改）子网Id
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def VolumeSizeInGB(self):
        """存储卷大小，单位GB
        :rtype: int
        """
        return self._VolumeSizeInGB

    @VolumeSizeInGB.setter
    def VolumeSizeInGB(self, VolumeSizeInGB):
        self._VolumeSizeInGB = VolumeSizeInGB

    @property
    def VolumeSourceType(self):
        """（不允许修改）存储的类型。取值包含： 
    FREE:    预付费的免费存储
    CLOUD_PREMIUM： 高性能云硬盘
    CLOUD_SSD： SSD云硬盘
    CFS:     CFS存储，包含NFS和turbo
        :rtype: str
        """
        return self._VolumeSourceType

    @VolumeSourceType.setter
    def VolumeSourceType(self, VolumeSourceType):
        self._VolumeSourceType = VolumeSourceType

    @property
    def VolumeSourceCFS(self):
        """（不允许修改）CFS存储的配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        """
        return self._VolumeSourceCFS

    @VolumeSourceCFS.setter
    def VolumeSourceCFS(self, VolumeSourceCFS):
        self._VolumeSourceCFS = VolumeSourceCFS

    @property
    def LogConfig(self):
        """日志配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def LifecycleScriptId(self):
        """生命周期脚本的ID
        :rtype: str
        """
        return self._LifecycleScriptId

    @LifecycleScriptId.setter
    def LifecycleScriptId(self, LifecycleScriptId):
        self._LifecycleScriptId = LifecycleScriptId

    @property
    def DefaultCodeRepoId(self):
        """默认GIT存储库的ID
        :rtype: str
        """
        return self._DefaultCodeRepoId

    @DefaultCodeRepoId.setter
    def DefaultCodeRepoId(self, DefaultCodeRepoId):
        self._DefaultCodeRepoId = DefaultCodeRepoId

    @property
    def AdditionalCodeRepoIds(self):
        """其他GIT存储库的ID，最多3个
        :rtype: list of str
        """
        return self._AdditionalCodeRepoIds

    @AdditionalCodeRepoIds.setter
    def AdditionalCodeRepoIds(self, AdditionalCodeRepoIds):
        self._AdditionalCodeRepoIds = AdditionalCodeRepoIds

    @property
    def AutomaticStopTime(self):
        """自动停止时间，单位小时
        :rtype: int
        """
        return self._AutomaticStopTime

    @AutomaticStopTime.setter
    def AutomaticStopTime(self, AutomaticStopTime):
        self._AutomaticStopTime = AutomaticStopTime

    @property
    def Tags(self):
        """标签配置
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def DataConfigs(self):
        """数据配置，只支持WEDATA_HDFS
        :rtype: list of DataConfig
        """
        return self._DataConfigs

    @DataConfigs.setter
    def DataConfigs(self, DataConfigs):
        self._DataConfigs = DataConfigs

    @property
    def ImageInfo(self):
        """镜像信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def ImageType(self):
        """镜像类型，包括SYSTEM、TCR、CCR
        :rtype: str
        """
        return self._ImageType

    @ImageType.setter
    def ImageType(self, ImageType):
        self._ImageType = ImageType

    @property
    def SSHConfig(self):
        """SSH配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.SSHConfig`
        """
        return self._SSHConfig

    @SSHConfig.setter
    def SSHConfig(self, SSHConfig):
        self._SSHConfig = SSHConfig

    @property
    def DataPipelineTaskId(self):
        """数据构建任务ID
        :rtype: str
        """
        return self._DataPipelineTaskId

    @DataPipelineTaskId.setter
    def DataPipelineTaskId(self, DataPipelineTaskId):
        self._DataPipelineTaskId = DataPipelineTaskId

    @property
    def UserType(self):
        """用户类型
        :rtype: str
        """
        return self._UserType

    @UserType.setter
    def UserType(self, UserType):
        self._UserType = UserType

    @property
    def Envs(self):
        """自定义环境变量
        :rtype: list of EnvVar
        """
        return self._Envs

    @Envs.setter
    def Envs(self, Envs):
        self._Envs = Envs


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._ChargeType = params.get("ChargeType")
        if params.get("ResourceConf") is not None:
            self._ResourceConf = ResourceConf()
            self._ResourceConf._deserialize(params.get("ResourceConf"))
        self._AutoStopping = params.get("AutoStopping")
        self._DirectInternetAccess = params.get("DirectInternetAccess")
        self._RootAccess = params.get("RootAccess")
        self._LogEnable = params.get("LogEnable")
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._VolumeSizeInGB = params.get("VolumeSizeInGB")
        self._VolumeSourceType = params.get("VolumeSourceType")
        if params.get("VolumeSourceCFS") is not None:
            self._VolumeSourceCFS = CFSConfig()
            self._VolumeSourceCFS._deserialize(params.get("VolumeSourceCFS"))
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        self._LifecycleScriptId = params.get("LifecycleScriptId")
        self._DefaultCodeRepoId = params.get("DefaultCodeRepoId")
        self._AdditionalCodeRepoIds = params.get("AdditionalCodeRepoIds")
        self._AutomaticStopTime = params.get("AutomaticStopTime")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        if params.get("DataConfigs") is not None:
            self._DataConfigs = []
            for item in params.get("DataConfigs"):
                obj = DataConfig()
                obj._deserialize(item)
                self._DataConfigs.append(obj)
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        self._ImageType = params.get("ImageType")
        if params.get("SSHConfig") is not None:
            self._SSHConfig = SSHConfig()
            self._SSHConfig._deserialize(params.get("SSHConfig"))
        self._DataPipelineTaskId = params.get("DataPipelineTaskId")
        self._UserType = params.get("UserType")
        if params.get("Envs") is not None:
            self._Envs = []
            for item in params.get("Envs"):
                obj = EnvVar()
                obj._deserialize(item)
                self._Envs.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyNotebookResponse(AbstractModel):
    """ModifyNotebook返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyNotebookTagsRequest(AbstractModel):
    """ModifyNotebookTags请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: Notebook Id
        :type Id: str
        :param _Tags: Notebook修改标签集合
        :type Tags: list of Tag
        """
        self._Id = None
        self._Tags = None

    @property
    def Id(self):
        """Notebook Id
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Tags(self):
        """Notebook修改标签集合
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._Id = params.get("Id")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyNotebookTagsResponse(AbstractModel):
    """ModifyNotebookTags返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyObjevalTagsRequest(AbstractModel):
    """ModifyObjevalTags请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 评测ID
        :type TaskId: str
        :param _Tags: 标签
        :type Tags: list of Tag
        """
        self._TaskId = None
        self._Tags = None

    @property
    def TaskId(self):
        """评测ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Tags(self):
        """标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyObjevalTagsResponse(AbstractModel):
    """ModifyObjevalTags返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyProjectRequest(AbstractModel):
    """ModifyProject请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ProjectId: 工程ID
        :type ProjectId: str
        :param _ProjectName: 工程名称
        :type ProjectName: str
        :param _Description: 工程描述
        :type Description: str
        :param _LogEnable: 是否上报日志
        :type LogEnable: bool
        :param _LogConfig: CLS日志配置
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _Tags: 标签
        :type Tags: list of Tag
        """
        self._ProjectId = None
        self._ProjectName = None
        self._Description = None
        self._LogEnable = None
        self._LogConfig = None
        self._Tags = None

    @property
    def ProjectId(self):
        """工程ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectName(self):
        """工程名称
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def Description(self):
        """工程描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def LogEnable(self):
        """是否上报日志
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def LogConfig(self):
        """CLS日志配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def Tags(self):
        """标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._ProjectName = params.get("ProjectName")
        self._Description = params.get("Description")
        self._LogEnable = params.get("LogEnable")
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyProjectResponse(AbstractModel):
    """ModifyProject返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ProjectId: 工程ID
        :type ProjectId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ProjectId = None
        self._RequestId = None

    @property
    def ProjectId(self):
        """工程ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._RequestId = params.get("RequestId")


class ModifyRecyclePolicyRequest(AbstractModel):
    """ModifyRecyclePolicy请求参数结构体

    """

    def __init__(self):
        r"""
        :param _RecyclePolicyId: id值	
        :type RecyclePolicyId: str
        :param _RecycleConfig: 回收策略	
        :type RecycleConfig: :class:`tencentcloud.tione.v20211111.models.RecycleConfig`
        :param _ExcludeConfig: 排除策略	
        :type ExcludeConfig: :class:`tencentcloud.tione.v20211111.models.ExcludeConfig`
        """
        self._RecyclePolicyId = None
        self._RecycleConfig = None
        self._ExcludeConfig = None

    @property
    def RecyclePolicyId(self):
        """id值	
        :rtype: str
        """
        return self._RecyclePolicyId

    @RecyclePolicyId.setter
    def RecyclePolicyId(self, RecyclePolicyId):
        self._RecyclePolicyId = RecyclePolicyId

    @property
    def RecycleConfig(self):
        """回收策略	
        :rtype: :class:`tencentcloud.tione.v20211111.models.RecycleConfig`
        """
        return self._RecycleConfig

    @RecycleConfig.setter
    def RecycleConfig(self, RecycleConfig):
        self._RecycleConfig = RecycleConfig

    @property
    def ExcludeConfig(self):
        """排除策略	
        :rtype: :class:`tencentcloud.tione.v20211111.models.ExcludeConfig`
        """
        return self._ExcludeConfig

    @ExcludeConfig.setter
    def ExcludeConfig(self, ExcludeConfig):
        self._ExcludeConfig = ExcludeConfig


    def _deserialize(self, params):
        self._RecyclePolicyId = params.get("RecyclePolicyId")
        if params.get("RecycleConfig") is not None:
            self._RecycleConfig = RecycleConfig()
            self._RecycleConfig._deserialize(params.get("RecycleConfig"))
        if params.get("ExcludeConfig") is not None:
            self._ExcludeConfig = ExcludeConfig()
            self._ExcludeConfig._deserialize(params.get("ExcludeConfig"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyRecyclePolicyResponse(AbstractModel):
    """ModifyRecyclePolicy返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyServiceGroupWeightsRequest(AbstractModel):
    """ModifyServiceGroupWeights请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceGroupId: 服务组id
        :type ServiceGroupId: str
        :param _Weights: 权重设置
        :type Weights: list of WeightEntry
        """
        self._ServiceGroupId = None
        self._Weights = None

    @property
    def ServiceGroupId(self):
        """服务组id
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def Weights(self):
        """权重设置
        :rtype: list of WeightEntry
        """
        return self._Weights

    @Weights.setter
    def Weights(self, Weights):
        self._Weights = Weights


    def _deserialize(self, params):
        self._ServiceGroupId = params.get("ServiceGroupId")
        if params.get("Weights") is not None:
            self._Weights = []
            for item in params.get("Weights"):
                obj = WeightEntry()
                obj._deserialize(item)
                self._Weights.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyServiceGroupWeightsResponse(AbstractModel):
    """ModifyServiceGroupWeights返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceGroup: 更新权重后的服务组信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceGroup: :class:`tencentcloud.tione.v20211111.models.ServiceGroup`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ServiceGroup = None
        self._RequestId = None

    @property
    def ServiceGroup(self):
        """更新权重后的服务组信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ServiceGroup`
        """
        return self._ServiceGroup

    @ServiceGroup.setter
    def ServiceGroup(self, ServiceGroup):
        self._ServiceGroup = ServiceGroup

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("ServiceGroup") is not None:
            self._ServiceGroup = ServiceGroup()
            self._ServiceGroup._deserialize(params.get("ServiceGroup"))
        self._RequestId = params.get("RequestId")


class ModifyStorageToKeepAliveRequest(AbstractModel):
    """ModifyStorageToKeepAlive请求参数结构体

    """


class ModifyStorageToKeepAliveResponse(AbstractModel):
    """ModifyStorageToKeepAlive返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifySubevalTagsRequest(AbstractModel):
    """ModifySubevalTags请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 评测ID
        :type TaskId: str
        :param _Tags: 标签
        :type Tags: list of Tag
        """
        self._TaskId = None
        self._Tags = None

    @property
    def TaskId(self):
        """评测ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Tags(self):
        """标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifySubevalTagsResponse(AbstractModel):
    """ModifySubevalTags返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyTagsRequest(AbstractModel):
    """ModifyTags请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceGroupId: 模型服务的服务组id
        :type ServiceGroupId: str
        :param _Tags: 标签数组
        :type Tags: list of Tag
        :param _ServiceCategory: 服务分类, 默认不填,TAIJI_HY表示混元大模型服务
        :type ServiceCategory: str
        """
        self._ServiceGroupId = None
        self._Tags = None
        self._ServiceCategory = None

    @property
    def ServiceGroupId(self):
        """模型服务的服务组id
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def Tags(self):
        """标签数组
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def ServiceCategory(self):
        """服务分类, 默认不填,TAIJI_HY表示混元大模型服务
        :rtype: str
        """
        return self._ServiceCategory

    @ServiceCategory.setter
    def ServiceCategory(self, ServiceCategory):
        self._ServiceCategory = ServiceCategory


    def _deserialize(self, params):
        self._ServiceGroupId = params.get("ServiceGroupId")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._ServiceCategory = params.get("ServiceCategory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyTagsResponse(AbstractModel):
    """ModifyTags返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyTaskDisplayConfigRequest(AbstractModel):
    """ModifyTaskDisplayConfig请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _BgColor: 背景颜色
        :type BgColor: str
        :param _FontFamily: 字体系列
        :type FontFamily: str
        :param _FontSize: 字体大小
        :type FontSize: str
        """
        self._TaskId = None
        self._BgColor = None
        self._FontFamily = None
        self._FontSize = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def BgColor(self):
        """背景颜色
        :rtype: str
        """
        return self._BgColor

    @BgColor.setter
    def BgColor(self, BgColor):
        self._BgColor = BgColor

    @property
    def FontFamily(self):
        """字体系列
        :rtype: str
        """
        return self._FontFamily

    @FontFamily.setter
    def FontFamily(self, FontFamily):
        self._FontFamily = FontFamily

    @property
    def FontSize(self):
        """字体大小
        :rtype: str
        """
        return self._FontSize

    @FontSize.setter
    def FontSize(self, FontSize):
        self._FontSize = FontSize


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._BgColor = params.get("BgColor")
        self._FontFamily = params.get("FontFamily")
        self._FontSize = params.get("FontSize")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyTaskDisplayConfigResponse(AbstractModel):
    """ModifyTaskDisplayConfig返回参数结构体

    """

    def __init__(self):
        r"""
        :param _BgColor: 背景颜色
        :type BgColor: str
        :param _FontFamily: 字体系列
        :type FontFamily: str
        :param _FontSize: 字体大小
        :type FontSize: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._BgColor = None
        self._FontFamily = None
        self._FontSize = None
        self._RequestId = None

    @property
    def BgColor(self):
        """背景颜色
        :rtype: str
        """
        return self._BgColor

    @BgColor.setter
    def BgColor(self, BgColor):
        self._BgColor = BgColor

    @property
    def FontFamily(self):
        """字体系列
        :rtype: str
        """
        return self._FontFamily

    @FontFamily.setter
    def FontFamily(self, FontFamily):
        self._FontFamily = FontFamily

    @property
    def FontSize(self):
        """字体大小
        :rtype: str
        """
        return self._FontSize

    @FontSize.setter
    def FontSize(self, FontSize):
        self._FontSize = FontSize

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._BgColor = params.get("BgColor")
        self._FontFamily = params.get("FontFamily")
        self._FontSize = params.get("FontSize")
        self._RequestId = params.get("RequestId")


class ModifyTaskLabelValueRequest(AbstractModel):
    """ModifyTaskLabelValue请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        :param _LabelName: 标签名
        :type LabelName: str
        :param _LabelColor: 标签颜色(分类场景无需)
        :type LabelColor: str
        """
        self._TaskId = None
        self._LabelName = None
        self._LabelColor = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def LabelName(self):
        """标签名
        :rtype: str
        """
        return self._LabelName

    @LabelName.setter
    def LabelName(self, LabelName):
        self._LabelName = LabelName

    @property
    def LabelColor(self):
        """标签颜色(分类场景无需)
        :rtype: str
        """
        return self._LabelColor

    @LabelColor.setter
    def LabelColor(self, LabelColor):
        self._LabelColor = LabelColor


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._LabelName = params.get("LabelName")
        self._LabelColor = params.get("LabelColor")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyTaskLabelValueResponse(AbstractModel):
    """ModifyTaskLabelValue返回参数结构体

    """

    def __init__(self):
        r"""
        :param _LabelName: 标签名
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelName: str
        :param _LabelColor: 标签颜色(分类场景无需)
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelColor: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._LabelName = None
        self._LabelColor = None
        self._RequestId = None

    @property
    def LabelName(self):
        """标签名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LabelName

    @LabelName.setter
    def LabelName(self, LabelName):
        self._LabelName = LabelName

    @property
    def LabelColor(self):
        """标签颜色(分类场景无需)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LabelColor

    @LabelColor.setter
    def LabelColor(self, LabelColor):
        self._LabelColor = LabelColor

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._LabelName = params.get("LabelName")
        self._LabelColor = params.get("LabelColor")
        self._RequestId = params.get("RequestId")


class ModifyTaskProcessingStatusRequest(AbstractModel):
    """ModifyTaskProcessingStatus请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        :param _ProcessingStatus: 状态取值范围0-2
        :type ProcessingStatus: int
        """
        self._TaskId = None
        self._ProcessingStatus = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ProcessingStatus(self):
        """状态取值范围0-2
        :rtype: int
        """
        return self._ProcessingStatus

    @ProcessingStatus.setter
    def ProcessingStatus(self, ProcessingStatus):
        self._ProcessingStatus = ProcessingStatus


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ProcessingStatus = params.get("ProcessingStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyTaskProcessingStatusResponse(AbstractModel):
    """ModifyTaskProcessingStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ProcessingStatus: 状态取值范围0-2
        :type ProcessingStatus: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ProcessingStatus = None
        self._RequestId = None

    @property
    def ProcessingStatus(self):
        """状态取值范围0-2
        :rtype: int
        """
        return self._ProcessingStatus

    @ProcessingStatus.setter
    def ProcessingStatus(self, ProcessingStatus):
        self._ProcessingStatus = ProcessingStatus

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ProcessingStatus = params.get("ProcessingStatus")
        self._RequestId = params.get("RequestId")


class ModifyTaskTagsRequest(AbstractModel):
    """ModifyTaskTags请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: 训练任务ID
        :type Id: str
        :param _Tags: 标签列表
        :type Tags: list of Tag
        """
        self._Id = None
        self._Tags = None

    @property
    def Id(self):
        """训练任务ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Tags(self):
        """标签列表
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags


    def _deserialize(self, params):
        self._Id = params.get("Id")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyTaskTagsResponse(AbstractModel):
    """ModifyTaskTags返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyTrainingTaskRequest(AbstractModel):
    """ModifyTrainingTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: 训练任务ID
        :type Id: str
        :param _Name: 训练任务新名称
        :type Name: str
        """
        self._Id = None
        self._Name = None

    @property
    def Id(self):
        """训练任务ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """训练任务新名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyTrainingTaskResponse(AbstractModel):
    """ModifyTrainingTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ModifyVpcPrivateLinkRequest(AbstractModel):
    """ModifyVpcPrivateLink请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: 唯一ID
        :type Id: str
        :param _MappingDomain: 用户自定义映射域名
        :type MappingDomain: str
        """
        self._Id = None
        self._MappingDomain = None

    @property
    def Id(self):
        """唯一ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def MappingDomain(self):
        """用户自定义映射域名
        :rtype: str
        """
        return self._MappingDomain

    @MappingDomain.setter
    def MappingDomain(self, MappingDomain):
        self._MappingDomain = MappingDomain


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._MappingDomain = params.get("MappingDomain")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ModifyVpcPrivateLinkResponse(AbstractModel):
    """ModifyVpcPrivateLink返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class MultiModalContent(AbstractModel):
    """多模态对话内容,支持图片与文字信息

    """

    def __init__(self):
        r"""
        :param _Type: 对话类型，text表示文本对话内容，image_url表示图片对话内容
        :type Type: str
        :param _Text: 文本对话内容，当Type为text时需要填写该值
        :type Text: str
        :param _ImageUrl: 图片对话内容，当Type为image_url时需要填写该值
        :type ImageUrl: :class:`tencentcloud.tione.v20211111.models.ImageUrl`
        """
        self._Type = None
        self._Text = None
        self._ImageUrl = None

    @property
    def Type(self):
        """对话类型，text表示文本对话内容，image_url表示图片对话内容
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Text(self):
        """文本对话内容，当Type为text时需要填写该值
        :rtype: str
        """
        return self._Text

    @Text.setter
    def Text(self, Text):
        self._Text = Text

    @property
    def ImageUrl(self):
        """图片对话内容，当Type为image_url时需要填写该值
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageUrl`
        """
        return self._ImageUrl

    @ImageUrl.setter
    def ImageUrl(self, ImageUrl):
        self._ImageUrl = ImageUrl


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Text = params.get("Text")
        if params.get("ImageUrl") is not None:
            self._ImageUrl = ImageUrl()
            self._ImageUrl._deserialize(params.get("ImageUrl"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NLPBadcaseItem(AbstractModel):
    """NLPBadcase项

    """

    def __init__(self):
        r"""
        :param _Topic: 题目
        :type Topic: str
        :param _GroundTruthLabels: gt标签
        :type GroundTruthLabels: list of str
        :param _PredictLabels: pred标签
        :type PredictLabels: list of str
        :param _DatasetId: 数据集id
        :type DatasetId: str
        :param _SampleId: 文本id
        :type SampleId: str
        :param _Summary: 文本摘要
        :type Summary: str
        :param _IsBadCase: 是否为badcase
        :type IsBadCase: bool
        """
        self._Topic = None
        self._GroundTruthLabels = None
        self._PredictLabels = None
        self._DatasetId = None
        self._SampleId = None
        self._Summary = None
        self._IsBadCase = None

    @property
    def Topic(self):
        """题目
        :rtype: str
        """
        return self._Topic

    @Topic.setter
    def Topic(self, Topic):
        self._Topic = Topic

    @property
    def GroundTruthLabels(self):
        """gt标签
        :rtype: list of str
        """
        return self._GroundTruthLabels

    @GroundTruthLabels.setter
    def GroundTruthLabels(self, GroundTruthLabels):
        self._GroundTruthLabels = GroundTruthLabels

    @property
    def PredictLabels(self):
        """pred标签
        :rtype: list of str
        """
        return self._PredictLabels

    @PredictLabels.setter
    def PredictLabels(self, PredictLabels):
        self._PredictLabels = PredictLabels

    @property
    def DatasetId(self):
        """数据集id
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def SampleId(self):
        """文本id
        :rtype: str
        """
        return self._SampleId

    @SampleId.setter
    def SampleId(self, SampleId):
        self._SampleId = SampleId

    @property
    def Summary(self):
        """文本摘要
        :rtype: str
        """
        return self._Summary

    @Summary.setter
    def Summary(self, Summary):
        self._Summary = Summary

    @property
    def IsBadCase(self):
        """是否为badcase
        :rtype: bool
        """
        return self._IsBadCase

    @IsBadCase.setter
    def IsBadCase(self, IsBadCase):
        self._IsBadCase = IsBadCase


    def _deserialize(self, params):
        self._Topic = params.get("Topic")
        self._GroundTruthLabels = params.get("GroundTruthLabels")
        self._PredictLabels = params.get("PredictLabels")
        self._DatasetId = params.get("DatasetId")
        self._SampleId = params.get("SampleId")
        self._Summary = params.get("Summary")
        self._IsBadCase = params.get("IsBadCase")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NLPIndicatorItem(AbstractModel):
    """NLP基础指标

    """

    def __init__(self):
        r"""
        :param _Topic: 题目
        :type Topic: str
        :param _MultiLabel: 是否为多标签
        :type MultiLabel: bool
        :param _Accuracy: 准确率
        :type Accuracy: float
        :param _Precision: 精确率
        :type Precision: float
        :param _Recall: 召回率
        :type Recall: float
        :param _MacroFScore: 宏平均
        :type MacroFScore: float
        :param _MicroFScore: 微平均
        :type MicroFScore: float
        """
        self._Topic = None
        self._MultiLabel = None
        self._Accuracy = None
        self._Precision = None
        self._Recall = None
        self._MacroFScore = None
        self._MicroFScore = None

    @property
    def Topic(self):
        """题目
        :rtype: str
        """
        return self._Topic

    @Topic.setter
    def Topic(self, Topic):
        self._Topic = Topic

    @property
    def MultiLabel(self):
        """是否为多标签
        :rtype: bool
        """
        return self._MultiLabel

    @MultiLabel.setter
    def MultiLabel(self, MultiLabel):
        self._MultiLabel = MultiLabel

    @property
    def Accuracy(self):
        """准确率
        :rtype: float
        """
        return self._Accuracy

    @Accuracy.setter
    def Accuracy(self, Accuracy):
        self._Accuracy = Accuracy

    @property
    def Precision(self):
        """精确率
        :rtype: float
        """
        return self._Precision

    @Precision.setter
    def Precision(self, Precision):
        self._Precision = Precision

    @property
    def Recall(self):
        """召回率
        :rtype: float
        """
        return self._Recall

    @Recall.setter
    def Recall(self, Recall):
        self._Recall = Recall

    @property
    def MacroFScore(self):
        """宏平均
        :rtype: float
        """
        return self._MacroFScore

    @MacroFScore.setter
    def MacroFScore(self, MacroFScore):
        self._MacroFScore = MacroFScore

    @property
    def MicroFScore(self):
        """微平均
        :rtype: float
        """
        return self._MicroFScore

    @MicroFScore.setter
    def MicroFScore(self, MicroFScore):
        self._MicroFScore = MicroFScore


    def _deserialize(self, params):
        self._Topic = params.get("Topic")
        self._MultiLabel = params.get("MultiLabel")
        self._Accuracy = params.get("Accuracy")
        self._Precision = params.get("Precision")
        self._Recall = params.get("Recall")
        self._MacroFScore = params.get("MacroFScore")
        self._MicroFScore = params.get("MicroFScore")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NLPItem(AbstractModel):
    """NlpItem项

    """

    def __init__(self):
        r"""
        :param _Topic: 题目
        :type Topic: str
        :param _GtLabels: gt标签
        :type GtLabels: list of str
        :param _PredictionLabels: pred标签
        :type PredictionLabels: list of str
        """
        self._Topic = None
        self._GtLabels = None
        self._PredictionLabels = None

    @property
    def Topic(self):
        """题目
        :rtype: str
        """
        return self._Topic

    @Topic.setter
    def Topic(self, Topic):
        self._Topic = Topic

    @property
    def GtLabels(self):
        """gt标签
        :rtype: list of str
        """
        return self._GtLabels

    @GtLabels.setter
    def GtLabels(self, GtLabels):
        self._GtLabels = GtLabels

    @property
    def PredictionLabels(self):
        """pred标签
        :rtype: list of str
        """
        return self._PredictionLabels

    @PredictionLabels.setter
    def PredictionLabels(self, PredictionLabels):
        self._PredictionLabels = PredictionLabels


    def _deserialize(self, params):
        self._Topic = params.get("Topic")
        self._GtLabels = params.get("GtLabels")
        self._PredictionLabels = params.get("PredictionLabels")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NLPPredictResult(AbstractModel):
    """文本分类预测结果

    """

    def __init__(self):
        r"""
        :param _Topic: 问题类型
注意：此字段可能返回 null，表示取不到有效值。
        :type Topic: str
        :param _Category: 文本类别
        :type Category: list of str
        :param _Score: 置信度
        :type Score: float
        """
        self._Topic = None
        self._Category = None
        self._Score = None

    @property
    def Topic(self):
        """问题类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Topic

    @Topic.setter
    def Topic(self, Topic):
        self._Topic = Topic

    @property
    def Category(self):
        """文本类别
        :rtype: list of str
        """
        return self._Category

    @Category.setter
    def Category(self, Category):
        self._Category = Category

    @property
    def Score(self):
        """置信度
        :rtype: float
        """
        return self._Score

    @Score.setter
    def Score(self, Score):
        self._Score = Score


    def _deserialize(self, params):
        self._Topic = params.get("Topic")
        self._Category = params.get("Category")
        self._Score = params.get("Score")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NLPSample(AbstractModel):
    """自动学习文本分类样本

    """

    def __init__(self):
        r"""
        :param _Text: 样本内容
        :type Text: str
        :param _RecordId: 样本id
        :type RecordId: str
        """
        self._Text = None
        self._RecordId = None

    @property
    def Text(self):
        """样本内容
        :rtype: str
        """
        return self._Text

    @Text.setter
    def Text(self, Text):
        self._Text = Text

    @property
    def RecordId(self):
        """样本id
        :rtype: str
        """
        return self._RecordId

    @RecordId.setter
    def RecordId(self, RecordId):
        self._RecordId = RecordId


    def _deserialize(self, params):
        self._Text = params.get("Text")
        self._RecordId = params.get("RecordId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NLPSamplePredictResult(AbstractModel):
    """文本分类预测结果

    """

    def __init__(self):
        r"""
        :param _RecordId: 缓存记录ID
        :type RecordId: str
        :param _SampleMD5: 文本内容的MD5值
        :type SampleMD5: str
        :param _Content: 文本内容
        :type Content: str
        :param _PredictResult: 预测结果
        :type PredictResult: list of NLPPredictResult
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _UpdateTime: 最近更新时间
        :type UpdateTime: str
        """
        self._RecordId = None
        self._SampleMD5 = None
        self._Content = None
        self._PredictResult = None
        self._CreateTime = None
        self._UpdateTime = None

    @property
    def RecordId(self):
        """缓存记录ID
        :rtype: str
        """
        return self._RecordId

    @RecordId.setter
    def RecordId(self, RecordId):
        self._RecordId = RecordId

    @property
    def SampleMD5(self):
        """文本内容的MD5值
        :rtype: str
        """
        return self._SampleMD5

    @SampleMD5.setter
    def SampleMD5(self, SampleMD5):
        self._SampleMD5 = SampleMD5

    @property
    def Content(self):
        """文本内容
        :rtype: str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def PredictResult(self):
        """预测结果
        :rtype: list of NLPPredictResult
        """
        return self._PredictResult

    @PredictResult.setter
    def PredictResult(self, PredictResult):
        self._PredictResult = PredictResult

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """最近更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime


    def _deserialize(self, params):
        self._RecordId = params.get("RecordId")
        self._SampleMD5 = params.get("SampleMD5")
        self._Content = params.get("Content")
        if params.get("PredictResult") is not None:
            self._PredictResult = []
            for item in params.get("PredictResult"):
                obj = NLPPredictResult()
                obj._deserialize(item)
                self._PredictResult.append(obj)
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NLPTagFilter(AbstractModel):
    """NLP查询条件

    """

    def __init__(self):
        r"""
        :param _Name: 查询的名称
        :type Name: str
        :param _Predicate: 查询的类型
        :type Predicate: str
        :param _NumberValue: 需要查询的数字类型的内容
        :type NumberValue: float
        :param _SearchTerm: 用于SEARCH的词
        :type SearchTerm: str
        :param _Checked: 用于CHECK的词
        :type Checked: list of str
        """
        self._Name = None
        self._Predicate = None
        self._NumberValue = None
        self._SearchTerm = None
        self._Checked = None

    @property
    def Name(self):
        """查询的名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Predicate(self):
        """查询的类型
        :rtype: str
        """
        return self._Predicate

    @Predicate.setter
    def Predicate(self, Predicate):
        self._Predicate = Predicate

    @property
    def NumberValue(self):
        """需要查询的数字类型的内容
        :rtype: float
        """
        return self._NumberValue

    @NumberValue.setter
    def NumberValue(self, NumberValue):
        self._NumberValue = NumberValue

    @property
    def SearchTerm(self):
        """用于SEARCH的词
        :rtype: str
        """
        return self._SearchTerm

    @SearchTerm.setter
    def SearchTerm(self, SearchTerm):
        self._SearchTerm = SearchTerm

    @property
    def Checked(self):
        """用于CHECK的词
        :rtype: list of str
        """
        return self._Checked

    @Checked.setter
    def Checked(self, Checked):
        self._Checked = Checked


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Predicate = params.get("Predicate")
        self._NumberValue = params.get("NumberValue")
        self._SearchTerm = params.get("SearchTerm")
        self._Checked = params.get("Checked")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NLUBadCase(AbstractModel):
    """NLU评测Badcase

    """

    def __init__(self):
        r"""
        :param _OriginData: 原始文本和标注槽位
        :type OriginData: str
        :param _ErrorType: 错误类型
        :type ErrorType: str
        :param _AnnotationSkillIntention: 标注技能和意图
        :type AnnotationSkillIntention: str
        :param _CurrentResult: 当前模型预测结果
        :type CurrentResult: str
        :param _PreviousResult: 优化前模型预测结果
        :type PreviousResult: str
        """
        self._OriginData = None
        self._ErrorType = None
        self._AnnotationSkillIntention = None
        self._CurrentResult = None
        self._PreviousResult = None

    @property
    def OriginData(self):
        """原始文本和标注槽位
        :rtype: str
        """
        return self._OriginData

    @OriginData.setter
    def OriginData(self, OriginData):
        self._OriginData = OriginData

    @property
    def ErrorType(self):
        """错误类型
        :rtype: str
        """
        return self._ErrorType

    @ErrorType.setter
    def ErrorType(self, ErrorType):
        self._ErrorType = ErrorType

    @property
    def AnnotationSkillIntention(self):
        """标注技能和意图
        :rtype: str
        """
        return self._AnnotationSkillIntention

    @AnnotationSkillIntention.setter
    def AnnotationSkillIntention(self, AnnotationSkillIntention):
        self._AnnotationSkillIntention = AnnotationSkillIntention

    @property
    def CurrentResult(self):
        """当前模型预测结果
        :rtype: str
        """
        return self._CurrentResult

    @CurrentResult.setter
    def CurrentResult(self, CurrentResult):
        self._CurrentResult = CurrentResult

    @property
    def PreviousResult(self):
        """优化前模型预测结果
        :rtype: str
        """
        return self._PreviousResult

    @PreviousResult.setter
    def PreviousResult(self, PreviousResult):
        self._PreviousResult = PreviousResult


    def _deserialize(self, params):
        self._OriginData = params.get("OriginData")
        self._ErrorType = params.get("ErrorType")
        self._AnnotationSkillIntention = params.get("AnnotationSkillIntention")
        self._CurrentResult = params.get("CurrentResult")
        self._PreviousResult = params.get("PreviousResult")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NetworkGroup(AbstractModel):
    """在线服务的一个网络调用组描述

    """

    def __init__(self):
        r"""
        :param _IngressName: 网络组对应的ingressname
注意：此字段可能返回 null，表示取不到有效值。
        :type IngressName: str
        :param _ClbVpcIp: 网络组的clbIp
注意：此字段可能返回 null，表示取不到有效值。
        :type ClbVpcIp: str
        :param _EndpointInfos: 网络组的终端节点信息
注意：此字段可能返回 null，表示取不到有效值。
        :type EndpointInfos: list of PrivateLinkEndpointInfo
        :param _Region: 网络组所在地域
注意：此字段可能返回 null，表示取不到有效值。
        :type Region: str
        :param _ServiceIds: 网络组下的服务id列表
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceIds: list of str
        """
        self._IngressName = None
        self._ClbVpcIp = None
        self._EndpointInfos = None
        self._Region = None
        self._ServiceIds = None

    @property
    def IngressName(self):
        """网络组对应的ingressname
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._IngressName

    @IngressName.setter
    def IngressName(self, IngressName):
        self._IngressName = IngressName

    @property
    def ClbVpcIp(self):
        """网络组的clbIp
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ClbVpcIp

    @ClbVpcIp.setter
    def ClbVpcIp(self, ClbVpcIp):
        self._ClbVpcIp = ClbVpcIp

    @property
    def EndpointInfos(self):
        """网络组的终端节点信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of PrivateLinkEndpointInfo
        """
        return self._EndpointInfos

    @EndpointInfos.setter
    def EndpointInfos(self, EndpointInfos):
        self._EndpointInfos = EndpointInfos

    @property
    def Region(self):
        """网络组所在地域
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def ServiceIds(self):
        """网络组下的服务id列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._ServiceIds

    @ServiceIds.setter
    def ServiceIds(self, ServiceIds):
        self._ServiceIds = ServiceIds


    def _deserialize(self, params):
        self._IngressName = params.get("IngressName")
        self._ClbVpcIp = params.get("ClbVpcIp")
        if params.get("EndpointInfos") is not None:
            self._EndpointInfos = []
            for item in params.get("EndpointInfos"):
                obj = PrivateLinkEndpointInfo()
                obj._deserialize(item)
                self._EndpointInfos.append(obj)
        self._Region = params.get("Region")
        self._ServiceIds = params.get("ServiceIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NotebookDetail(AbstractModel):
    """类型NotebookDetail

    """

    def __init__(self):
        r"""
        :param _Id: notebook  ID
        :type Id: str
        :param _Name: notebook 名称
        :type Name: str
        :param _LifecycleScriptId: 生命周期脚本
注意：此字段可能返回 null，表示取不到有效值。
        :type LifecycleScriptId: str
        :param _PodName: Pod-Name
注意：此字段可能返回 null，表示取不到有效值。
        :type PodName: str
        :param _UpdateTime: Update-Time
        :type UpdateTime: str
        :param _DirectInternetAccess: 是否访问公网
        :type DirectInternetAccess: bool
        :param _ResourceGroupId: 预付费专用资源组
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _Tags: 标签配置
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _AutoStopping: 是否自动停止
        :type AutoStopping: bool
        :param _AdditionalCodeRepoIds: 其他GIT存储库，最多3个，单个
长度不超过512字符
注意：此字段可能返回 null，表示取不到有效值。
        :type AdditionalCodeRepoIds: list of str
        :param _AutomaticStopTime: 自动停止时间，单位小时
注意：此字段可能返回 null，表示取不到有效值。
        :type AutomaticStopTime: int
        :param _ResourceConf: 资源配置
        :type ResourceConf: :class:`tencentcloud.tione.v20211111.models.ResourceConf`
        :param _DefaultCodeRepoId: 默认GIT存储库，长度不超过512字符
        :type DefaultCodeRepoId: str
        :param _EndTime: 训练输出
注意：此字段可能返回 null，表示取不到有效值。
        :type EndTime: str
        :param _LogEnable: 是否上报日志
        :type LogEnable: bool
        :param _LogConfig: 日志配置
注意：此字段可能返回 null，表示取不到有效值。
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _VpcId: VPC ID
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcId: str
        :param _SubnetId: 子网ID
注意：此字段可能返回 null，表示取不到有效值。
        :type SubnetId: str
        :param _Status: 任务状态
        :type Status: str
        :param _RuntimeInSeconds: 运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :type RuntimeInSeconds: int
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _StartTime: 训练开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :type StartTime: str
        :param _ChargeStatus: 计费状态，eg：BILLING计费中，ARREARS_STOP欠费停止，NOT_BILLING不在计费中
注意：此字段可能返回 null，表示取不到有效值。
        :type ChargeStatus: str
        :param _RootAccess: 是否ROOT权限
        :type RootAccess: bool
        :param _BillingInfos: 计贺金额信息，eg:2.00元/小时
注意：此字段可能返回 null，表示取不到有效值。
        :type BillingInfos: list of str
        :param _VolumeSizeInGB: 存储卷大小 （单位时GB，最小10GB，必须是10G的倍数）
注意：此字段可能返回 null，表示取不到有效值。
        :type VolumeSizeInGB: int
        :param _FailureReason: 失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :type FailureReason: str
        :param _ChargeType: 计算资源付费模式 (- PREPAID：预付费，即包年包月 - POSTPAID_BY_HOUR：按小时后付费)
        :type ChargeType: str
        :param _InstanceTypeAlias: 后付费资源规格说明
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceTypeAlias: str
        :param _ResourceGroupName: 预付费资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupName: str
        :param _VolumeSourceType: 存储的类型。取值包含： 
    FREE:        预付费的免费存储
    CLOUD_PREMIUM： 高性能云硬盘
    CLOUD_SSD： SSD云硬盘
    CFS:     CFS存储，包含NFS和turbo
注意：此字段可能返回 null，表示取不到有效值。
        :type VolumeSourceType: str
        :param _VolumeSourceCFS: CFS存储的配置
注意：此字段可能返回 null，表示取不到有效值。
        :type VolumeSourceCFS: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        :param _DataConfigs: 数据配置
注意：此字段可能返回 null，表示取不到有效值。
        :type DataConfigs: list of DataConfig
        :param _Message: notebook 信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Message: str
        :param _DataSource: 数据源来源，eg：WeData_HDFS
注意：此字段可能返回 null，表示取不到有效值。
        :type DataSource: str
        :param _ImageInfo: 镜像信息
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _ImageType: 镜像类型
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageType: str
        :param _SSHConfig: SSH配置
注意：此字段可能返回 null，表示取不到有效值。
        :type SSHConfig: :class:`tencentcloud.tione.v20211111.models.SSHConfig`
        :param _VolumeSourceGooseFS: GooseFS存储配置
注意：此字段可能返回 null，表示取不到有效值。
        :type VolumeSourceGooseFS: :class:`tencentcloud.tione.v20211111.models.GooseFS`
        :param _Warnings: 告警信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Warnings: list of Warning
        :param _ResourceGroupSWType: 资源组纳管类型
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupSWType: str
        :param _SubUin: 子用户ID
        :type SubUin: str
        :param _ResourceGroupInstanceId: 调度节点ID
        :type ResourceGroupInstanceId: str
        :param _SubUinName: 子用户名称
        :type SubUinName: str
        :param _JobCreateTime: 任务实例创建时间
        :type JobCreateTime: str
        :param _AppId: Appid
注意：此字段可能返回 null，表示取不到有效值。
        :type AppId: str
        :param _Envs: 自定义环境变量
注意：此字段可能返回 null，表示取不到有效值。
        :type Envs: list of EnvVar
        """
        self._Id = None
        self._Name = None
        self._LifecycleScriptId = None
        self._PodName = None
        self._UpdateTime = None
        self._DirectInternetAccess = None
        self._ResourceGroupId = None
        self._Tags = None
        self._AutoStopping = None
        self._AdditionalCodeRepoIds = None
        self._AutomaticStopTime = None
        self._ResourceConf = None
        self._DefaultCodeRepoId = None
        self._EndTime = None
        self._LogEnable = None
        self._LogConfig = None
        self._VpcId = None
        self._SubnetId = None
        self._Status = None
        self._RuntimeInSeconds = None
        self._CreateTime = None
        self._StartTime = None
        self._ChargeStatus = None
        self._RootAccess = None
        self._BillingInfos = None
        self._VolumeSizeInGB = None
        self._FailureReason = None
        self._ChargeType = None
        self._InstanceTypeAlias = None
        self._ResourceGroupName = None
        self._VolumeSourceType = None
        self._VolumeSourceCFS = None
        self._DataConfigs = None
        self._Message = None
        self._DataSource = None
        self._ImageInfo = None
        self._ImageType = None
        self._SSHConfig = None
        self._VolumeSourceGooseFS = None
        self._Warnings = None
        self._ResourceGroupSWType = None
        self._SubUin = None
        self._ResourceGroupInstanceId = None
        self._SubUinName = None
        self._JobCreateTime = None
        self._AppId = None
        self._Envs = None

    @property
    def Id(self):
        """notebook  ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """notebook 名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def LifecycleScriptId(self):
        """生命周期脚本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LifecycleScriptId

    @LifecycleScriptId.setter
    def LifecycleScriptId(self, LifecycleScriptId):
        self._LifecycleScriptId = LifecycleScriptId

    @property
    def PodName(self):
        """Pod-Name
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def UpdateTime(self):
        """Update-Time
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def DirectInternetAccess(self):
        """是否访问公网
        :rtype: bool
        """
        return self._DirectInternetAccess

    @DirectInternetAccess.setter
    def DirectInternetAccess(self, DirectInternetAccess):
        self._DirectInternetAccess = DirectInternetAccess

    @property
    def ResourceGroupId(self):
        """预付费专用资源组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def Tags(self):
        """标签配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def AutoStopping(self):
        """是否自动停止
        :rtype: bool
        """
        return self._AutoStopping

    @AutoStopping.setter
    def AutoStopping(self, AutoStopping):
        self._AutoStopping = AutoStopping

    @property
    def AdditionalCodeRepoIds(self):
        """其他GIT存储库，最多3个，单个
长度不超过512字符
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._AdditionalCodeRepoIds

    @AdditionalCodeRepoIds.setter
    def AdditionalCodeRepoIds(self, AdditionalCodeRepoIds):
        self._AdditionalCodeRepoIds = AdditionalCodeRepoIds

    @property
    def AutomaticStopTime(self):
        """自动停止时间，单位小时
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._AutomaticStopTime

    @AutomaticStopTime.setter
    def AutomaticStopTime(self, AutomaticStopTime):
        self._AutomaticStopTime = AutomaticStopTime

    @property
    def ResourceConf(self):
        """资源配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceConf`
        """
        return self._ResourceConf

    @ResourceConf.setter
    def ResourceConf(self, ResourceConf):
        self._ResourceConf = ResourceConf

    @property
    def DefaultCodeRepoId(self):
        """默认GIT存储库，长度不超过512字符
        :rtype: str
        """
        return self._DefaultCodeRepoId

    @DefaultCodeRepoId.setter
    def DefaultCodeRepoId(self, DefaultCodeRepoId):
        self._DefaultCodeRepoId = DefaultCodeRepoId

    @property
    def EndTime(self):
        """训练输出
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def LogEnable(self):
        """是否上报日志
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def LogConfig(self):
        """日志配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def VpcId(self):
        """VPC ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """子网ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def Status(self):
        """任务状态
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RuntimeInSeconds(self):
        """运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._RuntimeInSeconds

    @RuntimeInSeconds.setter
    def RuntimeInSeconds(self, RuntimeInSeconds):
        self._RuntimeInSeconds = RuntimeInSeconds

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def StartTime(self):
        """训练开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def ChargeStatus(self):
        """计费状态，eg：BILLING计费中，ARREARS_STOP欠费停止，NOT_BILLING不在计费中
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ChargeStatus

    @ChargeStatus.setter
    def ChargeStatus(self, ChargeStatus):
        self._ChargeStatus = ChargeStatus

    @property
    def RootAccess(self):
        """是否ROOT权限
        :rtype: bool
        """
        return self._RootAccess

    @RootAccess.setter
    def RootAccess(self, RootAccess):
        self._RootAccess = RootAccess

    @property
    def BillingInfos(self):
        """计贺金额信息，eg:2.00元/小时
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._BillingInfos

    @BillingInfos.setter
    def BillingInfos(self, BillingInfos):
        self._BillingInfos = BillingInfos

    @property
    def VolumeSizeInGB(self):
        """存储卷大小 （单位时GB，最小10GB，必须是10G的倍数）
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._VolumeSizeInGB

    @VolumeSizeInGB.setter
    def VolumeSizeInGB(self, VolumeSizeInGB):
        self._VolumeSizeInGB = VolumeSizeInGB

    @property
    def FailureReason(self):
        """失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FailureReason

    @FailureReason.setter
    def FailureReason(self, FailureReason):
        self._FailureReason = FailureReason

    @property
    def ChargeType(self):
        """计算资源付费模式 (- PREPAID：预付费，即包年包月 - POSTPAID_BY_HOUR：按小时后付费)
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def InstanceTypeAlias(self):
        """后付费资源规格说明
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceTypeAlias

    @InstanceTypeAlias.setter
    def InstanceTypeAlias(self, InstanceTypeAlias):
        self._InstanceTypeAlias = InstanceTypeAlias

    @property
    def ResourceGroupName(self):
        """预付费资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def VolumeSourceType(self):
        """存储的类型。取值包含： 
    FREE:        预付费的免费存储
    CLOUD_PREMIUM： 高性能云硬盘
    CLOUD_SSD： SSD云硬盘
    CFS:     CFS存储，包含NFS和turbo
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VolumeSourceType

    @VolumeSourceType.setter
    def VolumeSourceType(self, VolumeSourceType):
        self._VolumeSourceType = VolumeSourceType

    @property
    def VolumeSourceCFS(self):
        """CFS存储的配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        """
        return self._VolumeSourceCFS

    @VolumeSourceCFS.setter
    def VolumeSourceCFS(self, VolumeSourceCFS):
        self._VolumeSourceCFS = VolumeSourceCFS

    @property
    def DataConfigs(self):
        """数据配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataConfig
        """
        return self._DataConfigs

    @DataConfigs.setter
    def DataConfigs(self, DataConfigs):
        self._DataConfigs = DataConfigs

    @property
    def Message(self):
        """notebook 信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message

    @property
    def DataSource(self):
        """数据源来源，eg：WeData_HDFS
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DataSource

    @DataSource.setter
    def DataSource(self, DataSource):
        self._DataSource = DataSource

    @property
    def ImageInfo(self):
        """镜像信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def ImageType(self):
        """镜像类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ImageType

    @ImageType.setter
    def ImageType(self, ImageType):
        self._ImageType = ImageType

    @property
    def SSHConfig(self):
        """SSH配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.SSHConfig`
        """
        return self._SSHConfig

    @SSHConfig.setter
    def SSHConfig(self, SSHConfig):
        self._SSHConfig = SSHConfig

    @property
    def VolumeSourceGooseFS(self):
        """GooseFS存储配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.GooseFS`
        """
        return self._VolumeSourceGooseFS

    @VolumeSourceGooseFS.setter
    def VolumeSourceGooseFS(self, VolumeSourceGooseFS):
        self._VolumeSourceGooseFS = VolumeSourceGooseFS

    @property
    def Warnings(self):
        """告警信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Warning
        """
        return self._Warnings

    @Warnings.setter
    def Warnings(self, Warnings):
        self._Warnings = Warnings

    @property
    def ResourceGroupSWType(self):
        """资源组纳管类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType

    @property
    def SubUin(self):
        """子用户ID
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def ResourceGroupInstanceId(self):
        """调度节点ID
        :rtype: str
        """
        return self._ResourceGroupInstanceId

    @ResourceGroupInstanceId.setter
    def ResourceGroupInstanceId(self, ResourceGroupInstanceId):
        self._ResourceGroupInstanceId = ResourceGroupInstanceId

    @property
    def SubUinName(self):
        """子用户名称
        :rtype: str
        """
        return self._SubUinName

    @SubUinName.setter
    def SubUinName(self, SubUinName):
        self._SubUinName = SubUinName

    @property
    def JobCreateTime(self):
        """任务实例创建时间
        :rtype: str
        """
        return self._JobCreateTime

    @JobCreateTime.setter
    def JobCreateTime(self, JobCreateTime):
        self._JobCreateTime = JobCreateTime

    @property
    def AppId(self):
        """Appid
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId

    @property
    def Envs(self):
        """自定义环境变量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of EnvVar
        """
        return self._Envs

    @Envs.setter
    def Envs(self, Envs):
        self._Envs = Envs


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._LifecycleScriptId = params.get("LifecycleScriptId")
        self._PodName = params.get("PodName")
        self._UpdateTime = params.get("UpdateTime")
        self._DirectInternetAccess = params.get("DirectInternetAccess")
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._AutoStopping = params.get("AutoStopping")
        self._AdditionalCodeRepoIds = params.get("AdditionalCodeRepoIds")
        self._AutomaticStopTime = params.get("AutomaticStopTime")
        if params.get("ResourceConf") is not None:
            self._ResourceConf = ResourceConf()
            self._ResourceConf._deserialize(params.get("ResourceConf"))
        self._DefaultCodeRepoId = params.get("DefaultCodeRepoId")
        self._EndTime = params.get("EndTime")
        self._LogEnable = params.get("LogEnable")
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._Status = params.get("Status")
        self._RuntimeInSeconds = params.get("RuntimeInSeconds")
        self._CreateTime = params.get("CreateTime")
        self._StartTime = params.get("StartTime")
        self._ChargeStatus = params.get("ChargeStatus")
        self._RootAccess = params.get("RootAccess")
        self._BillingInfos = params.get("BillingInfos")
        self._VolumeSizeInGB = params.get("VolumeSizeInGB")
        self._FailureReason = params.get("FailureReason")
        self._ChargeType = params.get("ChargeType")
        self._InstanceTypeAlias = params.get("InstanceTypeAlias")
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._VolumeSourceType = params.get("VolumeSourceType")
        if params.get("VolumeSourceCFS") is not None:
            self._VolumeSourceCFS = CFSConfig()
            self._VolumeSourceCFS._deserialize(params.get("VolumeSourceCFS"))
        if params.get("DataConfigs") is not None:
            self._DataConfigs = []
            for item in params.get("DataConfigs"):
                obj = DataConfig()
                obj._deserialize(item)
                self._DataConfigs.append(obj)
        self._Message = params.get("Message")
        self._DataSource = params.get("DataSource")
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        self._ImageType = params.get("ImageType")
        if params.get("SSHConfig") is not None:
            self._SSHConfig = SSHConfig()
            self._SSHConfig._deserialize(params.get("SSHConfig"))
        if params.get("VolumeSourceGooseFS") is not None:
            self._VolumeSourceGooseFS = GooseFS()
            self._VolumeSourceGooseFS._deserialize(params.get("VolumeSourceGooseFS"))
        if params.get("Warnings") is not None:
            self._Warnings = []
            for item in params.get("Warnings"):
                obj = Warning()
                obj._deserialize(item)
                self._Warnings.append(obj)
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        self._SubUin = params.get("SubUin")
        self._ResourceGroupInstanceId = params.get("ResourceGroupInstanceId")
        self._SubUinName = params.get("SubUinName")
        self._JobCreateTime = params.get("JobCreateTime")
        self._AppId = params.get("AppId")
        if params.get("Envs") is not None:
            self._Envs = []
            for item in params.get("Envs"):
                obj = EnvVar()
                obj._deserialize(item)
                self._Envs.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)


class NotebookImageRecord(AbstractModel):
    """镜像保存记录

    """

    def __init__(self):
        r"""
        :param _RecordId: 保存记录ID
注意：此字段可能返回 null，表示取不到有效值。
        :type RecordId: str
        :param _ImageUrl: 镜像地址
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageUrl: str
        :param _Status: 状态。eg：creating导出中/success已完成/stopped已停止/fail异常
注意：此字段可能返回 null，表示取不到有效值。
        :type Status: str
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _Message: 状态信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Message: str
        :param _InstanceId: 实例ID
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceId: str
        :param _Kernels: kernel数组
注意：此字段可能返回 null，表示取不到有效值。
        :type Kernels: list of str
        """
        self._RecordId = None
        self._ImageUrl = None
        self._Status = None
        self._CreateTime = None
        self._Message = None
        self._InstanceId = None
        self._Kernels = None

    @property
    def RecordId(self):
        """保存记录ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RecordId

    @RecordId.setter
    def RecordId(self, RecordId):
        self._RecordId = RecordId

    @property
    def ImageUrl(self):
        """镜像地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ImageUrl

    @ImageUrl.setter
    def ImageUrl(self, ImageUrl):
        self._ImageUrl = ImageUrl

    @property
    def Status(self):
        """状态。eg：creating导出中/success已完成/stopped已停止/fail异常
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Message(self):
        """状态信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message

    @property
    def InstanceId(self):
        """实例ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceId

    @InstanceId.setter
    def InstanceId(self, InstanceId):
        self._InstanceId = InstanceId

    @property
    def Kernels(self):
        """kernel数组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._Kernels

    @Kernels.setter
    def Kernels(self, Kernels):
        self._Kernels = Kernels


    def _deserialize(self, params):
        self._RecordId = params.get("RecordId")
        self._ImageUrl = params.get("ImageUrl")
        self._Status = params.get("Status")
        self._CreateTime = params.get("CreateTime")
        self._Message = params.get("Message")
        self._InstanceId = params.get("InstanceId")
        self._Kernels = params.get("Kernels")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NotebookMetaInfo(AbstractModel):
    """Notebook元数据信息

    """

    def __init__(self):
        r"""
        :param _Id: notebook的id
        :type Id: str
        :param _Name: notebook名称
        :type Name: str
        """
        self._Id = None
        self._Name = None

    @property
    def Id(self):
        """notebook的id
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """notebook名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class NotebookSetItem(AbstractModel):
    """Notebook列表元素

    """

    def __init__(self):
        r"""
        :param _Id: notebook ID
        :type Id: str
        :param _Name: notebook 名称
        :type Name: str
        :param _ChargeType: 计费模式
        :type ChargeType: str
        :param _ResourceConf: 资源配置
        :type ResourceConf: :class:`tencentcloud.tione.v20211111.models.ResourceConf`
        :param _ResourceGroupId: 预付费资源组
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _VolumeSizeInGB: 存储卷大小
注意：此字段可能返回 null，表示取不到有效值。
        :type VolumeSizeInGB: int
        :param _BillingInfos: 计费金额信息，eg：2.00元/小时 (for后付费)
注意：此字段可能返回 null，表示取不到有效值。
        :type BillingInfos: list of str
        :param _Tags: 标签配置
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _StartTime: 启动时间
注意：此字段可能返回 null，表示取不到有效值。
        :type StartTime: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        :param _RuntimeInSeconds: 运行时间
注意：此字段可能返回 null，表示取不到有效值。
        :type RuntimeInSeconds: int
        :param _ChargeStatus: 计费状态
注意：此字段可能返回 null，表示取不到有效值。
        :type ChargeStatus: str
        :param _Status: 状态
        :type Status: str
        :param _FailureReason: 错误原因
注意：此字段可能返回 null，表示取不到有效值。
        :type FailureReason: str
        :param _EndTime: 结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :type EndTime: str
        :param _PodName: Pod名称
注意：此字段可能返回 null，表示取不到有效值。
        :type PodName: str
        :param _InstanceTypeAlias: 后付费资源规格名称
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceTypeAlias: str
        :param _ResourceGroupName: 预付费资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupName: str
        :param _AutoStopping: 是否自动终止
        :type AutoStopping: bool
        :param _AutomaticStopTime: 自动停止时间
注意：此字段可能返回 null，表示取不到有效值。
        :type AutomaticStopTime: int
        :param _VolumeSourceType: 存储的类型。取值包含： 
    FREE:        预付费的免费存储
    CLOUD_PREMIUM： 高性能云硬盘
    CLOUD_SSD： SSD云硬盘
    CFS:     CFS存储，包含NFS和turbo
注意：此字段可能返回 null，表示取不到有效值。
        :type VolumeSourceType: str
        :param _VolumeSourceCFS: CFS存储的配置
注意：此字段可能返回 null，表示取不到有效值。
        :type VolumeSourceCFS: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        :param _Message: notebook 信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Message: str
        :param _UserTypes: notebook用户类型
注意：此字段可能返回 null，表示取不到有效值。
        :type UserTypes: list of str
        :param _SSHConfig: SSH配置
注意：此字段可能返回 null，表示取不到有效值。
        :type SSHConfig: :class:`tencentcloud.tione.v20211111.models.SSHConfig`
        :param _VolumeSourceGooseFS: GooseFS存储配置
注意：此字段可能返回 null，表示取不到有效值。
        :type VolumeSourceGooseFS: :class:`tencentcloud.tione.v20211111.models.GooseFS`
        :param _DataPipelineTaskId: 数据构建任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type DataPipelineTaskId: str
        :param _Warnings: 告警信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Warnings: list of Warning
        :param _SubUin: 子用户ID
注意：此字段可能返回 null，表示取不到有效值。
        :type SubUin: str
        :param _ResourceGroupSWType: 资源组纳管类型
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupSWType: str
        :param _SubUinName: 子用户名称
        :type SubUinName: str
        :param _AppId: AppId
注意：此字段可能返回 null，表示取不到有效值。
        :type AppId: str
        :param _DirectInternetAccess: 公网访问
        :type DirectInternetAccess: bool
        :param _LogEnable: CLS日志
        :type LogEnable: bool
        :param _RootAccess: ROOT权限
        :type RootAccess: bool
        """
        self._Id = None
        self._Name = None
        self._ChargeType = None
        self._ResourceConf = None
        self._ResourceGroupId = None
        self._VolumeSizeInGB = None
        self._BillingInfos = None
        self._Tags = None
        self._CreateTime = None
        self._StartTime = None
        self._UpdateTime = None
        self._RuntimeInSeconds = None
        self._ChargeStatus = None
        self._Status = None
        self._FailureReason = None
        self._EndTime = None
        self._PodName = None
        self._InstanceTypeAlias = None
        self._ResourceGroupName = None
        self._AutoStopping = None
        self._AutomaticStopTime = None
        self._VolumeSourceType = None
        self._VolumeSourceCFS = None
        self._Message = None
        self._UserTypes = None
        self._SSHConfig = None
        self._VolumeSourceGooseFS = None
        self._DataPipelineTaskId = None
        self._Warnings = None
        self._SubUin = None
        self._ResourceGroupSWType = None
        self._SubUinName = None
        self._AppId = None
        self._DirectInternetAccess = None
        self._LogEnable = None
        self._RootAccess = None

    @property
    def Id(self):
        """notebook ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """notebook 名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ChargeType(self):
        """计费模式
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceConf(self):
        """资源配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceConf`
        """
        return self._ResourceConf

    @ResourceConf.setter
    def ResourceConf(self, ResourceConf):
        self._ResourceConf = ResourceConf

    @property
    def ResourceGroupId(self):
        """预付费资源组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def VolumeSizeInGB(self):
        """存储卷大小
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._VolumeSizeInGB

    @VolumeSizeInGB.setter
    def VolumeSizeInGB(self, VolumeSizeInGB):
        self._VolumeSizeInGB = VolumeSizeInGB

    @property
    def BillingInfos(self):
        """计费金额信息，eg：2.00元/小时 (for后付费)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._BillingInfos

    @BillingInfos.setter
    def BillingInfos(self, BillingInfos):
        self._BillingInfos = BillingInfos

    @property
    def Tags(self):
        """标签配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def StartTime(self):
        """启动时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def RuntimeInSeconds(self):
        """运行时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._RuntimeInSeconds

    @RuntimeInSeconds.setter
    def RuntimeInSeconds(self, RuntimeInSeconds):
        self._RuntimeInSeconds = RuntimeInSeconds

    @property
    def ChargeStatus(self):
        """计费状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ChargeStatus

    @ChargeStatus.setter
    def ChargeStatus(self, ChargeStatus):
        self._ChargeStatus = ChargeStatus

    @property
    def Status(self):
        """状态
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def FailureReason(self):
        """错误原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FailureReason

    @FailureReason.setter
    def FailureReason(self, FailureReason):
        self._FailureReason = FailureReason

    @property
    def EndTime(self):
        """结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def PodName(self):
        """Pod名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def InstanceTypeAlias(self):
        """后付费资源规格名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceTypeAlias

    @InstanceTypeAlias.setter
    def InstanceTypeAlias(self, InstanceTypeAlias):
        self._InstanceTypeAlias = InstanceTypeAlias

    @property
    def ResourceGroupName(self):
        """预付费资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def AutoStopping(self):
        """是否自动终止
        :rtype: bool
        """
        return self._AutoStopping

    @AutoStopping.setter
    def AutoStopping(self, AutoStopping):
        self._AutoStopping = AutoStopping

    @property
    def AutomaticStopTime(self):
        """自动停止时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._AutomaticStopTime

    @AutomaticStopTime.setter
    def AutomaticStopTime(self, AutomaticStopTime):
        self._AutomaticStopTime = AutomaticStopTime

    @property
    def VolumeSourceType(self):
        """存储的类型。取值包含： 
    FREE:        预付费的免费存储
    CLOUD_PREMIUM： 高性能云硬盘
    CLOUD_SSD： SSD云硬盘
    CFS:     CFS存储，包含NFS和turbo
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VolumeSourceType

    @VolumeSourceType.setter
    def VolumeSourceType(self, VolumeSourceType):
        self._VolumeSourceType = VolumeSourceType

    @property
    def VolumeSourceCFS(self):
        """CFS存储的配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        """
        return self._VolumeSourceCFS

    @VolumeSourceCFS.setter
    def VolumeSourceCFS(self, VolumeSourceCFS):
        self._VolumeSourceCFS = VolumeSourceCFS

    @property
    def Message(self):
        """notebook 信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message

    @property
    def UserTypes(self):
        """notebook用户类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._UserTypes

    @UserTypes.setter
    def UserTypes(self, UserTypes):
        self._UserTypes = UserTypes

    @property
    def SSHConfig(self):
        """SSH配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.SSHConfig`
        """
        return self._SSHConfig

    @SSHConfig.setter
    def SSHConfig(self, SSHConfig):
        self._SSHConfig = SSHConfig

    @property
    def VolumeSourceGooseFS(self):
        """GooseFS存储配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.GooseFS`
        """
        return self._VolumeSourceGooseFS

    @VolumeSourceGooseFS.setter
    def VolumeSourceGooseFS(self, VolumeSourceGooseFS):
        self._VolumeSourceGooseFS = VolumeSourceGooseFS

    @property
    def DataPipelineTaskId(self):
        """数据构建任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DataPipelineTaskId

    @DataPipelineTaskId.setter
    def DataPipelineTaskId(self, DataPipelineTaskId):
        self._DataPipelineTaskId = DataPipelineTaskId

    @property
    def Warnings(self):
        """告警信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Warning
        """
        return self._Warnings

    @Warnings.setter
    def Warnings(self, Warnings):
        self._Warnings = Warnings

    @property
    def SubUin(self):
        """子用户ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def ResourceGroupSWType(self):
        """资源组纳管类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType

    @property
    def SubUinName(self):
        """子用户名称
        :rtype: str
        """
        return self._SubUinName

    @SubUinName.setter
    def SubUinName(self, SubUinName):
        self._SubUinName = SubUinName

    @property
    def AppId(self):
        """AppId
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId

    @property
    def DirectInternetAccess(self):
        """公网访问
        :rtype: bool
        """
        return self._DirectInternetAccess

    @DirectInternetAccess.setter
    def DirectInternetAccess(self, DirectInternetAccess):
        self._DirectInternetAccess = DirectInternetAccess

    @property
    def LogEnable(self):
        """CLS日志
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def RootAccess(self):
        """ROOT权限
        :rtype: bool
        """
        return self._RootAccess

    @RootAccess.setter
    def RootAccess(self, RootAccess):
        self._RootAccess = RootAccess


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._ChargeType = params.get("ChargeType")
        if params.get("ResourceConf") is not None:
            self._ResourceConf = ResourceConf()
            self._ResourceConf._deserialize(params.get("ResourceConf"))
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._VolumeSizeInGB = params.get("VolumeSizeInGB")
        self._BillingInfos = params.get("BillingInfos")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._CreateTime = params.get("CreateTime")
        self._StartTime = params.get("StartTime")
        self._UpdateTime = params.get("UpdateTime")
        self._RuntimeInSeconds = params.get("RuntimeInSeconds")
        self._ChargeStatus = params.get("ChargeStatus")
        self._Status = params.get("Status")
        self._FailureReason = params.get("FailureReason")
        self._EndTime = params.get("EndTime")
        self._PodName = params.get("PodName")
        self._InstanceTypeAlias = params.get("InstanceTypeAlias")
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._AutoStopping = params.get("AutoStopping")
        self._AutomaticStopTime = params.get("AutomaticStopTime")
        self._VolumeSourceType = params.get("VolumeSourceType")
        if params.get("VolumeSourceCFS") is not None:
            self._VolumeSourceCFS = CFSConfig()
            self._VolumeSourceCFS._deserialize(params.get("VolumeSourceCFS"))
        self._Message = params.get("Message")
        self._UserTypes = params.get("UserTypes")
        if params.get("SSHConfig") is not None:
            self._SSHConfig = SSHConfig()
            self._SSHConfig._deserialize(params.get("SSHConfig"))
        if params.get("VolumeSourceGooseFS") is not None:
            self._VolumeSourceGooseFS = GooseFS()
            self._VolumeSourceGooseFS._deserialize(params.get("VolumeSourceGooseFS"))
        self._DataPipelineTaskId = params.get("DataPipelineTaskId")
        if params.get("Warnings") is not None:
            self._Warnings = []
            for item in params.get("Warnings"):
                obj = Warning()
                obj._deserialize(item)
                self._Warnings.append(obj)
        self._SubUin = params.get("SubUin")
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        self._SubUinName = params.get("SubUinName")
        self._AppId = params.get("AppId")
        self._DirectInternetAccess = params.get("DirectInternetAccess")
        self._LogEnable = params.get("LogEnable")
        self._RootAccess = params.get("RootAccess")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ObjectiveEvalTaskInfo(AbstractModel):
    """Checkpoint 客观评测任务信息

    """

    def __init__(self):
        r"""
        :param _CheckpointId: Checkpoint 的唯一 ID，与 CheckpointInfo.CheckpointId 对应
注意：此字段可能返回 null，表示取不到有效值。
        :type CheckpointId: str
        :param _EvalTaskId: 客观评测任务 ID
注意：此字段可能返回 null，表示取不到有效值。
        :type EvalTaskId: str
        :param _EvalTaskStatus: 客观评测任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :type EvalTaskStatus: str
        :param _EvalTaskName: 客观评测任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type EvalTaskName: str
        """
        self._CheckpointId = None
        self._EvalTaskId = None
        self._EvalTaskStatus = None
        self._EvalTaskName = None

    @property
    def CheckpointId(self):
        """Checkpoint 的唯一 ID，与 CheckpointInfo.CheckpointId 对应
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CheckpointId

    @CheckpointId.setter
    def CheckpointId(self, CheckpointId):
        self._CheckpointId = CheckpointId

    @property
    def EvalTaskId(self):
        """客观评测任务 ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvalTaskId

    @EvalTaskId.setter
    def EvalTaskId(self, EvalTaskId):
        self._EvalTaskId = EvalTaskId

    @property
    def EvalTaskStatus(self):
        """客观评测任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvalTaskStatus

    @EvalTaskStatus.setter
    def EvalTaskStatus(self, EvalTaskStatus):
        self._EvalTaskStatus = EvalTaskStatus

    @property
    def EvalTaskName(self):
        """客观评测任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvalTaskName

    @EvalTaskName.setter
    def EvalTaskName(self, EvalTaskName):
        self._EvalTaskName = EvalTaskName


    def _deserialize(self, params):
        self._CheckpointId = params.get("CheckpointId")
        self._EvalTaskId = params.get("EvalTaskId")
        self._EvalTaskStatus = params.get("EvalTaskStatus")
        self._EvalTaskName = params.get("EvalTaskName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ObjectiveEvaluation(AbstractModel):
    """Evaluation

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _Name: 评测名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _Progress: 进度
注意：此字段可能返回 null，表示取不到有效值。
        :type Progress: float
        :param _Description: 描述
注意：此字段可能返回 null，表示取不到有效值。
        :type Description: str
        :param _Status: 状态
注意：此字段可能返回 null，表示取不到有效值。
        :type Status: str
        :param _InferringModelIndex: 推理模型索引
注意：此字段可能返回 null，表示取不到有效值。
        :type InferringModelIndex: int
        :param _ModelNum: 总共需推理模型数量
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelNum: int
        :param _FailureReason:  失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :type FailureReason: str
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _ChargeType: 计费与资源
注意：此字段可能返回 null，表示取不到有效值。
        :type ChargeType: str
        :param _ResourceGroupId: 计费与资源 
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _Resources: 计费与资源 
注意：此字段可能返回 null，表示取不到有效值。
        :type Resources: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        :param _InstanceType: 资源类型
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceType: str
        :param _ResourceGroupName: 资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupName: str
        :param _FailureCode: 错误码
注意：此字段可能返回 null，表示取不到有效值。
        :type FailureCode: str
        :param _BillingInfo: 计费信息
注意：此字段可能返回 null，表示取不到有效值。
        :type BillingInfo: str
        :param _BusinessStatus: 计费状态
注意：此字段可能返回 null，表示取不到有效值。
        :type BusinessStatus: str
        :param _Models: 评测的模型列表
注意：此字段可能返回 null，表示取不到有效值。
        :type Models: list of EvalModel
        :param _Datasets: 评测集
注意：此字段可能返回 null，表示取不到有效值。
        :type Datasets: list of SimpleCFSConfig
        :param _EvaluationSuites: 评测的开源数据集
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationSuites: list of str
        :param _Tags: 标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _ResourceGroupSWType: 资源组类型
        :type ResourceGroupSWType: str
        :param _DurationInSeconds: 已运行时长（秒）
        :type DurationInSeconds: int
        :param _RemainingDurationInSeconds: 估算剩余时长
如果EndTime存在且不为空，则 DurationInSeconds := time.Now() - StartTime
否则为估算剩余时长
        :type RemainingDurationInSeconds: int
        :param _DeployType: 部署类型
        :type DeployType: str
        :param _InstancePerReplicas: 单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :type InstancePerReplicas: int
        :param _Uin: Uin
        :type Uin: str
        :param _SubUin: SubUin
        :type SubUin: str
        :param _SubUinName: SubUinName
        :type SubUinName: str
        :param _Region: Region
        :type Region: str
        :param _Events: 评测进度详情
        :type Events: list of ObjevalEvent
        :param _InstanceTypeAlias: 后付费资源信息
        :type InstanceTypeAlias: str
        """
        self._TaskId = None
        self._Name = None
        self._Progress = None
        self._Description = None
        self._Status = None
        self._InferringModelIndex = None
        self._ModelNum = None
        self._FailureReason = None
        self._CreateTime = None
        self._ChargeType = None
        self._ResourceGroupId = None
        self._Resources = None
        self._InstanceType = None
        self._ResourceGroupName = None
        self._FailureCode = None
        self._BillingInfo = None
        self._BusinessStatus = None
        self._Models = None
        self._Datasets = None
        self._EvaluationSuites = None
        self._Tags = None
        self._ResourceGroupSWType = None
        self._DurationInSeconds = None
        self._RemainingDurationInSeconds = None
        self._DeployType = None
        self._InstancePerReplicas = None
        self._Uin = None
        self._SubUin = None
        self._SubUinName = None
        self._Region = None
        self._Events = None
        self._InstanceTypeAlias = None

    @property
    def TaskId(self):
        """任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Name(self):
        """评测名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Progress(self):
        """进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def Description(self):
        """描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Status(self):
        """状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def InferringModelIndex(self):
        """推理模型索引
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._InferringModelIndex

    @InferringModelIndex.setter
    def InferringModelIndex(self, InferringModelIndex):
        self._InferringModelIndex = InferringModelIndex

    @property
    def ModelNum(self):
        """总共需推理模型数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ModelNum

    @ModelNum.setter
    def ModelNum(self, ModelNum):
        self._ModelNum = ModelNum

    @property
    def FailureReason(self):
        """ 失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FailureReason

    @FailureReason.setter
    def FailureReason(self, FailureReason):
        self._FailureReason = FailureReason

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ChargeType(self):
        """计费与资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceGroupId(self):
        """计费与资源 
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def Resources(self):
        """计费与资源 
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        """
        return self._Resources

    @Resources.setter
    def Resources(self, Resources):
        self._Resources = Resources

    @property
    def InstanceType(self):
        """资源类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def ResourceGroupName(self):
        """资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def FailureCode(self):
        """错误码
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FailureCode

    @FailureCode.setter
    def FailureCode(self, FailureCode):
        self._FailureCode = FailureCode

    @property
    def BillingInfo(self):
        """计费信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._BillingInfo

    @BillingInfo.setter
    def BillingInfo(self, BillingInfo):
        self._BillingInfo = BillingInfo

    @property
    def BusinessStatus(self):
        """计费状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._BusinessStatus

    @BusinessStatus.setter
    def BusinessStatus(self, BusinessStatus):
        self._BusinessStatus = BusinessStatus

    @property
    def Models(self):
        """评测的模型列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of EvalModel
        """
        return self._Models

    @Models.setter
    def Models(self, Models):
        self._Models = Models

    @property
    def Datasets(self):
        """评测集
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of SimpleCFSConfig
        """
        return self._Datasets

    @Datasets.setter
    def Datasets(self, Datasets):
        self._Datasets = Datasets

    @property
    def EvaluationSuites(self):
        """评测的开源数据集
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._EvaluationSuites

    @EvaluationSuites.setter
    def EvaluationSuites(self, EvaluationSuites):
        self._EvaluationSuites = EvaluationSuites

    @property
    def Tags(self):
        """标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def ResourceGroupSWType(self):
        """资源组类型
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType

    @property
    def DurationInSeconds(self):
        """已运行时长（秒）
        :rtype: int
        """
        return self._DurationInSeconds

    @DurationInSeconds.setter
    def DurationInSeconds(self, DurationInSeconds):
        self._DurationInSeconds = DurationInSeconds

    @property
    def RemainingDurationInSeconds(self):
        """估算剩余时长
如果EndTime存在且不为空，则 DurationInSeconds := time.Now() - StartTime
否则为估算剩余时长
        :rtype: int
        """
        return self._RemainingDurationInSeconds

    @RemainingDurationInSeconds.setter
    def RemainingDurationInSeconds(self, RemainingDurationInSeconds):
        self._RemainingDurationInSeconds = RemainingDurationInSeconds

    @property
    def DeployType(self):
        """部署类型
        :rtype: str
        """
        return self._DeployType

    @DeployType.setter
    def DeployType(self, DeployType):
        self._DeployType = DeployType

    @property
    def InstancePerReplicas(self):
        """单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :rtype: int
        """
        return self._InstancePerReplicas

    @InstancePerReplicas.setter
    def InstancePerReplicas(self, InstancePerReplicas):
        self._InstancePerReplicas = InstancePerReplicas

    @property
    def Uin(self):
        """Uin
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def SubUin(self):
        """SubUin
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def SubUinName(self):
        """SubUinName
        :rtype: str
        """
        return self._SubUinName

    @SubUinName.setter
    def SubUinName(self, SubUinName):
        self._SubUinName = SubUinName

    @property
    def Region(self):
        """Region
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def Events(self):
        """评测进度详情
        :rtype: list of ObjevalEvent
        """
        return self._Events

    @Events.setter
    def Events(self, Events):
        self._Events = Events

    @property
    def InstanceTypeAlias(self):
        """后付费资源信息
        :rtype: str
        """
        return self._InstanceTypeAlias

    @InstanceTypeAlias.setter
    def InstanceTypeAlias(self, InstanceTypeAlias):
        self._InstanceTypeAlias = InstanceTypeAlias


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Name = params.get("Name")
        self._Progress = params.get("Progress")
        self._Description = params.get("Description")
        self._Status = params.get("Status")
        self._InferringModelIndex = params.get("InferringModelIndex")
        self._ModelNum = params.get("ModelNum")
        self._FailureReason = params.get("FailureReason")
        self._CreateTime = params.get("CreateTime")
        self._ChargeType = params.get("ChargeType")
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("Resources") is not None:
            self._Resources = ResourceInfo()
            self._Resources._deserialize(params.get("Resources"))
        self._InstanceType = params.get("InstanceType")
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._FailureCode = params.get("FailureCode")
        self._BillingInfo = params.get("BillingInfo")
        self._BusinessStatus = params.get("BusinessStatus")
        if params.get("Models") is not None:
            self._Models = []
            for item in params.get("Models"):
                obj = EvalModel()
                obj._deserialize(item)
                self._Models.append(obj)
        if params.get("Datasets") is not None:
            self._Datasets = []
            for item in params.get("Datasets"):
                obj = SimpleCFSConfig()
                obj._deserialize(item)
                self._Datasets.append(obj)
        self._EvaluationSuites = params.get("EvaluationSuites")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        self._DurationInSeconds = params.get("DurationInSeconds")
        self._RemainingDurationInSeconds = params.get("RemainingDurationInSeconds")
        self._DeployType = params.get("DeployType")
        self._InstancePerReplicas = params.get("InstancePerReplicas")
        self._Uin = params.get("Uin")
        self._SubUin = params.get("SubUin")
        self._SubUinName = params.get("SubUinName")
        self._Region = params.get("Region")
        if params.get("Events") is not None:
            self._Events = []
            for item in params.get("Events"):
                obj = ObjevalEvent()
                obj._deserialize(item)
                self._Events.append(obj)
        self._InstanceTypeAlias = params.get("InstanceTypeAlias")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ObjectiveMetric(AbstractModel):
    """ObjectiveMetric

    """

    def __init__(self):
        r"""
        :param _DatasetFilepath: 数据集文件路径
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetFilepath: str
        :param _Name: 指标名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _Value: 指标值
注意：此字段可能返回 null，表示取不到有效值。
        :type Value: float
        :param _EvaluationSuite: 客观评测集
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationSuite: str
        :param _Unit: 指标单位
注意：此字段可能返回 null，表示取不到有效值。
        :type Unit: str
        """
        self._DatasetFilepath = None
        self._Name = None
        self._Value = None
        self._EvaluationSuite = None
        self._Unit = None

    @property
    def DatasetFilepath(self):
        """数据集文件路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetFilepath

    @DatasetFilepath.setter
    def DatasetFilepath(self, DatasetFilepath):
        self._DatasetFilepath = DatasetFilepath

    @property
    def Name(self):
        """指标名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Value(self):
        """指标值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value

    @property
    def EvaluationSuite(self):
        """客观评测集
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationSuite

    @EvaluationSuite.setter
    def EvaluationSuite(self, EvaluationSuite):
        self._EvaluationSuite = EvaluationSuite

    @property
    def Unit(self):
        """指标单位
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Unit

    @Unit.setter
    def Unit(self, Unit):
        self._Unit = Unit


    def _deserialize(self, params):
        self._DatasetFilepath = params.get("DatasetFilepath")
        self._Name = params.get("Name")
        self._Value = params.get("Value")
        self._EvaluationSuite = params.get("EvaluationSuite")
        self._Unit = params.get("Unit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ObjevalCompMetric(AbstractModel):
    """客观评测对比表格数据点

    """

    def __init__(self):
        r"""
        :param _TaskId: 当前数据是哪个任务评出来的（ID）
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _TaskName: 当前数据是哪个任务评出来的（任务名）
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskName: str
        :param _Model: 当前数据是任务的哪个模型评出来的：行名
注意：此字段可能返回 null，表示取不到有效值。
        :type Model: :class:`tencentcloud.tione.v20211111.models.EvalModel`
        :param _EvaluationSuite: 当前数据是任务的哪个开源数据集评出来的：列名
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationSuite: str
        :param _Value: 当前数据的值
注意：此字段可能返回 null，表示取不到有效值。
        :type Value: float
        """
        self._TaskId = None
        self._TaskName = None
        self._Model = None
        self._EvaluationSuite = None
        self._Value = None

    @property
    def TaskId(self):
        """当前数据是哪个任务评出来的（ID）
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """当前数据是哪个任务评出来的（任务名）
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def Model(self):
        """当前数据是任务的哪个模型评出来的：行名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.EvalModel`
        """
        return self._Model

    @Model.setter
    def Model(self, Model):
        self._Model = Model

    @property
    def EvaluationSuite(self):
        """当前数据是任务的哪个开源数据集评出来的：列名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationSuite

    @EvaluationSuite.setter
    def EvaluationSuite(self, EvaluationSuite):
        self._EvaluationSuite = EvaluationSuite

    @property
    def Value(self):
        """当前数据的值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        if params.get("Model") is not None:
            self._Model = EvalModel()
            self._Model._deserialize(params.get("Model"))
        self._EvaluationSuite = params.get("EvaluationSuite")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ObjevalCompResult(AbstractModel):
    """客观评测对比数据

    """

    def __init__(self):
        r"""
        :param _MetricName: 当前是哪个指标对应的数据
注意：此字段可能返回 null，表示取不到有效值。
        :type MetricName: str
        :param _ObjevalCompMetrics: 客观评测对比表格数据点
注意：此字段可能返回 null，表示取不到有效值。
        :type ObjevalCompMetrics: list of ObjevalCompMetric
        """
        self._MetricName = None
        self._ObjevalCompMetrics = None

    @property
    def MetricName(self):
        """当前是哪个指标对应的数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._MetricName

    @MetricName.setter
    def MetricName(self, MetricName):
        self._MetricName = MetricName

    @property
    def ObjevalCompMetrics(self):
        """客观评测对比表格数据点
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ObjevalCompMetric
        """
        return self._ObjevalCompMetrics

    @ObjevalCompMetrics.setter
    def ObjevalCompMetrics(self, ObjevalCompMetrics):
        self._ObjevalCompMetrics = ObjevalCompMetrics


    def _deserialize(self, params):
        self._MetricName = params.get("MetricName")
        if params.get("ObjevalCompMetrics") is not None:
            self._ObjevalCompMetrics = []
            for item in params.get("ObjevalCompMetrics"):
                obj = ObjevalCompMetric()
                obj._deserialize(item)
                self._ObjevalCompMetrics.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ObjevalEvent(AbstractModel):
    """评测详细进度

    """

    def __init__(self):
        r"""
        :param _Subject: // Subject 事件主题：
// `MODEL_DEPLOYMENT`: 模型部署 -> 列表页
// `MODEL`: 评测当前模型 -> 结果页
// `MODEL_DATASET`: 评测当前数据集 -> 列表页 + 结果页
        :type Subject: str
        :param _Status:  状态
        :type Status: str
        :param _ModelIndex: 关于哪个模型（从 1 开始）
        :type ModelIndex: int
        :param _DatasetIndex: 关于哪个评测集（从 1 开始）
        :type DatasetIndex: int
        :param _TotalCount: 进度的总量
        :type TotalCount: int
        :param _FinishedCount: 进度的已完成量
        :type FinishedCount: int
        :param _StartTime: 事件开始时间
        :type StartTime: str
        :param _EndTime: 事件结束时间
        :type EndTime: str
        :param _DurationInSeconds: 已持续时长（秒）
        :type DurationInSeconds: int
        :param _RemainingDurationInSeconds: 预估剩余时长（秒）
        :type RemainingDurationInSeconds: int
        :param _Attachments: 评测时间附属信息
        :type Attachments: list of EvaluationEventAttachment
        """
        self._Subject = None
        self._Status = None
        self._ModelIndex = None
        self._DatasetIndex = None
        self._TotalCount = None
        self._FinishedCount = None
        self._StartTime = None
        self._EndTime = None
        self._DurationInSeconds = None
        self._RemainingDurationInSeconds = None
        self._Attachments = None

    @property
    def Subject(self):
        """// Subject 事件主题：
// `MODEL_DEPLOYMENT`: 模型部署 -> 列表页
// `MODEL`: 评测当前模型 -> 结果页
// `MODEL_DATASET`: 评测当前数据集 -> 列表页 + 结果页
        :rtype: str
        """
        return self._Subject

    @Subject.setter
    def Subject(self, Subject):
        self._Subject = Subject

    @property
    def Status(self):
        """ 状态
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def ModelIndex(self):
        """关于哪个模型（从 1 开始）
        :rtype: int
        """
        return self._ModelIndex

    @ModelIndex.setter
    def ModelIndex(self, ModelIndex):
        self._ModelIndex = ModelIndex

    @property
    def DatasetIndex(self):
        """关于哪个评测集（从 1 开始）
        :rtype: int
        """
        return self._DatasetIndex

    @DatasetIndex.setter
    def DatasetIndex(self, DatasetIndex):
        self._DatasetIndex = DatasetIndex

    @property
    def TotalCount(self):
        """进度的总量
        :rtype: int
        """
        return self._TotalCount

    @TotalCount.setter
    def TotalCount(self, TotalCount):
        self._TotalCount = TotalCount

    @property
    def FinishedCount(self):
        """进度的已完成量
        :rtype: int
        """
        return self._FinishedCount

    @FinishedCount.setter
    def FinishedCount(self, FinishedCount):
        self._FinishedCount = FinishedCount

    @property
    def StartTime(self):
        """事件开始时间
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """事件结束时间
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def DurationInSeconds(self):
        """已持续时长（秒）
        :rtype: int
        """
        return self._DurationInSeconds

    @DurationInSeconds.setter
    def DurationInSeconds(self, DurationInSeconds):
        self._DurationInSeconds = DurationInSeconds

    @property
    def RemainingDurationInSeconds(self):
        """预估剩余时长（秒）
        :rtype: int
        """
        return self._RemainingDurationInSeconds

    @RemainingDurationInSeconds.setter
    def RemainingDurationInSeconds(self, RemainingDurationInSeconds):
        self._RemainingDurationInSeconds = RemainingDurationInSeconds

    @property
    def Attachments(self):
        """评测时间附属信息
        :rtype: list of EvaluationEventAttachment
        """
        return self._Attachments

    @Attachments.setter
    def Attachments(self, Attachments):
        self._Attachments = Attachments


    def _deserialize(self, params):
        self._Subject = params.get("Subject")
        self._Status = params.get("Status")
        self._ModelIndex = params.get("ModelIndex")
        self._DatasetIndex = params.get("DatasetIndex")
        self._TotalCount = params.get("TotalCount")
        self._FinishedCount = params.get("FinishedCount")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._DurationInSeconds = params.get("DurationInSeconds")
        self._RemainingDurationInSeconds = params.get("RemainingDurationInSeconds")
        if params.get("Attachments") is not None:
            self._Attachments = []
            for item in params.get("Attachments"):
                obj = EvaluationEventAttachment()
                obj._deserialize(item)
                self._Attachments.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OcrBlock(AbstractModel):
    """自动学习ocr评测结果块内容

    """

    def __init__(self):
        r"""
        :param _Bgs: 背景字段
注意：此字段可能返回 null，表示取不到有效值。
        :type Bgs: list of OcrBlockItem
        :param _Keys: 识别key字段结果
注意：此字段可能返回 null，表示取不到有效值。
        :type Keys: list of OcrBlockItem
        :param _Values: 识别key对应的value结果
注意：此字段可能返回 null，表示取不到有效值。
        :type Values: list of OcrBlockItem
        :param _IsCorrect: 识别块内容结果是否正确
注意：此字段可能返回 null，表示取不到有效值。
        :type IsCorrect: bool
        """
        self._Bgs = None
        self._Keys = None
        self._Values = None
        self._IsCorrect = None

    @property
    def Bgs(self):
        """背景字段
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of OcrBlockItem
        """
        return self._Bgs

    @Bgs.setter
    def Bgs(self, Bgs):
        self._Bgs = Bgs

    @property
    def Keys(self):
        """识别key字段结果
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of OcrBlockItem
        """
        return self._Keys

    @Keys.setter
    def Keys(self, Keys):
        self._Keys = Keys

    @property
    def Values(self):
        """识别key对应的value结果
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of OcrBlockItem
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values

    @property
    def IsCorrect(self):
        """识别块内容结果是否正确
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsCorrect

    @IsCorrect.setter
    def IsCorrect(self, IsCorrect):
        self._IsCorrect = IsCorrect


    def _deserialize(self, params):
        if params.get("Bgs") is not None:
            self._Bgs = []
            for item in params.get("Bgs"):
                obj = OcrBlockItem()
                obj._deserialize(item)
                self._Bgs.append(obj)
        if params.get("Keys") is not None:
            self._Keys = []
            for item in params.get("Keys"):
                obj = OcrBlockItem()
                obj._deserialize(item)
                self._Keys.append(obj)
        if params.get("Values") is not None:
            self._Values = []
            for item in params.get("Values"):
                obj = OcrBlockItem()
                obj._deserialize(item)
                self._Values.append(obj)
        self._IsCorrect = params.get("IsCorrect")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OcrBlockItem(AbstractModel):
    """自动学习ocr块内容项

    """

    def __init__(self):
        r"""
        :param _Coords: 四边形四个定点坐标，顺序为左上，右上，右下，左下
注意：此字段可能返回 null，表示取不到有效值。
        :type Coords: list of float
        :param _Content: 识别文字内容
注意：此字段可能返回 null，表示取不到有效值。
        :type Content: str
        :param _IsComplement: 是否为补充key
注意：此字段可能返回 null，表示取不到有效值。
        :type IsComplement: bool
        :param _IsCorrect: 推理值是否正确
注意：此字段可能返回 null，表示取不到有效值。
        :type IsCorrect: bool
        """
        self._Coords = None
        self._Content = None
        self._IsComplement = None
        self._IsCorrect = None

    @property
    def Coords(self):
        """四边形四个定点坐标，顺序为左上，右上，右下，左下
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._Coords

    @Coords.setter
    def Coords(self, Coords):
        self._Coords = Coords

    @property
    def Content(self):
        """识别文字内容
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content

    @property
    def IsComplement(self):
        """是否为补充key
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsComplement

    @IsComplement.setter
    def IsComplement(self, IsComplement):
        self._IsComplement = IsComplement

    @property
    def IsCorrect(self):
        """推理值是否正确
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsCorrect

    @IsCorrect.setter
    def IsCorrect(self, IsCorrect):
        self._IsCorrect = IsCorrect


    def _deserialize(self, params):
        self._Coords = params.get("Coords")
        self._Content = params.get("Content")
        self._IsComplement = params.get("IsComplement")
        self._IsCorrect = params.get("IsCorrect")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OcrInfo(AbstractModel):
    """OCR场景信息

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetId: str
        :param _OcrScene: OCR 场景：
IDENTITY，识别
STRUCTURE， 智能结构化
如果改数据集非OCR场景，该字段为空
注意：此字段可能返回 null，表示取不到有效值。
        :type OcrScene: str
        """
        self._DatasetId = None
        self._OcrScene = None

    @property
    def DatasetId(self):
        """数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def OcrScene(self):
        """OCR 场景：
IDENTITY，识别
STRUCTURE， 智能结构化
如果改数据集非OCR场景，该字段为空
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._OcrScene

    @OcrScene.setter
    def OcrScene(self, OcrScene):
        self._OcrScene = OcrScene


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._OcrScene = params.get("OcrScene")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OcrLabelInfo(AbstractModel):
    """OCR场景标签列表

    """

    def __init__(self):
        r"""
        :param _Points: 坐标点围起来的框
注意：此字段可能返回 null，表示取不到有效值。
        :type Points: list of PointInfo
        :param _FrameType: 框的形状：
FRAME_TYPE_RECTANGLE
FRAME_TYPE_POLYGON
注意：此字段可能返回 null，表示取不到有效值。
        :type FrameType: str
        :param _Key: 智能结构化：key区域对应的内容
注意：此字段可能返回 null，表示取不到有效值。
        :type Key: str
        :param _KeyId: 智能结构化：上述key的ID
注意：此字段可能返回 null，表示取不到有效值。
        :type KeyId: str
        :param _Value: 识别：框区域的内容
智能结构化：value区域对应的内容
注意：此字段可能返回 null，表示取不到有效值。
        :type Value: str
        :param _KeyIdsForValue: 智能结构化：value区域所关联的key 区域的keyID的集合
注意：此字段可能返回 null，表示取不到有效值。
        :type KeyIdsForValue: list of str
        :param _Direction: key或者value区域内容的方向：
DIRECTION_VERTICAL
DIRECTION_HORIZONTAL
注意：此字段可能返回 null，表示取不到有效值。
        :type Direction: str
        """
        self._Points = None
        self._FrameType = None
        self._Key = None
        self._KeyId = None
        self._Value = None
        self._KeyIdsForValue = None
        self._Direction = None

    @property
    def Points(self):
        """坐标点围起来的框
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of PointInfo
        """
        return self._Points

    @Points.setter
    def Points(self, Points):
        self._Points = Points

    @property
    def FrameType(self):
        """框的形状：
FRAME_TYPE_RECTANGLE
FRAME_TYPE_POLYGON
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FrameType

    @FrameType.setter
    def FrameType(self, FrameType):
        self._FrameType = FrameType

    @property
    def Key(self):
        """智能结构化：key区域对应的内容
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def KeyId(self):
        """智能结构化：上述key的ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._KeyId

    @KeyId.setter
    def KeyId(self, KeyId):
        self._KeyId = KeyId

    @property
    def Value(self):
        """识别：框区域的内容
智能结构化：value区域对应的内容
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value

    @property
    def KeyIdsForValue(self):
        """智能结构化：value区域所关联的key 区域的keyID的集合
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._KeyIdsForValue

    @KeyIdsForValue.setter
    def KeyIdsForValue(self, KeyIdsForValue):
        self._KeyIdsForValue = KeyIdsForValue

    @property
    def Direction(self):
        """key或者value区域内容的方向：
DIRECTION_VERTICAL
DIRECTION_HORIZONTAL
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Direction

    @Direction.setter
    def Direction(self, Direction):
        self._Direction = Direction


    def _deserialize(self, params):
        if params.get("Points") is not None:
            self._Points = []
            for item in params.get("Points"):
                obj = PointInfo()
                obj._deserialize(item)
                self._Points.append(obj)
        self._FrameType = params.get("FrameType")
        self._Key = params.get("Key")
        self._KeyId = params.get("KeyId")
        self._Value = params.get("Value")
        self._KeyIdsForValue = params.get("KeyIdsForValue")
        self._Direction = params.get("Direction")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OperatorCategory(AbstractModel):
    """工作流算子列表

    """

    def __init__(self):
        r"""
        :param _Id: 算子类别id
注意：此字段可能返回 null，表示取不到有效值。
        :type Id: str
        :param _Name: 算子类别名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _Description: 算子类别描述
注意：此字段可能返回 null，表示取不到有效值。
        :type Description: str
        :param _Icon: 组件类别图标
注意：此字段可能返回 null，表示取不到有效值。
        :type Icon: str
        :param _Visible: 组件类别是否可见
注意：此字段可能返回 null，表示取不到有效值。
        :type Visible: bool
        :param _OperatorIds: 包含的算子id
注意：此字段可能返回 null，表示取不到有效值。
        :type OperatorIds: list of str
        :param _Count: 当前类别下所有组件数量
注意：此字段可能返回 null，表示取不到有效值。
        :type Count: int
        :param _ParentId: 父类别id; 没有父类别则默认为空字符串
注意：此字段可能返回 null，表示取不到有效值。
        :type ParentId: str
        """
        self._Id = None
        self._Name = None
        self._Description = None
        self._Icon = None
        self._Visible = None
        self._OperatorIds = None
        self._Count = None
        self._ParentId = None

    @property
    def Id(self):
        """算子类别id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """算子类别名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Description(self):
        """算子类别描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Icon(self):
        """组件类别图标
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Icon

    @Icon.setter
    def Icon(self, Icon):
        self._Icon = Icon

    @property
    def Visible(self):
        """组件类别是否可见
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._Visible

    @Visible.setter
    def Visible(self, Visible):
        self._Visible = Visible

    @property
    def OperatorIds(self):
        """包含的算子id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._OperatorIds

    @OperatorIds.setter
    def OperatorIds(self, OperatorIds):
        self._OperatorIds = OperatorIds

    @property
    def Count(self):
        """当前类别下所有组件数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count

    @property
    def ParentId(self):
        """父类别id; 没有父类别则默认为空字符串
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ParentId

    @ParentId.setter
    def ParentId(self, ParentId):
        self._ParentId = ParentId


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._Description = params.get("Description")
        self._Icon = params.get("Icon")
        self._Visible = params.get("Visible")
        self._OperatorIds = params.get("OperatorIds")
        self._Count = params.get("Count")
        self._ParentId = params.get("ParentId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class OptimizationResult(AbstractModel):
    """自动学习模型优化报告

    """

    def __init__(self):
        r"""
        :param _BaselineTime: 优化前时延
注意：此字段可能返回 null，表示取不到有效值。
        :type BaselineTime: str
        :param _OptimizedTime: 优化后时延
注意：此字段可能返回 null，表示取不到有效值。
        :type OptimizedTime: str
        :param _Speedup: 加速比
        :type Speedup: str
        """
        self._BaselineTime = None
        self._OptimizedTime = None
        self._Speedup = None

    @property
    def BaselineTime(self):
        """优化前时延
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._BaselineTime

    @BaselineTime.setter
    def BaselineTime(self, BaselineTime):
        self._BaselineTime = BaselineTime

    @property
    def OptimizedTime(self):
        """优化后时延
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._OptimizedTime

    @OptimizedTime.setter
    def OptimizedTime(self, OptimizedTime):
        self._OptimizedTime = OptimizedTime

    @property
    def Speedup(self):
        """加速比
        :rtype: str
        """
        return self._Speedup

    @Speedup.setter
    def Speedup(self, Speedup):
        self._Speedup = Speedup


    def _deserialize(self, params):
        self._BaselineTime = params.get("BaselineTime")
        self._OptimizedTime = params.get("OptimizedTime")
        self._Speedup = params.get("Speedup")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Option(AbstractModel):
    """键值对

    """

    def __init__(self):
        r"""
        :param _Name: 指标名
        :type Name: str
        :param _Value: 指标值
        :type Value: int
        """
        self._Name = None
        self._Value = None

    @property
    def Name(self):
        """指标名
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Value(self):
        """指标值
        :rtype: int
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PRValue(AbstractModel):
    """评测指标pr曲线值

    """

    def __init__(self):
        r"""
        :param _Precision: 精度信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Precision: list of float
        :param _Recall: 召回率信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Recall: list of float
        :param _Threshold: 阈值信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Threshold: list of float
        """
        self._Precision = None
        self._Recall = None
        self._Threshold = None

    @property
    def Precision(self):
        """精度信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._Precision

    @Precision.setter
    def Precision(self, Precision):
        self._Precision = Precision

    @property
    def Recall(self):
        """召回率信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._Recall

    @Recall.setter
    def Recall(self, Recall):
        self._Recall = Recall

    @property
    def Threshold(self):
        """阈值信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of float
        """
        return self._Threshold

    @Threshold.setter
    def Threshold(self, Threshold):
        self._Threshold = Threshold


    def _deserialize(self, params):
        self._Precision = params.get("Precision")
        self._Recall = params.get("Recall")
        self._Threshold = params.get("Threshold")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PersonalLabel(AbstractModel):
    """用于创建标注任务时，表示个人标签信息

    """

    def __init__(self):
        r"""
        :param _LabelName: label name
        :type LabelName: str
        :param _Color: label color
        :type Color: str
        :param _ID: label id
        :type ID: int
        :param _CreateTime: 创建时间
        :type CreateTime: int
        :param _UpdateTime: 更新时间
        :type UpdateTime: int
        """
        self._LabelName = None
        self._Color = None
        self._ID = None
        self._CreateTime = None
        self._UpdateTime = None

    @property
    def LabelName(self):
        """label name
        :rtype: str
        """
        return self._LabelName

    @LabelName.setter
    def LabelName(self, LabelName):
        self._LabelName = LabelName

    @property
    def Color(self):
        """label color
        :rtype: str
        """
        return self._Color

    @Color.setter
    def Color(self, Color):
        self._Color = Color

    @property
    def ID(self):
        """label id
        :rtype: int
        """
        return self._ID

    @ID.setter
    def ID(self, ID):
        self._ID = ID

    @property
    def CreateTime(self):
        """创建时间
        :rtype: int
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: int
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime


    def _deserialize(self, params):
        self._LabelName = params.get("LabelName")
        self._Color = params.get("Color")
        self._ID = params.get("ID")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PlatformImageInfo(AbstractModel):
    """平台镜像信息详情

    """

    def __init__(self):
        r"""
        :param _Framework: 框架名
注意：此字段可能返回 null，表示取不到有效值。
        :type Framework: str
        :param _ImageType: 镜像类型: ccr or tcr
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageType: str
        :param _ImageUrl: 镜像地址
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageUrl: str
        :param _RegistryRegion: TCR镜像示例所属地域
注意：此字段可能返回 null，表示取不到有效值。
        :type RegistryRegion: str
        :param _RegistryId: TCR镜像所属实例ID
注意：此字段可能返回 null，表示取不到有效值。
        :type RegistryId: str
        :param _ImageName: 镜像名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageName: str
        :param _ImageId: 镜像Id
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageId: str
        :param _FrameworkVersion: 框架版本
注意：此字段可能返回 null，表示取不到有效值。
        :type FrameworkVersion: str
        :param _SupportGpuList: 支持的gpu列表
注意：此字段可能返回 null，表示取不到有效值。
        :type SupportGpuList: list of str
        :param _Description: 描述信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Description: str
        :param _ExtraAttributes: 业务属性
注意：此字段可能返回 null，表示取不到有效值。
        :type ExtraAttributes: list of Attribute
        :param _ImageRange: 镜像适用场景Train/Inference/Notebook
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageRange: list of str
        :param _SupportDistributedDeploy: 是否支持分布式部署
注意：此字段可能返回 null，表示取不到有效值。
        :type SupportDistributedDeploy: bool
        :param _RegionScope: 支持的地域 all(所有地域)/autonomous(自动驾驶地域)/general(通用地域)
注意：此字段可能返回 null，表示取不到有效值。
        :type RegionScope: str
        """
        self._Framework = None
        self._ImageType = None
        self._ImageUrl = None
        self._RegistryRegion = None
        self._RegistryId = None
        self._ImageName = None
        self._ImageId = None
        self._FrameworkVersion = None
        self._SupportGpuList = None
        self._Description = None
        self._ExtraAttributes = None
        self._ImageRange = None
        self._SupportDistributedDeploy = None
        self._RegionScope = None

    @property
    def Framework(self):
        """框架名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Framework

    @Framework.setter
    def Framework(self, Framework):
        self._Framework = Framework

    @property
    def ImageType(self):
        """镜像类型: ccr or tcr
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ImageType

    @ImageType.setter
    def ImageType(self, ImageType):
        self._ImageType = ImageType

    @property
    def ImageUrl(self):
        """镜像地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ImageUrl

    @ImageUrl.setter
    def ImageUrl(self, ImageUrl):
        self._ImageUrl = ImageUrl

    @property
    def RegistryRegion(self):
        """TCR镜像示例所属地域
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RegistryRegion

    @RegistryRegion.setter
    def RegistryRegion(self, RegistryRegion):
        self._RegistryRegion = RegistryRegion

    @property
    def RegistryId(self):
        """TCR镜像所属实例ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RegistryId

    @RegistryId.setter
    def RegistryId(self, RegistryId):
        self._RegistryId = RegistryId

    @property
    def ImageName(self):
        """镜像名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ImageName

    @ImageName.setter
    def ImageName(self, ImageName):
        self._ImageName = ImageName

    @property
    def ImageId(self):
        """镜像Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ImageId

    @ImageId.setter
    def ImageId(self, ImageId):
        self._ImageId = ImageId

    @property
    def FrameworkVersion(self):
        """框架版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FrameworkVersion

    @FrameworkVersion.setter
    def FrameworkVersion(self, FrameworkVersion):
        self._FrameworkVersion = FrameworkVersion

    @property
    def SupportGpuList(self):
        """支持的gpu列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._SupportGpuList

    @SupportGpuList.setter
    def SupportGpuList(self, SupportGpuList):
        self._SupportGpuList = SupportGpuList

    @property
    def Description(self):
        """描述信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def ExtraAttributes(self):
        """业务属性
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Attribute
        """
        return self._ExtraAttributes

    @ExtraAttributes.setter
    def ExtraAttributes(self, ExtraAttributes):
        self._ExtraAttributes = ExtraAttributes

    @property
    def ImageRange(self):
        """镜像适用场景Train/Inference/Notebook
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._ImageRange

    @ImageRange.setter
    def ImageRange(self, ImageRange):
        self._ImageRange = ImageRange

    @property
    def SupportDistributedDeploy(self):
        """是否支持分布式部署
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._SupportDistributedDeploy

    @SupportDistributedDeploy.setter
    def SupportDistributedDeploy(self, SupportDistributedDeploy):
        self._SupportDistributedDeploy = SupportDistributedDeploy

    @property
    def RegionScope(self):
        """支持的地域 all(所有地域)/autonomous(自动驾驶地域)/general(通用地域)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RegionScope

    @RegionScope.setter
    def RegionScope(self, RegionScope):
        self._RegionScope = RegionScope


    def _deserialize(self, params):
        self._Framework = params.get("Framework")
        self._ImageType = params.get("ImageType")
        self._ImageUrl = params.get("ImageUrl")
        self._RegistryRegion = params.get("RegistryRegion")
        self._RegistryId = params.get("RegistryId")
        self._ImageName = params.get("ImageName")
        self._ImageId = params.get("ImageId")
        self._FrameworkVersion = params.get("FrameworkVersion")
        self._SupportGpuList = params.get("SupportGpuList")
        self._Description = params.get("Description")
        if params.get("ExtraAttributes") is not None:
            self._ExtraAttributes = []
            for item in params.get("ExtraAttributes"):
                obj = Attribute()
                obj._deserialize(item)
                self._ExtraAttributes.append(obj)
        self._ImageRange = params.get("ImageRange")
        self._SupportDistributedDeploy = params.get("SupportDistributedDeploy")
        self._RegionScope = params.get("RegionScope")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PluginInfo(AbstractModel):
    """插件信息

    """

    def __init__(self):
        r"""
        :param _HookName: 注入点名称
注意：此字段可能返回 null，表示取不到有效值。
        :type HookName: str
        :param _Version: 版本信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Version: str
        :param _Description: 描述
注意：此字段可能返回 null，表示取不到有效值。
        :type Description: str
        :param _UpdateTime: 最近更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTime: str
        :param _CodeInfo: 代码插件信息
注意：此字段可能返回 null，表示取不到有效值。
        :type CodeInfo: :class:`tencentcloud.tione.v20211111.models.CodeInfo`
        :param _IsExample: 是否实现样例
注意：此字段可能返回 null，表示取不到有效值。
        :type IsExample: bool
        """
        self._HookName = None
        self._Version = None
        self._Description = None
        self._UpdateTime = None
        self._CodeInfo = None
        self._IsExample = None

    @property
    def HookName(self):
        """注入点名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._HookName

    @HookName.setter
    def HookName(self, HookName):
        self._HookName = HookName

    @property
    def Version(self):
        """版本信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def Description(self):
        """描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def UpdateTime(self):
        """最近更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def CodeInfo(self):
        """代码插件信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CodeInfo`
        """
        return self._CodeInfo

    @CodeInfo.setter
    def CodeInfo(self, CodeInfo):
        self._CodeInfo = CodeInfo

    @property
    def IsExample(self):
        """是否实现样例
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsExample

    @IsExample.setter
    def IsExample(self, IsExample):
        self._IsExample = IsExample


    def _deserialize(self, params):
        self._HookName = params.get("HookName")
        self._Version = params.get("Version")
        self._Description = params.get("Description")
        self._UpdateTime = params.get("UpdateTime")
        if params.get("CodeInfo") is not None:
            self._CodeInfo = CodeInfo()
            self._CodeInfo._deserialize(params.get("CodeInfo"))
        self._IsExample = params.get("IsExample")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Pod(AbstractModel):
    """Pod信息展示

    """

    def __init__(self):
        r"""
        :param _Name: pod名
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _Uid: pod的唯一id
注意：此字段可能返回 null，表示取不到有效值。
        :type Uid: str
        :param _ChargeType: 服务付费模式
注意：此字段可能返回 null，表示取不到有效值。
        :type ChargeType: str
        :param _Phase: pod的状态
注意：此字段可能返回 null，表示取不到有效值。
        :type Phase: str
        :param _IP: pod的IP
注意：此字段可能返回 null，表示取不到有效值。
        :type IP: str
        :param _CreateTime: pod的创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _Containers: 容器列表
注意：此字段可能返回 null，表示取不到有效值。
        :type Containers: :class:`tencentcloud.tione.v20211111.models.Container`
        :param _ContainerInfos: 容器列表
注意：此字段可能返回 null，表示取不到有效值。
        :type ContainerInfos: list of Container
        :param _CrossTenantENIInfo: 容器调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :type CrossTenantENIInfo: :class:`tencentcloud.tione.v20211111.models.CrossTenantENIInfo`
        :param _Status: 实例的状态信息
        :type Status: str
        """
        self._Name = None
        self._Uid = None
        self._ChargeType = None
        self._Phase = None
        self._IP = None
        self._CreateTime = None
        self._Containers = None
        self._ContainerInfos = None
        self._CrossTenantENIInfo = None
        self._Status = None

    @property
    def Name(self):
        """pod名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Uid(self):
        """pod的唯一id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Uid

    @Uid.setter
    def Uid(self, Uid):
        self._Uid = Uid

    @property
    def ChargeType(self):
        """服务付费模式
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def Phase(self):
        """pod的状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Phase

    @Phase.setter
    def Phase(self, Phase):
        self._Phase = Phase

    @property
    def IP(self):
        """pod的IP
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._IP

    @IP.setter
    def IP(self, IP):
        self._IP = IP

    @property
    def CreateTime(self):
        """pod的创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def Containers(self):
        warnings.warn("parameter `Containers` is deprecated", DeprecationWarning) 

        """容器列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.Container`
        """
        return self._Containers

    @Containers.setter
    def Containers(self, Containers):
        warnings.warn("parameter `Containers` is deprecated", DeprecationWarning) 

        self._Containers = Containers

    @property
    def ContainerInfos(self):
        """容器列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Container
        """
        return self._ContainerInfos

    @ContainerInfos.setter
    def ContainerInfos(self, ContainerInfos):
        self._ContainerInfos = ContainerInfos

    @property
    def CrossTenantENIInfo(self):
        """容器调用信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CrossTenantENIInfo`
        """
        return self._CrossTenantENIInfo

    @CrossTenantENIInfo.setter
    def CrossTenantENIInfo(self, CrossTenantENIInfo):
        self._CrossTenantENIInfo = CrossTenantENIInfo

    @property
    def Status(self):
        """实例的状态信息
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Uid = params.get("Uid")
        self._ChargeType = params.get("ChargeType")
        self._Phase = params.get("Phase")
        self._IP = params.get("IP")
        self._CreateTime = params.get("CreateTime")
        if params.get("Containers") is not None:
            self._Containers = Container()
            self._Containers._deserialize(params.get("Containers"))
        if params.get("ContainerInfos") is not None:
            self._ContainerInfos = []
            for item in params.get("ContainerInfos"):
                obj = Container()
                obj._deserialize(item)
                self._ContainerInfos.append(obj)
        if params.get("CrossTenantENIInfo") is not None:
            self._CrossTenantENIInfo = CrossTenantENIInfo()
            self._CrossTenantENIInfo._deserialize(params.get("CrossTenantENIInfo"))
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PodInfo(AbstractModel):
    """任务建模Pod信息

    """

    def __init__(self):
        r"""
        :param _Name: pod名
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _IP: pod的IP
注意：此字段可能返回 null，表示取不到有效值。
        :type IP: str
        :param _Status: pod状态。eg：SUBMITTING提交中、PENDING排队中、RUNNING运行中、SUCCEEDED已完成、FAILED异常、TERMINATING停止中、TERMINATED已停止
注意：此字段可能返回 null，表示取不到有效值。
        :type Status: str
        :param _Url: pod的登陆url
注意：此字段可能返回 null，表示取不到有效值。
        :type Url: str
        :param _StartTime: pod启动时间
注意：此字段可能返回 null，表示取不到有效值。
        :type StartTime: str
        :param _EndTime: pod结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :type EndTime: str
        :param _ResourceConfigInfo: pod资源配置
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceConfigInfo: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        :param _GpuNames: Deprecated
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuNames: list of str
        :param _Gpus: GPU 列表。目前仅为接入云监控提供，仅返回整卡
注意：此字段可能返回 null，表示取不到有效值。
        :type Gpus: :class:`tencentcloud.tione.v20211111.models.GpuInfo`
        :param _NodeId: 资源组节点ID
注意：此字段可能返回 null，表示取不到有效值。
        :type NodeId: str
        :param _AppId: Pod所属任务的AppId
注意：此字段可能返回 null，表示取不到有效值。
        :type AppId: str
        :param _SubUin: Pod所属任务的SubUin信息
注意：此字段可能返回 null，表示取不到有效值。
        :type SubUin: str
        """
        self._Name = None
        self._IP = None
        self._Status = None
        self._Url = None
        self._StartTime = None
        self._EndTime = None
        self._ResourceConfigInfo = None
        self._GpuNames = None
        self._Gpus = None
        self._NodeId = None
        self._AppId = None
        self._SubUin = None

    @property
    def Name(self):
        """pod名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def IP(self):
        """pod的IP
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._IP

    @IP.setter
    def IP(self, IP):
        self._IP = IP

    @property
    def Status(self):
        """pod状态。eg：SUBMITTING提交中、PENDING排队中、RUNNING运行中、SUCCEEDED已完成、FAILED异常、TERMINATING停止中、TERMINATED已停止
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Url(self):
        """pod的登陆url
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Url

    @Url.setter
    def Url(self, Url):
        self._Url = Url

    @property
    def StartTime(self):
        """pod启动时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """pod结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def ResourceConfigInfo(self):
        """pod资源配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        """
        return self._ResourceConfigInfo

    @ResourceConfigInfo.setter
    def ResourceConfigInfo(self, ResourceConfigInfo):
        self._ResourceConfigInfo = ResourceConfigInfo

    @property
    def GpuNames(self):
        """Deprecated
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._GpuNames

    @GpuNames.setter
    def GpuNames(self, GpuNames):
        self._GpuNames = GpuNames

    @property
    def Gpus(self):
        """GPU 列表。目前仅为接入云监控提供，仅返回整卡
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.GpuInfo`
        """
        return self._Gpus

    @Gpus.setter
    def Gpus(self, Gpus):
        self._Gpus = Gpus

    @property
    def NodeId(self):
        """资源组节点ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._NodeId

    @NodeId.setter
    def NodeId(self, NodeId):
        self._NodeId = NodeId

    @property
    def AppId(self):
        """Pod所属任务的AppId
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId

    @property
    def SubUin(self):
        """Pod所属任务的SubUin信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._IP = params.get("IP")
        self._Status = params.get("Status")
        self._Url = params.get("Url")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        if params.get("ResourceConfigInfo") is not None:
            self._ResourceConfigInfo = ResourceConfigInfo()
            self._ResourceConfigInfo._deserialize(params.get("ResourceConfigInfo"))
        self._GpuNames = params.get("GpuNames")
        if params.get("Gpus") is not None:
            self._Gpus = []
            for item in params.get("Gpus"):
                gpu_info = GpuInfo()
                gpu_info._deserialize(item)
                self._Gpus.append(gpu_info)
        self._NodeId = params.get("NodeId")
        self._AppId = params.get("AppId")
        self._SubUin = params.get("SubUin")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PodSSHInfo(AbstractModel):
    """SSH pod访问信息

    """

    def __init__(self):
        r"""
        :param _Host: pod访问ip
        :type Host: str
        :param _Port: pod ssh访问端口
        :type Port: int
        :param _LoginCommand: ssh访问命令
        :type LoginCommand: str
        """
        self._Host = None
        self._Port = None
        self._LoginCommand = None

    @property
    def Host(self):
        """pod访问ip
        :rtype: str
        """
        return self._Host

    @Host.setter
    def Host(self, Host):
        self._Host = Host

    @property
    def Port(self):
        """pod ssh访问端口
        :rtype: int
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        self._Port = Port

    @property
    def LoginCommand(self):
        """ssh访问命令
        :rtype: str
        """
        return self._LoginCommand

    @LoginCommand.setter
    def LoginCommand(self, LoginCommand):
        self._LoginCommand = LoginCommand


    def _deserialize(self, params):
        self._Host = params.get("Host")
        self._Port = params.get("Port")
        self._LoginCommand = params.get("LoginCommand")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Point(AbstractModel):
    """图像坐标点信息

    """

    def __init__(self):
        r"""
        :param _X: x坐标值
        :type X: float
        :param _Y: y坐标值
        :type Y: float
        """
        self._X = None
        self._Y = None

    @property
    def X(self):
        """x坐标值
        :rtype: float
        """
        return self._X

    @X.setter
    def X(self, X):
        self._X = X

    @property
    def Y(self):
        """y坐标值
        :rtype: float
        """
        return self._Y

    @Y.setter
    def Y(self, Y):
        self._Y = Y


    def _deserialize(self, params):
        self._X = params.get("X")
        self._Y = params.get("Y")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PointInfo(AbstractModel):
    """点信息描述

    """

    def __init__(self):
        r"""
        :param _X: X坐标值
注意：此字段可能返回 null，表示取不到有效值。
        :type X: float
        :param _Y: Y坐标值
注意：此字段可能返回 null，表示取不到有效值。
        :type Y: float
        """
        self._X = None
        self._Y = None

    @property
    def X(self):
        """X坐标值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._X

    @X.setter
    def X(self, X):
        self._X = X

    @property
    def Y(self):
        """Y坐标值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Y

    @Y.setter
    def Y(self, Y):
        self._Y = Y


    def _deserialize(self, params):
        self._X = params.get("X")
        self._Y = params.get("Y")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PreTrainModel(AbstractModel):
    """太极任务预训练模型信息

    """

    def __init__(self):
        r"""
        :param _ModelId: 模型ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelId: str
        :param _ModelName: 模型名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelName: str
        """
        self._ModelId = None
        self._ModelName = None

    @property
    def ModelId(self):
        """模型ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def ModelName(self):
        """模型名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelName

    @ModelName.setter
    def ModelName(self, ModelName):
        self._ModelName = ModelName


    def _deserialize(self, params):
        self._ModelId = params.get("ModelId")
        self._ModelName = params.get("ModelName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PrecheckResult(AbstractModel):
    """CVM纳管前的预检查结果

    """

    def __init__(self):
        r"""
        :param _CVMInstanceId: CVM节点ID
        :type CVMInstanceId: str
        :param _Valid: 是否能被纳管，为true时RejectedInfo为空，为false的时候需要展示RejectedInfo中的信息
        :type Valid: bool
        :param _RejectedInfo: 被拒绝纳管的原因
        :type RejectedInfo: list of RejectedInfo
        """
        self._CVMInstanceId = None
        self._Valid = None
        self._RejectedInfo = None

    @property
    def CVMInstanceId(self):
        """CVM节点ID
        :rtype: str
        """
        return self._CVMInstanceId

    @CVMInstanceId.setter
    def CVMInstanceId(self, CVMInstanceId):
        self._CVMInstanceId = CVMInstanceId

    @property
    def Valid(self):
        """是否能被纳管，为true时RejectedInfo为空，为false的时候需要展示RejectedInfo中的信息
        :rtype: bool
        """
        return self._Valid

    @Valid.setter
    def Valid(self, Valid):
        self._Valid = Valid

    @property
    def RejectedInfo(self):
        """被拒绝纳管的原因
        :rtype: list of RejectedInfo
        """
        return self._RejectedInfo

    @RejectedInfo.setter
    def RejectedInfo(self, RejectedInfo):
        self._RejectedInfo = RejectedInfo


    def _deserialize(self, params):
        self._CVMInstanceId = params.get("CVMInstanceId")
        self._Valid = params.get("Valid")
        if params.get("RejectedInfo") is not None:
            self._RejectedInfo = []
            for item in params.get("RejectedInfo"):
                obj = RejectedInfo()
                obj._deserialize(item)
                self._RejectedInfo.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PredictConfig(AbstractModel):
    """推理标签信息

    """

    def __init__(self):
        r"""
        :param _LabelName: 标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelName: str
        :param _LabelId: 标签id
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelId: int
        :param _IsCorrect: 推理结果是否正确
注意：此字段可能返回 null，表示取不到有效值。
        :type IsCorrect: bool
        :param _Points: 标签在图像坐标点信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Points: list of Point
        :param _Blocks: ocr块结果
注意：此字段可能返回 null，表示取不到有效值。
        :type Blocks: list of OcrBlock
        """
        self._LabelName = None
        self._LabelId = None
        self._IsCorrect = None
        self._Points = None
        self._Blocks = None

    @property
    def LabelName(self):
        """标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LabelName

    @LabelName.setter
    def LabelName(self, LabelName):
        self._LabelName = LabelName

    @property
    def LabelId(self):
        """标签id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._LabelId

    @LabelId.setter
    def LabelId(self, LabelId):
        self._LabelId = LabelId

    @property
    def IsCorrect(self):
        """推理结果是否正确
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsCorrect

    @IsCorrect.setter
    def IsCorrect(self, IsCorrect):
        self._IsCorrect = IsCorrect

    @property
    def Points(self):
        """标签在图像坐标点信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Point
        """
        return self._Points

    @Points.setter
    def Points(self, Points):
        self._Points = Points

    @property
    def Blocks(self):
        """ocr块结果
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of OcrBlock
        """
        return self._Blocks

    @Blocks.setter
    def Blocks(self, Blocks):
        self._Blocks = Blocks


    def _deserialize(self, params):
        self._LabelName = params.get("LabelName")
        self._LabelId = params.get("LabelId")
        self._IsCorrect = params.get("IsCorrect")
        if params.get("Points") is not None:
            self._Points = []
            for item in params.get("Points"):
                obj = Point()
                obj._deserialize(item)
                self._Points.append(obj)
        if params.get("Blocks") is not None:
            self._Blocks = []
            for item in params.get("Blocks"):
                obj = OcrBlock()
                obj._deserialize(item)
                self._Blocks.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PrivateFileSystemDataSource(AbstractModel):
    """文件系统存储（私有化使用）

    """


class PrivateLinkEndpointInfo(AbstractModel):
    """私有连接的终端节点信息

    """

    def __init__(self):
        r"""
        :param _VpcId: 终端节点对应的vpcip
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcId: str
        :param _SubnetId: 终端节点对应的subnet ip
注意：此字段可能返回 null，表示取不到有效值。
        :type SubnetId: str
        :param _VpcIp: 终端节点对应的ip
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcIp: str
        """
        self._VpcId = None
        self._SubnetId = None
        self._VpcIp = None

    @property
    def VpcId(self):
        """终端节点对应的vpcip
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """终端节点对应的subnet ip
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def VpcIp(self):
        """终端节点对应的ip
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VpcIp

    @VpcIp.setter
    def VpcIp(self, VpcIp):
        self._VpcIp = VpcIp


    def _deserialize(self, params):
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._VpcIp = params.get("VpcIp")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PrivateLinkInfo(AbstractModel):
    """私有连接信息

    """

    def __init__(self):
        r"""
        :param _VpcId: 私有连接所在的VPCID
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcId: str
        :param _SubnetId: 私有连接所在的子网ID
注意：此字段可能返回 null，表示取不到有效值。
        :type SubnetId: str
        :param _InnerHttpAddr: HTTP内网调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type InnerHttpAddr: list of str
        :param _InnerHttpsAddr: HTTPS内网调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type InnerHttpsAddr: list of str
        :param _State: 私有连接状态
注意：此字段可能返回 null，表示取不到有效值。
        :type State: str
        """
        self._VpcId = None
        self._SubnetId = None
        self._InnerHttpAddr = None
        self._InnerHttpsAddr = None
        self._State = None

    @property
    def VpcId(self):
        """私有连接所在的VPCID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """私有连接所在的子网ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def InnerHttpAddr(self):
        """HTTP内网调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._InnerHttpAddr

    @InnerHttpAddr.setter
    def InnerHttpAddr(self, InnerHttpAddr):
        self._InnerHttpAddr = InnerHttpAddr

    @property
    def InnerHttpsAddr(self):
        """HTTPS内网调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._InnerHttpsAddr

    @InnerHttpsAddr.setter
    def InnerHttpsAddr(self, InnerHttpsAddr):
        self._InnerHttpsAddr = InnerHttpsAddr

    @property
    def State(self):
        """私有连接状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._State

    @State.setter
    def State(self, State):
        self._State = State


    def _deserialize(self, params):
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._InnerHttpAddr = params.get("InnerHttpAddr")
        self._InnerHttpsAddr = params.get("InnerHttpsAddr")
        self._State = params.get("State")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ProjectDetail(AbstractModel):
    """工程详情

    """

    def __init__(self):
        r"""
        :param _ProjectId: 工程ID
        :type ProjectId: str
        :param _ProjectName: 工程名称
        :type ProjectName: str
        :param _Description: 工程描述
        :type Description: str
        :param _CosBucket: 工程COS桶
        :type CosBucket: str
        :param _LogEnable: 是否上报日志
        :type LogEnable: bool
        :param _LogConfig: CLS日志配置
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _Tags: 标签
        :type Tags: list of Tag
        :param _CosPath: 工程COS路径
        :type CosPath: str
        :param _CreateTime: 工程创建时间
        :type CreateTime: str
        :param _UpdateTime: 工程更新时间
        :type UpdateTime: str
        """
        self._ProjectId = None
        self._ProjectName = None
        self._Description = None
        self._CosBucket = None
        self._LogEnable = None
        self._LogConfig = None
        self._Tags = None
        self._CosPath = None
        self._CreateTime = None
        self._UpdateTime = None

    @property
    def ProjectId(self):
        """工程ID
        :rtype: str
        """
        return self._ProjectId

    @ProjectId.setter
    def ProjectId(self, ProjectId):
        self._ProjectId = ProjectId

    @property
    def ProjectName(self):
        """工程名称
        :rtype: str
        """
        return self._ProjectName

    @ProjectName.setter
    def ProjectName(self, ProjectName):
        self._ProjectName = ProjectName

    @property
    def Description(self):
        """工程描述
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def CosBucket(self):
        """工程COS桶
        :rtype: str
        """
        return self._CosBucket

    @CosBucket.setter
    def CosBucket(self, CosBucket):
        self._CosBucket = CosBucket

    @property
    def LogEnable(self):
        """是否上报日志
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def LogConfig(self):
        """CLS日志配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def Tags(self):
        """标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def CosPath(self):
        """工程COS路径
        :rtype: str
        """
        return self._CosPath

    @CosPath.setter
    def CosPath(self, CosPath):
        self._CosPath = CosPath

    @property
    def CreateTime(self):
        """工程创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """工程更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime


    def _deserialize(self, params):
        self._ProjectId = params.get("ProjectId")
        self._ProjectName = params.get("ProjectName")
        self._Description = params.get("Description")
        self._CosBucket = params.get("CosBucket")
        self._LogEnable = params.get("LogEnable")
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._CosPath = params.get("CosPath")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PublicAlgo(AbstractModel):
    """PublicAlgo

    """

    def __init__(self):
        r"""
        :param _GroupName: Llama3 系列模型
注意：此字段可能返回 null，表示取不到有效值。
        :type GroupName: str
        :param _PublicAlgoVersionId: llama_3_8b_chat-v1
注意：此字段可能返回 null，表示取不到有效值。
        :type PublicAlgoVersionId: str
        :param _Version: v1
注意：此字段可能返回 null，表示取不到有效值。
        :type Version: str
        :param _PublicAlgoGroupId: llama_3_8b_chat
注意：此字段可能返回 null，表示取不到有效值。
        :type PublicAlgoGroupId: str
        """
        self._GroupName = None
        self._PublicAlgoVersionId = None
        self._Version = None
        self._PublicAlgoGroupId = None

    @property
    def GroupName(self):
        """Llama3 系列模型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GroupName

    @GroupName.setter
    def GroupName(self, GroupName):
        self._GroupName = GroupName

    @property
    def PublicAlgoVersionId(self):
        """llama_3_8b_chat-v1
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PublicAlgoVersionId

    @PublicAlgoVersionId.setter
    def PublicAlgoVersionId(self, PublicAlgoVersionId):
        self._PublicAlgoVersionId = PublicAlgoVersionId

    @property
    def Version(self):
        """v1
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def PublicAlgoGroupId(self):
        """llama_3_8b_chat
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PublicAlgoGroupId

    @PublicAlgoGroupId.setter
    def PublicAlgoGroupId(self, PublicAlgoGroupId):
        self._PublicAlgoGroupId = PublicAlgoGroupId


    def _deserialize(self, params):
        self._GroupName = params.get("GroupName")
        self._PublicAlgoVersionId = params.get("PublicAlgoVersionId")
        self._Version = params.get("Version")
        self._PublicAlgoGroupId = params.get("PublicAlgoGroupId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PublicAlgoGroup(AbstractModel):
    """公共算法组信息

    """

    def __init__(self):
        r"""
        :param _PublicAlgoGroupId: 算法组Id
注意：此字段可能返回 null，表示取不到有效值。
        :type PublicAlgoGroupId: str
        :param _Name: 算法名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _Description: 模型描述信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Description: str
        :param _Tags: 模型标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of str
        :param _Framework: 框架
注意：此字段可能返回 null，表示取不到有效值。
        :type Framework: str
        :param _SupportType: 支持操作类型
注意：此字段可能返回 null，表示取不到有效值。
        :type SupportType: str
        :param _Creator: 创建者
注意：此字段可能返回 null，表示取不到有效值。
        :type Creator: str
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _UpdateTime: 更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTime: str
        :param _SupportImport: 是否支持导入到我的算法
注意：此字段可能返回 null，表示取不到有效值。
        :type SupportImport: bool
        :param _IsPromoted: 是否精选卡片
注意：此字段可能返回 null，表示取不到有效值。
        :type IsPromoted: str
        :param _SupportTrial: 是否支持体验
注意：此字段可能返回 null，表示取不到有效值。
        :type SupportTrial: bool
        """
        self._PublicAlgoGroupId = None
        self._Name = None
        self._Description = None
        self._Tags = None
        self._Framework = None
        self._SupportType = None
        self._Creator = None
        self._CreateTime = None
        self._UpdateTime = None
        self._SupportImport = None
        self._IsPromoted = None
        self._SupportTrial = None

    @property
    def PublicAlgoGroupId(self):
        """算法组Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PublicAlgoGroupId

    @PublicAlgoGroupId.setter
    def PublicAlgoGroupId(self, PublicAlgoGroupId):
        self._PublicAlgoGroupId = PublicAlgoGroupId

    @property
    def Name(self):
        """算法名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Description(self):
        """模型描述信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Tags(self):
        """模型标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def Framework(self):
        """框架
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Framework

    @Framework.setter
    def Framework(self, Framework):
        self._Framework = Framework

    @property
    def SupportType(self):
        """支持操作类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SupportType

    @SupportType.setter
    def SupportType(self, SupportType):
        self._SupportType = SupportType

    @property
    def Creator(self):
        """创建者
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def SupportImport(self):
        """是否支持导入到我的算法
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._SupportImport

    @SupportImport.setter
    def SupportImport(self, SupportImport):
        self._SupportImport = SupportImport

    @property
    def IsPromoted(self):
        """是否精选卡片
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._IsPromoted

    @IsPromoted.setter
    def IsPromoted(self, IsPromoted):
        self._IsPromoted = IsPromoted

    @property
    def SupportTrial(self):
        """是否支持体验
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._SupportTrial

    @SupportTrial.setter
    def SupportTrial(self, SupportTrial):
        self._SupportTrial = SupportTrial


    def _deserialize(self, params):
        self._PublicAlgoGroupId = params.get("PublicAlgoGroupId")
        self._Name = params.get("Name")
        self._Description = params.get("Description")
        self._Tags = params.get("Tags")
        self._Framework = params.get("Framework")
        self._SupportType = params.get("SupportType")
        self._Creator = params.get("Creator")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._SupportImport = params.get("SupportImport")
        self._IsPromoted = params.get("IsPromoted")
        self._SupportTrial = params.get("SupportTrial")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PublicAlgoSeries(AbstractModel):
    """公共算法系列信息

    """

    def __init__(self):
        r"""
        :param _PublicAlgoSeriesId: 算法组Id
注意：此字段可能返回 null，表示取不到有效值。
        :type PublicAlgoSeriesId: str
        :param _Name: 算法名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _Description: 模型描述信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Description: str
        :param _Introduction: 模型介绍信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Introduction: str
        :param _PreviewInfo: 预览页信息
注意：此字段可能返回 null，表示取不到有效值。
        :type PreviewInfo: str
        :param _Tags: 模型标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of str
        :param _Framework: 框架
注意：此字段可能返回 null，表示取不到有效值。
        :type Framework: str
        :param _SupportType: 支持操作类型
注意：此字段可能返回 null，表示取不到有效值。
        :type SupportType: str
        :param _Creator: 创建者
注意：此字段可能返回 null，表示取不到有效值。
        :type Creator: str
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _UpdateTime: 更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTime: str
        :param _SupportImport: 是否支持导入到我的算法
注意：此字段可能返回 null，表示取不到有效值。
        :type SupportImport: bool
        :param _SeriesType: 系列类型
注意：此字段可能返回 null，表示取不到有效值。
        :type SeriesType: str
        :param _AlgoGroupList: 关联的AlgoGroupId列表
注意：此字段可能返回 null，表示取不到有效值。
        :type AlgoGroupList: list of str
        :param _TrainDataDownloadUrl: 训练数据下载链接
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainDataDownloadUrl: str
        :param _SupportTrialGroupList: 支持体验的GroupId列表
注意：此字段可能返回 null，表示取不到有效值。
        :type SupportTrialGroupList: list of str
        """
        self._PublicAlgoSeriesId = None
        self._Name = None
        self._Description = None
        self._Introduction = None
        self._PreviewInfo = None
        self._Tags = None
        self._Framework = None
        self._SupportType = None
        self._Creator = None
        self._CreateTime = None
        self._UpdateTime = None
        self._SupportImport = None
        self._SeriesType = None
        self._AlgoGroupList = None
        self._TrainDataDownloadUrl = None
        self._SupportTrialGroupList = None

    @property
    def PublicAlgoSeriesId(self):
        """算法组Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PublicAlgoSeriesId

    @PublicAlgoSeriesId.setter
    def PublicAlgoSeriesId(self, PublicAlgoSeriesId):
        self._PublicAlgoSeriesId = PublicAlgoSeriesId

    @property
    def Name(self):
        """算法名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Description(self):
        """模型描述信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Introduction(self):
        """模型介绍信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Introduction

    @Introduction.setter
    def Introduction(self, Introduction):
        self._Introduction = Introduction

    @property
    def PreviewInfo(self):
        """预览页信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PreviewInfo

    @PreviewInfo.setter
    def PreviewInfo(self, PreviewInfo):
        self._PreviewInfo = PreviewInfo

    @property
    def Tags(self):
        """模型标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def Framework(self):
        """框架
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Framework

    @Framework.setter
    def Framework(self, Framework):
        self._Framework = Framework

    @property
    def SupportType(self):
        """支持操作类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SupportType

    @SupportType.setter
    def SupportType(self, SupportType):
        self._SupportType = SupportType

    @property
    def Creator(self):
        """创建者
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def SupportImport(self):
        """是否支持导入到我的算法
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._SupportImport

    @SupportImport.setter
    def SupportImport(self, SupportImport):
        self._SupportImport = SupportImport

    @property
    def SeriesType(self):
        """系列类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SeriesType

    @SeriesType.setter
    def SeriesType(self, SeriesType):
        self._SeriesType = SeriesType

    @property
    def AlgoGroupList(self):
        """关联的AlgoGroupId列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._AlgoGroupList

    @AlgoGroupList.setter
    def AlgoGroupList(self, AlgoGroupList):
        self._AlgoGroupList = AlgoGroupList

    @property
    def TrainDataDownloadUrl(self):
        """训练数据下载链接
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainDataDownloadUrl

    @TrainDataDownloadUrl.setter
    def TrainDataDownloadUrl(self, TrainDataDownloadUrl):
        self._TrainDataDownloadUrl = TrainDataDownloadUrl

    @property
    def SupportTrialGroupList(self):
        """支持体验的GroupId列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._SupportTrialGroupList

    @SupportTrialGroupList.setter
    def SupportTrialGroupList(self, SupportTrialGroupList):
        self._SupportTrialGroupList = SupportTrialGroupList


    def _deserialize(self, params):
        self._PublicAlgoSeriesId = params.get("PublicAlgoSeriesId")
        self._Name = params.get("Name")
        self._Description = params.get("Description")
        self._Introduction = params.get("Introduction")
        self._PreviewInfo = params.get("PreviewInfo")
        self._Tags = params.get("Tags")
        self._Framework = params.get("Framework")
        self._SupportType = params.get("SupportType")
        self._Creator = params.get("Creator")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._SupportImport = params.get("SupportImport")
        self._SeriesType = params.get("SeriesType")
        self._AlgoGroupList = params.get("AlgoGroupList")
        self._TrainDataDownloadUrl = params.get("TrainDataDownloadUrl")
        self._SupportTrialGroupList = params.get("SupportTrialGroupList")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PublicAlgoVersion(AbstractModel):
    """公共算法版本信息

    """

    def __init__(self):
        r"""
        :param _PublicAlgoVersionId: 公共算法版本Id
注意：此字段可能返回 null，表示取不到有效值。
        :type PublicAlgoVersionId: str
        :param _PublicAlgoGroupId: 对应的公共算法组Id
注意：此字段可能返回 null，表示取不到有效值。
        :type PublicAlgoGroupId: str
        :param _Version: 版本号
注意：此字段可能返回 null，表示取不到有效值。
        :type Version: str
        :param _Introduction: 模型简介
注意：此字段可能返回 null，表示取不到有效值。
        :type Introduction: str
        :param _PreviewInfo: 预览信息
注意：此字段可能返回 null，表示取不到有效值。
        :type PreviewInfo: str
        :param _PresetTrainImageInfo: 预置训练镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :type PresetTrainImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _PresetTrainCodeInfo: 预置训练代码信息
注意：此字段可能返回 null，表示取不到有效值。
        :type PresetTrainCodeInfo: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        :param _PresetModelInfo: 预置模型信息
注意：此字段可能返回 null，表示取不到有效值。
        :type PresetModelInfo: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        :param _IsImported: 是否已经被导入到我的算法
注意：此字段可能返回 null，表示取不到有效值。
        :type IsImported: bool
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _UpdateTime: 更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTime: str
        :param _DefaultResourceSpec: 默认训练资源规格
注意：此字段可能返回 null，表示取不到有效值。
        :type DefaultResourceSpec: :class:`tencentcloud.tione.v20211111.models.ResourceSpec`
        :param _DefaultInferenceResourceSpec: 默认推理资源规格
注意：此字段可能返回 null，表示取不到有效值。
        :type DefaultInferenceResourceSpec: :class:`tencentcloud.tione.v20211111.models.ResourceSpec`
        :param _SupportDeploy: 是否支持直接部署推理服务
注意：此字段可能返回 null，表示取不到有效值。
        :type SupportDeploy: bool
        :param _PresetInferenceImageInfo: 预置推理镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :type PresetInferenceImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _InferenceEnvVars: 推理服务环境变量
注意：此字段可能返回 null，表示取不到有效值。
        :type InferenceEnvVars: list of EnvVar
        :param _PresetTrainDataset: 内置训练数据集
注意：此字段可能返回 null，表示取不到有效值。
        :type PresetTrainDataset: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        :param _TrainCodeDownloadUrl: 训练代码包下载路径
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainCodeDownloadUrl: str
        :param _TrainDataDownloadUrl: 内置数据下载路径
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainDataDownloadUrl: str
        :param _TrainParams: 训练参数列表
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainParams: list of TrainParam
        :param _PresetTrainCodeStartCmd: 训练启动命令
注意：此字段可能返回 null，表示取不到有效值。
        :type PresetTrainCodeStartCmd: str
        :param _IsPrivateModel: 是否非公开模型
注意：此字段可能返回 null，表示取不到有效值。
        :type IsPrivateModel: bool
        :param _PresetTrainImageInfoList: 各种设备下的训练镜像
注意：此字段可能返回 null，表示取不到有效值。
        :type PresetTrainImageInfoList: list of DeviceImageInfo
        :param _PresetInferenceImageInfoList: 各种设备下的推理镜像
注意：此字段可能返回 null，表示取不到有效值。
        :type PresetInferenceImageInfoList: list of DeviceImageInfo
        :param _PresetTrainCodeInfoList: 各种设备下的训练代码信息
注意：此字段可能返回 null，表示取不到有效值。
        :type PresetTrainCodeInfoList: list of DeviceMaterialInfo
        :param _PresetModelInfoList: 各种设备下的内置模型信息
注意：此字段可能返回 null，表示取不到有效值。
        :type PresetModelInfoList: list of DeviceMaterialInfo
        :param _ModelCategory: 模型类别，比如LLM/MultiModal
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelCategory: str
        :param _InferResourceSpecList: 推荐推理资源配置
        :type InferResourceSpecList: list of RecommendedResource
        """
        self._PublicAlgoVersionId = None
        self._PublicAlgoGroupId = None
        self._Version = None
        self._Introduction = None
        self._PreviewInfo = None
        self._PresetTrainImageInfo = None
        self._PresetTrainCodeInfo = None
        self._PresetModelInfo = None
        self._IsImported = None
        self._CreateTime = None
        self._UpdateTime = None
        self._DefaultResourceSpec = None
        self._DefaultInferenceResourceSpec = None
        self._SupportDeploy = None
        self._PresetInferenceImageInfo = None
        self._InferenceEnvVars = None
        self._PresetTrainDataset = None
        self._TrainCodeDownloadUrl = None
        self._TrainDataDownloadUrl = None
        self._TrainParams = None
        self._PresetTrainCodeStartCmd = None
        self._IsPrivateModel = None
        self._PresetTrainImageInfoList = None
        self._PresetInferenceImageInfoList = None
        self._PresetTrainCodeInfoList = None
        self._PresetModelInfoList = None
        self._ModelCategory = None
        self._InferResourceSpecList = None

    @property
    def PublicAlgoVersionId(self):
        """公共算法版本Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PublicAlgoVersionId

    @PublicAlgoVersionId.setter
    def PublicAlgoVersionId(self, PublicAlgoVersionId):
        self._PublicAlgoVersionId = PublicAlgoVersionId

    @property
    def PublicAlgoGroupId(self):
        """对应的公共算法组Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PublicAlgoGroupId

    @PublicAlgoGroupId.setter
    def PublicAlgoGroupId(self, PublicAlgoGroupId):
        self._PublicAlgoGroupId = PublicAlgoGroupId

    @property
    def Version(self):
        """版本号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def Introduction(self):
        """模型简介
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Introduction

    @Introduction.setter
    def Introduction(self, Introduction):
        self._Introduction = Introduction

    @property
    def PreviewInfo(self):
        """预览信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PreviewInfo

    @PreviewInfo.setter
    def PreviewInfo(self, PreviewInfo):
        self._PreviewInfo = PreviewInfo

    @property
    def PresetTrainImageInfo(self):
        """预置训练镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._PresetTrainImageInfo

    @PresetTrainImageInfo.setter
    def PresetTrainImageInfo(self, PresetTrainImageInfo):
        self._PresetTrainImageInfo = PresetTrainImageInfo

    @property
    def PresetTrainCodeInfo(self):
        """预置训练代码信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        """
        return self._PresetTrainCodeInfo

    @PresetTrainCodeInfo.setter
    def PresetTrainCodeInfo(self, PresetTrainCodeInfo):
        self._PresetTrainCodeInfo = PresetTrainCodeInfo

    @property
    def PresetModelInfo(self):
        """预置模型信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        """
        return self._PresetModelInfo

    @PresetModelInfo.setter
    def PresetModelInfo(self, PresetModelInfo):
        self._PresetModelInfo = PresetModelInfo

    @property
    def IsImported(self):
        """是否已经被导入到我的算法
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsImported

    @IsImported.setter
    def IsImported(self, IsImported):
        self._IsImported = IsImported

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def DefaultResourceSpec(self):
        """默认训练资源规格
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceSpec`
        """
        return self._DefaultResourceSpec

    @DefaultResourceSpec.setter
    def DefaultResourceSpec(self, DefaultResourceSpec):
        self._DefaultResourceSpec = DefaultResourceSpec

    @property
    def DefaultInferenceResourceSpec(self):
        """默认推理资源规格
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceSpec`
        """
        return self._DefaultInferenceResourceSpec

    @DefaultInferenceResourceSpec.setter
    def DefaultInferenceResourceSpec(self, DefaultInferenceResourceSpec):
        self._DefaultInferenceResourceSpec = DefaultInferenceResourceSpec

    @property
    def SupportDeploy(self):
        """是否支持直接部署推理服务
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._SupportDeploy

    @SupportDeploy.setter
    def SupportDeploy(self, SupportDeploy):
        self._SupportDeploy = SupportDeploy

    @property
    def PresetInferenceImageInfo(self):
        """预置推理镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._PresetInferenceImageInfo

    @PresetInferenceImageInfo.setter
    def PresetInferenceImageInfo(self, PresetInferenceImageInfo):
        self._PresetInferenceImageInfo = PresetInferenceImageInfo

    @property
    def InferenceEnvVars(self):
        """推理服务环境变量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of EnvVar
        """
        return self._InferenceEnvVars

    @InferenceEnvVars.setter
    def InferenceEnvVars(self, InferenceEnvVars):
        self._InferenceEnvVars = InferenceEnvVars

    @property
    def PresetTrainDataset(self):
        """内置训练数据集
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.MaterialInfo`
        """
        return self._PresetTrainDataset

    @PresetTrainDataset.setter
    def PresetTrainDataset(self, PresetTrainDataset):
        self._PresetTrainDataset = PresetTrainDataset

    @property
    def TrainCodeDownloadUrl(self):
        """训练代码包下载路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainCodeDownloadUrl

    @TrainCodeDownloadUrl.setter
    def TrainCodeDownloadUrl(self, TrainCodeDownloadUrl):
        self._TrainCodeDownloadUrl = TrainCodeDownloadUrl

    @property
    def TrainDataDownloadUrl(self):
        """内置数据下载路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainDataDownloadUrl

    @TrainDataDownloadUrl.setter
    def TrainDataDownloadUrl(self, TrainDataDownloadUrl):
        self._TrainDataDownloadUrl = TrainDataDownloadUrl

    @property
    def TrainParams(self):
        """训练参数列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TrainParam
        """
        return self._TrainParams

    @TrainParams.setter
    def TrainParams(self, TrainParams):
        self._TrainParams = TrainParams

    @property
    def PresetTrainCodeStartCmd(self):
        """训练启动命令
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PresetTrainCodeStartCmd

    @PresetTrainCodeStartCmd.setter
    def PresetTrainCodeStartCmd(self, PresetTrainCodeStartCmd):
        self._PresetTrainCodeStartCmd = PresetTrainCodeStartCmd

    @property
    def IsPrivateModel(self):
        """是否非公开模型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsPrivateModel

    @IsPrivateModel.setter
    def IsPrivateModel(self, IsPrivateModel):
        self._IsPrivateModel = IsPrivateModel

    @property
    def PresetTrainImageInfoList(self):
        """各种设备下的训练镜像
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DeviceImageInfo
        """
        return self._PresetTrainImageInfoList

    @PresetTrainImageInfoList.setter
    def PresetTrainImageInfoList(self, PresetTrainImageInfoList):
        self._PresetTrainImageInfoList = PresetTrainImageInfoList

    @property
    def PresetInferenceImageInfoList(self):
        """各种设备下的推理镜像
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DeviceImageInfo
        """
        return self._PresetInferenceImageInfoList

    @PresetInferenceImageInfoList.setter
    def PresetInferenceImageInfoList(self, PresetInferenceImageInfoList):
        self._PresetInferenceImageInfoList = PresetInferenceImageInfoList

    @property
    def PresetTrainCodeInfoList(self):
        """各种设备下的训练代码信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DeviceMaterialInfo
        """
        return self._PresetTrainCodeInfoList

    @PresetTrainCodeInfoList.setter
    def PresetTrainCodeInfoList(self, PresetTrainCodeInfoList):
        self._PresetTrainCodeInfoList = PresetTrainCodeInfoList

    @property
    def PresetModelInfoList(self):
        """各种设备下的内置模型信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DeviceMaterialInfo
        """
        return self._PresetModelInfoList

    @PresetModelInfoList.setter
    def PresetModelInfoList(self, PresetModelInfoList):
        self._PresetModelInfoList = PresetModelInfoList

    @property
    def ModelCategory(self):
        """模型类别，比如LLM/MultiModal
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelCategory

    @ModelCategory.setter
    def ModelCategory(self, ModelCategory):
        self._ModelCategory = ModelCategory

    @property
    def InferResourceSpecList(self):
        """推荐推理资源配置
        :rtype: list of RecommendedResource
        """
        return self._InferResourceSpecList

    @InferResourceSpecList.setter
    def InferResourceSpecList(self, InferResourceSpecList):
        self._InferResourceSpecList = InferResourceSpecList


    def _deserialize(self, params):
        self._PublicAlgoVersionId = params.get("PublicAlgoVersionId")
        self._PublicAlgoGroupId = params.get("PublicAlgoGroupId")
        self._Version = params.get("Version")
        self._Introduction = params.get("Introduction")
        self._PreviewInfo = params.get("PreviewInfo")
        if params.get("PresetTrainImageInfo") is not None:
            self._PresetTrainImageInfo = ImageInfo()
            self._PresetTrainImageInfo._deserialize(params.get("PresetTrainImageInfo"))
        if params.get("PresetTrainCodeInfo") is not None:
            self._PresetTrainCodeInfo = MaterialInfo()
            self._PresetTrainCodeInfo._deserialize(params.get("PresetTrainCodeInfo"))
        if params.get("PresetModelInfo") is not None:
            self._PresetModelInfo = MaterialInfo()
            self._PresetModelInfo._deserialize(params.get("PresetModelInfo"))
        self._IsImported = params.get("IsImported")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        if params.get("DefaultResourceSpec") is not None:
            self._DefaultResourceSpec = ResourceSpec()
            self._DefaultResourceSpec._deserialize(params.get("DefaultResourceSpec"))
        if params.get("DefaultInferenceResourceSpec") is not None:
            self._DefaultInferenceResourceSpec = ResourceSpec()
            self._DefaultInferenceResourceSpec._deserialize(params.get("DefaultInferenceResourceSpec"))
        self._SupportDeploy = params.get("SupportDeploy")
        if params.get("PresetInferenceImageInfo") is not None:
            self._PresetInferenceImageInfo = ImageInfo()
            self._PresetInferenceImageInfo._deserialize(params.get("PresetInferenceImageInfo"))
        if params.get("InferenceEnvVars") is not None:
            self._InferenceEnvVars = []
            for item in params.get("InferenceEnvVars"):
                obj = EnvVar()
                obj._deserialize(item)
                self._InferenceEnvVars.append(obj)
        if params.get("PresetTrainDataset") is not None:
            self._PresetTrainDataset = MaterialInfo()
            self._PresetTrainDataset._deserialize(params.get("PresetTrainDataset"))
        self._TrainCodeDownloadUrl = params.get("TrainCodeDownloadUrl")
        self._TrainDataDownloadUrl = params.get("TrainDataDownloadUrl")
        if params.get("TrainParams") is not None:
            self._TrainParams = []
            for item in params.get("TrainParams"):
                obj = TrainParam()
                obj._deserialize(item)
                self._TrainParams.append(obj)
        self._PresetTrainCodeStartCmd = params.get("PresetTrainCodeStartCmd")
        self._IsPrivateModel = params.get("IsPrivateModel")
        if params.get("PresetTrainImageInfoList") is not None:
            self._PresetTrainImageInfoList = []
            for item in params.get("PresetTrainImageInfoList"):
                obj = DeviceImageInfo()
                obj._deserialize(item)
                self._PresetTrainImageInfoList.append(obj)
        if params.get("PresetInferenceImageInfoList") is not None:
            self._PresetInferenceImageInfoList = []
            for item in params.get("PresetInferenceImageInfoList"):
                obj = DeviceImageInfo()
                obj._deserialize(item)
                self._PresetInferenceImageInfoList.append(obj)
        if params.get("PresetTrainCodeInfoList") is not None:
            self._PresetTrainCodeInfoList = []
            for item in params.get("PresetTrainCodeInfoList"):
                obj = DeviceMaterialInfo()
                obj._deserialize(item)
                self._PresetTrainCodeInfoList.append(obj)
        if params.get("PresetModelInfoList") is not None:
            self._PresetModelInfoList = []
            for item in params.get("PresetModelInfoList"):
                obj = DeviceMaterialInfo()
                obj._deserialize(item)
                self._PresetModelInfoList.append(obj)
        self._ModelCategory = params.get("ModelCategory")
        if params.get("InferResourceSpecList") is not None:
            self._InferResourceSpecList = []
            for item in params.get("InferResourceSpecList"):
                obj = RecommendedResource()
                obj._deserialize(item)
                self._InferResourceSpecList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PublishDatasetRequest(AbstractModel):
    """PublishDataset请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        """
        self._DatasetId = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PublishDatasetResponse(AbstractModel):
    """PublishDataset返回参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 新的数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetId: str
        :param _DatasetVersion: 数据集版本号
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetVersion: str
        :param _TaskId: 后台异步任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._DatasetId = None
        self._DatasetVersion = None
        self._TaskId = None
        self._RequestId = None

    @property
    def DatasetId(self):
        """新的数据集ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId

    @property
    def DatasetVersion(self):
        """数据集版本号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DatasetVersion

    @DatasetVersion.setter
    def DatasetVersion(self, DatasetVersion):
        self._DatasetVersion = DatasetVersion

    @property
    def TaskId(self):
        """后台异步任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        self._DatasetVersion = params.get("DatasetVersion")
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class PushTaskProcessRequest(AbstractModel):
    """PushTaskProcess请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
        :type TaskId: str
        :param _Total: 数量总计
        :type Total: int
        :param _Finished: 已完成数量
        :type Finished: int
        :param _Stage: 阶段。字节数不大于10字节
        :type Stage: str
        :param _CurrentTime: 上报时间（单位为s)。如果为0，系统会填上收到的时间
        :type CurrentTime: int
        """
        self._TaskId = None
        self._Total = None
        self._Finished = None
        self._Stage = None
        self._CurrentTime = None

    @property
    def TaskId(self):
        """任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Total(self):
        """数量总计
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def Finished(self):
        """已完成数量
        :rtype: int
        """
        return self._Finished

    @Finished.setter
    def Finished(self, Finished):
        self._Finished = Finished

    @property
    def Stage(self):
        """阶段。字节数不大于10字节
        :rtype: str
        """
        return self._Stage

    @Stage.setter
    def Stage(self, Stage):
        self._Stage = Stage

    @property
    def CurrentTime(self):
        """上报时间（单位为s)。如果为0，系统会填上收到的时间
        :rtype: int
        """
        return self._CurrentTime

    @CurrentTime.setter
    def CurrentTime(self, CurrentTime):
        self._CurrentTime = CurrentTime


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Total = params.get("Total")
        self._Finished = params.get("Finished")
        self._Stage = params.get("Stage")
        self._CurrentTime = params.get("CurrentTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PushTaskProcessResponse(AbstractModel):
    """PushTaskProcess返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class PushTrainingMetricsRequest(AbstractModel):
    """PushTrainingMetrics请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Data: 指标数据
        :type Data: list of MetricData
        """
        self._Data = None

    @property
    def Data(self):
        """指标数据
        :rtype: list of MetricData
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data


    def _deserialize(self, params):
        if params.get("Data") is not None:
            self._Data = []
            for item in params.get("Data"):
                obj = MetricData()
                obj._deserialize(item)
                self._Data.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class PushTrainingMetricsResponse(AbstractModel):
    """PushTrainingMetrics返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class RDMAConfig(AbstractModel):
    """RDMA配置

    """

    def __init__(self):
        r"""
        :param _Enable: 是否开启RDMA
注意：此字段可能返回 null，表示取不到有效值。
        :type Enable: bool
        """
        self._Enable = None

    @property
    def Enable(self):
        """是否开启RDMA
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._Enable

    @Enable.setter
    def Enable(self, Enable):
        self._Enable = Enable


    def _deserialize(self, params):
        self._Enable = params.get("Enable")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ReasonInfo(AbstractModel):
    """任务执行失败原因

    """

    def __init__(self):
        r"""
        :param _Info: 错误提示信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Info: str
        :param _Message: 有问题的具体字段
注意：此字段可能返回 null，表示取不到有效值。
        :type Message: str
        """
        self._Info = None
        self._Message = None

    @property
    def Info(self):
        """错误提示信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Info

    @Info.setter
    def Info(self, Info):
        self._Info = Info

    @property
    def Message(self):
        """有问题的具体字段
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message


    def _deserialize(self, params):
        self._Info = params.get("Info")
        self._Message = params.get("Message")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RebuildModelServicePodRequest(AbstractModel):
    """RebuildModelServicePod请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ServiceGroupId: 服务组ID
        :type ServiceGroupId: str
        :param _ServiceId: 服务ID
        :type ServiceId: str
        :param _PodName: Pod名称
        :type PodName: str
        """
        self._ServiceGroupId = None
        self._ServiceId = None
        self._PodName = None

    @property
    def ServiceGroupId(self):
        """服务组ID
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def ServiceId(self):
        """服务ID
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId

    @property
    def PodName(self):
        """Pod名称
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName


    def _deserialize(self, params):
        self._ServiceGroupId = params.get("ServiceGroupId")
        self._ServiceId = params.get("ServiceId")
        self._PodName = params.get("PodName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RebuildModelServicePodResponse(AbstractModel):
    """RebuildModelServicePod返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class RecommendedResource(AbstractModel):
    """推荐资源

    """

    def __init__(self):
        r"""
        :param _InstanceCount: 节点数量
        :type InstanceCount: int
        :param _Spec: 设备规格信息
        :type Spec: :class:`tencentcloud.tione.v20211111.models.RecommendedSpec`
        """
        self._InstanceCount = None
        self._Spec = None

    @property
    def InstanceCount(self):
        """节点数量
        :rtype: int
        """
        return self._InstanceCount

    @InstanceCount.setter
    def InstanceCount(self, InstanceCount):
        self._InstanceCount = InstanceCount

    @property
    def Spec(self):
        """设备规格信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.RecommendedSpec`
        """
        return self._Spec

    @Spec.setter
    def Spec(self, Spec):
        self._Spec = Spec


    def _deserialize(self, params):
        self._InstanceCount = params.get("InstanceCount")
        if params.get("Spec") is not None:
            self._Spec = RecommendedSpec()
            self._Spec._deserialize(params.get("Spec"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RecommendedSpec(AbstractModel):
    """推荐机型配置

    """

    def __init__(self):
        r"""
        :param _GpuType: GPU类型
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuType: str
        :param _Cpu: CPU核数; 单位为1/1000核，比如100表示0.1核
注意：此字段可能返回 null，表示取不到有效值。
        :type Cpu: int
        :param _Memory: 内存；单位为1MB
注意：此字段可能返回 null，表示取不到有效值。
        :type Memory: int
        :param _Gpu: 总卡数；单位为1/100卡，比如100代表1卡
注意：此字段可能返回 null，表示取不到有效值。
        :type Gpu: int
        :param _GpuMemory: 显存；单位为1/100GB，比如100代表1GB
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuMemory: int
        """
        self._GpuType = None
        self._Cpu = None
        self._Memory = None
        self._Gpu = None
        self._GpuMemory = None

    @property
    def GpuType(self):
        """GPU类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType

    @property
    def Cpu(self):
        """CPU核数; 单位为1/1000核，比如100表示0.1核
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Cpu

    @Cpu.setter
    def Cpu(self, Cpu):
        self._Cpu = Cpu

    @property
    def Memory(self):
        """内存；单位为1MB
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Memory

    @Memory.setter
    def Memory(self, Memory):
        self._Memory = Memory

    @property
    def Gpu(self):
        """总卡数；单位为1/100卡，比如100代表1卡
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Gpu

    @Gpu.setter
    def Gpu(self, Gpu):
        self._Gpu = Gpu

    @property
    def GpuMemory(self):
        """显存；单位为1/100GB，比如100代表1GB
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._GpuMemory

    @GpuMemory.setter
    def GpuMemory(self, GpuMemory):
        self._GpuMemory = GpuMemory


    def _deserialize(self, params):
        self._GpuType = params.get("GpuType")
        self._Cpu = params.get("Cpu")
        self._Memory = params.get("Memory")
        self._Gpu = params.get("Gpu")
        self._GpuMemory = params.get("GpuMemory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RecycleConfig(AbstractModel):
    """Notebook回收策略中的回收配置

    """

    def __init__(self):
        r"""
        :param _Operator: 操作，可选"OR","AND"
        :type Operator: str
        :param _IndexConditions: 指标条件
        :type IndexConditions: list of IndexCondition
        :param _IdleDurationInHour: notebook运行持续时长
        :type IdleDurationInHour: int
        """
        self._Operator = None
        self._IndexConditions = None
        self._IdleDurationInHour = None

    @property
    def Operator(self):
        """操作，可选"OR","AND"
        :rtype: str
        """
        return self._Operator

    @Operator.setter
    def Operator(self, Operator):
        self._Operator = Operator

    @property
    def IndexConditions(self):
        """指标条件
        :rtype: list of IndexCondition
        """
        return self._IndexConditions

    @IndexConditions.setter
    def IndexConditions(self, IndexConditions):
        self._IndexConditions = IndexConditions

    @property
    def IdleDurationInHour(self):
        """notebook运行持续时长
        :rtype: int
        """
        return self._IdleDurationInHour

    @IdleDurationInHour.setter
    def IdleDurationInHour(self, IdleDurationInHour):
        self._IdleDurationInHour = IdleDurationInHour


    def _deserialize(self, params):
        self._Operator = params.get("Operator")
        if params.get("IndexConditions") is not None:
            self._IndexConditions = []
            for item in params.get("IndexConditions"):
                obj = IndexCondition()
                obj._deserialize(item)
                self._IndexConditions.append(obj)
        self._IdleDurationInHour = params.get("IdleDurationInHour")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RecyclePolicyDetail(AbstractModel):
    """Notebook回收策略详情

    """

    def __init__(self):
        r"""
        :param _Id: 唯一标识符
        :type Id: str
        :param _RecycleConfig: 回收策略
        :type RecycleConfig: :class:`tencentcloud.tione.v20211111.models.RecycleConfig`
        :param _ExcludeConfig: 排除策略
        :type ExcludeConfig: :class:`tencentcloud.tione.v20211111.models.ExcludeConfig`
        :param _CreatedTime: 创建时间
        :type CreatedTime: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        """
        self._Id = None
        self._RecycleConfig = None
        self._ExcludeConfig = None
        self._CreatedTime = None
        self._UpdateTime = None

    @property
    def Id(self):
        """唯一标识符
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def RecycleConfig(self):
        """回收策略
        :rtype: :class:`tencentcloud.tione.v20211111.models.RecycleConfig`
        """
        return self._RecycleConfig

    @RecycleConfig.setter
    def RecycleConfig(self, RecycleConfig):
        self._RecycleConfig = RecycleConfig

    @property
    def ExcludeConfig(self):
        """排除策略
        :rtype: :class:`tencentcloud.tione.v20211111.models.ExcludeConfig`
        """
        return self._ExcludeConfig

    @ExcludeConfig.setter
    def ExcludeConfig(self, ExcludeConfig):
        self._ExcludeConfig = ExcludeConfig

    @property
    def CreatedTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreatedTime

    @CreatedTime.setter
    def CreatedTime(self, CreatedTime):
        self._CreatedTime = CreatedTime

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime


    def _deserialize(self, params):
        self._Id = params.get("Id")
        if params.get("RecycleConfig") is not None:
            self._RecycleConfig = RecycleConfig()
            self._RecycleConfig._deserialize(params.get("RecycleConfig"))
        if params.get("ExcludeConfig") is not None:
            self._ExcludeConfig = ExcludeConfig()
            self._ExcludeConfig._deserialize(params.get("ExcludeConfig"))
        self._CreatedTime = params.get("CreatedTime")
        self._UpdateTime = params.get("UpdateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RejectedInfo(AbstractModel):
    """CVM节点被拒绝纳管的原因

    """

    def __init__(self):
        r"""
        :param _Code: CVM节点被拒绝纳管的原因类型
        :type Code: str
        :param _Reason: CVM节点被拒绝纳管的具体原因信息
        :type Reason: str
        """
        self._Code = None
        self._Reason = None

    @property
    def Code(self):
        """CVM节点被拒绝纳管的原因类型
        :rtype: str
        """
        return self._Code

    @Code.setter
    def Code(self, Code):
        self._Code = Code

    @property
    def Reason(self):
        """CVM节点被拒绝纳管的具体原因信息
        :rtype: str
        """
        return self._Reason

    @Reason.setter
    def Reason(self, Reason):
        self._Reason = Reason


    def _deserialize(self, params):
        self._Code = params.get("Code")
        self._Reason = params.get("Reason")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ReleaseBillingPostpaidSWInstancesRequest(AbstractModel):
    """ReleaseBillingPostpaidSWInstances请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组ID
        :type ResourceGroupId: str
        :param _InstanceIds: 纳管节点列表
        :type InstanceIds: list of str
        """
        self._ResourceGroupId = None
        self._InstanceIds = None

    @property
    def ResourceGroupId(self):
        """资源组ID
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def InstanceIds(self):
        """纳管节点列表
        :rtype: list of str
        """
        return self._InstanceIds

    @InstanceIds.setter
    def InstanceIds(self, InstanceIds):
        self._InstanceIds = InstanceIds


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._InstanceIds = params.get("InstanceIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ReleaseBillingPostpaidSWInstancesResponse(AbstractModel):
    """ReleaseBillingPostpaidSWInstances返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class RenewMountedStorageRequest(AbstractModel):
    """RenewMountedStorage请求参数结构体

    """


class RenewMountedStorageResponse(AbstractModel):
    """RenewMountedStorage返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class RenewTencentLabWhitelistRequest(AbstractModel):
    """RenewTencentLabWhitelist请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ClassUin: 需要增加白名单的主uin
        :type ClassUin: str
        :param _ClassSubUin: 需要增加白名单的subUin
        :type ClassSubUin: str
        :param _ResourceId: Tione 平台维护的资源 ID，对应腾学会的课程 ID
        :type ResourceId: str
        :param _ExtendDurationSecond: 续期时长，从过期时间向后续期 ExtendDurationSecond
        :type ExtendDurationSecond: int
        """
        self._ClassUin = None
        self._ClassSubUin = None
        self._ResourceId = None
        self._ExtendDurationSecond = None

    @property
    def ClassUin(self):
        """需要增加白名单的主uin
        :rtype: str
        """
        return self._ClassUin

    @ClassUin.setter
    def ClassUin(self, ClassUin):
        self._ClassUin = ClassUin

    @property
    def ClassSubUin(self):
        """需要增加白名单的subUin
        :rtype: str
        """
        return self._ClassSubUin

    @ClassSubUin.setter
    def ClassSubUin(self, ClassSubUin):
        self._ClassSubUin = ClassSubUin

    @property
    def ResourceId(self):
        """Tione 平台维护的资源 ID，对应腾学会的课程 ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def ExtendDurationSecond(self):
        """续期时长，从过期时间向后续期 ExtendDurationSecond
        :rtype: int
        """
        return self._ExtendDurationSecond

    @ExtendDurationSecond.setter
    def ExtendDurationSecond(self, ExtendDurationSecond):
        self._ExtendDurationSecond = ExtendDurationSecond


    def _deserialize(self, params):
        self._ClassUin = params.get("ClassUin")
        self._ClassSubUin = params.get("ClassSubUin")
        self._ResourceId = params.get("ResourceId")
        self._ExtendDurationSecond = params.get("ExtendDurationSecond")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RenewTencentLabWhitelistResponse(AbstractModel):
    """RenewTencentLabWhitelist返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class RenewTencentLabWhitelistTestRequest(AbstractModel):
    """RenewTencentLabWhitelistTest请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ClassUin: 需要增加白名单的主uin
        :type ClassUin: str
        :param _ClassSubUin: 需要增加白名单的subUin
        :type ClassSubUin: str
        :param _ResourceId: Tione 平台维护的资源 ID，对应腾学会的课程 ID
        :type ResourceId: str
        :param _ExtendDurationSecond: 续期时长，从过期时间向后续期 ExtendDurationSecond
        :type ExtendDurationSecond: int
        """
        self._ClassUin = None
        self._ClassSubUin = None
        self._ResourceId = None
        self._ExtendDurationSecond = None

    @property
    def ClassUin(self):
        """需要增加白名单的主uin
        :rtype: str
        """
        return self._ClassUin

    @ClassUin.setter
    def ClassUin(self, ClassUin):
        self._ClassUin = ClassUin

    @property
    def ClassSubUin(self):
        """需要增加白名单的subUin
        :rtype: str
        """
        return self._ClassSubUin

    @ClassSubUin.setter
    def ClassSubUin(self, ClassSubUin):
        self._ClassSubUin = ClassSubUin

    @property
    def ResourceId(self):
        """Tione 平台维护的资源 ID，对应腾学会的课程 ID
        :rtype: str
        """
        return self._ResourceId

    @ResourceId.setter
    def ResourceId(self, ResourceId):
        self._ResourceId = ResourceId

    @property
    def ExtendDurationSecond(self):
        """续期时长，从过期时间向后续期 ExtendDurationSecond
        :rtype: int
        """
        return self._ExtendDurationSecond

    @ExtendDurationSecond.setter
    def ExtendDurationSecond(self, ExtendDurationSecond):
        self._ExtendDurationSecond = ExtendDurationSecond


    def _deserialize(self, params):
        self._ClassUin = params.get("ClassUin")
        self._ClassSubUin = params.get("ClassSubUin")
        self._ResourceId = params.get("ResourceId")
        self._ExtendDurationSecond = params.get("ExtendDurationSecond")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RenewTencentLabWhitelistTestResponse(AbstractModel):
    """RenewTencentLabWhitelistTest返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ReportCheckpointListRequest(AbstractModel):
    """ReportCheckpointList请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TrainJobId: 训练任务实例 ID
        :type TrainJobId: str
        :param _PluginVersion: 插件版本
        :type PluginVersion: str
        :param _CheckpointInfos: 插件输出的 Checkpoint 列表
        :type CheckpointInfos: list of CheckpointInfo
        :param _ExecuteError: 插件运行的错误信息
        :type ExecuteError: :class:`tencentcloud.tione.v20211111.models.ExecuteError`
        """
        self._TrainJobId = None
        self._PluginVersion = None
        self._CheckpointInfos = None
        self._ExecuteError = None

    @property
    def TrainJobId(self):
        """训练任务实例 ID
        :rtype: str
        """
        return self._TrainJobId

    @TrainJobId.setter
    def TrainJobId(self, TrainJobId):
        self._TrainJobId = TrainJobId

    @property
    def PluginVersion(self):
        """插件版本
        :rtype: str
        """
        return self._PluginVersion

    @PluginVersion.setter
    def PluginVersion(self, PluginVersion):
        self._PluginVersion = PluginVersion

    @property
    def CheckpointInfos(self):
        """插件输出的 Checkpoint 列表
        :rtype: list of CheckpointInfo
        """
        return self._CheckpointInfos

    @CheckpointInfos.setter
    def CheckpointInfos(self, CheckpointInfos):
        self._CheckpointInfos = CheckpointInfos

    @property
    def ExecuteError(self):
        """插件运行的错误信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ExecuteError`
        """
        return self._ExecuteError

    @ExecuteError.setter
    def ExecuteError(self, ExecuteError):
        self._ExecuteError = ExecuteError


    def _deserialize(self, params):
        self._TrainJobId = params.get("TrainJobId")
        self._PluginVersion = params.get("PluginVersion")
        if params.get("CheckpointInfos") is not None:
            self._CheckpointInfos = []
            for item in params.get("CheckpointInfos"):
                obj = CheckpointInfo()
                obj._deserialize(item)
                self._CheckpointInfos.append(obj)
        if params.get("ExecuteError") is not None:
            self._ExecuteError = ExecuteError()
            self._ExecuteError._deserialize(params.get("ExecuteError"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ReportCheckpointListResponse(AbstractModel):
    """ReportCheckpointList返回参数结构体

    """

    def __init__(self):
        r"""
        :param _CheckpointInfos: 补充信息后 Checkpoint 列表，与输入的 CheckpointInfos 一一对应
        :type CheckpointInfos: list of CheckpointInfo
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._CheckpointInfos = None
        self._RequestId = None

    @property
    def CheckpointInfos(self):
        """补充信息后 Checkpoint 列表，与输入的 CheckpointInfos 一一对应
        :rtype: list of CheckpointInfo
        """
        return self._CheckpointInfos

    @CheckpointInfos.setter
    def CheckpointInfos(self, CheckpointInfos):
        self._CheckpointInfos = CheckpointInfos

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("CheckpointInfos") is not None:
            self._CheckpointInfos = []
            for item in params.get("CheckpointInfos"):
                obj = CheckpointInfo()
                obj._deserialize(item)
                self._CheckpointInfos.append(obj)
        self._RequestId = params.get("RequestId")


class ReportJobRequest(AbstractModel):
    """ReportJob请求参数结构体

    """

    def __init__(self):
        r"""
        :param _JobId: 任务Id
        :type JobId: str
        :param _JobStatus: 任务状态。
        :type JobStatus: int
        :param _JobOutput: 任务输出
        :type JobOutput: :class:`tencentcloud.tione.v20211111.models.JobOutput`
        :param _Progress: 进度
        :type Progress: float
        :param _EstimateRemainTime: 预计剩余时间，单位秒
        :type EstimateRemainTime: int
        :param _WorkerToken: 拉取者Token
        :type WorkerToken: str
        :param _LatestModifiedTime: 仅当SubmitSchemaJob时有效。标记了cfs上jsonl文件最后的修改时间。
        :type LatestModifiedTime: int
        :param _JobRunningInfo: 任务运行信息
        :type JobRunningInfo: str
        """
        self._JobId = None
        self._JobStatus = None
        self._JobOutput = None
        self._Progress = None
        self._EstimateRemainTime = None
        self._WorkerToken = None
        self._LatestModifiedTime = None
        self._JobRunningInfo = None

    @property
    def JobId(self):
        """任务Id
        :rtype: str
        """
        return self._JobId

    @JobId.setter
    def JobId(self, JobId):
        self._JobId = JobId

    @property
    def JobStatus(self):
        """任务状态。
        :rtype: int
        """
        return self._JobStatus

    @JobStatus.setter
    def JobStatus(self, JobStatus):
        self._JobStatus = JobStatus

    @property
    def JobOutput(self):
        """任务输出
        :rtype: :class:`tencentcloud.tione.v20211111.models.JobOutput`
        """
        return self._JobOutput

    @JobOutput.setter
    def JobOutput(self, JobOutput):
        self._JobOutput = JobOutput

    @property
    def Progress(self):
        """进度
        :rtype: float
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def EstimateRemainTime(self):
        """预计剩余时间，单位秒
        :rtype: int
        """
        return self._EstimateRemainTime

    @EstimateRemainTime.setter
    def EstimateRemainTime(self, EstimateRemainTime):
        self._EstimateRemainTime = EstimateRemainTime

    @property
    def WorkerToken(self):
        """拉取者Token
        :rtype: str
        """
        return self._WorkerToken

    @WorkerToken.setter
    def WorkerToken(self, WorkerToken):
        self._WorkerToken = WorkerToken

    @property
    def LatestModifiedTime(self):
        """仅当SubmitSchemaJob时有效。标记了cfs上jsonl文件最后的修改时间。
        :rtype: int
        """
        return self._LatestModifiedTime

    @LatestModifiedTime.setter
    def LatestModifiedTime(self, LatestModifiedTime):
        self._LatestModifiedTime = LatestModifiedTime

    @property
    def JobRunningInfo(self):
        """任务运行信息
        :rtype: str
        """
        return self._JobRunningInfo

    @JobRunningInfo.setter
    def JobRunningInfo(self, JobRunningInfo):
        self._JobRunningInfo = JobRunningInfo


    def _deserialize(self, params):
        self._JobId = params.get("JobId")
        self._JobStatus = params.get("JobStatus")
        if params.get("JobOutput") is not None:
            self._JobOutput = JobOutput()
            self._JobOutput._deserialize(params.get("JobOutput"))
        self._Progress = params.get("Progress")
        self._EstimateRemainTime = params.get("EstimateRemainTime")
        self._WorkerToken = params.get("WorkerToken")
        self._LatestModifiedTime = params.get("LatestModifiedTime")
        self._JobRunningInfo = params.get("JobRunningInfo")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ReportJobResponse(AbstractModel):
    """ReportJob返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ReportWorkerRequest(AbstractModel):
    """ReportWorker请求参数结构体

    """

    def __init__(self):
        r"""
        :param _WorkerToken: 当前POD标识
        :type WorkerToken: str
        :param _JobIdList: 当前POD正在处理的JobID列表
        :type JobIdList: list of str
        """
        self._WorkerToken = None
        self._JobIdList = None

    @property
    def WorkerToken(self):
        """当前POD标识
        :rtype: str
        """
        return self._WorkerToken

    @WorkerToken.setter
    def WorkerToken(self, WorkerToken):
        self._WorkerToken = WorkerToken

    @property
    def JobIdList(self):
        """当前POD正在处理的JobID列表
        :rtype: list of str
        """
        return self._JobIdList

    @JobIdList.setter
    def JobIdList(self, JobIdList):
        self._JobIdList = JobIdList


    def _deserialize(self, params):
        self._WorkerToken = params.get("WorkerToken")
        self._JobIdList = params.get("JobIdList")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ReportWorkerResponse(AbstractModel):
    """ReportWorker返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ResourceConf(AbstractModel):
    """Notebook资源参数

    """

    def __init__(self):
        r"""
        :param _Cpu: cpu 处理器资源, 单位为1/1000核 (for预付费)
注意：此字段可能返回 null，表示取不到有效值。
        :type Cpu: int
        :param _Memory: memory 内存资源, 单位为1M (for预付费)
注意：此字段可能返回 null，表示取不到有效值。
        :type Memory: int
        :param _Gpu: gpu Gpu卡资源，单位为1/100卡，例如GpuType=T4时，1 Gpu = 1/100 T4卡 (for预付费)
注意：此字段可能返回 null，表示取不到有效值。
        :type Gpu: int
        :param _GpuType: GpuType 卡类型，参考资源组上对应的卡类型。eg: H800,A800,A100,T4,P4,V100等 (for预付费)
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuType: str
        :param _InstanceType: 计算规格 (for后付费)，可选值如下：
TI.S.LARGE.POST: 4C8G 
TI.S.2XLARGE16.POST:  8C16G 
TI.S.2XLARGE32.POST:  8C32G 
TI.S.4XLARGE32.POST:  16C32G
TI.S.4XLARGE64.POST:  16C64G
TI.S.6XLARGE48.POST:  24C48G
TI.S.6XLARGE96.POST:  24C96G
TI.S.8XLARGE64.POST:  32C64G
TI.S.8XLARGE128.POST : 32C128G
TI.GN10.2XLARGE40.POST: 8C40G V100*1 
TI.GN10.5XLARGE80.POST:  18C80G V100*2 
TI.GN10.10XLARGE160.POST :  32C160G V100*4
TI.GN10.20XLARGE320.POST :  72C320G V100*8
TI.GN7.8XLARGE128.POST: 32C128G T4*1 
TI.GN7.10XLARGE160.POST: 40C160G T4*2 
TI.GN7.20XLARGE320.POST: 80C320G T4*4
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceType: str
        :param _SpecTempId: 规格模版id
        :type SpecTempId: str
        """
        self._Cpu = None
        self._Memory = None
        self._Gpu = None
        self._GpuType = None
        self._InstanceType = None
        self._SpecTempId = None

    @property
    def Cpu(self):
        """cpu 处理器资源, 单位为1/1000核 (for预付费)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Cpu

    @Cpu.setter
    def Cpu(self, Cpu):
        self._Cpu = Cpu

    @property
    def Memory(self):
        """memory 内存资源, 单位为1M (for预付费)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Memory

    @Memory.setter
    def Memory(self, Memory):
        self._Memory = Memory

    @property
    def Gpu(self):
        """gpu Gpu卡资源，单位为1/100卡，例如GpuType=T4时，1 Gpu = 1/100 T4卡 (for预付费)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Gpu

    @Gpu.setter
    def Gpu(self, Gpu):
        self._Gpu = Gpu

    @property
    def GpuType(self):
        """GpuType 卡类型，参考资源组上对应的卡类型。eg: H800,A800,A100,T4,P4,V100等 (for预付费)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType

    @property
    def InstanceType(self):
        """计算规格 (for后付费)，可选值如下：
TI.S.LARGE.POST: 4C8G 
TI.S.2XLARGE16.POST:  8C16G 
TI.S.2XLARGE32.POST:  8C32G 
TI.S.4XLARGE32.POST:  16C32G
TI.S.4XLARGE64.POST:  16C64G
TI.S.6XLARGE48.POST:  24C48G
TI.S.6XLARGE96.POST:  24C96G
TI.S.8XLARGE64.POST:  32C64G
TI.S.8XLARGE128.POST : 32C128G
TI.GN10.2XLARGE40.POST: 8C40G V100*1 
TI.GN10.5XLARGE80.POST:  18C80G V100*2 
TI.GN10.10XLARGE160.POST :  32C160G V100*4
TI.GN10.20XLARGE320.POST :  72C320G V100*8
TI.GN7.8XLARGE128.POST: 32C128G T4*1 
TI.GN7.10XLARGE160.POST: 40C160G T4*2 
TI.GN7.20XLARGE320.POST: 80C320G T4*4
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def SpecTempId(self):
        """规格模版id
        :rtype: str
        """
        return self._SpecTempId

    @SpecTempId.setter
    def SpecTempId(self, SpecTempId):
        self._SpecTempId = SpecTempId


    def _deserialize(self, params):
        self._Cpu = params.get("Cpu")
        self._Memory = params.get("Memory")
        self._Gpu = params.get("Gpu")
        self._GpuType = params.get("GpuType")
        self._InstanceType = params.get("InstanceType")
        self._SpecTempId = params.get("SpecTempId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)



class ResourceConfigInfo(AbstractModel):
    """资源配置

    """

    def __init__(self):
        r"""
        :param _Role: 角色，eg：PS、WORKER、DRIVER、EXECUTOR
        :type Role: str
        :param _Cpu: cpu核数，使用资源组时需配置。单位：1/1000，即1000=1核
        :type Cpu: int
        :param _Memory: 内存，使用资源组时需配置。单位为MB
        :type Memory: int
        :param _GpuType: gpu卡类型，使用资源组时需配置
        :type GpuType: str
        :param _Gpu: gpu卡数，使用资源组时需配置。单位：1/100，即100=1卡
        :type Gpu: int
        :param _InstanceType: 算力规格ID
计算规格 (for后付费)，可选值如下：
TI.S.LARGE.POST: 4C8G 
TI.S.2XLARGE16.POST:  8C16G 
TI.S.2XLARGE32.POST:  8C32G 
TI.S.4XLARGE32.POST:  16C32G
TI.S.4XLARGE64.POST:  16C64G
TI.S.6XLARGE48.POST:  24C48G
TI.S.6XLARGE96.POST:  24C96G
TI.S.8XLARGE64.POST:  32C64G
TI.S.8XLARGE128.POST : 32C128G
TI.GN10.2XLARGE40.POST: 8C40G V100*1 
TI.GN10.5XLARGE80.POST:  18C80G V100*2 
TI.GN10.10XLARGE160.POST :  32C160G V100*4
TI.GN10.20XLARGE320.POST :  72C320G V100*8
TI.GN7.8XLARGE128.POST: 32C128G T4*1 
TI.GN7.10XLARGE160.POST: 40C160G T4*2 
TI.GN7.20XLARGE320.POST: 80C32
        :type InstanceType: str
        :param _InstanceNum: 计算节点数
        :type InstanceNum: int
        :param _InstanceTypeAlias: 算力规格名称
计算规格 (for后付费)，可选值如下：
4C8G 
8C16G 
8C32G 
16C32G
6C64G
24C48G
24C96G
32C64G
32C128G
8C40G V100*1 
8C80G V100*2 
32C160G V100*4
72C320G V100*8
32C128G T4*1 
40C160G T4*2 
80C32
        :type InstanceTypeAlias: str
        :param _RDMAConfig: RDMA配置
注意：此字段可能返回 null，表示取不到有效值。
        :type RDMAConfig: :class:`tencentcloud.tione.v20211111.models.RDMAConfig`
        :param _ArchType: 架构类型
注意：此字段可能返回 null，表示取不到有效值。
        :type ArchType: str
        :param _ExtendedResourceList: 扩展资源
注意：此字段可能返回 null，表示取不到有效值。
        :type ExtendedResourceList: :class:`tencentcloud.tione.v20211111.models.ExtendedResourceList`
        :param _SpecTempId: 规格模版id
        :type SpecTempId: str
        """
        self._Role = None
        self._Cpu = None
        self._Memory = None
        self._GpuType = None
        self._Gpu = None
        self._InstanceType = None
        self._InstanceNum = None
        self._InstanceTypeAlias = None
        self._RDMAConfig = None
        self._ArchType = None
        self._ExtendedResourceList = None
        self._SpecTempId = None

    @property
    def Role(self):
        """角色，eg：PS、WORKER、DRIVER、EXECUTOR
        :rtype: str
        """
        return self._Role

    @Role.setter
    def Role(self, Role):
        self._Role = Role

    @property
    def Cpu(self):
        """cpu核数，使用资源组时需配置。单位：1/1000，即1000=1核
        :rtype: int
        """
        return self._Cpu

    @Cpu.setter
    def Cpu(self, Cpu):
        self._Cpu = Cpu

    @property
    def Memory(self):
        """内存，使用资源组时需配置。单位为MB
        :rtype: int
        """
        return self._Memory

    @Memory.setter
    def Memory(self, Memory):
        self._Memory = Memory

    @property
    def GpuType(self):
        """gpu卡类型，使用资源组时需配置
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType

    @property
    def Gpu(self):
        """gpu卡数，使用资源组时需配置。单位：1/100，即100=1卡
        :rtype: int
        """
        return self._Gpu

    @Gpu.setter
    def Gpu(self, Gpu):
        self._Gpu = Gpu

    @property
    def InstanceType(self):
        """算力规格ID
计算规格 (for后付费)，可选值如下：
TI.S.LARGE.POST: 4C8G 
TI.S.2XLARGE16.POST:  8C16G 
TI.S.2XLARGE32.POST:  8C32G 
TI.S.4XLARGE32.POST:  16C32G
TI.S.4XLARGE64.POST:  16C64G
TI.S.6XLARGE48.POST:  24C48G
TI.S.6XLARGE96.POST:  24C96G
TI.S.8XLARGE64.POST:  32C64G
TI.S.8XLARGE128.POST : 32C128G
TI.GN10.2XLARGE40.POST: 8C40G V100*1 
TI.GN10.5XLARGE80.POST:  18C80G V100*2 
TI.GN10.10XLARGE160.POST :  32C160G V100*4
TI.GN10.20XLARGE320.POST :  72C320G V100*8
TI.GN7.8XLARGE128.POST: 32C128G T4*1 
TI.GN7.10XLARGE160.POST: 40C160G T4*2 
TI.GN7.20XLARGE320.POST: 80C32
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def InstanceNum(self):
        """计算节点数
        :rtype: int
        """
        return self._InstanceNum

    @InstanceNum.setter
    def InstanceNum(self, InstanceNum):
        self._InstanceNum = InstanceNum

    @property
    def InstanceTypeAlias(self):
        """算力规格名称
计算规格 (for后付费)，可选值如下：
4C8G 
8C16G 
8C32G 
16C32G
6C64G
24C48G
24C96G
32C64G
32C128G
8C40G V100*1 
8C80G V100*2 
32C160G V100*4
72C320G V100*8
32C128G T4*1 
40C160G T4*2 
80C32
        :rtype: str
        """
        return self._InstanceTypeAlias

    @InstanceTypeAlias.setter
    def InstanceTypeAlias(self, InstanceTypeAlias):
        self._InstanceTypeAlias = InstanceTypeAlias

    @property
    def RDMAConfig(self):
        """RDMA配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.RDMAConfig`
        """
        return self._RDMAConfig

    @RDMAConfig.setter
    def RDMAConfig(self, RDMAConfig):
        self._RDMAConfig = RDMAConfig

    @property
    def ArchType(self):
        """架构类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ArchType

    @ArchType.setter
    def ArchType(self, ArchType):
        self._ArchType = ArchType

    @property
    def ExtendedResourceList(self):
        """扩展资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ExtendedResourceList`
        """
        return self._ExtendedResourceList

    @ExtendedResourceList.setter
    def ExtendedResourceList(self, ExtendedResourceList):
        self._ExtendedResourceList = ExtendedResourceList

    @property
    def SpecTempId(self):
        """规格模版id
        :rtype: str
        """
        return self._SpecTempId

    @SpecTempId.setter
    def SpecTempId(self, SpecTempId):
        self._SpecTempId = SpecTempId


    def _deserialize(self, params):
        self._Role = params.get("Role")
        self._Cpu = params.get("Cpu")
        self._Memory = params.get("Memory")
        self._GpuType = params.get("GpuType")
        self._Gpu = params.get("Gpu")
        self._InstanceType = params.get("InstanceType")
        self._InstanceNum = params.get("InstanceNum")
        self._InstanceTypeAlias = params.get("InstanceTypeAlias")
        if params.get("RDMAConfig") is not None:
            self._RDMAConfig = RDMAConfig()
            self._RDMAConfig._deserialize(params.get("RDMAConfig"))
        self._ArchType = params.get("ArchType")
        if params.get("ExtendedResourceList") is not None:
            self._ExtendedResourceList = ExtendedResourceList()
            self._ExtendedResourceList._deserialize(params.get("ExtendedResourceList"))
        self._SpecTempId = params.get("SpecTempId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)



class ResourceGroup(AbstractModel):
    """资源组

    """

    def __init__(self):
        r"""
        :param _ResourceGroupId: 资源组id
        :type ResourceGroupId: str
        :param _ResourceGroupName: 资源组名称
        :type ResourceGroupName: str
        :param _FreeInstance: 可用节点个数(运行中的节点)
        :type FreeInstance: int
        :param _TotalInstance: 总节点个数(所有节点)
        :type TotalInstance: int
        :param _UsedResource: 资资源组已用的资源
注意：此字段可能返回 null，表示取不到有效值。
        :type UsedResource: :class:`tencentcloud.tione.v20211111.models.GroupResource`
        :param _TotalResource: 资源组总资源
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalResource: :class:`tencentcloud.tione.v20211111.models.GroupResource`
        :param _InstanceSet: 节点信息
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceSet: list of Instance
        :param _TagSet: 标签列表
注意：此字段可能返回 null，表示取不到有效值。
        :type TagSet: list of Tag
        :param _IsBareMetalResourceGroup: 是否为裸金属资源组
注意：此字段可能返回 null，表示取不到有效值。
        :type IsBareMetalResourceGroup: bool
        :param _IsRdma: 是否为rdma资源组
注意：此字段可能返回 null，表示取不到有效值。
        :type IsRdma: bool
        :param _ResourceGroupSWType: 资源组类型
        :type ResourceGroupSWType: str
        :param _ScheduleStrategy: 资源组调度策略
注意：此字段可能返回 null，表示取不到有效值。
        :type ScheduleStrategy: str
        :param _GpuTypeResource: 按GPU卡型号聚合的GPU用量等信息
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuTypeResource: list of GpuTypeResource
        :param _AvailableResource: 资源组可用资源
注意：此字段可能返回 null，表示取不到有效值。
        :type AvailableResource: :class:`tencentcloud.tione.v20211111.models.GroupResource`
        :param _VirtualGpuSet: 资源组支持VirtualGpu的信息
注意：此字段可能返回 null，表示取不到有效值。
        :type VirtualGpuSet: list of VirtualGpu
        :param _AppId: AppId
注意：此字段可能返回 null，表示取不到有效值。
        :type AppId: int
        :param _HasSchedulableNode: 是否有可调度任务的节点
        :type HasSchedulableNode: bool
        :param _HasRunnableNode: 是否有可运行任务的节点
        :type HasRunnableNode: bool
        :param _EnableModels: 更多配置开启模块
注意：此字段可能返回 null，表示取不到有效值。
        :type EnableModels: list of str
        :param _SpecTemps: 规格模版
注意：此字段可能返回 null，表示取不到有效值。
        :type SpecTemps: list of SpecTemp
        :param _PresetResourceSwitch: 预设资源开关，枚举值：CLOSE,GPU,TEMPLATE
注意：此字段可能返回 null，表示取不到有效值。
        :type PresetResourceSwitch: str
        :param _IsCanModifyPreset: 是否可修改预设资源
注意：此字段可能返回 null，表示取不到有效值。
        :type IsCanModifyPreset: bool
        """
        self._ResourceGroupId = None
        self._ResourceGroupName = None
        self._FreeInstance = None
        self._TotalInstance = None
        self._UsedResource = None
        self._TotalResource = None
        self._InstanceSet = None
        self._TagSet = None
        self._IsBareMetalResourceGroup = None
        self._IsRdma = None
        self._ResourceGroupSWType = None
        self._ScheduleStrategy = None
        self._GpuTypeResource = None
        self._AvailableResource = None
        self._VirtualGpuSet = None
        self._AppId = None
        self._HasSchedulableNode = None
        self._HasRunnableNode = None
        self._EnableModels = None
        self._SpecTemps = None
        self._PresetResourceSwitch = None
        self._IsCanModifyPreset = None

    @property
    def ResourceGroupId(self):
        """资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceGroupName(self):
        """资源组名称
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def FreeInstance(self):
        """可用节点个数(运行中的节点)
        :rtype: int
        """
        return self._FreeInstance

    @FreeInstance.setter
    def FreeInstance(self, FreeInstance):
        self._FreeInstance = FreeInstance

    @property
    def TotalInstance(self):
        """总节点个数(所有节点)
        :rtype: int
        """
        return self._TotalInstance

    @TotalInstance.setter
    def TotalInstance(self, TotalInstance):
        self._TotalInstance = TotalInstance

    @property
    def UsedResource(self):
        """资资源组已用的资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.GroupResource`
        """
        return self._UsedResource

    @UsedResource.setter
    def UsedResource(self, UsedResource):
        self._UsedResource = UsedResource

    @property
    def TotalResource(self):
        """资源组总资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.GroupResource`
        """
        return self._TotalResource

    @TotalResource.setter
    def TotalResource(self, TotalResource):
        self._TotalResource = TotalResource

    @property
    def InstanceSet(self):
        """节点信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Instance
        """
        return self._InstanceSet

    @InstanceSet.setter
    def InstanceSet(self, InstanceSet):
        self._InstanceSet = InstanceSet

    @property
    def TagSet(self):
        """标签列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._TagSet

    @TagSet.setter
    def TagSet(self, TagSet):
        self._TagSet = TagSet

    @property
    def IsBareMetalResourceGroup(self):
        """是否为裸金属资源组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsBareMetalResourceGroup

    @IsBareMetalResourceGroup.setter
    def IsBareMetalResourceGroup(self, IsBareMetalResourceGroup):
        self._IsBareMetalResourceGroup = IsBareMetalResourceGroup

    @property
    def IsRdma(self):
        """是否为rdma资源组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsRdma

    @IsRdma.setter
    def IsRdma(self, IsRdma):
        self._IsRdma = IsRdma

    @property
    def ResourceGroupSWType(self):
        """资源组类型
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType

    @property
    def ScheduleStrategy(self):
        """资源组调度策略
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ScheduleStrategy

    @ScheduleStrategy.setter
    def ScheduleStrategy(self, ScheduleStrategy):
        self._ScheduleStrategy = ScheduleStrategy

    @property
    def GpuTypeResource(self):
        """按GPU卡型号聚合的GPU用量等信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of GpuTypeResource
        """
        return self._GpuTypeResource

    @GpuTypeResource.setter
    def GpuTypeResource(self, GpuTypeResource):
        self._GpuTypeResource = GpuTypeResource

    @property
    def AvailableResource(self):
        """资源组可用资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.GroupResource`
        """
        return self._AvailableResource

    @AvailableResource.setter
    def AvailableResource(self, AvailableResource):
        self._AvailableResource = AvailableResource

    @property
    def VirtualGpuSet(self):
        """资源组支持VirtualGpu的信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of VirtualGpu
        """
        return self._VirtualGpuSet

    @VirtualGpuSet.setter
    def VirtualGpuSet(self, VirtualGpuSet):
        self._VirtualGpuSet = VirtualGpuSet

    @property
    def AppId(self):
        """AppId
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId

    @property
    def HasSchedulableNode(self):
        """是否有可调度任务的节点
        :rtype: bool
        """
        return self._HasSchedulableNode

    @HasSchedulableNode.setter
    def HasSchedulableNode(self, HasSchedulableNode):
        self._HasSchedulableNode = HasSchedulableNode

    @property
    def HasRunnableNode(self):
        """是否有可运行任务的节点
        :rtype: bool
        """
        return self._HasRunnableNode

    @HasRunnableNode.setter
    def HasRunnableNode(self, HasRunnableNode):
        self._HasRunnableNode = HasRunnableNode

    @property
    def EnableModels(self):
        """更多配置开启模块
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._EnableModels

    @EnableModels.setter
    def EnableModels(self, EnableModels):
        self._EnableModels = EnableModels

    @property
    def SpecTemps(self):
        """规格模版
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of SpecTemp
        """
        return self._SpecTemps

    @SpecTemps.setter
    def SpecTemps(self, SpecTemps):
        self._SpecTemps = SpecTemps

    @property
    def PresetResourceSwitch(self):
        """预设资源开关，枚举值：CLOSE,GPU,TEMPLATE
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PresetResourceSwitch

    @PresetResourceSwitch.setter
    def PresetResourceSwitch(self, PresetResourceSwitch):
        self._PresetResourceSwitch = PresetResourceSwitch

    @property
    def IsCanModifyPreset(self):
        """是否可修改预设资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsCanModifyPreset

    @IsCanModifyPreset.setter
    def IsCanModifyPreset(self, IsCanModifyPreset):
        self._IsCanModifyPreset = IsCanModifyPreset


    def _deserialize(self, params):
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._FreeInstance = params.get("FreeInstance")
        self._TotalInstance = params.get("TotalInstance")
        if params.get("UsedResource") is not None:
            self._UsedResource = GroupResource()
            self._UsedResource._deserialize(params.get("UsedResource"))
        if params.get("TotalResource") is not None:
            self._TotalResource = GroupResource()
            self._TotalResource._deserialize(params.get("TotalResource"))
        if params.get("InstanceSet") is not None:
            self._InstanceSet = []
            for item in params.get("InstanceSet"):
                obj = Instance()
                obj._deserialize(item)
                self._InstanceSet.append(obj)
        if params.get("TagSet") is not None:
            self._TagSet = []
            for item in params.get("TagSet"):
                obj = Tag()
                obj._deserialize(item)
                self._TagSet.append(obj)
        self._IsBareMetalResourceGroup = params.get("IsBareMetalResourceGroup")
        self._IsRdma = params.get("IsRdma")
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        self._ScheduleStrategy = params.get("ScheduleStrategy")
        if params.get("GpuTypeResource") is not None:
            self._GpuTypeResource = []
            for item in params.get("GpuTypeResource"):
                obj = GpuTypeResource()
                obj._deserialize(item)
                self._GpuTypeResource.append(obj)
        if params.get("AvailableResource") is not None:
            self._AvailableResource = GroupResource()
            self._AvailableResource._deserialize(params.get("AvailableResource"))
        if params.get("VirtualGpuSet") is not None:
            self._VirtualGpuSet = []
            for item in params.get("VirtualGpuSet"):
                obj = VirtualGpu()
                obj._deserialize(item)
                self._VirtualGpuSet.append(obj)
        self._AppId = params.get("AppId")
        self._HasSchedulableNode = params.get("HasSchedulableNode")
        self._HasRunnableNode = params.get("HasRunnableNode")
        self._EnableModels = params.get("EnableModels")
        if params.get("SpecTemps") is not None:
            self._SpecTemps = []
            for item in params.get("SpecTemps"):
                obj = SpecTemp()
                obj._deserialize(item)
                self._SpecTemps.append(obj)
        self._PresetResourceSwitch = params.get("PresetResourceSwitch")
        self._IsCanModifyPreset = params.get("IsCanModifyPreset")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ResourceGroupAnnotationInfo(AbstractModel):
    """配置任务资源组需要使用的annotation信息

    """

    def __init__(self):
        r"""
        :param _ResourceGroupTaskType: 资源组需要感知的任务类型
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupTaskType: str
        :param _ResourceGroupTaskId: 资源组需要感知的任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupTaskId: str
        :param _ResourceGroupTaskName: 资源组需要感知的任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupTaskName: str
        """
        self._ResourceGroupTaskType = None
        self._ResourceGroupTaskId = None
        self._ResourceGroupTaskName = None

    @property
    def ResourceGroupTaskType(self):
        """资源组需要感知的任务类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupTaskType

    @ResourceGroupTaskType.setter
    def ResourceGroupTaskType(self, ResourceGroupTaskType):
        self._ResourceGroupTaskType = ResourceGroupTaskType

    @property
    def ResourceGroupTaskId(self):
        """资源组需要感知的任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupTaskId

    @ResourceGroupTaskId.setter
    def ResourceGroupTaskId(self, ResourceGroupTaskId):
        self._ResourceGroupTaskId = ResourceGroupTaskId

    @property
    def ResourceGroupTaskName(self):
        """资源组需要感知的任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupTaskName

    @ResourceGroupTaskName.setter
    def ResourceGroupTaskName(self, ResourceGroupTaskName):
        self._ResourceGroupTaskName = ResourceGroupTaskName


    def _deserialize(self, params):
        self._ResourceGroupTaskType = params.get("ResourceGroupTaskType")
        self._ResourceGroupTaskId = params.get("ResourceGroupTaskId")
        self._ResourceGroupTaskName = params.get("ResourceGroupTaskName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ResourceGroupJobInfo(AbstractModel):
    """资源组运行/排队中的任务信息

    """

    def __init__(self):
        r"""
        :param _TaskType: 任务类型
        :type TaskType: str
        :param _TaskId: 任务 ID
        :type TaskId: str
        :param _TaskName: 任务名称
        :type TaskName: str
        :param _RunningSeconds: 占用资源的时长，单位秒
        :type RunningSeconds: int
        :param _TaskResourceInfos: 资源配置信息
        :type TaskResourceInfos: list of TaskResourceInfo
        :param _WaitingQueueIndex: 排队序号
        :type WaitingQueueIndex: int
        :param _StartScheduleTime: 任务开始排队时间
        :type StartScheduleTime: str
        :param _PendingSeconds: 排队时长
        :type PendingSeconds: int
        """
        self._TaskType = None
        self._TaskId = None
        self._TaskName = None
        self._RunningSeconds = None
        self._TaskResourceInfos = None
        self._WaitingQueueIndex = None
        self._StartScheduleTime = None
        self._PendingSeconds = None

    @property
    def TaskType(self):
        """任务类型
        :rtype: str
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def TaskId(self):
        """任务 ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """任务名称
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def RunningSeconds(self):
        """占用资源的时长，单位秒
        :rtype: int
        """
        return self._RunningSeconds

    @RunningSeconds.setter
    def RunningSeconds(self, RunningSeconds):
        self._RunningSeconds = RunningSeconds

    @property
    def TaskResourceInfos(self):
        """资源配置信息
        :rtype: list of TaskResourceInfo
        """
        return self._TaskResourceInfos

    @TaskResourceInfos.setter
    def TaskResourceInfos(self, TaskResourceInfos):
        self._TaskResourceInfos = TaskResourceInfos

    @property
    def WaitingQueueIndex(self):
        """排队序号
        :rtype: int
        """
        return self._WaitingQueueIndex

    @WaitingQueueIndex.setter
    def WaitingQueueIndex(self, WaitingQueueIndex):
        self._WaitingQueueIndex = WaitingQueueIndex

    @property
    def StartScheduleTime(self):
        """任务开始排队时间
        :rtype: str
        """
        return self._StartScheduleTime

    @StartScheduleTime.setter
    def StartScheduleTime(self, StartScheduleTime):
        self._StartScheduleTime = StartScheduleTime

    @property
    def PendingSeconds(self):
        """排队时长
        :rtype: int
        """
        return self._PendingSeconds

    @PendingSeconds.setter
    def PendingSeconds(self, PendingSeconds):
        self._PendingSeconds = PendingSeconds


    def _deserialize(self, params):
        self._TaskType = params.get("TaskType")
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        self._RunningSeconds = params.get("RunningSeconds")
        if params.get("TaskResourceInfos") is not None:
            self._TaskResourceInfos = []
            for item in params.get("TaskResourceInfos"):
                obj = TaskResourceInfo()
                obj._deserialize(item)
                self._TaskResourceInfos.append(obj)
        self._WaitingQueueIndex = params.get("WaitingQueueIndex")
        self._StartScheduleTime = params.get("StartScheduleTime")
        self._PendingSeconds = params.get("PendingSeconds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ResourceGroupRunningJobInfo(AbstractModel):
    """资源组运行中的任务信息

    """

    def __init__(self):
        r"""
        :param _TaskType: 任务类型
        :type TaskType: str
        :param _TaskId: 任务 ID
        :type TaskId: str
        :param _TaskName: 任务名称
        :type TaskName: str
        :param _RunningSeconds: 占用资源的时长，单位秒
        :type RunningSeconds: int
        :param _TaskResourceInfos: 资源配置信息
        :type TaskResourceInfos: list of TaskResourceInfo
        """
        self._TaskType = None
        self._TaskId = None
        self._TaskName = None
        self._RunningSeconds = None
        self._TaskResourceInfos = None

    @property
    def TaskType(self):
        """任务类型
        :rtype: str
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def TaskId(self):
        """任务 ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """任务名称
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def RunningSeconds(self):
        """占用资源的时长，单位秒
        :rtype: int
        """
        return self._RunningSeconds

    @RunningSeconds.setter
    def RunningSeconds(self, RunningSeconds):
        self._RunningSeconds = RunningSeconds

    @property
    def TaskResourceInfos(self):
        """资源配置信息
        :rtype: list of TaskResourceInfo
        """
        return self._TaskResourceInfos

    @TaskResourceInfos.setter
    def TaskResourceInfos(self, TaskResourceInfos):
        self._TaskResourceInfos = TaskResourceInfos


    def _deserialize(self, params):
        self._TaskType = params.get("TaskType")
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        self._RunningSeconds = params.get("RunningSeconds")
        if params.get("TaskResourceInfos") is not None:
            self._TaskResourceInfos = []
            for item in params.get("TaskResourceInfos"):
                obj = TaskResourceInfo()
                obj._deserialize(item)
                self._TaskResourceInfos.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ResourceInfo(AbstractModel):
    """描述资源信息

    """

    def __init__(self):
        r"""
        :param _Cpu: 处理器资源, 单位为1/1000核
注意：此字段可能返回 null，表示取不到有效值。
        :type Cpu: int
        :param _Memory: 内存资源, 单位为1M
注意：此字段可能返回 null，表示取不到有效值。
        :type Memory: int
        :param _Gpu: Gpu卡个数资源, 单位为0.01单位的GpuType.
Gpu=100表示使用了“一张”gpu卡, 但此处的“一张”卡有可能是虚拟化后的1/4卡, 也有可能是整张卡. 取决于实例的机型
例1 实例的机型带有1张虚拟gpu卡, 每张虚拟gpu卡对应1/4张实际T4卡, 则此时 GpuType=T4, Gpu=100, RealGpu=25.
例2 实例的机型带有4张gpu整卡, 每张卡对应1张实际T4卡, 则 此时 GpuType=T4, Gpu=400, RealGpu=400.
注意：此字段可能返回 null，表示取不到有效值。
        :type Gpu: int
        :param _GpuType: Gpu卡型号 T4或者V100。仅展示当前 GPU 卡型号，若存在多类型同时使用，则参考 RealGpuDetailSet 的值。
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuType: str
        :param _RealGpu: 创建或更新时无需填写，仅展示需要关注
后付费非整卡实例对应的实际的Gpu卡资源, 表示gpu资源对应实际的gpu卡个数.
RealGpu=100表示实际使用了一张gpu卡, 对应实际的实例机型, 有可能代表带有1/4卡的实例4个, 或者带有1/2卡的实例2个, 或者带有1卡的实力1个.
        :type RealGpu: int
        :param _RealGpuDetailSet: 创建或更新时无需填写，仅展示需要关注。详细的GPU使用信息。
        :type RealGpuDetailSet: list of GpuDetail
        :param _Volume: 磁盘信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Volume: :class:`tencentcloud.tione.v20211111.models.Volume`
        :param _EnableRDMA: 是否开启rdma
注意：此字段可能返回 null，表示取不到有效值。
        :type EnableRDMA: bool
        :param _IdleDisks: 当前节点下的空闲数据盘
注意：此字段可能返回 null，表示取不到有效值。
        :type IdleDisks: list of DiskInfo
        :param _GpuMemory: 显存；单位为1/100GB，比如100代表1GB
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuMemory: int
        """
        self._Cpu = None
        self._Memory = None
        self._Gpu = None
        self._GpuType = None
        self._RealGpu = None
        self._RealGpuDetailSet = None
        self._Volume = None
        self._EnableRDMA = None
        self._IdleDisks = None
        self._GpuMemory = None

    @property
    def Cpu(self):
        """处理器资源, 单位为1/1000核
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Cpu

    @Cpu.setter
    def Cpu(self, Cpu):
        self._Cpu = Cpu

    @property
    def Memory(self):
        """内存资源, 单位为1M
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Memory

    @Memory.setter
    def Memory(self, Memory):
        self._Memory = Memory

    @property
    def Gpu(self):
        """Gpu卡个数资源, 单位为0.01单位的GpuType.
Gpu=100表示使用了“一张”gpu卡, 但此处的“一张”卡有可能是虚拟化后的1/4卡, 也有可能是整张卡. 取决于实例的机型
例1 实例的机型带有1张虚拟gpu卡, 每张虚拟gpu卡对应1/4张实际T4卡, 则此时 GpuType=T4, Gpu=100, RealGpu=25.
例2 实例的机型带有4张gpu整卡, 每张卡对应1张实际T4卡, 则 此时 GpuType=T4, Gpu=400, RealGpu=400.
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Gpu

    @Gpu.setter
    def Gpu(self, Gpu):
        self._Gpu = Gpu

    @property
    def GpuType(self):
        """Gpu卡型号 T4或者V100。仅展示当前 GPU 卡型号，若存在多类型同时使用，则参考 RealGpuDetailSet 的值。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType

    @property
    def RealGpu(self):
        """创建或更新时无需填写，仅展示需要关注
后付费非整卡实例对应的实际的Gpu卡资源, 表示gpu资源对应实际的gpu卡个数.
RealGpu=100表示实际使用了一张gpu卡, 对应实际的实例机型, 有可能代表带有1/4卡的实例4个, 或者带有1/2卡的实例2个, 或者带有1卡的实力1个.
        :rtype: int
        """
        return self._RealGpu

    @RealGpu.setter
    def RealGpu(self, RealGpu):
        self._RealGpu = RealGpu

    @property
    def RealGpuDetailSet(self):
        """创建或更新时无需填写，仅展示需要关注。详细的GPU使用信息。
        :rtype: list of GpuDetail
        """
        return self._RealGpuDetailSet

    @RealGpuDetailSet.setter
    def RealGpuDetailSet(self, RealGpuDetailSet):
        self._RealGpuDetailSet = RealGpuDetailSet

    @property
    def Volume(self):
        """磁盘信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.Volume`
        """
        return self._Volume

    @Volume.setter
    def Volume(self, Volume):
        self._Volume = Volume

    @property
    def EnableRDMA(self):
        """是否开启rdma
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._EnableRDMA

    @EnableRDMA.setter
    def EnableRDMA(self, EnableRDMA):
        self._EnableRDMA = EnableRDMA

    @property
    def IdleDisks(self):
        """当前节点下的空闲数据盘
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DiskInfo
        """
        return self._IdleDisks

    @IdleDisks.setter
    def IdleDisks(self, IdleDisks):
        self._IdleDisks = IdleDisks

    @property
    def GpuMemory(self):
        """显存；单位为1/100GB，比如100代表1GB
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._GpuMemory

    @GpuMemory.setter
    def GpuMemory(self, GpuMemory):
        self._GpuMemory = GpuMemory


    def _deserialize(self, params):
        self._Cpu = params.get("Cpu")
        self._Memory = params.get("Memory")
        self._Gpu = params.get("Gpu")
        self._GpuType = params.get("GpuType")
        self._RealGpu = params.get("RealGpu")
        if params.get("RealGpuDetailSet") is not None:
            self._RealGpuDetailSet = []
            for item in params.get("RealGpuDetailSet"):
                obj = GpuDetail()
                obj._deserialize(item)
                self._RealGpuDetailSet.append(obj)
        if params.get("Volume") is not None:
            self._Volume = Volume()
            self._Volume._deserialize(params.get("Volume"))
        self._EnableRDMA = params.get("EnableRDMA")
        if params.get("IdleDisks") is not None:
            self._IdleDisks = []
            for item in params.get("IdleDisks"):
                obj = DiskInfo()
                obj._deserialize(item)
                self._IdleDisks.append(obj)
        self._GpuMemory = params.get("GpuMemory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ResourceInstanceIdWithRunningJobInfos(AbstractModel):
    """节点运行中任务信息

    """

    def __init__(self):
        r"""
        :param _ResourceInstanceId: 资源组节点id
        :type ResourceInstanceId: str
        :param _ResourceInstanceRunningJobInfos: 节点运行中的任务列表
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceInstanceRunningJobInfos: list of ResourceInstanceRunningJobInfo
        """
        self._ResourceInstanceId = None
        self._ResourceInstanceRunningJobInfos = None

    @property
    def ResourceInstanceId(self):
        """资源组节点id
        :rtype: str
        """
        return self._ResourceInstanceId

    @ResourceInstanceId.setter
    def ResourceInstanceId(self, ResourceInstanceId):
        self._ResourceInstanceId = ResourceInstanceId

    @property
    def ResourceInstanceRunningJobInfos(self):
        """节点运行中的任务列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ResourceInstanceRunningJobInfo
        """
        return self._ResourceInstanceRunningJobInfos

    @ResourceInstanceRunningJobInfos.setter
    def ResourceInstanceRunningJobInfos(self, ResourceInstanceRunningJobInfos):
        self._ResourceInstanceRunningJobInfos = ResourceInstanceRunningJobInfos


    def _deserialize(self, params):
        self._ResourceInstanceId = params.get("ResourceInstanceId")
        if params.get("ResourceInstanceRunningJobInfos") is not None:
            self._ResourceInstanceRunningJobInfos = []
            for item in params.get("ResourceInstanceRunningJobInfos"):
                obj = ResourceInstanceRunningJobInfo()
                obj._deserialize(item)
                self._ResourceInstanceRunningJobInfos.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ResourceInstanceRunningJobInfo(AbstractModel):
    """资源组节点运行任务信息

    """

    def __init__(self):
        r"""
        :param _PodName: pod名称
注意：此字段可能返回 null，表示取不到有效值。
        :type PodName: str
        :param _TaskType: 任务类型
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskType: str
        :param _TaskId: 任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _TaskName: 任务自定义名称
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskName: str
        """
        self._PodName = None
        self._TaskType = None
        self._TaskId = None
        self._TaskName = None

    @property
    def PodName(self):
        """pod名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PodName

    @PodName.setter
    def PodName(self, PodName):
        self._PodName = PodName

    @property
    def TaskType(self):
        """任务类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def TaskId(self):
        """任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """任务自定义名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName


    def _deserialize(self, params):
        self._PodName = params.get("PodName")
        self._TaskType = params.get("TaskType")
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ResourceSpec(AbstractModel):
    """TI资源规格

    """

    def __init__(self):
        r"""
        :param _SpecAlias: 规格简称
注意：此字段可能返回 null，表示取不到有效值。
        :type SpecAlias: str
        :param _SpecId: 规格Id
注意：此字段可能返回 null，表示取不到有效值。
        :type SpecId: str
        :param _SpecName: 规则名称
注意：此字段可能返回 null，表示取不到有效值。
        :type SpecName: str
        """
        self._SpecAlias = None
        self._SpecId = None
        self._SpecName = None

    @property
    def SpecAlias(self):
        """规格简称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SpecAlias

    @SpecAlias.setter
    def SpecAlias(self, SpecAlias):
        self._SpecAlias = SpecAlias

    @property
    def SpecId(self):
        """规格Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SpecId

    @SpecId.setter
    def SpecId(self, SpecId):
        self._SpecId = SpecId

    @property
    def SpecName(self):
        """规则名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SpecName

    @SpecName.setter
    def SpecName(self, SpecName):
        self._SpecName = SpecName


    def _deserialize(self, params):
        self._SpecAlias = params.get("SpecAlias")
        self._SpecId = params.get("SpecId")
        self._SpecName = params.get("SpecName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ResponseScore(AbstractModel):
    """ResponseScore

    """

    def __init__(self):
        r"""
        :param _Key: model 1
注意：此字段可能返回 null，表示取不到有效值。
        :type Key: str
        :param _Response: 回答
注意：此字段可能返回 null，表示取不到有效值。
        :type Response: str
        :param _IsScored: 是否打分
注意：此字段可能返回 null，表示取不到有效值。
        :type IsScored: bool
        :param _Score: 打分
注意：此字段可能返回 null，表示取不到有效值。
        :type Score: float
        """
        self._Key = None
        self._Response = None
        self._IsScored = None
        self._Score = None

    @property
    def Key(self):
        """model 1
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Key

    @Key.setter
    def Key(self, Key):
        self._Key = Key

    @property
    def Response(self):
        """回答
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Response

    @Response.setter
    def Response(self, Response):
        self._Response = Response

    @property
    def IsScored(self):
        """是否打分
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsScored

    @IsScored.setter
    def IsScored(self, IsScored):
        self._IsScored = IsScored

    @property
    def Score(self):
        """打分
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Score

    @Score.setter
    def Score(self, Score):
        self._Score = Score


    def _deserialize(self, params):
        self._Key = params.get("Key")
        self._Response = params.get("Response")
        self._IsScored = params.get("IsScored")
        self._Score = params.get("Score")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RestartAutoMLModelAccelerateTaskRequest(AbstractModel):
    """RestartAutoMLModelAccelerateTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        """
        self._AutoMLTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RestartAutoMLModelAccelerateTaskResponse(AbstractModel):
    """RestartAutoMLModelAccelerateTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._RequestId = params.get("RequestId")


class RestartModelAccelerateTaskRequest(AbstractModel):
    """RestartModelAccelerateTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccTaskId: 模型加速任务ID
        :type ModelAccTaskId: str
        :param _ModelAccTaskName: 模型加速任务名称
        :type ModelAccTaskName: str
        :param _ModelSource: 模型来源（JOB/COS）
        :type ModelSource: str
        :param _AlgorithmFramework: 算法框架（废弃）
        :type AlgorithmFramework: str
        :param _ModelId: 模型ID
        :type ModelId: str
        :param _ModelName: 模型名称
        :type ModelName: str
        :param _ModelVersion: 模型版本
        :type ModelVersion: str
        :param _ModelInputPath: 模型输入cos路径
        :type ModelInputPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _OptimizationLevel: 优化级别（NO_LOSS/FP16/INT8），默认FP16
        :type OptimizationLevel: str
        :param _ModelInputNum: input节点个数（废弃）
        :type ModelInputNum: int
        :param _ModelInputInfos: input节点信息（废弃）
        :type ModelInputInfos: list of ModelInputInfo
        :param _ModelOutputPath: 模型输出cos路径
        :type ModelOutputPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _ModelFormat: 模型格式（TORCH_SCRIPT/DETECTRON2/SAVED_MODEL/FROZEN_GRAPH/MMDETECTION/ONNX/HUGGING_FACE）
        :type ModelFormat: str
        :param _TensorInfos: 模型Tensor信息
        :type TensorInfos: list of str
        :param _GPUType: GPU类型（T4/V100/A10），默认T4
        :type GPUType: str
        :param _HyperParameter: 模型专业参数
        :type HyperParameter: :class:`tencentcloud.tione.v20211111.models.HyperParameter`
        :param _AccEngineVersion: 加速引擎版本
        :type AccEngineVersion: str
        :param _Tags: 标签
        :type Tags: list of Tag
        :param _ModelSignature: SavedModel保存时配置的签名
        :type ModelSignature: str
        :param _FrameworkVersion: 加速引擎对应的框架版本
        :type FrameworkVersion: str
        :param _ResourceGroupId: 资源组id
        :type ResourceGroupId: str
        :param _ResourceGroupName: 资源组名称
        :type ResourceGroupName: str
        :param _ResourceGroupSWType: 资源组类型
        :type ResourceGroupSWType: str
        """
        self._ModelAccTaskId = None
        self._ModelAccTaskName = None
        self._ModelSource = None
        self._AlgorithmFramework = None
        self._ModelId = None
        self._ModelName = None
        self._ModelVersion = None
        self._ModelInputPath = None
        self._OptimizationLevel = None
        self._ModelInputNum = None
        self._ModelInputInfos = None
        self._ModelOutputPath = None
        self._ModelFormat = None
        self._TensorInfos = None
        self._GPUType = None
        self._HyperParameter = None
        self._AccEngineVersion = None
        self._Tags = None
        self._ModelSignature = None
        self._FrameworkVersion = None
        self._ResourceGroupId = None
        self._ResourceGroupName = None
        self._ResourceGroupSWType = None

    @property
    def ModelAccTaskId(self):
        """模型加速任务ID
        :rtype: str
        """
        return self._ModelAccTaskId

    @ModelAccTaskId.setter
    def ModelAccTaskId(self, ModelAccTaskId):
        self._ModelAccTaskId = ModelAccTaskId

    @property
    def ModelAccTaskName(self):
        """模型加速任务名称
        :rtype: str
        """
        return self._ModelAccTaskName

    @ModelAccTaskName.setter
    def ModelAccTaskName(self, ModelAccTaskName):
        self._ModelAccTaskName = ModelAccTaskName

    @property
    def ModelSource(self):
        """模型来源（JOB/COS）
        :rtype: str
        """
        return self._ModelSource

    @ModelSource.setter
    def ModelSource(self, ModelSource):
        self._ModelSource = ModelSource

    @property
    def AlgorithmFramework(self):
        """算法框架（废弃）
        :rtype: str
        """
        return self._AlgorithmFramework

    @AlgorithmFramework.setter
    def AlgorithmFramework(self, AlgorithmFramework):
        self._AlgorithmFramework = AlgorithmFramework

    @property
    def ModelId(self):
        """模型ID
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def ModelName(self):
        """模型名称
        :rtype: str
        """
        return self._ModelName

    @ModelName.setter
    def ModelName(self, ModelName):
        self._ModelName = ModelName

    @property
    def ModelVersion(self):
        """模型版本
        :rtype: str
        """
        return self._ModelVersion

    @ModelVersion.setter
    def ModelVersion(self, ModelVersion):
        self._ModelVersion = ModelVersion

    @property
    def ModelInputPath(self):
        """模型输入cos路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._ModelInputPath

    @ModelInputPath.setter
    def ModelInputPath(self, ModelInputPath):
        self._ModelInputPath = ModelInputPath

    @property
    def OptimizationLevel(self):
        """优化级别（NO_LOSS/FP16/INT8），默认FP16
        :rtype: str
        """
        return self._OptimizationLevel

    @OptimizationLevel.setter
    def OptimizationLevel(self, OptimizationLevel):
        self._OptimizationLevel = OptimizationLevel

    @property
    def ModelInputNum(self):
        """input节点个数（废弃）
        :rtype: int
        """
        return self._ModelInputNum

    @ModelInputNum.setter
    def ModelInputNum(self, ModelInputNum):
        self._ModelInputNum = ModelInputNum

    @property
    def ModelInputInfos(self):
        """input节点信息（废弃）
        :rtype: list of ModelInputInfo
        """
        return self._ModelInputInfos

    @ModelInputInfos.setter
    def ModelInputInfos(self, ModelInputInfos):
        self._ModelInputInfos = ModelInputInfos

    @property
    def ModelOutputPath(self):
        """模型输出cos路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._ModelOutputPath

    @ModelOutputPath.setter
    def ModelOutputPath(self, ModelOutputPath):
        self._ModelOutputPath = ModelOutputPath

    @property
    def ModelFormat(self):
        """模型格式（TORCH_SCRIPT/DETECTRON2/SAVED_MODEL/FROZEN_GRAPH/MMDETECTION/ONNX/HUGGING_FACE）
        :rtype: str
        """
        return self._ModelFormat

    @ModelFormat.setter
    def ModelFormat(self, ModelFormat):
        self._ModelFormat = ModelFormat

    @property
    def TensorInfos(self):
        """模型Tensor信息
        :rtype: list of str
        """
        return self._TensorInfos

    @TensorInfos.setter
    def TensorInfos(self, TensorInfos):
        self._TensorInfos = TensorInfos

    @property
    def GPUType(self):
        """GPU类型（T4/V100/A10），默认T4
        :rtype: str
        """
        return self._GPUType

    @GPUType.setter
    def GPUType(self, GPUType):
        self._GPUType = GPUType

    @property
    def HyperParameter(self):
        """模型专业参数
        :rtype: :class:`tencentcloud.tione.v20211111.models.HyperParameter`
        """
        return self._HyperParameter

    @HyperParameter.setter
    def HyperParameter(self, HyperParameter):
        self._HyperParameter = HyperParameter

    @property
    def AccEngineVersion(self):
        """加速引擎版本
        :rtype: str
        """
        return self._AccEngineVersion

    @AccEngineVersion.setter
    def AccEngineVersion(self, AccEngineVersion):
        self._AccEngineVersion = AccEngineVersion

    @property
    def Tags(self):
        """标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def ModelSignature(self):
        """SavedModel保存时配置的签名
        :rtype: str
        """
        return self._ModelSignature

    @ModelSignature.setter
    def ModelSignature(self, ModelSignature):
        self._ModelSignature = ModelSignature

    @property
    def FrameworkVersion(self):
        """加速引擎对应的框架版本
        :rtype: str
        """
        return self._FrameworkVersion

    @FrameworkVersion.setter
    def FrameworkVersion(self, FrameworkVersion):
        self._FrameworkVersion = FrameworkVersion

    @property
    def ResourceGroupId(self):
        """资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceGroupName(self):
        """资源组名称
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def ResourceGroupSWType(self):
        """资源组类型
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType


    def _deserialize(self, params):
        self._ModelAccTaskId = params.get("ModelAccTaskId")
        self._ModelAccTaskName = params.get("ModelAccTaskName")
        self._ModelSource = params.get("ModelSource")
        self._AlgorithmFramework = params.get("AlgorithmFramework")
        self._ModelId = params.get("ModelId")
        self._ModelName = params.get("ModelName")
        self._ModelVersion = params.get("ModelVersion")
        if params.get("ModelInputPath") is not None:
            self._ModelInputPath = CosPathInfo()
            self._ModelInputPath._deserialize(params.get("ModelInputPath"))
        self._OptimizationLevel = params.get("OptimizationLevel")
        self._ModelInputNum = params.get("ModelInputNum")
        if params.get("ModelInputInfos") is not None:
            self._ModelInputInfos = []
            for item in params.get("ModelInputInfos"):
                obj = ModelInputInfo()
                obj._deserialize(item)
                self._ModelInputInfos.append(obj)
        if params.get("ModelOutputPath") is not None:
            self._ModelOutputPath = CosPathInfo()
            self._ModelOutputPath._deserialize(params.get("ModelOutputPath"))
        self._ModelFormat = params.get("ModelFormat")
        self._TensorInfos = params.get("TensorInfos")
        self._GPUType = params.get("GPUType")
        if params.get("HyperParameter") is not None:
            self._HyperParameter = HyperParameter()
            self._HyperParameter._deserialize(params.get("HyperParameter"))
        self._AccEngineVersion = params.get("AccEngineVersion")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._ModelSignature = params.get("ModelSignature")
        self._FrameworkVersion = params.get("FrameworkVersion")
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RestartModelAccelerateTaskResponse(AbstractModel):
    """RestartModelAccelerateTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class RestartObjectiveEvaluationRequest(AbstractModel):
    """RestartObjectiveEvaluation请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RestartObjectiveEvaluationResponse(AbstractModel):
    """RestartObjectiveEvaluation返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class RestartSubjectiveEvaluationRequest(AbstractModel):
    """RestartSubjectiveEvaluation请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RestartSubjectiveEvaluationResponse(AbstractModel):
    """RestartSubjectiveEvaluation返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class ResultFilter(AbstractModel):
    """结果过滤

    """

    def __init__(self):
        r"""
        :param _Name: 过滤名称
        :type Name: str
        :param _Values: 过滤值
        :type Values: list of str
        :param _Fuzzy: 是否模糊查询
        :type Fuzzy: bool
        :param _PredIDs: 预测id数组
        :type PredIDs: list of int
        """
        self._Name = None
        self._Values = None
        self._Fuzzy = None
        self._PredIDs = None

    @property
    def Name(self):
        """过滤名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Values(self):
        """过滤值
        :rtype: list of str
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values

    @property
    def Fuzzy(self):
        """是否模糊查询
        :rtype: bool
        """
        return self._Fuzzy

    @Fuzzy.setter
    def Fuzzy(self, Fuzzy):
        self._Fuzzy = Fuzzy

    @property
    def PredIDs(self):
        """预测id数组
        :rtype: list of int
        """
        return self._PredIDs

    @PredIDs.setter
    def PredIDs(self, PredIDs):
        self._PredIDs = PredIDs


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Values = params.get("Values")
        self._Fuzzy = params.get("Fuzzy")
        self._PredIDs = params.get("PredIDs")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RoleSpec(AbstractModel):
    """多角色部署时的角色配置

    """

    def __init__(self):
        r"""
        :param _Name: 角色名称
        :type Name: str
        :param _ImageInfo: 镜像信息
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _InstancePerReplicas: 单角色实例数
        :type InstancePerReplicas: int
        :param _Resources: 资源配置
        :type Resources: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        :param _Replicas: 副本数
        :type Replicas: int
        :param _CommandBase64: base64后的command
        :type CommandBase64: str
        :param _Command: 启动命令
        :type Command: str
        :param _Env: 环境变量
        :type Env: list of EnvVar
        :param _TerminationGracePeriodSeconds: 优雅退出时限
        :type TerminationGracePeriodSeconds: int
        :param _PreStopCommand: 实例停止前需要执行的prestop脚本
        :type PreStopCommand: list of str
        :param _Sidecar: sidecar镜像配置
        :type Sidecar: :class:`tencentcloud.tione.v20211111.models.SidecarSpec`
        """
        self._Name = None
        self._ImageInfo = None
        self._InstancePerReplicas = None
        self._Resources = None
        self._Replicas = None
        self._CommandBase64 = None
        self._Command = None
        self._Env = None
        self._TerminationGracePeriodSeconds = None
        self._PreStopCommand = None
        self._Sidecar = None

    @property
    def Name(self):
        """角色名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ImageInfo(self):
        """镜像信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def InstancePerReplicas(self):
        """单角色实例数
        :rtype: int
        """
        return self._InstancePerReplicas

    @InstancePerReplicas.setter
    def InstancePerReplicas(self, InstancePerReplicas):
        self._InstancePerReplicas = InstancePerReplicas

    @property
    def Resources(self):
        """资源配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        """
        return self._Resources

    @Resources.setter
    def Resources(self, Resources):
        self._Resources = Resources

    @property
    def Replicas(self):
        """副本数
        :rtype: int
        """
        return self._Replicas

    @Replicas.setter
    def Replicas(self, Replicas):
        self._Replicas = Replicas

    @property
    def CommandBase64(self):
        """base64后的command
        :rtype: str
        """
        return self._CommandBase64

    @CommandBase64.setter
    def CommandBase64(self, CommandBase64):
        self._CommandBase64 = CommandBase64

    @property
    def Command(self):
        """启动命令
        :rtype: str
        """
        return self._Command

    @Command.setter
    def Command(self, Command):
        self._Command = Command

    @property
    def Env(self):
        """环境变量
        :rtype: list of EnvVar
        """
        return self._Env

    @Env.setter
    def Env(self, Env):
        self._Env = Env

    @property
    def TerminationGracePeriodSeconds(self):
        """优雅退出时限
        :rtype: int
        """
        return self._TerminationGracePeriodSeconds

    @TerminationGracePeriodSeconds.setter
    def TerminationGracePeriodSeconds(self, TerminationGracePeriodSeconds):
        self._TerminationGracePeriodSeconds = TerminationGracePeriodSeconds

    @property
    def PreStopCommand(self):
        """实例停止前需要执行的prestop脚本
        :rtype: list of str
        """
        return self._PreStopCommand

    @PreStopCommand.setter
    def PreStopCommand(self, PreStopCommand):
        self._PreStopCommand = PreStopCommand

    @property
    def Sidecar(self):
        """sidecar镜像配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.SidecarSpec`
        """
        return self._Sidecar

    @Sidecar.setter
    def Sidecar(self, Sidecar):
        self._Sidecar = Sidecar


    def _deserialize(self, params):
        self._Name = params.get("Name")
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        self._InstancePerReplicas = params.get("InstancePerReplicas")
        if params.get("Resources") is not None:
            self._Resources = ResourceInfo()
            self._Resources._deserialize(params.get("Resources"))
        self._Replicas = params.get("Replicas")
        self._CommandBase64 = params.get("CommandBase64")
        self._Command = params.get("Command")
        if params.get("Env") is not None:
            self._Env = []
            for item in params.get("Env"):
                obj = EnvVar()
                obj._deserialize(item)
                self._Env.append(obj)
        self._TerminationGracePeriodSeconds = params.get("TerminationGracePeriodSeconds")
        self._PreStopCommand = params.get("PreStopCommand")
        if params.get("Sidecar") is not None:
            self._Sidecar = SidecarSpec()
            self._Sidecar._deserialize(params.get("Sidecar"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RowItem(AbstractModel):
    """文本行信息

    """

    def __init__(self):
        r"""
        :param _Values: rowValue 数组
注意：此字段可能返回 null，表示取不到有效值。
        :type Values: list of RowValue
        """
        self._Values = None

    @property
    def Values(self):
        """rowValue 数组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of RowValue
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values


    def _deserialize(self, params):
        if params.get("Values") is not None:
            self._Values = []
            for item in params.get("Values"):
                obj = RowValue()
                obj._deserialize(item)
                self._Values.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RowValue(AbstractModel):
    """文件行信息

    """

    def __init__(self):
        r"""
        :param _Name: 列名
        :type Name: str
        :param _Value: 列值
注意：此字段可能返回 null，表示取不到有效值。
        :type Value: str
        """
        self._Name = None
        self._Value = None

    @property
    def Name(self):
        """列名
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Value(self):
        """列值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RunFlowRequest(AbstractModel):
    """RunFlow请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流ID
        :type FlowId: str
        :param _StartNodeUuid: 起始节点uuid
        :type StartNodeUuid: str
        :param _EndNodeUuid: 终止节点uuid
        :type EndNodeUuid: str
        """
        self._FlowId = None
        self._StartNodeUuid = None
        self._EndNodeUuid = None

    @property
    def FlowId(self):
        """工作流ID
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def StartNodeUuid(self):
        """起始节点uuid
        :rtype: str
        """
        return self._StartNodeUuid

    @StartNodeUuid.setter
    def StartNodeUuid(self, StartNodeUuid):
        self._StartNodeUuid = StartNodeUuid

    @property
    def EndNodeUuid(self):
        """终止节点uuid
        :rtype: str
        """
        return self._EndNodeUuid

    @EndNodeUuid.setter
    def EndNodeUuid(self, EndNodeUuid):
        self._EndNodeUuid = EndNodeUuid


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._StartNodeUuid = params.get("StartNodeUuid")
        self._EndNodeUuid = params.get("EndNodeUuid")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class RunFlowResponse(AbstractModel):
    """RunFlow返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunId: 工作流的运行Id
        :type FlowRunId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowRunId = None
        self._RequestId = None

    @property
    def FlowRunId(self):
        """工作流的运行Id
        :rtype: str
        """
        return self._FlowRunId

    @FlowRunId.setter
    def FlowRunId(self, FlowRunId):
        self._FlowRunId = FlowRunId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FlowRunId = params.get("FlowRunId")
        self._RequestId = params.get("RequestId")


class SSHConfig(AbstractModel):
    """notebook ssh端口配置

    """

    def __init__(self):
        r"""
        :param _Enable: 是否开启ssh
注意：此字段可能返回 null，表示取不到有效值。
        :type Enable: bool
        :param _PublicKey: 公钥信息
注意：此字段可能返回 null，表示取不到有效值。
        :type PublicKey: str
        :param _Port: 端口号
注意：此字段可能返回 null，表示取不到有效值。
        :type Port: int
        :param _LoginCommand: 登录命令
注意：此字段可能返回 null，表示取不到有效值。
        :type LoginCommand: str
        :param _IsAddressChanged: 登录地址是否改变
注意：此字段可能返回 null，表示取不到有效值。
        :type IsAddressChanged: bool
        :param _PodSSHInfo: POD访问信息
注意：此字段可能返回 null，表示取不到有效值。
        :type PodSSHInfo: :class:`tencentcloud.tione.v20211111.models.PodSSHInfo`
        :param _VpcSSHInfoList: VPC内访问信息
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcSSHInfoList: list of VpcSSHInfo
        """
        self._Enable = None
        self._PublicKey = None
        self._Port = None
        self._LoginCommand = None
        self._IsAddressChanged = None
        self._PodSSHInfo = None
        self._VpcSSHInfoList = None

    @property
    def Enable(self):
        """是否开启ssh
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._Enable

    @Enable.setter
    def Enable(self, Enable):
        self._Enable = Enable

    @property
    def PublicKey(self):
        """公钥信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PublicKey

    @PublicKey.setter
    def PublicKey(self, PublicKey):
        self._PublicKey = PublicKey

    @property
    def Port(self):
        """端口号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        self._Port = Port

    @property
    def LoginCommand(self):
        """登录命令
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LoginCommand

    @LoginCommand.setter
    def LoginCommand(self, LoginCommand):
        self._LoginCommand = LoginCommand

    @property
    def IsAddressChanged(self):
        """登录地址是否改变
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsAddressChanged

    @IsAddressChanged.setter
    def IsAddressChanged(self, IsAddressChanged):
        self._IsAddressChanged = IsAddressChanged

    @property
    def PodSSHInfo(self):
        """POD访问信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.PodSSHInfo`
        """
        return self._PodSSHInfo

    @PodSSHInfo.setter
    def PodSSHInfo(self, PodSSHInfo):
        self._PodSSHInfo = PodSSHInfo

    @property
    def VpcSSHInfoList(self):
        """VPC内访问信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of VpcSSHInfo
        """
        return self._VpcSSHInfoList

    @VpcSSHInfoList.setter
    def VpcSSHInfoList(self, VpcSSHInfoList):
        self._VpcSSHInfoList = VpcSSHInfoList


    def _deserialize(self, params):
        self._Enable = params.get("Enable")
        self._PublicKey = params.get("PublicKey")
        self._Port = params.get("Port")
        self._LoginCommand = params.get("LoginCommand")
        self._IsAddressChanged = params.get("IsAddressChanged")
        if params.get("PodSSHInfo") is not None:
            self._PodSSHInfo = PodSSHInfo()
            self._PodSSHInfo._deserialize(params.get("PodSSHInfo"))
        if params.get("VpcSSHInfoList") is not None:
            self._VpcSSHInfoList = []
            for item in params.get("VpcSSHInfoList"):
                obj = VpcSSHInfo()
                obj._deserialize(item)
                self._VpcSSHInfoList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SampleItem(AbstractModel):
    """待加入训练集的训练文本

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _PredId: 预测结果id
        :type PredId: int
        :param _TaskSource: EVAL_CENTER或TRAIN_EVAL
        :type TaskSource: str
        :param _TEXT: 文本内容
        :type TEXT: str
        :param _DatasetId: 所属数据集id
        :type DatasetId: str
        """
        self._TaskId = None
        self._PredId = None
        self._TaskSource = None
        self._TEXT = None
        self._DatasetId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def PredId(self):
        """预测结果id
        :rtype: int
        """
        return self._PredId

    @PredId.setter
    def PredId(self, PredId):
        self._PredId = PredId

    @property
    def TaskSource(self):
        """EVAL_CENTER或TRAIN_EVAL
        :rtype: str
        """
        return self._TaskSource

    @TaskSource.setter
    def TaskSource(self, TaskSource):
        self._TaskSource = TaskSource

    @property
    def TEXT(self):
        """文本内容
        :rtype: str
        """
        return self._TEXT

    @TEXT.setter
    def TEXT(self, TEXT):
        self._TEXT = TEXT

    @property
    def DatasetId(self):
        """所属数据集id
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._PredId = params.get("PredId")
        self._TaskSource = params.get("TaskSource")
        self._TEXT = params.get("TEXT")
        self._DatasetId = params.get("DatasetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SaveFlowRequest(AbstractModel):
    """SaveFlow请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流ID
        :type FlowId: str
        :param _CanvasData: 工作流画布的整体信息
        :type CanvasData: str
        :param _Nodes: 工作流节点数组
        :type Nodes: list of FlowNode
        :param _Edges: 工作流边数组
        :type Edges: list of FlowEdge
        """
        self._FlowId = None
        self._CanvasData = None
        self._Nodes = None
        self._Edges = None

    @property
    def FlowId(self):
        """工作流ID
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def CanvasData(self):
        """工作流画布的整体信息
        :rtype: str
        """
        return self._CanvasData

    @CanvasData.setter
    def CanvasData(self, CanvasData):
        self._CanvasData = CanvasData

    @property
    def Nodes(self):
        """工作流节点数组
        :rtype: list of FlowNode
        """
        return self._Nodes

    @Nodes.setter
    def Nodes(self, Nodes):
        self._Nodes = Nodes

    @property
    def Edges(self):
        """工作流边数组
        :rtype: list of FlowEdge
        """
        return self._Edges

    @Edges.setter
    def Edges(self, Edges):
        self._Edges = Edges


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._CanvasData = params.get("CanvasData")
        if params.get("Nodes") is not None:
            self._Nodes = []
            for item in params.get("Nodes"):
                obj = FlowNode()
                obj._deserialize(item)
                self._Nodes.append(obj)
        if params.get("Edges") is not None:
            self._Edges = []
            for item in params.get("Edges"):
                obj = FlowEdge()
                obj._deserialize(item)
                self._Edges.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SaveFlowResponse(AbstractModel):
    """SaveFlow返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流的Id
        :type FlowId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowId = None
        self._RequestId = None

    @property
    def FlowId(self):
        """工作流的Id
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        self._RequestId = params.get("RequestId")


class ScalarItem(AbstractModel):
    """标量类型的评测指标结果

    """

    def __init__(self):
        r"""
        :param _Name: 指标名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _LabelValues: 标量指标的标签和值
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelValues: list of ScalarLabelValue
        """
        self._Name = None
        self._LabelValues = None

    @property
    def Name(self):
        """指标名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def LabelValues(self):
        """标量指标的标签和值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ScalarLabelValue
        """
        return self._LabelValues

    @LabelValues.setter
    def LabelValues(self, LabelValues):
        self._LabelValues = LabelValues


    def _deserialize(self, params):
        self._Name = params.get("Name")
        if params.get("LabelValues") is not None:
            self._LabelValues = []
            for item in params.get("LabelValues"):
                obj = ScalarLabelValue()
                obj._deserialize(item)
                self._LabelValues.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScalarLabelValue(AbstractModel):
    """标量类型的评测指标的标签名称以及对应的具体值

    """

    def __init__(self):
        r"""
        :param _Label: 指标的标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Label: str
        :param _Value: 指标的具体值
注意：此字段可能返回 null，表示取不到有效值。
        :type Value: float
        """
        self._Label = None
        self._Value = None

    @property
    def Label(self):
        """指标的标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Label

    @Label.setter
    def Label(self, Label):
        self._Label = Label

    @property
    def Value(self):
        """指标的具体值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Label = params.get("Label")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Scene(AbstractModel):
    """自动学习场景信息

    """

    def __init__(self):
        r"""
        :param _Id: 场景id
注意：此字段可能返回 null，表示取不到有效值。
        :type Id: str
        :param _Name: 场景名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _Describe: 场景描述信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Describe: str
        :param _Type: 场景类别
注意：此字段可能返回 null，表示取不到有效值。
        :type Type: str
        :param _SceneDomain: 场景所属领域
注意：此字段可能返回 null，表示取不到有效值。
        :type SceneDomain: str
        :param _BackgroundUrl: 场景背景图下
注意：此字段可能返回 null，表示取不到有效值。
        :type BackgroundUrl: str
        :param _ModelConfig: 模型配置信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelConfig: str
        :param _DatasetConfig: 数据集配置信息
注意：此字段可能返回 null，表示取不到有效值。
        :type DatasetConfig: :class:`tencentcloud.tione.v20211111.models.DatasetConfigs`
        :param _AnnotationType: 标签类别
注意：此字段可能返回 null，表示取不到有效值。
        :type AnnotationType: str
        """
        self._Id = None
        self._Name = None
        self._Describe = None
        self._Type = None
        self._SceneDomain = None
        self._BackgroundUrl = None
        self._ModelConfig = None
        self._DatasetConfig = None
        self._AnnotationType = None

    @property
    def Id(self):
        """场景id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """场景名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Describe(self):
        """场景描述信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Describe

    @Describe.setter
    def Describe(self, Describe):
        self._Describe = Describe

    @property
    def Type(self):
        """场景类别
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def SceneDomain(self):
        """场景所属领域
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SceneDomain

    @SceneDomain.setter
    def SceneDomain(self, SceneDomain):
        self._SceneDomain = SceneDomain

    @property
    def BackgroundUrl(self):
        """场景背景图下
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._BackgroundUrl

    @BackgroundUrl.setter
    def BackgroundUrl(self, BackgroundUrl):
        self._BackgroundUrl = BackgroundUrl

    @property
    def ModelConfig(self):
        """模型配置信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelConfig

    @ModelConfig.setter
    def ModelConfig(self, ModelConfig):
        self._ModelConfig = ModelConfig

    @property
    def DatasetConfig(self):
        """数据集配置信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.DatasetConfigs`
        """
        return self._DatasetConfig

    @DatasetConfig.setter
    def DatasetConfig(self, DatasetConfig):
        self._DatasetConfig = DatasetConfig

    @property
    def AnnotationType(self):
        """标签类别
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AnnotationType

    @AnnotationType.setter
    def AnnotationType(self, AnnotationType):
        self._AnnotationType = AnnotationType


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._Describe = params.get("Describe")
        self._Type = params.get("Type")
        self._SceneDomain = params.get("SceneDomain")
        self._BackgroundUrl = params.get("BackgroundUrl")
        self._ModelConfig = params.get("ModelConfig")
        if params.get("DatasetConfig") is not None:
            self._DatasetConfig = DatasetConfigs()
            self._DatasetConfig._deserialize(params.get("DatasetConfig"))
        self._AnnotationType = params.get("AnnotationType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SchedulePolicy(AbstractModel):
    """任务调度策略

    """

    def __init__(self):
        r"""
        :param _PriorityClass: 任务优先级
注意：此字段可能返回 null，表示取不到有效值。
        :type PriorityClass: str
        :param _BackOffLimit: 异常重启次数
注意：此字段可能返回 null，表示取不到有效值。
        :type BackOffLimit: int
        """
        self._PriorityClass = None
        self._BackOffLimit = None

    @property
    def PriorityClass(self):
        """任务优先级
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._PriorityClass

    @PriorityClass.setter
    def PriorityClass(self, PriorityClass):
        self._PriorityClass = PriorityClass

    @property
    def BackOffLimit(self):
        """异常重启次数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._BackOffLimit

    @BackOffLimit.setter
    def BackOffLimit(self, BackOffLimit):
        self._BackOffLimit = BackOffLimit


    def _deserialize(self, params):
        self._PriorityClass = params.get("PriorityClass")
        self._BackOffLimit = params.get("BackOffLimit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScheduledAction(AbstractModel):
    """定时的事务和行为

    """

    def __init__(self):
        r"""
        :param _ScheduleStop: 是否要定时停止服务，true or false。true 则 ScheduleStopTime 必填， false 则 ScheduleStopTime 不生效
        :type ScheduleStop: bool
        :param _ScheduleStopTime: 要执行定时停止的时间，格式：“2022-01-26T19:46:22+08:00”
        :type ScheduleStopTime: str
        """
        self._ScheduleStop = None
        self._ScheduleStopTime = None

    @property
    def ScheduleStop(self):
        """是否要定时停止服务，true or false。true 则 ScheduleStopTime 必填， false 则 ScheduleStopTime 不生效
        :rtype: bool
        """
        return self._ScheduleStop

    @ScheduleStop.setter
    def ScheduleStop(self, ScheduleStop):
        self._ScheduleStop = ScheduleStop

    @property
    def ScheduleStopTime(self):
        """要执行定时停止的时间，格式：“2022-01-26T19:46:22+08:00”
        :rtype: str
        """
        return self._ScheduleStopTime

    @ScheduleStopTime.setter
    def ScheduleStopTime(self, ScheduleStopTime):
        self._ScheduleStopTime = ScheduleStopTime


    def _deserialize(self, params):
        self._ScheduleStop = params.get("ScheduleStop")
        self._ScheduleStopTime = params.get("ScheduleStopTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SchemaInfo(AbstractModel):
    """表格数据集表头信息

    """

    def __init__(self):
        r"""
        :param _Name: 长度30字符内
        :type Name: str
        :param _Type: 数据类型
        :type Type: str
        """
        self._Name = None
        self._Type = None

    @property
    def Name(self):
        """长度30字符内
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Type(self):
        """数据类型
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Type = params.get("Type")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ScoreInfo(AbstractModel):
    """ScoreInfo

    """

    def __init__(self):
        r"""
        :param _Prompt: 评测集的提示
注意：此字段可能返回 null，表示取不到有效值。
        :type Prompt: str
        :param _StandardResponse: 评测集的标准响应
注意：此字段可能返回 null，表示取不到有效值。
        :type StandardResponse: str
        :param _ResponseScores: 打分
注意：此字段可能返回 null，表示取不到有效值。
        :type ResponseScores: list of ResponseScore
        """
        self._Prompt = None
        self._StandardResponse = None
        self._ResponseScores = None

    @property
    def Prompt(self):
        """评测集的提示
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Prompt

    @Prompt.setter
    def Prompt(self, Prompt):
        self._Prompt = Prompt

    @property
    def StandardResponse(self):
        """评测集的标准响应
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StandardResponse

    @StandardResponse.setter
    def StandardResponse(self, StandardResponse):
        self._StandardResponse = StandardResponse

    @property
    def ResponseScores(self):
        """打分
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ResponseScore
        """
        return self._ResponseScores

    @ResponseScores.setter
    def ResponseScores(self, ResponseScores):
        self._ResponseScores = ResponseScores


    def _deserialize(self, params):
        self._Prompt = params.get("Prompt")
        self._StandardResponse = params.get("StandardResponse")
        if params.get("ResponseScores") is not None:
            self._ResponseScores = []
            for item in params.get("ResponseScores"):
                obj = ResponseScore()
                obj._deserialize(item)
                self._ResponseScores.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SegmentationInfo(AbstractModel):
    """图片分割参数信息

    """

    def __init__(self):
        r"""
        :param _Points: 点坐标数组
注意：此字段可能返回 null，表示取不到有效值。
        :type Points: list of PointInfo
        :param _Label: 分割标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Label: str
        :param _Gray: 灰度值
注意：此字段可能返回 null，表示取不到有效值。
        :type Gray: int
        :param _Color: 颜色
注意：此字段可能返回 null，表示取不到有效值。
        :type Color: str
        """
        self._Points = None
        self._Label = None
        self._Gray = None
        self._Color = None

    @property
    def Points(self):
        """点坐标数组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of PointInfo
        """
        return self._Points

    @Points.setter
    def Points(self, Points):
        self._Points = Points

    @property
    def Label(self):
        """分割标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Label

    @Label.setter
    def Label(self, Label):
        self._Label = Label

    @property
    def Gray(self):
        """灰度值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Gray

    @Gray.setter
    def Gray(self, Gray):
        self._Gray = Gray

    @property
    def Color(self):
        """颜色
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Color

    @Color.setter
    def Color(self, Color):
        self._Color = Color


    def _deserialize(self, params):
        if params.get("Points") is not None:
            self._Points = []
            for item in params.get("Points"):
                obj = PointInfo()
                obj._deserialize(item)
                self._Points.append(obj)
        self._Label = params.get("Label")
        self._Gray = params.get("Gray")
        self._Color = params.get("Color")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SemiProgress(AbstractModel):
    """纳管进度信息

    """

    def __init__(self):
        r"""
        :param _Phase: 纳管阶段
        :type Phase: str
        :param _ErrCode: 错误码
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrCode: str
        :param _ErrMessage: 错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrMessage: str
        :param _StartTime: 开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :type StartTime: str
        :param _EndTime: 结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :type EndTime: str
        :param _Timeout: 该阶段是否超时
注意：此字段可能返回 null，表示取不到有效值。
        :type Timeout: bool
        """
        self._Phase = None
        self._ErrCode = None
        self._ErrMessage = None
        self._StartTime = None
        self._EndTime = None
        self._Timeout = None

    @property
    def Phase(self):
        """纳管阶段
        :rtype: str
        """
        return self._Phase

    @Phase.setter
    def Phase(self, Phase):
        self._Phase = Phase

    @property
    def ErrCode(self):
        """错误码
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrCode

    @ErrCode.setter
    def ErrCode(self, ErrCode):
        self._ErrCode = ErrCode

    @property
    def ErrMessage(self):
        """错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrMessage

    @ErrMessage.setter
    def ErrMessage(self, ErrMessage):
        self._ErrMessage = ErrMessage

    @property
    def StartTime(self):
        """开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Timeout(self):
        """该阶段是否超时
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._Timeout

    @Timeout.setter
    def Timeout(self, Timeout):
        self._Timeout = Timeout


    def _deserialize(self, params):
        self._Phase = params.get("Phase")
        self._ErrCode = params.get("ErrCode")
        self._ErrMessage = params.get("ErrMessage")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._Timeout = params.get("Timeout")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SendAsyncChatMessageRequest(AbstractModel):
    """SendAsyncChatMessage请求参数结构体

    """

    def __init__(self):
        r"""
        :param _SessionId: 会话id，标识一组对话的唯一id，id变更则重置会话
        :type SessionId: str
        :param _Question: 问题
        :type Question: str
        :param _ModelId: 会话模型id，不同的会话模型调用到不同的模型后台。 多行业多场景大模型为 tj_llm_clm-v1
        :type ModelId: str
        :param _SequenceId: 序列id
        :type SequenceId: int
        :param _Mode: 使用模式。General 通用问答；WithSearchPlugin 搜索增强问答
        :type Mode: str
        :param _SearchSource: 搜索来源。仅当Mode未WithSearchPlugin时生效。Preset 预置文稿库；Custom 自定义。
        :type SearchSource: str
        """
        self._SessionId = None
        self._Question = None
        self._ModelId = None
        self._SequenceId = None
        self._Mode = None
        self._SearchSource = None

    @property
    def SessionId(self):
        """会话id，标识一组对话的唯一id，id变更则重置会话
        :rtype: str
        """
        return self._SessionId

    @SessionId.setter
    def SessionId(self, SessionId):
        self._SessionId = SessionId

    @property
    def Question(self):
        """问题
        :rtype: str
        """
        return self._Question

    @Question.setter
    def Question(self, Question):
        self._Question = Question

    @property
    def ModelId(self):
        """会话模型id，不同的会话模型调用到不同的模型后台。 多行业多场景大模型为 tj_llm_clm-v1
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def SequenceId(self):
        """序列id
        :rtype: int
        """
        return self._SequenceId

    @SequenceId.setter
    def SequenceId(self, SequenceId):
        self._SequenceId = SequenceId

    @property
    def Mode(self):
        """使用模式。General 通用问答；WithSearchPlugin 搜索增强问答
        :rtype: str
        """
        return self._Mode

    @Mode.setter
    def Mode(self, Mode):
        self._Mode = Mode

    @property
    def SearchSource(self):
        """搜索来源。仅当Mode未WithSearchPlugin时生效。Preset 预置文稿库；Custom 自定义。
        :rtype: str
        """
        return self._SearchSource

    @SearchSource.setter
    def SearchSource(self, SearchSource):
        self._SearchSource = SearchSource


    def _deserialize(self, params):
        self._SessionId = params.get("SessionId")
        self._Question = params.get("Question")
        self._ModelId = params.get("ModelId")
        self._SequenceId = params.get("SequenceId")
        self._Mode = params.get("Mode")
        self._SearchSource = params.get("SearchSource")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SendAsyncChatMessageResponse(AbstractModel):
    """SendAsyncChatMessage返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 异步任务Id，供查询
        :type TaskId: str
        :param _SessionId: 会话ID，与请求的相同
注意：此字段可能返回 null，表示取不到有效值。
        :type SessionId: str
        :param _SequenceId: 会话序列号，与请求的相同
注意：此字段可能返回 null，表示取不到有效值。
        :type SequenceId: int
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._SessionId = None
        self._SequenceId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """异步任务Id，供查询
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def SessionId(self):
        """会话ID，与请求的相同
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SessionId

    @SessionId.setter
    def SessionId(self, SessionId):
        self._SessionId = SessionId

    @property
    def SequenceId(self):
        """会话序列号，与请求的相同
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._SequenceId

    @SequenceId.setter
    def SequenceId(self, SequenceId):
        self._SequenceId = SequenceId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._SessionId = params.get("SessionId")
        self._SequenceId = params.get("SequenceId")
        self._RequestId = params.get("RequestId")


class SendChatMessageRequest(AbstractModel):
    """SendChatMessage请求参数结构体

    """

    def __init__(self):
        r"""
        :param _SessionId: 会话id，标识一组对话的唯一id，id变更则重置会话
        :type SessionId: str
        :param _Question: 问题描述
        :type Question: str
        :param _ModelVersion: 会话模型版本。
金融大模型：填写sn-finllm-13b-chat-v1。
默认为sn-finllm-13b-chat-v1，即金融大模型。
        :type ModelVersion: str
        :param _Mode: 使用模式。
通用问答：填写General。
搜索增强问答：填写WithSearchPlugin。
默认为General，即通用问答。
当前可体验模型仅支持General。
        :type Mode: str
        :param _SearchSource: 搜索来源。仅当Mode为WithSearchPlugin时生效。
预置文稿库：填写Preset。自定义：填写Custom。
        :type SearchSource: str
        """
        self._SessionId = None
        self._Question = None
        self._ModelVersion = None
        self._Mode = None
        self._SearchSource = None

    @property
    def SessionId(self):
        """会话id，标识一组对话的唯一id，id变更则重置会话
        :rtype: str
        """
        return self._SessionId

    @SessionId.setter
    def SessionId(self, SessionId):
        self._SessionId = SessionId

    @property
    def Question(self):
        """问题描述
        :rtype: str
        """
        return self._Question

    @Question.setter
    def Question(self, Question):
        self._Question = Question

    @property
    def ModelVersion(self):
        """会话模型版本。
金融大模型：填写sn-finllm-13b-chat-v1。
默认为sn-finllm-13b-chat-v1，即金融大模型。
        :rtype: str
        """
        return self._ModelVersion

    @ModelVersion.setter
    def ModelVersion(self, ModelVersion):
        self._ModelVersion = ModelVersion

    @property
    def Mode(self):
        """使用模式。
通用问答：填写General。
搜索增强问答：填写WithSearchPlugin。
默认为General，即通用问答。
当前可体验模型仅支持General。
        :rtype: str
        """
        return self._Mode

    @Mode.setter
    def Mode(self, Mode):
        self._Mode = Mode

    @property
    def SearchSource(self):
        """搜索来源。仅当Mode为WithSearchPlugin时生效。
预置文稿库：填写Preset。自定义：填写Custom。
        :rtype: str
        """
        return self._SearchSource

    @SearchSource.setter
    def SearchSource(self, SearchSource):
        self._SearchSource = SearchSource


    def _deserialize(self, params):
        self._SessionId = params.get("SessionId")
        self._Question = params.get("Question")
        self._ModelVersion = params.get("ModelVersion")
        self._Mode = params.get("Mode")
        self._SearchSource = params.get("SearchSource")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SendChatMessageResponse(AbstractModel):
    """SendChatMessage返回参数结构体

    """

    def __init__(self):
        r"""
        :param _Answer: 答案
        :type Answer: str
        :param _Sources: 引用源
        :type Sources: :class:`tencentcloud.tione.v20211111.models.Source`
        :param _SessionId: 会话id,返回请求的会话id
        :type SessionId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._Answer = None
        self._Sources = None
        self._SessionId = None
        self._RequestId = None

    @property
    def Answer(self):
        """答案
        :rtype: str
        """
        return self._Answer

    @Answer.setter
    def Answer(self, Answer):
        self._Answer = Answer

    @property
    def Sources(self):
        """引用源
        :rtype: :class:`tencentcloud.tione.v20211111.models.Source`
        """
        return self._Sources

    @Sources.setter
    def Sources(self, Sources):
        self._Sources = Sources

    @property
    def SessionId(self):
        """会话id,返回请求的会话id
        :rtype: str
        """
        return self._SessionId

    @SessionId.setter
    def SessionId(self, SessionId):
        self._SessionId = SessionId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._Answer = params.get("Answer")
        if params.get("Sources") is not None:
            self._Sources = Source()
            self._Sources._deserialize(params.get("Sources"))
        self._SessionId = params.get("SessionId")
        self._RequestId = params.get("RequestId")


class SeniorNLPItem(AbstractModel):
    """领域意图槽位信息

    """

    def __init__(self):
        r"""
        :param _Domain: 领域
注意：此字段可能返回 null，表示取不到有效值。
        :type Domain: str
        :param _Intent: 意图
注意：此字段可能返回 null，表示取不到有效值。
        :type Intent: str
        :param _Slots: 槽位的base64
注意：此字段可能返回 null，表示取不到有效值。
        :type Slots: str
        :param _AutoMLEvaluateTaskId: 评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type AutoMLEvaluateTaskId: str
        """
        self._Domain = None
        self._Intent = None
        self._Slots = None
        self._AutoMLEvaluateTaskId = None

    @property
    def Domain(self):
        """领域
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Domain

    @Domain.setter
    def Domain(self, Domain):
        self._Domain = Domain

    @property
    def Intent(self):
        """意图
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Intent

    @Intent.setter
    def Intent(self, Intent):
        self._Intent = Intent

    @property
    def Slots(self):
        """槽位的base64
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Slots

    @Slots.setter
    def Slots(self, Slots):
        self._Slots = Slots

    @property
    def AutoMLEvaluateTaskId(self):
        """评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AutoMLEvaluateTaskId

    @AutoMLEvaluateTaskId.setter
    def AutoMLEvaluateTaskId(self, AutoMLEvaluateTaskId):
        self._AutoMLEvaluateTaskId = AutoMLEvaluateTaskId


    def _deserialize(self, params):
        self._Domain = params.get("Domain")
        self._Intent = params.get("Intent")
        self._Slots = params.get("Slots")
        self._AutoMLEvaluateTaskId = params.get("AutoMLEvaluateTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Service(AbstractModel):
    """描述在线服务

    """

    def __init__(self):
        r"""
        :param _ServiceGroupId: 服务组id
        :type ServiceGroupId: str
        :param _ServiceId: 服务id
        :type ServiceId: str
        :param _ServiceGroupName: 服务组名
        :type ServiceGroupName: str
        :param _ServiceDescription: 服务描述
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceDescription: str
        :param _ServiceInfo: 服务的详细信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceInfo: :class:`tencentcloud.tione.v20211111.models.ServiceInfo`
        :param _ClusterId: 集群id
注意：此字段可能返回 null，表示取不到有效值。
        :type ClusterId: str
        :param _Region: 地域
注意：此字段可能返回 null，表示取不到有效值。
        :type Region: str
        :param _Namespace: 命名空间
注意：此字段可能返回 null，表示取不到有效值。
        :type Namespace: str
        :param _ChargeType: 付费类型
注意：此字段可能返回 null，表示取不到有效值。
        :type ChargeType: str
        :param _ResourceGroupId: 包年包月服务的资源组id，按量计费的服务为空
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _ResourceGroupName: 包年包月服务对应的资源组名字
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupName: str
        :param _Tags: 服务的标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _IngressName: 服务所在的 ingress 的 name
注意：此字段可能返回 null，表示取不到有效值。
        :type IngressName: str
        :param _CreatedBy: 创建者
注意：此字段可能返回 null，表示取不到有效值。
        :type CreatedBy: str
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _UpdateTime: 更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTime: str
        :param _Uin: 主账号
注意：此字段可能返回 null，表示取不到有效值。
        :type Uin: str
        :param _SubUin: 子账号
注意：此字段可能返回 null，表示取不到有效值。
        :type SubUin: str
        :param _AppId: app_id
注意：此字段可能返回 null，表示取不到有效值。
        :type AppId: int
        :param _BusinessStatus: 服务的业务状态
注意：此字段可能返回 null，表示取不到有效值。
        :type BusinessStatus: str
        :param _ServiceLimit: 已废弃,以ServiceInfo中的对应为准
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceLimit: :class:`tencentcloud.tione.v20211111.models.ServiceLimit`
        :param _ScheduledAction: 已废弃,以ServiceInfo中的对应为准
注意：此字段可能返回 null，表示取不到有效值。
        :type ScheduledAction: :class:`tencentcloud.tione.v20211111.models.ScheduledAction`
        :param _CreateFailedReason: 服务创建失败的原因，创建成功后该字段为默认值 CREATE_SUCCEED
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateFailedReason: str
        :param _Status: 服务状态
CREATING 创建中
CREATE_FAILED 创建失败
Normal	正常运行中
Stopped  已停止
Stopping 停止中
Abnormal 异常
Pending 启动中
Waiting 就绪中
注意：此字段可能返回 null，表示取不到有效值。
        :type Status: str
        :param _BillingInfo: 费用信息
注意：此字段可能返回 null，表示取不到有效值。
        :type BillingInfo: str
        :param _Weight: 模型权重
注意：此字段可能返回 null，表示取不到有效值。
        :type Weight: int
        :param _CreateSource: 服务的创建来源
AUTO_ML: 来自自动学习的一键发布
DEFAULT: 其他来源
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateSource: str
        :param _Version: 版本号
注意：此字段可能返回 null，表示取不到有效值。
        :type Version: str
        :param _LatestVersion: 服务组下服务的最高版本号
注意：此字段可能返回 null，表示取不到有效值。
        :type LatestVersion: str
        :param _BackendServiceId: 后端的服务id
注意：此字段可能返回 null，表示取不到有效值。
        :type BackendServiceId: int
        :param _ResourceGroupSWType: 资源组类别 托管 NORMAL，纳管 SW
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupSWType: str
        :param _SourceTaskInfo: 源任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :type SourceTaskInfo: :class:`tencentcloud.tione.v20211111.models.SourceTaskInfo`
        :param _ArchiveTime: 服务的归档时间
注意：此字段可能返回 null，表示取不到有效值。
        :type ArchiveTime: str
        :param _ArchiveStatus: 服务的归档状态  Waiting 等待归档中，Archived 已归档
注意：此字段可能返回 null，表示取不到有效值。
        :type ArchiveStatus: str
        :param _DeployType: 服务的部署类型 [STANDARD 标准部署，DIST 分布式多机部署] 默认STANDARD
注意：此字段可能返回 null，表示取不到有效值。
        :type DeployType: str
        :param _InstancePerReplicas: 单副本下的实例数，仅在部署类型为DIST时生效，默认1
注意：此字段可能返回 null，表示取不到有效值。
        :type InstancePerReplicas: str
        """
        self._ServiceGroupId = None
        self._ServiceId = None
        self._ServiceGroupName = None
        self._ServiceDescription = None
        self._ServiceInfo = None
        self._ClusterId = None
        self._Region = None
        self._Namespace = None
        self._ChargeType = None
        self._ResourceGroupId = None
        self._ResourceGroupName = None
        self._Tags = None
        self._IngressName = None
        self._CreatedBy = None
        self._CreateTime = None
        self._UpdateTime = None
        self._Uin = None
        self._SubUin = None
        self._AppId = None
        self._BusinessStatus = None
        self._ServiceLimit = None
        self._ScheduledAction = None
        self._CreateFailedReason = None
        self._Status = None
        self._BillingInfo = None
        self._Weight = None
        self._CreateSource = None
        self._Version = None
        self._LatestVersion = None
        self._BackendServiceId = None
        self._ResourceGroupSWType = None
        self._SourceTaskInfo = None
        self._ArchiveTime = None
        self._ArchiveStatus = None
        self._DeployType = None
        self._InstancePerReplicas = None

    @property
    def ServiceGroupId(self):
        """服务组id
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def ServiceId(self):
        """服务id
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId

    @property
    def ServiceGroupName(self):
        """服务组名
        :rtype: str
        """
        return self._ServiceGroupName

    @ServiceGroupName.setter
    def ServiceGroupName(self, ServiceGroupName):
        self._ServiceGroupName = ServiceGroupName

    @property
    def ServiceDescription(self):
        """服务描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ServiceDescription

    @ServiceDescription.setter
    def ServiceDescription(self, ServiceDescription):
        self._ServiceDescription = ServiceDescription

    @property
    def ServiceInfo(self):
        """服务的详细信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ServiceInfo`
        """
        return self._ServiceInfo

    @ServiceInfo.setter
    def ServiceInfo(self, ServiceInfo):
        self._ServiceInfo = ServiceInfo

    @property
    def ClusterId(self):
        """集群id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ClusterId

    @ClusterId.setter
    def ClusterId(self, ClusterId):
        self._ClusterId = ClusterId

    @property
    def Region(self):
        """地域
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def Namespace(self):
        """命名空间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Namespace

    @Namespace.setter
    def Namespace(self, Namespace):
        self._Namespace = Namespace

    @property
    def ChargeType(self):
        """付费类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceGroupId(self):
        """包年包月服务的资源组id，按量计费的服务为空
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceGroupName(self):
        """包年包月服务对应的资源组名字
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def Tags(self):
        """服务的标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def IngressName(self):
        """服务所在的 ingress 的 name
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._IngressName

    @IngressName.setter
    def IngressName(self, IngressName):
        self._IngressName = IngressName

    @property
    def CreatedBy(self):
        """创建者
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreatedBy

    @CreatedBy.setter
    def CreatedBy(self, CreatedBy):
        self._CreatedBy = CreatedBy

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def Uin(self):
        """主账号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def SubUin(self):
        """子账号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def AppId(self):
        """app_id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId

    @property
    def BusinessStatus(self):
        """服务的业务状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._BusinessStatus

    @BusinessStatus.setter
    def BusinessStatus(self, BusinessStatus):
        self._BusinessStatus = BusinessStatus

    @property
    def ServiceLimit(self):
        warnings.warn("parameter `ServiceLimit` is deprecated", DeprecationWarning) 

        """已废弃,以ServiceInfo中的对应为准
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ServiceLimit`
        """
        return self._ServiceLimit

    @ServiceLimit.setter
    def ServiceLimit(self, ServiceLimit):
        warnings.warn("parameter `ServiceLimit` is deprecated", DeprecationWarning) 

        self._ServiceLimit = ServiceLimit

    @property
    def ScheduledAction(self):
        warnings.warn("parameter `ScheduledAction` is deprecated", DeprecationWarning) 

        """已废弃,以ServiceInfo中的对应为准
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ScheduledAction`
        """
        return self._ScheduledAction

    @ScheduledAction.setter
    def ScheduledAction(self, ScheduledAction):
        warnings.warn("parameter `ScheduledAction` is deprecated", DeprecationWarning) 

        self._ScheduledAction = ScheduledAction

    @property
    def CreateFailedReason(self):
        """服务创建失败的原因，创建成功后该字段为默认值 CREATE_SUCCEED
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateFailedReason

    @CreateFailedReason.setter
    def CreateFailedReason(self, CreateFailedReason):
        self._CreateFailedReason = CreateFailedReason

    @property
    def Status(self):
        """服务状态
CREATING 创建中
CREATE_FAILED 创建失败
Normal	正常运行中
Stopped  已停止
Stopping 停止中
Abnormal 异常
Pending 启动中
Waiting 就绪中
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def BillingInfo(self):
        """费用信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._BillingInfo

    @BillingInfo.setter
    def BillingInfo(self, BillingInfo):
        self._BillingInfo = BillingInfo

    @property
    def Weight(self):
        """模型权重
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Weight

    @Weight.setter
    def Weight(self, Weight):
        self._Weight = Weight

    @property
    def CreateSource(self):
        """服务的创建来源
AUTO_ML: 来自自动学习的一键发布
DEFAULT: 其他来源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateSource

    @CreateSource.setter
    def CreateSource(self, CreateSource):
        self._CreateSource = CreateSource

    @property
    def Version(self):
        """版本号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Version

    @Version.setter
    def Version(self, Version):
        self._Version = Version

    @property
    def LatestVersion(self):
        """服务组下服务的最高版本号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LatestVersion

    @LatestVersion.setter
    def LatestVersion(self, LatestVersion):
        self._LatestVersion = LatestVersion

    @property
    def BackendServiceId(self):
        """后端的服务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._BackendServiceId

    @BackendServiceId.setter
    def BackendServiceId(self, BackendServiceId):
        self._BackendServiceId = BackendServiceId

    @property
    def ResourceGroupSWType(self):
        """资源组类别 托管 NORMAL，纳管 SW
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType

    @property
    def SourceTaskInfo(self):
        """源任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.SourceTaskInfo`
        """
        return self._SourceTaskInfo

    @SourceTaskInfo.setter
    def SourceTaskInfo(self, SourceTaskInfo):
        self._SourceTaskInfo = SourceTaskInfo

    @property
    def ArchiveTime(self):
        """服务的归档时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ArchiveTime

    @ArchiveTime.setter
    def ArchiveTime(self, ArchiveTime):
        self._ArchiveTime = ArchiveTime

    @property
    def ArchiveStatus(self):
        """服务的归档状态  Waiting 等待归档中，Archived 已归档
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ArchiveStatus

    @ArchiveStatus.setter
    def ArchiveStatus(self, ArchiveStatus):
        self._ArchiveStatus = ArchiveStatus

    @property
    def DeployType(self):
        """服务的部署类型 [STANDARD 标准部署，DIST 分布式多机部署] 默认STANDARD
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DeployType

    @DeployType.setter
    def DeployType(self, DeployType):
        self._DeployType = DeployType

    @property
    def InstancePerReplicas(self):
        """单副本下的实例数，仅在部署类型为DIST时生效，默认1
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstancePerReplicas

    @InstancePerReplicas.setter
    def InstancePerReplicas(self, InstancePerReplicas):
        self._InstancePerReplicas = InstancePerReplicas


    def _deserialize(self, params):
        self._ServiceGroupId = params.get("ServiceGroupId")
        self._ServiceId = params.get("ServiceId")
        self._ServiceGroupName = params.get("ServiceGroupName")
        self._ServiceDescription = params.get("ServiceDescription")
        if params.get("ServiceInfo") is not None:
            self._ServiceInfo = ServiceInfo()
            self._ServiceInfo._deserialize(params.get("ServiceInfo"))
        self._ClusterId = params.get("ClusterId")
        self._Region = params.get("Region")
        self._Namespace = params.get("Namespace")
        self._ChargeType = params.get("ChargeType")
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ResourceGroupName = params.get("ResourceGroupName")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._IngressName = params.get("IngressName")
        self._CreatedBy = params.get("CreatedBy")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._Uin = params.get("Uin")
        self._SubUin = params.get("SubUin")
        self._AppId = params.get("AppId")
        self._BusinessStatus = params.get("BusinessStatus")
        if params.get("ServiceLimit") is not None:
            self._ServiceLimit = ServiceLimit()
            self._ServiceLimit._deserialize(params.get("ServiceLimit"))
        if params.get("ScheduledAction") is not None:
            self._ScheduledAction = ScheduledAction()
            self._ScheduledAction._deserialize(params.get("ScheduledAction"))
        self._CreateFailedReason = params.get("CreateFailedReason")
        self._Status = params.get("Status")
        self._BillingInfo = params.get("BillingInfo")
        self._Weight = params.get("Weight")
        self._CreateSource = params.get("CreateSource")
        self._Version = params.get("Version")
        self._LatestVersion = params.get("LatestVersion")
        self._BackendServiceId = params.get("BackendServiceId")
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        if params.get("SourceTaskInfo") is not None:
            self._SourceTaskInfo = SourceTaskInfo()
            self._SourceTaskInfo._deserialize(params.get("SourceTaskInfo"))
        self._ArchiveTime = params.get("ArchiveTime")
        self._ArchiveStatus = params.get("ArchiveStatus")
        self._DeployType = params.get("DeployType")
        self._InstancePerReplicas = params.get("InstancePerReplicas")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ServiceCallInfo(AbstractModel):
    """服务的调用信息，服务组下唯一

    """

    def __init__(self):
        r"""
        :param _ServiceGroupId: 服务组id
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceGroupId: str
        :param _InnerHttpAddr: 内网http调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type InnerHttpAddr: str
        :param _InnerHttpsAddr: 内网https调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type InnerHttpsAddr: str
        :param _OuterHttpAddr: 内网http调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type OuterHttpAddr: str
        :param _OuterHttpsAddr: 内网https调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type OuterHttpsAddr: str
        :param _AppKey: 调用key
注意：此字段可能返回 null，表示取不到有效值。
        :type AppKey: str
        :param _AppSecret: 调用secret
注意：此字段可能返回 null，表示取不到有效值。
        :type AppSecret: str
        :param _AuthorizationEnable: 鉴权是否开启
注意：此字段可能返回 null，表示取不到有效值。
        :type AuthorizationEnable: bool
        :param _ApiParseStatus: 服务组下api的自动解析状态
注意：此字段可能返回 null，表示取不到有效值。
        :type ApiParseStatus: str
        """
        self._ServiceGroupId = None
        self._InnerHttpAddr = None
        self._InnerHttpsAddr = None
        self._OuterHttpAddr = None
        self._OuterHttpsAddr = None
        self._AppKey = None
        self._AppSecret = None
        self._AuthorizationEnable = None
        self._ApiParseStatus = None

    @property
    def ServiceGroupId(self):
        """服务组id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def InnerHttpAddr(self):
        """内网http调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InnerHttpAddr

    @InnerHttpAddr.setter
    def InnerHttpAddr(self, InnerHttpAddr):
        self._InnerHttpAddr = InnerHttpAddr

    @property
    def InnerHttpsAddr(self):
        """内网https调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InnerHttpsAddr

    @InnerHttpsAddr.setter
    def InnerHttpsAddr(self, InnerHttpsAddr):
        self._InnerHttpsAddr = InnerHttpsAddr

    @property
    def OuterHttpAddr(self):
        """内网http调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._OuterHttpAddr

    @OuterHttpAddr.setter
    def OuterHttpAddr(self, OuterHttpAddr):
        self._OuterHttpAddr = OuterHttpAddr

    @property
    def OuterHttpsAddr(self):
        """内网https调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._OuterHttpsAddr

    @OuterHttpsAddr.setter
    def OuterHttpsAddr(self, OuterHttpsAddr):
        self._OuterHttpsAddr = OuterHttpsAddr

    @property
    def AppKey(self):
        """调用key
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AppKey

    @AppKey.setter
    def AppKey(self, AppKey):
        self._AppKey = AppKey

    @property
    def AppSecret(self):
        """调用secret
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AppSecret

    @AppSecret.setter
    def AppSecret(self, AppSecret):
        self._AppSecret = AppSecret

    @property
    def AuthorizationEnable(self):
        """鉴权是否开启
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._AuthorizationEnable

    @AuthorizationEnable.setter
    def AuthorizationEnable(self, AuthorizationEnable):
        self._AuthorizationEnable = AuthorizationEnable

    @property
    def ApiParseStatus(self):
        """服务组下api的自动解析状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ApiParseStatus

    @ApiParseStatus.setter
    def ApiParseStatus(self, ApiParseStatus):
        self._ApiParseStatus = ApiParseStatus


    def _deserialize(self, params):
        self._ServiceGroupId = params.get("ServiceGroupId")
        self._InnerHttpAddr = params.get("InnerHttpAddr")
        self._InnerHttpsAddr = params.get("InnerHttpsAddr")
        self._OuterHttpAddr = params.get("OuterHttpAddr")
        self._OuterHttpsAddr = params.get("OuterHttpsAddr")
        self._AppKey = params.get("AppKey")
        self._AppSecret = params.get("AppSecret")
        self._AuthorizationEnable = params.get("AuthorizationEnable")
        self._ApiParseStatus = params.get("ApiParseStatus")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ServiceCallInfoV2(AbstractModel):
    """V2版本的服务调用信息

    """

    def __init__(self):
        r"""
        :param _ServiceGroupId: 服务组id
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceGroupId: str
        :param _InternetEndpoint: 服务的公网调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type InternetEndpoint: str
        :param _AuthorizationEnable: 鉴权是否开启
注意：此字段可能返回 null，表示取不到有效值。
        :type AuthorizationEnable: bool
        :param _AuthToken: 鉴权token，仅当AuthorizationEnable为true时有效
注意：此字段可能返回 null，表示取不到有效值。
        :type AuthToken: str
        :param _ApiParseStatus: 服务组下api的自动解析状态
注意：此字段可能返回 null，表示取不到有效值。
        :type ApiParseStatus: str
        :param _DisableInternetEndpoint: 是否关闭公网调用
        :type DisableInternetEndpoint: bool
        """
        self._ServiceGroupId = None
        self._InternetEndpoint = None
        self._AuthorizationEnable = None
        self._AuthToken = None
        self._ApiParseStatus = None
        self._DisableInternetEndpoint = None

    @property
    def ServiceGroupId(self):
        """服务组id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def InternetEndpoint(self):
        """服务的公网调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InternetEndpoint

    @InternetEndpoint.setter
    def InternetEndpoint(self, InternetEndpoint):
        self._InternetEndpoint = InternetEndpoint

    @property
    def AuthorizationEnable(self):
        """鉴权是否开启
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._AuthorizationEnable

    @AuthorizationEnable.setter
    def AuthorizationEnable(self, AuthorizationEnable):
        self._AuthorizationEnable = AuthorizationEnable

    @property
    def AuthToken(self):
        """鉴权token，仅当AuthorizationEnable为true时有效
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AuthToken

    @AuthToken.setter
    def AuthToken(self, AuthToken):
        self._AuthToken = AuthToken

    @property
    def ApiParseStatus(self):
        """服务组下api的自动解析状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ApiParseStatus

    @ApiParseStatus.setter
    def ApiParseStatus(self, ApiParseStatus):
        self._ApiParseStatus = ApiParseStatus

    @property
    def DisableInternetEndpoint(self):
        """是否关闭公网调用
        :rtype: bool
        """
        return self._DisableInternetEndpoint

    @DisableInternetEndpoint.setter
    def DisableInternetEndpoint(self, DisableInternetEndpoint):
        self._DisableInternetEndpoint = DisableInternetEndpoint


    def _deserialize(self, params):
        self._ServiceGroupId = params.get("ServiceGroupId")
        self._InternetEndpoint = params.get("InternetEndpoint")
        self._AuthorizationEnable = params.get("AuthorizationEnable")
        self._AuthToken = params.get("AuthToken")
        self._ApiParseStatus = params.get("ApiParseStatus")
        self._DisableInternetEndpoint = params.get("DisableInternetEndpoint")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ServiceEIP(AbstractModel):
    """服务共享弹性网卡设置

    """

    def __init__(self):
        r"""
        :param _EnableEIP: 是否开启TIONE内网到外部的访问
注意：此字段可能返回 null，表示取不到有效值。
        :type EnableEIP: bool
        :param _VpcId: 用户VpcId
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcId: str
        :param _SubnetId: 用户subnetId
注意：此字段可能返回 null，表示取不到有效值。
        :type SubnetId: str
        :param _VpcCidr: 内部字段
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcCidr: str
        """
        self._EnableEIP = None
        self._VpcId = None
        self._SubnetId = None
        self._VpcCidr = None

    @property
    def EnableEIP(self):
        """是否开启TIONE内网到外部的访问
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._EnableEIP

    @EnableEIP.setter
    def EnableEIP(self, EnableEIP):
        self._EnableEIP = EnableEIP

    @property
    def VpcId(self):
        """用户VpcId
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """用户subnetId
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def VpcCidr(self):
        """内部字段
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VpcCidr

    @VpcCidr.setter
    def VpcCidr(self, VpcCidr):
        self._VpcCidr = VpcCidr


    def _deserialize(self, params):
        self._EnableEIP = params.get("EnableEIP")
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._VpcCidr = params.get("VpcCidr")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ServiceEIPInfo(AbstractModel):
    """共享弹性网卡信息

    """

    def __init__(self):
        r"""
        :param _ServiceId: 服务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceId: str
        :param _VpcId: 用户VpcId
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcId: str
        :param _SubnetId: 用户子网Id
注意：此字段可能返回 null，表示取不到有效值。
        :type SubnetId: str
        """
        self._ServiceId = None
        self._VpcId = None
        self._SubnetId = None

    @property
    def ServiceId(self):
        """服务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId

    @property
    def VpcId(self):
        """用户VpcId
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """用户子网Id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId


    def _deserialize(self, params):
        self._ServiceId = params.get("ServiceId")
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ServiceGroup(AbstractModel):
    """在线服务一个服务组的信息

    """

    def __init__(self):
        r"""
        :param _ServiceGroupId: 服务组id
        :type ServiceGroupId: str
        :param _ServiceGroupName: 服务组名
        :type ServiceGroupName: str
        :param _CreatedBy: 创建者
        :type CreatedBy: str
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        :param _Uin: 主账号
        :type Uin: str
        :param _ServiceCount: 服务组下服务总数
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceCount: int
        :param _RunningServiceCount: 服务组下在运行的服务数量
注意：此字段可能返回 null，表示取不到有效值。
        :type RunningServiceCount: int
        :param _Services: 服务描述
注意：此字段可能返回 null，表示取不到有效值。
        :type Services: list of Service
        :param _Status: 服务组状态，与服务一致
 CREATING 创建中
     CREATE_FAILED 创建失败
     Normal	正常运行中
     Stopped  已停止
     Stopping 停止中
     Abnormal 异常
     Pending 启动中
     Waiting 就绪中
注意：此字段可能返回 null，表示取不到有效值。
        :type Status: str
        :param _Tags: 服务组标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _LatestVersion: 服务组下最高版本
注意：此字段可能返回 null，表示取不到有效值。
        :type LatestVersion: str
        :param _BusinessStatus: 服务的业务状态
CREATING 创建中
     CREATE_FAILED 创建失败
     ARREARS_STOP 因欠费被强制停止
     BILLING 计费中
     WHITELIST_USING 白名单试用中
     WHITELIST_STOP 白名单额度不足
注意：此字段可能返回 null，表示取不到有效值。
        :type BusinessStatus: str
        :param _BillingInfo: 服务的计费信息
注意：此字段可能返回 null，表示取不到有效值。
        :type BillingInfo: str
        :param _CreateSource: 服务的创建来源
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateSource: str
        :param _WeightUpdateStatus: 服务组的权重更新状态 
UPDATING 更新中
     UPDATED 更新成功
     UPDATE_FAILED 更新失败
注意：此字段可能返回 null，表示取不到有效值。
        :type WeightUpdateStatus: str
        :param _ReplicasCount: 服务组下运行的pod数量
注意：此字段可能返回 null，表示取不到有效值。
        :type ReplicasCount: int
        :param _AvailableReplicasCount: 服务组下期望的pod数
注意：此字段可能返回 null，表示取不到有效值。
        :type AvailableReplicasCount: int
        :param _SubUin: 服务组的subuin
        :type SubUin: str
        :param _AppId: 服务组的app_id
        :type AppId: int
        :param _DisableInternetEndpoint: 是否禁用公网调用
        :type DisableInternetEndpoint: bool
        """
        self._ServiceGroupId = None
        self._ServiceGroupName = None
        self._CreatedBy = None
        self._CreateTime = None
        self._UpdateTime = None
        self._Uin = None
        self._ServiceCount = None
        self._RunningServiceCount = None
        self._Services = None
        self._Status = None
        self._Tags = None
        self._LatestVersion = None
        self._BusinessStatus = None
        self._BillingInfo = None
        self._CreateSource = None
        self._WeightUpdateStatus = None
        self._ReplicasCount = None
        self._AvailableReplicasCount = None
        self._SubUin = None
        self._AppId = None
        self._DisableInternetEndpoint = None

    @property
    def ServiceGroupId(self):
        """服务组id
        :rtype: str
        """
        return self._ServiceGroupId

    @ServiceGroupId.setter
    def ServiceGroupId(self, ServiceGroupId):
        self._ServiceGroupId = ServiceGroupId

    @property
    def ServiceGroupName(self):
        """服务组名
        :rtype: str
        """
        return self._ServiceGroupName

    @ServiceGroupName.setter
    def ServiceGroupName(self, ServiceGroupName):
        self._ServiceGroupName = ServiceGroupName

    @property
    def CreatedBy(self):
        """创建者
        :rtype: str
        """
        return self._CreatedBy

    @CreatedBy.setter
    def CreatedBy(self, CreatedBy):
        self._CreatedBy = CreatedBy

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def Uin(self):
        """主账号
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def ServiceCount(self):
        """服务组下服务总数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ServiceCount

    @ServiceCount.setter
    def ServiceCount(self, ServiceCount):
        self._ServiceCount = ServiceCount

    @property
    def RunningServiceCount(self):
        """服务组下在运行的服务数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._RunningServiceCount

    @RunningServiceCount.setter
    def RunningServiceCount(self, RunningServiceCount):
        self._RunningServiceCount = RunningServiceCount

    @property
    def Services(self):
        """服务描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Service
        """
        return self._Services

    @Services.setter
    def Services(self, Services):
        self._Services = Services

    @property
    def Status(self):
        """服务组状态，与服务一致
 CREATING 创建中
     CREATE_FAILED 创建失败
     Normal	正常运行中
     Stopped  已停止
     Stopping 停止中
     Abnormal 异常
     Pending 启动中
     Waiting 就绪中
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Tags(self):
        """服务组标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def LatestVersion(self):
        """服务组下最高版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LatestVersion

    @LatestVersion.setter
    def LatestVersion(self, LatestVersion):
        self._LatestVersion = LatestVersion

    @property
    def BusinessStatus(self):
        """服务的业务状态
CREATING 创建中
     CREATE_FAILED 创建失败
     ARREARS_STOP 因欠费被强制停止
     BILLING 计费中
     WHITELIST_USING 白名单试用中
     WHITELIST_STOP 白名单额度不足
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._BusinessStatus

    @BusinessStatus.setter
    def BusinessStatus(self, BusinessStatus):
        self._BusinessStatus = BusinessStatus

    @property
    def BillingInfo(self):
        """服务的计费信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._BillingInfo

    @BillingInfo.setter
    def BillingInfo(self, BillingInfo):
        self._BillingInfo = BillingInfo

    @property
    def CreateSource(self):
        """服务的创建来源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateSource

    @CreateSource.setter
    def CreateSource(self, CreateSource):
        self._CreateSource = CreateSource

    @property
    def WeightUpdateStatus(self):
        """服务组的权重更新状态 
UPDATING 更新中
     UPDATED 更新成功
     UPDATE_FAILED 更新失败
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._WeightUpdateStatus

    @WeightUpdateStatus.setter
    def WeightUpdateStatus(self, WeightUpdateStatus):
        self._WeightUpdateStatus = WeightUpdateStatus

    @property
    def ReplicasCount(self):
        """服务组下运行的pod数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ReplicasCount

    @ReplicasCount.setter
    def ReplicasCount(self, ReplicasCount):
        self._ReplicasCount = ReplicasCount

    @property
    def AvailableReplicasCount(self):
        """服务组下期望的pod数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._AvailableReplicasCount

    @AvailableReplicasCount.setter
    def AvailableReplicasCount(self, AvailableReplicasCount):
        self._AvailableReplicasCount = AvailableReplicasCount

    @property
    def SubUin(self):
        """服务组的subuin
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def AppId(self):
        """服务组的app_id
        :rtype: int
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId

    @property
    def DisableInternetEndpoint(self):
        """是否禁用公网调用
        :rtype: bool
        """
        return self._DisableInternetEndpoint

    @DisableInternetEndpoint.setter
    def DisableInternetEndpoint(self, DisableInternetEndpoint):
        self._DisableInternetEndpoint = DisableInternetEndpoint


    def _deserialize(self, params):
        self._ServiceGroupId = params.get("ServiceGroupId")
        self._ServiceGroupName = params.get("ServiceGroupName")
        self._CreatedBy = params.get("CreatedBy")
        self._CreateTime = params.get("CreateTime")
        self._UpdateTime = params.get("UpdateTime")
        self._Uin = params.get("Uin")
        self._ServiceCount = params.get("ServiceCount")
        self._RunningServiceCount = params.get("RunningServiceCount")
        if params.get("Services") is not None:
            self._Services = []
            for item in params.get("Services"):
                obj = Service()
                obj._deserialize(item)
                self._Services.append(obj)
        self._Status = params.get("Status")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._LatestVersion = params.get("LatestVersion")
        self._BusinessStatus = params.get("BusinessStatus")
        self._BillingInfo = params.get("BillingInfo")
        self._CreateSource = params.get("CreateSource")
        self._WeightUpdateStatus = params.get("WeightUpdateStatus")
        self._ReplicasCount = params.get("ReplicasCount")
        self._AvailableReplicasCount = params.get("AvailableReplicasCount")
        self._SubUin = params.get("SubUin")
        self._AppId = params.get("AppId")
        self._DisableInternetEndpoint = params.get("DisableInternetEndpoint")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ServiceHistory(AbstractModel):
    """服务历史版本

    """

    def __init__(self):
        r"""
        :param _Revision: 版本
注意：此字段可能返回 null，表示取不到有效值。
        :type Revision: str
        :param _UpdateTime: 更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :type UpdateTime: str
        :param _Image: 镜像
注意：此字段可能返回 null，表示取不到有效值。
        :type Image: str
        :param _ModelFile: 模型文件
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelFile: str
        :param _RawData: 原始数据
注意：此字段可能返回 null，表示取不到有效值。
        :type RawData: str
        """
        self._Revision = None
        self._UpdateTime = None
        self._Image = None
        self._ModelFile = None
        self._RawData = None

    @property
    def Revision(self):
        """版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Revision

    @Revision.setter
    def Revision(self, Revision):
        self._Revision = Revision

    @property
    def UpdateTime(self):
        """更新时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def Image(self):
        """镜像
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Image

    @Image.setter
    def Image(self, Image):
        self._Image = Image

    @property
    def ModelFile(self):
        """模型文件
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelFile

    @ModelFile.setter
    def ModelFile(self, ModelFile):
        self._ModelFile = ModelFile

    @property
    def RawData(self):
        """原始数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._RawData

    @RawData.setter
    def RawData(self, RawData):
        self._RawData = RawData


    def _deserialize(self, params):
        self._Revision = params.get("Revision")
        self._UpdateTime = params.get("UpdateTime")
        self._Image = params.get("Image")
        self._ModelFile = params.get("ModelFile")
        self._RawData = params.get("RawData")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ServiceInfo(AbstractModel):
    """推理服务在集群中的信息

    """

    def __init__(self):
        r"""
        :param _Replicas: 期望运行的Pod数量，停止状态是0
不同计费模式和调节模式下对应关系如下
PREPAID 和 POSTPAID_BY_HOUR:
手动调节模式下对应 实例数量
自动调节模式下对应 基于时间的默认策略的实例数量
HYBRID_PAID:
后付费实例手动调节模式下对应 实例数量
后付费实例自动调节模式下对应 时间策略的默认策略的实例数量
注意：此字段可能返回 null，表示取不到有效值。
        :type Replicas: int
        :param _ImageInfo: 镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _Env: 环境变量
注意：此字段可能返回 null，表示取不到有效值。
        :type Env: list of EnvVar
        :param _Resources: 资源信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Resources: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        :param _InstanceType: 后付费实例对应的机型规格
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceType: str
        :param _ModelInfo: 模型信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelInfo: :class:`tencentcloud.tione.v20211111.models.ModelInfo`
        :param _LogEnable: 是否启用日志
注意：此字段可能返回 null，表示取不到有效值。
        :type LogEnable: bool
        :param _LogConfig: 日志配置
注意：此字段可能返回 null，表示取不到有效值。
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _AuthorizationEnable: 是否开启鉴权
注意：此字段可能返回 null，表示取不到有效值。
        :type AuthorizationEnable: bool
        :param _HorizontalPodAutoscaler: hpa配置
注意：此字段可能返回 null，表示取不到有效值。
        :type HorizontalPodAutoscaler: :class:`tencentcloud.tione.v20211111.models.HorizontalPodAutoscaler`
        :param _Status: 服务的状态描述
注意：此字段可能返回 null，表示取不到有效值。
        :type Status: :class:`tencentcloud.tione.v20211111.models.WorkloadStatus`
        :param _Weight: 权重
注意：此字段可能返回 null，表示取不到有效值。
        :type Weight: int
        :param _ResourceTotal: 资源总量
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceTotal: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        :param _OldReplicas: 历史实例数
注意：此字段可能返回 null，表示取不到有效值。
        :type OldReplicas: int
        :param _HybridBillingPrepaidReplicas: 计费模式[HYBRID_PAID]时生效, 用于标识混合计费模式下的预付费实例数, 若不填则默认为1
注意：此字段可能返回 null，表示取不到有效值。
        :type HybridBillingPrepaidReplicas: int
        :param _OldHybridBillingPrepaidReplicas: 历史 HYBRID_PAID 时的实例数，用户恢复服务
注意：此字段可能返回 null，表示取不到有效值。
        :type OldHybridBillingPrepaidReplicas: int
        :param _ModelHotUpdateEnable: 是否开启模型的热更新。默认不开启
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelHotUpdateEnable: bool
        :param _InstanceAlias: 服务的规格别名
        :type InstanceAlias: str
        :param _ScaleMode: 实例数量调节方式,默认为手动
支持：自动 - "AUTO", 手动 - "MANUAL"
注意：此字段可能返回 null，表示取不到有效值。
        :type ScaleMode: str
        :param _CronScaleJobs: 定时伸缩任务
注意：此字段可能返回 null，表示取不到有效值。
        :type CronScaleJobs: list of CronScaleJob
        :param _ScaleStrategy: 定时伸缩策略
注意：此字段可能返回 null，表示取不到有效值。
        :type ScaleStrategy: str
        :param _ScheduledAction: 定时停止的配置
注意：此字段可能返回 null，表示取不到有效值。
        :type ScheduledAction: :class:`tencentcloud.tione.v20211111.models.ScheduledAction`
        :param _PodList: 实例列表
注意：此字段可能返回 null，表示取不到有效值。
        :type PodList: list of str
        :param _Pods: Pod列表信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Pods: :class:`tencentcloud.tione.v20211111.models.Pod`
        :param _PodInfos: Pod列表信息
注意：此字段可能返回 null，表示取不到有效值。
        :type PodInfos: list of Pod
        :param _ServiceLimit: 服务限速限流相关配置
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceLimit: :class:`tencentcloud.tione.v20211111.models.ServiceLimit`
        :param _BillingStatus: 计费状态，判断当前服务是否处于计费状态中
注意：此字段可能返回 null，表示取不到有效值。
        :type BillingStatus: str
        :param _ModelTurboEnable: 是否开启模型的加速, 仅对StableDiffusion(动态加速)格式的模型有效。
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelTurboEnable: bool
        :param _VolumeMount: 挂载
注意：此字段可能返回 null，表示取不到有效值。
        :type VolumeMount: :class:`tencentcloud.tione.v20211111.models.VolumeMount`
        :param _InferCodeInfo: 推理代码信息
注意：此字段可能返回 null，表示取不到有效值。
        :type InferCodeInfo: :class:`tencentcloud.tione.v20211111.models.InferCodeInfo`
        :param _BillingUnits: 计费单元
注意：此字段可能返回 null，表示取不到有效值。
        :type BillingUnits: list of BillingUint
        :param _Command: 服务的启动命令
注意：此字段可能返回 null，表示取不到有效值。
        :type Command: str
        :param _ServiceEIP: 开启TIONE内网访问外部设置
注意：此字段可能返回 null，表示取不到有效值。
        :type ServiceEIP: :class:`tencentcloud.tione.v20211111.models.ServiceEIP`
        :param _ServicePort: 服务端口，默认为8501
注意：此字段可能返回 null，表示取不到有效值。
        :type ServicePort: int
        :param _TerminationGracePeriodSeconds: 服务的优雅退出时限。单位为秒，默认值为30，最小为1
        :type TerminationGracePeriodSeconds: int
        :param _PreStopCommand: 服务实例停止前执行的命令，执行完毕或执行时间超过优雅退出时限后实例结束
        :type PreStopCommand: list of str
        :param _Roles: 多角色时的角色配置信息
        :type Roles: list of RoleSpec
        """
        self._Replicas = None
        self._ImageInfo = None
        self._Env = None
        self._Resources = None
        self._InstanceType = None
        self._ModelInfo = None
        self._LogEnable = None
        self._LogConfig = None
        self._AuthorizationEnable = None
        self._HorizontalPodAutoscaler = None
        self._Status = None
        self._Weight = None
        self._ResourceTotal = None
        self._OldReplicas = None
        self._HybridBillingPrepaidReplicas = None
        self._OldHybridBillingPrepaidReplicas = None
        self._ModelHotUpdateEnable = None
        self._InstanceAlias = None
        self._ScaleMode = None
        self._CronScaleJobs = None
        self._ScaleStrategy = None
        self._ScheduledAction = None
        self._PodList = None
        self._Pods = None
        self._PodInfos = None
        self._ServiceLimit = None
        self._BillingStatus = None
        self._ModelTurboEnable = None
        self._VolumeMount = None
        self._InferCodeInfo = None
        self._BillingUnits = None
        self._Command = None
        self._ServiceEIP = None
        self._ServicePort = None
        self._TerminationGracePeriodSeconds = None
        self._PreStopCommand = None
        self._Roles = None

    @property
    def Replicas(self):
        """期望运行的Pod数量，停止状态是0
不同计费模式和调节模式下对应关系如下
PREPAID 和 POSTPAID_BY_HOUR:
手动调节模式下对应 实例数量
自动调节模式下对应 基于时间的默认策略的实例数量
HYBRID_PAID:
后付费实例手动调节模式下对应 实例数量
后付费实例自动调节模式下对应 时间策略的默认策略的实例数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Replicas

    @Replicas.setter
    def Replicas(self, Replicas):
        self._Replicas = Replicas

    @property
    def ImageInfo(self):
        """镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def Env(self):
        """环境变量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of EnvVar
        """
        return self._Env

    @Env.setter
    def Env(self, Env):
        self._Env = Env

    @property
    def Resources(self):
        """资源信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        """
        return self._Resources

    @Resources.setter
    def Resources(self, Resources):
        self._Resources = Resources

    @property
    def InstanceType(self):
        """后付费实例对应的机型规格
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def ModelInfo(self):
        """模型信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelInfo`
        """
        return self._ModelInfo

    @ModelInfo.setter
    def ModelInfo(self, ModelInfo):
        self._ModelInfo = ModelInfo

    @property
    def LogEnable(self):
        """是否启用日志
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def LogConfig(self):
        """日志配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def AuthorizationEnable(self):
        """是否开启鉴权
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._AuthorizationEnable

    @AuthorizationEnable.setter
    def AuthorizationEnable(self, AuthorizationEnable):
        self._AuthorizationEnable = AuthorizationEnable

    @property
    def HorizontalPodAutoscaler(self):
        """hpa配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.HorizontalPodAutoscaler`
        """
        return self._HorizontalPodAutoscaler

    @HorizontalPodAutoscaler.setter
    def HorizontalPodAutoscaler(self, HorizontalPodAutoscaler):
        self._HorizontalPodAutoscaler = HorizontalPodAutoscaler

    @property
    def Status(self):
        """服务的状态描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.WorkloadStatus`
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Weight(self):
        """权重
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Weight

    @Weight.setter
    def Weight(self, Weight):
        self._Weight = Weight

    @property
    def ResourceTotal(self):
        """资源总量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        """
        return self._ResourceTotal

    @ResourceTotal.setter
    def ResourceTotal(self, ResourceTotal):
        self._ResourceTotal = ResourceTotal

    @property
    def OldReplicas(self):
        """历史实例数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._OldReplicas

    @OldReplicas.setter
    def OldReplicas(self, OldReplicas):
        self._OldReplicas = OldReplicas

    @property
    def HybridBillingPrepaidReplicas(self):
        """计费模式[HYBRID_PAID]时生效, 用于标识混合计费模式下的预付费实例数, 若不填则默认为1
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._HybridBillingPrepaidReplicas

    @HybridBillingPrepaidReplicas.setter
    def HybridBillingPrepaidReplicas(self, HybridBillingPrepaidReplicas):
        self._HybridBillingPrepaidReplicas = HybridBillingPrepaidReplicas

    @property
    def OldHybridBillingPrepaidReplicas(self):
        """历史 HYBRID_PAID 时的实例数，用户恢复服务
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._OldHybridBillingPrepaidReplicas

    @OldHybridBillingPrepaidReplicas.setter
    def OldHybridBillingPrepaidReplicas(self, OldHybridBillingPrepaidReplicas):
        self._OldHybridBillingPrepaidReplicas = OldHybridBillingPrepaidReplicas

    @property
    def ModelHotUpdateEnable(self):
        """是否开启模型的热更新。默认不开启
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._ModelHotUpdateEnable

    @ModelHotUpdateEnable.setter
    def ModelHotUpdateEnable(self, ModelHotUpdateEnable):
        self._ModelHotUpdateEnable = ModelHotUpdateEnable

    @property
    def InstanceAlias(self):
        """服务的规格别名
        :rtype: str
        """
        return self._InstanceAlias

    @InstanceAlias.setter
    def InstanceAlias(self, InstanceAlias):
        self._InstanceAlias = InstanceAlias

    @property
    def ScaleMode(self):
        """实例数量调节方式,默认为手动
支持：自动 - "AUTO", 手动 - "MANUAL"
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ScaleMode

    @ScaleMode.setter
    def ScaleMode(self, ScaleMode):
        self._ScaleMode = ScaleMode

    @property
    def CronScaleJobs(self):
        """定时伸缩任务
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of CronScaleJob
        """
        return self._CronScaleJobs

    @CronScaleJobs.setter
    def CronScaleJobs(self, CronScaleJobs):
        self._CronScaleJobs = CronScaleJobs

    @property
    def ScaleStrategy(self):
        """定时伸缩策略
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ScaleStrategy

    @ScaleStrategy.setter
    def ScaleStrategy(self, ScaleStrategy):
        self._ScaleStrategy = ScaleStrategy

    @property
    def ScheduledAction(self):
        """定时停止的配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ScheduledAction`
        """
        return self._ScheduledAction

    @ScheduledAction.setter
    def ScheduledAction(self, ScheduledAction):
        self._ScheduledAction = ScheduledAction

    @property
    def PodList(self):
        warnings.warn("parameter `PodList` is deprecated", DeprecationWarning) 

        """实例列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._PodList

    @PodList.setter
    def PodList(self, PodList):
        warnings.warn("parameter `PodList` is deprecated", DeprecationWarning) 

        self._PodList = PodList

    @property
    def Pods(self):
        warnings.warn("parameter `Pods` is deprecated", DeprecationWarning) 

        """Pod列表信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.Pod`
        """
        return self._Pods

    @Pods.setter
    def Pods(self, Pods):
        warnings.warn("parameter `Pods` is deprecated", DeprecationWarning) 

        self._Pods = Pods

    @property
    def PodInfos(self):
        """Pod列表信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Pod
        """
        return self._PodInfos

    @PodInfos.setter
    def PodInfos(self, PodInfos):
        self._PodInfos = PodInfos

    @property
    def ServiceLimit(self):
        """服务限速限流相关配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ServiceLimit`
        """
        return self._ServiceLimit

    @ServiceLimit.setter
    def ServiceLimit(self, ServiceLimit):
        self._ServiceLimit = ServiceLimit

    @property
    def BillingStatus(self):
        """计费状态，判断当前服务是否处于计费状态中
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._BillingStatus

    @BillingStatus.setter
    def BillingStatus(self, BillingStatus):
        self._BillingStatus = BillingStatus

    @property
    def ModelTurboEnable(self):
        """是否开启模型的加速, 仅对StableDiffusion(动态加速)格式的模型有效。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._ModelTurboEnable

    @ModelTurboEnable.setter
    def ModelTurboEnable(self, ModelTurboEnable):
        self._ModelTurboEnable = ModelTurboEnable

    @property
    def VolumeMount(self):
        """挂载
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.VolumeMount`
        """
        return self._VolumeMount

    @VolumeMount.setter
    def VolumeMount(self, VolumeMount):
        self._VolumeMount = VolumeMount

    @property
    def InferCodeInfo(self):
        """推理代码信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.InferCodeInfo`
        """
        return self._InferCodeInfo

    @InferCodeInfo.setter
    def InferCodeInfo(self, InferCodeInfo):
        self._InferCodeInfo = InferCodeInfo

    @property
    def BillingUnits(self):
        """计费单元
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of BillingUint
        """
        return self._BillingUnits

    @BillingUnits.setter
    def BillingUnits(self, BillingUnits):
        self._BillingUnits = BillingUnits

    @property
    def Command(self):
        """服务的启动命令
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Command

    @Command.setter
    def Command(self, Command):
        self._Command = Command

    @property
    def ServiceEIP(self):
        """开启TIONE内网访问外部设置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ServiceEIP`
        """
        return self._ServiceEIP

    @ServiceEIP.setter
    def ServiceEIP(self, ServiceEIP):
        self._ServiceEIP = ServiceEIP

    @property
    def ServicePort(self):
        """服务端口，默认为8501
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ServicePort

    @ServicePort.setter
    def ServicePort(self, ServicePort):
        self._ServicePort = ServicePort

    @property
    def TerminationGracePeriodSeconds(self):
        """服务的优雅退出时限。单位为秒，默认值为30，最小为1
        :rtype: int
        """
        return self._TerminationGracePeriodSeconds

    @TerminationGracePeriodSeconds.setter
    def TerminationGracePeriodSeconds(self, TerminationGracePeriodSeconds):
        self._TerminationGracePeriodSeconds = TerminationGracePeriodSeconds

    @property
    def PreStopCommand(self):
        """服务实例停止前执行的命令，执行完毕或执行时间超过优雅退出时限后实例结束
        :rtype: list of str
        """
        return self._PreStopCommand

    @PreStopCommand.setter
    def PreStopCommand(self, PreStopCommand):
        self._PreStopCommand = PreStopCommand

    @property
    def Roles(self):
        """多角色时的角色配置信息
        :rtype: list of RoleSpec
        """
        return self._Roles

    @Roles.setter
    def Roles(self, Roles):
        self._Roles = Roles


    def _deserialize(self, params):
        self._Replicas = params.get("Replicas")
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        if params.get("Env") is not None:
            self._Env = []
            for item in params.get("Env"):
                obj = EnvVar()
                obj._deserialize(item)
                self._Env.append(obj)
        if params.get("Resources") is not None:
            self._Resources = ResourceInfo()
            self._Resources._deserialize(params.get("Resources"))
        self._InstanceType = params.get("InstanceType")
        if params.get("ModelInfo") is not None:
            self._ModelInfo = ModelInfo()
            self._ModelInfo._deserialize(params.get("ModelInfo"))
        self._LogEnable = params.get("LogEnable")
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        self._AuthorizationEnable = params.get("AuthorizationEnable")
        if params.get("HorizontalPodAutoscaler") is not None:
            self._HorizontalPodAutoscaler = HorizontalPodAutoscaler()
            self._HorizontalPodAutoscaler._deserialize(params.get("HorizontalPodAutoscaler"))
        if params.get("Status") is not None:
            self._Status = WorkloadStatus()
            self._Status._deserialize(params.get("Status"))
        self._Weight = params.get("Weight")
        if params.get("ResourceTotal") is not None:
            self._ResourceTotal = ResourceInfo()
            self._ResourceTotal._deserialize(params.get("ResourceTotal"))
        self._OldReplicas = params.get("OldReplicas")
        self._HybridBillingPrepaidReplicas = params.get("HybridBillingPrepaidReplicas")
        self._OldHybridBillingPrepaidReplicas = params.get("OldHybridBillingPrepaidReplicas")
        self._ModelHotUpdateEnable = params.get("ModelHotUpdateEnable")
        self._InstanceAlias = params.get("InstanceAlias")
        self._ScaleMode = params.get("ScaleMode")
        if params.get("CronScaleJobs") is not None:
            self._CronScaleJobs = []
            for item in params.get("CronScaleJobs"):
                obj = CronScaleJob()
                obj._deserialize(item)
                self._CronScaleJobs.append(obj)
        self._ScaleStrategy = params.get("ScaleStrategy")
        if params.get("ScheduledAction") is not None:
            self._ScheduledAction = ScheduledAction()
            self._ScheduledAction._deserialize(params.get("ScheduledAction"))
        self._PodList = params.get("PodList")
        if params.get("Pods") is not None:
            self._Pods = Pod()
            self._Pods._deserialize(params.get("Pods"))
        if params.get("PodInfos") is not None:
            self._PodInfos = []
            for item in params.get("PodInfos"):
                obj = Pod()
                obj._deserialize(item)
                self._PodInfos.append(obj)
        if params.get("ServiceLimit") is not None:
            self._ServiceLimit = ServiceLimit()
            self._ServiceLimit._deserialize(params.get("ServiceLimit"))
        self._BillingStatus = params.get("BillingStatus")
        self._ModelTurboEnable = params.get("ModelTurboEnable")
        if params.get("VolumeMount") is not None:
            self._VolumeMount = VolumeMount()
            self._VolumeMount._deserialize(params.get("VolumeMount"))
        if params.get("InferCodeInfo") is not None:
            self._InferCodeInfo = InferCodeInfo()
            self._InferCodeInfo._deserialize(params.get("InferCodeInfo"))
        if params.get("BillingUnits") is not None:
            self._BillingUnits = []
            for item in params.get("BillingUnits"):
                obj = BillingUint()
                obj._deserialize(item)
                self._BillingUnits.append(obj)
        self._Command = params.get("Command")
        if params.get("ServiceEIP") is not None:
            self._ServiceEIP = ServiceEIP()
            self._ServiceEIP._deserialize(params.get("ServiceEIP"))
        self._ServicePort = params.get("ServicePort")
        self._TerminationGracePeriodSeconds = params.get("TerminationGracePeriodSeconds")
        self._PreStopCommand = params.get("PreStopCommand")
        if params.get("Roles") is not None:
            self._Roles = []
            for item in params.get("Roles"):
                obj = RoleSpec()
                obj._deserialize(item)
                self._Roles.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class ServiceLimit(AbstractModel):
    """服务的限流限速等配置

    """

    def __init__(self):
        r"""
        :param _EnableInstanceRpsLimit: 是否开启实例层面限流限速，true or false。true 则 InstanceRpsLimit 必填， false 则 InstanceRpsLimit 不生效
        :type EnableInstanceRpsLimit: bool
        :param _InstanceRpsLimit: 每个服务实例的 request per second 限速, 0 为不限流
        :type InstanceRpsLimit: int
        :param _EnableInstanceReqLimit: 是否开启单实例最大并发数限制，true or false。true 则 InstanceReqLimit 必填， false 则 InstanceReqLimit 不生效
        :type EnableInstanceReqLimit: bool
        :param _InstanceReqLimit: 每个服务实例的最大并发
        :type InstanceReqLimit: int
        """
        self._EnableInstanceRpsLimit = None
        self._InstanceRpsLimit = None
        self._EnableInstanceReqLimit = None
        self._InstanceReqLimit = None

    @property
    def EnableInstanceRpsLimit(self):
        """是否开启实例层面限流限速，true or false。true 则 InstanceRpsLimit 必填， false 则 InstanceRpsLimit 不生效
        :rtype: bool
        """
        return self._EnableInstanceRpsLimit

    @EnableInstanceRpsLimit.setter
    def EnableInstanceRpsLimit(self, EnableInstanceRpsLimit):
        self._EnableInstanceRpsLimit = EnableInstanceRpsLimit

    @property
    def InstanceRpsLimit(self):
        """每个服务实例的 request per second 限速, 0 为不限流
        :rtype: int
        """
        return self._InstanceRpsLimit

    @InstanceRpsLimit.setter
    def InstanceRpsLimit(self, InstanceRpsLimit):
        self._InstanceRpsLimit = InstanceRpsLimit

    @property
    def EnableInstanceReqLimit(self):
        """是否开启单实例最大并发数限制，true or false。true 则 InstanceReqLimit 必填， false 则 InstanceReqLimit 不生效
        :rtype: bool
        """
        return self._EnableInstanceReqLimit

    @EnableInstanceReqLimit.setter
    def EnableInstanceReqLimit(self, EnableInstanceReqLimit):
        self._EnableInstanceReqLimit = EnableInstanceReqLimit

    @property
    def InstanceReqLimit(self):
        """每个服务实例的最大并发
        :rtype: int
        """
        return self._InstanceReqLimit

    @InstanceReqLimit.setter
    def InstanceReqLimit(self, InstanceReqLimit):
        self._InstanceReqLimit = InstanceReqLimit


    def _deserialize(self, params):
        self._EnableInstanceRpsLimit = params.get("EnableInstanceRpsLimit")
        self._InstanceRpsLimit = params.get("InstanceRpsLimit")
        self._EnableInstanceReqLimit = params.get("EnableInstanceReqLimit")
        self._InstanceReqLimit = params.get("InstanceReqLimit")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SetRenewBillingResourceFlagRequest(AbstractModel):
    """SetRenewBillingResourceFlag请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ResourceIds: 资源组节点id列表
注意: 单次最多100个
        :type ResourceIds: list of str
        :param _AutoRenewFlag: 自动续费标识
注意：此字段为枚举值
说明：
NOTIFY_AND_MANUAL_RENEW：手动续费(取消自动续费)且到期通知
NOTIFY_AND_AUTO_RENEW：自动续费且到期通知
DISABLE_NOTIFY_AND_MANUAL_RENEW：手动续费(取消自动续费)且到期不通知
        :type AutoRenewFlag: str
        :param _ResourceGroupId: 资源组id
        :type ResourceGroupId: str
        """
        self._ResourceIds = None
        self._AutoRenewFlag = None
        self._ResourceGroupId = None

    @property
    def ResourceIds(self):
        """资源组节点id列表
注意: 单次最多100个
        :rtype: list of str
        """
        return self._ResourceIds

    @ResourceIds.setter
    def ResourceIds(self, ResourceIds):
        self._ResourceIds = ResourceIds

    @property
    def AutoRenewFlag(self):
        """自动续费标识
注意：此字段为枚举值
说明：
NOTIFY_AND_MANUAL_RENEW：手动续费(取消自动续费)且到期通知
NOTIFY_AND_AUTO_RENEW：自动续费且到期通知
DISABLE_NOTIFY_AND_MANUAL_RENEW：手动续费(取消自动续费)且到期不通知
        :rtype: str
        """
        return self._AutoRenewFlag

    @AutoRenewFlag.setter
    def AutoRenewFlag(self, AutoRenewFlag):
        self._AutoRenewFlag = AutoRenewFlag

    @property
    def ResourceGroupId(self):
        """资源组id
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId


    def _deserialize(self, params):
        self._ResourceIds = params.get("ResourceIds")
        self._AutoRenewFlag = params.get("AutoRenewFlag")
        self._ResourceGroupId = params.get("ResourceGroupId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SetRenewBillingResourceFlagResponse(AbstractModel):
    """SetRenewBillingResourceFlag返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FailResources: 失败节点及失败详情
注意：此字段可能返回 null，表示取不到有效值。
        :type FailResources: list of FailResource
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FailResources = None
        self._RequestId = None

    @property
    def FailResources(self):
        """失败节点及失败详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of FailResource
        """
        return self._FailResources

    @FailResources.setter
    def FailResources(self, FailResources):
        self._FailResources = FailResources

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("FailResources") is not None:
            self._FailResources = []
            for item in params.get("FailResources"):
                obj = FailResource()
                obj._deserialize(item)
                self._FailResources.append(obj)
        self._RequestId = params.get("RequestId")


class SidecarSpec(AbstractModel):
    """sidecar容器配置

    """

    def __init__(self):
        r"""
        :param _ImageInfo: 镜像配置
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        self._ImageInfo = None

    @property
    def ImageInfo(self):
        """镜像配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo


    def _deserialize(self, params):
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SimpleCFSConfig(AbstractModel):
    """评测CFS数据结构

    """

    def __init__(self):
        r"""
        :param _Id: cfs的实例的ID
        :type Id: str
        :param _Path: 存储的路径
        :type Path: str
        :param _Type: 评测集类型
        :type Type: str
        """
        self._Id = None
        self._Path = None
        self._Type = None

    @property
    def Id(self):
        """cfs的实例的ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Path(self):
        """存储的路径
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path

    @property
    def Type(self):
        """评测集类型
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Path = params.get("Path")
        self._Type = params.get("Type")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Source(AbstractModel):
    """引用源

    """

    def __init__(self):
        r"""
        :param _Keyword: 文章名
注意：此字段可能返回 null，表示取不到有效值。
        :type Keyword: str
        :param _Content: 文章内容
注意：此字段可能返回 null，表示取不到有效值。
        :type Content: str
        """
        self._Keyword = None
        self._Content = None

    @property
    def Keyword(self):
        """文章名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Keyword

    @Keyword.setter
    def Keyword(self, Keyword):
        self._Keyword = Keyword

    @property
    def Content(self):
        """文章内容
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Content

    @Content.setter
    def Content(self, Content):
        self._Content = Content


    def _deserialize(self, params):
        self._Keyword = params.get("Keyword")
        self._Content = params.get("Content")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SourceInfo(AbstractModel):
    """来源信息

    """

    def __init__(self):
        r"""
        :param _Type: 1: 数据构建
注意：此字段可能返回 null，表示取不到有效值。
        :type Type: int
        :param _SourceId: 来源ID
注意：此字段可能返回 null，表示取不到有效值。
        :type SourceId: str
        :param _SourceName: 来源名字，可能为空
注意：此字段可能返回 null，表示取不到有效值。
        :type SourceName: str
        """
        self._Type = None
        self._SourceId = None
        self._SourceName = None

    @property
    def Type(self):
        """1: 数据构建
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def SourceId(self):
        """来源ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SourceId

    @SourceId.setter
    def SourceId(self, SourceId):
        self._SourceId = SourceId

    @property
    def SourceName(self):
        """来源名字，可能为空
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SourceName

    @SourceName.setter
    def SourceName(self, SourceName):
        self._SourceName = SourceName


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._SourceId = params.get("SourceId")
        self._SourceName = params.get("SourceName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SourceTaskInfo(AbstractModel):
    """任务的源信息

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _TaskName: 任务名
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskName: str
        :param _TaskType: 任务类别
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskType: str
        """
        self._TaskId = None
        self._TaskName = None
        self._TaskType = None

    @property
    def TaskId(self):
        """任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """任务名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def TaskType(self):
        """任务类别
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        self._TaskType = params.get("TaskType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Spec(AbstractModel):
    """计费项内容

    """

    def __init__(self):
        r"""
        :param _SpecId: 计费项标签
        :type SpecId: str
        :param _SpecName: 计费项名称
        :type SpecName: str
        :param _SpecAlias: 计费项显示名称
        :type SpecAlias: str
        :param _Available: 是否售罄
        :type Available: bool
        :param _AvailableRegion: 当前资源售罄时，可用的区域有哪些
        :type AvailableRegion: list of str
        :param _SpecFeatures: 当前计费项支持的特性
注意：此字段可能返回 null，表示取不到有效值。
        :type SpecFeatures: list of str
        :param _SpecType: 计费项类型
注意：此字段可能返回 null，表示取不到有效值。
        :type SpecType: str
        :param _GpuType: GPU类型
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuType: str
        :param _IsByYear: 是否是包年计费项
        :type IsByYear: bool
        :param _IsExclusiveSale: 是否是包销计费项
        :type IsExclusiveSale: bool
        :param _Pid: 计费项pid
注意：此字段可能返回 null，表示取不到有效值。
        :type Pid: str
        :param _CategoryId: 计费项CategoryId
注意：此字段可能返回 null，表示取不到有效值。
        :type CategoryId: str
        :param _Cpu: CPU核数; 单位为1/1000核，比如100表示0.1核
注意：此字段可能返回 null，表示取不到有效值。
        :type Cpu: int
        :param _Memory: 内存；单位为1MB
注意：此字段可能返回 null，表示取不到有效值。
        :type Memory: int
        :param _Gpu: 总卡数；单位为1/100卡，比如100代表1卡
注意：此字段可能返回 null，表示取不到有效值。
        :type Gpu: int
        :param _GpuMemory: 显存；单位为1/100GB，比如100代表1GB
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuMemory: int
        """
        self._SpecId = None
        self._SpecName = None
        self._SpecAlias = None
        self._Available = None
        self._AvailableRegion = None
        self._SpecFeatures = None
        self._SpecType = None
        self._GpuType = None
        self._IsByYear = None
        self._IsExclusiveSale = None
        self._Pid = None
        self._CategoryId = None
        self._Cpu = None
        self._Memory = None
        self._Gpu = None
        self._GpuMemory = None

    @property
    def SpecId(self):
        """计费项标签
        :rtype: str
        """
        return self._SpecId

    @SpecId.setter
    def SpecId(self, SpecId):
        self._SpecId = SpecId

    @property
    def SpecName(self):
        """计费项名称
        :rtype: str
        """
        return self._SpecName

    @SpecName.setter
    def SpecName(self, SpecName):
        self._SpecName = SpecName

    @property
    def SpecAlias(self):
        """计费项显示名称
        :rtype: str
        """
        return self._SpecAlias

    @SpecAlias.setter
    def SpecAlias(self, SpecAlias):
        self._SpecAlias = SpecAlias

    @property
    def Available(self):
        """是否售罄
        :rtype: bool
        """
        return self._Available

    @Available.setter
    def Available(self, Available):
        self._Available = Available

    @property
    def AvailableRegion(self):
        """当前资源售罄时，可用的区域有哪些
        :rtype: list of str
        """
        return self._AvailableRegion

    @AvailableRegion.setter
    def AvailableRegion(self, AvailableRegion):
        self._AvailableRegion = AvailableRegion

    @property
    def SpecFeatures(self):
        """当前计费项支持的特性
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._SpecFeatures

    @SpecFeatures.setter
    def SpecFeatures(self, SpecFeatures):
        self._SpecFeatures = SpecFeatures

    @property
    def SpecType(self):
        """计费项类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SpecType

    @SpecType.setter
    def SpecType(self, SpecType):
        self._SpecType = SpecType

    @property
    def GpuType(self):
        """GPU类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType

    @property
    def IsByYear(self):
        """是否是包年计费项
        :rtype: bool
        """
        return self._IsByYear

    @IsByYear.setter
    def IsByYear(self, IsByYear):
        self._IsByYear = IsByYear

    @property
    def IsExclusiveSale(self):
        """是否是包销计费项
        :rtype: bool
        """
        return self._IsExclusiveSale

    @IsExclusiveSale.setter
    def IsExclusiveSale(self, IsExclusiveSale):
        self._IsExclusiveSale = IsExclusiveSale

    @property
    def Pid(self):
        """计费项pid
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Pid

    @Pid.setter
    def Pid(self, Pid):
        self._Pid = Pid

    @property
    def CategoryId(self):
        """计费项CategoryId
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CategoryId

    @CategoryId.setter
    def CategoryId(self, CategoryId):
        self._CategoryId = CategoryId

    @property
    def Cpu(self):
        """CPU核数; 单位为1/1000核，比如100表示0.1核
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Cpu

    @Cpu.setter
    def Cpu(self, Cpu):
        self._Cpu = Cpu

    @property
    def Memory(self):
        """内存；单位为1MB
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Memory

    @Memory.setter
    def Memory(self, Memory):
        self._Memory = Memory

    @property
    def Gpu(self):
        """总卡数；单位为1/100卡，比如100代表1卡
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Gpu

    @Gpu.setter
    def Gpu(self, Gpu):
        self._Gpu = Gpu

    @property
    def GpuMemory(self):
        """显存；单位为1/100GB，比如100代表1GB
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._GpuMemory

    @GpuMemory.setter
    def GpuMemory(self, GpuMemory):
        self._GpuMemory = GpuMemory


    def _deserialize(self, params):
        self._SpecId = params.get("SpecId")
        self._SpecName = params.get("SpecName")
        self._SpecAlias = params.get("SpecAlias")
        self._Available = params.get("Available")
        self._AvailableRegion = params.get("AvailableRegion")
        self._SpecFeatures = params.get("SpecFeatures")
        self._SpecType = params.get("SpecType")
        self._GpuType = params.get("GpuType")
        self._IsByYear = params.get("IsByYear")
        self._IsExclusiveSale = params.get("IsExclusiveSale")
        self._Pid = params.get("Pid")
        self._CategoryId = params.get("CategoryId")
        self._Cpu = params.get("Cpu")
        self._Memory = params.get("Memory")
        self._Gpu = params.get("Gpu")
        self._GpuMemory = params.get("GpuMemory")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SpecPrice(AbstractModel):
    """计费项询价结果

    """

    def __init__(self):
        r"""
        :param _SpecName: 计费项名称
        :type SpecName: str
        :param _TotalCost: 原价，单位：分。最大值42亿，超过则返回0
        :type TotalCost: int
        :param _RealTotalCost: 优惠后的价格，单位：分
        :type RealTotalCost: int
        :param _SpecCount: 计费项数量
        :type SpecCount: int
        """
        self._SpecName = None
        self._TotalCost = None
        self._RealTotalCost = None
        self._SpecCount = None

    @property
    def SpecName(self):
        """计费项名称
        :rtype: str
        """
        return self._SpecName

    @SpecName.setter
    def SpecName(self, SpecName):
        self._SpecName = SpecName

    @property
    def TotalCost(self):
        """原价，单位：分。最大值42亿，超过则返回0
        :rtype: int
        """
        return self._TotalCost

    @TotalCost.setter
    def TotalCost(self, TotalCost):
        self._TotalCost = TotalCost

    @property
    def RealTotalCost(self):
        """优惠后的价格，单位：分
        :rtype: int
        """
        return self._RealTotalCost

    @RealTotalCost.setter
    def RealTotalCost(self, RealTotalCost):
        self._RealTotalCost = RealTotalCost

    @property
    def SpecCount(self):
        """计费项数量
        :rtype: int
        """
        return self._SpecCount

    @SpecCount.setter
    def SpecCount(self, SpecCount):
        self._SpecCount = SpecCount


    def _deserialize(self, params):
        self._SpecName = params.get("SpecName")
        self._TotalCost = params.get("TotalCost")
        self._RealTotalCost = params.get("RealTotalCost")
        self._SpecCount = params.get("SpecCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SpecTemp(AbstractModel):
    """规格模版

    """

    def __init__(self):
        r"""
        :param _Name: 规格模版名称
        :type Name: str
        :param _Cpu: 默认取值1.0，范围0.0-10000.0，步长为0.1
        :type Cpu: float
        :param _Memory: 单位G，默认取值1.00，范围0.25-1024000.00，步长为0.25
        :type Memory: float
        :param _Id: 规格模版id，新增可不传，修改必传
        :type Id: str
        :param _GpuType: 卡型号
        :type GpuType: str
        :param _Gpu: 默认取值0.0，范围0.0-1025，步长为0.1（取值在0-1之间时）和1（取值大于等于1时）
        :type Gpu: float
        :param _Available: 规格模版是否资源充足
注意：此字段可能返回 null，表示取不到有效值。
        :type Available: bool
        """
        self._Name = None
        self._Cpu = None
        self._Memory = None
        self._Id = None
        self._GpuType = None
        self._Gpu = None
        self._Available = None

    @property
    def Name(self):
        """规格模版名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Cpu(self):
        """默认取值1.0，范围0.0-10000.0，步长为0.1
        :rtype: float
        """
        return self._Cpu

    @Cpu.setter
    def Cpu(self, Cpu):
        self._Cpu = Cpu

    @property
    def Memory(self):
        """单位G，默认取值1.00，范围0.25-1024000.00，步长为0.25
        :rtype: float
        """
        return self._Memory

    @Memory.setter
    def Memory(self, Memory):
        self._Memory = Memory

    @property
    def Id(self):
        """规格模版id，新增可不传，修改必传
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def GpuType(self):
        """卡型号
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType

    @property
    def Gpu(self):
        """默认取值0.0，范围0.0-1025，步长为0.1（取值在0-1之间时）和1（取值大于等于1时）
        :rtype: float
        """
        return self._Gpu

    @Gpu.setter
    def Gpu(self, Gpu):
        self._Gpu = Gpu

    @property
    def Available(self):
        """规格模版是否资源充足
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._Available

    @Available.setter
    def Available(self, Available):
        self._Available = Available


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Cpu = params.get("Cpu")
        self._Memory = params.get("Memory")
        self._Id = params.get("Id")
        self._GpuType = params.get("GpuType")
        self._Gpu = params.get("Gpu")
        self._Available = params.get("Available")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SpecUnit(AbstractModel):
    """计费项询价单元

    """

    def __init__(self):
        r"""
        :param _SpecName: 计费项名称
        :type SpecName: str
        :param _SpecCount: 计费项数量,建议不超过100万
        :type SpecCount: int
        """
        self._SpecName = None
        self._SpecCount = None

    @property
    def SpecName(self):
        """计费项名称
        :rtype: str
        """
        return self._SpecName

    @SpecName.setter
    def SpecName(self, SpecName):
        self._SpecName = SpecName

    @property
    def SpecCount(self):
        """计费项数量,建议不超过100万
        :rtype: int
        """
        return self._SpecCount

    @SpecCount.setter
    def SpecCount(self, SpecCount):
        self._SpecCount = SpecCount


    def _deserialize(self, params):
        self._SpecName = params.get("SpecName")
        self._SpecCount = params.get("SpecCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StartAutoMLEvaluationTaskRequest(AbstractModel):
    """StartAutoMLEvaluationTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 待启动评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _TestDatasetIds: 评测数据集列表
        :type TestDatasetIds: list of str
        :param _TestDatasetLabels: 评测标签列表
        :type TestDatasetLabels: list of str
        :param _DataSource: 数据来源，可选USER_DATASET（用户数据集）、EXAMPLE_DATASET（示例数据集）、COS_PATH（COS路径）
        :type DataSource: str
        :param _TestDatasetCosPathInfo: 评测数据COS信息
        :type TestDatasetCosPathInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _EvaluationResourceConfig: 评测任务的资源配置
        :type EvaluationResourceConfig: :class:`tencentcloud.tione.v20211111.models.TrainResourceConfig`
        """
        self._AutoMLTaskId = None
        self._TestDatasetIds = None
        self._TestDatasetLabels = None
        self._DataSource = None
        self._TestDatasetCosPathInfo = None
        self._EvaluationResourceConfig = None

    @property
    def AutoMLTaskId(self):
        """待启动评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def TestDatasetIds(self):
        """评测数据集列表
        :rtype: list of str
        """
        return self._TestDatasetIds

    @TestDatasetIds.setter
    def TestDatasetIds(self, TestDatasetIds):
        self._TestDatasetIds = TestDatasetIds

    @property
    def TestDatasetLabels(self):
        """评测标签列表
        :rtype: list of str
        """
        return self._TestDatasetLabels

    @TestDatasetLabels.setter
    def TestDatasetLabels(self, TestDatasetLabels):
        self._TestDatasetLabels = TestDatasetLabels

    @property
    def DataSource(self):
        """数据来源，可选USER_DATASET（用户数据集）、EXAMPLE_DATASET（示例数据集）、COS_PATH（COS路径）
        :rtype: str
        """
        return self._DataSource

    @DataSource.setter
    def DataSource(self, DataSource):
        self._DataSource = DataSource

    @property
    def TestDatasetCosPathInfo(self):
        """评测数据COS信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._TestDatasetCosPathInfo

    @TestDatasetCosPathInfo.setter
    def TestDatasetCosPathInfo(self, TestDatasetCosPathInfo):
        self._TestDatasetCosPathInfo = TestDatasetCosPathInfo

    @property
    def EvaluationResourceConfig(self):
        """评测任务的资源配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.TrainResourceConfig`
        """
        return self._EvaluationResourceConfig

    @EvaluationResourceConfig.setter
    def EvaluationResourceConfig(self, EvaluationResourceConfig):
        self._EvaluationResourceConfig = EvaluationResourceConfig


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._TestDatasetIds = params.get("TestDatasetIds")
        self._TestDatasetLabels = params.get("TestDatasetLabels")
        self._DataSource = params.get("DataSource")
        if params.get("TestDatasetCosPathInfo") is not None:
            self._TestDatasetCosPathInfo = CosPathInfo()
            self._TestDatasetCosPathInfo._deserialize(params.get("TestDatasetCosPathInfo"))
        if params.get("EvaluationResourceConfig") is not None:
            self._EvaluationResourceConfig = TrainResourceConfig()
            self._EvaluationResourceConfig._deserialize(params.get("EvaluationResourceConfig"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StartAutoMLEvaluationTaskResponse(AbstractModel):
    """StartAutoMLEvaluationTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 启动的评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationTaskId: str
        :param _AsyncTaskId: 异步任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type AsyncTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._AsyncTaskId = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """启动的评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def AsyncTaskId(self):
        """异步任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AsyncTaskId

    @AsyncTaskId.setter
    def AsyncTaskId(self, AsyncTaskId):
        self._AsyncTaskId = AsyncTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._AsyncTaskId = params.get("AsyncTaskId")
        self._RequestId = params.get("RequestId")


class StartAutoMLTaskTrainRequest(AbstractModel):
    """StartAutoMLTaskTrain请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _TrainTaskId: 训练任务ID
        :type TrainTaskId: str
        """
        self._AutoMLTaskId = None
        self._TrainTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def TrainTaskId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._TrainTaskId = params.get("TrainTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StartAutoMLTaskTrainResponse(AbstractModel):
    """StartAutoMLTaskTrain返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _TrainTaskId: 训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskId: str
        :param _TrainTaskStatus: 训练任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskStatus: str
        :param _AsyncTaskId: 异步任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type AsyncTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._TrainTaskId = None
        self._TrainTaskStatus = None
        self._AsyncTaskId = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def TrainTaskId(self):
        """训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId

    @property
    def TrainTaskStatus(self):
        """训练任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainTaskStatus

    @TrainTaskStatus.setter
    def TrainTaskStatus(self, TrainTaskStatus):
        self._TrainTaskStatus = TrainTaskStatus

    @property
    def AsyncTaskId(self):
        """异步任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AsyncTaskId

    @AsyncTaskId.setter
    def AsyncTaskId(self, AsyncTaskId):
        self._AsyncTaskId = AsyncTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._TrainTaskId = params.get("TrainTaskId")
        self._TrainTaskStatus = params.get("TrainTaskStatus")
        self._AsyncTaskId = params.get("AsyncTaskId")
        self._RequestId = params.get("RequestId")


class StartCmdInfo(AbstractModel):
    """启动命令信息

    """

    def __init__(self):
        r"""
        :param _StartCmd: 启动命令
        :type StartCmd: str
        :param _PsStartCmd: ps启动命令
        :type PsStartCmd: str
        :param _WorkerStartCmd: worker启动命令
        :type WorkerStartCmd: str
        """
        self._StartCmd = None
        self._PsStartCmd = None
        self._WorkerStartCmd = None

    @property
    def StartCmd(self):
        """启动命令
        :rtype: str
        """
        return self._StartCmd

    @StartCmd.setter
    def StartCmd(self, StartCmd):
        self._StartCmd = StartCmd

    @property
    def PsStartCmd(self):
        """ps启动命令
        :rtype: str
        """
        return self._PsStartCmd

    @PsStartCmd.setter
    def PsStartCmd(self, PsStartCmd):
        self._PsStartCmd = PsStartCmd

    @property
    def WorkerStartCmd(self):
        """worker启动命令
        :rtype: str
        """
        return self._WorkerStartCmd

    @WorkerStartCmd.setter
    def WorkerStartCmd(self, WorkerStartCmd):
        self._WorkerStartCmd = WorkerStartCmd


    def _deserialize(self, params):
        self._StartCmd = params.get("StartCmd")
        self._PsStartCmd = params.get("PsStartCmd")
        self._WorkerStartCmd = params.get("WorkerStartCmd")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StartLightEvalServiceRequest(AbstractModel):
    """StartLightEvalService请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 训练任务ID
        :type TaskId: str
        :param _CheckpointId: Checkpoint 的唯一 ID
        :type CheckpointId: str
        :param _EMSCreateServiceArgs: 调用 EMS 创建服务接口的参数
        :type EMSCreateServiceArgs: :class:`tencentcloud.tione.v20211111.models.EMSCreateServiceArgs`
        """
        self._TaskId = None
        self._CheckpointId = None
        self._EMSCreateServiceArgs = None

    @property
    def TaskId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CheckpointId(self):
        """Checkpoint 的唯一 ID
        :rtype: str
        """
        return self._CheckpointId

    @CheckpointId.setter
    def CheckpointId(self, CheckpointId):
        self._CheckpointId = CheckpointId

    @property
    def EMSCreateServiceArgs(self):
        """调用 EMS 创建服务接口的参数
        :rtype: :class:`tencentcloud.tione.v20211111.models.EMSCreateServiceArgs`
        """
        return self._EMSCreateServiceArgs

    @EMSCreateServiceArgs.setter
    def EMSCreateServiceArgs(self, EMSCreateServiceArgs):
        self._EMSCreateServiceArgs = EMSCreateServiceArgs


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._CheckpointId = params.get("CheckpointId")
        if params.get("EMSCreateServiceArgs") is not None:
            self._EMSCreateServiceArgs = EMSCreateServiceArgs()
            self._EMSCreateServiceArgs._deserialize(params.get("EMSCreateServiceArgs"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StartLightEvalServiceResponse(AbstractModel):
    """StartLightEvalService返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class StartNotebookRequest(AbstractModel):
    """StartNotebook请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: notebook id
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """notebook id
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StartNotebookResponse(AbstractModel):
    """StartNotebook返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class StartTrainingTaskRequest(AbstractModel):
    """StartTrainingTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: 训练任务ID
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """训练任务ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StartTrainingTaskResponse(AbstractModel):
    """StartTrainingTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class StatefulSetCondition(AbstractModel):
    """实例状况

    """

    def __init__(self):
        r"""
        :param _Message: 信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Message: str
        :param _Reason: 原因
注意：此字段可能返回 null，表示取不到有效值。
        :type Reason: str
        :param _Status: Status of the condition, one of True, False, Unknown.
注意：此字段可能返回 null，表示取不到有效值。
        :type Status: str
        :param _Type: 类型
注意：此字段可能返回 null，表示取不到有效值。
        :type Type: str
        :param _LastTransitionTime: 上次更新的时间
注意：此字段可能返回 null，表示取不到有效值。
        :type LastTransitionTime: str
        :param _LastUpdateTime: 上次更新的时间
注意：此字段可能返回 null，表示取不到有效值。
        :type LastUpdateTime: str
        """
        self._Message = None
        self._Reason = None
        self._Status = None
        self._Type = None
        self._LastTransitionTime = None
        self._LastUpdateTime = None

    @property
    def Message(self):
        """信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message

    @property
    def Reason(self):
        """原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Reason

    @Reason.setter
    def Reason(self, Reason):
        self._Reason = Reason

    @property
    def Status(self):
        """Status of the condition, one of True, False, Unknown.
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def Type(self):
        """类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def LastTransitionTime(self):
        """上次更新的时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LastTransitionTime

    @LastTransitionTime.setter
    def LastTransitionTime(self, LastTransitionTime):
        self._LastTransitionTime = LastTransitionTime

    @property
    def LastUpdateTime(self):
        """上次更新的时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LastUpdateTime

    @LastUpdateTime.setter
    def LastUpdateTime(self, LastUpdateTime):
        self._LastUpdateTime = LastUpdateTime


    def _deserialize(self, params):
        self._Message = params.get("Message")
        self._Reason = params.get("Reason")
        self._Status = params.get("Status")
        self._Type = params.get("Type")
        self._LastTransitionTime = params.get("LastTransitionTime")
        self._LastUpdateTime = params.get("LastUpdateTime")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopAutoMLEMSTaskRequest(AbstractModel):
    """StopAutoMLEMSTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 发布模型服务创建任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EMSTaskId: 发布模型服务任务id
        :type EMSTaskId: str
        """
        self._AutoMLTaskId = None
        self._EMSTaskId = None

    @property
    def AutoMLTaskId(self):
        """发布模型服务创建任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EMSTaskId(self):
        """发布模型服务任务id
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EMSTaskId = params.get("EMSTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopAutoMLEMSTaskResponse(AbstractModel):
    """StopAutoMLEMSTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 发布模型服务创建任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EMSTaskId: 发布模型服务任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type EMSTaskId: str
        :param _EMSTaskStatus: 模型服务状态
注意：此字段可能返回 null，表示取不到有效值。
        :type EMSTaskStatus: str
        :param _AsyncTaskId: 异步任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type AsyncTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EMSTaskId = None
        self._EMSTaskStatus = None
        self._AsyncTaskId = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """发布模型服务创建任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EMSTaskId(self):
        """发布模型服务任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EMSTaskId

    @EMSTaskId.setter
    def EMSTaskId(self, EMSTaskId):
        self._EMSTaskId = EMSTaskId

    @property
    def EMSTaskStatus(self):
        """模型服务状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EMSTaskStatus

    @EMSTaskStatus.setter
    def EMSTaskStatus(self, EMSTaskStatus):
        self._EMSTaskStatus = EMSTaskStatus

    @property
    def AsyncTaskId(self):
        """异步任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AsyncTaskId

    @AsyncTaskId.setter
    def AsyncTaskId(self, AsyncTaskId):
        self._AsyncTaskId = AsyncTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EMSTaskId = params.get("EMSTaskId")
        self._EMSTaskStatus = params.get("EMSTaskStatus")
        self._AsyncTaskId = params.get("AsyncTaskId")
        self._RequestId = params.get("RequestId")


class StopAutoMLEvaluationTaskRequest(AbstractModel):
    """StopAutoMLEvaluationTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 待停止评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 待停止评测任务id
        :type EvaluationTaskId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None

    @property
    def AutoMLTaskId(self):
        """待停止评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """待停止评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopAutoMLEvaluationTaskResponse(AbstractModel):
    """StopAutoMLEvaluationTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 停止评测任务所属自动学习任务id
        :type AutoMLTaskId: str
        :param _EvaluationTaskId: 停止评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationTaskId: str
        :param _EvaluationTaskStatus: 评测任务当前状态，状态类型NOTSTART(未创建评测任务), WAITING(排队中),INIT(初始化中), STARTING(启动中), RUNNING(运行中), FAILED(异常), STOPPING(停止中), STOPPED(已停止), SUCCEED(已完成)
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationTaskStatus: str
        :param _AsyncTaskId: 异步任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type AsyncTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._EvaluationTaskId = None
        self._EvaluationTaskStatus = None
        self._AsyncTaskId = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """停止评测任务所属自动学习任务id
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def EvaluationTaskId(self):
        """停止评测任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId

    @property
    def EvaluationTaskStatus(self):
        """评测任务当前状态，状态类型NOTSTART(未创建评测任务), WAITING(排队中),INIT(初始化中), STARTING(启动中), RUNNING(运行中), FAILED(异常), STOPPING(停止中), STOPPED(已停止), SUCCEED(已完成)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationTaskStatus

    @EvaluationTaskStatus.setter
    def EvaluationTaskStatus(self, EvaluationTaskStatus):
        self._EvaluationTaskStatus = EvaluationTaskStatus

    @property
    def AsyncTaskId(self):
        """异步任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AsyncTaskId

    @AsyncTaskId.setter
    def AsyncTaskId(self, AsyncTaskId):
        self._AsyncTaskId = AsyncTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        self._EvaluationTaskStatus = params.get("EvaluationTaskStatus")
        self._AsyncTaskId = params.get("AsyncTaskId")
        self._RequestId = params.get("RequestId")


class StopAutoMLModelAccelerateTaskRequest(AbstractModel):
    """StopAutoMLModelAccelerateTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        """
        self._AutoMLTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopAutoMLModelAccelerateTaskResponse(AbstractModel):
    """StopAutoMLModelAccelerateTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _ModelAccTaskStatus: 模型优化任务状态
        :type ModelAccTaskStatus: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._ModelAccTaskStatus = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def ModelAccTaskStatus(self):
        """模型优化任务状态
        :rtype: str
        """
        return self._ModelAccTaskStatus

    @ModelAccTaskStatus.setter
    def ModelAccTaskStatus(self, ModelAccTaskStatus):
        self._ModelAccTaskStatus = ModelAccTaskStatus

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._ModelAccTaskStatus = params.get("ModelAccTaskStatus")
        self._RequestId = params.get("RequestId")


class StopAutoMLTaskTrainRequest(AbstractModel):
    """StopAutoMLTaskTrain请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _TrainTaskId: 训练任务ID
        :type TrainTaskId: str
        """
        self._AutoMLTaskId = None
        self._TrainTaskId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def TrainTaskId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._TrainTaskId = params.get("TrainTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopAutoMLTaskTrainResponse(AbstractModel):
    """StopAutoMLTaskTrain返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _TrainTaskId: 训练任务ID
        :type TrainTaskId: str
        :param _TrainTaskStatus: 训练任务状态
        :type TrainTaskStatus: str
        :param _AsyncTaskId: 异步任务ID
        :type AsyncTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._TrainTaskId = None
        self._TrainTaskStatus = None
        self._AsyncTaskId = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def TrainTaskId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId

    @property
    def TrainTaskStatus(self):
        """训练任务状态
        :rtype: str
        """
        return self._TrainTaskStatus

    @TrainTaskStatus.setter
    def TrainTaskStatus(self, TrainTaskStatus):
        self._TrainTaskStatus = TrainTaskStatus

    @property
    def AsyncTaskId(self):
        """异步任务ID
        :rtype: str
        """
        return self._AsyncTaskId

    @AsyncTaskId.setter
    def AsyncTaskId(self, AsyncTaskId):
        self._AsyncTaskId = AsyncTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._TrainTaskId = params.get("TrainTaskId")
        self._TrainTaskStatus = params.get("TrainTaskStatus")
        self._AsyncTaskId = params.get("AsyncTaskId")
        self._RequestId = params.get("RequestId")


class StopBatchTaskRequest(AbstractModel):
    """StopBatchTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _BatchTaskId: 批量预测任务ID
        :type BatchTaskId: str
        """
        self._BatchTaskId = None

    @property
    def BatchTaskId(self):
        """批量预测任务ID
        :rtype: str
        """
        return self._BatchTaskId

    @BatchTaskId.setter
    def BatchTaskId(self, BatchTaskId):
        self._BatchTaskId = BatchTaskId


    def _deserialize(self, params):
        self._BatchTaskId = params.get("BatchTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopBatchTaskResponse(AbstractModel):
    """StopBatchTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class StopCreatingImageRequest(AbstractModel):
    """StopCreatingImage请求参数结构体

    """

    def __init__(self):
        r"""
        :param _RecordId: 镜像保存记录ID
        :type RecordId: str
        """
        self._RecordId = None

    @property
    def RecordId(self):
        """镜像保存记录ID
        :rtype: str
        """
        return self._RecordId

    @RecordId.setter
    def RecordId(self, RecordId):
        self._RecordId = RecordId


    def _deserialize(self, params):
        self._RecordId = params.get("RecordId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopCreatingImageResponse(AbstractModel):
    """StopCreatingImage返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class StopFlowRequest(AbstractModel):
    """StopFlow请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowId: 工作流ID
        :type FlowId: str
        """
        self._FlowId = None

    @property
    def FlowId(self):
        """工作流ID
        :rtype: str
        """
        return self._FlowId

    @FlowId.setter
    def FlowId(self, FlowId):
        self._FlowId = FlowId


    def _deserialize(self, params):
        self._FlowId = params.get("FlowId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopFlowResponse(AbstractModel):
    """StopFlow返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunId: 工作流的运行Id
        :type FlowRunId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowRunId = None
        self._RequestId = None

    @property
    def FlowRunId(self):
        """工作流的运行Id
        :rtype: str
        """
        return self._FlowRunId

    @FlowRunId.setter
    def FlowRunId(self, FlowRunId):
        self._FlowRunId = FlowRunId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FlowRunId = params.get("FlowRunId")
        self._RequestId = params.get("RequestId")


class StopFlowRunNodeRequest(AbstractModel):
    """StopFlowRunNode请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunNodeId: 工作流的运行的节点ID
        :type FlowRunNodeId: str
        """
        self._FlowRunNodeId = None

    @property
    def FlowRunNodeId(self):
        """工作流的运行的节点ID
        :rtype: str
        """
        return self._FlowRunNodeId

    @FlowRunNodeId.setter
    def FlowRunNodeId(self, FlowRunNodeId):
        self._FlowRunNodeId = FlowRunNodeId


    def _deserialize(self, params):
        self._FlowRunNodeId = params.get("FlowRunNodeId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopFlowRunNodeResponse(AbstractModel):
    """StopFlowRunNode返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunNodeId: 工作流的运行的节点ID
        :type FlowRunNodeId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowRunNodeId = None
        self._RequestId = None

    @property
    def FlowRunNodeId(self):
        """工作流的运行的节点ID
        :rtype: str
        """
        return self._FlowRunNodeId

    @FlowRunNodeId.setter
    def FlowRunNodeId(self, FlowRunNodeId):
        self._FlowRunNodeId = FlowRunNodeId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FlowRunNodeId = params.get("FlowRunNodeId")
        self._RequestId = params.get("RequestId")


class StopFlowRunRequest(AbstractModel):
    """StopFlowRun请求参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunId: 工作流的执行ID
        :type FlowRunId: str
        """
        self._FlowRunId = None

    @property
    def FlowRunId(self):
        """工作流的执行ID
        :rtype: str
        """
        return self._FlowRunId

    @FlowRunId.setter
    def FlowRunId(self, FlowRunId):
        self._FlowRunId = FlowRunId


    def _deserialize(self, params):
        self._FlowRunId = params.get("FlowRunId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopFlowRunResponse(AbstractModel):
    """StopFlowRun返回参数结构体

    """

    def __init__(self):
        r"""
        :param _FlowRunId: 工作流的运行Id
        :type FlowRunId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._FlowRunId = None
        self._RequestId = None

    @property
    def FlowRunId(self):
        """工作流的运行Id
        :rtype: str
        """
        return self._FlowRunId

    @FlowRunId.setter
    def FlowRunId(self, FlowRunId):
        self._FlowRunId = FlowRunId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._FlowRunId = params.get("FlowRunId")
        self._RequestId = params.get("RequestId")


class StopLightEvalServiceRequest(AbstractModel):
    """StopLightEvalService请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 训练任务ID
        :type TaskId: str
        :param _CheckpointId: Checkpoint 的唯一 ID
        :type CheckpointId: str
        """
        self._TaskId = None
        self._CheckpointId = None

    @property
    def TaskId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def CheckpointId(self):
        """Checkpoint 的唯一 ID
        :rtype: str
        """
        return self._CheckpointId

    @CheckpointId.setter
    def CheckpointId(self, CheckpointId):
        self._CheckpointId = CheckpointId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._CheckpointId = params.get("CheckpointId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopLightEvalServiceResponse(AbstractModel):
    """StopLightEvalService返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class StopModelAccelerateTaskRequest(AbstractModel):
    """StopModelAccelerateTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccTaskId: 模型加速任务ID
        :type ModelAccTaskId: str
        """
        self._ModelAccTaskId = None

    @property
    def ModelAccTaskId(self):
        """模型加速任务ID
        :rtype: str
        """
        return self._ModelAccTaskId

    @ModelAccTaskId.setter
    def ModelAccTaskId(self, ModelAccTaskId):
        self._ModelAccTaskId = ModelAccTaskId


    def _deserialize(self, params):
        self._ModelAccTaskId = params.get("ModelAccTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopModelAccelerateTaskResponse(AbstractModel):
    """StopModelAccelerateTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelAccTaskId: 模型加速任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccTaskId: str
        :param _AsyncTaskId: 异步任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type AsyncTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._ModelAccTaskId = None
        self._AsyncTaskId = None
        self._RequestId = None

    @property
    def ModelAccTaskId(self):
        """模型加速任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelAccTaskId

    @ModelAccTaskId.setter
    def ModelAccTaskId(self, ModelAccTaskId):
        self._ModelAccTaskId = ModelAccTaskId

    @property
    def AsyncTaskId(self):
        """异步任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AsyncTaskId

    @AsyncTaskId.setter
    def AsyncTaskId(self, AsyncTaskId):
        self._AsyncTaskId = AsyncTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._ModelAccTaskId = params.get("ModelAccTaskId")
        self._AsyncTaskId = params.get("AsyncTaskId")
        self._RequestId = params.get("RequestId")


class StopNotebookRequest(AbstractModel):
    """StopNotebook请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: notebook id
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """notebook id
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopNotebookResponse(AbstractModel):
    """StopNotebook返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class StopObjectiveEvaluationRequest(AbstractModel):
    """StopObjectiveEvaluation请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopObjectiveEvaluationResponse(AbstractModel):
    """StopObjectiveEvaluation返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class StopSubjectiveEvaluationRequest(AbstractModel):
    """StopSubjectiveEvaluation请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        """
        self._TaskId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopSubjectiveEvaluationResponse(AbstractModel):
    """StopSubjectiveEvaluation返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class StopTaskComparisonRequest(AbstractModel):
    """StopTaskComparison请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskComparisonId: 对比评测任务id
        :type TaskComparisonId: str
        """
        self._TaskComparisonId = None

    @property
    def TaskComparisonId(self):
        """对比评测任务id
        :rtype: str
        """
        return self._TaskComparisonId

    @TaskComparisonId.setter
    def TaskComparisonId(self, TaskComparisonId):
        self._TaskComparisonId = TaskComparisonId


    def _deserialize(self, params):
        self._TaskComparisonId = params.get("TaskComparisonId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopTaskComparisonResponse(AbstractModel):
    """StopTaskComparison返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskComparisonId: 对比评测任务id
        :type TaskComparisonId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskComparisonId = None
        self._RequestId = None

    @property
    def TaskComparisonId(self):
        """对比评测任务id
        :rtype: str
        """
        return self._TaskComparisonId

    @TaskComparisonId.setter
    def TaskComparisonId(self, TaskComparisonId):
        self._TaskComparisonId = TaskComparisonId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskComparisonId = params.get("TaskComparisonId")
        self._RequestId = params.get("RequestId")


class StopTrainingTaskRequest(AbstractModel):
    """StopTrainingTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Id: 训练任务ID
        :type Id: str
        """
        self._Id = None

    @property
    def Id(self):
        """训练任务ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id


    def _deserialize(self, params):
        self._Id = params.get("Id")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class StopTrainingTaskResponse(AbstractModel):
    """StopTrainingTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class SubevalCompMetric(AbstractModel):
    """主观评测对比表格数据点

    """

    def __init__(self):
        r"""
        :param _TaskId: 当前数据是哪个任务评出来的（ID）
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _TaskName: 当前数据是哪个任务评出来的（任务名）
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskName: str
        :param _Model: 当前数据是任务的哪个模型评出来的：行名
注意：此字段可能返回 null，表示取不到有效值。
        :type Model: :class:`tencentcloud.tione.v20211111.models.EvalModel`
        :param _Dataset: 当前数据是任务的哪个CFS的数据集评出来的：列名
注意：此字段可能返回 null，表示取不到有效值。
        :type Dataset: :class:`tencentcloud.tione.v20211111.models.SimpleCFSConfig`
        :param _Value: 当前数据的值
注意：此字段可能返回 null，表示取不到有效值。
        :type Value: float
        """
        self._TaskId = None
        self._TaskName = None
        self._Model = None
        self._Dataset = None
        self._Value = None

    @property
    def TaskId(self):
        """当前数据是哪个任务评出来的（ID）
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def TaskName(self):
        """当前数据是哪个任务评出来的（任务名）
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def Model(self):
        """当前数据是任务的哪个模型评出来的：行名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.EvalModel`
        """
        return self._Model

    @Model.setter
    def Model(self, Model):
        self._Model = Model

    @property
    def Dataset(self):
        """当前数据是任务的哪个CFS的数据集评出来的：列名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.SimpleCFSConfig`
        """
        return self._Dataset

    @Dataset.setter
    def Dataset(self, Dataset):
        self._Dataset = Dataset

    @property
    def Value(self):
        """当前数据的值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._TaskName = params.get("TaskName")
        if params.get("Model") is not None:
            self._Model = EvalModel()
            self._Model._deserialize(params.get("Model"))
        if params.get("Dataset") is not None:
            self._Dataset = SimpleCFSConfig()
            self._Dataset._deserialize(params.get("Dataset"))
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SubevalCompResult(AbstractModel):
    """主观评测对比数据

    """

    def __init__(self):
        r"""
        :param _MetricName: 当前是哪个指标对应的数据
注意：此字段可能返回 null，表示取不到有效值。
        :type MetricName: str
        :param _SubevalCompMetrics: 主观评测对比表格数据点
注意：此字段可能返回 null，表示取不到有效值。
        :type SubevalCompMetrics: list of SubevalCompMetric
        """
        self._MetricName = None
        self._SubevalCompMetrics = None

    @property
    def MetricName(self):
        """当前是哪个指标对应的数据
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._MetricName

    @MetricName.setter
    def MetricName(self, MetricName):
        self._MetricName = MetricName

    @property
    def SubevalCompMetrics(self):
        """主观评测对比表格数据点
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of SubevalCompMetric
        """
        return self._SubevalCompMetrics

    @SubevalCompMetrics.setter
    def SubevalCompMetrics(self, SubevalCompMetrics):
        self._SubevalCompMetrics = SubevalCompMetrics


    def _deserialize(self, params):
        self._MetricName = params.get("MetricName")
        if params.get("SubevalCompMetrics") is not None:
            self._SubevalCompMetrics = []
            for item in params.get("SubevalCompMetrics"):
                obj = SubevalCompMetric()
                obj._deserialize(item)
                self._SubevalCompMetrics.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SubjectiveEvaluation(AbstractModel):
    """Evaluation

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _Name: 评测名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _Progress: 进度
注意：此字段可能返回 null，表示取不到有效值。
        :type Progress: float
        :param _Description: 描述
注意：此字段可能返回 null，表示取不到有效值。
        :type Description: str
        :param _Status: 状态
注意：此字段可能返回 null，表示取不到有效值。
        :type Status: str
        :param _InferringModelIndex: 推理模型索引
注意：此字段可能返回 null，表示取不到有效值。
        :type InferringModelIndex: int
        :param _ModelNum: 总共需推理模型数量
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelNum: int
        :param _FailureReason:  失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :type FailureReason: str
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _ChargeType: 计费与资源
注意：此字段可能返回 null，表示取不到有效值。
        :type ChargeType: str
        :param _ResourceGroupId: 计费与资源 
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _Resources: 计费与资源 
注意：此字段可能返回 null，表示取不到有效值。
        :type Resources: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        :param _InstanceType: 资源类型
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceType: str
        :param _ResourceGroupName: 资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupName: str
        :param _FailureCode: 错误码
注意：此字段可能返回 null，表示取不到有效值。
        :type FailureCode: str
        :param _BillingInfo: 计费信息
注意：此字段可能返回 null，表示取不到有效值。
        :type BillingInfo: str
        :param _BusinessStatus: 计费状态
注意：此字段可能返回 null，表示取不到有效值。
        :type BusinessStatus: str
        :param _Models: 评测的模型列表
注意：此字段可能返回 null，表示取不到有效值。
        :type Models: list of EvalModel
        :param _Datasets: 评测集
注意：此字段可能返回 null，表示取不到有效值。
        :type Datasets: list of SimpleCFSConfig
        :param _Tags: 标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _ResourceGroupSWType: 资源组类型
        :type ResourceGroupSWType: str
        :param _DeployType: 部署类型
        :type DeployType: str
        :param _InstancePerReplicas: 单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :type InstancePerReplicas: int
        :param _Uin: Uin
        :type Uin: str
        :param _SubUin: SubUin
        :type SubUin: str
        :param _SubUinName: SubUinName
        :type SubUinName: str
        :param _Region: Region
        :type Region: str
        :param _InstanceTypeAlias: 后付费资源信息
        :type InstanceTypeAlias: str
        """
        self._TaskId = None
        self._Name = None
        self._Progress = None
        self._Description = None
        self._Status = None
        self._InferringModelIndex = None
        self._ModelNum = None
        self._FailureReason = None
        self._CreateTime = None
        self._ChargeType = None
        self._ResourceGroupId = None
        self._Resources = None
        self._InstanceType = None
        self._ResourceGroupName = None
        self._FailureCode = None
        self._BillingInfo = None
        self._BusinessStatus = None
        self._Models = None
        self._Datasets = None
        self._Tags = None
        self._ResourceGroupSWType = None
        self._DeployType = None
        self._InstancePerReplicas = None
        self._Uin = None
        self._SubUin = None
        self._SubUinName = None
        self._Region = None
        self._InstanceTypeAlias = None

    @property
    def TaskId(self):
        """任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Name(self):
        """评测名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Progress(self):
        """进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def Description(self):
        """描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Description

    @Description.setter
    def Description(self, Description):
        self._Description = Description

    @property
    def Status(self):
        """状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def InferringModelIndex(self):
        """推理模型索引
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._InferringModelIndex

    @InferringModelIndex.setter
    def InferringModelIndex(self, InferringModelIndex):
        self._InferringModelIndex = InferringModelIndex

    @property
    def ModelNum(self):
        """总共需推理模型数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ModelNum

    @ModelNum.setter
    def ModelNum(self, ModelNum):
        self._ModelNum = ModelNum

    @property
    def FailureReason(self):
        """ 失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FailureReason

    @FailureReason.setter
    def FailureReason(self, FailureReason):
        self._FailureReason = FailureReason

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def ChargeType(self):
        """计费与资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceGroupId(self):
        """计费与资源 
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def Resources(self):
        """计费与资源 
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceInfo`
        """
        return self._Resources

    @Resources.setter
    def Resources(self, Resources):
        self._Resources = Resources

    @property
    def InstanceType(self):
        """资源类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def ResourceGroupName(self):
        """资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def FailureCode(self):
        """错误码
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FailureCode

    @FailureCode.setter
    def FailureCode(self, FailureCode):
        self._FailureCode = FailureCode

    @property
    def BillingInfo(self):
        """计费信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._BillingInfo

    @BillingInfo.setter
    def BillingInfo(self, BillingInfo):
        self._BillingInfo = BillingInfo

    @property
    def BusinessStatus(self):
        """计费状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._BusinessStatus

    @BusinessStatus.setter
    def BusinessStatus(self, BusinessStatus):
        self._BusinessStatus = BusinessStatus

    @property
    def Models(self):
        """评测的模型列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of EvalModel
        """
        return self._Models

    @Models.setter
    def Models(self, Models):
        self._Models = Models

    @property
    def Datasets(self):
        """评测集
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of SimpleCFSConfig
        """
        return self._Datasets

    @Datasets.setter
    def Datasets(self, Datasets):
        self._Datasets = Datasets

    @property
    def Tags(self):
        """标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def ResourceGroupSWType(self):
        """资源组类型
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType

    @property
    def DeployType(self):
        """部署类型
        :rtype: str
        """
        return self._DeployType

    @DeployType.setter
    def DeployType(self, DeployType):
        self._DeployType = DeployType

    @property
    def InstancePerReplicas(self):
        """单副本下的实例数，仅在部署类型为DIST时生效，默认1
        :rtype: int
        """
        return self._InstancePerReplicas

    @InstancePerReplicas.setter
    def InstancePerReplicas(self, InstancePerReplicas):
        self._InstancePerReplicas = InstancePerReplicas

    @property
    def Uin(self):
        """Uin
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def SubUin(self):
        """SubUin
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def SubUinName(self):
        """SubUinName
        :rtype: str
        """
        return self._SubUinName

    @SubUinName.setter
    def SubUinName(self, SubUinName):
        self._SubUinName = SubUinName

    @property
    def Region(self):
        """Region
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def InstanceTypeAlias(self):
        """后付费资源信息
        :rtype: str
        """
        return self._InstanceTypeAlias

    @InstanceTypeAlias.setter
    def InstanceTypeAlias(self, InstanceTypeAlias):
        self._InstanceTypeAlias = InstanceTypeAlias


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Name = params.get("Name")
        self._Progress = params.get("Progress")
        self._Description = params.get("Description")
        self._Status = params.get("Status")
        self._InferringModelIndex = params.get("InferringModelIndex")
        self._ModelNum = params.get("ModelNum")
        self._FailureReason = params.get("FailureReason")
        self._CreateTime = params.get("CreateTime")
        self._ChargeType = params.get("ChargeType")
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("Resources") is not None:
            self._Resources = ResourceInfo()
            self._Resources._deserialize(params.get("Resources"))
        self._InstanceType = params.get("InstanceType")
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._FailureCode = params.get("FailureCode")
        self._BillingInfo = params.get("BillingInfo")
        self._BusinessStatus = params.get("BusinessStatus")
        if params.get("Models") is not None:
            self._Models = []
            for item in params.get("Models"):
                obj = EvalModel()
                obj._deserialize(item)
                self._Models.append(obj)
        if params.get("Datasets") is not None:
            self._Datasets = []
            for item in params.get("Datasets"):
                obj = SimpleCFSConfig()
                obj._deserialize(item)
                self._Datasets.append(obj)
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        self._DeployType = params.get("DeployType")
        self._InstancePerReplicas = params.get("InstancePerReplicas")
        self._Uin = params.get("Uin")
        self._SubUin = params.get("SubUin")
        self._SubUinName = params.get("SubUinName")
        self._Region = params.get("Region")
        self._InstanceTypeAlias = params.get("InstanceTypeAlias")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SubjectiveMetric(AbstractModel):
    """SubjectiveMetric

    """

    def __init__(self):
        r"""
        :param _Value: 指标值
注意：此字段可能返回 null，表示取不到有效值。
        :type Value: float
        """
        self._Value = None

    @property
    def Value(self):
        """指标值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SubmitEvaluationScoreRequest(AbstractModel):
    """SubmitEvaluationScore请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _Index: 总体的第几条
        :type Index: int
        :param _Scores: 打分
        :type Scores: list of float
        """
        self._TaskId = None
        self._Index = None
        self._Scores = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Index(self):
        """总体的第几条
        :rtype: int
        """
        return self._Index

    @Index.setter
    def Index(self, Index):
        self._Index = Index

    @property
    def Scores(self):
        """打分
        :rtype: list of float
        """
        return self._Scores

    @Scores.setter
    def Scores(self, Scores):
        self._Scores = Scores


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Index = params.get("Index")
        self._Scores = params.get("Scores")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SubmitEvaluationScoreResponse(AbstractModel):
    """SubmitEvaluationScore返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 任务id
        :type TaskId: str
        :param _Index: 总体的第几条
        :type Index: int
        :param _Scores: 打分
        :type Scores: list of float
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._Index = None
        self._Scores = None
        self._RequestId = None

    @property
    def TaskId(self):
        """任务id
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def Index(self):
        """总体的第几条
        :rtype: int
        """
        return self._Index

    @Index.setter
    def Index(self, Index):
        self._Index = Index

    @property
    def Scores(self):
        """打分
        :rtype: list of float
        """
        return self._Scores

    @Scores.setter
    def Scores(self, Scores):
        self._Scores = Scores

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._Index = params.get("Index")
        self._Scores = params.get("Scores")
        self._RequestId = params.get("RequestId")


class SyncDatasetRequest(AbstractModel):
    """SyncDataset请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DatasetId: 数据集ID
        :type DatasetId: str
        """
        self._DatasetId = None

    @property
    def DatasetId(self):
        """数据集ID
        :rtype: str
        """
        return self._DatasetId

    @DatasetId.setter
    def DatasetId(self, DatasetId):
        self._DatasetId = DatasetId


    def _deserialize(self, params):
        self._DatasetId = params.get("DatasetId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class SyncDatasetResponse(AbstractModel):
    """SyncDataset返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 异步任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TaskId = None
        self._RequestId = None

    @property
    def TaskId(self):
        """异步任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._RequestId = params.get("RequestId")


class SystemDisk(AbstractModel):
    """系统盘信息

    """

    def __init__(self):
        r"""
        :param _DiskSize: 云硬盘大小
注意：此字段可能返回 null，表示取不到有效值。
        :type DiskSize: int
        :param _DiskType: 云硬盘类型
注意：此字段可能返回 null，表示取不到有效值。
        :type DiskType: str
        :param _DiskId: 云硬盘ID
注意：此字段可能返回 null，表示取不到有效值。
        :type DiskId: str
        :param _CdcId: 所属的独享集群ID
注意：此字段可能返回 null，表示取不到有效值。
        :type CdcId: str
        """
        self._DiskSize = None
        self._DiskType = None
        self._DiskId = None
        self._CdcId = None

    @property
    def DiskSize(self):
        """云硬盘大小
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._DiskSize

    @DiskSize.setter
    def DiskSize(self, DiskSize):
        self._DiskSize = DiskSize

    @property
    def DiskType(self):
        """云硬盘类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DiskType

    @DiskType.setter
    def DiskType(self, DiskType):
        self._DiskType = DiskType

    @property
    def DiskId(self):
        """云硬盘ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DiskId

    @DiskId.setter
    def DiskId(self, DiskId):
        self._DiskId = DiskId

    @property
    def CdcId(self):
        """所属的独享集群ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CdcId

    @CdcId.setter
    def CdcId(self, CdcId):
        self._CdcId = CdcId


    def _deserialize(self, params):
        self._DiskSize = params.get("DiskSize")
        self._DiskType = params.get("DiskType")
        self._DiskId = params.get("DiskId")
        self._CdcId = params.get("CdcId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TAIJITemplate(AbstractModel):
    """模版信息

    """

    def __init__(self):
        r"""
        :param _ResourceConfig: 资源配置
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceConfig: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        :param _Pattern: 模版来源
注意：此字段可能返回 null，表示取不到有效值。
        :type Pattern: str
        :param _ModelId: 模块ID
        :type ModelId: str
        :param _ParamsRemark: 参数解释
        :type ParamsRemark: str
        :param _ParamsMap: 参数名
        :type ParamsMap: str
        :param _Params: 参数默认值
注意：此字段可能返回 null，表示取不到有效值。
        :type Params: str
        """
        self._ResourceConfig = None
        self._Pattern = None
        self._ModelId = None
        self._ParamsRemark = None
        self._ParamsMap = None
        self._Params = None

    @property
    def ResourceConfig(self):
        """资源配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        """
        return self._ResourceConfig

    @ResourceConfig.setter
    def ResourceConfig(self, ResourceConfig):
        self._ResourceConfig = ResourceConfig

    @property
    def Pattern(self):
        """模版来源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Pattern

    @Pattern.setter
    def Pattern(self, Pattern):
        self._Pattern = Pattern

    @property
    def ModelId(self):
        """模块ID
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def ParamsRemark(self):
        """参数解释
        :rtype: str
        """
        return self._ParamsRemark

    @ParamsRemark.setter
    def ParamsRemark(self, ParamsRemark):
        self._ParamsRemark = ParamsRemark

    @property
    def ParamsMap(self):
        """参数名
        :rtype: str
        """
        return self._ParamsMap

    @ParamsMap.setter
    def ParamsMap(self, ParamsMap):
        self._ParamsMap = ParamsMap

    @property
    def Params(self):
        """参数默认值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Params

    @Params.setter
    def Params(self, Params):
        self._Params = Params


    def _deserialize(self, params):
        if params.get("ResourceConfig") is not None:
            self._ResourceConfig = ResourceConfigInfo()
            self._ResourceConfig._deserialize(params.get("ResourceConfig"))
        self._Pattern = params.get("Pattern")
        self._ModelId = params.get("ModelId")
        self._ParamsRemark = params.get("ParamsRemark")
        self._ParamsMap = params.get("ParamsMap")
        self._Params = params.get("Params")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TAIJITemplateInfo(AbstractModel):
    """模版信息

    """

    def __init__(self):
        r"""
        :param _Name: 模版名称
        :type Name: str
        :param _Style: 配置方式
        :type Style: str
        :param _Desc: 模版描述
注意：此字段可能返回 null，表示取不到有效值。
        :type Desc: str
        :param _ModelId: 模型ID
        :type ModelId: str
        :param _Pattern: 训练模式
        :type Pattern: str
        """
        self._Name = None
        self._Style = None
        self._Desc = None
        self._ModelId = None
        self._Pattern = None

    @property
    def Name(self):
        """模版名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Style(self):
        """配置方式
        :rtype: str
        """
        return self._Style

    @Style.setter
    def Style(self, Style):
        self._Style = Style

    @property
    def Desc(self):
        """模版描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Desc

    @Desc.setter
    def Desc(self, Desc):
        self._Desc = Desc

    @property
    def ModelId(self):
        """模型ID
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def Pattern(self):
        """训练模式
        :rtype: str
        """
        return self._Pattern

    @Pattern.setter
    def Pattern(self, Pattern):
        self._Pattern = Pattern


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Style = params.get("Style")
        self._Desc = params.get("Desc")
        self._ModelId = params.get("ModelId")
        self._Pattern = params.get("Pattern")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TJCallInfo(AbstractModel):
    """太极服务的调用信息

    """

    def __init__(self):
        r"""
        :param _HttpAddr: 调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :type HttpAddr: str
        :param _Token: token
注意：此字段可能返回 null，表示取不到有效值。
        :type Token: str
        :param _CallExample: 调用示例
注意：此字段可能返回 null，表示取不到有效值。
        :type CallExample: str
        """
        self._HttpAddr = None
        self._Token = None
        self._CallExample = None

    @property
    def HttpAddr(self):
        """调用地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._HttpAddr

    @HttpAddr.setter
    def HttpAddr(self, HttpAddr):
        self._HttpAddr = HttpAddr

    @property
    def Token(self):
        """token
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Token

    @Token.setter
    def Token(self, Token):
        self._Token = Token

    @property
    def CallExample(self):
        """调用示例
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CallExample

    @CallExample.setter
    def CallExample(self, CallExample):
        self._CallExample = CallExample


    def _deserialize(self, params):
        self._HttpAddr = params.get("HttpAddr")
        self._Token = params.get("Token")
        self._CallExample = params.get("CallExample")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TJResourceDetail(AbstractModel):
    """太极应用组资源详情

    """

    def __init__(self):
        r"""
        :param _GpuType: Gpu名称
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuType: str
        :param _Total: 总额度
注意：此字段可能返回 null，表示取不到有效值。
        :type Total: int
        :param _Available: 剩余可用
注意：此字段可能返回 null，表示取不到有效值。
        :type Available: int
        :param _Unavailable: 不可用
注意：此字段可能返回 null，表示取不到有效值。
        :type Unavailable: int
        :param _Used: 已用
注意：此字段可能返回 null，表示取不到有效值。
        :type Used: int
        :param _Applying: 申请中
注意：此字段可能返回 null，表示取不到有效值。
        :type Applying: int
        :param _Waiting: 排队中
注意：此字段可能返回 null，表示取不到有效值。
        :type Waiting: int
        """
        self._GpuType = None
        self._Total = None
        self._Available = None
        self._Unavailable = None
        self._Used = None
        self._Applying = None
        self._Waiting = None

    @property
    def GpuType(self):
        """Gpu名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType

    @property
    def Total(self):
        """总额度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Total

    @Total.setter
    def Total(self, Total):
        self._Total = Total

    @property
    def Available(self):
        """剩余可用
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Available

    @Available.setter
    def Available(self, Available):
        self._Available = Available

    @property
    def Unavailable(self):
        """不可用
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Unavailable

    @Unavailable.setter
    def Unavailable(self, Unavailable):
        self._Unavailable = Unavailable

    @property
    def Used(self):
        """已用
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Used

    @Used.setter
    def Used(self, Used):
        self._Used = Used

    @property
    def Applying(self):
        """申请中
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Applying

    @Applying.setter
    def Applying(self, Applying):
        self._Applying = Applying

    @property
    def Waiting(self):
        """排队中
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Waiting

    @Waiting.setter
    def Waiting(self, Waiting):
        self._Waiting = Waiting


    def _deserialize(self, params):
        self._GpuType = params.get("GpuType")
        self._Total = params.get("Total")
        self._Available = params.get("Available")
        self._Unavailable = params.get("Unavailable")
        self._Used = params.get("Used")
        self._Applying = params.get("Applying")
        self._Waiting = params.get("Waiting")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Tag(AbstractModel):
    """描述腾讯云标签

    """

    def __init__(self):
        r"""
        :param _TagKey: 标签键
注意：此字段可能返回 null，表示取不到有效值。
        :type TagKey: str
        :param _TagValue: 标签值
注意：此字段可能返回 null，表示取不到有效值。
        :type TagValue: str
        """
        self._TagKey = None
        self._TagValue = None

    @property
    def TagKey(self):
        """标签键
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TagKey

    @TagKey.setter
    def TagKey(self, TagKey):
        self._TagKey = TagKey

    @property
    def TagValue(self):
        """标签值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TagValue

    @TagValue.setter
    def TagValue(self, TagValue):
        self._TagValue = TagValue


    def _deserialize(self, params):
        self._TagKey = params.get("TagKey")
        self._TagValue = params.get("TagValue")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TagFilter(AbstractModel):
    """Tag过滤参数

    """

    def __init__(self):
        r"""
        :param _TagKey: 标签键
        :type TagKey: str
        :param _TagValues: 多个标签值
        :type TagValues: list of str
        """
        self._TagKey = None
        self._TagValues = None

    @property
    def TagKey(self):
        """标签键
        :rtype: str
        """
        return self._TagKey

    @TagKey.setter
    def TagKey(self, TagKey):
        self._TagKey = TagKey

    @property
    def TagValues(self):
        """多个标签值
        :rtype: list of str
        """
        return self._TagValues

    @TagValues.setter
    def TagValues(self, TagValues):
        self._TagValues = TagValues


    def _deserialize(self, params):
        self._TagKey = params.get("TagKey")
        self._TagValues = params.get("TagValues")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TagSorter(AbstractModel):
    """Tag排序

    """

    def __init__(self):
        r"""
        :param _Name: 名称
        :type Name: str
        :param _Order: 排序
        :type Order: str
        """
        self._Name = None
        self._Order = None

    @property
    def Name(self):
        """名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Order(self):
        """排序
        :rtype: str
        """
        return self._Order

    @Order.setter
    def Order(self, Order):
        self._Order = Order


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._Order = params.get("Order")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskComparisonDetail(AbstractModel):
    """对比评测任务信息

    """

    def __init__(self):
        r"""
        :param _Name: 任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _CreateUserName: 创建人名称
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateUserName: str
        :param _CreateSubUin: 创建人subuin
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateSubUin: str
        :param _XiaoWeiAppInfo: 云小微应用信息
注意：此字段可能返回 null，表示取不到有效值。
        :type XiaoWeiAppInfo: :class:`tencentcloud.tione.v20211111.models.XiaoWeiAppInfo`
        :param _DataConfig: 评测数据集信息
注意：此字段可能返回 null，表示取不到有效值。
        :type DataConfig: :class:`tencentcloud.tione.v20211111.models.AutoMLDataConfig`
        :param _TaskType: Single、Multi
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskType: str
        :param _EvaluateTaskInfo: 任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluateTaskInfo: list of EvaluateTaskInfo
        :param _TaskId: 任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _DataInfo: 评估数据集信息
注意：此字段可能返回 null，表示取不到有效值。
        :type DataInfo: :class:`tencentcloud.tione.v20211111.models.EvaluationDataInfo`
        :param _EvaluationType: 评测类型asr或者nlp
注意：此字段可能返回 null，表示取不到有效值。
        :type EvaluationType: str
        :param _Status: 对比评测任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :type Status: str
        :param _CreateTime: 创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _TaskProgress: 评测进度
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskProgress: int
        :param _ErrorMsg: 错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrorMsg: str
        """
        self._Name = None
        self._CreateUserName = None
        self._CreateSubUin = None
        self._XiaoWeiAppInfo = None
        self._DataConfig = None
        self._TaskType = None
        self._EvaluateTaskInfo = None
        self._TaskId = None
        self._DataInfo = None
        self._EvaluationType = None
        self._Status = None
        self._CreateTime = None
        self._TaskProgress = None
        self._ErrorMsg = None

    @property
    def Name(self):
        """任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def CreateUserName(self):
        """创建人名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateUserName

    @CreateUserName.setter
    def CreateUserName(self, CreateUserName):
        self._CreateUserName = CreateUserName

    @property
    def CreateSubUin(self):
        """创建人subuin
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateSubUin

    @CreateSubUin.setter
    def CreateSubUin(self, CreateSubUin):
        self._CreateSubUin = CreateSubUin

    @property
    def XiaoWeiAppInfo(self):
        """云小微应用信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.XiaoWeiAppInfo`
        """
        return self._XiaoWeiAppInfo

    @XiaoWeiAppInfo.setter
    def XiaoWeiAppInfo(self, XiaoWeiAppInfo):
        self._XiaoWeiAppInfo = XiaoWeiAppInfo

    @property
    def DataConfig(self):
        """评测数据集信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.AutoMLDataConfig`
        """
        return self._DataConfig

    @DataConfig.setter
    def DataConfig(self, DataConfig):
        self._DataConfig = DataConfig

    @property
    def TaskType(self):
        """Single、Multi
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType

    @property
    def EvaluateTaskInfo(self):
        """任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of EvaluateTaskInfo
        """
        return self._EvaluateTaskInfo

    @EvaluateTaskInfo.setter
    def EvaluateTaskInfo(self, EvaluateTaskInfo):
        self._EvaluateTaskInfo = EvaluateTaskInfo

    @property
    def TaskId(self):
        """任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def DataInfo(self):
        """评估数据集信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.EvaluationDataInfo`
        """
        return self._DataInfo

    @DataInfo.setter
    def DataInfo(self, DataInfo):
        self._DataInfo = DataInfo

    @property
    def EvaluationType(self):
        """评测类型asr或者nlp
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EvaluationType

    @EvaluationType.setter
    def EvaluationType(self, EvaluationType):
        self._EvaluationType = EvaluationType

    @property
    def Status(self):
        """对比评测任务状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CreateTime(self):
        """创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def TaskProgress(self):
        """评测进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TaskProgress

    @TaskProgress.setter
    def TaskProgress(self, TaskProgress):
        self._TaskProgress = TaskProgress

    @property
    def ErrorMsg(self):
        """错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrorMsg

    @ErrorMsg.setter
    def ErrorMsg(self, ErrorMsg):
        self._ErrorMsg = ErrorMsg


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._CreateUserName = params.get("CreateUserName")
        self._CreateSubUin = params.get("CreateSubUin")
        if params.get("XiaoWeiAppInfo") is not None:
            self._XiaoWeiAppInfo = XiaoWeiAppInfo()
            self._XiaoWeiAppInfo._deserialize(params.get("XiaoWeiAppInfo"))
        if params.get("DataConfig") is not None:
            self._DataConfig = AutoMLDataConfig()
            self._DataConfig._deserialize(params.get("DataConfig"))
        self._TaskType = params.get("TaskType")
        if params.get("EvaluateTaskInfo") is not None:
            self._EvaluateTaskInfo = []
            for item in params.get("EvaluateTaskInfo"):
                obj = EvaluateTaskInfo()
                obj._deserialize(item)
                self._EvaluateTaskInfo.append(obj)
        self._TaskId = params.get("TaskId")
        if params.get("DataInfo") is not None:
            self._DataInfo = EvaluationDataInfo()
            self._DataInfo._deserialize(params.get("DataInfo"))
        self._EvaluationType = params.get("EvaluationType")
        self._Status = params.get("Status")
        self._CreateTime = params.get("CreateTime")
        self._TaskProgress = params.get("TaskProgress")
        self._ErrorMsg = params.get("ErrorMsg")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskResourceInfo(AbstractModel):
    """任务占用的资源信息

    """

    def __init__(self):
        r"""
        :param _CpuNum: 单节点 CPU 资源，单位：1/1000 核
        :type CpuNum: int
        :param _Memory: 单节点内存资源，单位：1 MB
        :type Memory: int
        :param _GpuNum: 单节点 GPU 数量，单位：1/100 卡
        :type GpuNum: int
        :param _GpuType: 节点 GPU 类型
        :type GpuType: str
        :param _InstanceCount: 节点数量
        :type InstanceCount: int
        :param _EnableRDMA: 是否开启 RDMA
        :type EnableRDMA: bool
        """
        self._CpuNum = None
        self._Memory = None
        self._GpuNum = None
        self._GpuType = None
        self._InstanceCount = None
        self._EnableRDMA = None

    @property
    def CpuNum(self):
        """单节点 CPU 资源，单位：1/1000 核
        :rtype: int
        """
        return self._CpuNum

    @CpuNum.setter
    def CpuNum(self, CpuNum):
        self._CpuNum = CpuNum

    @property
    def Memory(self):
        """单节点内存资源，单位：1 MB
        :rtype: int
        """
        return self._Memory

    @Memory.setter
    def Memory(self, Memory):
        self._Memory = Memory

    @property
    def GpuNum(self):
        """单节点 GPU 数量，单位：1/100 卡
        :rtype: int
        """
        return self._GpuNum

    @GpuNum.setter
    def GpuNum(self, GpuNum):
        self._GpuNum = GpuNum

    @property
    def GpuType(self):
        """节点 GPU 类型
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType

    @property
    def InstanceCount(self):
        """节点数量
        :rtype: int
        """
        return self._InstanceCount

    @InstanceCount.setter
    def InstanceCount(self, InstanceCount):
        self._InstanceCount = InstanceCount

    @property
    def EnableRDMA(self):
        """是否开启 RDMA
        :rtype: bool
        """
        return self._EnableRDMA

    @EnableRDMA.setter
    def EnableRDMA(self, EnableRDMA):
        self._EnableRDMA = EnableRDMA


    def _deserialize(self, params):
        self._CpuNum = params.get("CpuNum")
        self._Memory = params.get("Memory")
        self._GpuNum = params.get("GpuNum")
        self._GpuType = params.get("GpuType")
        self._InstanceCount = params.get("InstanceCount")
        self._EnableRDMA = params.get("EnableRDMA")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TaskStageInfo(AbstractModel):
    """任务阶段信息

    """

    def __init__(self):
        r"""
        :param _StageName: 阶段名称
注意：此字段可能返回 null，表示取不到有效值。
        :type StageName: str
        :param _StageStatus: 阶段状态。STATUS_PROCESS 处理中；STATUS_SUCCESS 处理完成。
注意：此字段可能返回 null，表示取不到有效值。
        :type StageStatus: str
        :param _Progress: 阶段进度
注意：此字段可能返回 null，表示取不到有效值。
        :type Progress: float
        :param _SuccessCount: 解析成功的样本数量
注意：此字段可能返回 null，表示取不到有效值。
        :type SuccessCount: int
        :param _FailedCount: 解析失败的样本数量
注意：此字段可能返回 null，表示取不到有效值。
        :type FailedCount: int
        :param _FailedSampleFile: 解析失败的样本文件URL。目前采样10条
注意：此字段可能返回 null，表示取不到有效值。
        :type FailedSampleFile: str
        :param _StartTime: 解析启动时间
注意：此字段可能返回 null，表示取不到有效值。
        :type StartTime: int
        :param _FileProcessInfo: 解析文件信息
注意：此字段可能返回 null，表示取不到有效值。
        :type FileProcessInfo: list of DatasetFileProcessInfo
        """
        self._StageName = None
        self._StageStatus = None
        self._Progress = None
        self._SuccessCount = None
        self._FailedCount = None
        self._FailedSampleFile = None
        self._StartTime = None
        self._FileProcessInfo = None

    @property
    def StageName(self):
        """阶段名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StageName

    @StageName.setter
    def StageName(self, StageName):
        self._StageName = StageName

    @property
    def StageStatus(self):
        """阶段状态。STATUS_PROCESS 处理中；STATUS_SUCCESS 处理完成。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StageStatus

    @StageStatus.setter
    def StageStatus(self, StageStatus):
        self._StageStatus = StageStatus

    @property
    def Progress(self):
        """阶段进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Progress

    @Progress.setter
    def Progress(self, Progress):
        self._Progress = Progress

    @property
    def SuccessCount(self):
        """解析成功的样本数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._SuccessCount

    @SuccessCount.setter
    def SuccessCount(self, SuccessCount):
        self._SuccessCount = SuccessCount

    @property
    def FailedCount(self):
        """解析失败的样本数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._FailedCount

    @FailedCount.setter
    def FailedCount(self, FailedCount):
        self._FailedCount = FailedCount

    @property
    def FailedSampleFile(self):
        """解析失败的样本文件URL。目前采样10条
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FailedSampleFile

    @FailedSampleFile.setter
    def FailedSampleFile(self, FailedSampleFile):
        self._FailedSampleFile = FailedSampleFile

    @property
    def StartTime(self):
        """解析启动时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def FileProcessInfo(self):
        """解析文件信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DatasetFileProcessInfo
        """
        return self._FileProcessInfo

    @FileProcessInfo.setter
    def FileProcessInfo(self, FileProcessInfo):
        self._FileProcessInfo = FileProcessInfo


    def _deserialize(self, params):
        self._StageName = params.get("StageName")
        self._StageStatus = params.get("StageStatus")
        self._Progress = params.get("Progress")
        self._SuccessCount = params.get("SuccessCount")
        self._FailedCount = params.get("FailedCount")
        self._FailedSampleFile = params.get("FailedSampleFile")
        self._StartTime = params.get("StartTime")
        if params.get("FileProcessInfo") is not None:
            self._FileProcessInfo = []
            for item in params.get("FileProcessInfo"):
                obj = DatasetFileProcessInfo()
                obj._deserialize(item)
                self._FileProcessInfo.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TempCosCredential(AbstractModel):
    """Cos临时Credential

    """

    def __init__(self):
        r"""
        :param _TempSecretId: 临时SecretId
        :type TempSecretId: str
        :param _TempSecretKey: 临时SecretKey
        :type TempSecretKey: str
        :param _Token: 临时token
        :type Token: str
        :param _ExpiredTime: 有效期时长
        :type ExpiredTime: int
        :param _StartTime: 有效期开始时间
        :type StartTime: int
        :param _Expiration: 过期时间
        :type Expiration: str
        """
        self._TempSecretId = None
        self._TempSecretKey = None
        self._Token = None
        self._ExpiredTime = None
        self._StartTime = None
        self._Expiration = None

    @property
    def TempSecretId(self):
        """临时SecretId
        :rtype: str
        """
        return self._TempSecretId

    @TempSecretId.setter
    def TempSecretId(self, TempSecretId):
        self._TempSecretId = TempSecretId

    @property
    def TempSecretKey(self):
        """临时SecretKey
        :rtype: str
        """
        return self._TempSecretKey

    @TempSecretKey.setter
    def TempSecretKey(self, TempSecretKey):
        self._TempSecretKey = TempSecretKey

    @property
    def Token(self):
        """临时token
        :rtype: str
        """
        return self._Token

    @Token.setter
    def Token(self, Token):
        self._Token = Token

    @property
    def ExpiredTime(self):
        """有效期时长
        :rtype: int
        """
        return self._ExpiredTime

    @ExpiredTime.setter
    def ExpiredTime(self, ExpiredTime):
        self._ExpiredTime = ExpiredTime

    @property
    def StartTime(self):
        """有效期开始时间
        :rtype: int
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def Expiration(self):
        """过期时间
        :rtype: str
        """
        return self._Expiration

    @Expiration.setter
    def Expiration(self, Expiration):
        self._Expiration = Expiration


    def _deserialize(self, params):
        self._TempSecretId = params.get("TempSecretId")
        self._TempSecretKey = params.get("TempSecretKey")
        self._Token = params.get("Token")
        self._ExpiredTime = params.get("ExpiredTime")
        self._StartTime = params.get("StartTime")
        self._Expiration = params.get("Expiration")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TestDataInfo(AbstractModel):
    """asr测试数据集映射

    """

    def __init__(self):
        r"""
        :param _TestDataName: asr测试数据集名字
注意：此字段可能返回 null，表示取不到有效值。
        :type TestDataName: str
        :param _TestDataPath: asr测试数据集路径
注意：此字段可能返回 null，表示取不到有效值。
        :type TestDataPath: str
        """
        self._TestDataName = None
        self._TestDataPath = None

    @property
    def TestDataName(self):
        """asr测试数据集名字
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TestDataName

    @TestDataName.setter
    def TestDataName(self, TestDataName):
        self._TestDataName = TestDataName

    @property
    def TestDataPath(self):
        """asr测试数据集路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TestDataPath

    @TestDataPath.setter
    def TestDataPath(self, TestDataPath):
        self._TestDataPath = TestDataPath


    def _deserialize(self, params):
        self._TestDataName = params.get("TestDataName")
        self._TestDataPath = params.get("TestDataPath")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TestDataSetConfig(AbstractModel):
    """评测数据集信息

    """

    def __init__(self):
        r"""
        :param _DataSetIds: 数据集id
注意：此字段可能返回 null，表示取不到有效值。
        :type DataSetIds: list of str
        :param _DataSetLabels: 数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :type DataSetLabels: list of str
        :param _DataSource: 数据源类型
注意：此字段可能返回 null，表示取不到有效值。
        :type DataSource: str
        :param _SrcDatasetIds: 前端输入数据集
注意：此字段可能返回 null，表示取不到有效值。
        :type SrcDatasetIds: list of str
        :param _SrcDatasetLabels: 前端输入数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :type SrcDatasetLabels: list of str
        :param _SrcDatasetLabelsMap: 前端输入数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :type SrcDatasetLabelsMap: str
        """
        self._DataSetIds = None
        self._DataSetLabels = None
        self._DataSource = None
        self._SrcDatasetIds = None
        self._SrcDatasetLabels = None
        self._SrcDatasetLabelsMap = None

    @property
    def DataSetIds(self):
        """数据集id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._DataSetIds

    @DataSetIds.setter
    def DataSetIds(self, DataSetIds):
        self._DataSetIds = DataSetIds

    @property
    def DataSetLabels(self):
        """数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._DataSetLabels

    @DataSetLabels.setter
    def DataSetLabels(self, DataSetLabels):
        self._DataSetLabels = DataSetLabels

    @property
    def DataSource(self):
        """数据源类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DataSource

    @DataSource.setter
    def DataSource(self, DataSource):
        self._DataSource = DataSource

    @property
    def SrcDatasetIds(self):
        """前端输入数据集
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._SrcDatasetIds

    @SrcDatasetIds.setter
    def SrcDatasetIds(self, SrcDatasetIds):
        self._SrcDatasetIds = SrcDatasetIds

    @property
    def SrcDatasetLabels(self):
        """前端输入数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._SrcDatasetLabels

    @SrcDatasetLabels.setter
    def SrcDatasetLabels(self, SrcDatasetLabels):
        self._SrcDatasetLabels = SrcDatasetLabels

    @property
    def SrcDatasetLabelsMap(self):
        """前端输入数据集标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SrcDatasetLabelsMap

    @SrcDatasetLabelsMap.setter
    def SrcDatasetLabelsMap(self, SrcDatasetLabelsMap):
        self._SrcDatasetLabelsMap = SrcDatasetLabelsMap


    def _deserialize(self, params):
        self._DataSetIds = params.get("DataSetIds")
        self._DataSetLabels = params.get("DataSetLabels")
        self._DataSource = params.get("DataSource")
        self._SrcDatasetIds = params.get("SrcDatasetIds")
        self._SrcDatasetLabels = params.get("SrcDatasetLabels")
        self._SrcDatasetLabelsMap = params.get("SrcDatasetLabelsMap")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TextAnalyzeResult(AbstractModel):
    """数据中心查询文本数据透视

    """

    def __init__(self):
        r"""
        :param _ContentNumber: 样本总数
注意：此字段可能返回 null，表示取不到有效值。
        :type ContentNumber: int
        :param _ContentAverageLength: 平均样本长度
注意：此字段可能返回 null，表示取不到有效值。
        :type ContentAverageLength: int
        :param _ContentMaxLength: 样本最长长度
注意：此字段可能返回 null，表示取不到有效值。
        :type ContentMaxLength: int
        :param _ContentLengthDistribution: 样本长度分布，返回以50为分隔区间的长度区间内样本数量
注意：此字段可能返回 null，表示取不到有效值。
        :type ContentLengthDistribution: list of ContentLengthCount
        :param _ContentWordDistribution: 样本词频分布，返回出现频率最高的前100个词频, 按照频率倒排
注意：此字段可能返回 null，表示取不到有效值。
        :type ContentWordDistribution: list of WordCount
        """
        self._ContentNumber = None
        self._ContentAverageLength = None
        self._ContentMaxLength = None
        self._ContentLengthDistribution = None
        self._ContentWordDistribution = None

    @property
    def ContentNumber(self):
        """样本总数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ContentNumber

    @ContentNumber.setter
    def ContentNumber(self, ContentNumber):
        self._ContentNumber = ContentNumber

    @property
    def ContentAverageLength(self):
        """平均样本长度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ContentAverageLength

    @ContentAverageLength.setter
    def ContentAverageLength(self, ContentAverageLength):
        self._ContentAverageLength = ContentAverageLength

    @property
    def ContentMaxLength(self):
        """样本最长长度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ContentMaxLength

    @ContentMaxLength.setter
    def ContentMaxLength(self, ContentMaxLength):
        self._ContentMaxLength = ContentMaxLength

    @property
    def ContentLengthDistribution(self):
        """样本长度分布，返回以50为分隔区间的长度区间内样本数量
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of ContentLengthCount
        """
        return self._ContentLengthDistribution

    @ContentLengthDistribution.setter
    def ContentLengthDistribution(self, ContentLengthDistribution):
        self._ContentLengthDistribution = ContentLengthDistribution

    @property
    def ContentWordDistribution(self):
        """样本词频分布，返回出现频率最高的前100个词频, 按照频率倒排
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of WordCount
        """
        return self._ContentWordDistribution

    @ContentWordDistribution.setter
    def ContentWordDistribution(self, ContentWordDistribution):
        self._ContentWordDistribution = ContentWordDistribution


    def _deserialize(self, params):
        self._ContentNumber = params.get("ContentNumber")
        self._ContentAverageLength = params.get("ContentAverageLength")
        self._ContentMaxLength = params.get("ContentMaxLength")
        if params.get("ContentLengthDistribution") is not None:
            self._ContentLengthDistribution = []
            for item in params.get("ContentLengthDistribution"):
                obj = ContentLengthCount()
                obj._deserialize(item)
                self._ContentLengthDistribution.append(obj)
        if params.get("ContentWordDistribution") is not None:
            self._ContentWordDistribution = []
            for item in params.get("ContentWordDistribution"):
                obj = WordCount()
                obj._deserialize(item)
                self._ContentWordDistribution.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TextLabelDistributionDetailInfoFifthClass(AbstractModel):
    """五级标签

    """

    def __init__(self):
        r"""
        :param _LabelValue: 标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelValue: str
        :param _LabelCount: 标签个数
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelCount: int
        :param _LabelPercentage: 标签占比
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelPercentage: float
        """
        self._LabelValue = None
        self._LabelCount = None
        self._LabelPercentage = None

    @property
    def LabelValue(self):
        """标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LabelValue

    @LabelValue.setter
    def LabelValue(self, LabelValue):
        self._LabelValue = LabelValue

    @property
    def LabelCount(self):
        """标签个数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._LabelCount

    @LabelCount.setter
    def LabelCount(self, LabelCount):
        self._LabelCount = LabelCount

    @property
    def LabelPercentage(self):
        """标签占比
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._LabelPercentage

    @LabelPercentage.setter
    def LabelPercentage(self, LabelPercentage):
        self._LabelPercentage = LabelPercentage


    def _deserialize(self, params):
        self._LabelValue = params.get("LabelValue")
        self._LabelCount = params.get("LabelCount")
        self._LabelPercentage = params.get("LabelPercentage")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TextLabelDistributionDetailInfoFirstClass(AbstractModel):
    """一级标签

    """

    def __init__(self):
        r"""
        :param _LabelValue: 标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelValue: str
        :param _LabelCount: 标签个数
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelCount: int
        :param _LabelPercentage: 标签占比
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelPercentage: float
        :param _ChildLabelList: 子标签分布
注意：此字段可能返回 null，表示取不到有效值。
        :type ChildLabelList: list of TextLabelDistributionDetailInfoSecondClass
        """
        self._LabelValue = None
        self._LabelCount = None
        self._LabelPercentage = None
        self._ChildLabelList = None

    @property
    def LabelValue(self):
        """标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LabelValue

    @LabelValue.setter
    def LabelValue(self, LabelValue):
        self._LabelValue = LabelValue

    @property
    def LabelCount(self):
        """标签个数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._LabelCount

    @LabelCount.setter
    def LabelCount(self, LabelCount):
        self._LabelCount = LabelCount

    @property
    def LabelPercentage(self):
        """标签占比
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._LabelPercentage

    @LabelPercentage.setter
    def LabelPercentage(self, LabelPercentage):
        self._LabelPercentage = LabelPercentage

    @property
    def ChildLabelList(self):
        """子标签分布
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TextLabelDistributionDetailInfoSecondClass
        """
        return self._ChildLabelList

    @ChildLabelList.setter
    def ChildLabelList(self, ChildLabelList):
        self._ChildLabelList = ChildLabelList


    def _deserialize(self, params):
        self._LabelValue = params.get("LabelValue")
        self._LabelCount = params.get("LabelCount")
        self._LabelPercentage = params.get("LabelPercentage")
        if params.get("ChildLabelList") is not None:
            self._ChildLabelList = []
            for item in params.get("ChildLabelList"):
                obj = TextLabelDistributionDetailInfoSecondClass()
                obj._deserialize(item)
                self._ChildLabelList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TextLabelDistributionDetailInfoFourthClass(AbstractModel):
    """四级标签

    """

    def __init__(self):
        r"""
        :param _LabelValue: 标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelValue: str
        :param _LabelCount: 标签个数
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelCount: int
        :param _LabelPercentage: 标签占比
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelPercentage: float
        :param _ChildLabelList: 子标签分布
注意：此字段可能返回 null，表示取不到有效值。
        :type ChildLabelList: list of TextLabelDistributionDetailInfoFifthClass
        """
        self._LabelValue = None
        self._LabelCount = None
        self._LabelPercentage = None
        self._ChildLabelList = None

    @property
    def LabelValue(self):
        """标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LabelValue

    @LabelValue.setter
    def LabelValue(self, LabelValue):
        self._LabelValue = LabelValue

    @property
    def LabelCount(self):
        """标签个数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._LabelCount

    @LabelCount.setter
    def LabelCount(self, LabelCount):
        self._LabelCount = LabelCount

    @property
    def LabelPercentage(self):
        """标签占比
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._LabelPercentage

    @LabelPercentage.setter
    def LabelPercentage(self, LabelPercentage):
        self._LabelPercentage = LabelPercentage

    @property
    def ChildLabelList(self):
        """子标签分布
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TextLabelDistributionDetailInfoFifthClass
        """
        return self._ChildLabelList

    @ChildLabelList.setter
    def ChildLabelList(self, ChildLabelList):
        self._ChildLabelList = ChildLabelList


    def _deserialize(self, params):
        self._LabelValue = params.get("LabelValue")
        self._LabelCount = params.get("LabelCount")
        self._LabelPercentage = params.get("LabelPercentage")
        if params.get("ChildLabelList") is not None:
            self._ChildLabelList = []
            for item in params.get("ChildLabelList"):
                obj = TextLabelDistributionDetailInfoFifthClass()
                obj._deserialize(item)
                self._ChildLabelList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TextLabelDistributionDetailInfoSecondClass(AbstractModel):
    """二级标签

    """

    def __init__(self):
        r"""
        :param _LabelValue: 标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelValue: str
        :param _LabelCount: 标签个数
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelCount: int
        :param _LabelPercentage: 标签占比
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelPercentage: float
        :param _ChildLabelList: 子标签分布
注意：此字段可能返回 null，表示取不到有效值。
        :type ChildLabelList: list of TextLabelDistributionDetailInfoThirdClass
        """
        self._LabelValue = None
        self._LabelCount = None
        self._LabelPercentage = None
        self._ChildLabelList = None

    @property
    def LabelValue(self):
        """标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LabelValue

    @LabelValue.setter
    def LabelValue(self, LabelValue):
        self._LabelValue = LabelValue

    @property
    def LabelCount(self):
        """标签个数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._LabelCount

    @LabelCount.setter
    def LabelCount(self, LabelCount):
        self._LabelCount = LabelCount

    @property
    def LabelPercentage(self):
        """标签占比
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._LabelPercentage

    @LabelPercentage.setter
    def LabelPercentage(self, LabelPercentage):
        self._LabelPercentage = LabelPercentage

    @property
    def ChildLabelList(self):
        """子标签分布
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TextLabelDistributionDetailInfoThirdClass
        """
        return self._ChildLabelList

    @ChildLabelList.setter
    def ChildLabelList(self, ChildLabelList):
        self._ChildLabelList = ChildLabelList


    def _deserialize(self, params):
        self._LabelValue = params.get("LabelValue")
        self._LabelCount = params.get("LabelCount")
        self._LabelPercentage = params.get("LabelPercentage")
        if params.get("ChildLabelList") is not None:
            self._ChildLabelList = []
            for item in params.get("ChildLabelList"):
                obj = TextLabelDistributionDetailInfoThirdClass()
                obj._deserialize(item)
                self._ChildLabelList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TextLabelDistributionDetailInfoThirdClass(AbstractModel):
    """三级标签

    """

    def __init__(self):
        r"""
        :param _LabelValue: 标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelValue: str
        :param _LabelCount: 标签个数
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelCount: int
        :param _LabelPercentage: 标签占比
注意：此字段可能返回 null，表示取不到有效值。
        :type LabelPercentage: float
        :param _ChildLabelList: 子标签分布
注意：此字段可能返回 null，表示取不到有效值。
        :type ChildLabelList: list of TextLabelDistributionDetailInfoFourthClass
        """
        self._LabelValue = None
        self._LabelCount = None
        self._LabelPercentage = None
        self._ChildLabelList = None

    @property
    def LabelValue(self):
        """标签名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LabelValue

    @LabelValue.setter
    def LabelValue(self, LabelValue):
        self._LabelValue = LabelValue

    @property
    def LabelCount(self):
        """标签个数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._LabelCount

    @LabelCount.setter
    def LabelCount(self, LabelCount):
        self._LabelCount = LabelCount

    @property
    def LabelPercentage(self):
        """标签占比
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._LabelPercentage

    @LabelPercentage.setter
    def LabelPercentage(self, LabelPercentage):
        self._LabelPercentage = LabelPercentage

    @property
    def ChildLabelList(self):
        """子标签分布
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TextLabelDistributionDetailInfoFourthClass
        """
        return self._ChildLabelList

    @ChildLabelList.setter
    def ChildLabelList(self, ChildLabelList):
        self._ChildLabelList = ChildLabelList


    def _deserialize(self, params):
        self._LabelValue = params.get("LabelValue")
        self._LabelCount = params.get("LabelCount")
        self._LabelPercentage = params.get("LabelPercentage")
        if params.get("ChildLabelList") is not None:
            self._ChildLabelList = []
            for item in params.get("ChildLabelList"):
                obj = TextLabelDistributionDetailInfoFourthClass()
                obj._deserialize(item)
                self._ChildLabelList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TextLabelDistributionInfo(AbstractModel):
    """文本标签

    """

    def __init__(self):
        r"""
        :param _Theme: 文本分类题目名称
注意：此字段可能返回 null，表示取不到有效值。
        :type Theme: str
        :param _ClassLabelList: 一级标签分布
注意：此字段可能返回 null，表示取不到有效值。
        :type ClassLabelList: list of TextLabelDistributionDetailInfoFirstClass
        """
        self._Theme = None
        self._ClassLabelList = None

    @property
    def Theme(self):
        """文本分类题目名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Theme

    @Theme.setter
    def Theme(self, Theme):
        self._Theme = Theme

    @property
    def ClassLabelList(self):
        """一级标签分布
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TextLabelDistributionDetailInfoFirstClass
        """
        return self._ClassLabelList

    @ClassLabelList.setter
    def ClassLabelList(self, ClassLabelList):
        self._ClassLabelList = ClassLabelList


    def _deserialize(self, params):
        self._Theme = params.get("Theme")
        if params.get("ClassLabelList") is not None:
            self._ClassLabelList = []
            for item in params.get("ClassLabelList"):
                obj = TextLabelDistributionDetailInfoFirstClass()
                obj._deserialize(item)
                self._ClassLabelList.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TrainParam(AbstractModel):
    """训练超参

    """

    def __init__(self):
        r"""
        :param _Name: 参数名
注意：此字段可能返回 null，表示取不到有效值。
        :type Name: str
        :param _DefaultValue: 默认参数值
注意：此字段可能返回 null，表示取不到有效值。
        :type DefaultValue: str
        :param _Comment: 参数注释
注意：此字段可能返回 null，表示取不到有效值。
        :type Comment: str
        :param _Type: 参数类型
注意：此字段可能返回 null，表示取不到有效值。
        :type Type: str
        """
        self._Name = None
        self._DefaultValue = None
        self._Comment = None
        self._Type = None

    @property
    def Name(self):
        """参数名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def DefaultValue(self):
        """默认参数值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DefaultValue

    @DefaultValue.setter
    def DefaultValue(self, DefaultValue):
        self._DefaultValue = DefaultValue

    @property
    def Comment(self):
        """参数注释
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Comment

    @Comment.setter
    def Comment(self, Comment):
        self._Comment = Comment

    @property
    def Type(self):
        """参数类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type


    def _deserialize(self, params):
        self._Name = params.get("Name")
        self._DefaultValue = params.get("DefaultValue")
        self._Comment = params.get("Comment")
        self._Type = params.get("Type")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TrainResourceConfig(AbstractModel):
    """训练资源配置

    """

    def __init__(self):
        r"""
        :param _ChargeType: 计费模式
注意：此字段可能返回 null，表示取不到有效值。
        :type ChargeType: str
        :param _ResourceGroupId: 资源组ID
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _ResourceGroupName: 资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupName: str
        :param _ResourceConfigInfo: 资源配置
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceConfigInfo: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        """
        self._ChargeType = None
        self._ResourceGroupId = None
        self._ResourceGroupName = None
        self._ResourceConfigInfo = None

    @property
    def ChargeType(self):
        """计费模式
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceGroupId(self):
        """资源组ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceGroupName(self):
        """资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def ResourceConfigInfo(self):
        """资源配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ResourceConfigInfo`
        """
        return self._ResourceConfigInfo

    @ResourceConfigInfo.setter
    def ResourceConfigInfo(self, ResourceConfigInfo):
        self._ResourceConfigInfo = ResourceConfigInfo


    def _deserialize(self, params):
        self._ChargeType = params.get("ChargeType")
        self._ResourceGroupId = params.get("ResourceGroupId")
        self._ResourceGroupName = params.get("ResourceGroupName")
        if params.get("ResourceConfigInfo") is not None:
            self._ResourceConfigInfo = ResourceConfigInfo()
            self._ResourceConfigInfo._deserialize(params.get("ResourceConfigInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TrainResourceInfo(AbstractModel):
    """训练资源配置信息

    """

    def __init__(self):
        r"""
        :param _Cpu: 处理器资源, 单位为1/1000核
注意：此字段可能返回 null，表示取不到有效值。
        :type Cpu: int
        :param _Memory: 内存资源, 单位为1M
注意：此字段可能返回 null，表示取不到有效值。
        :type Memory: int
        :param _Gpu: Gpu卡个数资源, 单位为0.01单位的GpuType.
注意：此字段可能返回 null，表示取不到有效值。
        :type Gpu: int
        :param _GpuType: Gpu卡型号
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuType: str
        :param _Role: 角色
注意：此字段可能返回 null，表示取不到有效值。
        :type Role: str
        :param _InstanceType: 算力规格ID
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceType: str
        :param _InstanceTypeAlias: 算力规格名称
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceTypeAlias: str
        :param _InstanceNum: 计算节点数
注意：此字段可能返回 null，表示取不到有效值。
        :type InstanceNum: int
        :param _RDMAConfig: rdma配置
注意：此字段可能返回 null，表示取不到有效值。
        :type RDMAConfig: :class:`tencentcloud.tione.v20211111.models.RDMAConfig`
        :param _ExtendedResourceList: 扩展资源，主要用来适配国有化资源
注意：此字段可能返回 null，表示取不到有效值。
        :type ExtendedResourceList: :class:`tencentcloud.tione.v20211111.models.ExtendedResourceList`
        :param _ArchType: 集群架构类型，枚举值：x86, arm
注意：此字段可能返回 null，表示取不到有效值。
        :type ArchType: str
        """
        self._Cpu = None
        self._Memory = None
        self._Gpu = None
        self._GpuType = None
        self._Role = None
        self._InstanceType = None
        self._InstanceTypeAlias = None
        self._InstanceNum = None
        self._RDMAConfig = None
        self._ExtendedResourceList = None
        self._ArchType = None

    @property
    def Cpu(self):
        """处理器资源, 单位为1/1000核
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Cpu

    @Cpu.setter
    def Cpu(self, Cpu):
        self._Cpu = Cpu

    @property
    def Memory(self):
        """内存资源, 单位为1M
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Memory

    @Memory.setter
    def Memory(self, Memory):
        self._Memory = Memory

    @property
    def Gpu(self):
        """Gpu卡个数资源, 单位为0.01单位的GpuType.
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Gpu

    @Gpu.setter
    def Gpu(self, Gpu):
        self._Gpu = Gpu

    @property
    def GpuType(self):
        """Gpu卡型号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType

    @property
    def Role(self):
        """角色
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Role

    @Role.setter
    def Role(self, Role):
        self._Role = Role

    @property
    def InstanceType(self):
        """算力规格ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceType

    @InstanceType.setter
    def InstanceType(self, InstanceType):
        self._InstanceType = InstanceType

    @property
    def InstanceTypeAlias(self):
        """算力规格名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._InstanceTypeAlias

    @InstanceTypeAlias.setter
    def InstanceTypeAlias(self, InstanceTypeAlias):
        self._InstanceTypeAlias = InstanceTypeAlias

    @property
    def InstanceNum(self):
        """计算节点数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._InstanceNum

    @InstanceNum.setter
    def InstanceNum(self, InstanceNum):
        self._InstanceNum = InstanceNum

    @property
    def RDMAConfig(self):
        """rdma配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.RDMAConfig`
        """
        return self._RDMAConfig

    @RDMAConfig.setter
    def RDMAConfig(self, RDMAConfig):
        self._RDMAConfig = RDMAConfig

    @property
    def ExtendedResourceList(self):
        """扩展资源，主要用来适配国有化资源
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ExtendedResourceList`
        """
        return self._ExtendedResourceList

    @ExtendedResourceList.setter
    def ExtendedResourceList(self, ExtendedResourceList):
        self._ExtendedResourceList = ExtendedResourceList

    @property
    def ArchType(self):
        """集群架构类型，枚举值：x86, arm
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ArchType

    @ArchType.setter
    def ArchType(self, ArchType):
        self._ArchType = ArchType


    def _deserialize(self, params):
        self._Cpu = params.get("Cpu")
        self._Memory = params.get("Memory")
        self._Gpu = params.get("Gpu")
        self._GpuType = params.get("GpuType")
        self._Role = params.get("Role")
        self._InstanceType = params.get("InstanceType")
        self._InstanceTypeAlias = params.get("InstanceTypeAlias")
        self._InstanceNum = params.get("InstanceNum")
        if params.get("RDMAConfig") is not None:
            self._RDMAConfig = RDMAConfig()
            self._RDMAConfig._deserialize(params.get("RDMAConfig"))
        if params.get("ExtendedResourceList") is not None:
            self._ExtendedResourceList = ExtendedResourceList()
            self._ExtendedResourceList._deserialize(params.get("ExtendedResourceList"))
        self._ArchType = params.get("ArchType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TrainTask(AbstractModel):
    """训练任务

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type AutoMLTaskId: str
        :param _TrainTaskId: 训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskId: str
        :param _TrainId: 任务式建模任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainId: str
        :param _TaskVersion: 任务版本
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskVersion: str
        :param _Tags: 标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _AutoMLTaskDescription: 任务描述
注意：此字段可能返回 null，表示取不到有效值。
        :type AutoMLTaskDescription: str
        :param _SceneName: 场景名称
注意：此字段可能返回 null，表示取不到有效值。
        :type SceneName: str
        :param _Creator: 创建人
注意：此字段可能返回 null，表示取不到有效值。
        :type Creator: str
        :param _Updator: 修改人
注意：此字段可能返回 null，表示取不到有效值。
        :type Updator: str
        :param _TrainTaskStatus: 训练状态
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskStatus: str
        :param _TrainTaskProgress: 训练进度
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskProgress: int
        :param _TrainTaskStartTime: 训练开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskStartTime: str
        :param _TrainTaskEndTime: 训练结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskEndTime: str
        :param _ErrorMsg: 训练任务失败时错误详情
注意：此字段可能返回 null，表示取不到有效值。
        :type ErrorMsg: str
        :param _ChargeType: 计费类型
注意：此字段可能返回 null，表示取不到有效值。
        :type ChargeType: str
        :param _ChargeStatus: 计费状态
注意：此字段可能返回 null，表示取不到有效值。
        :type ChargeStatus: str
        :param _TrainResourceConfig: 训练资源配置
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainResourceConfig: :class:`tencentcloud.tione.v20211111.models.TrainResourceConfig`
        :param _CreateTime: 任务创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _TaskOutputCosInfo: 任务输出cos路径
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskOutputCosInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _ModelTrainConfig: 训练模型配置
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelTrainConfig: :class:`tencentcloud.tione.v20211111.models.ModelTrainConfig`
        :param _SceneId: 场景ID
注意：此字段可能返回 null，表示取不到有效值。
        :type SceneId: str
        :param _BillingInfo: 账单信息
注意：此字段可能返回 null，表示取不到有效值。
        :type BillingInfo: str
        :param _SceneDomain: 场景领域
注意：此字段可能返回 null，表示取不到有效值。
        :type SceneDomain: str
        :param _ModelAccTaskStatus: 模型优化状态
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAccTaskStatus: str
        :param _ResourceGroupSWType: 资源组机器来源，可选值包括
None
NORMAL
SW
        :type ResourceGroupSWType: str
        """
        self._AutoMLTaskId = None
        self._TrainTaskId = None
        self._TrainId = None
        self._TaskVersion = None
        self._Tags = None
        self._AutoMLTaskDescription = None
        self._SceneName = None
        self._Creator = None
        self._Updator = None
        self._TrainTaskStatus = None
        self._TrainTaskProgress = None
        self._TrainTaskStartTime = None
        self._TrainTaskEndTime = None
        self._ErrorMsg = None
        self._ChargeType = None
        self._ChargeStatus = None
        self._TrainResourceConfig = None
        self._CreateTime = None
        self._TaskOutputCosInfo = None
        self._ModelTrainConfig = None
        self._SceneId = None
        self._BillingInfo = None
        self._SceneDomain = None
        self._ModelAccTaskStatus = None
        self._ResourceGroupSWType = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def TrainTaskId(self):
        """训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId

    @property
    def TrainId(self):
        """任务式建模任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainId

    @TrainId.setter
    def TrainId(self, TrainId):
        self._TrainId = TrainId

    @property
    def TaskVersion(self):
        """任务版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskVersion

    @TaskVersion.setter
    def TaskVersion(self, TaskVersion):
        self._TaskVersion = TaskVersion

    @property
    def Tags(self):
        """标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def AutoMLTaskDescription(self):
        """任务描述
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AutoMLTaskDescription

    @AutoMLTaskDescription.setter
    def AutoMLTaskDescription(self, AutoMLTaskDescription):
        self._AutoMLTaskDescription = AutoMLTaskDescription

    @property
    def SceneName(self):
        """场景名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SceneName

    @SceneName.setter
    def SceneName(self, SceneName):
        self._SceneName = SceneName

    @property
    def Creator(self):
        """创建人
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Creator

    @Creator.setter
    def Creator(self, Creator):
        self._Creator = Creator

    @property
    def Updator(self):
        """修改人
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Updator

    @Updator.setter
    def Updator(self, Updator):
        self._Updator = Updator

    @property
    def TrainTaskStatus(self):
        """训练状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainTaskStatus

    @TrainTaskStatus.setter
    def TrainTaskStatus(self, TrainTaskStatus):
        self._TrainTaskStatus = TrainTaskStatus

    @property
    def TrainTaskProgress(self):
        """训练进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TrainTaskProgress

    @TrainTaskProgress.setter
    def TrainTaskProgress(self, TrainTaskProgress):
        self._TrainTaskProgress = TrainTaskProgress

    @property
    def TrainTaskStartTime(self):
        """训练开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainTaskStartTime

    @TrainTaskStartTime.setter
    def TrainTaskStartTime(self, TrainTaskStartTime):
        self._TrainTaskStartTime = TrainTaskStartTime

    @property
    def TrainTaskEndTime(self):
        """训练结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainTaskEndTime

    @TrainTaskEndTime.setter
    def TrainTaskEndTime(self, TrainTaskEndTime):
        self._TrainTaskEndTime = TrainTaskEndTime

    @property
    def ErrorMsg(self):
        """训练任务失败时错误详情
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ErrorMsg

    @ErrorMsg.setter
    def ErrorMsg(self, ErrorMsg):
        self._ErrorMsg = ErrorMsg

    @property
    def ChargeType(self):
        """计费类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ChargeStatus(self):
        """计费状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ChargeStatus

    @ChargeStatus.setter
    def ChargeStatus(self, ChargeStatus):
        self._ChargeStatus = ChargeStatus

    @property
    def TrainResourceConfig(self):
        """训练资源配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.TrainResourceConfig`
        """
        return self._TrainResourceConfig

    @TrainResourceConfig.setter
    def TrainResourceConfig(self, TrainResourceConfig):
        self._TrainResourceConfig = TrainResourceConfig

    @property
    def CreateTime(self):
        """任务创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def TaskOutputCosInfo(self):
        """任务输出cos路径
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._TaskOutputCosInfo

    @TaskOutputCosInfo.setter
    def TaskOutputCosInfo(self, TaskOutputCosInfo):
        self._TaskOutputCosInfo = TaskOutputCosInfo

    @property
    def ModelTrainConfig(self):
        """训练模型配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelTrainConfig`
        """
        return self._ModelTrainConfig

    @ModelTrainConfig.setter
    def ModelTrainConfig(self, ModelTrainConfig):
        self._ModelTrainConfig = ModelTrainConfig

    @property
    def SceneId(self):
        """场景ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SceneId

    @SceneId.setter
    def SceneId(self, SceneId):
        self._SceneId = SceneId

    @property
    def BillingInfo(self):
        """账单信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._BillingInfo

    @BillingInfo.setter
    def BillingInfo(self, BillingInfo):
        self._BillingInfo = BillingInfo

    @property
    def SceneDomain(self):
        """场景领域
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SceneDomain

    @SceneDomain.setter
    def SceneDomain(self, SceneDomain):
        self._SceneDomain = SceneDomain

    @property
    def ModelAccTaskStatus(self):
        """模型优化状态
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelAccTaskStatus

    @ModelAccTaskStatus.setter
    def ModelAccTaskStatus(self, ModelAccTaskStatus):
        self._ModelAccTaskStatus = ModelAccTaskStatus

    @property
    def ResourceGroupSWType(self):
        """资源组机器来源，可选值包括
None
NORMAL
SW
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._TrainTaskId = params.get("TrainTaskId")
        self._TrainId = params.get("TrainId")
        self._TaskVersion = params.get("TaskVersion")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._AutoMLTaskDescription = params.get("AutoMLTaskDescription")
        self._SceneName = params.get("SceneName")
        self._Creator = params.get("Creator")
        self._Updator = params.get("Updator")
        self._TrainTaskStatus = params.get("TrainTaskStatus")
        self._TrainTaskProgress = params.get("TrainTaskProgress")
        self._TrainTaskStartTime = params.get("TrainTaskStartTime")
        self._TrainTaskEndTime = params.get("TrainTaskEndTime")
        self._ErrorMsg = params.get("ErrorMsg")
        self._ChargeType = params.get("ChargeType")
        self._ChargeStatus = params.get("ChargeStatus")
        if params.get("TrainResourceConfig") is not None:
            self._TrainResourceConfig = TrainResourceConfig()
            self._TrainResourceConfig._deserialize(params.get("TrainResourceConfig"))
        self._CreateTime = params.get("CreateTime")
        if params.get("TaskOutputCosInfo") is not None:
            self._TaskOutputCosInfo = CosPathInfo()
            self._TaskOutputCosInfo._deserialize(params.get("TaskOutputCosInfo"))
        if params.get("ModelTrainConfig") is not None:
            self._ModelTrainConfig = ModelTrainConfig()
            self._ModelTrainConfig._deserialize(params.get("ModelTrainConfig"))
        self._SceneId = params.get("SceneId")
        self._BillingInfo = params.get("BillingInfo")
        self._SceneDomain = params.get("SceneDomain")
        self._ModelAccTaskStatus = params.get("ModelAccTaskStatus")
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TrainTaskGroup(AbstractModel):
    """训练任务组

    """

    def __init__(self):
        r"""
        :param _TaskGroupId: 自动学习任务组ID
        :type TaskGroupId: str
        :param _TaskName: 自动学习任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskName: str
        :param _TrainTasks: 自动学习任务列表
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTasks: list of TrainTask
        """
        self._TaskGroupId = None
        self._TaskName = None
        self._TrainTasks = None

    @property
    def TaskGroupId(self):
        """自动学习任务组ID
        :rtype: str
        """
        return self._TaskGroupId

    @TaskGroupId.setter
    def TaskGroupId(self, TaskGroupId):
        self._TaskGroupId = TaskGroupId

    @property
    def TaskName(self):
        """自动学习任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskName

    @TaskName.setter
    def TaskName(self, TaskName):
        self._TaskName = TaskName

    @property
    def TrainTasks(self):
        """自动学习任务列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TrainTask
        """
        return self._TrainTasks

    @TrainTasks.setter
    def TrainTasks(self, TrainTasks):
        self._TrainTasks = TrainTasks


    def _deserialize(self, params):
        self._TaskGroupId = params.get("TaskGroupId")
        self._TaskName = params.get("TaskName")
        if params.get("TrainTasks") is not None:
            self._TrainTasks = []
            for item in params.get("TrainTasks"):
                obj = TrainTask()
                obj._deserialize(item)
                self._TrainTasks.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TrainingDataPoint(AbstractModel):
    """训练数据

    """

    def __init__(self):
        r"""
        :param _Timestamp: 时间戳
注意：此字段可能返回 null，表示取不到有效值。
        :type Timestamp: int
        :param _Value: 训练上报的值。可以为训练指标（双精度浮点数，也可以为Epoch/Step（两者皆保证是整数）
注意：此字段可能返回 null，表示取不到有效值。
        :type Value: float
        """
        self._Timestamp = None
        self._Value = None

    @property
    def Timestamp(self):
        """时间戳
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Timestamp

    @Timestamp.setter
    def Timestamp(self, Timestamp):
        self._Timestamp = Timestamp

    @property
    def Value(self):
        """训练上报的值。可以为训练指标（双精度浮点数，也可以为Epoch/Step（两者皆保证是整数）
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: float
        """
        return self._Value

    @Value.setter
    def Value(self, Value):
        self._Value = Value


    def _deserialize(self, params):
        self._Timestamp = params.get("Timestamp")
        self._Value = params.get("Value")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TrainingMetric(AbstractModel):
    """训练指标

    """

    def __init__(self):
        r"""
        :param _MetricName: 指标名
        :type MetricName: str
        :param _Values: 数据值
注意：此字段可能返回 null，表示取不到有效值。
        :type Values: list of TrainingDataPoint
        :param _Epochs: 上报的Epoch. 可能为空
注意：此字段可能返回 null，表示取不到有效值。
        :type Epochs: list of TrainingDataPoint
        :param _Steps: 上报的Step. 可能为空
注意：此字段可能返回 null，表示取不到有效值。
        :type Steps: list of TrainingDataPoint
        :param _TotalSteps: 上报的TotalSteps. 可能为空
注意：此字段可能返回 null，表示取不到有效值。
        :type TotalSteps: list of TrainingDataPoint
        """
        self._MetricName = None
        self._Values = None
        self._Epochs = None
        self._Steps = None
        self._TotalSteps = None

    @property
    def MetricName(self):
        """指标名
        :rtype: str
        """
        return self._MetricName

    @MetricName.setter
    def MetricName(self, MetricName):
        self._MetricName = MetricName

    @property
    def Values(self):
        """数据值
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TrainingDataPoint
        """
        return self._Values

    @Values.setter
    def Values(self, Values):
        self._Values = Values

    @property
    def Epochs(self):
        """上报的Epoch. 可能为空
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TrainingDataPoint
        """
        return self._Epochs

    @Epochs.setter
    def Epochs(self, Epochs):
        self._Epochs = Epochs

    @property
    def Steps(self):
        """上报的Step. 可能为空
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TrainingDataPoint
        """
        return self._Steps

    @Steps.setter
    def Steps(self, Steps):
        self._Steps = Steps

    @property
    def TotalSteps(self):
        """上报的TotalSteps. 可能为空
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TrainingDataPoint
        """
        return self._TotalSteps

    @TotalSteps.setter
    def TotalSteps(self, TotalSteps):
        self._TotalSteps = TotalSteps


    def _deserialize(self, params):
        self._MetricName = params.get("MetricName")
        if params.get("Values") is not None:
            self._Values = []
            for item in params.get("Values"):
                obj = TrainingDataPoint()
                obj._deserialize(item)
                self._Values.append(obj)
        if params.get("Epochs") is not None:
            self._Epochs = []
            for item in params.get("Epochs"):
                obj = TrainingDataPoint()
                obj._deserialize(item)
                self._Epochs.append(obj)
        if params.get("Steps") is not None:
            self._Steps = []
            for item in params.get("Steps"):
                obj = TrainingDataPoint()
                obj._deserialize(item)
                self._Steps.append(obj)
        if params.get("TotalSteps") is not None:
            self._TotalSteps = []
            for item in params.get("TotalSteps"):
                obj = TrainingDataPoint()
                obj._deserialize(item)
                self._TotalSteps.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TrainingModelDTO(AbstractModel):
    """模型列表

    """

    def __init__(self):
        r"""
        :param _TrainingModelId: 模型id
        :type TrainingModelId: str
        :param _TrainingModelName: 模型名称
        :type TrainingModelName: str
        :param _Tags: 标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _CreateTime: 模型创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :type CreateTime: str
        :param _TrainingModelVersions: 模型版本列表。默认不返回，仅在指定请求参数开启时返回。
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainingModelVersions: list of TrainingModelVersionDTO
        :param _ModelAffiliation: 模型所属模块; 枚举值：MODEL_REPO 模型仓库 AI_MARKET AI市场。如果为空表示属于模型仓库。
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAffiliation: str
        """
        self._TrainingModelId = None
        self._TrainingModelName = None
        self._Tags = None
        self._CreateTime = None
        self._TrainingModelVersions = None
        self._ModelAffiliation = None

    @property
    def TrainingModelId(self):
        """模型id
        :rtype: str
        """
        return self._TrainingModelId

    @TrainingModelId.setter
    def TrainingModelId(self, TrainingModelId):
        self._TrainingModelId = TrainingModelId

    @property
    def TrainingModelName(self):
        """模型名称
        :rtype: str
        """
        return self._TrainingModelName

    @TrainingModelName.setter
    def TrainingModelName(self, TrainingModelName):
        self._TrainingModelName = TrainingModelName

    @property
    def Tags(self):
        """标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def CreateTime(self):
        """模型创建时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def TrainingModelVersions(self):
        """模型版本列表。默认不返回，仅在指定请求参数开启时返回。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of TrainingModelVersionDTO
        """
        return self._TrainingModelVersions

    @TrainingModelVersions.setter
    def TrainingModelVersions(self, TrainingModelVersions):
        self._TrainingModelVersions = TrainingModelVersions

    @property
    def ModelAffiliation(self):
        """模型所属模块; 枚举值：MODEL_REPO 模型仓库 AI_MARKET AI市场。如果为空表示属于模型仓库。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelAffiliation

    @ModelAffiliation.setter
    def ModelAffiliation(self, ModelAffiliation):
        self._ModelAffiliation = ModelAffiliation


    def _deserialize(self, params):
        self._TrainingModelId = params.get("TrainingModelId")
        self._TrainingModelName = params.get("TrainingModelName")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._CreateTime = params.get("CreateTime")
        if params.get("TrainingModelVersions") is not None:
            self._TrainingModelVersions = []
            for item in params.get("TrainingModelVersions"):
                obj = TrainingModelVersionDTO()
                obj._deserialize(item)
                self._TrainingModelVersions.append(obj)
        self._ModelAffiliation = params.get("ModelAffiliation")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TrainingModelVersionDTO(AbstractModel):
    """模型版本列表

    """

    def __init__(self):
        r"""
        :param _TrainingModelId: 模型id
        :type TrainingModelId: str
        :param _TrainingModelVersionId: 模型版本id
        :type TrainingModelVersionId: str
        :param _TrainingModelVersion: 模型版本
        :type TrainingModelVersion: str
        :param _TrainingModelSource: 模型来源
        :type TrainingModelSource: str
        :param _TrainingModelCreateTime: 创建时间
        :type TrainingModelCreateTime: str
        :param _TrainingModelCreator: 创建人uin
        :type TrainingModelCreator: str
        :param _AlgorithmFramework: 算法框架
        :type AlgorithmFramework: str
        :param _ReasoningEnvironment: 推理环境
        :type ReasoningEnvironment: str
        :param _ReasoningEnvironmentSource: 推理环境来源
        :type ReasoningEnvironmentSource: str
        :param _TrainingModelIndex: 模型指标
        :type TrainingModelIndex: str
        :param _TrainingJobName: 训练任务名称
        :type TrainingJobName: str
        :param _TrainingModelCosPath: 模型cos路径
        :type TrainingModelCosPath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _TrainingModelName: 模型名称
        :type TrainingModelName: str
        :param _TrainingJobId: 训练任务id
        :type TrainingJobId: str
        :param _ReasoningImageInfo: 自定义推理环境
        :type ReasoningImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _CreateTime: 模型版本创建时间
        :type CreateTime: str
        :param _TrainingModelStatus: 模型处理状态
STATUS_SUCCESS：导入成功，STATUS_FAILED：导入失败 ，STATUS_RUNNING：导入中
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainingModelStatus: str
        :param _TrainingModelProgress: 模型处理进度
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainingModelProgress: int
        :param _TrainingModelErrorMsg: 模型错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainingModelErrorMsg: str
        :param _TrainingModelFormat: 模型格式
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainingModelFormat: str
        :param _VersionType: 模型版本类型
注意：此字段可能返回 null，表示取不到有效值。
        :type VersionType: str
        :param _GPUType: GPU类型
注意：此字段可能返回 null，表示取不到有效值。
        :type GPUType: str
        :param _AutoClean: 模型自动清理开关
注意：此字段可能返回 null，表示取不到有效值。
        :type AutoClean: str
        :param _ModelCleanPeriod: 模型清理周期
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelCleanPeriod: int
        :param _MaxReservedModels: 模型数量保留上限
注意：此字段可能返回 null，表示取不到有效值。
        :type MaxReservedModels: int
        :param _ModelHotUpdatePath: 模型热更新目录
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelHotUpdatePath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _ReasoningEnvironmentId: 推理环境id
注意：此字段可能返回 null，表示取不到有效值。
        :type ReasoningEnvironmentId: str
        :param _TrainingJobVersion: 训练任务版本
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainingJobVersion: str
        :param _TrainingPreference: 训练偏好
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainingPreference: str
        :param _AutoMLTaskId: 自动学习任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type AutoMLTaskId: str
        :param _IsQAT: 是否QAT模型
注意：此字段可能返回 null，表示取不到有效值。
        :type IsQAT: bool
        :param _ModelAffiliation: 模型所属模块; 枚举值：MODEL_REPO 模型仓库 AI_MARKET AI市场。如果为空表示属于模型仓库。
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelAffiliation: str
        :param _TrainingJobBackendId: 后端训练任务id
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainingJobBackendId: str
        :param _TrainingJobBackendName: 后端训练任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainingJobBackendName: str
        :param _ModelBackendId: 后端模型id
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelBackendId: str
        :param _ModelBackendName: 后端模型名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelBackendName: str
        """
        self._TrainingModelId = None
        self._TrainingModelVersionId = None
        self._TrainingModelVersion = None
        self._TrainingModelSource = None
        self._TrainingModelCreateTime = None
        self._TrainingModelCreator = None
        self._AlgorithmFramework = None
        self._ReasoningEnvironment = None
        self._ReasoningEnvironmentSource = None
        self._TrainingModelIndex = None
        self._TrainingJobName = None
        self._TrainingModelCosPath = None
        self._TrainingModelName = None
        self._TrainingJobId = None
        self._ReasoningImageInfo = None
        self._CreateTime = None
        self._TrainingModelStatus = None
        self._TrainingModelProgress = None
        self._TrainingModelErrorMsg = None
        self._TrainingModelFormat = None
        self._VersionType = None
        self._GPUType = None
        self._AutoClean = None
        self._ModelCleanPeriod = None
        self._MaxReservedModels = None
        self._ModelHotUpdatePath = None
        self._ReasoningEnvironmentId = None
        self._TrainingJobVersion = None
        self._TrainingPreference = None
        self._AutoMLTaskId = None
        self._IsQAT = None
        self._ModelAffiliation = None
        self._TrainingJobBackendId = None
        self._TrainingJobBackendName = None
        self._ModelBackendId = None
        self._ModelBackendName = None

    @property
    def TrainingModelId(self):
        """模型id
        :rtype: str
        """
        return self._TrainingModelId

    @TrainingModelId.setter
    def TrainingModelId(self, TrainingModelId):
        self._TrainingModelId = TrainingModelId

    @property
    def TrainingModelVersionId(self):
        """模型版本id
        :rtype: str
        """
        return self._TrainingModelVersionId

    @TrainingModelVersionId.setter
    def TrainingModelVersionId(self, TrainingModelVersionId):
        self._TrainingModelVersionId = TrainingModelVersionId

    @property
    def TrainingModelVersion(self):
        """模型版本
        :rtype: str
        """
        return self._TrainingModelVersion

    @TrainingModelVersion.setter
    def TrainingModelVersion(self, TrainingModelVersion):
        self._TrainingModelVersion = TrainingModelVersion

    @property
    def TrainingModelSource(self):
        """模型来源
        :rtype: str
        """
        return self._TrainingModelSource

    @TrainingModelSource.setter
    def TrainingModelSource(self, TrainingModelSource):
        self._TrainingModelSource = TrainingModelSource

    @property
    def TrainingModelCreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._TrainingModelCreateTime

    @TrainingModelCreateTime.setter
    def TrainingModelCreateTime(self, TrainingModelCreateTime):
        self._TrainingModelCreateTime = TrainingModelCreateTime

    @property
    def TrainingModelCreator(self):
        """创建人uin
        :rtype: str
        """
        return self._TrainingModelCreator

    @TrainingModelCreator.setter
    def TrainingModelCreator(self, TrainingModelCreator):
        self._TrainingModelCreator = TrainingModelCreator

    @property
    def AlgorithmFramework(self):
        """算法框架
        :rtype: str
        """
        return self._AlgorithmFramework

    @AlgorithmFramework.setter
    def AlgorithmFramework(self, AlgorithmFramework):
        self._AlgorithmFramework = AlgorithmFramework

    @property
    def ReasoningEnvironment(self):
        """推理环境
        :rtype: str
        """
        return self._ReasoningEnvironment

    @ReasoningEnvironment.setter
    def ReasoningEnvironment(self, ReasoningEnvironment):
        self._ReasoningEnvironment = ReasoningEnvironment

    @property
    def ReasoningEnvironmentSource(self):
        """推理环境来源
        :rtype: str
        """
        return self._ReasoningEnvironmentSource

    @ReasoningEnvironmentSource.setter
    def ReasoningEnvironmentSource(self, ReasoningEnvironmentSource):
        self._ReasoningEnvironmentSource = ReasoningEnvironmentSource

    @property
    def TrainingModelIndex(self):
        """模型指标
        :rtype: str
        """
        return self._TrainingModelIndex

    @TrainingModelIndex.setter
    def TrainingModelIndex(self, TrainingModelIndex):
        self._TrainingModelIndex = TrainingModelIndex

    @property
    def TrainingJobName(self):
        """训练任务名称
        :rtype: str
        """
        return self._TrainingJobName

    @TrainingJobName.setter
    def TrainingJobName(self, TrainingJobName):
        self._TrainingJobName = TrainingJobName

    @property
    def TrainingModelCosPath(self):
        """模型cos路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._TrainingModelCosPath

    @TrainingModelCosPath.setter
    def TrainingModelCosPath(self, TrainingModelCosPath):
        self._TrainingModelCosPath = TrainingModelCosPath

    @property
    def TrainingModelName(self):
        """模型名称
        :rtype: str
        """
        return self._TrainingModelName

    @TrainingModelName.setter
    def TrainingModelName(self, TrainingModelName):
        self._TrainingModelName = TrainingModelName

    @property
    def TrainingJobId(self):
        """训练任务id
        :rtype: str
        """
        return self._TrainingJobId

    @TrainingJobId.setter
    def TrainingJobId(self, TrainingJobId):
        self._TrainingJobId = TrainingJobId

    @property
    def ReasoningImageInfo(self):
        """自定义推理环境
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ReasoningImageInfo

    @ReasoningImageInfo.setter
    def ReasoningImageInfo(self, ReasoningImageInfo):
        self._ReasoningImageInfo = ReasoningImageInfo

    @property
    def CreateTime(self):
        """模型版本创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def TrainingModelStatus(self):
        """模型处理状态
STATUS_SUCCESS：导入成功，STATUS_FAILED：导入失败 ，STATUS_RUNNING：导入中
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainingModelStatus

    @TrainingModelStatus.setter
    def TrainingModelStatus(self, TrainingModelStatus):
        self._TrainingModelStatus = TrainingModelStatus

    @property
    def TrainingModelProgress(self):
        """模型处理进度
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._TrainingModelProgress

    @TrainingModelProgress.setter
    def TrainingModelProgress(self, TrainingModelProgress):
        self._TrainingModelProgress = TrainingModelProgress

    @property
    def TrainingModelErrorMsg(self):
        """模型错误信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainingModelErrorMsg

    @TrainingModelErrorMsg.setter
    def TrainingModelErrorMsg(self, TrainingModelErrorMsg):
        self._TrainingModelErrorMsg = TrainingModelErrorMsg

    @property
    def TrainingModelFormat(self):
        """模型格式
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainingModelFormat

    @TrainingModelFormat.setter
    def TrainingModelFormat(self, TrainingModelFormat):
        self._TrainingModelFormat = TrainingModelFormat

    @property
    def VersionType(self):
        """模型版本类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VersionType

    @VersionType.setter
    def VersionType(self, VersionType):
        self._VersionType = VersionType

    @property
    def GPUType(self):
        """GPU类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GPUType

    @GPUType.setter
    def GPUType(self, GPUType):
        self._GPUType = GPUType

    @property
    def AutoClean(self):
        """模型自动清理开关
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AutoClean

    @AutoClean.setter
    def AutoClean(self, AutoClean):
        self._AutoClean = AutoClean

    @property
    def ModelCleanPeriod(self):
        """模型清理周期
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ModelCleanPeriod

    @ModelCleanPeriod.setter
    def ModelCleanPeriod(self, ModelCleanPeriod):
        self._ModelCleanPeriod = ModelCleanPeriod

    @property
    def MaxReservedModels(self):
        """模型数量保留上限
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._MaxReservedModels

    @MaxReservedModels.setter
    def MaxReservedModels(self, MaxReservedModels):
        self._MaxReservedModels = MaxReservedModels

    @property
    def ModelHotUpdatePath(self):
        """模型热更新目录
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._ModelHotUpdatePath

    @ModelHotUpdatePath.setter
    def ModelHotUpdatePath(self, ModelHotUpdatePath):
        self._ModelHotUpdatePath = ModelHotUpdatePath

    @property
    def ReasoningEnvironmentId(self):
        """推理环境id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ReasoningEnvironmentId

    @ReasoningEnvironmentId.setter
    def ReasoningEnvironmentId(self, ReasoningEnvironmentId):
        self._ReasoningEnvironmentId = ReasoningEnvironmentId

    @property
    def TrainingJobVersion(self):
        """训练任务版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainingJobVersion

    @TrainingJobVersion.setter
    def TrainingJobVersion(self, TrainingJobVersion):
        self._TrainingJobVersion = TrainingJobVersion

    @property
    def TrainingPreference(self):
        """训练偏好
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainingPreference

    @TrainingPreference.setter
    def TrainingPreference(self, TrainingPreference):
        self._TrainingPreference = TrainingPreference

    @property
    def AutoMLTaskId(self):
        """自动学习任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def IsQAT(self):
        """是否QAT模型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsQAT

    @IsQAT.setter
    def IsQAT(self, IsQAT):
        self._IsQAT = IsQAT

    @property
    def ModelAffiliation(self):
        """模型所属模块; 枚举值：MODEL_REPO 模型仓库 AI_MARKET AI市场。如果为空表示属于模型仓库。
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelAffiliation

    @ModelAffiliation.setter
    def ModelAffiliation(self, ModelAffiliation):
        self._ModelAffiliation = ModelAffiliation

    @property
    def TrainingJobBackendId(self):
        """后端训练任务id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainingJobBackendId

    @TrainingJobBackendId.setter
    def TrainingJobBackendId(self, TrainingJobBackendId):
        self._TrainingJobBackendId = TrainingJobBackendId

    @property
    def TrainingJobBackendName(self):
        """后端训练任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainingJobBackendName

    @TrainingJobBackendName.setter
    def TrainingJobBackendName(self, TrainingJobBackendName):
        self._TrainingJobBackendName = TrainingJobBackendName

    @property
    def ModelBackendId(self):
        """后端模型id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelBackendId

    @ModelBackendId.setter
    def ModelBackendId(self, ModelBackendId):
        self._ModelBackendId = ModelBackendId

    @property
    def ModelBackendName(self):
        """后端模型名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ModelBackendName

    @ModelBackendName.setter
    def ModelBackendName(self, ModelBackendName):
        self._ModelBackendName = ModelBackendName


    def _deserialize(self, params):
        self._TrainingModelId = params.get("TrainingModelId")
        self._TrainingModelVersionId = params.get("TrainingModelVersionId")
        self._TrainingModelVersion = params.get("TrainingModelVersion")
        self._TrainingModelSource = params.get("TrainingModelSource")
        self._TrainingModelCreateTime = params.get("TrainingModelCreateTime")
        self._TrainingModelCreator = params.get("TrainingModelCreator")
        self._AlgorithmFramework = params.get("AlgorithmFramework")
        self._ReasoningEnvironment = params.get("ReasoningEnvironment")
        self._ReasoningEnvironmentSource = params.get("ReasoningEnvironmentSource")
        self._TrainingModelIndex = params.get("TrainingModelIndex")
        self._TrainingJobName = params.get("TrainingJobName")
        if params.get("TrainingModelCosPath") is not None:
            self._TrainingModelCosPath = CosPathInfo()
            self._TrainingModelCosPath._deserialize(params.get("TrainingModelCosPath"))
        self._TrainingModelName = params.get("TrainingModelName")
        self._TrainingJobId = params.get("TrainingJobId")
        if params.get("ReasoningImageInfo") is not None:
            self._ReasoningImageInfo = ImageInfo()
            self._ReasoningImageInfo._deserialize(params.get("ReasoningImageInfo"))
        self._CreateTime = params.get("CreateTime")
        self._TrainingModelStatus = params.get("TrainingModelStatus")
        self._TrainingModelProgress = params.get("TrainingModelProgress")
        self._TrainingModelErrorMsg = params.get("TrainingModelErrorMsg")
        self._TrainingModelFormat = params.get("TrainingModelFormat")
        self._VersionType = params.get("VersionType")
        self._GPUType = params.get("GPUType")
        self._AutoClean = params.get("AutoClean")
        self._ModelCleanPeriod = params.get("ModelCleanPeriod")
        self._MaxReservedModels = params.get("MaxReservedModels")
        if params.get("ModelHotUpdatePath") is not None:
            self._ModelHotUpdatePath = CosPathInfo()
            self._ModelHotUpdatePath._deserialize(params.get("ModelHotUpdatePath"))
        self._ReasoningEnvironmentId = params.get("ReasoningEnvironmentId")
        self._TrainingJobVersion = params.get("TrainingJobVersion")
        self._TrainingPreference = params.get("TrainingPreference")
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._IsQAT = params.get("IsQAT")
        self._ModelAffiliation = params.get("ModelAffiliation")
        self._TrainingJobBackendId = params.get("TrainingJobBackendId")
        self._TrainingJobBackendName = params.get("TrainingJobBackendName")
        self._ModelBackendId = params.get("ModelBackendId")
        self._ModelBackendName = params.get("ModelBackendName")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TrainingTaskDetail(AbstractModel):
    """训练任务详情

    """

    def __init__(self):
        r"""
        :param _Id: 训练任务ID
        :type Id: str
        :param _Name: 训练任务名称
        :type Name: str
        :param _Uin: 主账号uin
        :type Uin: str
        :param _SubUin: 子账号uin
        :type SubUin: str
        :param _SubUinName: 创建者名称
注意：此字段可能返回 null，表示取不到有效值。
        :type SubUinName: str
        :param _Region: 地域
        :type Region: str
        :param _FrameworkName: 训练框架名称，eg：SPARK、PYSARK、TENSORFLOW、PYTORCH
注意：此字段可能返回 null，表示取不到有效值。
        :type FrameworkName: str
        :param _FrameworkVersion: 训练框架版本
注意：此字段可能返回 null，表示取不到有效值。
        :type FrameworkVersion: str
        :param _FrameworkEnvironment: 框架运行环境
注意：此字段可能返回 null，表示取不到有效值。
        :type FrameworkEnvironment: str
        :param _ChargeType: 计费模式
        :type ChargeType: str
        :param _ResourceGroupId: 预付费专用资源组
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _ResourceConfigInfos: 资源配置
        :type ResourceConfigInfos: list of ResourceConfigInfo
        :param _Tags: 标签
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _TrainingMode: 训练模式，eg：PS_WORKER、DDP、MPI、HOROVOD
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainingMode: str
        :param _CodePackagePath: 代码包
        :type CodePackagePath: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _StartCmdInfo: 启动命令信息
        :type StartCmdInfo: :class:`tencentcloud.tione.v20211111.models.StartCmdInfo`
        :param _DataSource: 数据来源，eg：DATASET、COS
注意：此字段可能返回 null，表示取不到有效值。
        :type DataSource: str
        :param _DataConfigs: 数据配置
注意：此字段可能返回 null，表示取不到有效值。
        :type DataConfigs: list of DataConfig
        :param _TuningParameters: 调优参数
注意：此字段可能返回 null，表示取不到有效值。
        :type TuningParameters: str
        :param _Output: 训练输出
        :type Output: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _LogEnable: 是否上报日志
        :type LogEnable: bool
        :param _LogConfig: 日志配置
注意：此字段可能返回 null，表示取不到有效值。
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _VpcId: VPC ID
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcId: str
        :param _SubnetId: 子网ID
注意：此字段可能返回 null，表示取不到有效值。
        :type SubnetId: str
        :param _ImageInfo: 自定义镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _RuntimeInSeconds: 运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :type RuntimeInSeconds: int
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _StartTime: 训练开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :type StartTime: str
        :param _ChargeStatus: 计费状态，eg：BILLING计费中，ARREARS_STOP欠费停止，NOT_BILLING不在计费中
        :type ChargeStatus: str
        :param _LatestInstanceId: 最近一次实例ID
注意：此字段可能返回 null，表示取不到有效值。
        :type LatestInstanceId: str
        :param _TensorBoardId: TensorBoard ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TensorBoardId: str
        :param _Remark: 备注
注意：此字段可能返回 null，表示取不到有效值。
        :type Remark: str
        :param _FailureReason: 失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :type FailureReason: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        :param _EndTime: 训练结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :type EndTime: str
        :param _BillingInfo: 计费金额信息，eg：2.00元/小时 (按量计费)
注意：此字段可能返回 null，表示取不到有效值。
        :type BillingInfo: str
        :param _ResourceGroupName: 预付费专用资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupName: str
        :param _Message: 任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Message: str
        :param _Status: 任务状态，eg：STARTING启动中、RUNNING运行中、STOPPING停止中、STOPPED已停止、FAILED异常、SUCCEED已完成
        :type Status: str
        :param _CallbackUrl: 回调地址
注意：此字段可能返回 null，表示取不到有效值。
        :type CallbackUrl: str
        :param _TAIJIInstanceId: TAIJI任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TAIJIInstanceId: str
        :param _TAIJIInstanceName: TAIJI任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type TAIJIInstanceName: str
        :param _TAIJITemplateId: TAIJI训练模版ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TAIJITemplateId: str
        :param _AIMarketTemplateId: AI市场模版ID
注意：此字段可能返回 null，表示取不到有效值。
        :type AIMarketTemplateId: str
        :param _AIMarketTemplateGroup: AI市场模板类别
注意：此字段可能返回 null，表示取不到有效值。
        :type AIMarketTemplateGroup: str
        :param _SchedulePolicy: 任务调度策略
注意：此字段可能返回 null，表示取不到有效值。
        :type SchedulePolicy: :class:`tencentcloud.tione.v20211111.models.SchedulePolicy`
        :param _Warnings: 任务warning列表
注意：此字段可能返回 null，表示取不到有效值。
        :type Warnings: list of Warning
        :param _StartScheduleTime: 任务开始排队时间
        :type StartScheduleTime: str
        :param _CodeRepos: 任务关联的代码仓库配置
        :type CodeRepos: list of CodeRepoConfig
        """
        self._Id = None
        self._Name = None
        self._Uin = None
        self._SubUin = None
        self._SubUinName = None
        self._Region = None
        self._FrameworkName = None
        self._FrameworkVersion = None
        self._FrameworkEnvironment = None
        self._ChargeType = None
        self._ResourceGroupId = None
        self._ResourceConfigInfos = None
        self._Tags = None
        self._TrainingMode = None
        self._CodePackagePath = None
        self._StartCmdInfo = None
        self._DataSource = None
        self._DataConfigs = None
        self._TuningParameters = None
        self._Output = None
        self._LogEnable = None
        self._LogConfig = None
        self._VpcId = None
        self._SubnetId = None
        self._ImageInfo = None
        self._RuntimeInSeconds = None
        self._CreateTime = None
        self._StartTime = None
        self._ChargeStatus = None
        self._LatestInstanceId = None
        self._TensorBoardId = None
        self._Remark = None
        self._FailureReason = None
        self._UpdateTime = None
        self._EndTime = None
        self._BillingInfo = None
        self._ResourceGroupName = None
        self._Message = None
        self._Status = None
        self._CallbackUrl = None
        self._TAIJIInstanceId = None
        self._TAIJIInstanceName = None
        self._TAIJITemplateId = None
        self._AIMarketTemplateId = None
        self._AIMarketTemplateGroup = None
        self._SchedulePolicy = None
        self._Warnings = None
        self._StartScheduleTime = None
        self._CodeRepos = None

    @property
    def Id(self):
        """训练任务ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """训练任务名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def Uin(self):
        """主账号uin
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def SubUin(self):
        """子账号uin
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def SubUinName(self):
        """创建者名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubUinName

    @SubUinName.setter
    def SubUinName(self, SubUinName):
        self._SubUinName = SubUinName

    @property
    def Region(self):
        """地域
        :rtype: str
        """
        return self._Region

    @Region.setter
    def Region(self, Region):
        self._Region = Region

    @property
    def FrameworkName(self):
        """训练框架名称，eg：SPARK、PYSARK、TENSORFLOW、PYTORCH
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FrameworkName

    @FrameworkName.setter
    def FrameworkName(self, FrameworkName):
        self._FrameworkName = FrameworkName

    @property
    def FrameworkVersion(self):
        """训练框架版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FrameworkVersion

    @FrameworkVersion.setter
    def FrameworkVersion(self, FrameworkVersion):
        self._FrameworkVersion = FrameworkVersion

    @property
    def FrameworkEnvironment(self):
        """框架运行环境
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FrameworkEnvironment

    @FrameworkEnvironment.setter
    def FrameworkEnvironment(self, FrameworkEnvironment):
        self._FrameworkEnvironment = FrameworkEnvironment

    @property
    def ChargeType(self):
        """计费模式
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ResourceGroupId(self):
        """预付费专用资源组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceConfigInfos(self):
        """资源配置
        :rtype: list of ResourceConfigInfo
        """
        return self._ResourceConfigInfos

    @ResourceConfigInfos.setter
    def ResourceConfigInfos(self, ResourceConfigInfos):
        self._ResourceConfigInfos = ResourceConfigInfos

    @property
    def Tags(self):
        """标签
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def TrainingMode(self):
        """训练模式，eg：PS_WORKER、DDP、MPI、HOROVOD
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainingMode

    @TrainingMode.setter
    def TrainingMode(self, TrainingMode):
        self._TrainingMode = TrainingMode

    @property
    def CodePackagePath(self):
        """代码包
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._CodePackagePath

    @CodePackagePath.setter
    def CodePackagePath(self, CodePackagePath):
        self._CodePackagePath = CodePackagePath

    @property
    def StartCmdInfo(self):
        """启动命令信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.StartCmdInfo`
        """
        return self._StartCmdInfo

    @StartCmdInfo.setter
    def StartCmdInfo(self, StartCmdInfo):
        self._StartCmdInfo = StartCmdInfo

    @property
    def DataSource(self):
        """数据来源，eg：DATASET、COS
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._DataSource

    @DataSource.setter
    def DataSource(self, DataSource):
        self._DataSource = DataSource

    @property
    def DataConfigs(self):
        """数据配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of DataConfig
        """
        return self._DataConfigs

    @DataConfigs.setter
    def DataConfigs(self, DataConfigs):
        self._DataConfigs = DataConfigs

    @property
    def TuningParameters(self):
        """调优参数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TuningParameters

    @TuningParameters.setter
    def TuningParameters(self, TuningParameters):
        self._TuningParameters = TuningParameters

    @property
    def Output(self):
        """训练输出
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._Output

    @Output.setter
    def Output(self, Output):
        self._Output = Output

    @property
    def LogEnable(self):
        """是否上报日志
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def LogConfig(self):
        """日志配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def VpcId(self):
        """VPC ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """子网ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def ImageInfo(self):
        """自定义镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def RuntimeInSeconds(self):
        """运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._RuntimeInSeconds

    @RuntimeInSeconds.setter
    def RuntimeInSeconds(self, RuntimeInSeconds):
        self._RuntimeInSeconds = RuntimeInSeconds

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def StartTime(self):
        """训练开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def ChargeStatus(self):
        """计费状态，eg：BILLING计费中，ARREARS_STOP欠费停止，NOT_BILLING不在计费中
        :rtype: str
        """
        return self._ChargeStatus

    @ChargeStatus.setter
    def ChargeStatus(self, ChargeStatus):
        self._ChargeStatus = ChargeStatus

    @property
    def LatestInstanceId(self):
        """最近一次实例ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._LatestInstanceId

    @LatestInstanceId.setter
    def LatestInstanceId(self, LatestInstanceId):
        self._LatestInstanceId = LatestInstanceId

    @property
    def TensorBoardId(self):
        """TensorBoard ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TensorBoardId

    @TensorBoardId.setter
    def TensorBoardId(self, TensorBoardId):
        self._TensorBoardId = TensorBoardId

    @property
    def Remark(self):
        """备注
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Remark

    @Remark.setter
    def Remark(self, Remark):
        self._Remark = Remark

    @property
    def FailureReason(self):
        """失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FailureReason

    @FailureReason.setter
    def FailureReason(self, FailureReason):
        self._FailureReason = FailureReason

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def EndTime(self):
        """训练结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def BillingInfo(self):
        """计费金额信息，eg：2.00元/小时 (按量计费)
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._BillingInfo

    @BillingInfo.setter
    def BillingInfo(self, BillingInfo):
        self._BillingInfo = BillingInfo

    @property
    def ResourceGroupName(self):
        """预付费专用资源组名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def Message(self):
        """任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message

    @property
    def Status(self):
        """任务状态，eg：STARTING启动中、RUNNING运行中、STOPPING停止中、STOPPED已停止、FAILED异常、SUCCEED已完成
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def CallbackUrl(self):
        """回调地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CallbackUrl

    @CallbackUrl.setter
    def CallbackUrl(self, CallbackUrl):
        self._CallbackUrl = CallbackUrl

    @property
    def TAIJIInstanceId(self):
        """TAIJI任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TAIJIInstanceId

    @TAIJIInstanceId.setter
    def TAIJIInstanceId(self, TAIJIInstanceId):
        self._TAIJIInstanceId = TAIJIInstanceId

    @property
    def TAIJIInstanceName(self):
        """TAIJI任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TAIJIInstanceName

    @TAIJIInstanceName.setter
    def TAIJIInstanceName(self, TAIJIInstanceName):
        self._TAIJIInstanceName = TAIJIInstanceName

    @property
    def TAIJITemplateId(self):
        """TAIJI训练模版ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TAIJITemplateId

    @TAIJITemplateId.setter
    def TAIJITemplateId(self, TAIJITemplateId):
        self._TAIJITemplateId = TAIJITemplateId

    @property
    def AIMarketTemplateId(self):
        """AI市场模版ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AIMarketTemplateId

    @AIMarketTemplateId.setter
    def AIMarketTemplateId(self, AIMarketTemplateId):
        self._AIMarketTemplateId = AIMarketTemplateId

    @property
    def AIMarketTemplateGroup(self):
        """AI市场模板类别
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AIMarketTemplateGroup

    @AIMarketTemplateGroup.setter
    def AIMarketTemplateGroup(self, AIMarketTemplateGroup):
        self._AIMarketTemplateGroup = AIMarketTemplateGroup

    @property
    def SchedulePolicy(self):
        """任务调度策略
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.SchedulePolicy`
        """
        return self._SchedulePolicy

    @SchedulePolicy.setter
    def SchedulePolicy(self, SchedulePolicy):
        self._SchedulePolicy = SchedulePolicy

    @property
    def Warnings(self):
        """任务warning列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Warning
        """
        return self._Warnings

    @Warnings.setter
    def Warnings(self, Warnings):
        self._Warnings = Warnings

    @property
    def StartScheduleTime(self):
        """任务开始排队时间
        :rtype: str
        """
        return self._StartScheduleTime

    @StartScheduleTime.setter
    def StartScheduleTime(self, StartScheduleTime):
        self._StartScheduleTime = StartScheduleTime

    @property
    def CodeRepos(self):
        """任务关联的代码仓库配置
        :rtype: list of CodeRepoConfig
        """
        return self._CodeRepos

    @CodeRepos.setter
    def CodeRepos(self, CodeRepos):
        self._CodeRepos = CodeRepos


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._Uin = params.get("Uin")
        self._SubUin = params.get("SubUin")
        self._SubUinName = params.get("SubUinName")
        self._Region = params.get("Region")
        self._FrameworkName = params.get("FrameworkName")
        self._FrameworkVersion = params.get("FrameworkVersion")
        self._FrameworkEnvironment = params.get("FrameworkEnvironment")
        self._ChargeType = params.get("ChargeType")
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("ResourceConfigInfos") is not None:
            self._ResourceConfigInfos = []
            for item in params.get("ResourceConfigInfos"):
                obj = ResourceConfigInfo()
                obj._deserialize(item)
                self._ResourceConfigInfos.append(obj)
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._TrainingMode = params.get("TrainingMode")
        if params.get("CodePackagePath") is not None:
            self._CodePackagePath = CosPathInfo()
            self._CodePackagePath._deserialize(params.get("CodePackagePath"))
        if params.get("StartCmdInfo") is not None:
            self._StartCmdInfo = StartCmdInfo()
            self._StartCmdInfo._deserialize(params.get("StartCmdInfo"))
        self._DataSource = params.get("DataSource")
        if params.get("DataConfigs") is not None:
            self._DataConfigs = []
            for item in params.get("DataConfigs"):
                obj = DataConfig()
                obj._deserialize(item)
                self._DataConfigs.append(obj)
        self._TuningParameters = params.get("TuningParameters")
        if params.get("Output") is not None:
            self._Output = CosPathInfo()
            self._Output._deserialize(params.get("Output"))
        self._LogEnable = params.get("LogEnable")
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        self._RuntimeInSeconds = params.get("RuntimeInSeconds")
        self._CreateTime = params.get("CreateTime")
        self._StartTime = params.get("StartTime")
        self._ChargeStatus = params.get("ChargeStatus")
        self._LatestInstanceId = params.get("LatestInstanceId")
        self._TensorBoardId = params.get("TensorBoardId")
        self._Remark = params.get("Remark")
        self._FailureReason = params.get("FailureReason")
        self._UpdateTime = params.get("UpdateTime")
        self._EndTime = params.get("EndTime")
        self._BillingInfo = params.get("BillingInfo")
        self._ResourceGroupName = params.get("ResourceGroupName")
        self._Message = params.get("Message")
        self._Status = params.get("Status")
        self._CallbackUrl = params.get("CallbackUrl")
        self._TAIJIInstanceId = params.get("TAIJIInstanceId")
        self._TAIJIInstanceName = params.get("TAIJIInstanceName")
        self._TAIJITemplateId = params.get("TAIJITemplateId")
        self._AIMarketTemplateId = params.get("AIMarketTemplateId")
        self._AIMarketTemplateGroup = params.get("AIMarketTemplateGroup")
        if params.get("SchedulePolicy") is not None:
            self._SchedulePolicy = SchedulePolicy()
            self._SchedulePolicy._deserialize(params.get("SchedulePolicy"))
        if params.get("Warnings") is not None:
            self._Warnings = []
            for item in params.get("Warnings"):
                obj = Warning()
                obj._deserialize(item)
                self._Warnings.append(obj)
        self._StartScheduleTime = params.get("StartScheduleTime")
        if params.get("CodeRepos") is not None:
            self._CodeRepos = []
            for item in params.get("CodeRepos"):
                obj = CodeRepoConfig()
                obj._deserialize(item)
                self._CodeRepos.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TrainingTaskInfo(AbstractModel):
    """任务式建模训练任务详情

    """

    def __init__(self):
        r"""
        :param _TrainTaskName: 任务名
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainTaskName: str
        :param _TrainId: 训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainId: str
        :param _TrainPodId: 训练podId
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainPodId: str
        """
        self._TrainTaskName = None
        self._TrainId = None
        self._TrainPodId = None

    @property
    def TrainTaskName(self):
        """任务名
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainTaskName

    @TrainTaskName.setter
    def TrainTaskName(self, TrainTaskName):
        self._TrainTaskName = TrainTaskName

    @property
    def TrainId(self):
        """训练任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainId

    @TrainId.setter
    def TrainId(self, TrainId):
        self._TrainId = TrainId

    @property
    def TrainPodId(self):
        """训练podId
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainPodId

    @TrainPodId.setter
    def TrainPodId(self, TrainPodId):
        self._TrainPodId = TrainPodId


    def _deserialize(self, params):
        self._TrainTaskName = params.get("TrainTaskName")
        self._TrainId = params.get("TrainId")
        self._TrainPodId = params.get("TrainPodId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TrainingTaskSecondaryStatus(AbstractModel):
    """任务式建模训练任务二级

    """

    def __init__(self):
        r"""
        :param _StartTime: 开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :type StartTime: str
        :param _EndTime: 结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :type EndTime: str
        :param _Stage: 阶段
PrepareJob: 任务初始化
PrepareResource: 任务调度
PrepareNetwork: 网络初始化
PrepareStorage: 存储挂载
PrepareData: 数据准备
PrepareImage：镜像拉取
StartMainContainer: 主容器启动
StartTrain: 训练启动
注意：此字段可能返回 null，表示取不到有效值。
        :type Stage: str
        :param _Status: 状态
Waiting: 等待中：默认状态
Running: 运行中：任务处于该阶段
Succeeded: 完成：任务已完成该阶段
Failed: 失败：任务失败时最前一个非等待中状态的阶段转变为失败
Stopped: 已停止：任务已停止时最前一个非等待中状态的阶段转变为已停止
Stopping：停止中：任务停止中时最前一个非等待中状态的阶段转变为停止中
注意：此字段可能返回 null，表示取不到有效值。
        :type Status: str
        :param _StatusMessage: 状态详细信息
注意：此字段可能返回 null，表示取不到有效值。
        :type StatusMessage: str
        """
        self._StartTime = None
        self._EndTime = None
        self._Stage = None
        self._Status = None
        self._StatusMessage = None

    @property
    def StartTime(self):
        """开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Stage(self):
        """阶段
PrepareJob: 任务初始化
PrepareResource: 任务调度
PrepareNetwork: 网络初始化
PrepareStorage: 存储挂载
PrepareData: 数据准备
PrepareImage：镜像拉取
StartMainContainer: 主容器启动
StartTrain: 训练启动
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Stage

    @Stage.setter
    def Stage(self, Stage):
        self._Stage = Stage

    @property
    def Status(self):
        """状态
Waiting: 等待中：默认状态
Running: 运行中：任务处于该阶段
Succeeded: 完成：任务已完成该阶段
Failed: 失败：任务失败时最前一个非等待中状态的阶段转变为失败
Stopped: 已停止：任务已停止时最前一个非等待中状态的阶段转变为已停止
Stopping：停止中：任务停止中时最前一个非等待中状态的阶段转变为停止中
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def StatusMessage(self):
        """状态详细信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StatusMessage

    @StatusMessage.setter
    def StatusMessage(self, StatusMessage):
        self._StatusMessage = StatusMessage


    def _deserialize(self, params):
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        self._Stage = params.get("Stage")
        self._Status = params.get("Status")
        self._StatusMessage = params.get("StatusMessage")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TrainingTaskSetItem(AbstractModel):
    """出参类型

    """

    def __init__(self):
        r"""
        :param _Id: 训练任务ID
        :type Id: str
        :param _Name: 训练任务名称
        :type Name: str
        :param _FrameworkName: 框架名称
注意：此字段可能返回 null，表示取不到有效值。
        :type FrameworkName: str
        :param _FrameworkVersion: 训练框架版本
注意：此字段可能返回 null，表示取不到有效值。
        :type FrameworkVersion: str
        :param _FrameworkEnvironment: 框架运行环境
注意：此字段可能返回 null，表示取不到有效值。
        :type FrameworkEnvironment: str
        :param _ChargeType: 计费模式
        :type ChargeType: str
        :param _ChargeStatus: 计费状态，eg：BILLING计费中，ARREARS_STOP欠费停止，NOT_BILLING不在计费中
        :type ChargeStatus: str
        :param _ResourceGroupId: 预付费专用资源组
注意：此字段可能返回 null，表示取不到有效值。
        :type ResourceGroupId: str
        :param _ResourceConfigInfos: 资源配置
        :type ResourceConfigInfos: list of ResourceConfigInfo
        :param _TrainingMode: 训练模式eg：PS_WORKER、DDP、MPI、HOROVOD
注意：此字段可能返回 null，表示取不到有效值。
        :type TrainingMode: str
        :param _Status: 任务状态，eg：SUBMITTING提交中、PENDING排队中、
STARTING启动中、RUNNING运行中、STOPPING停止中、STOPPED已停止、FAILED异常、SUCCEED已完成
        :type Status: str
        :param _RuntimeInSeconds: 运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :type RuntimeInSeconds: int
        :param _CreateTime: 创建时间
        :type CreateTime: str
        :param _StartTime: 训练开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :type StartTime: str
        :param _EndTime: 训练结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :type EndTime: str
        :param _Output: 训练输出
        :type Output: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _FailureReason: 失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :type FailureReason: str
        :param _UpdateTime: 更新时间
        :type UpdateTime: str
        :param _BillingInfo: 计费金额信息，eg：2.00元/小时 (按量计费)
        :type BillingInfo: str
        :param _ResourceGroupName: 预付费专用资源组名称
        :type ResourceGroupName: str
        :param _ImageInfo: 自定义镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :type ImageInfo: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        :param _Message: 任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Message: str
        :param _Tags: 标签配置
注意：此字段可能返回 null，表示取不到有效值。
        :type Tags: list of Tag
        :param _CallbackUrl: 回调地址
注意：此字段可能返回 null，表示取不到有效值。
        :type CallbackUrl: str
        :param _TAIJIInstanceId: TAIJI任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TAIJIInstanceId: str
        :param _TAIJIInstanceName: TAIJI任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :type TAIJIInstanceName: str
        :param _TAIJITemplateId: TAIJI训练模版ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TAIJITemplateId: str
        :param _AIMarketTemplateId: AI市场模板ID
注意：此字段可能返回 null，表示取不到有效值。
        :type AIMarketTemplateId: str
        :param _AIMarketTemplateGroup: AI市场模板类别
注意：此字段可能返回 null，表示取不到有效值。
        :type AIMarketTemplateGroup: str
        :param _Uin: 任务uin信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Uin: str
        :param _SubUin: 任务subUin信息
注意：此字段可能返回 null，表示取不到有效值。
        :type SubUin: str
        :param _SubUinName: 任务创建者名称
注意：此字段可能返回 null，表示取不到有效值。
        :type SubUinName: str
        :param _Warnings: 任务warning列表
注意：此字段可能返回 null，表示取不到有效值。
        :type Warnings: list of Warning
        :param _ResourceGroupSWType: 资源组类型
        :type ResourceGroupSWType: str
        :param _AppId: 任务AppId
        :type AppId: str
        :param _StartScheduleTime: 任务开始排队时间
        :type StartScheduleTime: str
        :param _WaitingQueueIndex: 排队序号
        :type WaitingQueueIndex: int
        :param _TaskType: 任务类型
        :type TaskType: str
        """
        self._Id = None
        self._Name = None
        self._FrameworkName = None
        self._FrameworkVersion = None
        self._FrameworkEnvironment = None
        self._ChargeType = None
        self._ChargeStatus = None
        self._ResourceGroupId = None
        self._ResourceConfigInfos = None
        self._TrainingMode = None
        self._Status = None
        self._RuntimeInSeconds = None
        self._CreateTime = None
        self._StartTime = None
        self._EndTime = None
        self._Output = None
        self._FailureReason = None
        self._UpdateTime = None
        self._BillingInfo = None
        self._ResourceGroupName = None
        self._ImageInfo = None
        self._Message = None
        self._Tags = None
        self._CallbackUrl = None
        self._TAIJIInstanceId = None
        self._TAIJIInstanceName = None
        self._TAIJITemplateId = None
        self._AIMarketTemplateId = None
        self._AIMarketTemplateGroup = None
        self._Uin = None
        self._SubUin = None
        self._SubUinName = None
        self._Warnings = None
        self._ResourceGroupSWType = None
        self._AppId = None
        self._StartScheduleTime = None
        self._WaitingQueueIndex = None
        self._TaskType = None

    @property
    def Id(self):
        """训练任务ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Name(self):
        """训练任务名称
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def FrameworkName(self):
        """框架名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FrameworkName

    @FrameworkName.setter
    def FrameworkName(self, FrameworkName):
        self._FrameworkName = FrameworkName

    @property
    def FrameworkVersion(self):
        """训练框架版本
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FrameworkVersion

    @FrameworkVersion.setter
    def FrameworkVersion(self, FrameworkVersion):
        self._FrameworkVersion = FrameworkVersion

    @property
    def FrameworkEnvironment(self):
        """框架运行环境
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FrameworkEnvironment

    @FrameworkEnvironment.setter
    def FrameworkEnvironment(self, FrameworkEnvironment):
        self._FrameworkEnvironment = FrameworkEnvironment

    @property
    def ChargeType(self):
        """计费模式
        :rtype: str
        """
        return self._ChargeType

    @ChargeType.setter
    def ChargeType(self, ChargeType):
        self._ChargeType = ChargeType

    @property
    def ChargeStatus(self):
        """计费状态，eg：BILLING计费中，ARREARS_STOP欠费停止，NOT_BILLING不在计费中
        :rtype: str
        """
        return self._ChargeStatus

    @ChargeStatus.setter
    def ChargeStatus(self, ChargeStatus):
        self._ChargeStatus = ChargeStatus

    @property
    def ResourceGroupId(self):
        """预付费专用资源组
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._ResourceGroupId

    @ResourceGroupId.setter
    def ResourceGroupId(self, ResourceGroupId):
        self._ResourceGroupId = ResourceGroupId

    @property
    def ResourceConfigInfos(self):
        """资源配置
        :rtype: list of ResourceConfigInfo
        """
        return self._ResourceConfigInfos

    @ResourceConfigInfos.setter
    def ResourceConfigInfos(self, ResourceConfigInfos):
        self._ResourceConfigInfos = ResourceConfigInfos

    @property
    def TrainingMode(self):
        """训练模式eg：PS_WORKER、DDP、MPI、HOROVOD
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TrainingMode

    @TrainingMode.setter
    def TrainingMode(self, TrainingMode):
        self._TrainingMode = TrainingMode

    @property
    def Status(self):
        """任务状态，eg：SUBMITTING提交中、PENDING排队中、
STARTING启动中、RUNNING运行中、STOPPING停止中、STOPPED已停止、FAILED异常、SUCCEED已完成
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def RuntimeInSeconds(self):
        """运行时长
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._RuntimeInSeconds

    @RuntimeInSeconds.setter
    def RuntimeInSeconds(self, RuntimeInSeconds):
        self._RuntimeInSeconds = RuntimeInSeconds

    @property
    def CreateTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreateTime

    @CreateTime.setter
    def CreateTime(self, CreateTime):
        self._CreateTime = CreateTime

    @property
    def StartTime(self):
        """训练开始时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._StartTime

    @StartTime.setter
    def StartTime(self, StartTime):
        self._StartTime = StartTime

    @property
    def EndTime(self):
        """训练结束时间
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._EndTime

    @EndTime.setter
    def EndTime(self, EndTime):
        self._EndTime = EndTime

    @property
    def Output(self):
        """训练输出
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._Output

    @Output.setter
    def Output(self, Output):
        self._Output = Output

    @property
    def FailureReason(self):
        """失败原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._FailureReason

    @FailureReason.setter
    def FailureReason(self, FailureReason):
        self._FailureReason = FailureReason

    @property
    def UpdateTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdateTime

    @UpdateTime.setter
    def UpdateTime(self, UpdateTime):
        self._UpdateTime = UpdateTime

    @property
    def BillingInfo(self):
        """计费金额信息，eg：2.00元/小时 (按量计费)
        :rtype: str
        """
        return self._BillingInfo

    @BillingInfo.setter
    def BillingInfo(self, BillingInfo):
        self._BillingInfo = BillingInfo

    @property
    def ResourceGroupName(self):
        """预付费专用资源组名称
        :rtype: str
        """
        return self._ResourceGroupName

    @ResourceGroupName.setter
    def ResourceGroupName(self, ResourceGroupName):
        self._ResourceGroupName = ResourceGroupName

    @property
    def ImageInfo(self):
        """自定义镜像信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.ImageInfo`
        """
        return self._ImageInfo

    @ImageInfo.setter
    def ImageInfo(self, ImageInfo):
        self._ImageInfo = ImageInfo

    @property
    def Message(self):
        """任务信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message

    @property
    def Tags(self):
        """标签配置
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def CallbackUrl(self):
        """回调地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._CallbackUrl

    @CallbackUrl.setter
    def CallbackUrl(self, CallbackUrl):
        self._CallbackUrl = CallbackUrl

    @property
    def TAIJIInstanceId(self):
        """TAIJI任务ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TAIJIInstanceId

    @TAIJIInstanceId.setter
    def TAIJIInstanceId(self, TAIJIInstanceId):
        self._TAIJIInstanceId = TAIJIInstanceId

    @property
    def TAIJIInstanceName(self):
        """TAIJI任务名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TAIJIInstanceName

    @TAIJIInstanceName.setter
    def TAIJIInstanceName(self, TAIJIInstanceName):
        self._TAIJIInstanceName = TAIJIInstanceName

    @property
    def TAIJITemplateId(self):
        """TAIJI训练模版ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TAIJITemplateId

    @TAIJITemplateId.setter
    def TAIJITemplateId(self, TAIJITemplateId):
        self._TAIJITemplateId = TAIJITemplateId

    @property
    def AIMarketTemplateId(self):
        """AI市场模板ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AIMarketTemplateId

    @AIMarketTemplateId.setter
    def AIMarketTemplateId(self, AIMarketTemplateId):
        self._AIMarketTemplateId = AIMarketTemplateId

    @property
    def AIMarketTemplateGroup(self):
        """AI市场模板类别
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._AIMarketTemplateGroup

    @AIMarketTemplateGroup.setter
    def AIMarketTemplateGroup(self, AIMarketTemplateGroup):
        self._AIMarketTemplateGroup = AIMarketTemplateGroup

    @property
    def Uin(self):
        """任务uin信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Uin

    @Uin.setter
    def Uin(self, Uin):
        self._Uin = Uin

    @property
    def SubUin(self):
        """任务subUin信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubUin

    @SubUin.setter
    def SubUin(self, SubUin):
        self._SubUin = SubUin

    @property
    def SubUinName(self):
        """任务创建者名称
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubUinName

    @SubUinName.setter
    def SubUinName(self, SubUinName):
        self._SubUinName = SubUinName

    @property
    def Warnings(self):
        """任务warning列表
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of Warning
        """
        return self._Warnings

    @Warnings.setter
    def Warnings(self, Warnings):
        self._Warnings = Warnings

    @property
    def ResourceGroupSWType(self):
        """资源组类型
        :rtype: str
        """
        return self._ResourceGroupSWType

    @ResourceGroupSWType.setter
    def ResourceGroupSWType(self, ResourceGroupSWType):
        self._ResourceGroupSWType = ResourceGroupSWType

    @property
    def AppId(self):
        """任务AppId
        :rtype: str
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId

    @property
    def StartScheduleTime(self):
        """任务开始排队时间
        :rtype: str
        """
        return self._StartScheduleTime

    @StartScheduleTime.setter
    def StartScheduleTime(self, StartScheduleTime):
        self._StartScheduleTime = StartScheduleTime

    @property
    def WaitingQueueIndex(self):
        """排队序号
        :rtype: int
        """
        return self._WaitingQueueIndex

    @WaitingQueueIndex.setter
    def WaitingQueueIndex(self, WaitingQueueIndex):
        self._WaitingQueueIndex = WaitingQueueIndex

    @property
    def TaskType(self):
        """任务类型
        :rtype: str
        """
        return self._TaskType

    @TaskType.setter
    def TaskType(self, TaskType):
        self._TaskType = TaskType


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Name = params.get("Name")
        self._FrameworkName = params.get("FrameworkName")
        self._FrameworkVersion = params.get("FrameworkVersion")
        self._FrameworkEnvironment = params.get("FrameworkEnvironment")
        self._ChargeType = params.get("ChargeType")
        self._ChargeStatus = params.get("ChargeStatus")
        self._ResourceGroupId = params.get("ResourceGroupId")
        if params.get("ResourceConfigInfos") is not None:
            self._ResourceConfigInfos = []
            for item in params.get("ResourceConfigInfos"):
                obj = ResourceConfigInfo()
                obj._deserialize(item)
                self._ResourceConfigInfos.append(obj)
        self._TrainingMode = params.get("TrainingMode")
        self._Status = params.get("Status")
        self._RuntimeInSeconds = params.get("RuntimeInSeconds")
        self._CreateTime = params.get("CreateTime")
        self._StartTime = params.get("StartTime")
        self._EndTime = params.get("EndTime")
        if params.get("Output") is not None:
            self._Output = CosPathInfo()
            self._Output._deserialize(params.get("Output"))
        self._FailureReason = params.get("FailureReason")
        self._UpdateTime = params.get("UpdateTime")
        self._BillingInfo = params.get("BillingInfo")
        self._ResourceGroupName = params.get("ResourceGroupName")
        if params.get("ImageInfo") is not None:
            self._ImageInfo = ImageInfo()
            self._ImageInfo._deserialize(params.get("ImageInfo"))
        self._Message = params.get("Message")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._CallbackUrl = params.get("CallbackUrl")
        self._TAIJIInstanceId = params.get("TAIJIInstanceId")
        self._TAIJIInstanceName = params.get("TAIJIInstanceName")
        self._TAIJITemplateId = params.get("TAIJITemplateId")
        self._AIMarketTemplateId = params.get("AIMarketTemplateId")
        self._AIMarketTemplateGroup = params.get("AIMarketTemplateGroup")
        self._Uin = params.get("Uin")
        self._SubUin = params.get("SubUin")
        self._SubUinName = params.get("SubUinName")
        if params.get("Warnings") is not None:
            self._Warnings = []
            for item in params.get("Warnings"):
                obj = Warning()
                obj._deserialize(item)
                self._Warnings.append(obj)
        self._ResourceGroupSWType = params.get("ResourceGroupSWType")
        self._AppId = params.get("AppId")
        self._StartScheduleTime = params.get("StartScheduleTime")
        self._WaitingQueueIndex = params.get("WaitingQueueIndex")
        self._TaskType = params.get("TaskType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TransferResourceInstancesToResourceGroupRequest(AbstractModel):
    """TransferResourceInstancesToResourceGroup请求参数结构体

    """

    def __init__(self):
        r"""
        :param _SrcResourceGroupId: 源资源组id
        :type SrcResourceGroupId: str
        :param _DstResourceGroupId: 目标资源组id
        :type DstResourceGroupId: str
        :param _ResourceInstanceIds: 资源组节点id列表
        :type ResourceInstanceIds: list of str
        """
        self._SrcResourceGroupId = None
        self._DstResourceGroupId = None
        self._ResourceInstanceIds = None

    @property
    def SrcResourceGroupId(self):
        """源资源组id
        :rtype: str
        """
        return self._SrcResourceGroupId

    @SrcResourceGroupId.setter
    def SrcResourceGroupId(self, SrcResourceGroupId):
        self._SrcResourceGroupId = SrcResourceGroupId

    @property
    def DstResourceGroupId(self):
        """目标资源组id
        :rtype: str
        """
        return self._DstResourceGroupId

    @DstResourceGroupId.setter
    def DstResourceGroupId(self, DstResourceGroupId):
        self._DstResourceGroupId = DstResourceGroupId

    @property
    def ResourceInstanceIds(self):
        """资源组节点id列表
        :rtype: list of str
        """
        return self._ResourceInstanceIds

    @ResourceInstanceIds.setter
    def ResourceInstanceIds(self, ResourceInstanceIds):
        self._ResourceInstanceIds = ResourceInstanceIds


    def _deserialize(self, params):
        self._SrcResourceGroupId = params.get("SrcResourceGroupId")
        self._DstResourceGroupId = params.get("DstResourceGroupId")
        self._ResourceInstanceIds = params.get("ResourceInstanceIds")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class TransferResourceInstancesToResourceGroupResponse(AbstractModel):
    """TransferResourceInstancesToResourceGroup返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class UpdateAlgoVersionRequest(AbstractModel):
    """UpdateAlgoVersion请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AlgoVersionId: 个人算法版本Id
        :type AlgoVersionId: str
        :param _Tags: 标签组
        :type Tags: list of Tag
        :param _NoteBookInstanceId: 关联的notebook实例Id， 该字段已经废弃
        :type NoteBookInstanceId: str
        :param _OPType: 操作类型，填UpdateTag
        :type OPType: str
        """
        self._AlgoVersionId = None
        self._Tags = None
        self._NoteBookInstanceId = None
        self._OPType = None

    @property
    def AlgoVersionId(self):
        """个人算法版本Id
        :rtype: str
        """
        return self._AlgoVersionId

    @AlgoVersionId.setter
    def AlgoVersionId(self, AlgoVersionId):
        self._AlgoVersionId = AlgoVersionId

    @property
    def Tags(self):
        """标签组
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def NoteBookInstanceId(self):
        """关联的notebook实例Id， 该字段已经废弃
        :rtype: str
        """
        return self._NoteBookInstanceId

    @NoteBookInstanceId.setter
    def NoteBookInstanceId(self, NoteBookInstanceId):
        self._NoteBookInstanceId = NoteBookInstanceId

    @property
    def OPType(self):
        """操作类型，填UpdateTag
        :rtype: str
        """
        return self._OPType

    @OPType.setter
    def OPType(self, OPType):
        self._OPType = OPType


    def _deserialize(self, params):
        self._AlgoVersionId = params.get("AlgoVersionId")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._NoteBookInstanceId = params.get("NoteBookInstanceId")
        self._OPType = params.get("OPType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateAlgoVersionResponse(AbstractModel):
    """UpdateAlgoVersion返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class UpdateAutoMLCLSLogConfigRequest(AbstractModel):
    """UpdateAutoMLCLSLogConfig请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _LogEnable: 是否开启日志投递
        :type LogEnable: bool
        :param _TrainTaskId: 训练任务ID
        :type TrainTaskId: str
        :param _LogConfig: 日志投递参数
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        self._AutoMLTaskId = None
        self._LogEnable = None
        self._TrainTaskId = None
        self._LogConfig = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def LogEnable(self):
        """是否开启日志投递
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def TrainTaskId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId

    @property
    def LogConfig(self):
        """日志投递参数
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._LogEnable = params.get("LogEnable")
        self._TrainTaskId = params.get("TrainTaskId")
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateAutoMLCLSLogConfigResponse(AbstractModel):
    """UpdateAutoMLCLSLogConfig返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _TrainTaskId: 训练任务ID
        :type TrainTaskId: str
        :param _LogEnable: 是否开启日志投递
注意：此字段可能返回 null，表示取不到有效值。
        :type LogEnable: bool
        :param _LogConfig: 日志投递参数
注意：此字段可能返回 null，表示取不到有效值。
        :type LogConfig: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._TrainTaskId = None
        self._LogEnable = None
        self._LogConfig = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def TrainTaskId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TrainTaskId

    @TrainTaskId.setter
    def TrainTaskId(self, TrainTaskId):
        self._TrainTaskId = TrainTaskId

    @property
    def LogEnable(self):
        """是否开启日志投递
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._LogEnable

    @LogEnable.setter
    def LogEnable(self, LogEnable):
        self._LogEnable = LogEnable

    @property
    def LogConfig(self):
        """日志投递参数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.LogConfig`
        """
        return self._LogConfig

    @LogConfig.setter
    def LogConfig(self, LogConfig):
        self._LogConfig = LogConfig

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._TrainTaskId = params.get("TrainTaskId")
        self._LogEnable = params.get("LogEnable")
        if params.get("LogConfig") is not None:
            self._LogConfig = LogConfig()
            self._LogConfig._deserialize(params.get("LogConfig"))
        self._RequestId = params.get("RequestId")


class UpdateAutoMLTaskConfigReqRequest(AbstractModel):
    """UpdateAutoMLTaskConfigReq请求参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _DataConfig: 数据配置
        :type DataConfig: :class:`tencentcloud.tione.v20211111.models.MLDataConfig`
        :param _TaskOutputConfig: 自动学习任务输出路径
        :type TaskOutputConfig: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        :param _ModelTrainConfig: 模型配置
        :type ModelTrainConfig: :class:`tencentcloud.tione.v20211111.models.ModelTrainConfig`
        :param _ModelParamConfig: 模型超参数
        :type ModelParamConfig: str
        :param _TrainResourceConfig: 训练资源配置
        :type TrainResourceConfig: :class:`tencentcloud.tione.v20211111.models.TrainResourceConfig`
        """
        self._AutoMLTaskId = None
        self._DataConfig = None
        self._TaskOutputConfig = None
        self._ModelTrainConfig = None
        self._ModelParamConfig = None
        self._TrainResourceConfig = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def DataConfig(self):
        """数据配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.MLDataConfig`
        """
        return self._DataConfig

    @DataConfig.setter
    def DataConfig(self, DataConfig):
        self._DataConfig = DataConfig

    @property
    def TaskOutputConfig(self):
        """自动学习任务输出路径
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._TaskOutputConfig

    @TaskOutputConfig.setter
    def TaskOutputConfig(self, TaskOutputConfig):
        self._TaskOutputConfig = TaskOutputConfig

    @property
    def ModelTrainConfig(self):
        """模型配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelTrainConfig`
        """
        return self._ModelTrainConfig

    @ModelTrainConfig.setter
    def ModelTrainConfig(self, ModelTrainConfig):
        self._ModelTrainConfig = ModelTrainConfig

    @property
    def ModelParamConfig(self):
        """模型超参数
        :rtype: str
        """
        return self._ModelParamConfig

    @ModelParamConfig.setter
    def ModelParamConfig(self, ModelParamConfig):
        self._ModelParamConfig = ModelParamConfig

    @property
    def TrainResourceConfig(self):
        """训练资源配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.TrainResourceConfig`
        """
        return self._TrainResourceConfig

    @TrainResourceConfig.setter
    def TrainResourceConfig(self, TrainResourceConfig):
        self._TrainResourceConfig = TrainResourceConfig


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        if params.get("DataConfig") is not None:
            self._DataConfig = MLDataConfig()
            self._DataConfig._deserialize(params.get("DataConfig"))
        if params.get("TaskOutputConfig") is not None:
            self._TaskOutputConfig = CosPathInfo()
            self._TaskOutputConfig._deserialize(params.get("TaskOutputConfig"))
        if params.get("ModelTrainConfig") is not None:
            self._ModelTrainConfig = ModelTrainConfig()
            self._ModelTrainConfig._deserialize(params.get("ModelTrainConfig"))
        self._ModelParamConfig = params.get("ModelParamConfig")
        if params.get("TrainResourceConfig") is not None:
            self._TrainResourceConfig = TrainResourceConfig()
            self._TrainResourceConfig._deserialize(params.get("TrainResourceConfig"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateAutoMLTaskConfigReqResponse(AbstractModel):
    """UpdateAutoMLTaskConfigReq返回参数结构体

    """

    def __init__(self):
        r"""
        :param _AutoMLTaskId: 自动学习任务ID
        :type AutoMLTaskId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._AutoMLTaskId = None
        self._RequestId = None

    @property
    def AutoMLTaskId(self):
        """自动学习任务ID
        :rtype: str
        """
        return self._AutoMLTaskId

    @AutoMLTaskId.setter
    def AutoMLTaskId(self, AutoMLTaskId):
        self._AutoMLTaskId = AutoMLTaskId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._AutoMLTaskId = params.get("AutoMLTaskId")
        self._RequestId = params.get("RequestId")


class UpdateDataSourceStatusRequest(AbstractModel):
    """UpdateDataSourceStatus请求参数结构体

    """

    def __init__(self):
        r"""
        :param _DataSourceId: 数据源ID
        :type DataSourceId: str
        :param _DataSourceStatus: 数据源状态
        :type DataSourceStatus: str
        :param _ErrorMsg: 数据源错误描述
        :type ErrorMsg: str
        """
        self._DataSourceId = None
        self._DataSourceStatus = None
        self._ErrorMsg = None

    @property
    def DataSourceId(self):
        """数据源ID
        :rtype: str
        """
        return self._DataSourceId

    @DataSourceId.setter
    def DataSourceId(self, DataSourceId):
        self._DataSourceId = DataSourceId

    @property
    def DataSourceStatus(self):
        """数据源状态
        :rtype: str
        """
        return self._DataSourceStatus

    @DataSourceStatus.setter
    def DataSourceStatus(self, DataSourceStatus):
        self._DataSourceStatus = DataSourceStatus

    @property
    def ErrorMsg(self):
        """数据源错误描述
        :rtype: str
        """
        return self._ErrorMsg

    @ErrorMsg.setter
    def ErrorMsg(self, ErrorMsg):
        self._ErrorMsg = ErrorMsg


    def _deserialize(self, params):
        self._DataSourceId = params.get("DataSourceId")
        self._DataSourceStatus = params.get("DataSourceStatus")
        self._ErrorMsg = params.get("ErrorMsg")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateDataSourceStatusResponse(AbstractModel):
    """UpdateDataSourceStatus返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class UpdateModelRequest(AbstractModel):
    """UpdateModel请求参数结构体

    """

    def __init__(self):
        r"""
        :param _ModelId: 模型Id
        :type ModelId: str
        :param _Tags: 模型资源标签
        :type Tags: list of Tag
        :param _ModelTags: 模型标签
        :type ModelTags: list of str
        :param _Name: 模型名
        :type Name: str
        :param _ModelStorageInfo: 模型存储信息
        :type ModelStorageInfo: :class:`tencentcloud.tione.v20211111.models.ModelStorageInfo`
        :param _IsTagsChanged: 模型资源标签是否更新
        :type IsTagsChanged: bool
        """
        self._ModelId = None
        self._Tags = None
        self._ModelTags = None
        self._Name = None
        self._ModelStorageInfo = None
        self._IsTagsChanged = None

    @property
    def ModelId(self):
        """模型Id
        :rtype: str
        """
        return self._ModelId

    @ModelId.setter
    def ModelId(self, ModelId):
        self._ModelId = ModelId

    @property
    def Tags(self):
        """模型资源标签
        :rtype: list of Tag
        """
        return self._Tags

    @Tags.setter
    def Tags(self, Tags):
        self._Tags = Tags

    @property
    def ModelTags(self):
        """模型标签
        :rtype: list of str
        """
        return self._ModelTags

    @ModelTags.setter
    def ModelTags(self, ModelTags):
        self._ModelTags = ModelTags

    @property
    def Name(self):
        """模型名
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        self._Name = Name

    @property
    def ModelStorageInfo(self):
        """模型存储信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.ModelStorageInfo`
        """
        return self._ModelStorageInfo

    @ModelStorageInfo.setter
    def ModelStorageInfo(self, ModelStorageInfo):
        self._ModelStorageInfo = ModelStorageInfo

    @property
    def IsTagsChanged(self):
        """模型资源标签是否更新
        :rtype: bool
        """
        return self._IsTagsChanged

    @IsTagsChanged.setter
    def IsTagsChanged(self, IsTagsChanged):
        self._IsTagsChanged = IsTagsChanged


    def _deserialize(self, params):
        self._ModelId = params.get("ModelId")
        if params.get("Tags") is not None:
            self._Tags = []
            for item in params.get("Tags"):
                obj = Tag()
                obj._deserialize(item)
                self._Tags.append(obj)
        self._ModelTags = params.get("ModelTags")
        self._Name = params.get("Name")
        if params.get("ModelStorageInfo") is not None:
            self._ModelStorageInfo = ModelStorageInfo()
            self._ModelStorageInfo._deserialize(params.get("ModelStorageInfo"))
        self._IsTagsChanged = params.get("IsTagsChanged")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateModelResponse(AbstractModel):
    """UpdateModel返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class UpdateNotebookInfoRequest(AbstractModel):
    """UpdateNotebookInfo请求参数结构体

    """

    def __init__(self):
        r"""
        :param _NotebookId: notebook ID
        :type NotebookId: str
        :param _Warnings: warning信息
        :type Warnings: list of Warning
        """
        self._NotebookId = None
        self._Warnings = None

    @property
    def NotebookId(self):
        """notebook ID
        :rtype: str
        """
        return self._NotebookId

    @NotebookId.setter
    def NotebookId(self, NotebookId):
        self._NotebookId = NotebookId

    @property
    def Warnings(self):
        """warning信息
        :rtype: list of Warning
        """
        return self._Warnings

    @Warnings.setter
    def Warnings(self, Warnings):
        self._Warnings = Warnings


    def _deserialize(self, params):
        self._NotebookId = params.get("NotebookId")
        if params.get("Warnings") is not None:
            self._Warnings = []
            for item in params.get("Warnings"):
                obj = Warning()
                obj._deserialize(item)
                self._Warnings.append(obj)
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateNotebookInfoResponse(AbstractModel):
    """UpdateNotebookInfo返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class UpdateTensorBoardTaskRequest(AbstractModel):
    """UpdateTensorBoardTask请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 训练任务ID
        :type TaskId: str
        :param _SummaryDataConfig: summary存储配置
        :type SummaryDataConfig: :class:`tencentcloud.tione.v20211111.models.DataConfig`
        :param _SummaryAbsolutePath: summary相对路径
        :type SummaryAbsolutePath: str
        """
        self._TaskId = None
        self._SummaryDataConfig = None
        self._SummaryAbsolutePath = None

    @property
    def TaskId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def SummaryDataConfig(self):
        """summary存储配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.DataConfig`
        """
        return self._SummaryDataConfig

    @SummaryDataConfig.setter
    def SummaryDataConfig(self, SummaryDataConfig):
        self._SummaryDataConfig = SummaryDataConfig

    @property
    def SummaryAbsolutePath(self):
        """summary相对路径
        :rtype: str
        """
        return self._SummaryAbsolutePath

    @SummaryAbsolutePath.setter
    def SummaryAbsolutePath(self, SummaryAbsolutePath):
        self._SummaryAbsolutePath = SummaryAbsolutePath


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        if params.get("SummaryDataConfig") is not None:
            self._SummaryDataConfig = DataConfig()
            self._SummaryDataConfig._deserialize(params.get("SummaryDataConfig"))
        self._SummaryAbsolutePath = params.get("SummaryAbsolutePath")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateTensorBoardTaskResponse(AbstractModel):
    """UpdateTensorBoardTask返回参数结构体

    """

    def __init__(self):
        r"""
        :param _TensorBoardId: TensorBoard ID
注意：此字段可能返回 null，表示取不到有效值。
        :type TensorBoardId: str
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._TensorBoardId = None
        self._RequestId = None

    @property
    def TensorBoardId(self):
        """TensorBoard ID
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TensorBoardId

    @TensorBoardId.setter
    def TensorBoardId(self, TensorBoardId):
        self._TensorBoardId = TensorBoardId

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._TensorBoardId = params.get("TensorBoardId")
        self._RequestId = params.get("RequestId")


class UpdateTrainingTaskPluginRequest(AbstractModel):
    """UpdateTrainingTaskPlugin请求参数结构体

    """

    def __init__(self):
        r"""
        :param _TaskId: 训练任务ID
        :type TaskId: str
        :param _PluginInfo: 插件信息
        :type PluginInfo: :class:`tencentcloud.tione.v20211111.models.PluginInfo`
        """
        self._TaskId = None
        self._PluginInfo = None

    @property
    def TaskId(self):
        """训练任务ID
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def PluginInfo(self):
        """插件信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.PluginInfo`
        """
        return self._PluginInfo

    @PluginInfo.setter
    def PluginInfo(self, PluginInfo):
        self._PluginInfo = PluginInfo


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        if params.get("PluginInfo") is not None:
            self._PluginInfo = PluginInfo()
            self._PluginInfo._deserialize(params.get("PluginInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UpdateTrainingTaskPluginResponse(AbstractModel):
    """UpdateTrainingTaskPlugin返回参数结构体

    """

    def __init__(self):
        r"""
        :param _PluginInfo: 更新后的插件信息
        :type PluginInfo: :class:`tencentcloud.tione.v20211111.models.PluginInfo`
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._PluginInfo = None
        self._RequestId = None

    @property
    def PluginInfo(self):
        """更新后的插件信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.PluginInfo`
        """
        return self._PluginInfo

    @PluginInfo.setter
    def PluginInfo(self, PluginInfo):
        self._PluginInfo = PluginInfo

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        if params.get("PluginInfo") is not None:
            self._PluginInfo = PluginInfo()
            self._PluginInfo._deserialize(params.get("PluginInfo"))
        self._RequestId = params.get("RequestId")


class UploadDataRequest(AbstractModel):
    """UploadData请求参数结构体

    """

    def __init__(self):
        r"""
        :param _Data: 上传数据
        :type Data: str
        :param _DataType: 上传数据类型
        :type DataType: str
        """
        self._Data = None
        self._DataType = None

    @property
    def Data(self):
        """上传数据
        :rtype: str
        """
        return self._Data

    @Data.setter
    def Data(self, Data):
        self._Data = Data

    @property
    def DataType(self):
        """上传数据类型
        :rtype: str
        """
        return self._DataType

    @DataType.setter
    def DataType(self, DataType):
        self._DataType = DataType


    def _deserialize(self, params):
        self._Data = params.get("Data")
        self._DataType = params.get("DataType")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UploadDataResponse(AbstractModel):
    """UploadData返回参数结构体

    """

    def __init__(self):
        r"""
        :param _RequestId: 唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :type RequestId: str
        """
        self._RequestId = None

    @property
    def RequestId(self):
        """唯一请求 ID，由服务端生成，每次请求都会返回（若请求因其他原因未能抵达服务端，则该次请求不会获得 RequestId）。定位问题时需要提供该次请求的 RequestId。
        :rtype: str
        """
        return self._RequestId

    @RequestId.setter
    def RequestId(self, RequestId):
        self._RequestId = RequestId


    def _deserialize(self, params):
        self._RequestId = params.get("RequestId")


class Usage(AbstractModel):
    """大模型生成Token统计

    """

    def __init__(self):
        r"""
        :param _CompletionTokens: 生成的token数目
        :type CompletionTokens: int
        :param _PromptTokens: 输入的token数目
        :type PromptTokens: int
        :param _TotalTokens: 总共token数目
        :type TotalTokens: int
        """
        self._CompletionTokens = None
        self._PromptTokens = None
        self._TotalTokens = None

    @property
    def CompletionTokens(self):
        """生成的token数目
        :rtype: int
        """
        return self._CompletionTokens

    @CompletionTokens.setter
    def CompletionTokens(self, CompletionTokens):
        self._CompletionTokens = CompletionTokens

    @property
    def PromptTokens(self):
        """输入的token数目
        :rtype: int
        """
        return self._PromptTokens

    @PromptTokens.setter
    def PromptTokens(self, PromptTokens):
        self._PromptTokens = PromptTokens

    @property
    def TotalTokens(self):
        """总共token数目
        :rtype: int
        """
        return self._TotalTokens

    @TotalTokens.setter
    def TotalTokens(self, TotalTokens):
        self._TotalTokens = TotalTokens


    def _deserialize(self, params):
        self._CompletionTokens = params.get("CompletionTokens")
        self._PromptTokens = params.get("PromptTokens")
        self._TotalTokens = params.get("TotalTokens")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class UserDataInfo(AbstractModel):
    """用户数据

    """

    def __init__(self):
        r"""
        :param _AiMarketInfo: ai市场cos自动下载配置
        :type AiMarketInfo: :class:`tencentcloud.tione.v20211111.models.AiMarketInfo`
        """
        self._AiMarketInfo = None

    @property
    def AiMarketInfo(self):
        """ai市场cos自动下载配置
        :rtype: :class:`tencentcloud.tione.v20211111.models.AiMarketInfo`
        """
        return self._AiMarketInfo

    @AiMarketInfo.setter
    def AiMarketInfo(self, AiMarketInfo):
        self._AiMarketInfo = AiMarketInfo


    def _deserialize(self, params):
        if params.get("AiMarketInfo") is not None:
            self._AiMarketInfo = AiMarketInfo()
            self._AiMarketInfo._deserialize(params.get("AiMarketInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VPCInfo(AbstractModel):
    """预付费纳管节点VPC信息

    """

    def __init__(self):
        r"""
        :param _VpcId: vpc id
注意：此字段可能返回 null，表示取不到有效值。
        :type VpcId: str
        :param _SubnetId: subnet id
注意：此字段可能返回 null，表示取不到有效值。
        :type SubnetId: str
        :param _PrivateIpAddresses: 内网IP地址
注意：此字段可能返回 null，表示取不到有效值。
        :type PrivateIpAddresses: list of str
        :param _AsVpcGateway: 是否作为VPC网关
注意：此字段可能返回 null，表示取不到有效值。
        :type AsVpcGateway: bool
        :param _Ipv6AddressCount: ip v6地址数
注意：此字段可能返回 null，表示取不到有效值。
        :type Ipv6AddressCount: int
        """
        self._VpcId = None
        self._SubnetId = None
        self._PrivateIpAddresses = None
        self._AsVpcGateway = None
        self._Ipv6AddressCount = None

    @property
    def VpcId(self):
        """vpc id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """subnet id
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def PrivateIpAddresses(self):
        """内网IP地址
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: list of str
        """
        return self._PrivateIpAddresses

    @PrivateIpAddresses.setter
    def PrivateIpAddresses(self, PrivateIpAddresses):
        self._PrivateIpAddresses = PrivateIpAddresses

    @property
    def AsVpcGateway(self):
        """是否作为VPC网关
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._AsVpcGateway

    @AsVpcGateway.setter
    def AsVpcGateway(self, AsVpcGateway):
        self._AsVpcGateway = AsVpcGateway

    @property
    def Ipv6AddressCount(self):
        """ip v6地址数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Ipv6AddressCount

    @Ipv6AddressCount.setter
    def Ipv6AddressCount(self, Ipv6AddressCount):
        self._Ipv6AddressCount = Ipv6AddressCount


    def _deserialize(self, params):
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._PrivateIpAddresses = params.get("PrivateIpAddresses")
        self._AsVpcGateway = params.get("AsVpcGateway")
        self._Ipv6AddressCount = params.get("Ipv6AddressCount")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VirtualGpu(AbstractModel):
    """资源组支持VirtualGpu的信息

    """

    def __init__(self):
        r"""
        :param _GpuType: GPU卡型号
注意：此字段可能返回 null，表示取不到有效值。
        :type GpuType: str
        :param _IsVirtualGpu: 是否支持VirtualGpu
注意：此字段可能返回 null，表示取不到有效值。
        :type IsVirtualGpu: bool
        """
        self._GpuType = None
        self._IsVirtualGpu = None

    @property
    def GpuType(self):
        """GPU卡型号
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._GpuType

    @GpuType.setter
    def GpuType(self, GpuType):
        self._GpuType = GpuType

    @property
    def IsVirtualGpu(self):
        """是否支持VirtualGpu
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: bool
        """
        return self._IsVirtualGpu

    @IsVirtualGpu.setter
    def IsVirtualGpu(self, IsVirtualGpu):
        self._IsVirtualGpu = IsVirtualGpu


    def _deserialize(self, params):
        self._GpuType = params.get("GpuType")
        self._IsVirtualGpu = params.get("IsVirtualGpu")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Volume(AbstractModel):
    """磁盘信息

    """

    def __init__(self):
        r"""
        :param _Type: 磁盘类型
注意：此字段可能返回 null，表示取不到有效值。
        :type Type: int
        :param _Size: 磁盘大学
注意：此字段可能返回 null，表示取不到有效值。
        :type Size: int
        """
        self._Type = None
        self._Size = None

    @property
    def Type(self):
        """磁盘类型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        self._Type = Type

    @property
    def Size(self):
        """磁盘大学
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Size

    @Size.setter
    def Size(self, Size):
        self._Size = Size


    def _deserialize(self, params):
        self._Type = params.get("Type")
        self._Size = params.get("Size")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VolumeMount(AbstractModel):
    """外部挂载信息

    """

    def __init__(self):
        r"""
        :param _CFSConfig: cfs的配置信息
        :type CFSConfig: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        :param _VolumeSourceType: 挂载源类型，CFS、COS，默认为CFS
        :type VolumeSourceType: str
        :param _CosPathInfo: 挂载cos时的配置信息
注意：此字段可能返回 null，表示取不到有效值。
        :type CosPathInfo: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        self._CFSConfig = None
        self._VolumeSourceType = None
        self._CosPathInfo = None

    @property
    def CFSConfig(self):
        """cfs的配置信息
        :rtype: :class:`tencentcloud.tione.v20211111.models.CFSConfig`
        """
        return self._CFSConfig

    @CFSConfig.setter
    def CFSConfig(self, CFSConfig):
        self._CFSConfig = CFSConfig

    @property
    def VolumeSourceType(self):
        """挂载源类型，CFS、COS，默认为CFS
        :rtype: str
        """
        return self._VolumeSourceType

    @VolumeSourceType.setter
    def VolumeSourceType(self, VolumeSourceType):
        self._VolumeSourceType = VolumeSourceType

    @property
    def CosPathInfo(self):
        """挂载cos时的配置信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: :class:`tencentcloud.tione.v20211111.models.CosPathInfo`
        """
        return self._CosPathInfo

    @CosPathInfo.setter
    def CosPathInfo(self, CosPathInfo):
        self._CosPathInfo = CosPathInfo


    def _deserialize(self, params):
        if params.get("CFSConfig") is not None:
            self._CFSConfig = CFSConfig()
            self._CFSConfig._deserialize(params.get("CFSConfig"))
        self._VolumeSourceType = params.get("VolumeSourceType")
        if params.get("CosPathInfo") is not None:
            self._CosPathInfo = CosPathInfo()
            self._CosPathInfo._deserialize(params.get("CosPathInfo"))
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VpcPrivateLinkDetail(AbstractModel):
    """Notebook SSH配置私有连接详细信息

    """

    def __init__(self):
        r"""
        :param _Id: 唯一ID
        :type Id: str
        :param _VpcId: vpc id
        :type VpcId: str
        :param _SubnetId: 子网Id
        :type SubnetId: str
        :param _MappingDomain: 用户自定义映射域名
        :type MappingDomain: str
        :param _EndPointList: 该VPC子网关联的终端节点信息
        :type EndPointList: list of EndPointInfo
        :param _CreatedTime: 创建时间
        :type CreatedTime: str
        :param _UpdatedTime: 更新时间
        :type UpdatedTime: str
        :param _Status: 状态。枚举：CREATING, CREATED, CREATE_FAILED, DELETING, DELETE_FAILED
        :type Status: str
        """
        self._Id = None
        self._VpcId = None
        self._SubnetId = None
        self._MappingDomain = None
        self._EndPointList = None
        self._CreatedTime = None
        self._UpdatedTime = None
        self._Status = None

    @property
    def Id(self):
        """唯一ID
        :rtype: str
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def VpcId(self):
        """vpc id
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """子网Id
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def MappingDomain(self):
        """用户自定义映射域名
        :rtype: str
        """
        return self._MappingDomain

    @MappingDomain.setter
    def MappingDomain(self, MappingDomain):
        self._MappingDomain = MappingDomain

    @property
    def EndPointList(self):
        """该VPC子网关联的终端节点信息
        :rtype: list of EndPointInfo
        """
        return self._EndPointList

    @EndPointList.setter
    def EndPointList(self, EndPointList):
        self._EndPointList = EndPointList

    @property
    def CreatedTime(self):
        """创建时间
        :rtype: str
        """
        return self._CreatedTime

    @CreatedTime.setter
    def CreatedTime(self, CreatedTime):
        self._CreatedTime = CreatedTime

    @property
    def UpdatedTime(self):
        """更新时间
        :rtype: str
        """
        return self._UpdatedTime

    @UpdatedTime.setter
    def UpdatedTime(self, UpdatedTime):
        self._UpdatedTime = UpdatedTime

    @property
    def Status(self):
        """状态。枚举：CREATING, CREATED, CREATE_FAILED, DELETING, DELETE_FAILED
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._MappingDomain = params.get("MappingDomain")
        if params.get("EndPointList") is not None:
            self._EndPointList = []
            for item in params.get("EndPointList"):
                obj = EndPointInfo()
                obj._deserialize(item)
                self._EndPointList.append(obj)
        self._CreatedTime = params.get("CreatedTime")
        self._UpdatedTime = params.get("UpdatedTime")
        self._Status = params.get("Status")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class VpcSSHInfo(AbstractModel):
    """Notebook SSH配置私有连接详细信息

    """

    def __init__(self):
        r"""
        :param _VpcId: vpc id
        :type VpcId: str
        :param _SubnetId: 子网Id
        :type SubnetId: str
        :param _MappingDomain: 用户自定义映射域名
        :type MappingDomain: str
        :param _PrivateLinkVip: 终端节点VIP
        :type PrivateLinkVip: str
        :param _Port: SSH端口
        :type Port: int
        :param _LoginCommand: ssh访问命令
        :type LoginCommand: str
        """
        self._VpcId = None
        self._SubnetId = None
        self._MappingDomain = None
        self._PrivateLinkVip = None
        self._Port = None
        self._LoginCommand = None

    @property
    def VpcId(self):
        """vpc id
        :rtype: str
        """
        return self._VpcId

    @VpcId.setter
    def VpcId(self, VpcId):
        self._VpcId = VpcId

    @property
    def SubnetId(self):
        """子网Id
        :rtype: str
        """
        return self._SubnetId

    @SubnetId.setter
    def SubnetId(self, SubnetId):
        self._SubnetId = SubnetId

    @property
    def MappingDomain(self):
        """用户自定义映射域名
        :rtype: str
        """
        return self._MappingDomain

    @MappingDomain.setter
    def MappingDomain(self, MappingDomain):
        self._MappingDomain = MappingDomain

    @property
    def PrivateLinkVip(self):
        """终端节点VIP
        :rtype: str
        """
        return self._PrivateLinkVip

    @PrivateLinkVip.setter
    def PrivateLinkVip(self, PrivateLinkVip):
        self._PrivateLinkVip = PrivateLinkVip

    @property
    def Port(self):
        """SSH端口
        :rtype: int
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        self._Port = Port

    @property
    def LoginCommand(self):
        """ssh访问命令
        :rtype: str
        """
        return self._LoginCommand

    @LoginCommand.setter
    def LoginCommand(self, LoginCommand):
        self._LoginCommand = LoginCommand


    def _deserialize(self, params):
        self._VpcId = params.get("VpcId")
        self._SubnetId = params.get("SubnetId")
        self._MappingDomain = params.get("MappingDomain")
        self._PrivateLinkVip = params.get("PrivateLinkVip")
        self._Port = params.get("Port")
        self._LoginCommand = params.get("LoginCommand")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class Warning(AbstractModel):
    """任务生命周期中的非致命错误信息

    """

    def __init__(self):
        r"""
        :param _Reason: warning原因
注意：此字段可能返回 null，表示取不到有效值。
        :type Reason: str
        :param _Message: warning详细信息
注意：此字段可能返回 null，表示取不到有效值。
        :type Message: str
        """
        self._Reason = None
        self._Message = None

    @property
    def Reason(self):
        """warning原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Reason

    @Reason.setter
    def Reason(self, Reason):
        self._Reason = Reason

    @property
    def Message(self):
        """warning详细信息
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        self._Message = Message


    def _deserialize(self, params):
        self._Reason = params.get("Reason")
        self._Message = params.get("Message")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WeDataHDFSConfig(AbstractModel):
    """WeData HDFS存储的配置

    """

    def __init__(self):
        r"""
        :param _Id: WeData HDSF数据源ID
        :type Id: int
        :param _Path: WeData HDSF 数据源存储的路径
        :type Path: str
        """
        self._Id = None
        self._Path = None

    @property
    def Id(self):
        """WeData HDSF数据源ID
        :rtype: int
        """
        return self._Id

    @Id.setter
    def Id(self, Id):
        self._Id = Id

    @property
    def Path(self):
        """WeData HDSF 数据源存储的路径
        :rtype: str
        """
        return self._Path

    @Path.setter
    def Path(self, Path):
        self._Path = Path


    def _deserialize(self, params):
        self._Id = params.get("Id")
        self._Path = params.get("Path")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WeightEntry(AbstractModel):
    """服务的权重

    """

    def __init__(self):
        r"""
        :param _ServiceId: 服务id
        :type ServiceId: str
        :param _Weight: 流量权重值，同 ServiceGroup 下 总和应为 100
        :type Weight: int
        """
        self._ServiceId = None
        self._Weight = None

    @property
    def ServiceId(self):
        """服务id
        :rtype: str
        """
        return self._ServiceId

    @ServiceId.setter
    def ServiceId(self, ServiceId):
        self._ServiceId = ServiceId

    @property
    def Weight(self):
        """流量权重值，同 ServiceGroup 下 总和应为 100
        :rtype: int
        """
        return self._Weight

    @Weight.setter
    def Weight(self, Weight):
        self._Weight = Weight


    def _deserialize(self, params):
        self._ServiceId = params.get("ServiceId")
        self._Weight = params.get("Weight")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WhichModel(AbstractModel):
    """使用WhichModel来指定是哪个任务评测的第几个模型（因为多个任务可能评了同一个模型，被当作不同模型对待——见需求单评论）https://tapd.woa.com/tapd_fe/20421924/story/detail/1020421924118674103

    """

    def __init__(self):
        r"""
        :param _TaskId: 指定选的这个模型是哪个任务评测的
注意：此字段可能返回 null，表示取不到有效值。
        :type TaskId: str
        :param _ModelIndex: 指定选的这个模型是这个任务评测的第几个模型
注意：此字段可能返回 null，表示取不到有效值。
        :type ModelIndex: int
        """
        self._TaskId = None
        self._ModelIndex = None

    @property
    def TaskId(self):
        """指定选的这个模型是哪个任务评测的
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._TaskId

    @TaskId.setter
    def TaskId(self, TaskId):
        self._TaskId = TaskId

    @property
    def ModelIndex(self):
        """指定选的这个模型是这个任务评测的第几个模型
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._ModelIndex

    @ModelIndex.setter
    def ModelIndex(self, ModelIndex):
        self._ModelIndex = ModelIndex


    def _deserialize(self, params):
        self._TaskId = params.get("TaskId")
        self._ModelIndex = params.get("ModelIndex")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WordCount(AbstractModel):
    """数据中心查询文本透视

    """

    def __init__(self):
        r"""
        :param _Word: 单词
注意：此字段可能返回 null，表示取不到有效值。
        :type Word: str
        :param _Count: 单词出现的次数
注意：此字段可能返回 null，表示取不到有效值。
        :type Count: int
        """
        self._Word = None
        self._Count = None

    @property
    def Word(self):
        """单词
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Word

    @Word.setter
    def Word(self, Word):
        self._Word = Word

    @property
    def Count(self):
        """单词出现的次数
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: int
        """
        return self._Count

    @Count.setter
    def Count(self, Count):
        self._Count = Count


    def _deserialize(self, params):
        self._Word = params.get("Word")
        self._Count = params.get("Count")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class WorkloadStatus(AbstractModel):
    """工作负载的状态

    """

    def __init__(self):
        r"""
        :param _Replicas: 当前实例数
        :type Replicas: int
        :param _UpdatedReplicas: 更新的实例数
        :type UpdatedReplicas: int
        :param _ReadyReplicas: 就绪的实例数
        :type ReadyReplicas: int
        :param _AvailableReplicas: 可用的实例数
        :type AvailableReplicas: int
        :param _UnavailableReplicas: 不可用的实例数
        :type UnavailableReplicas: int
        :param _Status: Normal	正常运行中
Abnormal	服务异常，例如容器启动失败等
Waiting	服务等待中，例如容器下载镜像过程等
Stopped   已停止 
Pending 启动中
Stopping 停止中
        :type Status: str
        :param _StatefulSetCondition: 工作负载的状况信息
        :type StatefulSetCondition: list of StatefulSetCondition
        :param _Conditions: 工作负载历史的状况信息
        :type Conditions: list of StatefulSetCondition
        :param _Reason: 状态异常时，展示原因
注意：此字段可能返回 null，表示取不到有效值。
        :type Reason: str
        """
        self._Replicas = None
        self._UpdatedReplicas = None
        self._ReadyReplicas = None
        self._AvailableReplicas = None
        self._UnavailableReplicas = None
        self._Status = None
        self._StatefulSetCondition = None
        self._Conditions = None
        self._Reason = None

    @property
    def Replicas(self):
        """当前实例数
        :rtype: int
        """
        return self._Replicas

    @Replicas.setter
    def Replicas(self, Replicas):
        self._Replicas = Replicas

    @property
    def UpdatedReplicas(self):
        """更新的实例数
        :rtype: int
        """
        return self._UpdatedReplicas

    @UpdatedReplicas.setter
    def UpdatedReplicas(self, UpdatedReplicas):
        self._UpdatedReplicas = UpdatedReplicas

    @property
    def ReadyReplicas(self):
        """就绪的实例数
        :rtype: int
        """
        return self._ReadyReplicas

    @ReadyReplicas.setter
    def ReadyReplicas(self, ReadyReplicas):
        self._ReadyReplicas = ReadyReplicas

    @property
    def AvailableReplicas(self):
        """可用的实例数
        :rtype: int
        """
        return self._AvailableReplicas

    @AvailableReplicas.setter
    def AvailableReplicas(self, AvailableReplicas):
        self._AvailableReplicas = AvailableReplicas

    @property
    def UnavailableReplicas(self):
        """不可用的实例数
        :rtype: int
        """
        return self._UnavailableReplicas

    @UnavailableReplicas.setter
    def UnavailableReplicas(self, UnavailableReplicas):
        self._UnavailableReplicas = UnavailableReplicas

    @property
    def Status(self):
        """Normal	正常运行中
Abnormal	服务异常，例如容器启动失败等
Waiting	服务等待中，例如容器下载镜像过程等
Stopped   已停止 
Pending 启动中
Stopping 停止中
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        self._Status = Status

    @property
    def StatefulSetCondition(self):
        warnings.warn("parameter `StatefulSetCondition` is deprecated", DeprecationWarning) 

        """工作负载的状况信息
        :rtype: list of StatefulSetCondition
        """
        return self._StatefulSetCondition

    @StatefulSetCondition.setter
    def StatefulSetCondition(self, StatefulSetCondition):
        warnings.warn("parameter `StatefulSetCondition` is deprecated", DeprecationWarning) 

        self._StatefulSetCondition = StatefulSetCondition

    @property
    def Conditions(self):
        """工作负载历史的状况信息
        :rtype: list of StatefulSetCondition
        """
        return self._Conditions

    @Conditions.setter
    def Conditions(self, Conditions):
        self._Conditions = Conditions

    @property
    def Reason(self):
        """状态异常时，展示原因
注意：此字段可能返回 null，表示取不到有效值。
        :rtype: str
        """
        return self._Reason

    @Reason.setter
    def Reason(self, Reason):
        self._Reason = Reason


    def _deserialize(self, params):
        self._Replicas = params.get("Replicas")
        self._UpdatedReplicas = params.get("UpdatedReplicas")
        self._ReadyReplicas = params.get("ReadyReplicas")
        self._AvailableReplicas = params.get("AvailableReplicas")
        self._UnavailableReplicas = params.get("UnavailableReplicas")
        self._Status = params.get("Status")
        if params.get("StatefulSetCondition") is not None:
            self._StatefulSetCondition = []
            for item in params.get("StatefulSetCondition"):
                obj = StatefulSetCondition()
                obj._deserialize(item)
                self._StatefulSetCondition.append(obj)
        if params.get("Conditions") is not None:
            self._Conditions = []
            for item in params.get("Conditions"):
                obj = StatefulSetCondition()
                obj._deserialize(item)
                self._Conditions.append(obj)
        self._Reason = params.get("Reason")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class XiaoWeiASREvaluateItem(AbstractModel):
    """云小微ASR评测任务信息

    """

    def __init__(self):
        r"""
        :param _NERAutoMLTaskId: 专有名词自动学习任务ID
        :type NERAutoMLTaskId: str
        :param _NERXiaoWeiTaskId: 对应专有名词模型ID
        :type NERXiaoWeiTaskId: str
        :param _SentenceAutoMLTaskId: 场景句式自动学习任务ID
        :type SentenceAutoMLTaskId: str
        :param _SentenceXiaoWeiTaskId: 对应场景句式模型ID
        :type SentenceXiaoWeiTaskId: str
        :param _NERXiaoWeiName: 对应专有名词模型名称
        :type NERXiaoWeiName: str
        :param _SentenceXiaoWeiName: 对应场景句式模型名称
        :type SentenceXiaoWeiName: str
        :param _NERXiaoWeiVersion: 对应专有名词模型版本
        :type NERXiaoWeiVersion: str
        :param _SentenceXiaoWeiVersion: 对应场景句式模型版本
        :type SentenceXiaoWeiVersion: str
        :param _EvaluationTaskId: 自动学习评测任务id
        :type EvaluationTaskId: str
        """
        self._NERAutoMLTaskId = None
        self._NERXiaoWeiTaskId = None
        self._SentenceAutoMLTaskId = None
        self._SentenceXiaoWeiTaskId = None
        self._NERXiaoWeiName = None
        self._SentenceXiaoWeiName = None
        self._NERXiaoWeiVersion = None
        self._SentenceXiaoWeiVersion = None
        self._EvaluationTaskId = None

    @property
    def NERAutoMLTaskId(self):
        """专有名词自动学习任务ID
        :rtype: str
        """
        return self._NERAutoMLTaskId

    @NERAutoMLTaskId.setter
    def NERAutoMLTaskId(self, NERAutoMLTaskId):
        self._NERAutoMLTaskId = NERAutoMLTaskId

    @property
    def NERXiaoWeiTaskId(self):
        """对应专有名词模型ID
        :rtype: str
        """
        return self._NERXiaoWeiTaskId

    @NERXiaoWeiTaskId.setter
    def NERXiaoWeiTaskId(self, NERXiaoWeiTaskId):
        self._NERXiaoWeiTaskId = NERXiaoWeiTaskId

    @property
    def SentenceAutoMLTaskId(self):
        """场景句式自动学习任务ID
        :rtype: str
        """
        return self._SentenceAutoMLTaskId

    @SentenceAutoMLTaskId.setter
    def SentenceAutoMLTaskId(self, SentenceAutoMLTaskId):
        self._SentenceAutoMLTaskId = SentenceAutoMLTaskId

    @property
    def SentenceXiaoWeiTaskId(self):
        """对应场景句式模型ID
        :rtype: str
        """
        return self._SentenceXiaoWeiTaskId

    @SentenceXiaoWeiTaskId.setter
    def SentenceXiaoWeiTaskId(self, SentenceXiaoWeiTaskId):
        self._SentenceXiaoWeiTaskId = SentenceXiaoWeiTaskId

    @property
    def NERXiaoWeiName(self):
        """对应专有名词模型名称
        :rtype: str
        """
        return self._NERXiaoWeiName

    @NERXiaoWeiName.setter
    def NERXiaoWeiName(self, NERXiaoWeiName):
        self._NERXiaoWeiName = NERXiaoWeiName

    @property
    def SentenceXiaoWeiName(self):
        """对应场景句式模型名称
        :rtype: str
        """
        return self._SentenceXiaoWeiName

    @SentenceXiaoWeiName.setter
    def SentenceXiaoWeiName(self, SentenceXiaoWeiName):
        self._SentenceXiaoWeiName = SentenceXiaoWeiName

    @property
    def NERXiaoWeiVersion(self):
        """对应专有名词模型版本
        :rtype: str
        """
        return self._NERXiaoWeiVersion

    @NERXiaoWeiVersion.setter
    def NERXiaoWeiVersion(self, NERXiaoWeiVersion):
        self._NERXiaoWeiVersion = NERXiaoWeiVersion

    @property
    def SentenceXiaoWeiVersion(self):
        """对应场景句式模型版本
        :rtype: str
        """
        return self._SentenceXiaoWeiVersion

    @SentenceXiaoWeiVersion.setter
    def SentenceXiaoWeiVersion(self, SentenceXiaoWeiVersion):
        self._SentenceXiaoWeiVersion = SentenceXiaoWeiVersion

    @property
    def EvaluationTaskId(self):
        """自动学习评测任务id
        :rtype: str
        """
        return self._EvaluationTaskId

    @EvaluationTaskId.setter
    def EvaluationTaskId(self, EvaluationTaskId):
        self._EvaluationTaskId = EvaluationTaskId


    def _deserialize(self, params):
        self._NERAutoMLTaskId = params.get("NERAutoMLTaskId")
        self._NERXiaoWeiTaskId = params.get("NERXiaoWeiTaskId")
        self._SentenceAutoMLTaskId = params.get("SentenceAutoMLTaskId")
        self._SentenceXiaoWeiTaskId = params.get("SentenceXiaoWeiTaskId")
        self._NERXiaoWeiName = params.get("NERXiaoWeiName")
        self._SentenceXiaoWeiName = params.get("SentenceXiaoWeiName")
        self._NERXiaoWeiVersion = params.get("NERXiaoWeiVersion")
        self._SentenceXiaoWeiVersion = params.get("SentenceXiaoWeiVersion")
        self._EvaluationTaskId = params.get("EvaluationTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class XiaoWeiAppInfo(AbstractModel):
    """云小微应用信息

    """

    def __init__(self):
        r"""
        :param _AppId: 语音助手应用ID
        :type AppId: str
        """
        self._AppId = None

    @property
    def AppId(self):
        """语音助手应用ID
        :rtype: str
        """
        return self._AppId

    @AppId.setter
    def AppId(self, AppId):
        self._AppId = AppId


    def _deserialize(self, params):
        self._AppId = params.get("AppId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        


class XiaoWeiNLPEvaluateItem(AbstractModel):
    """云小微NLP类型评测任务

    """

    def __init__(self):
        r"""
        :param _NLUAutoMLTaskId: 自动训练任务ID
        :type NLUAutoMLTaskId: str
        :param _XiaoWeiTaskId: 云小微模型ID
        :type XiaoWeiTaskId: str
        """
        self._NLUAutoMLTaskId = None
        self._XiaoWeiTaskId = None

    @property
    def NLUAutoMLTaskId(self):
        """自动训练任务ID
        :rtype: str
        """
        return self._NLUAutoMLTaskId

    @NLUAutoMLTaskId.setter
    def NLUAutoMLTaskId(self, NLUAutoMLTaskId):
        self._NLUAutoMLTaskId = NLUAutoMLTaskId

    @property
    def XiaoWeiTaskId(self):
        """云小微模型ID
        :rtype: str
        """
        return self._XiaoWeiTaskId

    @XiaoWeiTaskId.setter
    def XiaoWeiTaskId(self, XiaoWeiTaskId):
        self._XiaoWeiTaskId = XiaoWeiTaskId


    def _deserialize(self, params):
        self._NLUAutoMLTaskId = params.get("NLUAutoMLTaskId")
        self._XiaoWeiTaskId = params.get("XiaoWeiTaskId")
        memeber_set = set(params.keys())
        for name, value in vars(self).items():
            property_name = name[1:]
            if property_name in memeber_set:
                memeber_set.remove(property_name)
        if len(memeber_set) > 0:
            warnings.warn("%s fileds are useless." % ",".join(memeber_set))
        