Metadata-Version: 2.4
Name: mysingle
Version: 0.4.28
Summary: Common library for MySingle services
Author-email: Dan Kim <daniel@mysingle.io>
Requires-Python: >=3.12
Requires-Dist: beanie>=1.25.0
Requires-Dist: fastapi>=0.116.1
Requires-Dist: httpx>=0.25.0
Requires-Dist: motor>=3.5.0
Requires-Dist: prometheus-client>=0.19.0
Requires-Dist: pydantic-settings>=2.2.1
Requires-Dist: pydantic>=2.7.0
Requires-Dist: pydantic[email]>=2.7.0
Provides-Extra: build
Requires-Dist: build>=1.0.0; extra == 'build'
Requires-Dist: twine>=4.0.0; extra == 'build'
Provides-Extra: dev
Requires-Dist: mypy>=1.17.0; extra == 'dev'
Requires-Dist: pre-commit>=3.0.0; extra == 'dev'
Requires-Dist: pytest-asyncio>=0.24.0; extra == 'dev'
Requires-Dist: pytest-cov>=4.0.0; extra == 'dev'
Requires-Dist: pytest>=8.4.1; extra == 'dev'
Requires-Dist: ruff>=0.4.0; extra == 'dev'
Description-Content-Type: text/markdown

# MySingle

A comprehensive unified library for MySingle platform services providing unified IAM client, RBAC decorators, middleware, guardrails, and base components for enterprise SaaS applications.

[![Build Status](https://github.com/Br0therDan/mysingle-pack/workflows/Build%20and%20Publish/badge.svg)](https://github.com/Br0therDan/mysingle-pack/actions)
[![PyPI version](https://badge.fury.io/py/mysingle.svg)](https://badge.fury.io/py/mysingle)
[![Python Version](https://img.shields.io/pypi/pyversions/mysingle.svg)](https://pypi.org/project/mysingle/)

## üöÄ Quick Start

### Installation

```bash
pip install mysingle
```

### Basic Usage

```python
from mysingle import BaseDoc, BaseResponseSchema, UnifiedIAMClient
from mysingle.rbac import require_permission, audit_log
from mysingle.config import settings

# Base models for MongoDB documents and API responses
class UserDocument(BaseDoc):
    username: str
    email: str

    class Settings:
        name = "users"

class UserResponse(BaseResponseSchema):
    username: str
    email: str
    tenant_id: str

# Unified IAM client for all authentication and authorization
iam_client = UnifiedIAMClient()

# Verify tokens and check permissions
user_info = await iam_client.verify_token(token)
has_permission = await iam_client.check_permission(
    user_id="user123",
    resource="ledger:journals",
    action="create",
    tenant_id="tenant456"
)

# RBAC decorators for FastAPI endpoints
@require_permission("ledger:journals", "create")
@audit_log("create", "journal")
async def create_journal(request: Request):
    # Automatic permission checking and audit logging
    pass
```

## üì¶ Features

### Core Components

- **üîê Unified IAM Client**: Single client for all authentication and authorization operations
- **üë• RBAC Decorators**: Permission-based access control decorators for FastAPI endpoints
- **üìÑ Base Models**: MongoDB document and API response base classes with tenant isolation
- **ÔøΩÔ∏è Security Middleware**: FastAPI middleware for authentication and tenant isolation
- **üö´ Guardrails**: Multi-tenant security, privacy protection, and rate limiting
- **ÔøΩ Audit Logging**: Comprehensive audit trail for security and compliance

### Enterprise Features

- **üè¢ Multi-Tenant Architecture**: Built-in tenant isolation for SaaS applications
- **ÔøΩ Microservices Integration**: Seamless integration with MySingle platform services
- **‚ö° Performance**: Optimized for enterprise-scale FastAPI applications
- **ÔøΩ Security**: OWASP-compliant security practices and guardrails

### Quality Assurance

- **‚úÖ Type Safety**: Full type hints with mypy checking
- **üß™ Testing**: Comprehensive test suite with pytest
- **üìè Code Quality**: Automated linting and formatting with ruff
- **üìä Coverage**: Code coverage reporting
- **üîÑ CI/CD**: Automated testing and deployment

## üõ†Ô∏è Development

### Quick Setup

```bash
# Complete development setup
make dev-setup

# Or manually:
uv sync --dev
make setup-hooks
```

### Available Commands

```bash
# Development
make dev-install     # Install dev dependencies
make setup-hooks     # Setup git hooks

# Quality checks
make test           # Run tests
make lint           # Run linting
make format         # Format code
make type-check     # Run type checking
make quality-check  # Run all quality checks

# Version management
make version-current  # Show current version
make version-patch   # Bump patch version
make version-minor   # Bump minor version
make version-major   # Bump major version

# Publishing
make publish-dry-run # Test build process
make publish-test    # Publish to Test PyPI
make publish         # Full publish to PyPI
```

### Enhanced Build System

This package includes a sophisticated build and deployment system:

```bash
# Automatic version detection and publishing
./scripts/build_publish_enhanced.sh

# Manual version type specification
./scripts/build_publish_enhanced.sh -t patch   # Bug fixes
./scripts/build_publish_enhanced.sh -t minor   # New features
./scripts/build_publish_enhanced.sh -t major   # Breaking changes

# Development options
./scripts/build_publish_enhanced.sh -d         # Dry run
./scripts/build_publish_enhanced.sh -s         # Skip tests
./scripts/build_publish_enhanced.sh -f         # Force publish
```

For detailed information, see [BUILD_GUIDE.md](BUILD_GUIDE.md).

## üìö Module Documentation

### Unified IAM Client (`mysingle.iam`)

```python
from mysingle import UnifiedIAMClient

# Initialize unified IAM client
iam_client = UnifiedIAMClient()

# Authentication
user_info = await iam_client.verify_token(token)
auth_response = await iam_client.login(username, password)

# Authorization
has_permission = await iam_client.check_permission(
    user_id="user123",
    resource="ledger:accounts",
    action="read",
    tenant_id="tenant456"
)

# User management
users = await iam_client.get_users(tenant_id="tenant456")
user = await iam_client.get_user("user123")
```

### RBAC Decorators (`mysingle.rbac`)

```python
from mysingle.rbac import require_permission, audit_log, rate_limit

# Permission-based access control
@require_permission("ledger:journals", "create")
async def create_journal(request: Request):
    # Automatically checks user permissions
    pass

# Audit logging for compliance
@audit_log("update", "account")
async def update_account(account_id: str):
    # Logs all access for audit trail
    pass

# Rate limiting protection
@rate_limit(requests_per_minute=100)
async def api_endpoint():
    # Protects against abuse
    pass
```

### Base Models (`mysingle.base`)

```python
from mysingle import BaseDoc, BaseResponseSchema

# MongoDB document with tenant isolation
class Account(BaseDoc):
    code: str
    name: str
    account_type: str

    class Settings:
        name = "accounts"
        indexes = [("code", 1), ("tenant_id", 1)]

# API response schema
class AccountResponse(BaseResponseSchema):
    code: str
    name: str
    account_type: str
    # tenant_id, created_at, updated_at automatically included
```

### Authentication Middleware (`mysingle.middleware`)

```python
from fastapi import FastAPI
from mysingle.middleware import AuthMiddleware

app = FastAPI()

# Add authentication middleware with tenant isolation
app.add_middleware(
    AuthMiddleware,
    public_paths=["/health", "/docs"],
    tenant_isolation=True
)
```

### Guardrails (`mysingle.guardrails`)

```python
from mysingle.guardrails import get_tenant_id, mask_pii, check_permission

# Tenant isolation
tenant_id = get_tenant_id(request)

# Privacy protection
safe_data = mask_pii(sensitive_data)

# Permission validation
is_authorized = check_permission(user_id, resource, action)
```

## üîß Configuration

### Environment Variables

```bash
# MySingle IAM Service
IAM_SERVICE_URL=http://localhost:8002
IAM_INTERNAL_URL=http://iam-service:8002  # Docker internal

# Database
MONGODB_URL=mongodb://localhost:27017
DATABASE_NAME=mysingle

# JWT Configuration
JWT_SECRET_KEY=your-secret-key-here
JWT_ALGORITHM=HS256
JWT_EXPIRATION_HOURS=24

# Multi-tenant Configuration
TENANT_ISOLATION_ENABLED=true
DEFAULT_TENANT_ID=default

# Security
SECURITY_AUDIT_ENABLED=true
RATE_LIMITING_ENABLED=true
```

### Configuration Class

```python
from mysingle.config import settings

# Access configuration values
print(settings.iam_service_url)
print(settings.mongodb_url)
print(settings.jwt_secret_key)
print(settings.tenant_isolation_enabled)
```

## üèóÔ∏è Architecture Integration

### MySingle Platform Integration

This package is designed to work seamlessly with the MySingle platform microservices:

- **IAM Service** (`localhost:8002`): Authentication and user management
- **RBAC Service** (`localhost:8010`): Centralized permission management
- **Tenant Service** (`localhost:8001`): Multi-tenant subscription management
- **Ledger Service** (`localhost:8006`): Financial/GL operations

### Multi-Tenant SaaS Architecture

```python
# Automatic tenant isolation in all operations
from mysingle import BaseDoc

class Invoice(BaseDoc):
    number: str
    amount: float
    # tenant_id automatically handled

    class Settings:
        name = "invoices"
        indexes = [("number", 1), ("tenant_id", 1)]

# FastAPI endpoint with automatic tenant isolation
@require_permission("finance:invoices", "create")
async def create_invoice(invoice_data: InvoiceCreate, request: Request):
    # tenant_id extracted automatically from request
    # permissions checked against tenant context
    pass
```

## üß™ Testing

```bash
# Run all tests
make test

# Run with coverage
uv run pytest --cov=src/mysingle --cov-report=html

# Run specific test file
uv run pytest tests/test_auth.py

# Run with verbose output
uv run pytest -v
```

## üöÄ Deployment

### GitHub Actions CI/CD

This package includes automated CI/CD with GitHub Actions:

- **Quality Checks**: Automated testing, linting, and type checking on PRs
- **Test PyPI**: Automatic deployment to Test PyPI from `develop` branch
- **Production PyPI**: Automatic deployment to PyPI when tags are pushed
- **GitHub Releases**: Automatic release creation with changelog

### Manual Deployment

```bash
# Test deployment
./scripts/build_publish_enhanced.sh -t patch

# Production deployment (creates git tag)
git tag v1.0.0
git push origin v1.0.0
```

## üîÑ Migration Guide

### From Legacy Components

If upgrading from previous MySingle components:

```python
# Before (legacy)
from mysingle.auth import AuthClient
from mysingle.rbac import RBACClient

auth_client = AuthClient(auth_url)
rbac_client = RBACClient(rbac_url)

# After (unified)
from mysingle import UnifiedIAMClient

iam_client = UnifiedIAMClient()  # Auto-configured
```

### Breaking Changes (v2.0.0)

- **Removed**: Separate `AuthClient` and `RBACClient` classes
- **Replaced**: `SecurityUtils` ‚Üí `UnifiedIAMClient`
- **Updated**: All JWT handling moved to IAM service integration
- **Enhanced**: Multi-tenant support is now mandatory

## üìä Project Structure

```
mysingle/
‚îú‚îÄ‚îÄ src/mysingle/           # Main package
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py        # Main exports (BaseDoc, UnifiedIAMClient, etc.)
‚îÇ   ‚îú‚îÄ‚îÄ app_factory.py     # FastAPI application factory
‚îÇ   ‚îú‚îÄ‚îÄ config.py          # Configuration management
‚îÇ   ‚îú‚îÄ‚îÄ exceptions.py      # Custom exceptions
‚îÇ   ‚îú‚îÄ‚îÄ logging.py         # Logging utilities
‚îÇ   ‚îú‚îÄ‚îÄ auth/              # Authentication utilities
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ auth_utils.py  # Auth context management
‚îÇ   ‚îú‚îÄ‚îÄ base/              # Base classes and models
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ model.py       # BaseDoc for MongoDB
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ schema.py      # BaseResponseSchema for APIs
‚îÇ   ‚îú‚îÄ‚îÄ iam/               # Unified IAM client
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ client.py      # UnifiedIAMClient implementation
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ schemas.py     # IAM data schemas
‚îÇ   ‚îú‚îÄ‚îÄ rbac/              # RBAC decorators and utilities
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ decorators.py  # Permission decorators
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ __init__.py    # RBAC exports
‚îÇ   ‚îú‚îÄ‚îÄ middleware/        # FastAPI middleware
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ auth_middleware.py # Authentication middleware
‚îÇ   ‚îú‚îÄ‚îÄ guardrails/        # Security and privacy guardrails
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tenant_isolation.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ privacy.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ rate_limiting/
‚îÇ   ‚îî‚îÄ‚îÄ crud_factory.py    # CRUD operation factory
‚îú‚îÄ‚îÄ tests/                 # Comprehensive test suite
‚îÇ   ‚îú‚îÄ‚îÄ test_auth_middleware.py
‚îÇ   ‚îú‚îÄ‚îÄ test_guardrails.py
‚îÇ   ‚îú‚îÄ‚îÄ test_security.py
‚îÇ   ‚îî‚îÄ‚îÄ test_import.py
‚îú‚îÄ‚îÄ scripts/               # Build and development scripts
‚îî‚îÄ‚îÄ pyproject.toml         # Modern Python project configuration
```

## ü§ù Contributing

1. **Fork the repository**
2. **Create a feature branch**: `git checkout -b feature/amazing-feature`
3. **Make your changes and add tests**
4. **Run quality checks**: `make quality-check`
5. **Commit your changes**: `git commit -m 'feat: add amazing feature'`
6. **Push to the branch**: `git push origin feature/amazing-feature`
7. **Open a Pull Request**

### Commit Message Convention

We use conventional commits:

- `feat:` New features
- `fix:` Bug fixes
- `docs:` Documentation changes
- `style:` Code style changes
- `refactor:` Code refactoring
- `test:` Test-related changes
- `chore:` Maintenance tasks

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üÜò Support

- **Documentation**: [BUILD_GUIDE.md](BUILD_GUIDE.md)
- **Issues**: [GitHub Issues](https://github.com/your-org/mysingle/issues)
- **Discussions**: [GitHub Discussions](https://github.com/your-org/mysingle/discussions)

## üó∫Ô∏è Roadmap

### Completed (v2.0.0)
- [x] Unified IAM client integration
- [x] RBAC decorator system
- [x] Multi-tenant base models
- [x] Authentication middleware
- [x] Comprehensive test suite

### Upcoming (v2.1.0)
- [ ] Enhanced audit logging with structured events
- [ ] Advanced rate limiting with tenant-specific limits
- [ ] Performance monitoring and metrics
- [ ] Extended guardrails for data privacy compliance
- [ ] Plugin system for custom extensions

### Future (v3.0.0)
- [ ] GraphQL API integration
- [ ] Advanced caching strategies
- [ ] Real-time event streaming
- [ ] AI-powered security monitoring
- [ ] Comprehensive documentation site

---

**Made with ‚ù§Ô∏è by the MySingle team**

*MySingle: Enterprise SaaS platform built for scale, security, and multi-tenancy*
