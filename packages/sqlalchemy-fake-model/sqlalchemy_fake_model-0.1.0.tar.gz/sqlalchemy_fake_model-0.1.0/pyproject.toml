[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sqlalchemy-fake-model"
version = "0.1.0"
description = "A library to generate complex fake database-entries based on SQLAlchemy models"
readme = "README.md"
keywords = [
    "sqlalchemy", "faker", "fake", "data", "model", "database", "testing", "generation"
]
requires-python = ">=3.7"
license = {text = "MIT"}
authors = [
    {name = "Leander Cain Slotosch", email = "slotosch.leander@outlook.de"}
]
dependencies = [
    "SQLAlchemy>=1.3",
    "Faker>=2.0.0"
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.7",
]

[project.optional-dependencies]
dev = [
    "build",
    "coverage",
    "coveralls",
    "django",
    "flask",
    "flask-sqlalchemy",
    "pytest",
    "pytest-mock",
    "ruff",
    "tornado",
    "twine"
]

[project.urls]
Homepage = "https://github.com/LeanderCS/sqlalchemy-fake-model"
Documentation = "https://github.com/LeanderCS/sqlalchemy-fake-model"
Source = "https://github.com/LeanderCS/sqlalchemy-fake-model"
Issues = "https://github.com/LeanderCS/sqlalchemy-fake-model/issues"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["sqlalchemy_fake_model*"]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning"
]
addopts = "--tb=short -q"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py37, py38, py39, py310, py311, py312, py313

[testenv]
deps =
    -renv_configs/requirements-{envname}.txt
install_command = {envbindir}/python -I -m pip install {opts} {packages}
commands =
    pytest
"""

[tool.coverage.run]
source = ["sqlalchemy_fake_model"]

[tool.coverage.report]
omit = ["__init__.py", "*/tests/*"]

[tool.ruff]
line-length = 79
target-version = "py37"
fix = true
exclude = [
    "tests",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "UP",     # pyupgrade
    "N",      # pep8-naming
    "YTT",    # flake8-2020
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "EM",     # flake8-errmsg
    "PIE",    # flake8-pie
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "PTH",    # flake8-use-pathlib
    "RUF",    # Ruff-specific rules
]
fixable = ["ALL"]
unfixable = []
ignore = [
    "B904", # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use a f-string literal, assign to variable first
    "UP045",  # X | None syntax (Python 3.10+)
    "UP006",  # Use `list` instead of `List` (Python 3.9+)
    "UP007",  # Use `X | Y` for unions (Python 3.10+)
    "UP035",  # Import from collections.abc (Python 3.9+)
    "N999",   # Invalid module name (module naming convention)
]

[tool.ruff.lint.isort]
force-single-line = false
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"
