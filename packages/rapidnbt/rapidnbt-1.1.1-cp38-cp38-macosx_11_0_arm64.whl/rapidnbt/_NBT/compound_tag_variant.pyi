# Copyright Â© 2025 GlacieTeam.All rights reserved.
#
# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy
# of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# SPDX-License-Identifier: MPL-2.0

from typing import overload, List, Any, Dict
from rapidnbt._NBT.snbt_format import SnbtFormat
from rapidnbt._NBT.tag_type import TagType
from rapidnbt._NBT.tag import Tag
from rapidnbt._NBT.byte_tag import ByteTag
from rapidnbt._NBT.short_tag import ShortTag
from rapidnbt._NBT.int_tag import IntTag
from rapidnbt._NBT.int64_tag import Int64Tag
from rapidnbt._NBT.float_tag import FloatTag
from rapidnbt._NBT.double_tag import DoubleTag
from rapidnbt._NBT.byte_array_tag import ByteArrayTag
from rapidnbt._NBT.string_tag import StringTag
from rapidnbt._NBT.list_tag import ListTag
from rapidnbt._NBT.compound_tag import CompoundTag
from rapidnbt._NBT.int_array_tag import IntArrayTag
from rapidnbt._NBT.long_array_tag import LongArrayTag

class CompoundTagVariant:
    def __eq__(self, other: CompoundTagVariant) -> bool: ...
    def __float__(self) -> float: ...
    @overload
    def __getitem__(self, index: int) -> Tag: ...
    @overload
    def __getitem__(self, index: str) -> CompoundTagVariant: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, value: Any) -> None: ...
    def __int__(self) -> int: ...
    def __iter__(self) -> List[CompoundTagVariant]: ...
    def __repr__(self) -> str:
        """Official string representation"""

    @overload
    def __setitem__(self, index: str, value: Any) -> None: ...
    @overload
    def __setitem__(self, index: int, value: Any) -> None: ...
    def __str__(self) -> str:
        """String representation (SNBT minimized format)"""

    def append(self, value: Any) -> None:
        """Append a Tag element if self is ListTag"""

    def assign(self, value: Any) -> None:
        """Assign value"""

    def as_byte_tag(self) -> ByteTag: ...
    def as_byte_array_tag(self) -> ByteArrayTag: ...
    def as_compound_tag(self) -> CompoundTag: ...
    def as_double_tag(self) -> DoubleTag: ...
    def as_float_tag(self) -> FloatTag: ...
    def as_int_tag(self) -> IntTag: ...
    def as_int64_tag(self) -> Int64Tag: ...
    def as_int_array_tag(self) -> IntArrayTag: ...
    def as_list_tag(self) -> ListTag: ...
    def as_long_array_tag(self) -> LongArrayTag: ...
    def as_short_tag(self) -> ShortTag: ...
    def as_string_tag(self) -> StringTag: ...
    def get_byte(self) -> int: ...
    def get_byte_array(self) -> bytes: ...
    def get_compound(self) -> Dict[str, CompoundTagVariant]: ...
    def get_double(self) -> float: ...
    def get_float(self) -> float: ...
    def get_int(self) -> int: ...
    def get_int64(self) -> int: ...
    def get_int_array(self) -> List[int]: ...
    def get_list(self) -> List[CompoundTagVariant]: ...
    def get_long_array(self) -> List[int]: ...
    def get_short(self) -> int: ...
    def get_string(self) -> str: ...
    def contains(self, index: str) -> bool: ...
    def copy(self) -> Tag: ...
    def get_type(self) -> TagType: ...
    def hold(self, index: TagType) -> bool: ...
    def is_array(self) -> bool: ...
    def is_binary(self) -> bool: ...
    def is_boolean(self) -> bool: ...
    def is_null(self) -> bool: ...
    def is_number(self) -> bool: ...
    def is_number_float(self) -> bool: ...
    def is_number_integer(self) -> bool: ...
    def is_object(self) -> bool: ...
    def is_primitive(self) -> bool: ...
    def is_string(self) -> bool: ...
    def is_structured(self) -> bool: ...
    def items(self) -> list: ...
    def merge(self, other: CompoundTagVariant, merge_list: bool = False) -> None: ...
    @overload
    def pop(self, index: str) -> bool: ...
    @overload
    def pop(self, index: int) -> bool: ...
    def rename(self, index: str, new_name: str) -> bool: ...
    def size(self) -> int: ...
    def to_json(self, indent: int = 4) -> str: ...
    def to_snbt(
        self, snbt_format: SnbtFormat = SnbtFormat.Default, indent: int = 4
    ) -> str: ...
