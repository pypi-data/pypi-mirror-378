[build-system]
requires = [ "hatchling>=1.8.0" ]
build-backend = "hatchling.build"

[project]
name = "dagtool"
description = "a friendly airflow dag build tool"
readme = "README.md"
classifiers = [
    "Topic :: Utilities",
    "Natural Language :: English",
    "Development Status :: 4 - Beta",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.10"
dependencies = [
    "apache-airflow>=2.7.1",
    "pydantic>=2.9.2",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "clishelf>=0.2.22",
    "pre-commit>=4.0.0",
    "pytest>=8.4.0",
    "coverage>=7.10.0",
    "dagtool[base]",
]
base = [
    "pendulum<3.0.0",
    "pydantic==2.9.2",
    "apache-airflow[google]==2.7.1",
]

[project.scripts]
dagtool = "dagtool.__main__:cli"

[tool.hatch.version]
scheme = "standard"
source = "code"
path = "dagtool/__about__.py"

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/.pre-commit-config.yaml",
    "/docs",
    "/tests",
]

[tool.hatch.build.targets.wheel]
packages = [ "dagtool" ]

[tool.shelf.version]
version = "./dagtool/__about__.py"
changelog = "./docs/changelog.md"
commit_subject_format = "{emoji} {subject}"
commit_msg_format = "- {subject}"

[tool.shelf.git]
commit_prefix_force_fix = true

[tool.coverage.run]
branch = true
relative_files = true
concurrency = [ "thread", "multiprocessing" ]
source = [ "dagtool" ]
omit = [
    "dagtool/__about__.py",
    "dagtool/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "pragma: no cov",
]

[tool.pytest.ini_options]
pythonpath = [ "dagtool" ]
console_output_style = "count"
addopts = [
    "--strict-config",
    "--strict-markers",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(name)s|%(asctime)s [%(levelname)-7s] %(message)-120s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y%m%d %H:%M:%S"

[project.urls]
Homepage = "https://github.com/ddeutils/dagtool/"
"Source Code" = "https://github.com/ddeutils/dagtool/"

[tool.black]
line-length = 80
target-version = [ 'py310' ]
exclude = """
(
    /(
        \\.git
        | \\.eggs
        | \\.__pycache__
        | \\.idea
        | \\.ruff_cache
        | \\.mypy_cache
        | \\.pytest_cache
        | \\.venv
        | build
        | dist
        | venv
    )/
)
"""

[tool.ruff]
line-length = 80
exclude = [
    "__pypackages__",
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".rust",
    ".venv",
    "build",
    "dist",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "AIR",  # airflow
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "AIR3",  # airflow version 3 suggest update
    "AIR002",  # `DAG` or `@dag` should have an explicit `schedule` argument
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",
    "F403",
]
