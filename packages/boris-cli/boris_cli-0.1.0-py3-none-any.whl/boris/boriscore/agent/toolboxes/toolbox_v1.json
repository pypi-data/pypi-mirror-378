{
  "retrieve_node": {
    "type": "function",
    "function": {
      "name": "retrieve_node",
      "description": "Return every stored field of a project node (file or folder) so the caller can inspect its metadata and position before deciding to modify or relocate it.",
      "strict": true,
      "parameters": {
        "type": "object",
        "properties": {
          "node_id": {
            "type": "string",
            "description": "Exact identifier (code or UUID) of the node to fetch."
          }
        },
        "required": ["node_id"],
        "additionalProperties": false
      }
    }
  },

  "create_node": {
    "type": "function",
    "function": {
      "name": "create_node",
      "description": "Create a new folder or file in the project tree. If the tree is empty this call can also create the root (use code \"ROOT\"). Placement among siblings is controlled by *position*; omitting it appends to the end of the parent’s children list. Every *code* must be unique. If you create an empty file, mention that in the description. You CAN'T use as parent_id a file, only a folder.",
      "strict": true,
      "parameters": {
        "type": "object",
        "properties": {
          "node_id": {
            "type": ["string", "null"],
            "description": "Unique identifier for the node. Must not duplicate any existing codes."
          },
          "parent_id": {
            "type": ["string", "null"],
            "description": "Identifier of the parent folder. Use \"ROOT\" to attach to (or create) the root."
          },
          "name": {
            "type": ["string", "null"],
            "description": "File or folder name as it will appear on disk (e.g. \"main.py\", \"utils\")."
          },
          "is_file": {
            "type": ["boolean", "null"],
            "description": "True = file, False = folder."
          },
          "description": {
            "type": ["string", "null"],
            "description": "Short human-readable description of the node’s purpose. If node has empty 'code' specify that into description."
          },
          "scope": {
            "type": ["string", "null"],
            "description": "Functional area (e.g. \"API layer\", \"utilities\")."
          },
          "language": {
            "type": ["string", "null"],
            "description": "Programming language or file type (e.g. \"python\", \"typescript\"). Leave null for folders or non-code assets."
          },
          "commit_message": {
            "type": ["string", "null"],
            "description": "Suggested commit message for VCS operations involving this node."
          },
          "code": {
            "type": ["string", "null"],
            "description": "When is_file is true, the actual code of the file to be executed in the programming language specified."
          }
        },
        "required": [
          "name",
          "is_file",
          "node_id",
          "parent_id",
          "description",
          "scope",
          "language",
          "commit_message",
          "code"
        ],
        "additionalProperties": false
      }
    }
  },

  "update_node": {
    "type": "function",
    "function": {
      "name": "update_node",
      "description": "Update metadata (name, description, scope, language, commit message) and/or move a node to a new parent/position. Moving the root is not allowed and cycles are prevented automatically.",
      "strict": true,
      "parameters": {
        "type": "object",
        "properties": {
          "node_id": {
            "type": ["string", "null"],
            "description": "Identifier of the node to modify."
          },
          "name": {
            "type": ["string", "null"],
            "description": "New file or folder name (omit to keep the same)."
          },
          "description": {
            "type": ["string", "null"],
            "description": "Updated description (omit to keep the same).  If node has empty 'code' specify that into description."
          },
          "scope": {
            "type": ["string", "null"],
            "description": "Updated functional scope (omit to keep the same)."
          },
          "language": {
            "type": ["string", "null"],
            "description": "Updated programming language (omit to keep the same)."
          },
          "commit_message": {
            "type": ["string", "null"],
            "description": "Updated commit message. Always update commit message."
          },
          "new_parent_id": {
            "type": ["string", "null"],
            "description": "Identifier of the new parent folder (omit to keep the same parent)."
          },
          "updated_code": {
            "type": ["string", "null"],
            "description": "The updated code of the file to be executed in the programming language specified."
          },
          "new_id": {
            "type": ["string", "null"],
            "description": "Updated id. Omit to keep the same id."
          }
        },
        "required": [
          "node_id",
          "name",
          "description",
          "scope",
          "language",
          "commit_message",
          "new_parent_id",
          "updated_code",
          "new_id"
        ],
        "additionalProperties": false
      }
    }
  },

  "delete_node": {
    "type": "function",
    "function": {
      "name": "delete_node",
      "description": "Delete a node. If *cascade* is true, all descendants are removed; otherwise *promote_children* must be true to pull children up one level.",
      "strict": true,
      "parameters": {
        "type": "object",
        "properties": {
          "node_id": {
            "type": ["string", "null"],
            "description": "Identifier of the node to delete."
          },
          "cascade": {
            "type": ["boolean", "null"],
            "description": "If true, delete this node and its entire subtree."
          },
          "promote_children": {
            "type": ["boolean", "null"],
            "description": "If *cascade* is false and this is true, children are re-attached to the deleted node’s parent."
          }
        },
        "required": ["node_id", "cascade", "promote_children"],
        "additionalProperties": false
      }
    }
  },
  "run_bash_command": {
    "type": "function",
    "function": {
      "name": "run_bash_command",
      "description": "Execute a shell command inside the configured base path and return stdout, stderr, exit-code and elapsed-time.",
      "strict": true,
      "parameters": {
        "type": "object",
        "properties": {
          "command": {
            "type": ["string", "array", "null"],
            "description": "The command to run. Supply either a single shell-style string (parsed with shlex) or an argv list; set to null to omit."
          },
          "check": {
            "type": ["boolean", "null"],
            "description": "If true, the executor will raise on non-zero exit status (default is false)."
          },
          "env": {
            "type": ["object", "null"],
            "description": "Extra environment variables to merge onto the current process environment (key-value string pairs)."
          },
          "capture_output": {
            "type": ["boolean", "null"],
            "description": "If false, stdout/stderr are streamed live; if true (default) they are captured and returned."
          },
          "text": {
            "type": ["boolean", "null"],
            "description": "If true (default) stdout/stderr are decoded to UTF-8 text; if false they are returned as raw bytes."
          },
          "timeout": {
            "type": ["number", "null"],
            "description": "Maximum seconds to allow the command to run before it is terminated (omit or null for no limit)."
          }
        },
        "required": [
          "command",
          "check",
          "env",
          "capture_output",
          "text",
          "timeout"
        ],
        "additionalProperties": false
      }
    }
  },

  "initialize_react_project": {
    "type": "function",
    "function": {
      "name": "initialize_react_project",
      "description": "Helper tool for initializing a react javascript-based project structure: generates a ready-to-run React project structure (src, public, package.json, entry files, stylesheets, etc.) and insert every folder & file as nodes. To be used at the start of the development (empty project root) when required to create a react-based frontend.",
      "strict": true,
      "parameters": {
        "type": "object",
        "properties": {
          "app_name": {
            "type": ["string", "null"],
            "description": "Project / application name. Used for the root folder, package.json name, and <title> in index.html."
          }
        },
        "required": ["app_name"],
        "additionalProperties": false
      }
    }
  }
}
