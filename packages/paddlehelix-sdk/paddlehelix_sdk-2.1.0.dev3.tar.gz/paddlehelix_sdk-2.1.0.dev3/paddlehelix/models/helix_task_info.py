# coding: utf-8

"""
    paddlehelix_dev

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from paddlehelix.configuration import Configuration


class HelixTaskInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'int',
        'run_time': 'int',
        'result': 'str'
    }

    attribute_map = {
        'status': 'status',
        'run_time': 'run_time',
        'result': 'result'
    }

    def __init__(self, status=None, run_time=None, result=None, local_vars_configuration=None):  # noqa: E501
        """HelixTaskInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._run_time = None
        self._result = None
        self.discriminator = None

        self.status = status
        self.run_time = run_time
        self.result = result

    @property
    def status(self):
        """Gets the status of this HelixTaskInfo.  # noqa: E501

        1 means success, 2 means running, -1 means failed, -2 means canceled  # noqa: E501

        :return: The status of this HelixTaskInfo.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HelixTaskInfo.

        1 means success, 2 means running, -1 means failed, -2 means canceled  # noqa: E501

        :param status: The status of this HelixTaskInfo.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = [1, 2, -1, -2]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def run_time(self):
        """Gets the run_time of this HelixTaskInfo.  # noqa: E501

        task running time in seconds  # noqa: E501

        :return: The run_time of this HelixTaskInfo.  # noqa: E501
        :rtype: int
        """
        return self._run_time

    @run_time.setter
    def run_time(self, run_time):
        """Sets the run_time of this HelixTaskInfo.

        task running time in seconds  # noqa: E501

        :param run_time: The run_time of this HelixTaskInfo.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and run_time is None:  # noqa: E501
            raise ValueError("Invalid value for `run_time`, must not be `None`")  # noqa: E501

        self._run_time = run_time

    @property
    def result(self):
        """Gets the result of this HelixTaskInfo.  # noqa: E501


        :return: The result of this HelixTaskInfo.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this HelixTaskInfo.


        :param result: The result of this HelixTaskInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and result is None:  # noqa: E501
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HelixTaskInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HelixTaskInfo):
            return True

        return self.to_dict() != other.to_dict()
