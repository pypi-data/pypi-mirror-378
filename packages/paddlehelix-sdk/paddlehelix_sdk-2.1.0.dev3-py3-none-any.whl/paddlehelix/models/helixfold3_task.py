# coding: utf-8

"""
    paddlehelix_dev

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from paddlehelix.configuration import Configuration


class Helixfold3Task(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'job_name': 'str',
        'name': 'str',
        'recycle': 'int',
        'random_seed': 'int',
        'entities': 'list[Helixfold3Entity]'
    }

    attribute_map = {
        'job_name': 'job_name',
        'name': 'name',
        'recycle': 'recycle',
        'random_seed': 'random_seed',
        'entities': 'entities'
    }

    def __init__(self, job_name=None, name=None, recycle=None, random_seed=None, entities=None, local_vars_configuration=None):  # noqa: E501
        """Helixfold3Task - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._job_name = None
        self._name = None
        self._recycle = None
        self._random_seed = None
        self._entities = None
        self.discriminator = None

        if job_name is not None:
            self.job_name = job_name
        if name is not None:
            self.name = name
        if recycle is not None:
            self.recycle = recycle
        if random_seed is not None:
            self.random_seed = random_seed
        self.entities = entities

    @property
    def job_name(self):
        """Gets the job_name of this Helixfold3Task.  # noqa: E501


        :return: The job_name of this Helixfold3Task.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this Helixfold3Task.


        :param job_name: The job_name of this Helixfold3Task.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def name(self):
        """Gets the name of this Helixfold3Task.  # noqa: E501


        :return: The name of this Helixfold3Task.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Helixfold3Task.


        :param name: The name of this Helixfold3Task.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def recycle(self):
        """Gets the recycle of this Helixfold3Task.  # noqa: E501


        :return: The recycle of this Helixfold3Task.  # noqa: E501
        :rtype: int
        """
        return self._recycle

    @recycle.setter
    def recycle(self, recycle):
        """Sets the recycle of this Helixfold3Task.


        :param recycle: The recycle of this Helixfold3Task.  # noqa: E501
        :type: int
        """

        self._recycle = recycle

    @property
    def random_seed(self):
        """Gets the random_seed of this Helixfold3Task.  # noqa: E501


        :return: The random_seed of this Helixfold3Task.  # noqa: E501
        :rtype: int
        """
        return self._random_seed

    @random_seed.setter
    def random_seed(self, random_seed):
        """Sets the random_seed of this Helixfold3Task.


        :param random_seed: The random_seed of this Helixfold3Task.  # noqa: E501
        :type: int
        """

        self._random_seed = random_seed

    @property
    def entities(self):
        """Gets the entities of this Helixfold3Task.  # noqa: E501


        :return: The entities of this Helixfold3Task.  # noqa: E501
        :rtype: list[Helixfold3Entity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this Helixfold3Task.


        :param entities: The entities of this Helixfold3Task.  # noqa: E501
        :type: list[Helixfold3Entity]
        """
        if self.local_vars_configuration.client_side_validation and entities is None:  # noqa: E501
            raise ValueError("Invalid value for `entities`, must not be `None`")  # noqa: E501

        self._entities = entities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Helixfold3Task):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Helixfold3Task):
            return True

        return self.to_dict() != other.to_dict()
