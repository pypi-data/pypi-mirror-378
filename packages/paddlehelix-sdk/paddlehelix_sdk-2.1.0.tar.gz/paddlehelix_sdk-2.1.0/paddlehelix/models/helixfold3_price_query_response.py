# coding: utf-8

"""
    paddlehelix_dev

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from paddlehelix.configuration import Configuration


class Helixfold3PriceQueryResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'int',
        'log_id': 'str',
        'msg': 'str',
        'data': 'TaskPriceInfos'
    }

    attribute_map = {
        'code': 'code',
        'log_id': 'logId',
        'msg': 'msg',
        'data': 'data'
    }

    def __init__(self, code=None, log_id=None, msg=None, data=None, local_vars_configuration=None):  # noqa: E501
        """Helixfold3PriceQueryResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._code = None
        self._log_id = None
        self._msg = None
        self._data = None
        self.discriminator = None

        if code is not None:
            self.code = code
        self.log_id = log_id
        if msg is not None:
            self.msg = msg
        if data is not None:
            self.data = data

    @property
    def code(self):
        """Gets the code of this Helixfold3PriceQueryResponse.  # noqa: E501

        0 means success, 2001 means invalid input, 6001 means internal error  # noqa: E501

        :return: The code of this Helixfold3PriceQueryResponse.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Helixfold3PriceQueryResponse.

        0 means success, 2001 means invalid input, 6001 means internal error  # noqa: E501

        :param code: The code of this Helixfold3PriceQueryResponse.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 2001, 6001]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and code not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"  # noqa: E501
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def log_id(self):
        """Gets the log_id of this Helixfold3PriceQueryResponse.  # noqa: E501


        :return: The log_id of this Helixfold3PriceQueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._log_id

    @log_id.setter
    def log_id(self, log_id):
        """Sets the log_id of this Helixfold3PriceQueryResponse.


        :param log_id: The log_id of this Helixfold3PriceQueryResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and log_id is None:  # noqa: E501
            raise ValueError("Invalid value for `log_id`, must not be `None`")  # noqa: E501

        self._log_id = log_id

    @property
    def msg(self):
        """Gets the msg of this Helixfold3PriceQueryResponse.  # noqa: E501


        :return: The msg of this Helixfold3PriceQueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this Helixfold3PriceQueryResponse.


        :param msg: The msg of this Helixfold3PriceQueryResponse.  # noqa: E501
        :type: str
        """

        self._msg = msg

    @property
    def data(self):
        """Gets the data of this Helixfold3PriceQueryResponse.  # noqa: E501


        :return: The data of this Helixfold3PriceQueryResponse.  # noqa: E501
        :rtype: TaskPriceInfos
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Helixfold3PriceQueryResponse.


        :param data: The data of this Helixfold3PriceQueryResponse.  # noqa: E501
        :type: TaskPriceInfos
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Helixfold3PriceQueryResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Helixfold3PriceQueryResponse):
            return True

        return self.to_dict() != other.to_dict()
