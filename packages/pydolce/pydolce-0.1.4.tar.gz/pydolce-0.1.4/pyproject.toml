[project]
name = "pydolce"
version = "0.1.4"
description = "The sweet way to catch outdated docstrings"
readme = "README.md"
requires-python = ">= 3.10"
authors = [{ name = "Jorge Morgado Vega", email = "jorge.morgadov@gmail.com" }]
license = { text = "MIT" }

dependencies = ["rich", "requests", "typer", "toml", "docstring-parser"]

[dependency-groups]
dev = [
    "bumpver",
    "mypy",
    "pytest",
    "pytest-cov",
    "pytest-dotenv",
    "pytest-mock",
    "ruff",
]

docs = ["mkdocs", "mkdocs-material", "pygments"]

build = ["build"]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = { "" = "src" }

[project.scripts]
dolce = "pydolce.main:main"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    ".env",
]
line-length = 88
indent-width = 4
target-version = "py313"

[tool.ruff.lint]
select = [
    "A",      # flake8-builtins: Check variables shadowing
    "B",      # flake8-bugbear: Finds likely bugs and design problems
    "C",      # McCabe: Complexity checker to ensure maintainable code
    "DJ",     # flake8-django: Checks on Django code
    "E4",     # Pycodestyle: Line length, indentation, etc.
    "E7",     # Pycodestyle: Miscellaneous checks
    "E9",     # Pycodestyle: Syntax errors
    "F",      # Pyflakes: Unused imports, undefined variables, etc.
    "FIX",    # Avoid lines containing TODO tags
    "G",      # flake8-logging-format: Ensure logging messages follow best practices.
    "I",      # Isort: Import sorting
    "LOG",    # flake8-logging: Use the logging module correctly
    "N",      # pep8-naming: Enforce naming conventions
    "PGH004", # Enforce specify the rule to avoid on noqa tags
    "PTH",    # flake8-use-pathlib: Enforces pathlib usage
    "RUF",    # Ruff-specific rules: Mostly for handling noqa tags and general stuff
    "S",      # flake8-bandit: Identifies common security issues in code
    "T20",    # flake8-print: Avoids print in the code
]
ignore = [
    "S101", # Use of assert function
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
quote-style = "double"                 # Use double quotes for strings.
indent-style = "space"                 # Indent with spaces (like Black).
skip-magic-trailing-comma = false      # Respect magic trailing commas.
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.mypy]
python_version = "3.13"
exclude = [
    "docs",
    "/tests\\.py$|/test_.*\\.py$|.*_test\\.py$|/tests/",
    "manage.py",
    "^.venv",
    "/conftest\\.py$",
]
enable_error_code = ["ignore-without-code"]
disable_error_code = []
check_untyped_defs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "6.0"
# addopts = "-ra -q --cov=src --cov-report=term-missing --cov-fail-under=80"
python_files = "tests.py test_*.py *_test.py"
pythonpath = "./src"
env_override_existing_values = 1
env_files = [".env.test"]

[tool.bumpver]
current_version = "0.1.4"
version_pattern = "MAJOR.MINOR.PATCH[-TAGNUM]"

[tool.bumpver.file_patterns]
"pyproject.toml" = ['^version = "{version}"', '^current_version = "{version}"']
"src/pydolce/__init__.py" = ['^__version__ = "{version}"$']

# [tool.dolce]
# url = "http://localhost:11434"
# model = "qwen3:8b"
# provider = "ollama"
