# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SyncSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'polling_interval_in_minutes': 'int',
        'sync_always': 'bool'
    }

    attribute_map = {
        'polling_interval_in_minutes': 'pollingIntervalInMinutes',
        'sync_always': 'syncAlways'
    }

    def __init__(self, polling_interval_in_minutes=None, sync_always=None):  # noqa: E501
        """SyncSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._polling_interval_in_minutes = None
        self._sync_always = None
        self.discriminator = None
        if polling_interval_in_minutes is not None:
            self.polling_interval_in_minutes = polling_interval_in_minutes
        if sync_always is not None:
            self.sync_always = sync_always

    @property
    def polling_interval_in_minutes(self):
        """Gets the polling_interval_in_minutes of this SyncSettingsDto.  # noqa: E501

        Interval in minutes between sync executions.  # noqa: E501

        :return: The polling_interval_in_minutes of this SyncSettingsDto.  # noqa: E501
        :rtype: int
        """
        return self._polling_interval_in_minutes

    @polling_interval_in_minutes.setter
    def polling_interval_in_minutes(self, polling_interval_in_minutes):
        """Sets the polling_interval_in_minutes of this SyncSettingsDto.

        Interval in minutes between sync executions.  # noqa: E501

        :param polling_interval_in_minutes: The polling_interval_in_minutes of this SyncSettingsDto.  # noqa: E501
        :type: int
        """

        self._polling_interval_in_minutes = polling_interval_in_minutes

    @property
    def sync_always(self):
        """Gets the sync_always of this SyncSettingsDto.  # noqa: E501

        Indicates if metadata is going to be sync every time or not.  # noqa: E501

        :return: The sync_always of this SyncSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._sync_always

    @sync_always.setter
    def sync_always(self, sync_always):
        """Sets the sync_always of this SyncSettingsDto.

        Indicates if metadata is going to be sync every time or not.  # noqa: E501

        :param sync_always: The sync_always of this SyncSettingsDto.  # noqa: E501
        :type: bool
        """

        self._sync_always = sync_always

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyncSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
