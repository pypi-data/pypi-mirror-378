# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PipelineFullDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'str',
        'name': 'str',
        'id_template': 'int',
        'id_data_factory': 'int',
        'is_removed': 'bool',
        'id_pipeline_sync_behaviour': 'PipelineSyncBehaviours',
        'parameters': 'str',
        'execution_parameters': 'str',
        'id': 'int',
        'valid_from': 'datetime',
        'valid_until': 'datetime',
        'last_updated': 'datetime',
        'last_deployed': 'datetime',
        'template_name': 'str',
        'display_name': 'str',
        'template_item_id': 'str'
    }

    attribute_map = {
        'item_id': 'itemId',
        'name': 'name',
        'id_template': 'idTemplate',
        'id_data_factory': 'idDataFactory',
        'is_removed': 'isRemoved',
        'id_pipeline_sync_behaviour': 'idPipelineSyncBehaviour',
        'parameters': 'parameters',
        'execution_parameters': 'executionParameters',
        'id': 'id',
        'valid_from': 'validFrom',
        'valid_until': 'validUntil',
        'last_updated': 'lastUpdated',
        'last_deployed': 'lastDeployed',
        'template_name': 'templateName',
        'display_name': 'displayName',
        'template_item_id': 'templateItemId'
    }

    def __init__(self, item_id=None, name=None, id_template=None, id_data_factory=None, is_removed=None, id_pipeline_sync_behaviour=None, parameters=None, execution_parameters=None, id=None, valid_from=None, valid_until=None, last_updated=None, last_deployed=None, template_name=None, display_name=None, template_item_id=None):  # noqa: E501
        """PipelineFullDto - a model defined in Swagger"""  # noqa: E501
        self._item_id = None
        self._name = None
        self._id_template = None
        self._id_data_factory = None
        self._is_removed = None
        self._id_pipeline_sync_behaviour = None
        self._parameters = None
        self._execution_parameters = None
        self._id = None
        self._valid_from = None
        self._valid_until = None
        self._last_updated = None
        self._last_deployed = None
        self._template_name = None
        self._display_name = None
        self._template_item_id = None
        self.discriminator = None
        if item_id is not None:
            self.item_id = item_id
        self.name = name
        self.id_template = id_template
        if id_data_factory is not None:
            self.id_data_factory = id_data_factory
        if is_removed is not None:
            self.is_removed = is_removed
        if id_pipeline_sync_behaviour is not None:
            self.id_pipeline_sync_behaviour = id_pipeline_sync_behaviour
        if parameters is not None:
            self.parameters = parameters
        if execution_parameters is not None:
            self.execution_parameters = execution_parameters
        if id is not None:
            self.id = id
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_until is not None:
            self.valid_until = valid_until
        if last_updated is not None:
            self.last_updated = last_updated
        if last_deployed is not None:
            self.last_deployed = last_deployed
        if template_name is not None:
            self.template_name = template_name
        if display_name is not None:
            self.display_name = display_name
        if template_item_id is not None:
            self.template_item_id = template_item_id

    @property
    def item_id(self):
        """Gets the item_id of this PipelineFullDto.  # noqa: E501

        Unique guid  # noqa: E501

        :return: The item_id of this PipelineFullDto.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this PipelineFullDto.

        Unique guid  # noqa: E501

        :param item_id: The item_id of this PipelineFullDto.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def name(self):
        """Gets the name of this PipelineFullDto.  # noqa: E501

        Pipeline name  # noqa: E501

        :return: The name of this PipelineFullDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PipelineFullDto.

        Pipeline name  # noqa: E501

        :param name: The name of this PipelineFullDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def id_template(self):
        """Gets the id_template of this PipelineFullDto.  # noqa: E501

        Id of the pipeline template  # noqa: E501

        :return: The id_template of this PipelineFullDto.  # noqa: E501
        :rtype: int
        """
        return self._id_template

    @id_template.setter
    def id_template(self, id_template):
        """Sets the id_template of this PipelineFullDto.

        Id of the pipeline template  # noqa: E501

        :param id_template: The id_template of this PipelineFullDto.  # noqa: E501
        :type: int
        """
        if id_template is None:
            raise ValueError("Invalid value for `id_template`, must not be `None`")  # noqa: E501

        self._id_template = id_template

    @property
    def id_data_factory(self):
        """Gets the id_data_factory of this PipelineFullDto.  # noqa: E501

        Id of the ADF where the pipeline is deployed  # noqa: E501

        :return: The id_data_factory of this PipelineFullDto.  # noqa: E501
        :rtype: int
        """
        return self._id_data_factory

    @id_data_factory.setter
    def id_data_factory(self, id_data_factory):
        """Sets the id_data_factory of this PipelineFullDto.

        Id of the ADF where the pipeline is deployed  # noqa: E501

        :param id_data_factory: The id_data_factory of this PipelineFullDto.  # noqa: E501
        :type: int
        """

        self._id_data_factory = id_data_factory

    @property
    def is_removed(self):
        """Gets the is_removed of this PipelineFullDto.  # noqa: E501

        Indicates if the pipeline is removed  # noqa: E501

        :return: The is_removed of this PipelineFullDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_removed

    @is_removed.setter
    def is_removed(self, is_removed):
        """Sets the is_removed of this PipelineFullDto.

        Indicates if the pipeline is removed  # noqa: E501

        :param is_removed: The is_removed of this PipelineFullDto.  # noqa: E501
        :type: bool
        """

        self._is_removed = is_removed

    @property
    def id_pipeline_sync_behaviour(self):
        """Gets the id_pipeline_sync_behaviour of this PipelineFullDto.  # noqa: E501


        :return: The id_pipeline_sync_behaviour of this PipelineFullDto.  # noqa: E501
        :rtype: PipelineSyncBehaviours
        """
        return self._id_pipeline_sync_behaviour

    @id_pipeline_sync_behaviour.setter
    def id_pipeline_sync_behaviour(self, id_pipeline_sync_behaviour):
        """Sets the id_pipeline_sync_behaviour of this PipelineFullDto.


        :param id_pipeline_sync_behaviour: The id_pipeline_sync_behaviour of this PipelineFullDto.  # noqa: E501
        :type: PipelineSyncBehaviours
        """

        self._id_pipeline_sync_behaviour = id_pipeline_sync_behaviour

    @property
    def parameters(self):
        """Gets the parameters of this PipelineFullDto.  # noqa: E501

        Pipeline parameters (used when creating/updating the pipeline)  # noqa: E501

        :return: The parameters of this PipelineFullDto.  # noqa: E501
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this PipelineFullDto.

        Pipeline parameters (used when creating/updating the pipeline)  # noqa: E501

        :param parameters: The parameters of this PipelineFullDto.  # noqa: E501
        :type: str
        """

        self._parameters = parameters

    @property
    def execution_parameters(self):
        """Gets the execution_parameters of this PipelineFullDto.  # noqa: E501

        Pipeline execution parameters (used by the sync when executing the load pipeline)  # noqa: E501

        :return: The execution_parameters of this PipelineFullDto.  # noqa: E501
        :rtype: str
        """
        return self._execution_parameters

    @execution_parameters.setter
    def execution_parameters(self, execution_parameters):
        """Sets the execution_parameters of this PipelineFullDto.

        Pipeline execution parameters (used by the sync when executing the load pipeline)  # noqa: E501

        :param execution_parameters: The execution_parameters of this PipelineFullDto.  # noqa: E501
        :type: str
        """

        self._execution_parameters = execution_parameters

    @property
    def id(self):
        """Gets the id of this PipelineFullDto.  # noqa: E501

        Database Id of the pipeline  # noqa: E501

        :return: The id of this PipelineFullDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PipelineFullDto.

        Database Id of the pipeline  # noqa: E501

        :param id: The id of this PipelineFullDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def valid_from(self):
        """Gets the valid_from of this PipelineFullDto.  # noqa: E501

        Pipeline started being valid from this date  # noqa: E501

        :return: The valid_from of this PipelineFullDto.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this PipelineFullDto.

        Pipeline started being valid from this date  # noqa: E501

        :param valid_from: The valid_from of this PipelineFullDto.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_until(self):
        """Gets the valid_until of this PipelineFullDto.  # noqa: E501

        Pipeline is valid until this date  # noqa: E501

        :return: The valid_until of this PipelineFullDto.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this PipelineFullDto.

        Pipeline is valid until this date  # noqa: E501

        :param valid_until: The valid_until of this PipelineFullDto.  # noqa: E501
        :type: datetime
        """

        self._valid_until = valid_until

    @property
    def last_updated(self):
        """Gets the last_updated of this PipelineFullDto.  # noqa: E501

        Last updated date of the pipeline  # noqa: E501

        :return: The last_updated of this PipelineFullDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this PipelineFullDto.

        Last updated date of the pipeline  # noqa: E501

        :param last_updated: The last_updated of this PipelineFullDto.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def last_deployed(self):
        """Gets the last_deployed of this PipelineFullDto.  # noqa: E501

        Last deployment date of the pipeline  # noqa: E501

        :return: The last_deployed of this PipelineFullDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_deployed

    @last_deployed.setter
    def last_deployed(self, last_deployed):
        """Sets the last_deployed of this PipelineFullDto.

        Last deployment date of the pipeline  # noqa: E501

        :param last_deployed: The last_deployed of this PipelineFullDto.  # noqa: E501
        :type: datetime
        """

        self._last_deployed = last_deployed

    @property
    def template_name(self):
        """Gets the template_name of this PipelineFullDto.  # noqa: E501

        Related template name  # noqa: E501

        :return: The template_name of this PipelineFullDto.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this PipelineFullDto.

        Related template name  # noqa: E501

        :param template_name: The template_name of this PipelineFullDto.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def display_name(self):
        """Gets the display_name of this PipelineFullDto.  # noqa: E501

        Display name of the related template  # noqa: E501

        :return: The display_name of this PipelineFullDto.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PipelineFullDto.

        Display name of the related template  # noqa: E501

        :param display_name: The display_name of this PipelineFullDto.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def template_item_id(self):
        """Gets the template_item_id of this PipelineFullDto.  # noqa: E501

        Related template ItemId  # noqa: E501

        :return: The template_item_id of this PipelineFullDto.  # noqa: E501
        :rtype: str
        """
        return self._template_item_id

    @template_item_id.setter
    def template_item_id(self, template_item_id):
        """Sets the template_item_id of this PipelineFullDto.

        Related template ItemId  # noqa: E501

        :param template_item_id: The template_item_id of this PipelineFullDto.  # noqa: E501
        :type: str
        """

        self._template_item_id = template_item_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PipelineFullDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineFullDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
