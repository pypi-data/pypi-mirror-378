# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SuiteDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'item_id': 'str',
        'name': 'str',
        'database_name': 'str',
        'table_name': 'str',
        'result_directory': 'str'
    }

    attribute_map = {
        'id': 'id',
        'item_id': 'itemId',
        'name': 'name',
        'database_name': 'databaseName',
        'table_name': 'tableName',
        'result_directory': 'resultDirectory'
    }

    def __init__(self, id=None, item_id=None, name=None, database_name=None, table_name=None, result_directory=None):  # noqa: E501
        """SuiteDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._item_id = None
        self._name = None
        self._database_name = None
        self._table_name = None
        self._result_directory = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if item_id is not None:
            self.item_id = item_id
        if name is not None:
            self.name = name
        if database_name is not None:
            self.database_name = database_name
        if table_name is not None:
            self.table_name = table_name
        if result_directory is not None:
            self.result_directory = result_directory

    @property
    def id(self):
        """Gets the id of this SuiteDto.  # noqa: E501

        Primary key  # noqa: E501

        :return: The id of this SuiteDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SuiteDto.

        Primary key  # noqa: E501

        :param id: The id of this SuiteDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item_id(self):
        """Gets the item_id of this SuiteDto.  # noqa: E501

        Internal Id used for migrations/seed purpose.  # noqa: E501

        :return: The item_id of this SuiteDto.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this SuiteDto.

        Internal Id used for migrations/seed purpose.  # noqa: E501

        :param item_id: The item_id of this SuiteDto.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def name(self):
        """Gets the name of this SuiteDto.  # noqa: E501

        Name of the suite.  # noqa: E501

        :return: The name of this SuiteDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SuiteDto.

        Name of the suite.  # noqa: E501

        :param name: The name of this SuiteDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def database_name(self):
        """Gets the database_name of this SuiteDto.  # noqa: E501

        Database name of the suite.  # noqa: E501

        :return: The database_name of this SuiteDto.  # noqa: E501
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this SuiteDto.

        Database name of the suite.  # noqa: E501

        :param database_name: The database_name of this SuiteDto.  # noqa: E501
        :type: str
        """

        self._database_name = database_name

    @property
    def table_name(self):
        """Gets the table_name of this SuiteDto.  # noqa: E501

        Table name of the suite.  # noqa: E501

        :return: The table_name of this SuiteDto.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this SuiteDto.

        Table name of the suite.  # noqa: E501

        :param table_name: The table_name of this SuiteDto.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def result_directory(self):
        """Gets the result_directory of this SuiteDto.  # noqa: E501

        Result directory of the suite report.  # noqa: E501

        :return: The result_directory of this SuiteDto.  # noqa: E501
        :rtype: str
        """
        return self._result_directory

    @result_directory.setter
    def result_directory(self, result_directory):
        """Sets the result_directory of this SuiteDto.

        Result directory of the suite report.  # noqa: E501

        :param result_directory: The result_directory of this SuiteDto.  # noqa: E501
        :type: str
        """

        self._result_directory = result_directory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SuiteDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SuiteDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
