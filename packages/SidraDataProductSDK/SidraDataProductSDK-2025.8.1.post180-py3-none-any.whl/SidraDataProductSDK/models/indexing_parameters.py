# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IndexingParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_size': 'int',
        'max_failed_items': 'int',
        'max_failed_items_per_batch': 'int',
        'base64_encode_keys': 'bool',
        'configuration': 'dict(str, object)'
    }

    attribute_map = {
        'batch_size': 'batchSize',
        'max_failed_items': 'maxFailedItems',
        'max_failed_items_per_batch': 'maxFailedItemsPerBatch',
        'base64_encode_keys': 'base64EncodeKeys',
        'configuration': 'configuration'
    }

    def __init__(self, batch_size=None, max_failed_items=None, max_failed_items_per_batch=None, base64_encode_keys=None, configuration=None):  # noqa: E501
        """IndexingParameters - a model defined in Swagger"""  # noqa: E501
        self._batch_size = None
        self._max_failed_items = None
        self._max_failed_items_per_batch = None
        self._base64_encode_keys = None
        self._configuration = None
        self.discriminator = None
        if batch_size is not None:
            self.batch_size = batch_size
        if max_failed_items is not None:
            self.max_failed_items = max_failed_items
        if max_failed_items_per_batch is not None:
            self.max_failed_items_per_batch = max_failed_items_per_batch
        if base64_encode_keys is not None:
            self.base64_encode_keys = base64_encode_keys
        if configuration is not None:
            self.configuration = configuration

    @property
    def batch_size(self):
        """Gets the batch_size of this IndexingParameters.  # noqa: E501


        :return: The batch_size of this IndexingParameters.  # noqa: E501
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this IndexingParameters.


        :param batch_size: The batch_size of this IndexingParameters.  # noqa: E501
        :type: int
        """

        self._batch_size = batch_size

    @property
    def max_failed_items(self):
        """Gets the max_failed_items of this IndexingParameters.  # noqa: E501


        :return: The max_failed_items of this IndexingParameters.  # noqa: E501
        :rtype: int
        """
        return self._max_failed_items

    @max_failed_items.setter
    def max_failed_items(self, max_failed_items):
        """Sets the max_failed_items of this IndexingParameters.


        :param max_failed_items: The max_failed_items of this IndexingParameters.  # noqa: E501
        :type: int
        """

        self._max_failed_items = max_failed_items

    @property
    def max_failed_items_per_batch(self):
        """Gets the max_failed_items_per_batch of this IndexingParameters.  # noqa: E501


        :return: The max_failed_items_per_batch of this IndexingParameters.  # noqa: E501
        :rtype: int
        """
        return self._max_failed_items_per_batch

    @max_failed_items_per_batch.setter
    def max_failed_items_per_batch(self, max_failed_items_per_batch):
        """Sets the max_failed_items_per_batch of this IndexingParameters.


        :param max_failed_items_per_batch: The max_failed_items_per_batch of this IndexingParameters.  # noqa: E501
        :type: int
        """

        self._max_failed_items_per_batch = max_failed_items_per_batch

    @property
    def base64_encode_keys(self):
        """Gets the base64_encode_keys of this IndexingParameters.  # noqa: E501


        :return: The base64_encode_keys of this IndexingParameters.  # noqa: E501
        :rtype: bool
        """
        return self._base64_encode_keys

    @base64_encode_keys.setter
    def base64_encode_keys(self, base64_encode_keys):
        """Sets the base64_encode_keys of this IndexingParameters.


        :param base64_encode_keys: The base64_encode_keys of this IndexingParameters.  # noqa: E501
        :type: bool
        """

        self._base64_encode_keys = base64_encode_keys

    @property
    def configuration(self):
        """Gets the configuration of this IndexingParameters.  # noqa: E501


        :return: The configuration of this IndexingParameters.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this IndexingParameters.


        :param configuration: The configuration of this IndexingParameters.  # noqa: E501
        :type: dict(str, object)
        """

        self._configuration = configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndexingParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndexingParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
