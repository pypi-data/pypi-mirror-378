# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CheckProcessDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'id_suite': 'int',
        'time_stamp': 'datetime'
    }

    attribute_map = {
        'message': 'message',
        'id_suite': 'idSuite',
        'time_stamp': 'timeStamp'
    }

    def __init__(self, message=None, id_suite=None, time_stamp=None):  # noqa: E501
        """CheckProcessDto - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self._id_suite = None
        self._time_stamp = None
        self.discriminator = None
        self.message = message
        self.id_suite = id_suite
        self.time_stamp = time_stamp

    @property
    def message(self):
        """Gets the message of this CheckProcessDto.  # noqa: E501

        Message containing the details.  # noqa: E501

        :return: The message of this CheckProcessDto.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CheckProcessDto.

        Message containing the details.  # noqa: E501

        :param message: The message of this CheckProcessDto.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def id_suite(self):
        """Gets the id_suite of this CheckProcessDto.  # noqa: E501

        Suite primary key  # noqa: E501

        :return: The id_suite of this CheckProcessDto.  # noqa: E501
        :rtype: int
        """
        return self._id_suite

    @id_suite.setter
    def id_suite(self, id_suite):
        """Sets the id_suite of this CheckProcessDto.

        Suite primary key  # noqa: E501

        :param id_suite: The id_suite of this CheckProcessDto.  # noqa: E501
        :type: int
        """
        if id_suite is None:
            raise ValueError("Invalid value for `id_suite`, must not be `None`")  # noqa: E501

        self._id_suite = id_suite

    @property
    def time_stamp(self):
        """Gets the time_stamp of this CheckProcessDto.  # noqa: E501

        Error date time.  # noqa: E501

        :return: The time_stamp of this CheckProcessDto.  # noqa: E501
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this CheckProcessDto.

        Error date time.  # noqa: E501

        :param time_stamp: The time_stamp of this CheckProcessDto.  # noqa: E501
        :type: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")  # noqa: E501

        self._time_stamp = time_stamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckProcessDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckProcessDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
