# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Index(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'fields': 'list[Field]',
        'scoring_profiles': 'list[ScoringProfile]',
        'default_scoring_profile': 'str',
        'cors_options': 'CorsOptions',
        'suggesters': 'list[Suggester]',
        'analyzers': 'list[Analyzer]',
        'tokenizers': 'list[Tokenizer]',
        'token_filters': 'list[TokenFilter]',
        'char_filters': 'list[CharFilter]',
        'e_tag': 'str'
    }

    attribute_map = {
        'name': 'name',
        'fields': 'fields',
        'scoring_profiles': 'scoringProfiles',
        'default_scoring_profile': 'defaultScoringProfile',
        'cors_options': 'corsOptions',
        'suggesters': 'suggesters',
        'analyzers': 'analyzers',
        'tokenizers': 'tokenizers',
        'token_filters': 'tokenFilters',
        'char_filters': 'charFilters',
        'e_tag': 'eTag'
    }

    def __init__(self, name=None, fields=None, scoring_profiles=None, default_scoring_profile=None, cors_options=None, suggesters=None, analyzers=None, tokenizers=None, token_filters=None, char_filters=None, e_tag=None):  # noqa: E501
        """Index - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._fields = None
        self._scoring_profiles = None
        self._default_scoring_profile = None
        self._cors_options = None
        self._suggesters = None
        self._analyzers = None
        self._tokenizers = None
        self._token_filters = None
        self._char_filters = None
        self._e_tag = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if fields is not None:
            self.fields = fields
        if scoring_profiles is not None:
            self.scoring_profiles = scoring_profiles
        if default_scoring_profile is not None:
            self.default_scoring_profile = default_scoring_profile
        if cors_options is not None:
            self.cors_options = cors_options
        if suggesters is not None:
            self.suggesters = suggesters
        if analyzers is not None:
            self.analyzers = analyzers
        if tokenizers is not None:
            self.tokenizers = tokenizers
        if token_filters is not None:
            self.token_filters = token_filters
        if char_filters is not None:
            self.char_filters = char_filters
        if e_tag is not None:
            self.e_tag = e_tag

    @property
    def name(self):
        """Gets the name of this Index.  # noqa: E501


        :return: The name of this Index.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Index.


        :param name: The name of this Index.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def fields(self):
        """Gets the fields of this Index.  # noqa: E501


        :return: The fields of this Index.  # noqa: E501
        :rtype: list[Field]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Index.


        :param fields: The fields of this Index.  # noqa: E501
        :type: list[Field]
        """

        self._fields = fields

    @property
    def scoring_profiles(self):
        """Gets the scoring_profiles of this Index.  # noqa: E501


        :return: The scoring_profiles of this Index.  # noqa: E501
        :rtype: list[ScoringProfile]
        """
        return self._scoring_profiles

    @scoring_profiles.setter
    def scoring_profiles(self, scoring_profiles):
        """Sets the scoring_profiles of this Index.


        :param scoring_profiles: The scoring_profiles of this Index.  # noqa: E501
        :type: list[ScoringProfile]
        """

        self._scoring_profiles = scoring_profiles

    @property
    def default_scoring_profile(self):
        """Gets the default_scoring_profile of this Index.  # noqa: E501


        :return: The default_scoring_profile of this Index.  # noqa: E501
        :rtype: str
        """
        return self._default_scoring_profile

    @default_scoring_profile.setter
    def default_scoring_profile(self, default_scoring_profile):
        """Sets the default_scoring_profile of this Index.


        :param default_scoring_profile: The default_scoring_profile of this Index.  # noqa: E501
        :type: str
        """

        self._default_scoring_profile = default_scoring_profile

    @property
    def cors_options(self):
        """Gets the cors_options of this Index.  # noqa: E501


        :return: The cors_options of this Index.  # noqa: E501
        :rtype: CorsOptions
        """
        return self._cors_options

    @cors_options.setter
    def cors_options(self, cors_options):
        """Sets the cors_options of this Index.


        :param cors_options: The cors_options of this Index.  # noqa: E501
        :type: CorsOptions
        """

        self._cors_options = cors_options

    @property
    def suggesters(self):
        """Gets the suggesters of this Index.  # noqa: E501


        :return: The suggesters of this Index.  # noqa: E501
        :rtype: list[Suggester]
        """
        return self._suggesters

    @suggesters.setter
    def suggesters(self, suggesters):
        """Sets the suggesters of this Index.


        :param suggesters: The suggesters of this Index.  # noqa: E501
        :type: list[Suggester]
        """

        self._suggesters = suggesters

    @property
    def analyzers(self):
        """Gets the analyzers of this Index.  # noqa: E501


        :return: The analyzers of this Index.  # noqa: E501
        :rtype: list[Analyzer]
        """
        return self._analyzers

    @analyzers.setter
    def analyzers(self, analyzers):
        """Sets the analyzers of this Index.


        :param analyzers: The analyzers of this Index.  # noqa: E501
        :type: list[Analyzer]
        """

        self._analyzers = analyzers

    @property
    def tokenizers(self):
        """Gets the tokenizers of this Index.  # noqa: E501


        :return: The tokenizers of this Index.  # noqa: E501
        :rtype: list[Tokenizer]
        """
        return self._tokenizers

    @tokenizers.setter
    def tokenizers(self, tokenizers):
        """Sets the tokenizers of this Index.


        :param tokenizers: The tokenizers of this Index.  # noqa: E501
        :type: list[Tokenizer]
        """

        self._tokenizers = tokenizers

    @property
    def token_filters(self):
        """Gets the token_filters of this Index.  # noqa: E501


        :return: The token_filters of this Index.  # noqa: E501
        :rtype: list[TokenFilter]
        """
        return self._token_filters

    @token_filters.setter
    def token_filters(self, token_filters):
        """Sets the token_filters of this Index.


        :param token_filters: The token_filters of this Index.  # noqa: E501
        :type: list[TokenFilter]
        """

        self._token_filters = token_filters

    @property
    def char_filters(self):
        """Gets the char_filters of this Index.  # noqa: E501


        :return: The char_filters of this Index.  # noqa: E501
        :rtype: list[CharFilter]
        """
        return self._char_filters

    @char_filters.setter
    def char_filters(self, char_filters):
        """Sets the char_filters of this Index.


        :param char_filters: The char_filters of this Index.  # noqa: E501
        :type: list[CharFilter]
        """

        self._char_filters = char_filters

    @property
    def e_tag(self):
        """Gets the e_tag of this Index.  # noqa: E501


        :return: The e_tag of this Index.  # noqa: E501
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this Index.


        :param e_tag: The e_tag of this Index.  # noqa: E501
        :type: str
        """

        self._e_tag = e_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Index, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Index):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
