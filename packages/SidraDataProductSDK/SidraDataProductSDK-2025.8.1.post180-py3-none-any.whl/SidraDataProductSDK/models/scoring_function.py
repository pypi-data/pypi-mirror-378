# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScoringFunction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_name': 'str',
        'boost': 'float',
        'interpolation': 'ScoringFunctionInterpolation'
    }

    attribute_map = {
        'field_name': 'fieldName',
        'boost': 'boost',
        'interpolation': 'interpolation'
    }

    def __init__(self, field_name=None, boost=None, interpolation=None):  # noqa: E501
        """ScoringFunction - a model defined in Swagger"""  # noqa: E501
        self._field_name = None
        self._boost = None
        self._interpolation = None
        self.discriminator = None
        if field_name is not None:
            self.field_name = field_name
        if boost is not None:
            self.boost = boost
        if interpolation is not None:
            self.interpolation = interpolation

    @property
    def field_name(self):
        """Gets the field_name of this ScoringFunction.  # noqa: E501


        :return: The field_name of this ScoringFunction.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this ScoringFunction.


        :param field_name: The field_name of this ScoringFunction.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    @property
    def boost(self):
        """Gets the boost of this ScoringFunction.  # noqa: E501


        :return: The boost of this ScoringFunction.  # noqa: E501
        :rtype: float
        """
        return self._boost

    @boost.setter
    def boost(self, boost):
        """Sets the boost of this ScoringFunction.


        :param boost: The boost of this ScoringFunction.  # noqa: E501
        :type: float
        """

        self._boost = boost

    @property
    def interpolation(self):
        """Gets the interpolation of this ScoringFunction.  # noqa: E501


        :return: The interpolation of this ScoringFunction.  # noqa: E501
        :rtype: ScoringFunctionInterpolation
        """
        return self._interpolation

    @interpolation.setter
    def interpolation(self, interpolation):
        """Sets the interpolation of this ScoringFunction.


        :param interpolation: The interpolation of this ScoringFunction.  # noqa: E501
        :type: ScoringFunctionInterpolation
        """

        self._interpolation = interpolation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScoringFunction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScoringFunction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
