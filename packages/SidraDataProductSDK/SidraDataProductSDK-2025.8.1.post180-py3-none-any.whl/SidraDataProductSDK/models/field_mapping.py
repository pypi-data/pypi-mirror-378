# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_field_name': 'str',
        'target_field_name': 'str',
        'mapping_function': 'FieldMappingFunction'
    }

    attribute_map = {
        'source_field_name': 'sourceFieldName',
        'target_field_name': 'targetFieldName',
        'mapping_function': 'mappingFunction'
    }

    def __init__(self, source_field_name=None, target_field_name=None, mapping_function=None):  # noqa: E501
        """FieldMapping - a model defined in Swagger"""  # noqa: E501
        self._source_field_name = None
        self._target_field_name = None
        self._mapping_function = None
        self.discriminator = None
        if source_field_name is not None:
            self.source_field_name = source_field_name
        if target_field_name is not None:
            self.target_field_name = target_field_name
        if mapping_function is not None:
            self.mapping_function = mapping_function

    @property
    def source_field_name(self):
        """Gets the source_field_name of this FieldMapping.  # noqa: E501


        :return: The source_field_name of this FieldMapping.  # noqa: E501
        :rtype: str
        """
        return self._source_field_name

    @source_field_name.setter
    def source_field_name(self, source_field_name):
        """Sets the source_field_name of this FieldMapping.


        :param source_field_name: The source_field_name of this FieldMapping.  # noqa: E501
        :type: str
        """

        self._source_field_name = source_field_name

    @property
    def target_field_name(self):
        """Gets the target_field_name of this FieldMapping.  # noqa: E501


        :return: The target_field_name of this FieldMapping.  # noqa: E501
        :rtype: str
        """
        return self._target_field_name

    @target_field_name.setter
    def target_field_name(self, target_field_name):
        """Sets the target_field_name of this FieldMapping.


        :param target_field_name: The target_field_name of this FieldMapping.  # noqa: E501
        :type: str
        """

        self._target_field_name = target_field_name

    @property
    def mapping_function(self):
        """Gets the mapping_function of this FieldMapping.  # noqa: E501


        :return: The mapping_function of this FieldMapping.  # noqa: E501
        :rtype: FieldMappingFunction
        """
        return self._mapping_function

    @mapping_function.setter
    def mapping_function(self, mapping_function):
        """Sets the mapping_function of this FieldMapping.


        :param mapping_function: The mapping_function of this FieldMapping.  # noqa: E501
        :type: FieldMappingFunction
        """

        self._mapping_function = mapping_function

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
