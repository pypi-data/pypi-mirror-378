# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from SidraDataProductSDK.api_client import ApiClient


class PipelineApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_pipeline_deploy_all_post(self, **kwargs):  # noqa: E501
        """Deploy all the pipelines in ADF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_deploy_all_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The requested API version
        :return: PipelineExecutionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_deploy_all_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_deploy_all_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_pipeline_deploy_all_post_with_http_info(self, **kwargs):  # noqa: E501
        """Deploy all the pipelines in ADF  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_deploy_all_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The requested API version
        :return: PipelineExecutionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_deploy_all_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline/deployAll', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PipelineExecutionResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_get(self, **kwargs):  # noqa: E501
        """Get all pipelines  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip:
        :param int take:
        :param str text:
        :param str field:
        :param bool exact_match:
        :param str sort_field:
        :param bool sort_desc:
        :param str api_version: The requested API version
        :return: list[PipelineFullDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_pipeline_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all pipelines  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip:
        :param int take:
        :param str text:
        :param str field:
        :param bool exact_match:
        :param str sort_field:
        :param bool sort_desc:
        :param str api_version: The requested API version
        :return: list[PipelineFullDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['skip', 'take', 'text', 'field', 'exact_match', 'sort_field', 'sort_desc', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501
        if 'exact_match' in params:
            query_params.append(('exactMatch', params['exact_match']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'sort_desc' in params:
            query_params.append(('sortDesc', params['sort_desc']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PipelineFullDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_id_pipeline_assets_get(self, id_pipeline, **kwargs):  # noqa: E501
        """Get assets related with a pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_assets_get(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Pipeline Id that is going to be checked (required)
        :param int skip: Number of assets to skip
        :param int take: Number of assets to retreive
        :param str api_version: The requested API version
        :return: list[AssetDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_id_pipeline_assets_get_with_http_info(id_pipeline, **kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_id_pipeline_assets_get_with_http_info(id_pipeline, **kwargs)  # noqa: E501
            return data

    def api_pipeline_id_pipeline_assets_get_with_http_info(self, id_pipeline, **kwargs):  # noqa: E501
        """Get assets related with a pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_assets_get_with_http_info(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Pipeline Id that is going to be checked (required)
        :param int skip: Number of assets to skip
        :param int take: Number of assets to retreive
        :param str api_version: The requested API version
        :return: list[AssetDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pipeline', 'skip', 'take', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_id_pipeline_assets_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_pipeline' is set
        if ('id_pipeline' not in params or
                params['id_pipeline'] is None):
            raise ValueError("Missing the required parameter `id_pipeline` when calling `api_pipeline_id_pipeline_assets_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_pipeline' in params:
            path_params['idPipeline'] = params['id_pipeline']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline/{idPipeline}/assets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssetDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_id_pipeline_assets_load_ids_post(self, id_pipeline, **kwargs):  # noqa: E501
        """Reload a list of assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_assets_load_ids_post(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Load pipeline Id (required)
        :param list[int] body: List of asset Ids to reload
        :param str api_version: The requested API version
        :return: PipelineExecutionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_id_pipeline_assets_load_ids_post_with_http_info(id_pipeline, **kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_id_pipeline_assets_load_ids_post_with_http_info(id_pipeline, **kwargs)  # noqa: E501
            return data

    def api_pipeline_id_pipeline_assets_load_ids_post_with_http_info(self, id_pipeline, **kwargs):  # noqa: E501
        """Reload a list of assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_assets_load_ids_post_with_http_info(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Load pipeline Id (required)
        :param list[int] body: List of asset Ids to reload
        :param str api_version: The requested API version
        :return: PipelineExecutionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pipeline', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_id_pipeline_assets_load_ids_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_pipeline' is set
        if ('id_pipeline' not in params or
                params['id_pipeline'] is None):
            raise ValueError("Missing the required parameter `id_pipeline` when calling `api_pipeline_id_pipeline_assets_load_ids_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_pipeline' in params:
            path_params['idPipeline'] = params['id_pipeline']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline/{idPipeline}/assets/load/ids', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PipelineExecutionResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_id_pipeline_assets_load_timeframe_post(self, id_pipeline, **kwargs):  # noqa: E501
        """Reload a list of assets in a time frame with the specified pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_assets_load_timeframe_post(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Load pipeline Id (required)
        :param LoadEntitiesFromDateRequest body: Entities to load and Start date of the time frame
        :param str api_version: The requested API version
        :return: PipelineExecutionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_id_pipeline_assets_load_timeframe_post_with_http_info(id_pipeline, **kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_id_pipeline_assets_load_timeframe_post_with_http_info(id_pipeline, **kwargs)  # noqa: E501
            return data

    def api_pipeline_id_pipeline_assets_load_timeframe_post_with_http_info(self, id_pipeline, **kwargs):  # noqa: E501
        """Reload a list of assets in a time frame with the specified pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_assets_load_timeframe_post_with_http_info(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Load pipeline Id (required)
        :param LoadEntitiesFromDateRequest body: Entities to load and Start date of the time frame
        :param str api_version: The requested API version
        :return: PipelineExecutionResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pipeline', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_id_pipeline_assets_load_timeframe_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_pipeline' is set
        if ('id_pipeline' not in params or
                params['id_pipeline'] is None):
            raise ValueError("Missing the required parameter `id_pipeline` when calling `api_pipeline_id_pipeline_assets_load_timeframe_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_pipeline' in params:
            path_params['idPipeline'] = params['id_pipeline']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline/{idPipeline}/assets/load/timeframe', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PipelineExecutionResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_id_pipeline_delete(self, id_pipeline, **kwargs):  # noqa: E501
        """Deletes a pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_delete(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Id of the pipeline to delete (required)
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_id_pipeline_delete_with_http_info(id_pipeline, **kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_id_pipeline_delete_with_http_info(id_pipeline, **kwargs)  # noqa: E501
            return data

    def api_pipeline_id_pipeline_delete_with_http_info(self, id_pipeline, **kwargs):  # noqa: E501
        """Deletes a pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_delete_with_http_info(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Id of the pipeline to delete (required)
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pipeline', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_id_pipeline_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_pipeline' is set
        if ('id_pipeline' not in params or
                params['id_pipeline'] is None):
            raise ValueError("Missing the required parameter `id_pipeline` when calling `api_pipeline_id_pipeline_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_pipeline' in params:
            path_params['idPipeline'] = params['id_pipeline']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline/{idPipeline}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_id_pipeline_entities_dynamic_put(self, id_pipeline, **kwargs):  # noqa: E501
        """Upsert entity associations dynamically  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_entities_dynamic_put(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Affected pipeline Id (required)
        :param list[EntityPipelineDynamicUpsertRequest] body: Resources affected (DsuName/ProviderId/EntityId) with extra attributes
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_id_pipeline_entities_dynamic_put_with_http_info(id_pipeline, **kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_id_pipeline_entities_dynamic_put_with_http_info(id_pipeline, **kwargs)  # noqa: E501
            return data

    def api_pipeline_id_pipeline_entities_dynamic_put_with_http_info(self, id_pipeline, **kwargs):  # noqa: E501
        """Upsert entity associations dynamically  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_entities_dynamic_put_with_http_info(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Affected pipeline Id (required)
        :param list[EntityPipelineDynamicUpsertRequest] body: Resources affected (DsuName/ProviderId/EntityId) with extra attributes
        :param str api_version: The requested API version
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pipeline', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_id_pipeline_entities_dynamic_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_pipeline' is set
        if ('id_pipeline' not in params or
                params['id_pipeline'] is None):
            raise ValueError("Missing the required parameter `id_pipeline` when calling `api_pipeline_id_pipeline_entities_dynamic_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_pipeline' in params:
            path_params['idPipeline'] = params['id_pipeline']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline/{idPipeline}/entities/dynamic', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_id_pipeline_entities_get(self, id_pipeline, **kwargs):  # noqa: E501
        """Get assigned entities for a pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_entities_get(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Pipeline Id that is going to be checked (required)
        :param str api_version: The requested API version
        :return: list[EntityPipelineDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_id_pipeline_entities_get_with_http_info(id_pipeline, **kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_id_pipeline_entities_get_with_http_info(id_pipeline, **kwargs)  # noqa: E501
            return data

    def api_pipeline_id_pipeline_entities_get_with_http_info(self, id_pipeline, **kwargs):  # noqa: E501
        """Get assigned entities for a pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_entities_get_with_http_info(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Pipeline Id that is going to be checked (required)
        :param str api_version: The requested API version
        :return: list[EntityPipelineDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pipeline', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_id_pipeline_entities_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_pipeline' is set
        if ('id_pipeline' not in params or
                params['id_pipeline'] is None):
            raise ValueError("Missing the required parameter `id_pipeline` when calling `api_pipeline_id_pipeline_entities_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_pipeline' in params:
            path_params['idPipeline'] = params['id_pipeline']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline/{idPipeline}/entities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EntityPipelineDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_id_pipeline_entities_information_get(self, id_pipeline, **kwargs):  # noqa: E501
        """Get assigned entities for a pipeline with extra information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_entities_information_get(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Pipeline Id that is going to be checked (required)
        :param int skip: Number of entities to skip
        :param int take: Number of entities to retreive
        :param str api_version: The requested API version
        :return: list[RelatedEntitiesOverview]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_id_pipeline_entities_information_get_with_http_info(id_pipeline, **kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_id_pipeline_entities_information_get_with_http_info(id_pipeline, **kwargs)  # noqa: E501
            return data

    def api_pipeline_id_pipeline_entities_information_get_with_http_info(self, id_pipeline, **kwargs):  # noqa: E501
        """Get assigned entities for a pipeline with extra information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_entities_information_get_with_http_info(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Pipeline Id that is going to be checked (required)
        :param int skip: Number of entities to skip
        :param int take: Number of entities to retreive
        :param str api_version: The requested API version
        :return: list[RelatedEntitiesOverview]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pipeline', 'skip', 'take', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_id_pipeline_entities_information_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_pipeline' is set
        if ('id_pipeline' not in params or
                params['id_pipeline'] is None):
            raise ValueError("Missing the required parameter `id_pipeline` when calling `api_pipeline_id_pipeline_entities_information_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_pipeline' in params:
            path_params['idPipeline'] = params['id_pipeline']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline/{idPipeline}/entities/information', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RelatedEntitiesOverview]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_id_pipeline_entities_post(self, id_pipeline, **kwargs):  # noqa: E501
        """Add/Update/Delete entity-pipeline relations.  The entity-pipeline relations not present in \"entityPipelineUpdates\" parameter will be deleted.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_entities_post(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Pipeline Id that is going to be checked (required)
        :param list[EntityPipelineRequest] body: Entity-pipeline list that is going to be inserted/updated
        :param str api_version: The requested API version
        :return: list[EntityPipelineDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_id_pipeline_entities_post_with_http_info(id_pipeline, **kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_id_pipeline_entities_post_with_http_info(id_pipeline, **kwargs)  # noqa: E501
            return data

    def api_pipeline_id_pipeline_entities_post_with_http_info(self, id_pipeline, **kwargs):  # noqa: E501
        """Add/Update/Delete entity-pipeline relations.  The entity-pipeline relations not present in \"entityPipelineUpdates\" parameter will be deleted.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_entities_post_with_http_info(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Pipeline Id that is going to be checked (required)
        :param list[EntityPipelineRequest] body: Entity-pipeline list that is going to be inserted/updated
        :param str api_version: The requested API version
        :return: list[EntityPipelineDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pipeline', 'body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_id_pipeline_entities_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_pipeline' is set
        if ('id_pipeline' not in params or
                params['id_pipeline'] is None):
            raise ValueError("Missing the required parameter `id_pipeline` when calling `api_pipeline_id_pipeline_entities_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_pipeline' in params:
            path_params['idPipeline'] = params['id_pipeline']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline/{idPipeline}/entities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EntityPipelineDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_id_pipeline_executions_get(self, id_pipeline, **kwargs):  # noqa: E501
        """Get executions overview for a pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_executions_get(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Pipeline Id that is going to be checked (required)
        :param int skip: Number of run Ids to skip
        :param int take: Number of run Ids to retreive
        :param str api_version: The requested API version
        :return: list[ExtractPipelineExecutionOverview]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_id_pipeline_executions_get_with_http_info(id_pipeline, **kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_id_pipeline_executions_get_with_http_info(id_pipeline, **kwargs)  # noqa: E501
            return data

    def api_pipeline_id_pipeline_executions_get_with_http_info(self, id_pipeline, **kwargs):  # noqa: E501
        """Get executions overview for a pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_executions_get_with_http_info(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Pipeline Id that is going to be checked (required)
        :param int skip: Number of run Ids to skip
        :param int take: Number of run Ids to retreive
        :param str api_version: The requested API version
        :return: list[ExtractPipelineExecutionOverview]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pipeline', 'skip', 'take', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_id_pipeline_executions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_pipeline' is set
        if ('id_pipeline' not in params or
                params['id_pipeline'] is None):
            raise ValueError("Missing the required parameter `id_pipeline` when calling `api_pipeline_id_pipeline_executions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_pipeline' in params:
            path_params['idPipeline'] = params['id_pipeline']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline/{idPipeline}/executions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ExtractPipelineExecutionOverview]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_id_pipeline_metadata_get(self, id_pipeline, **kwargs):  # noqa: E501
        """Get basic metadata information from client app and its relation with a pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_metadata_get(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Pipeline Id that is going to be checked (required)
        :param str api_version: The requested API version
        :return: list[MetadataDetailsDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_id_pipeline_metadata_get_with_http_info(id_pipeline, **kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_id_pipeline_metadata_get_with_http_info(id_pipeline, **kwargs)  # noqa: E501
            return data

    def api_pipeline_id_pipeline_metadata_get_with_http_info(self, id_pipeline, **kwargs):  # noqa: E501
        """Get basic metadata information from client app and its relation with a pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_id_pipeline_metadata_get_with_http_info(id_pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id_pipeline: Pipeline Id that is going to be checked (required)
        :param str api_version: The requested API version
        :return: list[MetadataDetailsDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pipeline', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_id_pipeline_metadata_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_pipeline' is set
        if ('id_pipeline' not in params or
                params['id_pipeline'] is None):
            raise ValueError("Missing the required parameter `id_pipeline` when calling `api_pipeline_id_pipeline_metadata_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_pipeline' in params:
            path_params['idPipeline'] = params['id_pipeline']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline/{idPipeline}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MetadataDetailsDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_intake_get(self, **kwargs):  # noqa: E501
        """Get all data intake pipelines  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_intake_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The requested API version
        :return: list[PipelineFullDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_intake_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_intake_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_pipeline_intake_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all data intake pipelines  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_intake_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The requested API version
        :return: list[PipelineFullDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_intake_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline/intake', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PipelineFullDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_post(self, **kwargs):  # noqa: E501
        """Create a pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PipelineDto body: Pipeline data
        :param str api_version: The requested API version
        :return: PipelineFullDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_pipeline_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create a pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PipelineDto body: Pipeline data
        :param str api_version: The requested API version
        :return: PipelineFullDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PipelineFullDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_put(self, **kwargs):  # noqa: E501
        """Update pipelines.   If one pipeline fails, it will return an error but continue updating the correct pipelines.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[PipelineDto] body: Pipelines list to update
        :param str api_version: The requested API version
        :return: list[PipelineFullDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_pipeline_put_with_http_info(self, **kwargs):  # noqa: E501
        """Update pipelines.   If one pipeline fails, it will return an error but continue updating the correct pipelines.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[PipelineDto] body: Pipelines list to update
        :param str api_version: The requested API version
        :return: list[PipelineFullDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PipelineFullDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_templates_get(self, **kwargs):  # noqa: E501
        """Get all pipelines templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_templates_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip:
        :param int take:
        :param str text:
        :param str field:
        :param bool exact_match:
        :param str sort_field:
        :param bool sort_desc:
        :param str api_version: The requested API version
        :return: list[PipelineTemplateDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_templates_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_templates_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_pipeline_templates_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all pipelines templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_templates_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip:
        :param int take:
        :param str text:
        :param str field:
        :param bool exact_match:
        :param str sort_field:
        :param bool sort_desc:
        :param str api_version: The requested API version
        :return: list[PipelineTemplateDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['skip', 'take', 'text', 'field', 'exact_match', 'sort_field', 'sort_desc', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_templates_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501
        if 'exact_match' in params:
            query_params.append(('exactMatch', params['exact_match']))  # noqa: E501
        if 'sort_field' in params:
            query_params.append(('sortField', params['sort_field']))  # noqa: E501
        if 'sort_desc' in params:
            query_params.append(('sortDesc', params['sort_desc']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PipelineTemplateDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_pipeline_templates_intake_get(self, **kwargs):  # noqa: E501
        """Get intake pipelines templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_templates_intake_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The requested API version
        :return: list[PipelineTemplateDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_pipeline_templates_intake_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_pipeline_templates_intake_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_pipeline_templates_intake_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get intake pipelines templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_pipeline_templates_intake_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The requested API version
        :return: list[PipelineTemplateDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_pipeline_templates_intake_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('api-version', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/api/pipeline/templates/intake', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PipelineTemplateDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
