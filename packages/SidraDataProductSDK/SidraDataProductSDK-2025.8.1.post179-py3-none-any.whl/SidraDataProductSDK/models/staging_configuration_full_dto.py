# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StagingConfigurationFullDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query': 'str',
        'id_entity': 'int',
        'schema_name': 'str',
        'table_name': 'str',
        'table_field_definition': 'str',
        'enable_change_data_feed': 'bool',
        'id_pipeline': 'int',
        'id': 'int',
        'entity_name': 'str',
        'last_load_date': 'datetime'
    }

    attribute_map = {
        'query': 'query',
        'id_entity': 'idEntity',
        'schema_name': 'schemaName',
        'table_name': 'tableName',
        'table_field_definition': 'tableFieldDefinition',
        'enable_change_data_feed': 'enableChangeDataFeed',
        'id_pipeline': 'idPipeline',
        'id': 'id',
        'entity_name': 'entityName',
        'last_load_date': 'lastLoadDate'
    }

    def __init__(self, query=None, id_entity=None, schema_name=None, table_name=None, table_field_definition=None, enable_change_data_feed=None, id_pipeline=None, id=None, entity_name=None, last_load_date=None):  # noqa: E501
        """StagingConfigurationFullDto - a model defined in Swagger"""  # noqa: E501
        self._query = None
        self._id_entity = None
        self._schema_name = None
        self._table_name = None
        self._table_field_definition = None
        self._enable_change_data_feed = None
        self._id_pipeline = None
        self._id = None
        self._entity_name = None
        self._last_load_date = None
        self.discriminator = None
        if query is not None:
            self.query = query
        if id_entity is not None:
            self.id_entity = id_entity
        if schema_name is not None:
            self.schema_name = schema_name
        if table_name is not None:
            self.table_name = table_name
        if table_field_definition is not None:
            self.table_field_definition = table_field_definition
        if enable_change_data_feed is not None:
            self.enable_change_data_feed = enable_change_data_feed
        if id_pipeline is not None:
            self.id_pipeline = id_pipeline
        if id is not None:
            self.id = id
        if entity_name is not None:
            self.entity_name = entity_name
        if last_load_date is not None:
            self.last_load_date = last_load_date

    @property
    def query(self):
        """Gets the query of this StagingConfigurationFullDto.  # noqa: E501

        Query that defines the way to retrieve the data from databricks client sources.  If it is not defined a IdEntity must be indicated to retrieve the content by a default query.  IdEntity and Query cannot be defined or null at the same time.  # noqa: E501

        :return: The query of this StagingConfigurationFullDto.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this StagingConfigurationFullDto.

        Query that defines the way to retrieve the data from databricks client sources.  If it is not defined a IdEntity must be indicated to retrieve the content by a default query.  IdEntity and Query cannot be defined or null at the same time.  # noqa: E501

        :param query: The query of this StagingConfigurationFullDto.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def id_entity(self):
        """Gets the id_entity of this StagingConfigurationFullDto.  # noqa: E501

        Entity to retrieve the data from databricks client source. By default it will retrieve all Sidra.Persistence.Client.Entities.Sidra.Attribute for the Sidra.Persistence.Client.Entities.Sidra.Entity.  If it is not defined a Query must be indicated to know the way to retrieve the data.  IdEntity and Query cannot be defined or null at the same time.  # noqa: E501

        :return: The id_entity of this StagingConfigurationFullDto.  # noqa: E501
        :rtype: int
        """
        return self._id_entity

    @id_entity.setter
    def id_entity(self, id_entity):
        """Sets the id_entity of this StagingConfigurationFullDto.

        Entity to retrieve the data from databricks client source. By default it will retrieve all Sidra.Persistence.Client.Entities.Sidra.Attribute for the Sidra.Persistence.Client.Entities.Sidra.Entity.  If it is not defined a Query must be indicated to know the way to retrieve the data.  IdEntity and Query cannot be defined or null at the same time.  # noqa: E501

        :param id_entity: The id_entity of this StagingConfigurationFullDto.  # noqa: E501
        :type: int
        """

        self._id_entity = id_entity

    @property
    def schema_name(self):
        """Gets the schema_name of this StagingConfigurationFullDto.  # noqa: E501

        Schema name used for the staging tables. By default 'Staging' schema is used  # noqa: E501

        :return: The schema_name of this StagingConfigurationFullDto.  # noqa: E501
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this StagingConfigurationFullDto.

        Schema name used for the staging tables. By default 'Staging' schema is used  # noqa: E501

        :param schema_name: The schema_name of this StagingConfigurationFullDto.  # noqa: E501
        :type: str
        """

        self._schema_name = schema_name

    @property
    def table_name(self):
        """Gets the table_name of this StagingConfigurationFullDto.  # noqa: E501

        Table name for the staging table.  If it is not defined the table name of the entity should be used.  TableName and IdEntity cannot be definied or null at the same time  # noqa: E501

        :return: The table_name of this StagingConfigurationFullDto.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this StagingConfigurationFullDto.

        Table name for the staging table.  If it is not defined the table name of the entity should be used.  TableName and IdEntity cannot be definied or null at the same time  # noqa: E501

        :param table_name: The table_name of this StagingConfigurationFullDto.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def table_field_definition(self):
        """Gets the table_field_definition of this StagingConfigurationFullDto.  # noqa: E501

        Table field definition for the staging table.  If it is not defined the entire Sidra.Persistence.Client.Entities.Sidra.Attribute of the entity should be used.  TableFieldDefinition and IdEntity cannot be definied or null at the same time  # noqa: E501

        :return: The table_field_definition of this StagingConfigurationFullDto.  # noqa: E501
        :rtype: str
        """
        return self._table_field_definition

    @table_field_definition.setter
    def table_field_definition(self, table_field_definition):
        """Sets the table_field_definition of this StagingConfigurationFullDto.

        Table field definition for the staging table.  If it is not defined the entire Sidra.Persistence.Client.Entities.Sidra.Attribute of the entity should be used.  TableFieldDefinition and IdEntity cannot be definied or null at the same time  # noqa: E501

        :param table_field_definition: The table_field_definition of this StagingConfigurationFullDto.  # noqa: E501
        :type: str
        """

        self._table_field_definition = table_field_definition

    @property
    def enable_change_data_feed(self):
        """Gets the enable_change_data_feed of this StagingConfigurationFullDto.  # noqa: E501

        Enable or disable the Change Data Feed (CDF) for the specific Sidra.Persistence.Client.Entities.Sidra.Entity.  This allows to use table_changes function in databricks to retrieve only the changes since the last load.  # noqa: E501

        :return: The enable_change_data_feed of this StagingConfigurationFullDto.  # noqa: E501
        :rtype: bool
        """
        return self._enable_change_data_feed

    @enable_change_data_feed.setter
    def enable_change_data_feed(self, enable_change_data_feed):
        """Sets the enable_change_data_feed of this StagingConfigurationFullDto.

        Enable or disable the Change Data Feed (CDF) for the specific Sidra.Persistence.Client.Entities.Sidra.Entity.  This allows to use table_changes function in databricks to retrieve only the changes since the last load.  # noqa: E501

        :param enable_change_data_feed: The enable_change_data_feed of this StagingConfigurationFullDto.  # noqa: E501
        :type: bool
        """

        self._enable_change_data_feed = enable_change_data_feed

    @property
    def id_pipeline(self):
        """Gets the id_pipeline of this StagingConfigurationFullDto.  # noqa: E501

        Identifier of the N:Sidra.App.Api.WebApi.Features.Pipeline associated to the Sidra.Persistence.Client.Entities.Sidra.StagingConfiguration  # noqa: E501

        :return: The id_pipeline of this StagingConfigurationFullDto.  # noqa: E501
        :rtype: int
        """
        return self._id_pipeline

    @id_pipeline.setter
    def id_pipeline(self, id_pipeline):
        """Sets the id_pipeline of this StagingConfigurationFullDto.

        Identifier of the N:Sidra.App.Api.WebApi.Features.Pipeline associated to the Sidra.Persistence.Client.Entities.Sidra.StagingConfiguration  # noqa: E501

        :param id_pipeline: The id_pipeline of this StagingConfigurationFullDto.  # noqa: E501
        :type: int
        """

        self._id_pipeline = id_pipeline

    @property
    def id(self):
        """Gets the id of this StagingConfigurationFullDto.  # noqa: E501

        Identifier  # noqa: E501

        :return: The id of this StagingConfigurationFullDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StagingConfigurationFullDto.

        Identifier  # noqa: E501

        :param id: The id of this StagingConfigurationFullDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def entity_name(self):
        """Gets the entity_name of this StagingConfigurationFullDto.  # noqa: E501

        Entity name if defined  # noqa: E501

        :return: The entity_name of this StagingConfigurationFullDto.  # noqa: E501
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this StagingConfigurationFullDto.

        Entity name if defined  # noqa: E501

        :param entity_name: The entity_name of this StagingConfigurationFullDto.  # noqa: E501
        :type: str
        """

        self._entity_name = entity_name

    @property
    def last_load_date(self):
        """Gets the last_load_date of this StagingConfigurationFullDto.  # noqa: E501

        Last load date for Entity  # noqa: E501

        :return: The last_load_date of this StagingConfigurationFullDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_load_date

    @last_load_date.setter
    def last_load_date(self, last_load_date):
        """Sets the last_load_date of this StagingConfigurationFullDto.

        Last load date for Entity  # noqa: E501

        :param last_load_date: The last_load_date of this StagingConfigurationFullDto.  # noqa: E501
        :type: datetime
        """

        self._last_load_date = last_load_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StagingConfigurationFullDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StagingConfigurationFullDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
