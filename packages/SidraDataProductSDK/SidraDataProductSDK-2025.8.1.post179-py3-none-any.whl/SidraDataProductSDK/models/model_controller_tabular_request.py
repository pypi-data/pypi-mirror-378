# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelControllerTabularRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tabular_server_name': 'str',
        'tabular_database_name': 'str',
        'subscription_id': 'str',
        'authority': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'resource_url': 'str',
        'id_provider': 'int'
    }

    attribute_map = {
        'tabular_server_name': 'tabularServerName',
        'tabular_database_name': 'tabularDatabaseName',
        'subscription_id': 'subscriptionId',
        'authority': 'authority',
        'client_id': 'clientId',
        'client_secret': 'clientSecret',
        'resource_url': 'resourceUrl',
        'id_provider': 'idProvider'
    }

    def __init__(self, tabular_server_name=None, tabular_database_name=None, subscription_id=None, authority=None, client_id=None, client_secret=None, resource_url=None, id_provider=None):  # noqa: E501
        """ModelControllerTabularRequest - a model defined in Swagger"""  # noqa: E501
        self._tabular_server_name = None
        self._tabular_database_name = None
        self._subscription_id = None
        self._authority = None
        self._client_id = None
        self._client_secret = None
        self._resource_url = None
        self._id_provider = None
        self.discriminator = None
        self.tabular_server_name = tabular_server_name
        self.tabular_database_name = tabular_database_name
        self.subscription_id = subscription_id
        self.authority = authority
        self.client_id = client_id
        self.client_secret = client_secret
        self.resource_url = resource_url
        self.id_provider = id_provider

    @property
    def tabular_server_name(self):
        """Gets the tabular_server_name of this ModelControllerTabularRequest.  # noqa: E501

        Tabular server name, example for analysis service (asazure://{location}.asazure.windows.net/{resourceName})  # noqa: E501

        :return: The tabular_server_name of this ModelControllerTabularRequest.  # noqa: E501
        :rtype: str
        """
        return self._tabular_server_name

    @tabular_server_name.setter
    def tabular_server_name(self, tabular_server_name):
        """Sets the tabular_server_name of this ModelControllerTabularRequest.

        Tabular server name, example for analysis service (asazure://{location}.asazure.windows.net/{resourceName})  # noqa: E501

        :param tabular_server_name: The tabular_server_name of this ModelControllerTabularRequest.  # noqa: E501
        :type: str
        """
        if tabular_server_name is None:
            raise ValueError("Invalid value for `tabular_server_name`, must not be `None`")  # noqa: E501

        self._tabular_server_name = tabular_server_name

    @property
    def tabular_database_name(self):
        """Gets the tabular_database_name of this ModelControllerTabularRequest.  # noqa: E501

        Tabular database name  # noqa: E501

        :return: The tabular_database_name of this ModelControllerTabularRequest.  # noqa: E501
        :rtype: str
        """
        return self._tabular_database_name

    @tabular_database_name.setter
    def tabular_database_name(self, tabular_database_name):
        """Sets the tabular_database_name of this ModelControllerTabularRequest.

        Tabular database name  # noqa: E501

        :param tabular_database_name: The tabular_database_name of this ModelControllerTabularRequest.  # noqa: E501
        :type: str
        """
        if tabular_database_name is None:
            raise ValueError("Invalid value for `tabular_database_name`, must not be `None`")  # noqa: E501

        self._tabular_database_name = tabular_database_name

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ModelControllerTabularRequest.  # noqa: E501

        Subscription id  # noqa: E501

        :return: The subscription_id of this ModelControllerTabularRequest.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ModelControllerTabularRequest.

        Subscription id  # noqa: E501

        :param subscription_id: The subscription_id of this ModelControllerTabularRequest.  # noqa: E501
        :type: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")  # noqa: E501

        self._subscription_id = subscription_id

    @property
    def authority(self):
        """Gets the authority of this ModelControllerTabularRequest.  # noqa: E501

        Authority url  # noqa: E501

        :return: The authority of this ModelControllerTabularRequest.  # noqa: E501
        :rtype: str
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """Sets the authority of this ModelControllerTabularRequest.

        Authority url  # noqa: E501

        :param authority: The authority of this ModelControllerTabularRequest.  # noqa: E501
        :type: str
        """
        if authority is None:
            raise ValueError("Invalid value for `authority`, must not be `None`")  # noqa: E501

        self._authority = authority

    @property
    def client_id(self):
        """Gets the client_id of this ModelControllerTabularRequest.  # noqa: E501

        Client id  # noqa: E501

        :return: The client_id of this ModelControllerTabularRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ModelControllerTabularRequest.

        Client id  # noqa: E501

        :param client_id: The client_id of this ModelControllerTabularRequest.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this ModelControllerTabularRequest.  # noqa: E501

        Client secret  # noqa: E501

        :return: The client_secret of this ModelControllerTabularRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this ModelControllerTabularRequest.

        Client secret  # noqa: E501

        :param client_secret: The client_secret of this ModelControllerTabularRequest.  # noqa: E501
        :type: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")  # noqa: E501

        self._client_secret = client_secret

    @property
    def resource_url(self):
        """Gets the resource_url of this ModelControllerTabularRequest.  # noqa: E501

        Resource url  # noqa: E501

        :return: The resource_url of this ModelControllerTabularRequest.  # noqa: E501
        :rtype: str
        """
        return self._resource_url

    @resource_url.setter
    def resource_url(self, resource_url):
        """Sets the resource_url of this ModelControllerTabularRequest.

        Resource url  # noqa: E501

        :param resource_url: The resource_url of this ModelControllerTabularRequest.  # noqa: E501
        :type: str
        """
        if resource_url is None:
            raise ValueError("Invalid value for `resource_url`, must not be `None`")  # noqa: E501

        self._resource_url = resource_url

    @property
    def id_provider(self):
        """Gets the id_provider of this ModelControllerTabularRequest.  # noqa: E501

        Specified which measures providers will be updated  # noqa: E501

        :return: The id_provider of this ModelControllerTabularRequest.  # noqa: E501
        :rtype: int
        """
        return self._id_provider

    @id_provider.setter
    def id_provider(self, id_provider):
        """Sets the id_provider of this ModelControllerTabularRequest.

        Specified which measures providers will be updated  # noqa: E501

        :param id_provider: The id_provider of this ModelControllerTabularRequest.  # noqa: E501
        :type: int
        """
        if id_provider is None:
            raise ValueError("Invalid value for `id_provider`, must not be `None`")  # noqa: E501

        self._id_provider = id_provider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelControllerTabularRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelControllerTabularRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
