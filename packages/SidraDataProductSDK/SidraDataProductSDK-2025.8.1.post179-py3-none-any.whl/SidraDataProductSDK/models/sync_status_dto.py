# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SyncStatusDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_running': 'bool',
        'status': 'str',
        'polling_interval': 'int',
        'always_sync': 'bool',
        'last_run_time': 'datetime'
    }

    attribute_map = {
        'is_running': 'isRunning',
        'status': 'status',
        'polling_interval': 'pollingInterval',
        'always_sync': 'alwaysSync',
        'last_run_time': 'lastRunTime'
    }

    def __init__(self, is_running=None, status=None, polling_interval=None, always_sync=None, last_run_time=None):  # noqa: E501
        """SyncStatusDto - a model defined in Swagger"""  # noqa: E501
        self._is_running = None
        self._status = None
        self._polling_interval = None
        self._always_sync = None
        self._last_run_time = None
        self.discriminator = None
        if is_running is not None:
            self.is_running = is_running
        if status is not None:
            self.status = status
        if polling_interval is not None:
            self.polling_interval = polling_interval
        if always_sync is not None:
            self.always_sync = always_sync
        if last_run_time is not None:
            self.last_run_time = last_run_time

    @property
    def is_running(self):
        """Gets the is_running of this SyncStatusDto.  # noqa: E501

        Indicates if the Sync is running or not  # noqa: E501

        :return: The is_running of this SyncStatusDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_running

    @is_running.setter
    def is_running(self, is_running):
        """Sets the is_running of this SyncStatusDto.

        Indicates if the Sync is running or not  # noqa: E501

        :param is_running: The is_running of this SyncStatusDto.  # noqa: E501
        :type: bool
        """

        self._is_running = is_running

    @property
    def status(self):
        """Gets the status of this SyncStatusDto.  # noqa: E501

        Indicates the actual status as a string Azure.ResourceManager.AppService.Models.ContinuousWebJobStatus.  # noqa: E501

        :return: The status of this SyncStatusDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SyncStatusDto.

        Indicates the actual status as a string Azure.ResourceManager.AppService.Models.ContinuousWebJobStatus.  # noqa: E501

        :param status: The status of this SyncStatusDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def polling_interval(self):
        """Gets the polling_interval of this SyncStatusDto.  # noqa: E501

        Indicates the Sync polling interval  # noqa: E501

        :return: The polling_interval of this SyncStatusDto.  # noqa: E501
        :rtype: int
        """
        return self._polling_interval

    @polling_interval.setter
    def polling_interval(self, polling_interval):
        """Sets the polling_interval of this SyncStatusDto.

        Indicates the Sync polling interval  # noqa: E501

        :param polling_interval: The polling_interval of this SyncStatusDto.  # noqa: E501
        :type: int
        """

        self._polling_interval = polling_interval

    @property
    def always_sync(self):
        """Gets the always_sync of this SyncStatusDto.  # noqa: E501

        Indicates if metadata should be synchronize always  # noqa: E501

        :return: The always_sync of this SyncStatusDto.  # noqa: E501
        :rtype: bool
        """
        return self._always_sync

    @always_sync.setter
    def always_sync(self, always_sync):
        """Sets the always_sync of this SyncStatusDto.

        Indicates if metadata should be synchronize always  # noqa: E501

        :param always_sync: The always_sync of this SyncStatusDto.  # noqa: E501
        :type: bool
        """

        self._always_sync = always_sync

    @property
    def last_run_time(self):
        """Gets the last_run_time of this SyncStatusDto.  # noqa: E501

        Last Sync run time  # noqa: E501

        :return: The last_run_time of this SyncStatusDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_run_time

    @last_run_time.setter
    def last_run_time(self, last_run_time):
        """Sets the last_run_time of this SyncStatusDto.

        Last Sync run time  # noqa: E501

        :param last_run_time: The last_run_time of this SyncStatusDto.  # noqa: E501
        :type: datetime
        """

        self._last_run_time = last_run_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyncStatusDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncStatusDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
