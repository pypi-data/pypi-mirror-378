# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetadataDetailsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'element_id': 'int',
        'element_name': 'str',
        'type': 'MetadataDetailsEnum',
        'metadata_relation': 'str',
        'is_included': 'bool',
        'is_mandatory': 'bool',
        'pipeline_execution_properties': 'str',
        'consolidation_mode': 'ConsolidationModes'
    }

    attribute_map = {
        'id': 'id',
        'element_id': 'elementId',
        'element_name': 'elementName',
        'type': 'type',
        'metadata_relation': 'metadataRelation',
        'is_included': 'isIncluded',
        'is_mandatory': 'isMandatory',
        'pipeline_execution_properties': 'pipelineExecutionProperties',
        'consolidation_mode': 'consolidationMode'
    }

    def __init__(self, id=None, element_id=None, element_name=None, type=None, metadata_relation=None, is_included=None, is_mandatory=None, pipeline_execution_properties=None, consolidation_mode=None):  # noqa: E501
        """MetadataDetailsDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._element_id = None
        self._element_name = None
        self._type = None
        self._metadata_relation = None
        self._is_included = None
        self._is_mandatory = None
        self._pipeline_execution_properties = None
        self._consolidation_mode = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if element_id is not None:
            self.element_id = element_id
        if element_name is not None:
            self.element_name = element_name
        if type is not None:
            self.type = type
        if metadata_relation is not None:
            self.metadata_relation = metadata_relation
        if is_included is not None:
            self.is_included = is_included
        if is_mandatory is not None:
            self.is_mandatory = is_mandatory
        if pipeline_execution_properties is not None:
            self.pipeline_execution_properties = pipeline_execution_properties
        if consolidation_mode is not None:
            self.consolidation_mode = consolidation_mode

    @property
    def id(self):
        """Gets the id of this MetadataDetailsDto.  # noqa: E501

        Result Id  # noqa: E501

        :return: The id of this MetadataDetailsDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetadataDetailsDto.

        Result Id  # noqa: E501

        :param id: The id of this MetadataDetailsDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def element_id(self):
        """Gets the element_id of this MetadataDetailsDto.  # noqa: E501

        Dsu/Provider/Entity Id  # noqa: E501

        :return: The element_id of this MetadataDetailsDto.  # noqa: E501
        :rtype: int
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this MetadataDetailsDto.

        Dsu/Provider/Entity Id  # noqa: E501

        :param element_id: The element_id of this MetadataDetailsDto.  # noqa: E501
        :type: int
        """

        self._element_id = element_id

    @property
    def element_name(self):
        """Gets the element_name of this MetadataDetailsDto.  # noqa: E501

        Dsu/Provider/Entity name  # noqa: E501

        :return: The element_name of this MetadataDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._element_name

    @element_name.setter
    def element_name(self, element_name):
        """Sets the element_name of this MetadataDetailsDto.

        Dsu/Provider/Entity name  # noqa: E501

        :param element_name: The element_name of this MetadataDetailsDto.  # noqa: E501
        :type: str
        """

        self._element_name = element_name

    @property
    def type(self):
        """Gets the type of this MetadataDetailsDto.  # noqa: E501


        :return: The type of this MetadataDetailsDto.  # noqa: E501
        :rtype: MetadataDetailsEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MetadataDetailsDto.


        :param type: The type of this MetadataDetailsDto.  # noqa: E501
        :type: MetadataDetailsEnum
        """

        self._type = type

    @property
    def metadata_relation(self):
        """Gets the metadata_relation of this MetadataDetailsDto.  # noqa: E501

        Dsu-Provider-Entity relation  # noqa: E501

        :return: The metadata_relation of this MetadataDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._metadata_relation

    @metadata_relation.setter
    def metadata_relation(self, metadata_relation):
        """Sets the metadata_relation of this MetadataDetailsDto.

        Dsu-Provider-Entity relation  # noqa: E501

        :param metadata_relation: The metadata_relation of this MetadataDetailsDto.  # noqa: E501
        :type: str
        """

        self._metadata_relation = metadata_relation

    @property
    def is_included(self):
        """Gets the is_included of this MetadataDetailsDto.  # noqa: E501

        Indicates if current data is related with a pipeline  # noqa: E501

        :return: The is_included of this MetadataDetailsDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_included

    @is_included.setter
    def is_included(self, is_included):
        """Sets the is_included of this MetadataDetailsDto.

        Indicates if current data is related with a pipeline  # noqa: E501

        :param is_included: The is_included of this MetadataDetailsDto.  # noqa: E501
        :type: bool
        """

        self._is_included = is_included

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this MetadataDetailsDto.  # noqa: E501

        Related pipeline (if exists) mandatory field  # noqa: E501

        :return: The is_mandatory of this MetadataDetailsDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this MetadataDetailsDto.

        Related pipeline (if exists) mandatory field  # noqa: E501

        :param is_mandatory: The is_mandatory of this MetadataDetailsDto.  # noqa: E501
        :type: bool
        """

        self._is_mandatory = is_mandatory

    @property
    def pipeline_execution_properties(self):
        """Gets the pipeline_execution_properties of this MetadataDetailsDto.  # noqa: E501

        Related pipeline (if exists) properties  # noqa: E501

        :return: The pipeline_execution_properties of this MetadataDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_execution_properties

    @pipeline_execution_properties.setter
    def pipeline_execution_properties(self, pipeline_execution_properties):
        """Sets the pipeline_execution_properties of this MetadataDetailsDto.

        Related pipeline (if exists) properties  # noqa: E501

        :param pipeline_execution_properties: The pipeline_execution_properties of this MetadataDetailsDto.  # noqa: E501
        :type: str
        """

        self._pipeline_execution_properties = pipeline_execution_properties

    @property
    def consolidation_mode(self):
        """Gets the consolidation_mode of this MetadataDetailsDto.  # noqa: E501


        :return: The consolidation_mode of this MetadataDetailsDto.  # noqa: E501
        :rtype: ConsolidationModes
        """
        return self._consolidation_mode

    @consolidation_mode.setter
    def consolidation_mode(self, consolidation_mode):
        """Sets the consolidation_mode of this MetadataDetailsDto.


        :param consolidation_mode: The consolidation_mode of this MetadataDetailsDto.  # noqa: E501
        :type: ConsolidationModes
        """

        self._consolidation_mode = consolidation_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataDetailsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataDetailsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
