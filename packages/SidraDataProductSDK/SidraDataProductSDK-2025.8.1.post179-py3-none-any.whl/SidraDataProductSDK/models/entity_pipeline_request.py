# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EntityPipelineRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_entity': 'int',
        'is_mandatory': 'bool',
        'pipeline_execution_properties': 'str'
    }

    attribute_map = {
        'id_entity': 'idEntity',
        'is_mandatory': 'isMandatory',
        'pipeline_execution_properties': 'pipelineExecutionProperties'
    }

    def __init__(self, id_entity=None, is_mandatory=None, pipeline_execution_properties=None):  # noqa: E501
        """EntityPipelineRequest - a model defined in Swagger"""  # noqa: E501
        self._id_entity = None
        self._is_mandatory = None
        self._pipeline_execution_properties = None
        self.discriminator = None
        self.id_entity = id_entity
        if is_mandatory is not None:
            self.is_mandatory = is_mandatory
        if pipeline_execution_properties is not None:
            self.pipeline_execution_properties = pipeline_execution_properties

    @property
    def id_entity(self):
        """Gets the id_entity of this EntityPipelineRequest.  # noqa: E501

        Entity Id  # noqa: E501

        :return: The id_entity of this EntityPipelineRequest.  # noqa: E501
        :rtype: int
        """
        return self._id_entity

    @id_entity.setter
    def id_entity(self, id_entity):
        """Sets the id_entity of this EntityPipelineRequest.

        Entity Id  # noqa: E501

        :param id_entity: The id_entity of this EntityPipelineRequest.  # noqa: E501
        :type: int
        """
        if id_entity is None:
            raise ValueError("Invalid value for `id_entity`, must not be `None`")  # noqa: E501

        self._id_entity = id_entity

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this EntityPipelineRequest.  # noqa: E501

        True if the entity must exit to run the extract. Otherwise, false  # noqa: E501

        :return: The is_mandatory of this EntityPipelineRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this EntityPipelineRequest.

        True if the entity must exit to run the extract. Otherwise, false  # noqa: E501

        :param is_mandatory: The is_mandatory of this EntityPipelineRequest.  # noqa: E501
        :type: bool
        """

        self._is_mandatory = is_mandatory

    @property
    def pipeline_execution_properties(self):
        """Gets the pipeline_execution_properties of this EntityPipelineRequest.  # noqa: E501

        Field to include additional properties for the execution of the pipelines in JSON format  # noqa: E501

        :return: The pipeline_execution_properties of this EntityPipelineRequest.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_execution_properties

    @pipeline_execution_properties.setter
    def pipeline_execution_properties(self, pipeline_execution_properties):
        """Sets the pipeline_execution_properties of this EntityPipelineRequest.

        Field to include additional properties for the execution of the pipelines in JSON format  # noqa: E501

        :param pipeline_execution_properties: The pipeline_execution_properties of this EntityPipelineRequest.  # noqa: E501
        :type: str
        """

        self._pipeline_execution_properties = pipeline_execution_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityPipelineRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityPipelineRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
