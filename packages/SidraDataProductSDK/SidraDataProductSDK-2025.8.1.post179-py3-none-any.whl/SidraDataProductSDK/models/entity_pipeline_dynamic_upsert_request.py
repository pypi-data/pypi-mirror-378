# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EntityPipelineDynamicUpsertRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'changes_on': 'str',
        'dsu': 'str',
        'provider': 'str',
        'entity': 'str',
        'is_included': 'bool',
        'is_mandatory': 'bool',
        'consolidation_mode': 'ConsolidationModes'
    }

    attribute_map = {
        'changes_on': 'changesOn',
        'dsu': 'dsu',
        'provider': 'provider',
        'entity': 'entity',
        'is_included': 'isIncluded',
        'is_mandatory': 'isMandatory',
        'consolidation_mode': 'consolidationMode'
    }

    def __init__(self, changes_on=None, dsu=None, provider=None, entity=None, is_included=None, is_mandatory=None, consolidation_mode=None):  # noqa: E501
        """EntityPipelineDynamicUpsertRequest - a model defined in Swagger"""  # noqa: E501
        self._changes_on = None
        self._dsu = None
        self._provider = None
        self._entity = None
        self._is_included = None
        self._is_mandatory = None
        self._consolidation_mode = None
        self.discriminator = None
        if changes_on is not None:
            self.changes_on = changes_on
        if dsu is not None:
            self.dsu = dsu
        if provider is not None:
            self.provider = provider
        if entity is not None:
            self.entity = entity
        if is_included is not None:
            self.is_included = is_included
        if is_mandatory is not None:
            self.is_mandatory = is_mandatory
        if consolidation_mode is not None:
            self.consolidation_mode = consolidation_mode

    @property
    def changes_on(self):
        """Gets the changes_on of this EntityPipelineDynamicUpsertRequest.  # noqa: E501

        Gets or sets the changes on.  # noqa: E501

        :return: The changes_on of this EntityPipelineDynamicUpsertRequest.  # noqa: E501
        :rtype: str
        """
        return self._changes_on

    @changes_on.setter
    def changes_on(self, changes_on):
        """Sets the changes_on of this EntityPipelineDynamicUpsertRequest.

        Gets or sets the changes on.  # noqa: E501

        :param changes_on: The changes_on of this EntityPipelineDynamicUpsertRequest.  # noqa: E501
        :type: str
        """

        self._changes_on = changes_on

    @property
    def dsu(self):
        """Gets the dsu of this EntityPipelineDynamicUpsertRequest.  # noqa: E501

        Gets the DSU from the ChangesOn property.  # noqa: E501

        :return: The dsu of this EntityPipelineDynamicUpsertRequest.  # noqa: E501
        :rtype: str
        """
        return self._dsu

    @dsu.setter
    def dsu(self, dsu):
        """Sets the dsu of this EntityPipelineDynamicUpsertRequest.

        Gets the DSU from the ChangesOn property.  # noqa: E501

        :param dsu: The dsu of this EntityPipelineDynamicUpsertRequest.  # noqa: E501
        :type: str
        """

        self._dsu = dsu

    @property
    def provider(self):
        """Gets the provider of this EntityPipelineDynamicUpsertRequest.  # noqa: E501

        Gets the provider from the ChangesOn property.  # noqa: E501

        :return: The provider of this EntityPipelineDynamicUpsertRequest.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this EntityPipelineDynamicUpsertRequest.

        Gets the provider from the ChangesOn property.  # noqa: E501

        :param provider: The provider of this EntityPipelineDynamicUpsertRequest.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def entity(self):
        """Gets the entity of this EntityPipelineDynamicUpsertRequest.  # noqa: E501

        Gets the entity from the ChangesOn property.  # noqa: E501

        :return: The entity of this EntityPipelineDynamicUpsertRequest.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this EntityPipelineDynamicUpsertRequest.

        Gets the entity from the ChangesOn property.  # noqa: E501

        :param entity: The entity of this EntityPipelineDynamicUpsertRequest.  # noqa: E501
        :type: str
        """

        self._entity = entity

    @property
    def is_included(self):
        """Gets the is_included of this EntityPipelineDynamicUpsertRequest.  # noqa: E501

        Indicates if the entry has to be removed. IsIncluded = false  # noqa: E501

        :return: The is_included of this EntityPipelineDynamicUpsertRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_included

    @is_included.setter
    def is_included(self, is_included):
        """Sets the is_included of this EntityPipelineDynamicUpsertRequest.

        Indicates if the entry has to be removed. IsIncluded = false  # noqa: E501

        :param is_included: The is_included of this EntityPipelineDynamicUpsertRequest.  # noqa: E501
        :type: bool
        """

        self._is_included = is_included

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this EntityPipelineDynamicUpsertRequest.  # noqa: E501

        True if the entity must exit to run the extract. Otherwise, false  # noqa: E501

        :return: The is_mandatory of this EntityPipelineDynamicUpsertRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this EntityPipelineDynamicUpsertRequest.

        True if the entity must exit to run the extract. Otherwise, false  # noqa: E501

        :param is_mandatory: The is_mandatory of this EntityPipelineDynamicUpsertRequest.  # noqa: E501
        :type: bool
        """

        self._is_mandatory = is_mandatory

    @property
    def consolidation_mode(self):
        """Gets the consolidation_mode of this EntityPipelineDynamicUpsertRequest.  # noqa: E501


        :return: The consolidation_mode of this EntityPipelineDynamicUpsertRequest.  # noqa: E501
        :rtype: ConsolidationModes
        """
        return self._consolidation_mode

    @consolidation_mode.setter
    def consolidation_mode(self, consolidation_mode):
        """Sets the consolidation_mode of this EntityPipelineDynamicUpsertRequest.


        :param consolidation_mode: The consolidation_mode of this EntityPipelineDynamicUpsertRequest.  # noqa: E501
        :type: ConsolidationModes
        """

        self._consolidation_mode = consolidation_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityPipelineDynamicUpsertRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityPipelineDynamicUpsertRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
