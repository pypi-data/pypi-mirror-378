# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Field(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_key': 'bool',
        'is_retrievable': 'bool',
        'is_searchable': 'bool',
        'is_filterable': 'bool',
        'is_sortable': 'bool',
        'is_facetable': 'bool',
        'name': 'str',
        'type': 'DataType',
        'analyzer': 'AnalyzerName',
        'search_analyzer': 'AnalyzerName',
        'index_analyzer': 'AnalyzerName',
        'synonym_maps': 'list[str]',
        'fields': 'list[Field]'
    }

    attribute_map = {
        'is_key': 'isKey',
        'is_retrievable': 'isRetrievable',
        'is_searchable': 'isSearchable',
        'is_filterable': 'isFilterable',
        'is_sortable': 'isSortable',
        'is_facetable': 'isFacetable',
        'name': 'name',
        'type': 'type',
        'analyzer': 'analyzer',
        'search_analyzer': 'searchAnalyzer',
        'index_analyzer': 'indexAnalyzer',
        'synonym_maps': 'synonymMaps',
        'fields': 'fields'
    }

    def __init__(self, is_key=None, is_retrievable=None, is_searchable=None, is_filterable=None, is_sortable=None, is_facetable=None, name=None, type=None, analyzer=None, search_analyzer=None, index_analyzer=None, synonym_maps=None, fields=None):  # noqa: E501
        """Field - a model defined in Swagger"""  # noqa: E501
        self._is_key = None
        self._is_retrievable = None
        self._is_searchable = None
        self._is_filterable = None
        self._is_sortable = None
        self._is_facetable = None
        self._name = None
        self._type = None
        self._analyzer = None
        self._search_analyzer = None
        self._index_analyzer = None
        self._synonym_maps = None
        self._fields = None
        self.discriminator = None
        if is_key is not None:
            self.is_key = is_key
        if is_retrievable is not None:
            self.is_retrievable = is_retrievable
        if is_searchable is not None:
            self.is_searchable = is_searchable
        if is_filterable is not None:
            self.is_filterable = is_filterable
        if is_sortable is not None:
            self.is_sortable = is_sortable
        if is_facetable is not None:
            self.is_facetable = is_facetable
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if analyzer is not None:
            self.analyzer = analyzer
        if search_analyzer is not None:
            self.search_analyzer = search_analyzer
        if index_analyzer is not None:
            self.index_analyzer = index_analyzer
        if synonym_maps is not None:
            self.synonym_maps = synonym_maps
        if fields is not None:
            self.fields = fields

    @property
    def is_key(self):
        """Gets the is_key of this Field.  # noqa: E501


        :return: The is_key of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._is_key

    @is_key.setter
    def is_key(self, is_key):
        """Sets the is_key of this Field.


        :param is_key: The is_key of this Field.  # noqa: E501
        :type: bool
        """

        self._is_key = is_key

    @property
    def is_retrievable(self):
        """Gets the is_retrievable of this Field.  # noqa: E501


        :return: The is_retrievable of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._is_retrievable

    @is_retrievable.setter
    def is_retrievable(self, is_retrievable):
        """Sets the is_retrievable of this Field.


        :param is_retrievable: The is_retrievable of this Field.  # noqa: E501
        :type: bool
        """

        self._is_retrievable = is_retrievable

    @property
    def is_searchable(self):
        """Gets the is_searchable of this Field.  # noqa: E501


        :return: The is_searchable of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._is_searchable

    @is_searchable.setter
    def is_searchable(self, is_searchable):
        """Sets the is_searchable of this Field.


        :param is_searchable: The is_searchable of this Field.  # noqa: E501
        :type: bool
        """

        self._is_searchable = is_searchable

    @property
    def is_filterable(self):
        """Gets the is_filterable of this Field.  # noqa: E501


        :return: The is_filterable of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._is_filterable

    @is_filterable.setter
    def is_filterable(self, is_filterable):
        """Sets the is_filterable of this Field.


        :param is_filterable: The is_filterable of this Field.  # noqa: E501
        :type: bool
        """

        self._is_filterable = is_filterable

    @property
    def is_sortable(self):
        """Gets the is_sortable of this Field.  # noqa: E501


        :return: The is_sortable of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._is_sortable

    @is_sortable.setter
    def is_sortable(self, is_sortable):
        """Sets the is_sortable of this Field.


        :param is_sortable: The is_sortable of this Field.  # noqa: E501
        :type: bool
        """

        self._is_sortable = is_sortable

    @property
    def is_facetable(self):
        """Gets the is_facetable of this Field.  # noqa: E501


        :return: The is_facetable of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._is_facetable

    @is_facetable.setter
    def is_facetable(self, is_facetable):
        """Sets the is_facetable of this Field.


        :param is_facetable: The is_facetable of this Field.  # noqa: E501
        :type: bool
        """

        self._is_facetable = is_facetable

    @property
    def name(self):
        """Gets the name of this Field.  # noqa: E501


        :return: The name of this Field.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Field.


        :param name: The name of this Field.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Field.  # noqa: E501


        :return: The type of this Field.  # noqa: E501
        :rtype: DataType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Field.


        :param type: The type of this Field.  # noqa: E501
        :type: DataType
        """

        self._type = type

    @property
    def analyzer(self):
        """Gets the analyzer of this Field.  # noqa: E501


        :return: The analyzer of this Field.  # noqa: E501
        :rtype: AnalyzerName
        """
        return self._analyzer

    @analyzer.setter
    def analyzer(self, analyzer):
        """Sets the analyzer of this Field.


        :param analyzer: The analyzer of this Field.  # noqa: E501
        :type: AnalyzerName
        """

        self._analyzer = analyzer

    @property
    def search_analyzer(self):
        """Gets the search_analyzer of this Field.  # noqa: E501


        :return: The search_analyzer of this Field.  # noqa: E501
        :rtype: AnalyzerName
        """
        return self._search_analyzer

    @search_analyzer.setter
    def search_analyzer(self, search_analyzer):
        """Sets the search_analyzer of this Field.


        :param search_analyzer: The search_analyzer of this Field.  # noqa: E501
        :type: AnalyzerName
        """

        self._search_analyzer = search_analyzer

    @property
    def index_analyzer(self):
        """Gets the index_analyzer of this Field.  # noqa: E501


        :return: The index_analyzer of this Field.  # noqa: E501
        :rtype: AnalyzerName
        """
        return self._index_analyzer

    @index_analyzer.setter
    def index_analyzer(self, index_analyzer):
        """Sets the index_analyzer of this Field.


        :param index_analyzer: The index_analyzer of this Field.  # noqa: E501
        :type: AnalyzerName
        """

        self._index_analyzer = index_analyzer

    @property
    def synonym_maps(self):
        """Gets the synonym_maps of this Field.  # noqa: E501


        :return: The synonym_maps of this Field.  # noqa: E501
        :rtype: list[str]
        """
        return self._synonym_maps

    @synonym_maps.setter
    def synonym_maps(self, synonym_maps):
        """Sets the synonym_maps of this Field.


        :param synonym_maps: The synonym_maps of this Field.  # noqa: E501
        :type: list[str]
        """

        self._synonym_maps = synonym_maps

    @property
    def fields(self):
        """Gets the fields of this Field.  # noqa: E501


        :return: The fields of this Field.  # noqa: E501
        :rtype: list[Field]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Field.


        :param fields: The fields of this Field.  # noqa: E501
        :type: list[Field]
        """

        self._fields = fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Field, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Field):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
