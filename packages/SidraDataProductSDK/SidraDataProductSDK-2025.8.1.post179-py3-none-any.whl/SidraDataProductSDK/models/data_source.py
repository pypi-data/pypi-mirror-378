# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'type': 'DataSourceType',
        'credentials': 'DataSourceCredentials',
        'container': 'DataContainer',
        'data_change_detection_policy': 'DataChangeDetectionPolicy',
        'data_deletion_detection_policy': 'DataDeletionDetectionPolicy',
        'e_tag': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'type': 'type',
        'credentials': 'credentials',
        'container': 'container',
        'data_change_detection_policy': 'dataChangeDetectionPolicy',
        'data_deletion_detection_policy': 'dataDeletionDetectionPolicy',
        'e_tag': 'eTag'
    }

    def __init__(self, name=None, description=None, type=None, credentials=None, container=None, data_change_detection_policy=None, data_deletion_detection_policy=None, e_tag=None):  # noqa: E501
        """DataSource - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._type = None
        self._credentials = None
        self._container = None
        self._data_change_detection_policy = None
        self._data_deletion_detection_policy = None
        self._e_tag = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if type is not None:
            self.type = type
        if credentials is not None:
            self.credentials = credentials
        if container is not None:
            self.container = container
        if data_change_detection_policy is not None:
            self.data_change_detection_policy = data_change_detection_policy
        if data_deletion_detection_policy is not None:
            self.data_deletion_detection_policy = data_deletion_detection_policy
        if e_tag is not None:
            self.e_tag = e_tag

    @property
    def name(self):
        """Gets the name of this DataSource.  # noqa: E501


        :return: The name of this DataSource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataSource.


        :param name: The name of this DataSource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this DataSource.  # noqa: E501


        :return: The description of this DataSource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataSource.


        :param description: The description of this DataSource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this DataSource.  # noqa: E501


        :return: The type of this DataSource.  # noqa: E501
        :rtype: DataSourceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataSource.


        :param type: The type of this DataSource.  # noqa: E501
        :type: DataSourceType
        """

        self._type = type

    @property
    def credentials(self):
        """Gets the credentials of this DataSource.  # noqa: E501


        :return: The credentials of this DataSource.  # noqa: E501
        :rtype: DataSourceCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this DataSource.


        :param credentials: The credentials of this DataSource.  # noqa: E501
        :type: DataSourceCredentials
        """

        self._credentials = credentials

    @property
    def container(self):
        """Gets the container of this DataSource.  # noqa: E501


        :return: The container of this DataSource.  # noqa: E501
        :rtype: DataContainer
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this DataSource.


        :param container: The container of this DataSource.  # noqa: E501
        :type: DataContainer
        """

        self._container = container

    @property
    def data_change_detection_policy(self):
        """Gets the data_change_detection_policy of this DataSource.  # noqa: E501


        :return: The data_change_detection_policy of this DataSource.  # noqa: E501
        :rtype: DataChangeDetectionPolicy
        """
        return self._data_change_detection_policy

    @data_change_detection_policy.setter
    def data_change_detection_policy(self, data_change_detection_policy):
        """Sets the data_change_detection_policy of this DataSource.


        :param data_change_detection_policy: The data_change_detection_policy of this DataSource.  # noqa: E501
        :type: DataChangeDetectionPolicy
        """

        self._data_change_detection_policy = data_change_detection_policy

    @property
    def data_deletion_detection_policy(self):
        """Gets the data_deletion_detection_policy of this DataSource.  # noqa: E501


        :return: The data_deletion_detection_policy of this DataSource.  # noqa: E501
        :rtype: DataDeletionDetectionPolicy
        """
        return self._data_deletion_detection_policy

    @data_deletion_detection_policy.setter
    def data_deletion_detection_policy(self, data_deletion_detection_policy):
        """Sets the data_deletion_detection_policy of this DataSource.


        :param data_deletion_detection_policy: The data_deletion_detection_policy of this DataSource.  # noqa: E501
        :type: DataDeletionDetectionPolicy
        """

        self._data_deletion_detection_policy = data_deletion_detection_policy

    @property
    def e_tag(self):
        """Gets the e_tag of this DataSource.  # noqa: E501


        :return: The e_tag of this DataSource.  # noqa: E501
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this DataSource.


        :param e_tag: The e_tag of this DataSource.  # noqa: E501
        :type: str
        """

        self._e_tag = e_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
