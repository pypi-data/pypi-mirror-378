# coding: utf-8

"""
    Sidra App SDK

    Sidra App SDK  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: info@sidra.dev
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScoringProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'text_weights': 'TextWeights',
        'functions': 'list[ScoringFunction]',
        'function_aggregation': 'ScoringFunctionAggregation'
    }

    attribute_map = {
        'name': 'name',
        'text_weights': 'textWeights',
        'functions': 'functions',
        'function_aggregation': 'functionAggregation'
    }

    def __init__(self, name=None, text_weights=None, functions=None, function_aggregation=None):  # noqa: E501
        """ScoringProfile - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._text_weights = None
        self._functions = None
        self._function_aggregation = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if text_weights is not None:
            self.text_weights = text_weights
        if functions is not None:
            self.functions = functions
        if function_aggregation is not None:
            self.function_aggregation = function_aggregation

    @property
    def name(self):
        """Gets the name of this ScoringProfile.  # noqa: E501


        :return: The name of this ScoringProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScoringProfile.


        :param name: The name of this ScoringProfile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def text_weights(self):
        """Gets the text_weights of this ScoringProfile.  # noqa: E501


        :return: The text_weights of this ScoringProfile.  # noqa: E501
        :rtype: TextWeights
        """
        return self._text_weights

    @text_weights.setter
    def text_weights(self, text_weights):
        """Sets the text_weights of this ScoringProfile.


        :param text_weights: The text_weights of this ScoringProfile.  # noqa: E501
        :type: TextWeights
        """

        self._text_weights = text_weights

    @property
    def functions(self):
        """Gets the functions of this ScoringProfile.  # noqa: E501


        :return: The functions of this ScoringProfile.  # noqa: E501
        :rtype: list[ScoringFunction]
        """
        return self._functions

    @functions.setter
    def functions(self, functions):
        """Sets the functions of this ScoringProfile.


        :param functions: The functions of this ScoringProfile.  # noqa: E501
        :type: list[ScoringFunction]
        """

        self._functions = functions

    @property
    def function_aggregation(self):
        """Gets the function_aggregation of this ScoringProfile.  # noqa: E501


        :return: The function_aggregation of this ScoringProfile.  # noqa: E501
        :rtype: ScoringFunctionAggregation
        """
        return self._function_aggregation

    @function_aggregation.setter
    def function_aggregation(self, function_aggregation):
        """Sets the function_aggregation of this ScoringProfile.


        :param function_aggregation: The function_aggregation of this ScoringProfile.  # noqa: E501
        :type: ScoringFunctionAggregation
        """

        self._function_aggregation = function_aggregation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScoringProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScoringProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
