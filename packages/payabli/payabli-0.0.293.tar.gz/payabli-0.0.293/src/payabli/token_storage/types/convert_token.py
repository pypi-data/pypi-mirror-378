# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata


class ConvertToken(UniversalBaseModel):
    """
    Object containing the information needed to convert a temporary token to a permanent token.
    """

    method: str = pydantic.Field()
    """
    The type of payment method to tokenize. When converting a temp token to a permanent token, this should match the `method` set for the temporary token, either `ach` or `card`.
    """

    token_id: typing_extensions.Annotated[str, FieldMetadata(alias="tokenId")] = pydantic.Field()
    """
    A temporary stored token ID to be converted to permanent.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
