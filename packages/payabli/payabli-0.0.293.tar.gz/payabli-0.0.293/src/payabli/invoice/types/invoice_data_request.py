# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from ...types.bill_data import BillData
from ...types.bill_options import BillOptions
from ...types.payor_data_request import PayorDataRequest


class InvoiceDataRequest(UniversalBaseModel):
    customer_data: typing_extensions.Annotated[
        typing.Optional[PayorDataRequest], FieldMetadata(alias="customerData")
    ] = pydantic.Field(default=None)
    """
    Object describing the customer/payor. Required for POST requests. Which fields are required depends on the paypoint's custom identifier settings. 
    """

    invoice_data: typing_extensions.Annotated[typing.Optional[BillData], FieldMetadata(alias="invoiceData")] = (
        pydantic.Field(default=None)
    )
    """
    Object describing the invoice. Required for POST requests.
    """

    scheduled_options: typing_extensions.Annotated[
        typing.Optional[BillOptions], FieldMetadata(alias="scheduledOptions")
    ] = pydantic.Field(default=None)
    """
    Object with options for scheduled invoices.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
