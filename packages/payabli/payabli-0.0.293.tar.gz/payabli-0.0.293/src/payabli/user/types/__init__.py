# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .add_user_response import AddUserResponse
    from .auth_reset_user_response import AuthResetUserResponse
    from .change_psw_user_response import ChangePswUserResponse
    from .delete_user_response import DeleteUserResponse
    from .edit_mfa_user_response import EditMfaUserResponse
    from .logout_user_response import LogoutUserResponse
_dynamic_imports: typing.Dict[str, str] = {
    "AddUserResponse": ".add_user_response",
    "AuthResetUserResponse": ".auth_reset_user_response",
    "ChangePswUserResponse": ".change_psw_user_response",
    "DeleteUserResponse": ".delete_user_response",
    "EditMfaUserResponse": ".edit_mfa_user_response",
    "LogoutUserResponse": ".logout_user_response",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AddUserResponse",
    "AuthResetUserResponse",
    "ChangePswUserResponse",
    "DeleteUserResponse",
    "EditMfaUserResponse",
    "LogoutUserResponse",
]
