# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata


class StatBasicQueryRecord(UniversalBaseModel):
    stat_x: typing_extensions.Annotated[str, FieldMetadata(alias="statX")] = pydantic.Field()
    """
    Statistical grouping identifier
    """

    in_transactions: typing_extensions.Annotated[int, FieldMetadata(alias="inTransactions")] = pydantic.Field()
    """
    Number of incoming transactions
    """

    in_transactions_volume: typing_extensions.Annotated[float, FieldMetadata(alias="inTransactionsVolume")] = (
        pydantic.Field()
    )
    """
    Volume of incoming transactions
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
