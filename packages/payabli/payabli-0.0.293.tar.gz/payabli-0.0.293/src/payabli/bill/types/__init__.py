# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .bill_out_data import BillOutData
    from .bill_out_data_scheduled_options import BillOutDataScheduledOptions
    from .bill_response import BillResponse
    from .bill_response_data import BillResponseData
    from .edit_bill_response import EditBillResponse
    from .get_bill_response import GetBillResponse
    from .modify_approval_bill_response import ModifyApprovalBillResponse
    from .set_approved_bill_response import SetApprovedBillResponse
_dynamic_imports: typing.Dict[str, str] = {
    "BillOutData": ".bill_out_data",
    "BillOutDataScheduledOptions": ".bill_out_data_scheduled_options",
    "BillResponse": ".bill_response",
    "BillResponseData": ".bill_response_data",
    "EditBillResponse": ".edit_bill_response",
    "GetBillResponse": ".get_bill_response",
    "ModifyApprovalBillResponse": ".modify_approval_bill_response",
    "SetApprovedBillResponse": ".set_approved_bill_response",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "BillOutData",
    "BillOutDataScheduledOptions",
    "BillResponse",
    "BillResponseData",
    "EditBillResponse",
    "GetBillResponse",
    "ModifyApprovalBillResponse",
    "SetApprovedBillResponse",
]
