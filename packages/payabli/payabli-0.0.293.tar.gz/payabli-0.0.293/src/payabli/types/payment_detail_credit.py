# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class PaymentDetailCredit(UniversalBaseModel):
    """
    The PaymentDetail object for microdeposit (MakeCredit) transactions.
    """

    currency: typing.Optional[str] = pydantic.Field(default=None)
    """
    Currency code ISO-4217. If not code is provided the currency in the paypoint setting is taken. Default is **USD**
    """

    service_fee: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="serviceFee")] = (
        pydantic.Field(default=None)
    )
    """
    Service fee to be deducted from the total amount. This amount must be a number, percentages aren't accepted. If you are using a percentage-based fee schedule, you must calculate the value manually.
    """

    total_amount: typing_extensions.Annotated[float, FieldMetadata(alias="totalAmount")] = pydantic.Field()
    """
    Total amount to be charged. If a service fee is provided, then this amount should include the service fee.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
