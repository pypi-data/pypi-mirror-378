# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .template_element import TemplateElement
from .visible import Visible


class BankSection(UniversalBaseModel):
    """
    Details about a bank account.
    """

    visible: typing.Optional[Visible] = None
    account_number: typing_extensions.Annotated[
        typing.Optional[TemplateElement], FieldMetadata(alias="accountNumber")
    ] = None
    account_type: typing_extensions.Annotated[typing.Optional[TemplateElement], FieldMetadata(alias="accountType")] = (
        None
    )
    bank_name: typing_extensions.Annotated[typing.Optional[TemplateElement], FieldMetadata(alias="bankName")] = None
    routing_number: typing_extensions.Annotated[
        typing.Optional[TemplateElement], FieldMetadata(alias="routingNumber")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
