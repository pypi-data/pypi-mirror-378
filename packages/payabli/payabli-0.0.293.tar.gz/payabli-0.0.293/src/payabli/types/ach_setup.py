# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class AchSetup(UniversalBaseModel):
    accept_ccd: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="acceptCCD")] = pydantic.Field(
        default=None
    )
    """
    CCD is an ACH SEC Code that can be used in ACH transactions by the user that indicates the transaction is a Corporate Credit or Debit Entry. Options are: `true` and `false`
    """

    accept_ppd: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="acceptPPD")] = pydantic.Field(
        default=None
    )
    """
    PPD is an ACH SEC Code that can be used in ACH transactions by the user that indicates the transaction is a Prearranged Payment and Deposit. 
    """

    accept_web: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="acceptWeb")] = pydantic.Field(
        default=None
    )
    """
    Web is an ACH SEC Code that can be used in ACH transactions by the user that indicates the transaction is a Internet Initiated/Mobile Entry Options are `true` and `false`.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
