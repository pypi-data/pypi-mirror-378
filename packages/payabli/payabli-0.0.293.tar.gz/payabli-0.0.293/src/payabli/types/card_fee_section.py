# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .template_element import TemplateElement
from .visible import Visible


class CardFeeSection(UniversalBaseModel):
    ach_batch_card_fee: typing_extensions.Annotated[
        typing.Optional[TemplateElement], FieldMetadata(alias="achBatchCardFee")
    ] = None
    annual_card_fee: typing_extensions.Annotated[
        typing.Optional[TemplateElement], FieldMetadata(alias="annualCardFee")
    ] = None
    avs_card_fee: typing_extensions.Annotated[typing.Optional[TemplateElement], FieldMetadata(alias="avsCardFee")] = (
        None
    )
    chargeback_card_fee: typing_extensions.Annotated[
        typing.Optional[TemplateElement], FieldMetadata(alias="chargebackCardFee")
    ] = None
    dda_rejects_card_fee: typing_extensions.Annotated[
        typing.Optional[TemplateElement], FieldMetadata(alias="ddaRejectsCardFee")
    ] = None
    early_termination_card_fee: typing_extensions.Annotated[
        typing.Optional[TemplateElement], FieldMetadata(alias="earlyTerminationCardFee")
    ] = None
    minimum_processing_card_fee: typing_extensions.Annotated[
        typing.Optional[TemplateElement], FieldMetadata(alias="minimumProcessingCardFee")
    ] = None
    monthly_pci_card_fee: typing_extensions.Annotated[
        typing.Optional[TemplateElement], FieldMetadata(alias="monthlyPCICardFee")
    ] = None
    montly_platform_card_fee: typing_extensions.Annotated[
        typing.Optional[TemplateElement], FieldMetadata(alias="montlyPlatformCardFee")
    ] = None
    retrieval_card_fee: typing_extensions.Annotated[
        typing.Optional[TemplateElement], FieldMetadata(alias="retrievalCardFee")
    ] = None
    transaction_card_fee: typing_extensions.Annotated[
        typing.Optional[TemplateElement], FieldMetadata(alias="transactionCardFee")
    ] = None
    visible: typing.Optional[Visible] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
