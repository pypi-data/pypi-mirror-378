# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .page_identifier import PageIdentifier
from .pagesize import Pagesize


class QueryPayoutTransactionSummary(UniversalBaseModel):
    page_identifier: typing_extensions.Annotated[
        typing.Optional[PageIdentifier], FieldMetadata(alias="pageIdentifier")
    ] = None
    page_size: typing_extensions.Annotated[typing.Optional[Pagesize], FieldMetadata(alias="pageSize")] = None
    total_amount: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="totalAmount")] = None
    total_authorized: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="totalAuthorized")] = None
    total_authorized_amount: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="totalAuthorizedAmount")
    ] = None
    total_canceled: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="totalCanceled")] = None
    total_canceled_amount: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="totalCanceledAmount")
    ] = None
    total_captured: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="totalCaptured")] = None
    total_captured_amount: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="totalCapturedAmount")
    ] = None
    total_net_amount: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="totalNetAmount")] = None
    total_open: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="totalOpen")] = None
    total_open_amount: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="totalOpenAmount")] = (
        None
    )
    total_pages: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="totalPages")] = None
    total_paid: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="totalPaid")] = None
    total_paid_amount: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="totalPaidAmount")] = (
        None
    )
    total_on_hold: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="totalOnHold")] = (
        pydantic.Field(default=None)
    )
    """
    Total number of transactions that are currently on hold. 
    """

    total_on_hold_amount: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="totalOnHoldAmount")
    ] = pydantic.Field(default=None)
    """
    Total amount of transactions that are currently on hold. 
    """

    total_processing: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="totalProcessing")] = None
    total_processing_amount: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="totalProcessingAmount")
    ] = None
    total_records: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="totalRecords")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
