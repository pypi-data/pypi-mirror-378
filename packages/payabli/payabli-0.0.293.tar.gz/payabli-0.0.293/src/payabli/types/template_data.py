# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .orgid import Orgid
from .template_code import TemplateCode
from .template_content import TemplateContent
from .template_name import TemplateName


class TemplateData(UniversalBaseModel):
    """
    Object containing the template's data.
    """

    org_id: typing_extensions.Annotated[typing.Optional[Orgid], FieldMetadata(alias="orgId")] = pydantic.Field(
        default=None
    )
    """
    The ID of the organization the template belongs to. 
    """

    pricing_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="pricingId")] = None
    template_code: typing_extensions.Annotated[typing.Optional[TemplateCode], FieldMetadata(alias="templateCode")] = (
        None
    )
    template_content: typing_extensions.Annotated[
        typing.Optional[TemplateContent], FieldMetadata(alias="templateContent")
    ] = None
    template_description: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="templateDescription")
    ] = pydantic.Field(default=None)
    """
    A description for the template.
    """

    template_name: typing_extensions.Annotated[typing.Optional[TemplateName], FieldMetadata(alias="templateName")] = (
        None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
