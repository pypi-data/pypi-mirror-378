# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .query_transaction_events_event_data import QueryTransactionEventsEventData


class QueryTransactionEvents(UniversalBaseModel):
    event_data: typing_extensions.Annotated[
        typing.Optional[QueryTransactionEventsEventData], FieldMetadata(alias="EventData")
    ] = pydantic.Field(default=None)
    """
    Any data associated to the event received from processor. Contents vary by event type.
    """

    event_time: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="EventTime")] = (
        pydantic.Field(default=None)
    )
    """
    Date and time of event.
    """

    trans_event: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="TransEvent")] = pydantic.Field(
        default=None
    )
    """
    Event descriptor. See [TransEvent Reference](/developers/references/transevents) for more details.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
