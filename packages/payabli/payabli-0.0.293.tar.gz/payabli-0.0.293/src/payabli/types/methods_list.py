# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class MethodsList(UniversalBaseModel):
    amex: typing.Optional[bool] = pydantic.Field(default=None)
    """
    When `true`, American Express is accepted.
    """

    apple_pay: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="applePay")] = pydantic.Field(
        default=None
    )
    """
    When `true`, Apple Pay is accepted.
    """

    google_pay: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="googlePay")] = pydantic.Field(
        default=None
    )
    """
    When `true`, Google Pay is accepted.
    """

    discover: typing.Optional[bool] = pydantic.Field(default=None)
    """
    When `true`, Discover is accepted.
    """

    e_check: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="eCheck")] = pydantic.Field(
        default=None
    )
    """
    When `true`, ACH is accepted.
    """

    mastercard: typing.Optional[bool] = pydantic.Field(default=None)
    """
    When `true`, Mastercard is accepted.
    """

    visa: typing.Optional[bool] = pydantic.Field(default=None)
    """
    When `true`, Visa is accepted.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
