# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class VendorPaymentMethod(UniversalBaseModel):
    """
    Payment method object to use for the payout.
    - `{ method: "managed" }` - Managed payment method
    - `{ method: "vcard" }` - Virtual card payment method
    - `{ method: "check" }` - Check payment method
    - `{ method: "ach", storedMethodId?: "..." }` - ACH payment method with optional stored method ID
    """

    method: str = pydantic.Field()
    """
    Payment method type - "managed", "vcard", "check", or "ach"
    """

    stored_method_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="storedMethodId")] = (
        pydantic.Field(default=None)
    )
    """
    ID of the stored ACH payment method. Only applicable when method is "ach". Required when using a previously saved ACH method when the vendor has more than one saved method. See the [Payouts with saved ACH payment methods](/developers/developer-guides/pay-out-manage-payouts) section for more details.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
