# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .key_value_duo import KeyValueDuo
from .notification_report_request_content_file_format import NotificationReportRequestContentFileFormat
from .notification_report_request_content_report_name import NotificationReportRequestContentReportName
from .timezone import Timezone


class NotificationReportRequestContent(UniversalBaseModel):
    event_type: typing_extensions.Annotated[
        typing.Optional[typing.Literal["Report"]], FieldMetadata(alias="eventType")
    ] = pydantic.Field(default=None)
    """
    The notification's event name.
    """

    file_format: typing_extensions.Annotated[
        typing.Optional[NotificationReportRequestContentFileFormat], FieldMetadata(alias="fileFormat")
    ] = pydantic.Field(default=None)
    """
    Indicate the format of report file to be generated by the engine.
    """

    internal_data: typing_extensions.Annotated[
        typing.Optional[typing.List[KeyValueDuo]], FieldMetadata(alias="internalData")
    ] = pydantic.Field(default=None)
    """
    Array of pairs key:value to insert in request body to target in **method** = *report-web*.
    """

    report_name: typing_extensions.Annotated[
        typing.Optional[NotificationReportRequestContentReportName], FieldMetadata(alias="reportName")
    ] = pydantic.Field(default=None)
    """
    The kind report to generate.
    """

    time_zone: typing_extensions.Annotated[typing.Optional[Timezone], FieldMetadata(alias="timeZone")] = None
    transaction_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="transactionId")] = (
        pydantic.Field(default=None)
    )
    """
    Used internally to reference the entity or object generating the event.
    """

    web_header_parameters: typing_extensions.Annotated[
        typing.Optional[typing.List[KeyValueDuo]], FieldMetadata(alias="webHeaderParameters")
    ] = pydantic.Field(default=None)
    """
    Array of pairs key:value to insert in header of request to target in **method** = *report-web*.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
