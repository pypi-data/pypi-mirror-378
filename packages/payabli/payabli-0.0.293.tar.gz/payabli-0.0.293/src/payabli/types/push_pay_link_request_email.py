# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class PushPayLinkRequestEmail(UniversalBaseModel):
    additional_emails: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="additionalEmails")
    ] = pydantic.Field(default=None)
    """
    List of additional email addresses you want to send the paylink to, formatted as an array. 
    Payment links and opt-in requests are sent to the customer email address on file, and additional 
    recipients can be specified here.
    """

    attach_file: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="attachFile")] = pydantic.Field(
        default=None
    )
    """
    When `true`, attaches a PDF version of the invoice to the email.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
