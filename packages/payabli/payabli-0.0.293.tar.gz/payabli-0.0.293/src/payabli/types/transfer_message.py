# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .transfer_message_properties import TransferMessageProperties


class TransferMessage(UniversalBaseModel):
    id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="Id")] = None
    room_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="RoomId")] = None
    user_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="UserId")] = None
    user_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="UserName")] = None
    content: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="Content")] = None
    created_at: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="CreatedAt")] = None
    message_type: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="MessageType")] = None
    message_properties: typing_extensions.Annotated[
        typing.Optional[TransferMessageProperties], FieldMetadata(alias="MessageProperties")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
