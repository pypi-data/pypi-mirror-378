# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .bill_details_response import BillDetailsResponse
from .comments import Comments
from .created_at import CreatedAt
from .dbaname import Dbaname
from .entry import Entry
from .external_paypoint_id import ExternalPaypointId
from .fee_amount import FeeAmount
from .file_content import FileContent
from .gatewayfield import Gatewayfield
from .has_vcard_transactions import HasVcardTransactions
from .is_same_day_ach import IsSameDayAch
from .last_modified import LastModified
from .legalname import Legalname
from .netamountnullable import Netamountnullable
from .org_parent_id import OrgParentId
from .org_parent_name import OrgParentName
from .payment_id_string import PaymentIdString
from .query_payment_data import QueryPaymentData
from .query_transaction_events import QueryTransactionEvents
from .risk_action import RiskAction
from .risk_action_code import RiskActionCode
from .risk_flagged import RiskFlagged
from .risk_flagged_on import RiskFlaggedOn
from .risk_reason import RiskReason
from .risk_status import RiskStatus
from .schedule_id import ScheduleId
from .settlement_status import SettlementStatus
from .source import Source
from .vendor_query_record import VendorQueryRecord


class BillDetailResponse(UniversalBaseModel):
    bills: typing_extensions.Annotated[
        typing.Optional[typing.List[BillDetailsResponse]], FieldMetadata(alias="Bills")
    ] = pydantic.Field(default=None)
    """
    Events associated to this transaction.
    """

    check_data: typing_extensions.Annotated[typing.Optional[FileContent], FieldMetadata(alias="CheckData")] = (
        pydantic.Field(default=None)
    )
    """
    Object referencing to paper check image.
    """

    check_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="CheckNumber")] = (
        pydantic.Field(default=None)
    )
    """
    Paper check number related to payout transaction.
    """

    comments: typing_extensions.Annotated[typing.Optional[Comments], FieldMetadata(alias="Comments")] = pydantic.Field(
        default=None
    )
    """
    Any comment or description for payout transaction.
    """

    created_date: typing_extensions.Annotated[typing.Optional[CreatedAt], FieldMetadata(alias="CreatedDate")] = (
        pydantic.Field(default=None)
    )
    """
    Timestamp when the payment was created, in UTC.
    """

    created_at: typing_extensions.Annotated[typing.Optional[CreatedAt], FieldMetadata(alias="CreatedAt")] = None
    events: typing_extensions.Annotated[
        typing.Optional[typing.List[QueryTransactionEvents]], FieldMetadata(alias="Events")
    ] = pydantic.Field(default=None)
    """
    Events associated to this transaction.
    """

    fee_amount: typing_extensions.Annotated[typing.Optional[FeeAmount], FieldMetadata(alias="FeeAmount")] = None
    gateway: typing_extensions.Annotated[typing.Optional[Gatewayfield], FieldMetadata(alias="Gateway")] = None
    id_out: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="IdOut")] = pydantic.Field(
        default=None
    )
    """
    Identifier of payout transaction.
    """

    last_updated: typing_extensions.Annotated[typing.Optional[LastModified], FieldMetadata(alias="LastUpdated")] = (
        pydantic.Field(default=None)
    )
    """
    Timestamp when payment record was updated, in UTC.
    """

    net_amount: typing_extensions.Annotated[typing.Optional[Netamountnullable], FieldMetadata(alias="NetAmount")] = None
    parent_org_name: typing_extensions.Annotated[
        typing.Optional[OrgParentName], FieldMetadata(alias="ParentOrgName")
    ] = None
    parent_org_id: typing_extensions.Annotated[typing.Optional[OrgParentId], FieldMetadata(alias="ParentOrgId")] = None
    payment_data: typing_extensions.Annotated[typing.Optional[QueryPaymentData], FieldMetadata(alias="PaymentData")] = (
        None
    )
    payment_group: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="PaymentGroup")] = (
        pydantic.Field(default=None)
    )
    """
    Unique identifier for group or batch containing the transaction.
    """

    payment_id: typing_extensions.Annotated[typing.Optional[PaymentIdString], FieldMetadata(alias="PaymentId")] = None
    payment_method: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="PaymentMethod")] = (
        pydantic.Field(default=None)
    )
    """
    Method of payment applied to the transaction.
    """

    payment_status: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="PaymentStatus")] = (
        pydantic.Field(default=None)
    )
    """
    Status of payout transaction.
    """

    paypoint_dbaname: typing_extensions.Annotated[typing.Optional[Dbaname], FieldMetadata(alias="PaypointDbaname")] = (
        None
    )
    paypoint_legalname: typing_extensions.Annotated[
        typing.Optional[Legalname], FieldMetadata(alias="PaypointLegalname")
    ] = pydantic.Field(default=None)
    """
    Paypoint legal name.
    """

    source: typing_extensions.Annotated[typing.Optional[Source], FieldMetadata(alias="Source")] = None
    status: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="Status")] = pydantic.Field(
        default=None
    )
    """
    Internal status of transaction.
    """

    status_text: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="StatusText")] = pydantic.Field(
        default=None
    )
    """
    Status of payout transaction.
    """

    total_amount: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="TotalAmount")] = (
        pydantic.Field(default=None)
    )
    """
    Transaction total amount (including service fee or sub-charge).
    """

    vendor: typing_extensions.Annotated[typing.Optional[VendorQueryRecord], FieldMetadata(alias="Vendor")] = (
        pydantic.Field(default=None)
    )
    """
    Vendor related to the payout transaction.
    """

    external_paypoint_id: typing_extensions.Annotated[
        typing.Optional[ExternalPaypointId], FieldMetadata(alias="externalPaypointID")
    ] = None
    entry_name: typing_extensions.Annotated[typing.Optional[Entry], FieldMetadata(alias="EntryName")] = None
    batch_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="BatchId")] = pydantic.Field(
        default=None
    )
    """
    Identifier for the batch in which this transaction was processed. Used to track and reconcile batch-level operations.
    """

    has_vcard_transactions: typing_extensions.Annotated[
        typing.Optional[HasVcardTransactions], FieldMetadata(alias="HasVcardTransactions")
    ] = None
    is_same_day_ach: typing_extensions.Annotated[typing.Optional[IsSameDayAch], FieldMetadata(alias="IsSameDayACH")] = (
        None
    )
    schedule_id: typing_extensions.Annotated[typing.Optional[ScheduleId], FieldMetadata(alias="ScheduleId")] = None
    settlement_status: typing_extensions.Annotated[
        typing.Optional[SettlementStatus], FieldMetadata(alias="SettlementStatus")
    ] = None
    risk_flagged: typing_extensions.Annotated[typing.Optional[RiskFlagged], FieldMetadata(alias="RiskFlagged")] = None
    risk_flagged_on: typing_extensions.Annotated[
        typing.Optional[RiskFlaggedOn], FieldMetadata(alias="RiskFlaggedOn")
    ] = None
    risk_status: typing_extensions.Annotated[typing.Optional[RiskStatus], FieldMetadata(alias="RiskStatus")] = None
    risk_reason: typing_extensions.Annotated[typing.Optional[RiskReason], FieldMetadata(alias="RiskReason")] = None
    risk_action: typing_extensions.Annotated[typing.Optional[RiskAction], FieldMetadata(alias="RiskAction")] = None
    risk_action_code: typing_extensions.Annotated[
        typing.Optional[RiskActionCode], FieldMetadata(alias="RiskActionCode")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
