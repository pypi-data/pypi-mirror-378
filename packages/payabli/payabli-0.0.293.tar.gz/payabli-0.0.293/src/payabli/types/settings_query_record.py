# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .key_value import KeyValue


class SettingsQueryRecord(UniversalBaseModel):
    custom_fields: typing_extensions.Annotated[
        typing.Optional[typing.List[KeyValue]], FieldMetadata(alias="customFields")
    ] = pydantic.Field(default=None)
    """
    Any custom fields defined for the org.
    """

    for_invoices: typing_extensions.Annotated[
        typing.Optional[typing.List[KeyValue]], FieldMetadata(alias="forInvoices")
    ] = None
    for_pay_outs: typing_extensions.Annotated[
        typing.Optional[typing.List[KeyValue]], FieldMetadata(alias="forPayOuts")
    ] = None
    for_wallets: typing_extensions.Annotated[
        typing.Optional[typing.List[KeyValue]], FieldMetadata(alias="forWallets")
    ] = pydantic.Field(default=None)
    """
    Information about digital wallet settings for the entity. Available values are `isApplePayEnabled` and `isGooglePayEnabled`.
    """

    general: typing.Optional[typing.List[KeyValue]] = pydantic.Field(default=None)
    """
    
    """

    identifiers: typing.Optional[typing.List[KeyValue]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
