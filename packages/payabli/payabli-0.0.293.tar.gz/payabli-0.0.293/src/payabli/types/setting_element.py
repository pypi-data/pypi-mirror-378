# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .display_property import DisplayProperty
from .enabled import Enabled
from .order import Order


class SettingElement(UniversalBaseModel):
    enabled: typing.Optional[Enabled] = None
    fields: typing.Optional[typing.List[DisplayProperty]] = pydantic.Field(default=None)
    """
    Fields to display on the reciept.
    """

    order: typing.Optional[Order] = None
    send_auto: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="sendAuto")] = pydantic.Field(
        default=None
    )
    """
    When `true`, Payabli automatically sends the receipt to the payor email address. 
    """

    send_manual: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="sendManual")] = pydantic.Field(
        default=None
    )
    """
    When `true`, you must send the reciept to the payor manually using the [/MoneyIn/sendreceipt/\{transId\}](/api-reference/moneyin/send-receipt-for-transaction) endpoint.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
