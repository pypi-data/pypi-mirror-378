# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .sub_footer import SubFooter
from .sub_header import SubHeader
from .template_additional_data_section import TemplateAdditionalDataSection
from .template_element import TemplateElement
from .visible import Visible


class OwnersSection(UniversalBaseModel):
    """
    Information about a business owner.
    """

    contact_email: typing_extensions.Annotated[
        typing.Optional[TemplateElement], FieldMetadata(alias="contactEmail")
    ] = None
    contact_name: typing_extensions.Annotated[typing.Optional[TemplateElement], FieldMetadata(alias="contactName")] = (
        None
    )
    contact_phone: typing_extensions.Annotated[
        typing.Optional[TemplateElement], FieldMetadata(alias="contactPhone")
    ] = None
    contact_title: typing_extensions.Annotated[
        typing.Optional[TemplateElement], FieldMetadata(alias="contactTitle")
    ] = None
    multiple_contacts: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="multipleContacts")] = (
        pydantic.Field(default=None)
    )
    """
    Offer add more contacts
    """

    multiple_owners: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="multipleOwners")] = (
        pydantic.Field(default=None)
    )
    """
    offer add more owners
    """

    oaddress: typing.Optional[TemplateElement] = None
    ocity: typing.Optional[TemplateElement] = None
    ocountry: typing.Optional[TemplateElement] = None
    odriverstate: typing.Optional[TemplateElement] = None
    ostate: typing.Optional[TemplateElement] = None
    ownerdob: typing.Optional[TemplateElement] = None
    ownerdriver: typing.Optional[TemplateElement] = None
    owneremail: typing.Optional[TemplateElement] = None
    ownername: typing.Optional[TemplateElement] = None
    ownerpercent: typing.Optional[TemplateElement] = None
    ownerphone_1: typing_extensions.Annotated[typing.Optional[TemplateElement], FieldMetadata(alias="ownerphone1")] = (
        None
    )
    ownerphone_2: typing_extensions.Annotated[typing.Optional[TemplateElement], FieldMetadata(alias="ownerphone2")] = (
        None
    )
    ownerssn: typing.Optional[TemplateElement] = None
    ownertitle: typing.Optional[TemplateElement] = None
    ozip: typing.Optional[TemplateElement] = None
    sub_footer: typing_extensions.Annotated[typing.Optional[SubFooter], FieldMetadata(alias="subFooter")] = None
    sub_header: typing_extensions.Annotated[typing.Optional[SubHeader], FieldMetadata(alias="subHeader")] = None
    visible: typing.Optional[Visible] = None
    additional_data: typing_extensions.Annotated[
        typing.Optional[TemplateAdditionalDataSection], FieldMetadata(alias="additionalData")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
