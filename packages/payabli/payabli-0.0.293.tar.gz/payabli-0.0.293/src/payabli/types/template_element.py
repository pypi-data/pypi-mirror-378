# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .pos_col import PosCol
from .pos_row import PosRow
from .read_only import ReadOnly
from .value_templates import ValueTemplates
from .visible import Visible


class TemplateElement(UniversalBaseModel):
    pos_col: typing_extensions.Annotated[typing.Optional[PosCol], FieldMetadata(alias="posCol")] = None
    pos_row: typing_extensions.Annotated[typing.Optional[PosRow], FieldMetadata(alias="posRow")] = None
    read_only: typing_extensions.Annotated[typing.Optional[ReadOnly], FieldMetadata(alias="readOnly")] = None
    value: typing.Optional[ValueTemplates] = None
    visible: typing.Optional[Visible] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
