# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata


class VCardGetResponseAssociatedVendorBillingData(UniversalBaseModel):
    """
    Billing data for the vendor.
    """

    id: typing.Optional[int] = pydantic.Field(default=None)
    """
    Unique identifier for billing data.
    """

    account_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountId")] = pydantic.Field(
        default=None
    )
    """
    Account identifier.
    """

    nickname: typing.Optional[str] = pydantic.Field(default=None)
    """
    Nickname for the account.
    """

    bank_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="bankName")] = pydantic.Field(
        default=None
    )
    """
    Name of the bank used for transactions.
    """

    routing_account: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="routingAccount")] = (
        pydantic.Field(default=None)
    )
    """
    Routing number for the bank account.
    """

    account_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountNumber")] = (
        pydantic.Field(default=None)
    )
    """
    Masked account number for transactions.
    """

    type_account: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="typeAccount")] = (
        pydantic.Field(default=None)
    )
    """
    Type of the bank account.
    """

    bank_account_holder_name: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="bankAccountHolderName")
    ] = pydantic.Field(default=None)
    """
    Name of the bank account holder.
    """

    bank_account_holder_type: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="bankAccountHolderType")
    ] = pydantic.Field(default=None)
    """
    Type of bank account holder.
    """

    bank_account_function: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="bankAccountFunction")
    ] = pydantic.Field(default=None)
    """
    Function of the bank account.
    """

    verified: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates if the account is verified.
    """

    status: typing.Optional[int] = pydantic.Field(default=None)
    """
    Status of the billing data.
    """

    services: typing.Optional[typing.List[typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Services associated with the account.
    """

    default: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates if this is the default billing account.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
