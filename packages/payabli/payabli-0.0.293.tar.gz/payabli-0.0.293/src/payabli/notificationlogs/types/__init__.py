# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .bulk_retry_request import BulkRetryRequest
    from .key_value_array import KeyValueArray
    from .notification_log import NotificationLog
    from .notification_log_detail import NotificationLogDetail
    from .notification_log_search_request import NotificationLogSearchRequest
    from .string_string_key_value_pair import StringStringKeyValuePair
_dynamic_imports: typing.Dict[str, str] = {
    "BulkRetryRequest": ".bulk_retry_request",
    "KeyValueArray": ".key_value_array",
    "NotificationLog": ".notification_log",
    "NotificationLogDetail": ".notification_log_detail",
    "NotificationLogSearchRequest": ".notification_log_search_request",
    "StringStringKeyValuePair": ".string_string_key_value_pair",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "BulkRetryRequest",
    "KeyValueArray",
    "NotificationLog",
    "NotificationLogDetail",
    "NotificationLogSearchRequest",
    "StringStringKeyValuePair",
]
