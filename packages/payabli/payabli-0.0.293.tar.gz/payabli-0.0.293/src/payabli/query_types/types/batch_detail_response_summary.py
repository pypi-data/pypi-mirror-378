# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from ...types.page_identifier import PageIdentifier
from ...types.pagesize import Pagesize
from ...types.totalpages import Totalpages
from ...types.totalrecords import Totalrecords


class BatchDetailResponseSummary(UniversalBaseModel):
    service_fees: typing_extensions.Annotated[float, FieldMetadata(alias="serviceFees")]
    transfer_amount: typing_extensions.Annotated[float, FieldMetadata(alias="transferAmount")]
    refunds: float
    held_amount: typing_extensions.Annotated[float, FieldMetadata(alias="heldAmount")]
    total_records: typing_extensions.Annotated[Totalrecords, FieldMetadata(alias="totalRecords")]
    total_amount: typing_extensions.Annotated[float, FieldMetadata(alias="totalAmount")]
    total_net_amount: typing_extensions.Annotated[float, FieldMetadata(alias="totalNetAmount")]
    total_pages: typing_extensions.Annotated[Totalpages, FieldMetadata(alias="totalPages")]
    page_size: typing_extensions.Annotated[Pagesize, FieldMetadata(alias="pageSize")]
    pageidentifier: typing.Optional[PageIdentifier] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
