# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .batch_detail_response_record import BatchDetailResponseRecord
    from .batch_detail_response_summary import BatchDetailResponseSummary
    from .limit_record import LimitRecord
    from .list_organizations_response import ListOrganizationsResponse
    from .query_batches_detail_response import QueryBatchesDetailResponse
    from .query_batches_response import QueryBatchesResponse
    from .query_batches_response_records_item import QueryBatchesResponseRecordsItem
    from .query_batches_transfer import QueryBatchesTransfer
    from .query_transfer_detail_response import QueryTransferDetailResponse
    from .query_transfer_response import QueryTransferResponse
    from .query_transfer_summary import QueryTransferSummary
    from .transfer_detail_record import TransferDetailRecord
_dynamic_imports: typing.Dict[str, str] = {
    "BatchDetailResponseRecord": ".batch_detail_response_record",
    "BatchDetailResponseSummary": ".batch_detail_response_summary",
    "LimitRecord": ".limit_record",
    "ListOrganizationsResponse": ".list_organizations_response",
    "QueryBatchesDetailResponse": ".query_batches_detail_response",
    "QueryBatchesResponse": ".query_batches_response",
    "QueryBatchesResponseRecordsItem": ".query_batches_response_records_item",
    "QueryBatchesTransfer": ".query_batches_transfer",
    "QueryTransferDetailResponse": ".query_transfer_detail_response",
    "QueryTransferResponse": ".query_transfer_response",
    "QueryTransferSummary": ".query_transfer_summary",
    "TransferDetailRecord": ".transfer_detail_record",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "BatchDetailResponseRecord",
    "BatchDetailResponseSummary",
    "LimitRecord",
    "ListOrganizationsResponse",
    "QueryBatchesDetailResponse",
    "QueryBatchesResponse",
    "QueryBatchesResponseRecordsItem",
    "QueryBatchesTransfer",
    "QueryTransferDetailResponse",
    "QueryTransferResponse",
    "QueryTransferSummary",
    "TransferDetailRecord",
]
