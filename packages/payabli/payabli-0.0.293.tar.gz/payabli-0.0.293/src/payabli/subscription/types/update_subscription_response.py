# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from ...types.customer_id import CustomerId
from ...types.is_success import IsSuccess
from ...types.response_text import ResponseText


class UpdateSubscriptionResponse(UniversalBaseModel):
    """
    Success response
    """

    is_success: typing_extensions.Annotated[typing.Optional[IsSuccess], FieldMetadata(alias="isSuccess")] = None
    response_data: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="responseData")] = (
        pydantic.Field(default=None)
    )
    """
    
    If `isSuccess` = true, this contains the identifier of the subscription, and sometimes extra information, depending on what was updated.
    
    If `isSuccess` = false, this contains the reason for the failure.
    """

    response_text: typing_extensions.Annotated[ResponseText, FieldMetadata(alias="responseText")]
    customer_id: typing_extensions.Annotated[typing.Optional[CustomerId], FieldMetadata(alias="customerId")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
