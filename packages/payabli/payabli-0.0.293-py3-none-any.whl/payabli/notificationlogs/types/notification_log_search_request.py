# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata


class NotificationLogSearchRequest(UniversalBaseModel):
    start_date: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="startDate")] = pydantic.Field()
    """
    The start date for the search.
    """

    end_date: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="endDate")] = pydantic.Field()
    """
    The end date for the search.
    """

    notification_event: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="notificationEvent")] = (
        pydantic.Field(default=None)
    )
    """
    The type of notification event to filter by.
    """

    succeeded: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether the notification was successful.
    """

    org_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="orgId")] = pydantic.Field(
        default=None
    )
    """
    The ID of the organization to filter by.
    """

    paypoint_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="paypointId")] = pydantic.Field(
        default=None
    )
    """
    The ID of the paypoint to filter by.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
