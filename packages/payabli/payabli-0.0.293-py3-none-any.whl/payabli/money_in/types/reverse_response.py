# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from ...types.is_success import IsSuccess
from ...types.page_identifier import PageIdentifier
from ...types.response_text import ResponseText
from ...types.responsecode import Responsecode
from .response_data_refunds import ResponseDataRefunds


class ReverseResponse(UniversalBaseModel):
    response_code: typing_extensions.Annotated[Responsecode, FieldMetadata(alias="responseCode")]
    page_identifier: typing_extensions.Annotated[
        typing.Optional[PageIdentifier], FieldMetadata(alias="pageIdentifier")
    ] = None
    room_id: typing_extensions.Annotated[int, FieldMetadata(alias="roomId")]
    is_success: typing_extensions.Annotated[IsSuccess, FieldMetadata(alias="isSuccess")]
    response_text: typing_extensions.Annotated[ResponseText, FieldMetadata(alias="responseText")]
    response_data: typing_extensions.Annotated[ResponseDataRefunds, FieldMetadata(alias="responseData")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
