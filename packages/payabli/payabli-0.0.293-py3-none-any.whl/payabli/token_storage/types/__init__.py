# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .add_method_response import AddMethodResponse
    from .add_method_response_response_data import AddMethodResponseResponseData
    from .convert_token import ConvertToken
    from .create_anonymous import CreateAnonymous
    from .get_method_response import GetMethodResponse
    from .get_method_response_response_data import GetMethodResponseResponseData
    from .get_method_response_response_data_customers_item import GetMethodResponseResponseDataCustomersItem
    from .request_token_storage import RequestTokenStorage
    from .request_token_storage_payment_method import RequestTokenStoragePaymentMethod
    from .temporary import Temporary
    from .tokenize_ach import TokenizeAch
    from .tokenize_card import TokenizeCard
_dynamic_imports: typing.Dict[str, str] = {
    "AddMethodResponse": ".add_method_response",
    "AddMethodResponseResponseData": ".add_method_response_response_data",
    "ConvertToken": ".convert_token",
    "CreateAnonymous": ".create_anonymous",
    "GetMethodResponse": ".get_method_response",
    "GetMethodResponseResponseData": ".get_method_response_response_data",
    "GetMethodResponseResponseDataCustomersItem": ".get_method_response_response_data_customers_item",
    "RequestTokenStorage": ".request_token_storage",
    "RequestTokenStoragePaymentMethod": ".request_token_storage_payment_method",
    "Temporary": ".temporary",
    "TokenizeAch": ".tokenize_ach",
    "TokenizeCard": ".tokenize_card",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AddMethodResponse",
    "AddMethodResponseResponseData",
    "ConvertToken",
    "CreateAnonymous",
    "GetMethodResponse",
    "GetMethodResponseResponseData",
    "GetMethodResponseResponseDataCustomersItem",
    "RequestTokenStorage",
    "RequestTokenStoragePaymentMethod",
    "Temporary",
    "TokenizeAch",
    "TokenizeCard",
]
