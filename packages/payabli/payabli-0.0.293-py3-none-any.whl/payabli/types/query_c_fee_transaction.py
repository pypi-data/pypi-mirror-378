# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .transaction_time import TransactionTime


class QueryCFeeTransaction(UniversalBaseModel):
    c_fee_transid: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="cFeeTransid")] = None
    fee_amount: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="feeAmount")] = None
    operation: typing.Optional[str] = None
    refund_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="refundId")] = None
    response_data: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]], FieldMetadata(alias="responseData")
    ] = None
    settlement_status: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="settlementStatus")] = None
    transaction_time: typing_extensions.Annotated[
        typing.Optional[TransactionTime], FieldMetadata(alias="transactionTime")
    ] = None
    trans_status: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="transStatus")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
