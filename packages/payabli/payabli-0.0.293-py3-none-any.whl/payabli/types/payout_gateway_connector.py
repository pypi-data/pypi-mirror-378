# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class PayoutGatewayConnector(UniversalBaseModel):
    configuration: typing.Optional[str] = None
    name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="Name")] = None
    mode: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="Mode")] = None
    bank: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="Bank")] = None
    descriptor: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="Descriptor")] = None
    gateway_id: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="gatewayID")] = None
    enabled: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="Enabled")] = None
    enable_ach_validation: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="EnableACHValidation")
    ] = None
    test_mode: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="TestMode")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
