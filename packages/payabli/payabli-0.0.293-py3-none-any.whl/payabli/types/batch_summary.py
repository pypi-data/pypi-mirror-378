# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .page_identifier import PageIdentifier


class BatchSummary(UniversalBaseModel):
    """
    Examples
    --------
    from payabli import BatchSummary

    BatchSummary(
        page_size=20,
        total_amount=0.0,
        total_net_amount=0.0,
        total_pages=411,
        total_records=8203,
    )
    """

    pageidentifier: typing.Optional[PageIdentifier] = None
    page_size: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="pageSize")] = pydantic.Field(
        default=None
    )
    """
    Number of records on each response page.
    """

    total_amount: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="totalAmount")] = (
        pydantic.Field(default=None)
    )
    """
    Total amount for the records.
    """

    total_net_amount: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="totalNetAmount")] = (
        pydantic.Field(default=None)
    )
    """
    Total net amount for the records.
    """

    total_pages: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="totalPages")] = pydantic.Field(
        default=None
    )
    """
    Total number of pages in response.
    """

    total_records: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="totalRecords")] = (
        pydantic.Field(default=None)
    )
    """
    Total number of records in response.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
