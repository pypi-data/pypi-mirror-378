# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .page_identifier import PageIdentifier
from .pagesize import Pagesize
from .totalpages import Totalpages
from .totalrecords import Totalrecords


class VCardSummary(UniversalBaseModel):
    total_pages: typing_extensions.Annotated[Totalpages, FieldMetadata(alias="totalPages")]
    total_records: typing_extensions.Annotated[Totalrecords, FieldMetadata(alias="totalRecords")]
    total_amount: typing_extensions.Annotated[float, FieldMetadata(alias="totalAmount")] = pydantic.Field()
    """
    Total amount for the records.
    """

    totalactive: int = pydantic.Field()
    """
    Total number of active vCards.
    """

    totalamounteactive: float = pydantic.Field()
    """
    Total amount of active vCards.
    """

    totalbalanceactive: float = pydantic.Field()
    """
    Total balance of active vCards.
    """

    page_identifier: typing_extensions.Annotated[
        typing.Optional[PageIdentifier], FieldMetadata(alias="pageIdentifier")
    ] = None
    page_size: typing_extensions.Annotated[typing.Optional[Pagesize], FieldMetadata(alias="pageSize")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
