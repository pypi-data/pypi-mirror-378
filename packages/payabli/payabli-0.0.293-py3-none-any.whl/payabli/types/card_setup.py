# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class CardSetup(UniversalBaseModel):
    accept_amex: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="acceptAmex")] = pydantic.Field(
        default=None
    )
    """
    Determines whether American Express is accepted.
    """

    accept_discover: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="acceptDiscover")] = (
        pydantic.Field(default=None)
    )
    """
    Determines whether Discover is accepted.
    """

    accept_mastercard: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="acceptMastercard")] = (
        pydantic.Field(default=None)
    )
    """
    Determines whether Mastercard is accepted.
    """

    accept_visa: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="acceptVisa")] = pydantic.Field(
        default=None
    )
    """
    Determines whether Visa is accepted.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
