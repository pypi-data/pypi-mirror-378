# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class FrequencyList(UniversalBaseModel):
    annually: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Enable or disable frequency
    """

    every_2_weeks: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="every2Weeks")] = (
        pydantic.Field(default=None)
    )
    """
    Enable or disable frequency
    """

    every_3_months: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="every3Months")] = (
        pydantic.Field(default=None)
    )
    """
    Enable or disable frequency
    """

    every_6_months: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="every6Months")] = (
        pydantic.Field(default=None)
    )
    """
    Enable or disable frequency
    """

    monthly: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Enable or disable frequency
    """

    one_time: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="one-time")] = pydantic.Field(
        default=None
    )
    """
    Enable or disable frequency
    """

    weekly: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Enable or disable frequency
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
