# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .accept_oauth import AcceptOauth
from .accept_register import AcceptRegister
from .builder_data import BuilderData
from .entry_attributes import EntryAttributes
from .file_content import FileContent
from .orgid import Orgid
from .page_identifier import PageIdentifier
from .recipient_email_notification import RecipientEmailNotification
from .reference_name import ReferenceName
from .reference_template_id import ReferenceTemplateId
from .resumable import Resumable


class BoardingLinkQueryRecord(UniversalBaseModel):
    accept_oauth: typing_extensions.Annotated[typing.Optional[AcceptOauth], FieldMetadata(alias="acceptOauth")] = None
    accept_register: typing_extensions.Annotated[
        typing.Optional[AcceptRegister], FieldMetadata(alias="acceptRegister")
    ] = None
    builder_data: typing_extensions.Annotated[typing.Optional[BuilderData], FieldMetadata(alias="builderData")] = None
    entry_attributes: typing_extensions.Annotated[
        typing.Optional[EntryAttributes], FieldMetadata(alias="entryAttributes")
    ] = None
    id: typing.Optional[int] = None
    logo: typing.Optional[FileContent] = pydantic.Field(default=None)
    """
    Object containing logo file.
    """

    org_id: typing_extensions.Annotated[typing.Optional[Orgid], FieldMetadata(alias="orgId")] = None
    page_identifier: typing_extensions.Annotated[
        typing.Optional[PageIdentifier], FieldMetadata(alias="pageIdentifier:")
    ] = None
    recipient_email_notification: typing_extensions.Annotated[
        typing.Optional[RecipientEmailNotification], FieldMetadata(alias="recipientEmailNotification")
    ] = None
    reference_name: typing_extensions.Annotated[
        typing.Optional[ReferenceName], FieldMetadata(alias="referenceName")
    ] = None
    reference_template_id: typing_extensions.Annotated[
        typing.Optional[ReferenceTemplateId], FieldMetadata(alias="referenceTemplateId")
    ] = None
    resumable: typing.Optional[Resumable] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
