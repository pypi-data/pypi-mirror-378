# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .additional_data_string import AdditionalDataString
from .email import Email


class Contacts(UniversalBaseModel):
    contact_email: typing_extensions.Annotated[typing.Optional[Email], FieldMetadata(alias="contactEmail")] = (
        pydantic.Field(default=None)
    )
    """
    Contact email address.
    """

    contact_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="contactName")] = (
        pydantic.Field(default=None)
    )
    """
    Contact name.
    """

    contact_phone: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="contactPhone")] = (
        pydantic.Field(default=None)
    )
    """
    Contact phone number.
    """

    contact_title: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="contactTitle")] = (
        pydantic.Field(default=None)
    )
    """
    Contact title.
    """

    additional_data: typing_extensions.Annotated[
        typing.Optional[AdditionalDataString], FieldMetadata(alias="additionalData")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
