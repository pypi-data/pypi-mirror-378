# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .enabled import Enabled
from .order import Order


class ContactElement(UniversalBaseModel):
    email_label: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="emailLabel")] = pydantic.Field(
        default=None
    )
    """
    Custom content for email
    """

    enabled: typing.Optional[Enabled] = None
    header: typing.Optional[str] = pydantic.Field(default=None)
    """
    Header text for section
    """

    order: typing.Optional[Order] = None
    payment_icons: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="paymentIcons")] = (
        pydantic.Field(default=None)
    )
    """
    Flag indicating if icons for accepted card brands will be shown
    """

    phone_label: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="phoneLabel")] = pydantic.Field(
        default=None
    )
    """
    Custom content for phone number
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
