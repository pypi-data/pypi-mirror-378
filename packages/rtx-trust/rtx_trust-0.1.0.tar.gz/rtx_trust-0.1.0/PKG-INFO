Metadata-Version: 2.3
Name: rtx-trust
Version: 0.1.0
Summary: Real Tracker X: cross-ecosystem dependency trust scanner
Project-URL: Homepage, https://github.com/afadesigns/rtx
Project-URL: Documentation, https://afadesigns.github.io/rtx
Project-URL: Repository, https://github.com/afadesigns/rtx
Project-URL: Issues, https://github.com/afadesigns/rtx/issues
Project-URL: Changelog, https://github.com/afadesigns/rtx/blob/main/CHANGELOG.md
Author: Andreas Fahl
License: MIT License
        
        Copyright (c) 2025 Andreas Fahl
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE
Keywords: dependencies,osv,sbom,security,supply-chain
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Security
Classifier: Topic :: Software Development :: Build Tools
Requires-Python: >=3.11
Requires-Dist: httpx==0.27.0
Requires-Dist: jinja2==3.1.4
Requires-Dist: packaging==24.1
Requires-Dist: pyyaml==6.0.1
Requires-Dist: rich==13.7.1
Provides-Extra: dev
Requires-Dist: bandit==1.7.9; extra == 'dev'
Requires-Dist: coverage==7.6.4; extra == 'dev'
Requires-Dist: hypothesis==6.112.2; extra == 'dev'
Requires-Dist: mypy==1.11.1; extra == 'dev'
Requires-Dist: pytest-asyncio==0.23.7; extra == 'dev'
Requires-Dist: pytest-cov==5.0.0; extra == 'dev'
Requires-Dist: pytest==8.3.3; extra == 'dev'
Requires-Dist: respx==0.20.2; extra == 'dev'
Requires-Dist: ruff==0.6.2; extra == 'dev'
Requires-Dist: semgrep==1.71.0; extra == 'dev'
Requires-Dist: types-pyyaml==6.0.12.20240917; extra == 'dev'
Provides-Extra: docs
Requires-Dist: mkdocs-material==9.5.14; extra == 'docs'
Requires-Dist: mkdocs==1.5.3; extra == 'docs'
Requires-Dist: mkdocstrings[python]==0.25.1; extra == 'docs'
Provides-Extra: fuzz
Requires-Dist: atheris==2.3.0; extra == 'fuzz'
Description-Content-Type: text/markdown

# rtx — Real Tracker X

![PyPI](https://img.shields.io/badge/pypi-coming--soon-lightgrey)
![CI](https://github.com/afadesigns/rtx/actions/workflows/ci.yml/badge.svg)
![Coverage](https://img.shields.io/badge/coverage-95%25-brightgreen)
![License](https://img.shields.io/badge/license-MIT-blue)
![Downloads](https://img.shields.io/badge/downloads-prelaunch-lightgrey)
![SLSA](https://img.shields.io/badge/SLSA-level%203-blueviolet)

**Author:** Andreas Fahl  
**Tagline:** Cross-ecosystem dependency trust scanner for secure upgrades.

## Problem
Modern software supply chains depend on sprawling, fast-moving dependency graphs. Teams struggle to evaluate risk before upgrading, face alert fatigue from siloed advisories, and lack unified visibility across ecosystems. Compromised maintainers, typosquats, and abandoned packages frequently slip past point-in-time audits.

## Solution
rtx pre-computes the blast radius of any change. It ingests manifests from Python, JavaScript, Java, Rust, Go, PHP, .NET, Ruby, Conda, and Homebrew projects, builds a full dependency tree, enriches it with OSV and GitHub advisories, and evaluates trust using transparent heuristics (abandonment, churn, maintainer health, typosquats). Reports yield deterministic exit codes for CI and can be exported as Rich tables, JSON, or HTML bundles.

## Demo (10s Asciinema)
[![asciicast](docs/assets/demo.gif)](docs/demo.md)

## Installation
```bash
pip install rtx-trust
```

## Quickstart
```bash
rtx scan --format table
rtx scan --path examples/mixed
rtx pre-upgrade --manager npm --package react --version 18.0.0
rtx report --format json --output reports/rtx.json
```

## CLI Overview
- `rtx scan`: Detect manifests in the current directory, build the dependency graph, and score trust.
- `rtx pre-upgrade`: Simulate dependency upgrades and compare trust deltas before applying.
- `rtx report`: Render persisted reports in JSON, table, or HTML formats for CI workflows.
- `rtx list-managers`: List supported package managers, manifest file patterns, and detection confidence.

## Library API
```python
from pathlib import Path
from rtx.api import scan_project
report = scan_project(Path("./my-service"), managers=["npm", "pypi"])
print(report.summary())
```

## Examples
- `examples/npm`: Node.js service with npm lockfiles.
- `examples/pypi`: Python project using `pyproject.toml` and `uv.lock`.
- `examples/mixed`: Polyglot workspace combining npm, Poetry, Maven, Cargo, and Docker.

## Architecture
- Modular scanners per ecosystem share a common threat-evaluation core.
- Advisory providers (OSV, GitHub, ecosystem feeds) run asynchronously with caching.
- Trust policy engine computes risk scores and exit codes.
- SBOM generator emits CycloneDX v1.5 for every scan and pre-upgrade run.

## Security Notes
- No install scripts are executed; all metadata resolution is offline-first with bounded timeouts.
- All dependencies are vendored with hashes; CI blocks on unpinned packages.
- Releases publish signed wheels, SBOMs, and SLSA provenance via GitHub OIDC + cosign.

## Roadmap
1. Artifact attestation for container images.
2. Native integrations for Maven Enforcer and Gradle.
3. Streaming trust dashboards with anomaly alerts.
4. Workspace diff views for GitHub, GitLab, and Bitbucket Apps.

## FAQ
**Why another dependency scanner?** rtx focuses on pre-upgrade guardrails, not post-incident triage.  
**Does it phone home?** No. Network requests are limited to advisories and metadata endpoints; they respect enterprise proxies.  
**Can I extend support?** Yes. Create a plugin under `src/rtx/scanners` and register it in `rtx.registry`.  
**How do exit codes map to severity?** 0 = safe, 1 = medium trust gaps, 2 = high/critical risk.

## Community & Support
- Read the [Code of Conduct](CODE_OF_CONDUCT.md).
- See [CONTRIBUTING.md](CONTRIBUTING.md) for onboarding.
- File security issues via [SECURITY.md](SECURITY.md) or /.well-known/security.txt.
- Discussions and roadmaps live under GitHub Discussions.

## Author Attribution
Copyright © 2025 Andreas Fahl.
