name: Build Wheels

on:
  push:
    tags: ['v*']
    branches: ['feat/test_build']
  pull_request:
    branches: [main, master]
  workflow_dispatch:
  workflow_call:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{ github.ref }}
          # Ensure full history to prevent setuptools_scm issues
          fetch-depth: 0


      # For Windows, we need to manually install pip
      - name: Set up Windows environment
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip

      - name: Build wheels
        # Using explicit command to avoid empty parameter issues on Windows
        run: |
          python -m pip install cibuildwheel==2.16.2
          python -m cibuildwheel
        env:
          CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
          CIBW_SKIP: pp* *-musllinux* *-win32 *-i686
          CIBW_ARCHS_LINUX: x86_64
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_ARCHS_WINDOWS: AMD64
          
          # 更健壮的依赖安装方式
          CIBW_BEFORE_ALL_LINUX: |
            if command -v yum &>/dev/null; then
              # Try multiple times with increasing timeouts (network issues)
              for i in 1 2 3; do
                echo "Attempt $i: Installing dependencies with yum..."
                yum install -y cmake gcc-c++ && break || sleep 5
              done
            elif command -v apt-get &>/dev/null; then
              echo "Installing dependencies with apt..."
              apt-get update -y && apt-get install -y cmake g++
            elif command -v apk &>/dev/null; then
              echo "Installing dependencies with apk..."
              apk add --no-cache cmake g++
            else
              echo "No supported package manager found!"
              exit 1
            fi
          CIBW_BEFORE_ALL_MACOS: |
            brew install cmake
          CIBW_BEFORE_ALL_WINDOWS: |
            choco install cmake
          
          # 简单的测试
          CIBW_TEST_COMMAND: |
            python -c "from dicube.codecs.jph import JphCodec; print('Import test passed successfully')"

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{ github.ref }}
          # Ensure full history to prevent setuptools_scm issues
          fetch-depth: 0

      - uses: ./.github/actions/setup-python-env
        with:
          python-version: '3.9'

      - name: Build sdist
        run: |
          pip install build setuptools_scm
          python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz 