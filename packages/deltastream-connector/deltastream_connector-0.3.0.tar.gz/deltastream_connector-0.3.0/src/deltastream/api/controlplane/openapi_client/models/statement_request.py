# coding: utf-8

"""
    DeltaStream REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from deltastream.api.controlplane.openapi_client.models.statement_request_parameters import StatementRequestParameters
from typing import Optional, Set
from typing_extensions import Self

class StatementRequest(BaseModel):
    """
    StatementRequest
    """ # noqa: E501
    statement: StrictStr = Field(description="DeltaStream SQL statement or batch of SQL statements to execute")
    organization: Optional[StrictStr] = Field(default=None, description="Organization Name or ID in which the statement should be executed")
    role: Optional[StrictStr] = Field(default=None, description="Role to use when executing a statement. This value is case sensitive")
    database: Optional[StrictStr] = Field(default=None, description="Database to add to search path for name resolution. This value is case sensitive")
    var_schema: Optional[StrictStr] = Field(default=None, description="Database schema to add to search path for name resolution. This value is case sensitive", alias="schema")
    store: Optional[StrictStr] = Field(default=None, description="Store to use when executing a statement. This value is case sensitive")
    compute_pool: Optional[StrictStr] = Field(default=None, description="Compute_pool to use when executing a statement. This value is case sensitive", alias="computePool")
    parameters: Optional[StatementRequestParameters] = None
    __properties: ClassVar[List[str]] = ["statement", "organization", "role", "database", "schema", "store", "computePool", "parameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatementRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatementRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "statement": obj.get("statement"),
            "organization": obj.get("organization"),
            "role": obj.get("role"),
            "database": obj.get("database"),
            "schema": obj.get("schema"),
            "store": obj.get("store"),
            "computePool": obj.get("computePool"),
            "parameters": StatementRequestParameters.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None
        })
        return _obj


