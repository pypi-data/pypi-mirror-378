# coding: utf-8

"""
    DeltaStream Dataplane REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from deltastream.api.dataplane.openapi_client.models.result_set_columns_inner import ResultSetColumnsInner
from deltastream.api.dataplane.openapi_client.models.result_set_partition_info import ResultSetPartitionInfo
from typing import Optional, Set
from typing_extensions import Self

class ResultSetMetadata(BaseModel):
    """
    ResultSetMetadata
    """ # noqa: E501
    encoding: StrictStr
    partition_info: List[ResultSetPartitionInfo] = Field(alias="partitionInfo")
    columns: Annotated[List[ResultSetColumnsInner], Field(min_length=0)]
    __properties: ClassVar[List[str]] = ["encoding", "partitionInfo", "columns"]

    @field_validator('encoding')
    def encoding_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['json']):
            raise ValueError("must be one of enum values ('json')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResultSetMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in partition_info (list)
        _items = []
        if self.partition_info:
            for _item_partition_info in self.partition_info:
                if _item_partition_info:
                    _items.append(_item_partition_info.to_dict())
            _dict['partitionInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in columns (list)
        _items = []
        if self.columns:
            for _item_columns in self.columns:
                if _item_columns:
                    _items.append(_item_columns.to_dict())
            _dict['columns'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResultSetMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "encoding": obj.get("encoding"),
            "partitionInfo": [ResultSetPartitionInfo.from_dict(_item) for _item in obj["partitionInfo"]] if obj.get("partitionInfo") is not None else None,
            "columns": [ResultSetColumnsInner.from_dict(_item) for _item in obj["columns"]] if obj.get("columns") is not None else None
        })
        return _obj


