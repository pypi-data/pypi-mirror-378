id: secret-finding-analyzer

metadata:
  author: "Mazin Ahmed"
  tags:
    - secret-detection
    - security
    - code-analysis
    - automation
  category: "Security"
  description: >
    Analyzes an input or git diff to identify potential secret findings. Returns a verdict on whether the finding is valid, a confidence score, and a detailed summary, all in JSON format.

system_prompt: >
  You are a security-focused AI assistant specializing in identifying hardcoded secrets in code changes. Analyze the provided input or git diff for potential secrets such as API keys, passwords, tokens, or credentials.

prompt: >
  Analyze the following input or git diff for potential secret findings. Your response should strictly follow this JSON format:


  If no valid secrets are detected, return an empty list under the `findings` key.
  Analyze the following input or git diff for potential secret findings. Provide the analysis in JSON format as follows:
  {
    "findings": [
      {
        "is_valid_finding": BOOLEAN_VALUE,
        "confidence_score": CONFIDENCE_SCORE,
        "summary": "SUMMARY_OF_SECRET"
      }
    ]
  }
  Explanation of the fields:
  - `is_valid_finding`: Boolean value (`true` or `false`) indicating if the finding is a valid secret.
  - `confidence_score`: A number from 0 to 100, where a higher score indicates greater confidence in the validity of the finding.
  - `summary`: A detailed explanation of the detected secret, reasoning for its identification, and possible remediation steps.

  Input:
  {{ diff }}

variables:
  diff: |
    diff --git a/config.py b/config.py
    + API_KEY = "12345-abcdef-67890-ghijk"
    + DATABASE_PASSWORD = "password123"
