id: detect-security-vulnerabilities

metadata:
  author: "Mazin"
  tags:
    - security
    - vulnerabilities
    - application-security
  category: "Security"
  description: >
    A template to analyze source code or application snippets to detect
    common security vulnerabilities such as XSS, SQL Injection, IDOR, and Race Conditions.

system_prompt: >
  You are a seasoned application security engineer. Your task is to analyze code snippets for potential vulnerabilities. 
  Provide findings in JSON format only, with no additional information or context.

prompt: >
  Analyze the following code snippet for potential application security vulnerabilities:
  - Cross-Site Scripting (XSS)
  - SQL Injection (SQLI)
  - Insecure Direct Object Reference (IDOR)
  - Race Condition
  - SSRF
  - Misconfigurations.
  and all possible code security vulnerabilities.

  Return your findings in this JSON format:
  {
      "findings": [
          {
              "vulnerability": "VULNERABILITY_NAME",
              "description": "DETAILED_DESCRIPTION",
              "code_snippet": "CODE_SNIPPET"
              "line_number": LINE_NUMBER,
              "severity": "SEVERITY_LEVEL"
          },
          ...
      ]
  }
  SEVERITY_LEVEL is low, medium, high, critical.
  If no vulnerabilities are identified, return an empty array for the findings key.

  Code snippet:
  {{ code }}

variables:
  code: >
    # app/controllers/vulnerable_controller.rb
    class VulnerableController < ApplicationController
      
      before_action :set_user, only: [:show, :edit, :update, :destroy]
      before_action :authenticate_user!

      # GET /users
      def index
        @users = User.where("name LIKE '%#{params[:search]}%'") if params[:search].present?
        @users ||= User.all
      end

      # GET /users/:id
      def show
        @user_name = params[:user_name] || @user.name
      end

      # GET /users/new
      def new
        @user = User.new
      end

      # POST /users
      def create
        @user = User.new(user_params)

        if @user.save
          redirect_to @user, notice: 'User was successfully created.'
        else
          render :new, status: :unprocessable_entity
        end
      end

      # GET /users/:id/edit
      def edit
      end


      # PATCH/PUT /users/:id
      def update
        if User.connection.execute("UPDATE users SET email = '#{params[:email]}' WHERE id = #{@user.id}")
          redirect_to @user, notice: 'User was successfully updated.'
        else
          render :edit, status: :unprocessable_entity
        end
      end

      # DELETE /users/:id
      def destroy
        @user.destroy
        redirect_to users_url, notice: 'User was successfully destroyed.'
      end

      private

      def set_user
        @user = User.find(params[:id])
      end

      def user_params
        # Permits only trusted parameters, but potential mass-assignment risks exist
        params.require(:user).permit(:name, :email, :password, :admin)
      end
    end

# code: |
#   const userInput = req.query("input");
#   const query = `SELECT * FROM users WHERE username = '${userInput}'`;
#   db.execute(query);
