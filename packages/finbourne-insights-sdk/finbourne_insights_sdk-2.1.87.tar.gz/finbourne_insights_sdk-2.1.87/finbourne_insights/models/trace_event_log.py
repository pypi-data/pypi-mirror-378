# coding: utf-8

"""
    FINBOURNE Insights API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, conlist, constr 
from finbourne_insights.models.link import Link

class TraceEventLog(BaseModel):
    """
    Holds information about a trace event.  # noqa: E501
    """
    trace_event_id:  StrictStr = Field(...,alias="traceEventId", description="The identifier of the trace event.") 
    trace_id:  StrictStr = Field(...,alias="traceId", description="The identifier of the parent trace.") 
    created_at: datetime = Field(..., alias="createdAt", description="The datetime at which the trace event was created.")
    event_type:  StrictStr = Field(...,alias="eventType", description="The type of the trace event.") 
    content:  StrictStr = Field(...,alias="content", description="The content of the trace event.") 
    session_id:  StrictStr = Field(...,alias="sessionId", description="The session ID of the trace event.") 
    circuit_id:  StrictStr = Field(...,alias="circuitId", description="The ID of the circuit in which the trace event occurred.") 
    circuit_version:  StrictStr = Field(...,alias="circuitVersion", description="The version of the circuit in which the trace event occurred.") 
    node_id:  StrictStr = Field(...,alias="nodeId", description="The ID of the circuit's node at which the trace event occured.") 
    links: Optional[conlist(Link)] = None
    __properties = ["traceEventId", "traceId", "createdAt", "eventType", "content", "sessionId", "circuitId", "circuitVersion", "nodeId", "links"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TraceEventLog:
        """Create an instance of TraceEventLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # set to None if links (nullable) is None
        # and __fields_set__ contains the field
        if self.links is None and "links" in self.__fields_set__:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TraceEventLog:
        """Create an instance of TraceEventLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TraceEventLog.parse_obj(obj)

        _obj = TraceEventLog.parse_obj({
            "trace_event_id": obj.get("traceEventId"),
            "trace_id": obj.get("traceId"),
            "created_at": obj.get("createdAt"),
            "event_type": obj.get("eventType"),
            "content": obj.get("content"),
            "session_id": obj.get("sessionId"),
            "circuit_id": obj.get("circuitId"),
            "circuit_version": obj.get("circuitVersion"),
            "node_id": obj.get("nodeId"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None
        })
        return _obj
