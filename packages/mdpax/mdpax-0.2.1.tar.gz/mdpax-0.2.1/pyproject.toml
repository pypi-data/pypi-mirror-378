[project]
name = "mdpax"
version = "0.2.1"
description = "GPU-accelerated MDP solvers in Python with JAX"
authors = [{name = "Joe Farrington", email = "farrington.joe@gmail.com"}]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    # Linux: CUDA-enabled JAX
    "jax[cuda12]>=0.4.30; sys_platform == 'linux'",
    # Other platforms: CPU-only
    "jax>=0.4.30; sys_platform != 'linux'",
    "chex>=0.1.88",
    "numpyro>=0.16.1",
    "orbax>=0.1.9",
    "loguru>=0.7.3",
    "hydra-core>=1.3.2",
    "jaxtyping>=0.2.36",
    "numpy>=1.26.0",
]

[project.optional-dependencies]
docs = [
    "sphinx>=7.4.7",
    "sphinx-rtd-theme>=3.0.2",
    "nbsphinx>=0.9.6",
    "ipython>=8.18.1",
    "myst-parser>=4.0.0",
]
examples = [
    "pymdptoolbox>=4.0b3",
    "matplotlib>=3.9.4",
    "jupyter>=1.1.1",
]
examples-colab = [
    "pymdptoolbox>=4.0b3",
    "orbax-checkpoint==0.11.23",
]

[dependency-groups]
dev = [
    "pymdptoolbox>=4.0b3",
    "pandas>=2.2.2",
    "jupyter>=1.1.1",
    "black>=24.10.0",
    "ruff>=0.8.3",
    "pytest>=8.3.4",
    "ipython>=8.18.1",
    "matplotlib>=3.9.4",
    "pytest-datadir>=1.5.0",
    "pre-commit>=4.0.1",
    "sphinx>=7.4.7",
    "sphinx-rtd-theme>=3.0.2",
    "nbsphinx>=0.9.6",
    "ipython>=8.18.1",
    "myst-parser>=4.0.0",
    "pytest-cov>=7.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 88

[tool.ruff]
line-length = 88
fix = true
extend-exclude = ["*.ipynb"]

[tool.ruff.lint]
select = ["E", "F", "I"]
fixable = ["ALL"]
unfixable = []
ignore = [
    "E501",
    "F722",
    "F821",
]

[tool.ruff.lint.isort]
force-single-line = false
combine-as-imports = true

[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "serial",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
