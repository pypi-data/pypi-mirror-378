[project]
name = "autonomize-model-sdk"
version = "1.1.70"
description = "SDK for creating and managing machine learning pipelines."
authors = [
    {name = "Jagveer Singh", email = "jagveer@autonomize.ai"}
]
license = {text = "Proprietary"}
repository = "https://github.com/autonomize-ai/autonomize-model-sdk.git"
homepage = "https://github.com/autonomize-ai/autonomize-model-sdk.git"
readme = "README.md"
requires-python = ">=3.12,<3.13"
keywords = ["machine learning", "sdk", "mlflow", "modelhub", "inference"]
classifiers = [
    "Intended Audience :: Developers",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core dependencies that should always be installed
    "pydantic>=2.10.6,<3.0.0",
    "pyyaml>=6.0,<7.0",
    "requests>=2.32.2,<3.0.0",
    "python-dotenv>=1.0.1,<2.0.0",
    "httpx>=0.28.1",
    "datasets>=3.2.0,<4.0.0",
    "autonomize-core>=0.1.15",
]

[project.optional-dependencies]
# Base utilities
aiohttp = ["aiohttp>=3.8.3,<4.0.0"]
graphviz = ["graphviz>=0.20.1,<0.21.0"]
networkx = ["networkx>=2.8.8,<3.0.0"]
jinja2 = ["jinja2>=3.1.2,<4.0.0"]
cloudpickle = ["cloudpickle>=2.2.1,<3.0.0"]
genesis-flow = ["genesis-flow>=1.0.9,<2.0.0"]

# Optional functional dependencies
pandas = ["pandas>=2.2.3,<3.0.0"]
pillow = ["pillow>=10.2.0,<11.0.0"]
platformdirs = ["platformdirs>=4.3.6,<5.0.0"]
kubernetes = ["kubernetes>=32.0.0,<33.0.0"]
pytest-asyncio = ["pytest-asyncio>=0.25.3,<0.26.0"]

# Cloud dependencies
azure-storage-blob = ["azure-storage-blob>=12.14.2,<13.0.0"]
azure-identity = ["azure-identity>=1.12.0,<2.0.0"]

# Monitoring dependencies
evidently = ["evidently>=0.7.9,<0.8.0"]
ipython = ["IPython>=8.12.0,<9.0.0"]

# ML/AI dependencies
sentence-transformers = ["sentence-transformers>=3.0.1,<4.0.0"]
transformers = ["transformers>=4.25.1,<5.0.0"]
sentencepiece = ["sentencepiece>=0.2.0,<0.3.0"]
pymupdf = ["pymupdf>=1.23.5,<2.0.0"]
torch = ["torch>=2.0.1,<3.0.0"]
torchvision = ["torchvision>=0.20.1,<0.21.0"]
timm = ["timm>=0.5.4,<0.6.0"]
albumentations = ["albumentations>=1.3.1,<2.0.0"]
python-multipart = ["python-multipart>=0.0.20,<0.1.0"]

# Core functional groupings
base = ["pandas"]
mlflow = ["genesis-flow", "pandas", "jinja2", "ipython"]
pipeline = ["kubernetes", "graphviz", "networkx", "jinja2", "pandas"]
datasets = ["datasets", "pandas"]
monitoring = ["evidently", "pandas", "platformdirs", "ipython"]

# Cloud-specific extras
azure-deps = ["azure-storage-blob", "azure-identity"]

# Serving and inference extras
serving = ["cloudpickle", "pillow", "aiohttp", "python-multipart"]
text-serving = ["transformers", "sentencepiece", "cloudpickle", "pillow", "aiohttp", "python-multipart"]
image-serving = ["pymupdf", "pillow", "cloudpickle", "aiohttp", "python-multipart"]
vision-models = ["torch", "torchvision", "timm", "albumentations", "pymupdf", "pillow", "cloudpickle", "aiohttp", "python-multipart"]

# Combined extras
core = ["base", "mlflow", "pipeline", "datasets", "monitoring"]
# full = ["base", "mlflow", "pipeline", "datasets", "monitoring", "azure-deps", "serving", "text-serving", "image-serving", "vision-models"]
data-science = ["base", "mlflow", "datasets", "monitoring"]
deployment = ["cloudpickle", "pillow", "aiohttp", "python-multipart", "evidently", "pandas", "platformdirs", "ipython", "kubernetes"]

[project.scripts]
pipeline = "modelhub.cli:main"

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.2,<9.0.0",
    "black>=24.4.2,<25.0.0",
    "pylint>=3.2.6,<4.0.0",
    "mypy>=1.11.1,<2.0.0",
    "pre-commit>=3.8.0,<4.0.0",
    "pytest-cov>=5.0.0,<6.0.0",
    "pytest-asyncio>=0.25.3,<0.26.0",
    "flake8>=7.0.0,<8.0.0",
    "autoflake>=2.2.1,<3.0.0",
]

[tool.hatch.build.targets.wheel]
packages = ["modelhub"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 88
target-version = ['py312']
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
addopts = "--cov=modelhub --cov-report=html --cov-report=xml --cov-report=term --cov-fail-under=75"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["modelhub"]
omit = [
    "*/tests/*",
    "*/test_*",
    "modelhub/cli.py",
    "*/conftest.py",
    "modelhub/serving/*",
    "modelhub/monitors/providers/evidently/*",
    "modelhub/version.py",
    "modelhub/utils/encoder.py",
    "modelhub/monitors/factory.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
precision = 2

[tool.mypy]
python_version = "3.12"
warn_return_any = false
disallow_untyped_defs = false
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
check_untyped_defs = true
exclude = [
    "tests/",
    "examples/",
    "build/",
    "dist/"
]

[tool.pylint.messages_control]
disable = [
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-public-methods",
    "too-few-public-methods",
    "duplicate-code",
    "import-outside-toplevel",
    "broad-exception-caught",
    "logging-fstring-interpolation",
    "unused-import",
    "too-many-locals"
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-locals = 20
