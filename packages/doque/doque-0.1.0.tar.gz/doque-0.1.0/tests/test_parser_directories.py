"""–¢–µ—Å—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π - –ø–∞—Ç—Ç–µ—Ä–Ω—ã, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤."""

import tempfile
from pathlib import Path
from unittest.mock import patch

import pytest

from doq.parser import ArgumentParser, FileInfo


class TestDirectoryProcessing:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""

    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        self.parser = ArgumentParser()

    def test_directory_pattern_without_wildcard_no_files_included(self):
        """–¢–µ—Å—Ç —Ç–æ–≥–æ, —á—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –±–µ–∑ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –≤–∫–ª—é—á–∞—é—Ç —Ñ–∞–π–ª—ã –≤ –∑–∞–ø—Ä–æ—Å."""
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            (temp_path / "file1.py").write_text("print('hello')")
            (temp_path / "file2.txt").write_text("some content")
            (temp_path / "subdir").mkdir()
            (temp_path / "subdir" / "file3.py").write_text("def test(): pass")

            # –ú–æ–∫–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –Ω–∞—à—É –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            with patch('doq.parser.Path.cwd', return_value=temp_path):
                with patch('doq.parser.ArgumentParser._is_directory_pattern', return_value=True):
                    with patch('doq.parser.ArgumentParser._generate_directory_structure_tree') as mock_tree:
                        mock_tree.return_value = """‚îú‚îÄ‚îÄ üìÑ file1.py (15B)
‚îú‚îÄ‚îÄ üìÑ file2.txt (12B)
‚îî‚îÄ‚îÄ üìÅ subdir/
    ‚îî‚îÄ‚îÄ üìÑ file3.py (18B)"""

                        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º "." (–±–µ–∑ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞)
                        args = ["analyze", "."]
                        result = self.parser.parse_args(args)

                        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–µ—Ä–µ–≤–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, –Ω–æ –±–µ–∑ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                        assert len(result.files) == 0
                        assert "analyze" in result.text_query
                        assert "####" in result.text_query  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ—Ä–µ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                        assert "üìÅ" in result.text_query or "üìÑ" in result.text_query  # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ—Ä–µ–≤–∞

    def test_directory_pattern_with_wildcard_includes_files(self):
        """–¢–µ—Å—Ç —Ç–æ–≥–æ, —á—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –≤–∫–ª—é—á–∞—é—Ç —Ñ–∞–π–ª—ã –≤ –∑–∞–ø—Ä–æ—Å."""
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            (temp_path / "file1.py").write_text("print('hello')")
            (temp_path / "file2.txt").write_text("some content")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            parser = ArgumentParser(working_dir=temp_dir)

            with patch('doq.parser.ArgumentParser._scan_directory') as mock_scan:
                # –ú–æ–∫–∞–µ–º _scan_directory –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                mock_scan.return_value = [
                    FileInfo(
                        path=str(temp_path / "file1.py"),
                        is_binary=False,
                        size=100,
                        include_mode="as_file",
                        content="print('hello')"
                    )
                ]

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º "./*" (—Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º)
                args = ["analyze", "./*"]
                result = parser.parse_args(args)

                # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã —Ñ–∞–π–ª—ã
                assert len(result.files) == 1
                assert result.files[0].path.endswith("file1.py")

    def test_directory_pattern_recursive_wildcard(self):
        """–¢–µ—Å—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º (./**)."""
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)

            # –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            (temp_path / "file1.py").write_text("print('hello')")
            (temp_path / "subdir").mkdir()
            (temp_path / "subdir" / "file2.py").write_text("def test(): pass")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            parser = ArgumentParser(working_dir=temp_dir)

            with patch('doq.parser.ArgumentParser._scan_directory') as mock_scan:
                # –ú–æ–∫–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                mock_scan.return_value = [
                    FileInfo(
                        path=str(temp_path / "file1.py"),
                        is_binary=False,
                        size=100,
                        include_mode="as_file"
                    ),
                    FileInfo(
                        path=str(temp_path / "subdir" / "file2.py"),
                        is_binary=False,
                        size=150,
                        include_mode="as_file"
                    )
                ]

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º "./**" (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª)
                args = ["analyze", "./**"]
                result = parser.parse_args(args)

                # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã —Ñ–∞–π–ª—ã —Å–æ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
                assert len(result.files) == 2

    def test_specific_directory_without_wildcard(self):
        """–¢–µ—Å—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–µ–∑ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (./src)."""
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é src —Å —Ñ–∞–π–ª–∞–º–∏
            src_dir = temp_path / "src"
            src_dir.mkdir()
            (src_dir / "main.py").write_text("def main(): pass")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            parser = ArgumentParser(working_dir=temp_dir)

            with patch('doq.parser.ArgumentParser._generate_directory_structure_tree') as mock_tree:
                mock_tree.return_value = """‚îî‚îÄ‚îÄ üìÑ main.py (17B)"""

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º "./src" (—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–µ–∑ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞)
                args = ["analyze", "./src"]
                result = parser.parse_args(args)

                # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–µ—Ä–µ–≤–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, –Ω–æ –±–µ–∑ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                assert len(result.files) == 0
                assert "analyze" in result.text_query
                assert "####" in result.text_query  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ—Ä–µ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π

    def test_specific_directory_with_wildcard(self):
        """–¢–µ—Å—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º (./src/*)."""
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é src —Å —Ñ–∞–π–ª–∞–º–∏
            src_dir = temp_path / "src"
            src_dir.mkdir()
            (src_dir / "main.py").write_text("def main(): pass")
            (src_dir / "utils.py").write_text("def helper(): pass")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            parser = ArgumentParser(working_dir=temp_dir)

            with patch('doq.parser.ArgumentParser._scan_directory') as mock_scan:
                # –ú–æ–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                mock_scan.return_value = [
                    FileInfo(
                        path=str(src_dir / "main.py"),
                        is_binary=False,
                        size=100,
                        include_mode="as_file"
                    ),
                    FileInfo(
                        path=str(src_dir / "utils.py"),
                        is_binary=False,
                        size=120,
                        include_mode="as_file"
                    )
                ]

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º "./src/*" (—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º)
                args = ["analyze", "./src/*"]
                result = parser.parse_args(args)

                # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ src
                assert len(result.files) == 2

    def test_directory_tree_generation_in_query(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ –∑–∞–ø—Ä–æ—Å–µ."""
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
            (temp_path / "file1.py").write_text("print('hello')")
            (temp_path / "docs").mkdir()
            (temp_path / "docs" / "readme.md").write_text("# Project")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            parser = ArgumentParser(working_dir=temp_dir)

            with patch('doq.parser.ArgumentParser._generate_directory_structure_tree') as mock_tree:
                mock_tree.return_value = """‚îú‚îÄ‚îÄ üìÑ file1.py (15B)
‚îî‚îÄ‚îÄ üìÅ docs/
    ‚îî‚îÄ‚îÄ üìÑ readme.md (9B)"""

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–µ—Ä–µ–≤–∞
                args = ["show", "structure", "."]
                result = parser.parse_args(args)

                # –î–µ—Ä–µ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
                assert "show structure" in result.text_query
                assert "####" in result.text_query
                assert "üìÑ" in result.text_query
                assert "üìÅ" in result.text_query

    def test_wildcard_detection_in_process_directory_pattern(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            (temp_path / "file1.py").write_text("print('hello')")
            src_dir = temp_path / "src"
            src_dir.mkdir()
            (src_dir / "main.py").write_text("def main(): pass")

            parser = ArgumentParser(working_dir=temp_dir)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞—Ä—Å–µ—Ä–æ–º
            test_cases = [
                (".", False),  # –ë–µ–∑ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ - –Ω–µ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —Ñ–∞–π–ª—ã
                ("./", False),  # –ë–µ–∑ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ - –Ω–µ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —Ñ–∞–π–ª—ã
                ("./*", True),  # –° –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º - –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —Ñ–∞–π–ª—ã
                ("./**", True),  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª - –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —Ñ–∞–π–ª—ã
                ("./src", False),  # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–µ–∑ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                ("./src/*", True),  # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
                ("src/", False),  # –ò–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–µ–∑ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                ("src/*", True),  # –ò–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
            ]

            for pattern, expected_should_include_files in test_cases:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞
                files = parser._process_directory_pattern(pattern)

                if expected_should_include_files:
                    # –î–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å * –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã (–µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                    if pattern.startswith("./src") and "src" in pattern:
                        # –î–ª—è src/* –¥–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã –∏–∑ src –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        assert len(files) >= 0, f"–ü–∞—Ç—Ç–µ—Ä–Ω {pattern} —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã"
                    elif pattern.startswith("."):
                        # –î–ª—è ./* –∏ ./** –¥–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        assert len(files) >= 0, f"–ü–∞—Ç—Ç–µ—Ä–Ω {pattern} —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã"
                else:
                    # –î–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –±–µ–∑ * –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    assert len(files) == 0, (f"–ü–∞—Ç—Ç–µ—Ä–Ω {pattern} –±–µ–∑ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å —Ñ–∞–π–ª—ã, "
                                             f"–Ω–æ –≤–∫–ª—é—á–∏–ª {len(files)}")

    def test_has_directory_patterns_in_args(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö."""
        parser = ArgumentParser()

        # –ú–æ–∫–∞–µ–º _is_directory_pattern –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        with patch.object(parser, '_is_directory_pattern') as mock_is_dir_pattern:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ True —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            def is_directory_pattern_side_effect(arg):
                return arg in [".", "./*", "./src", "src/"]

            mock_is_dir_pattern.side_effect = is_directory_pattern_side_effect

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            test_cases = [
                (["hello", "world"], False),  # –ù–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                (["analyze", "."], True),  # –ï—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                (["-i", "hello", "./*"], True),  # –ï—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å —Ñ–ª–∞–≥–æ–º
                (["--llm=openai", "test"], False),  # –¢–æ–ª—å–∫–æ —Ñ–ª–∞–≥–∏ –∏ —Ç–µ–∫—Å—Ç
                (["check", "./src", "files"], True),  # –ï—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            ]

            for args, expected in test_cases:
                parser.raw_args = args
                result = parser._has_directory_patterns_in_args()
                assert result == expected, f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã {args} –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {expected}"

    def test_find_directory_base_from_args(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."""
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            src_dir = temp_path / "src"
            src_dir.mkdir()

            parser = ArgumentParser(working_dir=temp_dir)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –æ–∂–∏–¥–∞–µ–º—ã–µ –±–∞–∑–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            test_cases = [
                ([".", "analyze"], str(temp_path)),
                (["./", "check"], str(temp_path)),
                (["./src", "review"], str(src_dir)),
                (["./src/*", "scan"], str(src_dir)),
            ]

            for args, expected_base in test_cases:
                parser.raw_args = args
                with patch.object(parser, '_is_directory_pattern') as mock_is_dir_pattern:
                    def is_directory_pattern_side_effect(arg):
                        return arg in [".", "./", "./src", "./src/*"]

                    mock_is_dir_pattern.side_effect = is_directory_pattern_side_effect

                    base_dir = parser._find_directory_base_from_args()
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (resolve() –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
                    base_dir_resolved = str(Path(base_dir).resolve())
                    expected_base_resolved = str(Path(expected_base).resolve())
                    assert base_dir_resolved == expected_base_resolved, (
                        f"–î–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ {args} –æ–∂–∏–¥–∞–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {expected_base_resolved},"
                        f" –ø–æ–ª—É—á–µ–Ω–∞ {base_dir_resolved}"
                    )

    def test_directory_structure_tree_generation(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            (temp_path / "main.py").write_text("def main(): pass")
            (temp_path / "utils.py").write_text("def helper(): pass")
            (temp_path / "docs").mkdir()
            (temp_path / "docs" / "readme.md").write_text("# Documentation")

            parser = ArgumentParser(working_dir=temp_dir)

            # –ú–æ–∫–∞–µ–º raw_args –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            parser.raw_args = ["."]  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

            with patch.object(parser, '_is_directory_pattern', return_value=True):
                tree_output = parser._generate_directory_structure_tree()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ—Ä–µ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                assert "main.py" in tree_output
                assert "utils.py" in tree_output
                assert "docs/" in tree_output
                assert "readme.md" in tree_output

    def test_mixed_files_and_directory_patterns(self):
        """–¢–µ—Å—Ç —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            (temp_path / "single_file.py").write_text("# Single file")
            (temp_path / "src").mkdir()
            (temp_path / "src" / "module.py").write_text("# Module")

            parser = ArgumentParser(working_dir=temp_dir)

            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è single_file.py –∫–∞–∫ –æ–±—ã—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            import stat
            mock_stat_obj = type('MockStat', (), {
                'st_size': 100,
                'st_mode': stat.S_IFREG
            })()

            with patch('doq.parser.Path.exists') as mock_exists, \
                    patch('doq.parser.Path.is_file') as mock_is_file, \
                    patch('doq.parser.Path.stat', return_value=mock_stat_obj), \
                    patch('doq.parser.ArgumentParser._is_binary_file', return_value=False), \
                    patch('builtins.open'):

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
                def exists_side_effect(path_obj=None):
                    if hasattr(path_obj, 'name'):
                        return path_obj.name == "single_file.py"
                    return False

                def is_file_side_effect(path_obj=None):
                    if hasattr(path_obj, 'name'):
                        return path_obj.name == "single_file.py"
                    return False

                mock_exists.side_effect = exists_side_effect
                mock_is_file.side_effect = is_file_side_effect

                with patch.object(parser, '_is_file_path') as mock_is_file_path:
                    def is_file_path_side_effect(arg):
                        return arg == "single_file.py"

                    mock_is_file_path.side_effect = is_file_path_side_effect

                    with patch.object(parser, '_scan_directory') as mock_scan:
                        mock_scan.return_value = [
                            FileInfo(
                                path=str(temp_path / "src" / "module.py"),
                                is_binary=False,
                                size=100,
                                include_mode="as_file"
                            )
                        ]

                        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        args = ["compare", "single_file.py", "with", "./src/*"]
                        result = parser.parse_args(args)

                        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª, —Ç–∞–∫ –∏ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        assert len(result.files) >= 1  # –ö–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —Ñ–∞–π–ª
                        assert "compare" in result.text_query
                        assert "with" in result.text_query

    def test_windows_path_patterns(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Windows-–ø—É—Ç–µ–π –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤."""
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
            (temp_path / "file1.py").write_text("print('hello')")
            src_dir = temp_path / "src"
            src_dir.mkdir()
            (src_dir / "main.py").write_text("def main(): pass")

            parser = ArgumentParser(working_dir=temp_dir)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ Windows-—Å—Ç–∏–ª–∏ –ø—É—Ç–µ–π
            windows_patterns = [
                ".\\",  # Windows —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                ".\\*",  # Windows —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
                ".\\src",  # Windows —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                ".\\src\\*",  # Windows –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
                "src\\",  # Windows –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –æ–±—Ä–∞—Ç–Ω–∏–º —Å–ª–µ—à–µ–º
                "src\\*",  # Windows –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –æ–±—Ä–∞—Ç–Ω–∏–º —Å–ª–µ—à–µ–º –∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
            ]

            for pattern in windows_patterns:
                with patch.object(parser, '_is_directory_pattern') as mock_is_dir_pattern:
                    # –ú–æ–∫–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è Windows-–ø—É—Ç–µ–π
                    mock_is_dir_pattern.return_value = True

                    with patch.object(parser, '_scan_directory') as mock_scan:
                        mock_scan.return_value = [
                            FileInfo(
                                path=str(src_dir / "main.py"),
                                is_binary=False,
                                size=100,
                                include_mode="as_file"
                            )
                        ]

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Windows-–ø—É—Ç–∏
                        args = ["analyze", pattern]
                        result = parser.parse_args(args)

                        # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Windows-–ø—É—Ç–µ–π
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "analyze" –∏–ª–∏ –µ—Å—Ç—å –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                        assert "analyze" in result.text_query or "####" in result.text_query
                        # –î–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å * –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã
                        if "*" in pattern:
                            assert len(result.files) >= 0  # –ú–æ–∂–µ—Ç –±—ã—Ç—å 0 –∏–ª–∏ –±–æ–ª—å—à–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–∫–∞

    def test_windows_absolute_paths(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö Windows-–ø—É—Ç–µ–π."""
        parser = ArgumentParser()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö Windows-–ø—É—Ç–µ–π
        windows_absolute_patterns = [
            "C:\\Users\\user\\project",
            "C:\\Users\\user\\project\\",
            "C:\\Users\\user\\project\\*",
            "C:\\Users\\user\\project\\**",
            "D:\\work\\src\\*",
            "E:\\projects\\myapp\\**",
        ]

        for pattern in windows_absolute_patterns:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Windows –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
            # –±–µ–∑ –æ—à–∏–±–æ–∫ (–¥–∞–∂–µ –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
            with patch('doq.parser.Path.exists', return_value=False):
                with patch('doq.parser.Path.is_dir', return_value=False):
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ _is_directory_pattern –Ω–µ –ø–∞–¥–∞–µ—Ç –Ω–∞ Windows-–ø—É—Ç—è—Ö
                    try:
                        result = parser._is_directory_pattern(pattern)
                        # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º, –≥–ª–∞–≤–Ω–æ–µ - –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                        assert isinstance(result, bool)
                    except Exception as e:
                        pytest.fail(f"Windows path pattern '{pattern}' –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    def test_windows_drive_letters(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—É–∫–≤ –¥–∏—Å–∫–æ–≤ Windows."""
        parser = ArgumentParser()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±—É–∫–≤—ã –¥–∏—Å–∫–æ–≤
        drive_patterns = [
            "C:",
            "D:",
            "E:",
            "C:\\",
            "D:\\",
            "C:\\*",
            "D:\\**",
        ]

        for pattern in drive_patterns:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—É—Ç–∏ —Å –±—É–∫–≤–∞–º–∏ –¥–∏—Å–∫–æ–≤
            with patch('doq.parser.Path.exists', return_value=False):
                with patch('doq.parser.Path.is_dir', return_value=False):
                    try:
                        result = parser._is_directory_pattern(pattern)
                        assert isinstance(result, bool)
                    except Exception as e:
                        pytest.fail(f"Drive pattern '{pattern}' –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    def test_windows_unc_paths(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ UNC-–ø—É—Ç–µ–π Windows (—Å–µ—Ç–µ–≤—ã–µ –ø—É—Ç–∏)."""
        parser = ArgumentParser()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º UNC-–ø—É—Ç–∏ (Universal Naming Convention)
        unc_patterns = [
            "\\\\server\\share",
            "\\\\server\\share\\",
            "\\\\server\\share\\folder",
            "\\\\server\\share\\folder\\*",
            "\\\\192.168.1.100\\shared\\*",
            "\\\\computer-name\\documents\\**",
        ]

        for pattern in unc_patterns:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å UNC-–ø—É—Ç–∏
            with patch('doq.parser.Path.exists', return_value=False):
                with patch('doq.parser.Path.is_dir', return_value=False):
                    try:
                        result = parser._is_directory_pattern(pattern)
                        assert isinstance(result, bool)
                    except Exception as e:
                        pytest.fail(f"UNC pattern '{pattern}' –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    def test_mixed_path_separators(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –ø—É—Ç–µ–π."""
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            src_dir = temp_path / "src" / "modules"
            src_dir.mkdir(parents=True)
            (src_dir / "main.py").write_text("def main(): pass")

            parser = ArgumentParser(working_dir=temp_dir)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ, –Ω–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏)
            mixed_patterns = [
                "./src\\modules/*",  # Unix –Ω–∞—á–∞–ª–æ, Windows —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å wildcard
                ".\\src/modules/*",  # Windows –Ω–∞—á–∞–ª–æ, Unix —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å wildcard
                "src/modules\\*",  # –°–º–µ—à–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
                "src\\modules/*",  # –î—Ä—É–≥–æ–π –ø–æ—Ä—è–¥–æ–∫ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            ]

            for pattern in mixed_patterns:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç –æ—à–∏–±–æ–∫
                args = ["analyze", pattern]
                try:
                    result = parser.parse_args(args)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
                    # –î–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å * –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã, –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –±–µ–∑ * - —Ç–æ–ª—å–∫–æ –¥–µ—Ä–µ–≤–æ
                    if "*" in pattern:
                        assert len(result.files) >= 0, f"Pattern '{pattern}' should be processed without errors"
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞
                    assert "analyze" in result.text_query, (f"Query text should "
                                                            f"contain 'analyze' for pattern '{pattern}'")
                    assert result.provider == "claude", f"Provider should be set for pattern '{pattern}'"
                except Exception as e:
                    pytest.fail(f"Mixed separator pattern '{pattern}' –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–µ–∑ wildcard –æ—Ç–¥–µ–ª—å–Ω–æ
            mixed_patterns_no_wildcard = [
                "./src\\modules",  # Unix –Ω–∞—á–∞–ª–æ, Windows —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                ".\\src/modules",  # Windows –Ω–∞—á–∞–ª–æ, Unix —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            ]

            for pattern in mixed_patterns_no_wildcard:
                args = ["analyze", pattern]
                try:
                    result = parser.parse_args(args)
                    # –î–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –±–µ–∑ * –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ñ–∞–π–ª–æ–≤, –Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–µ—Ä–µ–≤–æ
                    assert "analyze" in result.text_query, (f"Query text should "
                                                            f"contain 'analyze' for pattern '{pattern}'")
                    assert result.provider == "claude", f"Provider should be set for pattern '{pattern}'"
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
                except Exception as e:
                    pytest.fail(f"Mixed separator pattern '{pattern}' –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    def test_windows_path_normalization(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Windows-–ø—É—Ç–µ–π."""
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            src_dir = temp_path / "src"
            src_dir.mkdir()

            parser = ArgumentParser(working_dir=temp_dir)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ Windows –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è
            windows_patterns_for_normalization = [
                (".\\", str(temp_path)),
                (".\\src", str(src_dir)),
                (".\\src\\", str(src_dir)),
            ]

            for pattern, expected_base in windows_patterns_for_normalization:
                parser.raw_args = [pattern, "analyze"]

                with patch.object(parser, '_is_directory_pattern') as mock_is_dir_pattern:
                    def is_directory_pattern_side_effect(arg):
                        return arg in [".\\", ".\\src", ".\\src\\"]

                    mock_is_dir_pattern.side_effect = is_directory_pattern_side_effect

                    with patch('doq.parser.Path.exists', return_value=True):
                        with patch('doq.parser.Path.is_dir', return_value=True):
                            base_dir = parser._find_directory_base_from_args()

                            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –û–°)
                            base_dir_normalized = str(Path(base_dir).resolve())
                            expected_base_normalized = str(Path(expected_base).resolve())

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç–∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
                            assert base_dir_normalized == expected_base_normalized, (
                                f"Windows pattern '{pattern}' –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∏—Ç—å—Å—è –≤ '{expected_base_normalized}', "
                                f"–ø–æ–ª—É—á–µ–Ω '{base_dir_normalized}'"
                            )

    def test_windows_reserved_names(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω Windows."""
        parser = ArgumentParser()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ Windows
        reserved_names = [
            "CON", "PRN", "AUX", "NUL",
            "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9",
            "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", "LPT9"
        ]

        for name in reserved_names:
            patterns_to_test = [
                name,
                f"{name}\\",
                f"{name}\\*",
                f".\\{name}",
                f"C:\\{name}",
                f"C:\\path\\{name}\\*"
            ]

            for pattern in patterns_to_test:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                with patch('doq.parser.Path.exists', return_value=False):
                    with patch('doq.parser.Path.is_dir', return_value=False):
                        try:
                            result = parser._is_directory_pattern(pattern)
                            assert isinstance(result, bool)
                        except Exception as e:
                            pytest.fail(f"Reserved name pattern '{pattern}' –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    def test_windows_long_paths(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö –ø—É—Ç–µ–π Windows."""
        parser = ArgumentParser()

        # –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π Windows –ø—É—Ç—å (–±–æ–ª—å—à–µ 260 —Å–∏–º–≤–æ–ª–æ–≤)
        long_path_components = ["very_long_directory_name_that_exceeds_normal_limits"] * 10
        long_path = "C:\\" + "\\".join(long_path_components)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª–∏–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
        long_patterns = [
            long_path,
            f"{long_path}\\",
            f"{long_path}\\*",
            f"{long_path}\\**",
        ]

        for pattern in long_patterns:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏–Ω–Ω—ã–µ –ø—É—Ç–∏ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            with patch('doq.parser.Path.exists', return_value=False):
                with patch('doq.parser.Path.is_dir', return_value=False):
                    try:
                        result = parser._is_directory_pattern(pattern)
                        assert isinstance(result, bool)
                    except Exception as e:
                        pytest.fail(f"Long path pattern '{pattern}' –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
