Metadata-Version: 2.4
Name: flujograma
Version: 1.0.0
Summary: Una librer√≠a Python para crear diagramas de arquitectura y flujo con iconos profesionales
Author-email: Tu Nombre <tu.email@ejemplo.com>
Maintainer-email: Tu Nombre <tu.email@ejemplo.com>
License: MIT
Project-URL: Homepage, https://github.com/tuusuario/flujograma
Project-URL: Repository, https://github.com/tuusuario/flujograma.git
Project-URL: Documentation, https://github.com/tuusuario/flujograma#readme
Project-URL: Bug Tracker, https://github.com/tuusuario/flujograma/issues
Keywords: diagrams,flowchart,architecture,aws,gcp,kubernetes,visualization
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Scientific/Engineering :: Visualization
Classifier: Topic :: System :: Systems Administration
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: Pillow>=9.0.0
Requires-Dist: lark>=1.1.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: flake8>=3.8; extra == "dev"
Requires-Dist: mypy>=0.800; extra == "dev"
Provides-Extra: build
Requires-Dist: build>=0.7.0; extra == "build"
Requires-Dist: twine>=3.0.0; extra == "build"
Dynamic: license-file

# Flujograma

Una librer√≠a Python profesional para crear diagramas de arquitectura y flujo con iconos profesionales. Alternativa offline a diagrams.mingrammer.com con soporte completo para AWS, GCP, Kubernetes y m√°s.

## üöÄ Caracter√≠sticas

- **üîí 100% Offline**: No requiere conexi√≥n a internet ni servicios de IA
- **‚ö° Ligero**: Sin dependencias pesadas como GraphViz, solo Pillow y Lark
- **üåç Multiidioma**: Soporte para espa√±ol, ingl√©s y f√°cil extensi√≥n a otros idiomas
- **üéØ Lenguaje controlado**: Basado en gram√°ticas simples, no IA completa
- **‚òÅÔ∏è Diagramas de arquitectura**: Compatible con diagrams.mingrammer.com para crear diagramas de infraestructura cloud
- **üé® Iconos profesionales**: Soporte para iconos PNG de AWS, GCP, Kubernetes con fallback autom√°tico
- **üìê Layout inteligente**: Detecci√≥n autom√°tica de filas m√∫ltiples y flechas direccionales

## üì¶ Instalaci√≥n

### Desde PyPI (Recomendado)
```bash
pip install flujograma
```

### Desde c√≥digo fuente
```bash
git clone https://github.com/tuusuario/flujograma.git
cd flujograma
pip install -e .
```

### Dependencias del sistema
```bash
# Solo requiere Python 3.8+ y las siguientes dependencias:
# Pillow>=9.0.0 - Para procesamiento de im√°genes
# lark>=1.1.0 - Para parsing de gram√°ticas
```

## üéØ Uso b√°sico

### Diagramas de flujo tradicionales
```python
from flujograma import generate_diagram

# Generar diagrama en espa√±ol
generate_diagram(
    text="Si la variable es mayor a 5, entonces imprimir mensaje sino incrementar contador",
    language="es",
    filename="mi_diagrama.png"
)

# Generar diagrama en ingl√©s
generate_diagram(
    text="If variable is greater than 5, then print message else increment counter",
    language="en", 
    filename="my_diagram.png"
)
```

### üèóÔ∏è Diagramas de arquitectura web (Web Services)
```python
from src.flujograma.diagrams_api import Diagram, ELB, EC2, RDS, S3

# Crear arquitectura b√°sica
with Diagram("Mi Arquitectura", filename="arquitectura.png"):
    ELB("load-balancer") >> EC2("web-server") >> RDS("database") >> S3("storage")

# Arquitectura con m√∫ltiples filas y flechas direccionales
with Diagram("Sistema Complejo", filename="sistema.png"):
    # Fila 1: Flujo principal
    ELB("lb") >> EC2("frontend") >> RDS("main-db") >> S3("files")
    # Fila 2: Con feedback (flecha izquierda ‚Üê)
    ELB("lb") >> EC2("cache") >> RDS("main-db") << EC2("analytics")
    # Fila 3: Servicios auxiliares
    ELB("lb") >> EC2("api") >> RDS("logs-db")
```

**üîß Operadores disponibles:**
- `>>` : Flecha hacia la derecha ‚Üí
- `<<` : Flecha hacia la izquierda ‚Üê

**‚òÅÔ∏è Componentes AWS:**
- `ELB("nombre")` : Load Balancer (p√∫rpura)
- `EC2("nombre")` : Servidor/Aplicaci√≥n (naranja)  
- `RDS("nombre")` : Base de datos (azul)
- `S3("nombre")` : Almacenamiento (verde)

## üìù Sintaxis soportada

### Espa√±ol
- `Si [condici√≥n], entonces [acci√≥n]`
- `Si [condici√≥n], entonces [acci√≥n] sino [acci√≥n]`
- `Mientras [condici√≥n], [acci√≥n]`
- `Para cada [elemento] en [lista], [acci√≥n]`
- `Inicio` / `Fin`

### Ingl√©s
- `If [condition], then [action]`
- `If [condition], then [action] else [action]`
- `While [condition], [action]`
- `For each [element] in [list], [action]`
- `Start` / `End`

## üèóÔ∏è Estructura del proyecto

```
flujograma/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îî‚îÄ‚îÄ flujograma/
‚îÇ       ‚îú‚îÄ‚îÄ core/           # L√≥gica principal
‚îÇ       ‚îú‚îÄ‚îÄ languages/      # Soporte multiidioma
‚îÇ       ‚îú‚îÄ‚îÄ renderers/      # Generadores de salida
‚îÇ       ‚îî‚îÄ‚îÄ assets/         # Iconos y recursos
‚îú‚îÄ‚îÄ tests/                  # Pruebas unitarias
‚îú‚îÄ‚îÄ examples/              # Ejemplos de uso
‚îú‚îÄ‚îÄ requirements.txt       # Dependencias principales
‚îú‚îÄ‚îÄ requirements-dev.txt   # Dependencias de desarrollo
‚îú‚îÄ‚îÄ pyproject.toml         # Configuraci√≥n del proyecto
‚îî‚îÄ‚îÄ README.md             # Este archivo
```

## üöÄ Ejemplos de uso

### Ejemplo 1: Login de usuario
```python
from flujograma import generate_diagram

text = """
Inicio.
Leer usuario y contrase√±a.
Si las credenciales son v√°lidas, entonces mostrar dashboard sino mostrar error.
Fin.
"""

generate_diagram(text, "es", "login.png")
```

### Ejemplo 2: Calculadora
```python
text = """
Inicio.
Leer dos n√∫meros y operaci√≥n.
Si operaci√≥n es suma, entonces calcular a + b.
Si operaci√≥n es resta, entonces calcular a - b.
Si operaci√≥n es multiplicaci√≥n, entonces calcular a * b.
Si operaci√≥n es divisi√≥n y b no es cero, entonces calcular a / b sino mostrar error.
Mostrar resultado.
Fin.
"""

generate_diagram(text, "es", "calculadora.png")
```

### Ejemplo 3: Arquitectura web
```python
from src.flujograma.diagrams_api import Diagram, ELB, EC2, RDS, S3

with Diagram("E-commerce Platform", filename="ecommerce.png"):
    # Frontend tier
    ELB("Load Balancer") >> EC2("Web Frontend") >> S3("Static Assets")
    
    # Backend tier  
    ELB("Load Balancer") >> EC2("API Server") >> RDS("User Database")
    EC2("API Server") >> RDS("Product Database")
    
    # Analytics tier
    EC2("API Server") >> EC2("Analytics") >> RDS("Analytics DB")
```

## üß™ Ejecutar tests

### Instalar dependencias de desarrollo
```bash
pip install -r requirements-dev.txt
```

### Ejecutar todas las pruebas
```bash
pytest tests/ -v
```

### Ejecutar con cobertura de c√≥digo
```bash
pytest tests/ --cov=src/flujograma --cov-report=html
```

### Ejecutar tests espec√≠ficos
```bash
# Solo pruebas de parsers
pytest tests/test_flujograma.py::TestFlowParser -v

# Solo pruebas de nodos AST
pytest tests/test_flujograma.py::TestASTNodes -v

# Solo pruebas de integraci√≥n
pytest tests/test_flujograma.py::TestIntegration -v
```

## üõ†Ô∏è Desarrollo

### Configurar entorno de desarrollo
```bash
# Clonar repositorio
git clone https://github.com/tuusuario/flujograma.git
cd flujograma

# Crear entorno virtual
python -m venv venv
source venv/bin/activate  # En Windows: venv\Scripts\activate

# Instalar en modo desarrollo
pip install -e .
pip install -r requirements-dev.txt
```

### Ejecutar ejemplos
```bash
# Ejemplos b√°sicos
python examples/ejemplo_1_login.py
python examples/ejemplo_2_calculadora.py

# Ejemplos de arquitectura
python examples/ejemplos-seb-service.py
python examples/ejemplos_direccionales.py
```

### Scripts avanzados

#### Generar diagramas en lote
```python
import os
from flujograma import generate_diagram

examples_dir = "examples"
for filename in os.listdir(examples_dir):
    if filename.endswith('.py'):
        # Procesar archivo de ejemplo
        with open(os.path.join(examples_dir, filename), 'r') as f:
            content = f.read()
            # Extraer texto del diagrama y generar
            # (l√≥gica personalizada seg√∫n formato)
```

#### Validar sintaxis
```python
from flujograma.core.parser import FlowParser

parser = FlowParser("es")
text = "Si x > 5, entonces imprimir mensaje"

try:
    diagram = parser.parse(text)
    print("‚úÖ Sintaxis v√°lida")
    print(f"Nodos generados: {len(diagram.nodes)}")
except Exception as e:
    print(f"‚ùå Error de sintaxis: {e}")
```

## üìä Estad√≠sticas del proyecto

- **L√≠neas de c√≥digo**: ~2,500
- **Tests**: 18 pruebas unitarias
- **Cobertura**: >85%
- **Dependencias**: Solo 2 (Pillow, Lark)
- **Tama√±o del paquete**: <50KB

## ü§ù Contribuir

1. Fork el proyecto
2. Crea una rama para tu feature (`git checkout -b feature/amazing-feature`)
3. Commit tus cambios (`git commit -m 'Add amazing feature'`)
4. Push a la rama (`git push origin feature/amazing-feature`)
5. Abre un Pull Request

## üìÑ Licencia

Este proyecto est√° bajo la Licencia MIT. Ver el archivo `LICENSE` para m√°s detalles.

## üÜö Comparaci√≥n con alternativas

| Caracter√≠stica | Flujograma | diagrams.mingrammer.com | Graphviz | Draw.io |
|---------------|------------|-------------------------|----------|---------|
| **Offline** | ‚úÖ | ‚ùå | ‚úÖ | ‚ùå |
| **Dependencias ligeras** | ‚úÖ | ‚ùå | ‚ùå | N/A |
| **Texto a diagrama** | ‚úÖ | ‚ùå | ‚ùå | ‚ùå |
| **Iconos profesionales** | ‚úÖ | ‚úÖ | ‚ùå | ‚úÖ |
| **Multi-idioma** | ‚úÖ | ‚ùå | ‚ùå | ‚úÖ |
| **API Python** | ‚úÖ | ‚úÖ | ‚ùå | ‚ùå |

## üìû Soporte

- **GitHub Issues**: Para reportar bugs o solicitar features
- **Email**: tu.email@ejemplo.com
- **Documentaci√≥n**: Ver carpeta `examples/` para m√°s casos de uso

---

**¬°Gracias por usar Flujograma! üéâ**

## Desarrollo

```bash
# Clonar repositorio
git clone https://github.com/CubeFreaKLab/flujograma.git
cd flujograma

# Instalar dependencias de desarrollo
pip install -e ".[dev]"

# Ejecutar pruebas
pytest

## Licencia

MIT License
