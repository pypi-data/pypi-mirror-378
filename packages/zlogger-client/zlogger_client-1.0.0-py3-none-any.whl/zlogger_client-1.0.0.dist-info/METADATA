Metadata-Version: 2.4
Name: zlogger-client
Version: 1.0.0
Summary: Python client for Zlogger logging service
Home-page: https://github.com/your-username/zlogger-python
Author: Zlogger Team
Author-email: Zlogger Team <info@zlogger.ch>
License: MIT
Project-URL: Homepage, https://zlogger.ch
Project-URL: Repository, https://github.com/your-username/zlogger-python
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.31.0
Dynamic: author
Dynamic: home-page
Dynamic: requires-python

# Zlogger Python Client

Ein einfacher und effizienter Python-Client f체r den Zlogger Service.

## Installation

```bash
pip install zlogger
```

## Schnellstart

```python
from zlogger import ZloggerClient

# Client initialisieren
logger = ZloggerClient(
    endpoint="https://zlogger.ch/api/logs",
    api_key="your-api-key",
    app_name="my-app"
)

# Logs senden
logger.info("Application started", {"version": "1.0.0"})
logger.warn("High memory usage", {"memory": "90%"})
logger.error("Database connection failed", {"db": "primary"})
logger.debug("Processing user request", {"user_id": 123})
```

## API

### ZloggerClient(endpoint, api_key, app_name)

Erstellt einen neuen Zlogger-Client.

**Parameter:**
- `endpoint` (str): Zlogger API Endpoint
- `api_key` (str): Ihr Zlogger API-Schl체ssel
- `app_name` (str): Name Ihrer Anwendung

### Log-Methoden

Alle Log-Methoden akzeptieren:
- `message` (str): Die Log-Nachricht
- `context` (dict, optional): Zus채tzliche Kontext-Daten

**Verf체gbare Methoden:**
- `logger.debug(message, context=None)`
- `logger.info(message, context=None)`
- `logger.warn(message, context=None)`
- `logger.error(message, context=None)`

## Beispiel mit Kontext

```python
logger.error("Payment failed", {
    "transaction_id": "txn_123",
    "amount": 99.99,
    "currency": "USD",
    "error_code": "INSUFFICIENT_FUNDS"
})
```

## Lizenz

MIT License
