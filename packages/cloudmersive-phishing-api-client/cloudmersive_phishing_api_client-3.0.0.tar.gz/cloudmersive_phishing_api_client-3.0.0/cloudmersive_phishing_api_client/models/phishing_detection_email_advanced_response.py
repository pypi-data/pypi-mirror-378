# coding: utf-8

"""
    phishingapi

    Easily and directly scan and block phishing security threats in input.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PhishingDetectionEmailAdvancedResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clean_result': 'bool',
        'phishing_risk_level': 'float',
        'spam_risk_level': 'float',
        'contains_low_reputation_sender': 'bool',
        'contains_phishing': 'bool',
        'contains_spam': 'bool',
        'contains_unsolicited_sales': 'bool',
        'contains_promotional_content': 'bool',
        'contains_phishing_attempt': 'bool',
        'analysis_rationale': 'str'
    }

    attribute_map = {
        'clean_result': 'CleanResult',
        'phishing_risk_level': 'PhishingRiskLevel',
        'spam_risk_level': 'SpamRiskLevel',
        'contains_low_reputation_sender': 'ContainsLowReputationSender',
        'contains_phishing': 'ContainsPhishing',
        'contains_spam': 'ContainsSpam',
        'contains_unsolicited_sales': 'ContainsUnsolicitedSales',
        'contains_promotional_content': 'ContainsPromotionalContent',
        'contains_phishing_attempt': 'ContainsPhishingAttempt',
        'analysis_rationale': 'AnalysisRationale'
    }

    def __init__(self, clean_result=None, phishing_risk_level=None, spam_risk_level=None, contains_low_reputation_sender=None, contains_phishing=None, contains_spam=None, contains_unsolicited_sales=None, contains_promotional_content=None, contains_phishing_attempt=None, analysis_rationale=None):  # noqa: E501
        """PhishingDetectionEmailAdvancedResponse - a model defined in Swagger"""  # noqa: E501

        self._clean_result = None
        self._phishing_risk_level = None
        self._spam_risk_level = None
        self._contains_low_reputation_sender = None
        self._contains_phishing = None
        self._contains_spam = None
        self._contains_unsolicited_sales = None
        self._contains_promotional_content = None
        self._contains_phishing_attempt = None
        self._analysis_rationale = None
        self.discriminator = None

        if clean_result is not None:
            self.clean_result = clean_result
        if phishing_risk_level is not None:
            self.phishing_risk_level = phishing_risk_level
        if spam_risk_level is not None:
            self.spam_risk_level = spam_risk_level
        if contains_low_reputation_sender is not None:
            self.contains_low_reputation_sender = contains_low_reputation_sender
        if contains_phishing is not None:
            self.contains_phishing = contains_phishing
        if contains_spam is not None:
            self.contains_spam = contains_spam
        if contains_unsolicited_sales is not None:
            self.contains_unsolicited_sales = contains_unsolicited_sales
        if contains_promotional_content is not None:
            self.contains_promotional_content = contains_promotional_content
        if contains_phishing_attempt is not None:
            self.contains_phishing_attempt = contains_phishing_attempt
        if analysis_rationale is not None:
            self.analysis_rationale = analysis_rationale

    @property
    def clean_result(self):
        """Gets the clean_result of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501

        True if the result is not phishing (clean), and false otherwise  # noqa: E501

        :return: The clean_result of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :rtype: bool
        """
        return self._clean_result

    @clean_result.setter
    def clean_result(self, clean_result):
        """Sets the clean_result of this PhishingDetectionEmailAdvancedResponse.

        True if the result is not phishing (clean), and false otherwise  # noqa: E501

        :param clean_result: The clean_result of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :type: bool
        """

        self._clean_result = clean_result

    @property
    def phishing_risk_level(self):
        """Gets the phishing_risk_level of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501

        Overall phishing risk level between 0.0 and 1.0  # noqa: E501

        :return: The phishing_risk_level of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :rtype: float
        """
        return self._phishing_risk_level

    @phishing_risk_level.setter
    def phishing_risk_level(self, phishing_risk_level):
        """Sets the phishing_risk_level of this PhishingDetectionEmailAdvancedResponse.

        Overall phishing risk level between 0.0 and 1.0  # noqa: E501

        :param phishing_risk_level: The phishing_risk_level of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :type: float
        """

        self._phishing_risk_level = phishing_risk_level

    @property
    def spam_risk_level(self):
        """Gets the spam_risk_level of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501

        Overall phishing spam level between 0.0 and 1.0  # noqa: E501

        :return: The spam_risk_level of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :rtype: float
        """
        return self._spam_risk_level

    @spam_risk_level.setter
    def spam_risk_level(self, spam_risk_level):
        """Sets the spam_risk_level of this PhishingDetectionEmailAdvancedResponse.

        Overall phishing spam level between 0.0 and 1.0  # noqa: E501

        :param spam_risk_level: The spam_risk_level of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :type: float
        """

        self._spam_risk_level = spam_risk_level

    @property
    def contains_low_reputation_sender(self):
        """Gets the contains_low_reputation_sender of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501

        True if the input email is from a low reputation sender  # noqa: E501

        :return: The contains_low_reputation_sender of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :rtype: bool
        """
        return self._contains_low_reputation_sender

    @contains_low_reputation_sender.setter
    def contains_low_reputation_sender(self, contains_low_reputation_sender):
        """Sets the contains_low_reputation_sender of this PhishingDetectionEmailAdvancedResponse.

        True if the input email is from a low reputation sender  # noqa: E501

        :param contains_low_reputation_sender: The contains_low_reputation_sender of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :type: bool
        """

        self._contains_low_reputation_sender = contains_low_reputation_sender

    @property
    def contains_phishing(self):
        """Gets the contains_phishing of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501

        True if the input email contains phishing threat risks, false otherwise  # noqa: E501

        :return: The contains_phishing of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :rtype: bool
        """
        return self._contains_phishing

    @contains_phishing.setter
    def contains_phishing(self, contains_phishing):
        """Sets the contains_phishing of this PhishingDetectionEmailAdvancedResponse.

        True if the input email contains phishing threat risks, false otherwise  # noqa: E501

        :param contains_phishing: The contains_phishing of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :type: bool
        """

        self._contains_phishing = contains_phishing

    @property
    def contains_spam(self):
        """Gets the contains_spam of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501

        True if the email contains phishing threat risks, false otherwise  # noqa: E501

        :return: The contains_spam of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :rtype: bool
        """
        return self._contains_spam

    @contains_spam.setter
    def contains_spam(self, contains_spam):
        """Sets the contains_spam of this PhishingDetectionEmailAdvancedResponse.

        True if the email contains phishing threat risks, false otherwise  # noqa: E501

        :param contains_spam: The contains_spam of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :type: bool
        """

        self._contains_spam = contains_spam

    @property
    def contains_unsolicited_sales(self):
        """Gets the contains_unsolicited_sales of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501

        True if the input email contains unsolicited sales, false otherwise  # noqa: E501

        :return: The contains_unsolicited_sales of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :rtype: bool
        """
        return self._contains_unsolicited_sales

    @contains_unsolicited_sales.setter
    def contains_unsolicited_sales(self, contains_unsolicited_sales):
        """Sets the contains_unsolicited_sales of this PhishingDetectionEmailAdvancedResponse.

        True if the input email contains unsolicited sales, false otherwise  # noqa: E501

        :param contains_unsolicited_sales: The contains_unsolicited_sales of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :type: bool
        """

        self._contains_unsolicited_sales = contains_unsolicited_sales

    @property
    def contains_promotional_content(self):
        """Gets the contains_promotional_content of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501

        True if the input email contains promotional content, false otherwise  # noqa: E501

        :return: The contains_promotional_content of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :rtype: bool
        """
        return self._contains_promotional_content

    @contains_promotional_content.setter
    def contains_promotional_content(self, contains_promotional_content):
        """Sets the contains_promotional_content of this PhishingDetectionEmailAdvancedResponse.

        True if the input email contains promotional content, false otherwise  # noqa: E501

        :param contains_promotional_content: The contains_promotional_content of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :type: bool
        """

        self._contains_promotional_content = contains_promotional_content

    @property
    def contains_phishing_attempt(self):
        """Gets the contains_phishing_attempt of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501

        True if the input email contains a phishing attempt, false otherwise  # noqa: E501

        :return: The contains_phishing_attempt of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :rtype: bool
        """
        return self._contains_phishing_attempt

    @contains_phishing_attempt.setter
    def contains_phishing_attempt(self, contains_phishing_attempt):
        """Sets the contains_phishing_attempt of this PhishingDetectionEmailAdvancedResponse.

        True if the input email contains a phishing attempt, false otherwise  # noqa: E501

        :param contains_phishing_attempt: The contains_phishing_attempt of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :type: bool
        """

        self._contains_phishing_attempt = contains_phishing_attempt

    @property
    def analysis_rationale(self):
        """Gets the analysis_rationale of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501

        Rationale for why the conclusion was formed  # noqa: E501

        :return: The analysis_rationale of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :rtype: str
        """
        return self._analysis_rationale

    @analysis_rationale.setter
    def analysis_rationale(self, analysis_rationale):
        """Sets the analysis_rationale of this PhishingDetectionEmailAdvancedResponse.

        Rationale for why the conclusion was formed  # noqa: E501

        :param analysis_rationale: The analysis_rationale of this PhishingDetectionEmailAdvancedResponse.  # noqa: E501
        :type: str
        """

        self._analysis_rationale = analysis_rationale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhishingDetectionEmailAdvancedResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhishingDetectionEmailAdvancedResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
