# coding: utf-8

"""
    phishingapi

    Easily and directly scan and block phishing security threats in input.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdvancedEmailDetectionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_email_address': 'str',
        'to_email_address': 'str',
        'subject': 'str',
        'html_body': 'str',
        'allow_low_reputation_senders': 'bool',
        'allow_sanctioned': 'bool',
        'input_email_file': 'str'
    }

    attribute_map = {
        'from_email_address': 'FromEmailAddress',
        'to_email_address': 'ToEmailAddress',
        'subject': 'Subject',
        'html_body': 'HtmlBody',
        'allow_low_reputation_senders': 'AllowLowReputationSenders',
        'allow_sanctioned': 'AllowSanctioned',
        'input_email_file': 'InputEmailFile'
    }

    def __init__(self, from_email_address=None, to_email_address=None, subject=None, html_body=None, allow_low_reputation_senders=None, allow_sanctioned=None, input_email_file=None):  # noqa: E501
        """AdvancedEmailDetectionRequest - a model defined in Swagger"""  # noqa: E501

        self._from_email_address = None
        self._to_email_address = None
        self._subject = None
        self._html_body = None
        self._allow_low_reputation_senders = None
        self._allow_sanctioned = None
        self._input_email_file = None
        self.discriminator = None

        if from_email_address is not None:
            self.from_email_address = from_email_address
        if to_email_address is not None:
            self.to_email_address = to_email_address
        if subject is not None:
            self.subject = subject
        if html_body is not None:
            self.html_body = html_body
        if allow_low_reputation_senders is not None:
            self.allow_low_reputation_senders = allow_low_reputation_senders
        if allow_sanctioned is not None:
            self.allow_sanctioned = allow_sanctioned
        if input_email_file is not None:
            self.input_email_file = input_email_file

    @property
    def from_email_address(self):
        """Gets the from_email_address of this AdvancedEmailDetectionRequest.  # noqa: E501

        Email address of the sender  # noqa: E501

        :return: The from_email_address of this AdvancedEmailDetectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._from_email_address

    @from_email_address.setter
    def from_email_address(self, from_email_address):
        """Sets the from_email_address of this AdvancedEmailDetectionRequest.

        Email address of the sender  # noqa: E501

        :param from_email_address: The from_email_address of this AdvancedEmailDetectionRequest.  # noqa: E501
        :type: str
        """

        self._from_email_address = from_email_address

    @property
    def to_email_address(self):
        """Gets the to_email_address of this AdvancedEmailDetectionRequest.  # noqa: E501

        Email address of the recipient  # noqa: E501

        :return: The to_email_address of this AdvancedEmailDetectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._to_email_address

    @to_email_address.setter
    def to_email_address(self, to_email_address):
        """Sets the to_email_address of this AdvancedEmailDetectionRequest.

        Email address of the recipient  # noqa: E501

        :param to_email_address: The to_email_address of this AdvancedEmailDetectionRequest.  # noqa: E501
        :type: str
        """

        self._to_email_address = to_email_address

    @property
    def subject(self):
        """Gets the subject of this AdvancedEmailDetectionRequest.  # noqa: E501

        Subject of the email  # noqa: E501

        :return: The subject of this AdvancedEmailDetectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this AdvancedEmailDetectionRequest.

        Subject of the email  # noqa: E501

        :param subject: The subject of this AdvancedEmailDetectionRequest.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def html_body(self):
        """Gets the html_body of this AdvancedEmailDetectionRequest.  # noqa: E501

        Body of the email in HTML, or text  # noqa: E501

        :return: The html_body of this AdvancedEmailDetectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._html_body

    @html_body.setter
    def html_body(self, html_body):
        """Sets the html_body of this AdvancedEmailDetectionRequest.

        Body of the email in HTML, or text  # noqa: E501

        :param html_body: The html_body of this AdvancedEmailDetectionRequest.  # noqa: E501
        :type: str
        """

        self._html_body = html_body

    @property
    def allow_low_reputation_senders(self):
        """Gets the allow_low_reputation_senders of this AdvancedEmailDetectionRequest.  # noqa: E501

        Allow email from low reputation senders and domains  # noqa: E501

        :return: The allow_low_reputation_senders of this AdvancedEmailDetectionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_low_reputation_senders

    @allow_low_reputation_senders.setter
    def allow_low_reputation_senders(self, allow_low_reputation_senders):
        """Sets the allow_low_reputation_senders of this AdvancedEmailDetectionRequest.

        Allow email from low reputation senders and domains  # noqa: E501

        :param allow_low_reputation_senders: The allow_low_reputation_senders of this AdvancedEmailDetectionRequest.  # noqa: E501
        :type: bool
        """

        self._allow_low_reputation_senders = allow_low_reputation_senders

    @property
    def allow_sanctioned(self):
        """Gets the allow_sanctioned of this AdvancedEmailDetectionRequest.  # noqa: E501

        True to allow sanctioned countries and certain known sanctioned entities, false otherwise (default)  # noqa: E501

        :return: The allow_sanctioned of this AdvancedEmailDetectionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sanctioned

    @allow_sanctioned.setter
    def allow_sanctioned(self, allow_sanctioned):
        """Sets the allow_sanctioned of this AdvancedEmailDetectionRequest.

        True to allow sanctioned countries and certain known sanctioned entities, false otherwise (default)  # noqa: E501

        :param allow_sanctioned: The allow_sanctioned of this AdvancedEmailDetectionRequest.  # noqa: E501
        :type: bool
        """

        self._allow_sanctioned = allow_sanctioned

    @property
    def input_email_file(self):
        """Gets the input_email_file of this AdvancedEmailDetectionRequest.  # noqa: E501


        :return: The input_email_file of this AdvancedEmailDetectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._input_email_file

    @input_email_file.setter
    def input_email_file(self, input_email_file):
        """Sets the input_email_file of this AdvancedEmailDetectionRequest.


        :param input_email_file: The input_email_file of this AdvancedEmailDetectionRequest.  # noqa: E501
        :type: str
        """
        if input_email_file is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', input_email_file):  # noqa: E501
            raise ValueError(r"Invalid value for `input_email_file`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._input_email_file = input_email_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvancedEmailDetectionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvancedEmailDetectionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
