template_components:
  meta_task_schemas:
    - objective: system_analysis
      inputs:
        - parameter: x
      outputs:
        - parameter: g

loops:
  - name: markov_chain_state # [inner loop]
    tasks: [4, 5, 6]
    num_iterations: 9 # num_states - 1: (1 / p_0) - 1
  - name: levels # [outer loop]
    tasks: [2, 3, 4, 5, 6]
    num_iterations: 8
    termination_task: 2
    termination:
      path: outputs.is_finished
      condition: { value.equal_to: true }

resources:
  any:
    combine_scripts: true

meta_tasks:
  system_analysis:
    - schema: dummy_pre_processor # x -> y # python script
    - schema: model_sum_x # y -> sum_y via shell
    - schema: evaluate_limit_state_normal_sum # sum_y -> g # python script
      inputs:
        dimension: 200
        target_pf: 1e-4
      groups:
        - name: all

tasks:
  - schema: sample_direct_MC
    inputs:
      dimension: 200
    repeats: 100 # num_samples
  - schema: system_analysis
  - schema: collate_results # [outer loop]
    inputs:
      p_0: 0.1
  - schema: initialise_markov_chains # [outer loop]
    sequences:
      - path: inputs.chain_index
        values::from_range:
          start: 0
          stop: 10 # num_chains: num_samples * p_0
          step: 1
  - schema: generate_next_state # [inner loop]
    inputs:
      prop_std: 0.5
  - schema: system_analysis # [inner loop]
  - schema: increment_chain # [inner loop]
    groups:
      - name: all
