[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "injx"
version = "0.2.0"
description = "Type-safe dependency injection for Python 3.13+"
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.13"
license = {text = "Apache-2.0"}
authors = [
    {name = "Qrius Global", email = "mishal@qrius.global"}
]
keywords = ["dependency-injection", "ioc", "di", "type-safe", "async", "python3.13"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Framework :: AsyncIO",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries",
    "Typing :: Typed",
]

[project.urls]
Homepage = "https://github.com/qriusglobal/injx"
Repository = "https://github.com/qriusglobal/injx"
Documentation = "https://github.com/qriusglobal/injx#readme"
"Bug Tracker" = "https://github.com/qriusglobal/injx/issues"
Changelog = "https://github.com/qriusglobal/injx/releases"
CI = "https://github.com/qriusglobal/injx/actions"

[tool.uv]
package = true

[project.optional-dependencies]
dev = [
    "pytest>=8.2",
    "pytest-asyncio>=0.23",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.5.0",
    "httpx>=0.27",
    "asyncpg>=0.29",
    "SQLAlchemy>=2.0",
    "aiosqlite>=0.19",
    "playwright>=1.44",
    "ruff>=0.8.0",
    "basedpyright>=1.23.0",
    "pre-commit>=3.7",
    "python-semantic-release>=9.0",
    "commitizen>=3.30",
    "actionlint-py>=1.7.7",
]

docs = [
    "mkdocs>=1.6",
    "mkdocs-material>=9.6",
    "mkdocstrings[python]>=0.30",
    "mike>=2.0",
    "mkdocs-minify-plugin>=0.8",
    "mkdocs-llmstxt>=0.3",
    "beautifulsoup4>=4.13",
    "html2text>=2025.1",
]

test = [
    "pytest>=8.2",
    "pytest-asyncio>=0.23",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.5.0",
]


[tool.basedpyright]
include = ["src"]
exclude = ["tests", "examples", "dist", "build"]
pythonVersion = "3.13"
venvPath = "."
venv = ".venv"
stubPath = "typings"
typeCheckingMode = "strict"

# Error-level checks
reportMissingTypeStubs = "error"
reportUnusedImport = "error"
reportUnusedClass = "error"
reportUnusedFunction = "error"

# Warning-level checks
reportUnnecessaryIsInstance = "warning"
reportPrivateUsage = "warning"
reportImportCycles = "warning"  # Monitor but don't fail - handled by lazy imports
reportAny = "warning"           # Monitor but don't fail - DI needs dynamic typing

[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = ["E501"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
show_missing = true
# fail_under = 95  # Removed strict coverage requirement

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
]
asyncio_mode = "auto"

[tool.hatch.build]
include = [
    "src/injx/py.typed",
]

[tool.hatch.build.targets.wheel]
packages = ["src/injx"]

# Version is now static in [project] section

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
branch = "main"
commit_message = "chore(release): v{version} [skip ci]"
commit_author = "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
commit_parser = "conventional"
major_on_zero = false
allow_zero_version = true  # Enable pre-1.0 development (breaking changes â†’ minor bumps)
tag_format = "v{version}"
upload_to_pypi = false  # Controlled via workflow
upload_to_repository = false
build_command = "uv build"
changelog_file = "CHANGELOG.md"
changelog_sections = [
    {type = "feat", section = "Features"},
    {type = "fix", section = "Bug Fixes"},
    {type = "perf", section = "Performance"},
    {type = "refactor", section = "Refactoring"},
    {type = "docs", section = "Documentation"},
    {type = "test", section = "Testing"},
    {type = "ci", section = "CI/CD"},
]

[tool.semantic_release.remote]
type = "github"
name = "origin"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.commitizen]
name = "cz_conventional_commits"
version_provider = "project"
tag_format = "v$version"
version_scheme = "semver"
bump_message = "chore(release): v$new_version"
use_shortcuts = true
allow_abort = false

# Enhanced commitizen configuration for better validation
[tool.commitizen.settings]
allowed_prefixes = ["feat", "fix", "docs", "style", "refactor", "perf", "test", "build", "ci", "chore"]
commit_retry = true
encoding = "utf-8"


[tool.hatch.build.targets.sdist]
include = [
    "src/injx/py.typed",
    "src/injx/**/*.py",
    "README.md",
    "LICENSE",
    "NOTICE",
]
