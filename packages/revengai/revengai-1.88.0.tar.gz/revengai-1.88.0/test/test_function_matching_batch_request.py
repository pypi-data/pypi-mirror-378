# coding: utf-8

"""
    RevEng.AI API

    RevEng.AI is Similarity Search Engine for executable binaries

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from revengai.models.function_matching_batch_request import FunctionMatchingBatchRequest

class TestFunctionMatchingBatchRequest(unittest.TestCase):
    """FunctionMatchingBatchRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FunctionMatchingBatchRequest:
        """Test FunctionMatchingBatchRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FunctionMatchingBatchRequest`
        """
        model = FunctionMatchingBatchRequest()
        if include_optional:
            return FunctionMatchingBatchRequest(
                model_id = 56,
                scope = revengai.models.function_matching_scope_request.FunctionMatchingScopeRequest(
                    binary_ids = [
                        56
                        ], 
                    collection_ids = [
                        56
                        ], 
                    function_ids = [
                        56
                        ], 
                    min_similarity = 0.0, 
                    debug_types = [
                        'USER'
                        ], )
            )
        else:
            return FunctionMatchingBatchRequest(
                scope = revengai.models.function_matching_scope_request.FunctionMatchingScopeRequest(
                    binary_ids = [
                        56
                        ], 
                    collection_ids = [
                        56
                        ], 
                    function_ids = [
                        56
                        ], 
                    min_similarity = 0.0, 
                    debug_types = [
                        'USER'
                        ], ),
        )
        """

    def testFunctionMatchingBatchRequest(self):
        """Test FunctionMatchingBatchRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
