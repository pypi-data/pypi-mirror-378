# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/v2/protoc-gen-connecpy.  DO NOT EDIT!
# source: metalstack/admin/v2/ip.proto

from collections.abc import AsyncIterator, Iterable, Iterator, Mapping
from typing import Protocol

from connecpy.client import ConnecpyClient, ConnecpyClientSync
from connecpy.code import Code
from connecpy.exceptions import ConnecpyException
from connecpy.interceptor import Interceptor, InterceptorSync
from connecpy.method import IdempotencyLevel, MethodInfo
from connecpy.request import Headers, RequestContext
from connecpy.server import ConnecpyASGIApplication, ConnecpyWSGIApplication, Endpoint, EndpointSync
import metalstack.admin.v2.ip_pb2 as metalstack_dot_admin_dot_v2_dot_ip__pb2


class IPService(Protocol):
    async def list(self, request: metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest, ctx: RequestContext) -> metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")

    async def issues(self, request: metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesRequest, ctx: RequestContext) -> metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesResponse:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class IPServiceASGIApplication(ConnecpyASGIApplication):
    def __init__(self, service: IPService, *, interceptors: Iterable[Interceptor]=(), read_max_bytes: int | None = None):
        super().__init__(
            endpoints={
                "/metalstack.admin.v2.IPService/List": Endpoint.unary(
                    method=MethodInfo(
                        name="List",
                        service_name="metalstack.admin.v2.IPService",
                        input=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest,
                        output=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list,
                ),
                "/metalstack.admin.v2.IPService/Issues": Endpoint.unary(
                    method=MethodInfo(
                        name="Issues",
                        service_name="metalstack.admin.v2.IPService",
                        input=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesRequest,
                        output=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.issues,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self):
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/metalstack.admin.v2.IPService"


class IPServiceClient(ConnecpyClient):
    async def list(
        self,
        request: metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="List",
                service_name="metalstack.admin.v2.IPService",
                input=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest,
                output=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    async def issues(
        self,
        request: metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesResponse:
        return await self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Issues",
                service_name="metalstack.admin.v2.IPService",
                input=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesRequest,
                output=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )


class IPServiceSync(Protocol):
    def list(self, request: metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest, ctx: RequestContext) -> metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")
    def issues(self, request: metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesRequest, ctx: RequestContext) -> metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesResponse:
        raise ConnecpyException(Code.UNIMPLEMENTED, "Not implemented")


class IPServiceWSGIApplication(ConnecpyWSGIApplication):
    def __init__(self, service: IPServiceSync, interceptors: Iterable[InterceptorSync]=(), read_max_bytes: int | None = None):
        super().__init__(
            endpoints={
                "/metalstack.admin.v2.IPService/List": EndpointSync.unary(
                    method=MethodInfo(
                        name="List",
                        service_name="metalstack.admin.v2.IPService",
                        input=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest,
                        output=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.list,
                ),
                "/metalstack.admin.v2.IPService/Issues": EndpointSync.unary(
                    method=MethodInfo(
                        name="Issues",
                        service_name="metalstack.admin.v2.IPService",
                        input=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesRequest,
                        output=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesResponse,
                        idempotency_level=IdempotencyLevel.UNKNOWN,
                    ),
                    function=service.issues,
                ),
            },
            interceptors=interceptors,
            read_max_bytes=read_max_bytes,
        )

    @property
    def path(self):
        """Returns the URL path to mount the application to when serving multiple applications."""
        return "/metalstack.admin.v2.IPService"


class IPServiceClientSync(ConnecpyClientSync):
    def list(
        self,
        request: metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="List",
                service_name="metalstack.admin.v2.IPService",
                input=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListRequest,
                output=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceListResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )

    def issues(
        self,
        request: metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesRequest,
        *,
        headers: Headers | Mapping[str, str] | None = None,
        timeout_ms: int | None = None,
    ) -> metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesResponse:
        return self.execute_unary(
            request=request,
            method=MethodInfo(
                name="Issues",
                service_name="metalstack.admin.v2.IPService",
                input=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesRequest,
                output=metalstack_dot_admin_dot_v2_dot_ip__pb2.IPServiceIssuesResponse,
                idempotency_level=IdempotencyLevel.UNKNOWN,
            ),
            headers=headers,
            timeout_ms=timeout_ms,
        )
