# Code generated by generate.go. DO NOT EDIT.

import httpx

import metalstack.admin.v2.filesystem_connecpy as admin_filesystem_connecpy
import metalstack.admin.v2.image_connecpy as admin_image_connecpy
import metalstack.admin.v2.ip_connecpy as admin_ip_connecpy
import metalstack.admin.v2.machine_connecpy as admin_machine_connecpy
import metalstack.admin.v2.network_connecpy as admin_network_connecpy
import metalstack.admin.v2.partition_connecpy as admin_partition_connecpy
import metalstack.admin.v2.size_connecpy as admin_size_connecpy
import metalstack.admin.v2.tenant_connecpy as admin_tenant_connecpy
import metalstack.admin.v2.token_connecpy as admin_token_connecpy

import metalstack.api.v2.filesystem_connecpy as api_filesystem_connecpy
import metalstack.api.v2.health_connecpy as api_health_connecpy
import metalstack.api.v2.image_connecpy as api_image_connecpy
import metalstack.api.v2.ip_connecpy as api_ip_connecpy
import metalstack.api.v2.machine_connecpy as api_machine_connecpy
import metalstack.api.v2.method_connecpy as api_method_connecpy
import metalstack.api.v2.network_connecpy as api_network_connecpy
import metalstack.api.v2.partition_connecpy as api_partition_connecpy
import metalstack.api.v2.project_connecpy as api_project_connecpy
import metalstack.api.v2.size_connecpy as api_size_connecpy
import metalstack.api.v2.tenant_connecpy as api_tenant_connecpy
import metalstack.api.v2.token_connecpy as api_token_connecpy
import metalstack.api.v2.user_connecpy as api_user_connecpy
import metalstack.api.v2.version_connecpy as api_version_connecpy

import metalstack.infra.v2.bmc_connecpy as infra_bmc_connecpy
import metalstack.infra.v2.switch_connecpy as infra_switch_connecpy



class Client:
    def __init__(self, baseurl: str, token: str, timeout: int = 10):
        self._baseurl = baseurl

        headers = {}
        if token:
            headers["Authorization"] = "Bearer " + token

        self._session = httpx.Client(headers=headers, timeout=timeout)


    def adminv2(self):
        return self._Adminv2(baseurl=self._baseurl, session=self._session)

    def apiv2(self):
        return self._Apiv2(baseurl=self._baseurl, session=self._session)

    def infrav2(self):
        return self._Infrav2(baseurl=self._baseurl, session=self._session)



    class _Adminv2:
        def __init__(self, baseurl: str, session=None):
            self._baseurl = baseurl
            self._session = session


        def filesystem(self):
            return admin_filesystem_connecpy.FilesystemServiceClientSync(address=self._baseurl, session=self._session)

        def image(self):
            return admin_image_connecpy.ImageServiceClientSync(address=self._baseurl, session=self._session)

        def ip(self):
            return admin_ip_connecpy.IPServiceClientSync(address=self._baseurl, session=self._session)

        def machine(self):
            return admin_machine_connecpy.MachineServiceClientSync(address=self._baseurl, session=self._session)

        def network(self):
            return admin_network_connecpy.NetworkServiceClientSync(address=self._baseurl, session=self._session)

        def partition(self):
            return admin_partition_connecpy.PartitionServiceClientSync(address=self._baseurl, session=self._session)

        def size(self):
            return admin_size_connecpy.SizeServiceClientSync(address=self._baseurl, session=self._session)

        def tenant(self):
            return admin_tenant_connecpy.TenantServiceClientSync(address=self._baseurl, session=self._session)

        def token(self):
            return admin_token_connecpy.TokenServiceClientSync(address=self._baseurl, session=self._session)


    class _Apiv2:
        def __init__(self, baseurl: str, session=None):
            self._baseurl = baseurl
            self._session = session


        def filesystem(self):
            return api_filesystem_connecpy.FilesystemServiceClientSync(address=self._baseurl, session=self._session)

        def health(self):
            return api_health_connecpy.HealthServiceClientSync(address=self._baseurl, session=self._session)

        def image(self):
            return api_image_connecpy.ImageServiceClientSync(address=self._baseurl, session=self._session)

        def ip(self):
            return api_ip_connecpy.IPServiceClientSync(address=self._baseurl, session=self._session)

        def machine(self):
            return api_machine_connecpy.MachineServiceClientSync(address=self._baseurl, session=self._session)

        def method(self):
            return api_method_connecpy.MethodServiceClientSync(address=self._baseurl, session=self._session)

        def network(self):
            return api_network_connecpy.NetworkServiceClientSync(address=self._baseurl, session=self._session)

        def partition(self):
            return api_partition_connecpy.PartitionServiceClientSync(address=self._baseurl, session=self._session)

        def project(self):
            return api_project_connecpy.ProjectServiceClientSync(address=self._baseurl, session=self._session)

        def size(self):
            return api_size_connecpy.SizeServiceClientSync(address=self._baseurl, session=self._session)

        def tenant(self):
            return api_tenant_connecpy.TenantServiceClientSync(address=self._baseurl, session=self._session)

        def token(self):
            return api_token_connecpy.TokenServiceClientSync(address=self._baseurl, session=self._session)

        def user(self):
            return api_user_connecpy.UserServiceClientSync(address=self._baseurl, session=self._session)

        def version(self):
            return api_version_connecpy.VersionServiceClientSync(address=self._baseurl, session=self._session)


    class _Infrav2:
        def __init__(self, baseurl: str, session=None):
            self._baseurl = baseurl
            self._session = session


        def bmc(self):
            return infra_bmc_connecpy.BMCServiceClientSync(address=self._baseurl, session=self._session)

        def switch(self):
            return infra_switch_connecpy.SwitchServiceClientSync(address=self._baseurl, session=self._session)


