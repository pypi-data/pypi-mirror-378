# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import riva_nmt_pb2 as riva_dot_proto_dot_riva__nmt__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in riva/proto/riva_nmt_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RivaTranslationStub(object):
    """
    RivaTranslation service provides rpcs to translate between languages.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TranslateText = channel.unary_unary(
                '/nvidia.riva.nmt.RivaTranslation/TranslateText',
                request_serializer=riva_dot_proto_dot_riva__nmt__pb2.TranslateTextRequest.SerializeToString,
                response_deserializer=riva_dot_proto_dot_riva__nmt__pb2.TranslateTextResponse.FromString,
                _registered_method=True)
        self.ListSupportedLanguagePairs = channel.unary_unary(
                '/nvidia.riva.nmt.RivaTranslation/ListSupportedLanguagePairs',
                request_serializer=riva_dot_proto_dot_riva__nmt__pb2.AvailableLanguageRequest.SerializeToString,
                response_deserializer=riva_dot_proto_dot_riva__nmt__pb2.AvailableLanguageResponse.FromString,
                _registered_method=True)
        self.StreamingTranslateSpeechToText = channel.stream_stream(
                '/nvidia.riva.nmt.RivaTranslation/StreamingTranslateSpeechToText',
                request_serializer=riva_dot_proto_dot_riva__nmt__pb2.StreamingTranslateSpeechToTextRequest.SerializeToString,
                response_deserializer=riva_dot_proto_dot_riva__nmt__pb2.StreamingTranslateSpeechToTextResponse.FromString,
                _registered_method=True)
        self.StreamingTranslateSpeechToSpeech = channel.stream_stream(
                '/nvidia.riva.nmt.RivaTranslation/StreamingTranslateSpeechToSpeech',
                request_serializer=riva_dot_proto_dot_riva__nmt__pb2.StreamingTranslateSpeechToSpeechRequest.SerializeToString,
                response_deserializer=riva_dot_proto_dot_riva__nmt__pb2.StreamingTranslateSpeechToSpeechResponse.FromString,
                _registered_method=True)


class RivaTranslationServicer(object):
    """
    RivaTranslation service provides rpcs to translate between languages.

    """

    def TranslateText(self, request, context):
        """Translate text to text, from a source to a target language.  Currently
        source and target language fields is required, along with the model name.
        Multiple texts may be passed per request up to the given batch size for the
        model, which is set at translation pipeline creation time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSupportedLanguagePairs(self, request, context):
        """Lists the available language pairs and models names to be used for
        TranslateText
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamingTranslateSpeechToText(self, request_iterator, context):
        """streaming speech to text translation api.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamingTranslateSpeechToSpeech(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RivaTranslationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TranslateText': grpc.unary_unary_rpc_method_handler(
                    servicer.TranslateText,
                    request_deserializer=riva_dot_proto_dot_riva__nmt__pb2.TranslateTextRequest.FromString,
                    response_serializer=riva_dot_proto_dot_riva__nmt__pb2.TranslateTextResponse.SerializeToString,
            ),
            'ListSupportedLanguagePairs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSupportedLanguagePairs,
                    request_deserializer=riva_dot_proto_dot_riva__nmt__pb2.AvailableLanguageRequest.FromString,
                    response_serializer=riva_dot_proto_dot_riva__nmt__pb2.AvailableLanguageResponse.SerializeToString,
            ),
            'StreamingTranslateSpeechToText': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamingTranslateSpeechToText,
                    request_deserializer=riva_dot_proto_dot_riva__nmt__pb2.StreamingTranslateSpeechToTextRequest.FromString,
                    response_serializer=riva_dot_proto_dot_riva__nmt__pb2.StreamingTranslateSpeechToTextResponse.SerializeToString,
            ),
            'StreamingTranslateSpeechToSpeech': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamingTranslateSpeechToSpeech,
                    request_deserializer=riva_dot_proto_dot_riva__nmt__pb2.StreamingTranslateSpeechToSpeechRequest.FromString,
                    response_serializer=riva_dot_proto_dot_riva__nmt__pb2.StreamingTranslateSpeechToSpeechResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nvidia.riva.nmt.RivaTranslation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nvidia.riva.nmt.RivaTranslation', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RivaTranslation(object):
    """
    RivaTranslation service provides rpcs to translate between languages.

    """

    @staticmethod
    def TranslateText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nvidia.riva.nmt.RivaTranslation/TranslateText',
            riva_dot_proto_dot_riva__nmt__pb2.TranslateTextRequest.SerializeToString,
            riva_dot_proto_dot_riva__nmt__pb2.TranslateTextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSupportedLanguagePairs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nvidia.riva.nmt.RivaTranslation/ListSupportedLanguagePairs',
            riva_dot_proto_dot_riva__nmt__pb2.AvailableLanguageRequest.SerializeToString,
            riva_dot_proto_dot_riva__nmt__pb2.AvailableLanguageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamingTranslateSpeechToText(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/nvidia.riva.nmt.RivaTranslation/StreamingTranslateSpeechToText',
            riva_dot_proto_dot_riva__nmt__pb2.StreamingTranslateSpeechToTextRequest.SerializeToString,
            riva_dot_proto_dot_riva__nmt__pb2.StreamingTranslateSpeechToTextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamingTranslateSpeechToSpeech(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/nvidia.riva.nmt.RivaTranslation/StreamingTranslateSpeechToSpeech',
            riva_dot_proto_dot_riva__nmt__pb2.StreamingTranslateSpeechToSpeechRequest.SerializeToString,
            riva_dot_proto_dot_riva__nmt__pb2.StreamingTranslateSpeechToSpeechResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
