[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "killertools"
version = "0.1.0"
description = "A modern, cross-platform Swiss-army toolkit for developers and makers"
authors = ["Jose Manuel (VoxHash) <contact@voxhash.dev>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/VoxHash/KillerTools"
repository = "https://github.com/VoxHash/KillerTools"
documentation = "https://voxhash.github.io/KillerTools"
keywords = ["cli", "tui", "gui", "tools", "utilities", "developer", "productivity"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]

packages = [
    {include = "killer_tools"},
    {include = "apps"}
]

[tool.poetry.dependencies]
python = ">=3.11,<3.14"
typer = {extras = ["all"], version = "^0.9.0"}
rich = "^13.7.0"
textual = "^0.44.0"
PyQt6 = "^6.6.0"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
click = "^8.1.7"
pathlib2 = "^2.3.7"
pillow = "^10.1.0"
requests = "^2.31.0"
cryptography = "^41.0.0"
pyjwt = "^2.8.0"
pyyaml = "^6.0.1"
toml = "^0.10.2"
python-dotenv = "^1.0.0"
# blake3 = "^0.3.3"  # Requires Rust/Cargo
uuid = "^1.30"
ulid-py = "^1.1.0"
openai = {version = "^1.3.0", optional = true}
speedtest-cli = {version = "^2.1.3", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
ruff = "^0.1.0"
black = "^23.11.0"
isort = "^5.12.0"
mypy = "^1.7.0"
pre-commit = "^3.6.0"
mkdocs = "^1.5.0"
mkdocs-material = "^9.4.0"
mkdocs-mermaid2-plugin = "^1.1.0"
pyinstaller = "^6.1.0"
nuitka = "^1.8.0"

[tool.poetry.extras]
ai = ["openai"]
network = ["speedtest-cli"]

[tool.poetry.scripts]
killertools = "apps.cli.main:app"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",  # flake8-quotes
    "N",  # pep8-naming
    "D",  # pydocstyle
    "S",  # bandit
    "T20", # flake8-print
    "PT", # flake8-pytest-style
    "RET", # flake8-return
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL", # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "S101", # Use of assert detected
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "T20", # print statements (we use rich.print)
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["S101", "PLR2004", "ARG", "FBT"]
"scripts/**/*" = ["T20", "S101"]

[tool.ruff.isort]
known-first-party = ["killer_tools", "apps"]

[tool.black]
target-version = ['py311']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["killer_tools", "apps"]
known_third_party = ["typer", "rich", "textual", "PyQt6", "pydantic"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "textual.*",
    "PyQt6.*",
    "cryptography.*",
    "blake3.*",
    "ulid.*",
    "speedtest_cli.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gui: marks tests as GUI tests",
    "tui: marks tests as TUI tests",
    "cli: marks tests as CLI tests",
]

[tool.coverage.run]
source = ["killer_tools", "apps"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
