/'
 ' Diagram generated by cwl2puml v0.14.0
 ' timestamp: 2025-09-20T09:51:50.868
 '/
@startuml

skinparam linetype ortho


node "Workflow 'water-bodies'" {
    component "water-bodies" as water_bodies {
    
        portin "stac_api_endpoint" as water_bodies_stac_api_endpoint
    
        portin "search_request" as water_bodies_search_request
    
        portin "bands" as water_bodies_bands
    
    
        portout "zarr_stac_catalog" as water_bodies_zarr_stac_catalog
    
        portout "stac_catalog" as water_bodies_stac_catalog
    
    }


    component "discovery" as water_bodies_discovery {
    
        portin "api_endpoint" as water_bodies_discovery_api_endpoint
        water_bodies_stac_api_endpoint .down.> water_bodies_discovery_api_endpoint
    
        portin "search_request" as water_bodies_discovery_search_request
        water_bodies_search_request .down.> water_bodies_discovery_search_request
    

    
        portout "search_output" as water_bodies_discovery_search_output
    
    }

    component "convert_search" as water_bodies_convert_search {
    
        portin "search_results" as water_bodies_convert_search_search_results
        water_bodies_discovery_search_output .down.> water_bodies_convert_search_search_results
    
        portin "search_request" as water_bodies_convert_search_search_request
        water_bodies_search_request .down.> water_bodies_convert_search_search_request
    

    
        portout "items" as water_bodies_convert_search_items
    
        portout "aoi" as water_bodies_convert_search_aoi
    
    }

    component "water_bodies" as water_bodies_water_bodies {
    
        portin "item" as water_bodies_water_bodies_item
        water_bodies_convert_search_items .down.> water_bodies_water_bodies_item
    
        portin "aoi" as water_bodies_water_bodies_aoi
        water_bodies_convert_search_aoi .down.> water_bodies_water_bodies_aoi
    
        portin "bands" as water_bodies_water_bodies_bands
        water_bodies_bands .down.> water_bodies_water_bodies_bands
    

    
        portout "detected_water_body" as water_bodies_water_bodies_detected_water_body
    
    }

    component "stac" as water_bodies_stac {
    
        portin "item" as water_bodies_stac_item
        water_bodies_convert_search_items .down.> water_bodies_stac_item
    
        portin "rasters" as water_bodies_stac_rasters
        water_bodies_water_bodies_detected_water_body .down.> water_bodies_stac_rasters
    

    
        portout "temp_stac_catalog" as water_bodies_stac_temp_stac_catalog
    
    }

    component "stac_zarr" as water_bodies_stac_zarr {
    
        portin "stac_catalog" as water_bodies_stac_zarr_stac_catalog
        water_bodies_stac_temp_stac_catalog .down.> water_bodies_stac_zarr_stac_catalog
    

    
        portout "zarr_stac_catalog" as water_bodies_stac_zarr_zarr_stac_catalog
    
    }

}

node "CommandLineTool 'convert-search'" {
    component "convert-search" as convert_search {
    
        portin "search_request" as convert_search_search_request
    
        portin "search_results" as convert_search_search_results
    
    
        portout "items" as convert_search_items
    
        portout "aoi" as convert_search_aoi
    
    }


}

node "CommandLineTool 'stac-zarr'" {
    component "stac-zarr" as stac_zarr {
    
        portin "stac_catalog" as stac_zarr_stac_catalog
    
    
        portout "zarr_stac_catalog" as stac_zarr_zarr_stac_catalog
    
    }


}

node "CommandLineTool 'stac'" {
    component "stac" as stac {
    
        portin "item" as stac_item
    
        portin "rasters" as stac_rasters
    
    
        portout "temp_stac_catalog" as stac_temp_stac_catalog
    
    }


}

node "Workflow 'detect_water_body'" {
    component "detect_water_body" as detect_water_body {
    
        portin "aoi" as detect_water_body_aoi
    
        portin "epsg" as detect_water_body_epsg
    
        portin "bands" as detect_water_body_bands
    
        portin "item" as detect_water_body_item
    
    
        portout "detected_water_body" as detect_water_body_detected_water_body
    
    }


    component "crop" as detect_water_body_crop {
    
        portin "item" as detect_water_body_crop_item
        detect_water_body_item .down.> detect_water_body_crop_item
    
        portin "aoi" as detect_water_body_crop_aoi
        detect_water_body_aoi .down.> detect_water_body_crop_aoi
    
        portin "epsg" as detect_water_body_crop_epsg
        detect_water_body_epsg .down.> detect_water_body_crop_epsg
    
        portin "band" as detect_water_body_crop_band
        detect_water_body_bands .down.> detect_water_body_crop_band
    

    
        portout "cropped" as detect_water_body_crop_cropped
    
    }

    component "normalized_difference" as detect_water_body_normalized_difference {
    
        portin "rasters" as detect_water_body_normalized_difference_rasters
        detect_water_body_crop_cropped .down.> detect_water_body_normalized_difference_rasters
    

    
        portout "ndwi" as detect_water_body_normalized_difference_ndwi
    
    }

    component "otsu" as detect_water_body_otsu {
    
        portin "raster" as detect_water_body_otsu_raster
        detect_water_body_normalized_difference_ndwi .down.> detect_water_body_otsu_raster
    

    
        portout "binary_mask_item" as detect_water_body_otsu_binary_mask_item
    
    }

}

node "CommandLineTool 'stac-client'" {
    component "stac-client" as stac_client {
    
        portin "api_endpoint" as stac_client_api_endpoint
    
        portin "search_request" as stac_client_search_request
    
    
        portout "search_output" as stac_client_search_output
    
    }


}

node "CommandLineTool 'norm_diff'" {
    component "norm_diff" as norm_diff {
    
        portin "rasters" as norm_diff_rasters
    
    
        portout "ndwi" as norm_diff_ndwi
    
    }


}

node "CommandLineTool 'crop'" {
    component "crop" as crop {
    
        portin "item" as crop_item
    
        portin "aoi" as crop_aoi
    
        portin "epsg" as crop_epsg
    
        portin "band" as crop_band
    
    
        portout "cropped" as crop_cropped
    
    }


}

node "CommandLineTool 'otsu'" {
    component "otsu" as otsu {
    
        portin "raster" as otsu_raster
    
    
        portout "binary_mask_item" as otsu_binary_mask_item
    
    }


}



    
        
water_bodies_stac_zarr_zarr_stac_catalog .up.> water_bodies_zarr_stac_catalog
        
    
        
water_bodies_stac_temp_stac_catalog .up.> water_bodies_stac_catalog
        
    

    
water_bodies_discovery .right.> stac_client
    
water_bodies_convert_search .right.> convert_search
    
water_bodies_water_bodies .right.> detect_water_body
    
water_bodies_stac .right.> stac
    
water_bodies_stac_zarr .right.> stac_zarr
    

    
        
    
        
    

    

    
        
    

    

    
        
    

    

    
        
detect_water_body_otsu_binary_mask_item .up.> detect_water_body_detected_water_body
        
    

    
detect_water_body_crop .right.> crop
    
detect_water_body_normalized_difference .right.> norm_diff
    
detect_water_body_otsu .right.> otsu
    

    
        
    

    

    
        
    

    

    
        
    

    

    
        
    

    


@enduml