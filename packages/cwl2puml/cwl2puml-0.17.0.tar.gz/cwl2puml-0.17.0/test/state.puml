/'
 ' Diagram generated by cwl2puml v0.14.0
 ' timestamp: 2025-09-20T09:51:50.902
 '/
@startuml
hide empty description






    
state "water-bodies" as water_bodies {
        
    state "stac_api_endpoint" as water_bodies_stac_api_endpoint <<entryPoint>>
        
    state "search_request" as water_bodies_search_request <<entryPoint>>
        
    state "bands" as water_bodies_bands <<entryPoint>>
        


    
        

        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        

        
    state discovery {
            
        state "api_endpoint" as discovery_api_endpoint <<entryPoint>>
        water_bodies_stac_api_endpoint --> discovery_api_endpoint
            
        state "search_request" as discovery_search_request <<entryPoint>>
        water_bodies_search_request --> discovery_search_request
            

            
        state "search_output" as discovery_search_output <<exitPoint>>
            
    }
        
    
        

        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        

        
    state convert_search {
            
        state "search_results" as convert_search_search_results <<entryPoint>>
        discovery_search_output --> convert_search_search_results
            
        state "search_request" as convert_search_search_request <<entryPoint>>
        water_bodies_search_request --> convert_search_search_request
            

            
        state "items" as convert_search_items <<exitPoint>>
            
        state "aoi" as convert_search_aoi <<exitPoint>>
            
    }
        
    
        

        
            
        
            
        
            
        
            
        
            
                
' Workflow
state "water-bodies" as water_bodies {
                
    state "aoi" as detect_water_body_aoi <<entryPoint>>
                
    state "epsg" as detect_water_body_epsg <<entryPoint>>
                
    state "bands" as detect_water_body_bands <<entryPoint>>
                
    state "item" as detect_water_body_item <<entryPoint>>
                
                
    convert_search_items --> detect_water_body_item
                
    convert_search_aoi --> detect_water_body_aoi
                
    water_bodies_bands --> detect_water_body_bands
                

                
    
        

        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        

        
    state crop {
            
        state "item" as crop_item <<entryPoint>>
        detect_water_body_item --> crop_item
            
        state "aoi" as crop_aoi <<entryPoint>>
        detect_water_body_aoi --> crop_aoi
            
        state "epsg" as crop_epsg <<entryPoint>>
        detect_water_body_epsg --> crop_epsg
            
        state "band" as crop_band <<entryPoint>>
        detect_water_body_bands --> crop_band
            

            
        state "cropped" as crop_cropped <<exitPoint>>
            
    }
        
    
        

        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        

        
    state normalized_difference {
            
        state "rasters" as normalized_difference_rasters <<entryPoint>>
        crop_cropped --> normalized_difference_rasters
            

            
        state "ndwi" as normalized_difference_ndwi <<exitPoint>>
            
    }
        
    
        

        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        

        
    state otsu {
            
        state "raster" as otsu_raster <<entryPoint>>
        normalized_difference_ndwi --> otsu_raster
            

            
        state "binary_mask_item" as otsu_binary_mask_item <<exitPoint>>
            
    }
        
    

                
    state "detected_water_body" as water_bodies_detected_water_body <<exitPoint>>
    otsu_binary_mask_item --> water_bodies_detected_water_body
                
}
            
        
            
        
            
        
            
        
            
        

        
    
        

        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        

        
    state stac {
            
        state "item" as stac_item <<entryPoint>>
        convert_search_items --> stac_item
            
        state "rasters" as stac_rasters <<entryPoint>>
        water_bodies_detected_water_body --> stac_rasters
            

            
        state "temp_stac_catalog" as stac_temp_stac_catalog <<exitPoint>>
            
    }
        
    
        

        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        

        
    state stac_zarr {
            
        state "stac_catalog" as stac_zarr_stac_catalog <<entryPoint>>
        stac_temp_stac_catalog --> stac_zarr_stac_catalog
            

            
        state "zarr_stac_catalog" as stac_zarr_zarr_stac_catalog <<exitPoint>>
            
    }
        
    

            
state "zarr_stac_catalog" as water_bodies_zarr_stac_catalog <<exitPoint>>
stac_zarr_zarr_stac_catalog --> water_bodies_zarr_stac_catalog
            
state "stac_catalog" as water_bodies_stac_catalog <<exitPoint>>
stac_temp_stac_catalog --> water_bodies_stac_catalog
            
}
        
[*] --> water_bodies_stac_api_endpoint
        
[*] --> water_bodies_search_request
        
[*] --> water_bodies_bands
        
    

    

    

    

    

    

    

    

    


@enduml