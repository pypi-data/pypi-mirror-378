# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ServiceAccountApiTokenArgs', 'ServiceAccountApiToken']

@pulumi.input_type
class ServiceAccountApiTokenArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[builtins.str],
                 max_age: pulumi.Input[builtins.str],
                 service_account_id: pulumi.Input[builtins.str],
                 extended: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 service_account_api_token_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ServiceAccountApiToken resource.
        :param pulumi.Input[builtins.str] description: The API token description.
        :param pulumi.Input[builtins.str] max_age: The time the token remains valid since creation (ISO 8601 duration format).
        :param pulumi.Input[builtins.str] service_account_id: The ID of the Service Account owning the API Token.
        :param pulumi.Input[builtins.bool] extended: Specify whether the expiry date is automatically moved forward by max age whenever the token is used. Defaults to
               `false`.
        :param pulumi.Input[builtins.str] name: The API token display name.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "max_age", max_age)
        pulumi.set(__self__, "service_account_id", service_account_id)
        if extended is not None:
            pulumi.set(__self__, "extended", extended)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_account_api_token_id is not None:
            pulumi.set(__self__, "service_account_api_token_id", service_account_api_token_id)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[builtins.str]:
        """
        The API token description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> pulumi.Input[builtins.str]:
        """
        The time the token remains valid since creation (ISO 8601 duration format).
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> pulumi.Input[builtins.str]:
        """
        The ID of the Service Account owning the API Token.
        """
        return pulumi.get(self, "service_account_id")

    @service_account_id.setter
    def service_account_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "service_account_id", value)

    @property
    @pulumi.getter
    def extended(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Specify whether the expiry date is automatically moved forward by max age whenever the token is used. Defaults to
        `false`.
        """
        return pulumi.get(self, "extended")

    @extended.setter
    def extended(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "extended", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The API token display name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceAccountApiTokenId")
    def service_account_api_token_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "service_account_api_token_id")

    @service_account_api_token_id.setter
    def service_account_api_token_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_account_api_token_id", value)


@pulumi.input_type
class _ServiceAccountApiTokenState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 extended: Optional[pulumi.Input[builtins.bool]] = None,
                 full_token: Optional[pulumi.Input[builtins.str]] = None,
                 max_age: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 service_account_api_token_id: Optional[pulumi.Input[builtins.str]] = None,
                 service_account_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering ServiceAccountApiToken resources.
        :param pulumi.Input[builtins.str] description: The API token description.
        :param pulumi.Input[builtins.bool] extended: Specify whether the expiry date is automatically moved forward by max age whenever the token is used. Defaults to
               `false`.
        :param pulumi.Input[builtins.str] full_token: The full API token.
        :param pulumi.Input[builtins.str] max_age: The time the token remains valid since creation (ISO 8601 duration format).
        :param pulumi.Input[builtins.str] name: The API token display name.
        :param pulumi.Input[builtins.str] service_account_id: The ID of the Service Account owning the API Token.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if extended is not None:
            pulumi.set(__self__, "extended", extended)
        if full_token is not None:
            pulumi.set(__self__, "full_token", full_token)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_account_api_token_id is not None:
            pulumi.set(__self__, "service_account_api_token_id", service_account_api_token_id)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The API token description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def extended(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Specify whether the expiry date is automatically moved forward by max age whenever the token is used. Defaults to
        `false`.
        """
        return pulumi.get(self, "extended")

    @extended.setter
    def extended(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "extended", value)

    @property
    @pulumi.getter(name="fullToken")
    def full_token(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The full API token.
        """
        return pulumi.get(self, "full_token")

    @full_token.setter
    def full_token(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "full_token", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The time the token remains valid since creation (ISO 8601 duration format).
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The API token display name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceAccountApiTokenId")
    def service_account_api_token_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "service_account_api_token_id")

    @service_account_api_token_id.setter
    def service_account_api_token_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_account_api_token_id", value)

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The ID of the Service Account owning the API Token.
        """
        return pulumi.get(self, "service_account_id")

    @service_account_id.setter
    def service_account_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_account_id", value)


@pulumi.type_token("kestra:index/serviceAccountApiToken:ServiceAccountApiToken")
class ServiceAccountApiToken(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 extended: Optional[pulumi.Input[builtins.bool]] = None,
                 max_age: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 service_account_api_token_id: Optional[pulumi.Input[builtins.str]] = None,
                 service_account_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a ServiceAccountApiToken resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: The API token description.
        :param pulumi.Input[builtins.bool] extended: Specify whether the expiry date is automatically moved forward by max age whenever the token is used. Defaults to
               `false`.
        :param pulumi.Input[builtins.str] max_age: The time the token remains valid since creation (ISO 8601 duration format).
        :param pulumi.Input[builtins.str] name: The API token display name.
        :param pulumi.Input[builtins.str] service_account_id: The ID of the Service Account owning the API Token.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceAccountApiTokenArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ServiceAccountApiToken resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServiceAccountApiTokenArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceAccountApiTokenArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 extended: Optional[pulumi.Input[builtins.bool]] = None,
                 max_age: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 service_account_api_token_id: Optional[pulumi.Input[builtins.str]] = None,
                 service_account_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceAccountApiTokenArgs.__new__(ServiceAccountApiTokenArgs)

            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["extended"] = extended
            if max_age is None and not opts.urn:
                raise TypeError("Missing required property 'max_age'")
            __props__.__dict__["max_age"] = max_age
            __props__.__dict__["name"] = name
            __props__.__dict__["service_account_api_token_id"] = service_account_api_token_id
            if service_account_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_account_id'")
            __props__.__dict__["service_account_id"] = service_account_id
            __props__.__dict__["full_token"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["fullToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ServiceAccountApiToken, __self__).__init__(
            'kestra:index/serviceAccountApiToken:ServiceAccountApiToken',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            extended: Optional[pulumi.Input[builtins.bool]] = None,
            full_token: Optional[pulumi.Input[builtins.str]] = None,
            max_age: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            service_account_api_token_id: Optional[pulumi.Input[builtins.str]] = None,
            service_account_id: Optional[pulumi.Input[builtins.str]] = None) -> 'ServiceAccountApiToken':
        """
        Get an existing ServiceAccountApiToken resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: The API token description.
        :param pulumi.Input[builtins.bool] extended: Specify whether the expiry date is automatically moved forward by max age whenever the token is used. Defaults to
               `false`.
        :param pulumi.Input[builtins.str] full_token: The full API token.
        :param pulumi.Input[builtins.str] max_age: The time the token remains valid since creation (ISO 8601 duration format).
        :param pulumi.Input[builtins.str] name: The API token display name.
        :param pulumi.Input[builtins.str] service_account_id: The ID of the Service Account owning the API Token.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceAccountApiTokenState.__new__(_ServiceAccountApiTokenState)

        __props__.__dict__["description"] = description
        __props__.__dict__["extended"] = extended
        __props__.__dict__["full_token"] = full_token
        __props__.__dict__["max_age"] = max_age
        __props__.__dict__["name"] = name
        __props__.__dict__["service_account_api_token_id"] = service_account_api_token_id
        __props__.__dict__["service_account_id"] = service_account_id
        return ServiceAccountApiToken(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        The API token description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def extended(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Specify whether the expiry date is automatically moved forward by max age whenever the token is used. Defaults to
        `false`.
        """
        return pulumi.get(self, "extended")

    @property
    @pulumi.getter(name="fullToken")
    def full_token(self) -> pulumi.Output[builtins.str]:
        """
        The full API token.
        """
        return pulumi.get(self, "full_token")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> pulumi.Output[builtins.str]:
        """
        The time the token remains valid since creation (ISO 8601 duration format).
        """
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The API token display name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceAccountApiTokenId")
    def service_account_api_token_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "service_account_api_token_id")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> pulumi.Output[builtins.str]:
        """
        The ID of the Service Account owning the API Token.
        """
        return pulumi.get(self, "service_account_id")

