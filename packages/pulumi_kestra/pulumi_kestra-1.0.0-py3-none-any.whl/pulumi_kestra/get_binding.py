# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetBindingResult',
    'AwaitableGetBindingResult',
    'get_binding',
    'get_binding_output',
]

@pulumi.output_type
class GetBindingResult:
    """
    A collection of values returned by getBinding.
    """
    def __init__(__self__, binding_id=None, external_id=None, id=None, namespace=None, role_id=None, tenant_id=None, type=None):
        if binding_id and not isinstance(binding_id, str):
            raise TypeError("Expected argument 'binding_id' to be a str")
        pulumi.set(__self__, "binding_id", binding_id)
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if role_id and not isinstance(role_id, str):
            raise TypeError("Expected argument 'role_id' to be a str")
        pulumi.set(__self__, "role_id", role_id)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bindingId")
    def binding_id(self) -> builtins.str:
        return pulumi.get(self, "binding_id")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> builtins.str:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> builtins.str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetBindingResult(GetBindingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBindingResult(
            binding_id=self.binding_id,
            external_id=self.external_id,
            id=self.id,
            namespace=self.namespace,
            role_id=self.role_id,
            tenant_id=self.tenant_id,
            type=self.type)


def get_binding(binding_id: Optional[builtins.str] = None,
                id: Optional[builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBindingResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bindingId'] = binding_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('kestra:index/getBinding:getBinding', __args__, opts=opts, typ=GetBindingResult, package_ref=_utilities.get_package()).value

    return AwaitableGetBindingResult(
        binding_id=pulumi.get(__ret__, 'binding_id'),
        external_id=pulumi.get(__ret__, 'external_id'),
        id=pulumi.get(__ret__, 'id'),
        namespace=pulumi.get(__ret__, 'namespace'),
        role_id=pulumi.get(__ret__, 'role_id'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        type=pulumi.get(__ret__, 'type'))
def get_binding_output(binding_id: Optional[pulumi.Input[builtins.str]] = None,
                       id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBindingResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bindingId'] = binding_id
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('kestra:index/getBinding:getBinding', __args__, opts=opts, typ=GetBindingResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetBindingResult(
        binding_id=pulumi.get(__response__, 'binding_id'),
        external_id=pulumi.get(__response__, 'external_id'),
        id=pulumi.get(__response__, 'id'),
        namespace=pulumi.get(__response__, 'namespace'),
        role_id=pulumi.get(__response__, 'role_id'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        type=pulumi.get(__response__, 'type')))
