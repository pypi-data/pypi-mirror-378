# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['TestArgs', 'Test']

@pulumi.input_type
class TestArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[builtins.str],
                 namespace: pulumi.Input[builtins.str],
                 test_id: pulumi.Input[builtins.str]):
        """
        The set of arguments for constructing a Test resource.
        :param pulumi.Input[builtins.str] content: The actual Test YAML content
        :param pulumi.Input[builtins.str] namespace: The Test namespace
        :param pulumi.Input[builtins.str] test_id: The Test id
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "test_id", test_id)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[builtins.str]:
        """
        The actual Test YAML content
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[builtins.str]:
        """
        The Test namespace
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="testId")
    def test_id(self) -> pulumi.Input[builtins.str]:
        """
        The Test id
        """
        return pulumi.get(self, "test_id")

    @test_id.setter
    def test_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "test_id", value)


@pulumi.input_type
class _TestState:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 test_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Test resources.
        :param pulumi.Input[builtins.str] content: The actual Test YAML content
        :param pulumi.Input[builtins.str] namespace: The Test namespace
        :param pulumi.Input[builtins.str] test_id: The Test id
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if test_id is not None:
            pulumi.set(__self__, "test_id", test_id)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The actual Test YAML content
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Test namespace
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="testId")
    def test_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Test id
        """
        return pulumi.get(self, "test_id")

    @test_id.setter
    def test_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "test_id", value)


@pulumi.type_token("kestra:index/test:Test")
class Test(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 test_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a Test resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] content: The actual Test YAML content
        :param pulumi.Input[builtins.str] namespace: The Test namespace
        :param pulumi.Input[builtins.str] test_id: The Test id
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TestArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Test resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TestArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TestArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 test_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TestArgs.__new__(TestArgs)

            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            if test_id is None and not opts.urn:
                raise TypeError("Missing required property 'test_id'")
            __props__.__dict__["test_id"] = test_id
        super(Test, __self__).__init__(
            'kestra:index/test:Test',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content: Optional[pulumi.Input[builtins.str]] = None,
            namespace: Optional[pulumi.Input[builtins.str]] = None,
            test_id: Optional[pulumi.Input[builtins.str]] = None) -> 'Test':
        """
        Get an existing Test resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] content: The actual Test YAML content
        :param pulumi.Input[builtins.str] namespace: The Test namespace
        :param pulumi.Input[builtins.str] test_id: The Test id
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TestState.__new__(_TestState)

        __props__.__dict__["content"] = content
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["test_id"] = test_id
        return Test(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[builtins.str]:
        """
        The actual Test YAML content
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[builtins.str]:
        """
        The Test namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="testId")
    def test_id(self) -> pulumi.Output[builtins.str]:
        """
        The Test id
        """
        return pulumi.get(self, "test_id")

