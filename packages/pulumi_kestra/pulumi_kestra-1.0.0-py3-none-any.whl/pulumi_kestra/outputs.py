# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'NamespaceAllowedNamespace',
    'NamespaceWorkerGroup',
    'RolePermission',
    'ServiceAccountGroup',
    'TenantWorkerGroup',
    'GetRolePermissionResult',
    'GetServiceAccountApiTokensApiTokenResult',
    'GetServiceAccountGroupResult',
    'GetUserApiTokensApiTokenResult',
]

@pulumi.output_type
class NamespaceAllowedNamespace(dict):
    def __init__(__self__, *,
                 namespace: builtins.str):
        """
        :param builtins.str namespace: The namespace.
        """
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        The namespace.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class NamespaceWorkerGroup(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 fallback: Optional[builtins.str] = None):
        """
        :param builtins.str key: The worker group key.
        :param builtins.str fallback: The fallback strategy.
        """
        pulumi.set(__self__, "key", key)
        if fallback is not None:
            pulumi.set(__self__, "fallback", fallback)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The worker group key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def fallback(self) -> Optional[builtins.str]:
        """
        The fallback strategy.
        """
        return pulumi.get(self, "fallback")


@pulumi.output_type
class RolePermission(dict):
    def __init__(__self__, *,
                 permissions: Sequence[builtins.str],
                 type: builtins.str):
        """
        :param Sequence[builtins.str] permissions: The permissions for this type.
        :param builtins.str type: The type of permission.
        """
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def permissions(self) -> Sequence[builtins.str]:
        """
        The permissions for this type.
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of permission.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceAccountGroup(dict):
    def __init__(__self__, *,
                 id: builtins.str):
        """
        :param builtins.str id: The group id.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The group id.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class TenantWorkerGroup(dict):
    def __init__(__self__, *,
                 fallback: builtins.str,
                 key: builtins.str):
        """
        :param builtins.str fallback: The fallback strategy.
        :param builtins.str key: The worker group key.
        """
        pulumi.set(__self__, "fallback", fallback)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def fallback(self) -> builtins.str:
        """
        The fallback strategy.
        """
        return pulumi.get(self, "fallback")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The worker group key.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class GetRolePermissionResult(dict):
    def __init__(__self__, *,
                 permissions: Sequence[builtins.str],
                 type: builtins.str):
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def permissions(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceAccountApiTokensApiTokenResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 exp: builtins.str,
                 expired: builtins.bool,
                 extended: builtins.bool,
                 iat: builtins.str,
                 last_used: builtins.str,
                 name: builtins.str,
                 token_id: builtins.str,
                 token_prefix: builtins.str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "exp", exp)
        pulumi.set(__self__, "expired", expired)
        pulumi.set(__self__, "extended", extended)
        pulumi.set(__self__, "iat", iat)
        pulumi.set(__self__, "last_used", last_used)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "token_id", token_id)
        pulumi.set(__self__, "token_prefix", token_prefix)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def exp(self) -> builtins.str:
        return pulumi.get(self, "exp")

    @property
    @pulumi.getter
    def expired(self) -> builtins.bool:
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter
    def extended(self) -> builtins.bool:
        return pulumi.get(self, "extended")

    @property
    @pulumi.getter
    def iat(self) -> builtins.str:
        return pulumi.get(self, "iat")

    @property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> builtins.str:
        return pulumi.get(self, "last_used")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tokenId")
    def token_id(self) -> builtins.str:
        return pulumi.get(self, "token_id")

    @property
    @pulumi.getter(name="tokenPrefix")
    def token_prefix(self) -> builtins.str:
        return pulumi.get(self, "token_prefix")


@pulumi.output_type
class GetServiceAccountGroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.str):
        """
        :param builtins.str id: The group id.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The group id.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetUserApiTokensApiTokenResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 exp: builtins.str,
                 expired: builtins.bool,
                 extended: builtins.bool,
                 iat: builtins.str,
                 last_used: builtins.str,
                 name: builtins.str,
                 token_id: builtins.str,
                 token_prefix: builtins.str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "exp", exp)
        pulumi.set(__self__, "expired", expired)
        pulumi.set(__self__, "extended", extended)
        pulumi.set(__self__, "iat", iat)
        pulumi.set(__self__, "last_used", last_used)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "token_id", token_id)
        pulumi.set(__self__, "token_prefix", token_prefix)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def exp(self) -> builtins.str:
        return pulumi.get(self, "exp")

    @property
    @pulumi.getter
    def expired(self) -> builtins.bool:
        return pulumi.get(self, "expired")

    @property
    @pulumi.getter
    def extended(self) -> builtins.bool:
        return pulumi.get(self, "extended")

    @property
    @pulumi.getter
    def iat(self) -> builtins.str:
        return pulumi.get(self, "iat")

    @property
    @pulumi.getter(name="lastUsed")
    def last_used(self) -> builtins.str:
        return pulumi.get(self, "last_used")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tokenId")
    def token_id(self) -> builtins.str:
        return pulumi.get(self, "token_id")

    @property
    @pulumi.getter(name="tokenPrefix")
    def token_prefix(self) -> builtins.str:
        return pulumi.get(self, "token_prefix")


