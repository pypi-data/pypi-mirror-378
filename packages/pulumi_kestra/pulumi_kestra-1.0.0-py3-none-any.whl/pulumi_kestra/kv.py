# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['KvArgs', 'Kv']

@pulumi.input_type
class KvArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[builtins.str],
                 namespace: pulumi.Input[builtins.str],
                 value: pulumi.Input[builtins.str],
                 kv_id: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Kv resource.
        :param pulumi.Input[builtins.str] key: The key of the pair.
        :param pulumi.Input[builtins.str] namespace: The namespace of the Key-Value pair.
        :param pulumi.Input[builtins.str] value: The fetched value.
        :param pulumi.Input[builtins.str] type: The type of the value. If not provided, we will try to deduce the type based on the value. Useful in case you provide
               numbers, booleans, dates or json that you want to be stored as string. Accepted values are: STRING, NUMBER, BOOLEAN,
               DATETIME, DATE, DURATION, JSON.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "value", value)
        if kv_id is not None:
            pulumi.set(__self__, "kv_id", kv_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[builtins.str]:
        """
        The key of the pair.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[builtins.str]:
        """
        The namespace of the Key-Value pair.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[builtins.str]:
        """
        The fetched value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="kvId")
    def kv_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kv_id")

    @kv_id.setter
    def kv_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kv_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of the value. If not provided, we will try to deduce the type based on the value. Useful in case you provide
        numbers, booleans, dates or json that you want to be stored as string. Accepted values are: STRING, NUMBER, BOOLEAN,
        DATETIME, DATE, DURATION, JSON.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _KvState:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 kv_id: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Kv resources.
        :param pulumi.Input[builtins.str] key: The key of the pair.
        :param pulumi.Input[builtins.str] namespace: The namespace of the Key-Value pair.
        :param pulumi.Input[builtins.str] tenant_id: The tenant id.
        :param pulumi.Input[builtins.str] type: The type of the value. If not provided, we will try to deduce the type based on the value. Useful in case you provide
               numbers, booleans, dates or json that you want to be stored as string. Accepted values are: STRING, NUMBER, BOOLEAN,
               DATETIME, DATE, DURATION, JSON.
        :param pulumi.Input[builtins.str] value: The fetched value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if kv_id is not None:
            pulumi.set(__self__, "kv_id", kv_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The key of the pair.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="kvId")
    def kv_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kv_id")

    @kv_id.setter
    def kv_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kv_id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The namespace of the Key-Value pair.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of the value. If not provided, we will try to deduce the type based on the value. Useful in case you provide
        numbers, booleans, dates or json that you want to be stored as string. Accepted values are: STRING, NUMBER, BOOLEAN,
        DATETIME, DATE, DURATION, JSON.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The fetched value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


@pulumi.type_token("kestra:index/kv:Kv")
class Kv(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 kv_id: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a Kv resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] key: The key of the pair.
        :param pulumi.Input[builtins.str] namespace: The namespace of the Key-Value pair.
        :param pulumi.Input[builtins.str] type: The type of the value. If not provided, we will try to deduce the type based on the value. Useful in case you provide
               numbers, booleans, dates or json that you want to be stored as string. Accepted values are: STRING, NUMBER, BOOLEAN,
               DATETIME, DATE, DURATION, JSON.
        :param pulumi.Input[builtins.str] value: The fetched value.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KvArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Kv resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param KvArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KvArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 kv_id: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KvArgs.__new__(KvArgs)

            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["kv_id"] = kv_id
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["type"] = type
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
            __props__.__dict__["tenant_id"] = None
        super(Kv, __self__).__init__(
            'kestra:index/kv:Kv',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            key: Optional[pulumi.Input[builtins.str]] = None,
            kv_id: Optional[pulumi.Input[builtins.str]] = None,
            namespace: Optional[pulumi.Input[builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            value: Optional[pulumi.Input[builtins.str]] = None) -> 'Kv':
        """
        Get an existing Kv resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] key: The key of the pair.
        :param pulumi.Input[builtins.str] namespace: The namespace of the Key-Value pair.
        :param pulumi.Input[builtins.str] tenant_id: The tenant id.
        :param pulumi.Input[builtins.str] type: The type of the value. If not provided, we will try to deduce the type based on the value. Useful in case you provide
               numbers, booleans, dates or json that you want to be stored as string. Accepted values are: STRING, NUMBER, BOOLEAN,
               DATETIME, DATE, DURATION, JSON.
        :param pulumi.Input[builtins.str] value: The fetched value.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KvState.__new__(_KvState)

        __props__.__dict__["key"] = key
        __props__.__dict__["kv_id"] = kv_id
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["type"] = type
        __props__.__dict__["value"] = value
        return Kv(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[builtins.str]:
        """
        The key of the pair.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="kvId")
    def kv_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "kv_id")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[builtins.str]:
        """
        The namespace of the Key-Value pair.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[builtins.str]:
        """
        The tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The type of the value. If not provided, we will try to deduce the type based on the value. Useful in case you provide
        numbers, booleans, dates or json that you want to be stored as string. Accepted values are: STRING, NUMBER, BOOLEAN,
        DATETIME, DATE, DURATION, JSON.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[builtins.str]:
        """
        The fetched value.
        """
        return pulumi.get(self, "value")

