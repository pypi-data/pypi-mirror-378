# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetServiceAccountResult',
    'AwaitableGetServiceAccountResult',
    'get_service_account',
    'get_service_account_output',
]

@pulumi.output_type
class GetServiceAccountResult:
    """
    A collection of values returned by getServiceAccount.
    """
    def __init__(__self__, description=None, groups=None, id=None, name=None, super_admin=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if super_admin and not isinstance(super_admin, bool):
            raise TypeError("Expected argument 'super_admin' to be a bool")
        pulumi.set(__self__, "super_admin", super_admin)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence['outputs.GetServiceAccountGroupResult']]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="superAdmin")
    def super_admin(self) -> builtins.bool:
        return pulumi.get(self, "super_admin")


class AwaitableGetServiceAccountResult(GetServiceAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceAccountResult(
            description=self.description,
            groups=self.groups,
            id=self.id,
            name=self.name,
            super_admin=self.super_admin)


def get_service_account(groups: Optional[Sequence[Union['GetServiceAccountGroupArgs', 'GetServiceAccountGroupArgsDict']]] = None,
                        id: Optional[builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceAccountResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['groups'] = groups
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('kestra:index/getServiceAccount:getServiceAccount', __args__, opts=opts, typ=GetServiceAccountResult, package_ref=_utilities.get_package()).value

    return AwaitableGetServiceAccountResult(
        description=pulumi.get(__ret__, 'description'),
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        super_admin=pulumi.get(__ret__, 'super_admin'))
def get_service_account_output(groups: Optional[pulumi.Input[Optional[Sequence[Union['GetServiceAccountGroupArgs', 'GetServiceAccountGroupArgsDict']]]]] = None,
                               id: Optional[pulumi.Input[builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceAccountResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['groups'] = groups
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('kestra:index/getServiceAccount:getServiceAccount', __args__, opts=opts, typ=GetServiceAccountResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetServiceAccountResult(
        description=pulumi.get(__response__, 'description'),
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        super_admin=pulumi.get(__response__, 'super_admin')))
