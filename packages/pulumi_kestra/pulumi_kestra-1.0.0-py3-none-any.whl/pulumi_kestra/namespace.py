# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NamespaceArgs', 'Namespace']

@pulumi.input_type
class NamespaceArgs:
    def __init__(__self__, *,
                 namespace_id: pulumi.Input[builtins.str],
                 allowed_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceAllowedNamespaceArgs']]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 kestra_namespace_id: Optional[pulumi.Input[builtins.str]] = None,
                 plugin_defaults: Optional[pulumi.Input[builtins.str]] = None,
                 secret_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 secret_type: Optional[pulumi.Input[builtins.str]] = None,
                 storage_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 storage_type: Optional[pulumi.Input[builtins.str]] = None,
                 variables: Optional[pulumi.Input[builtins.str]] = None,
                 worker_group: Optional[pulumi.Input['NamespaceWorkerGroupArgs']] = None):
        """
        The set of arguments for constructing a Namespace resource.
        :param pulumi.Input[builtins.str] namespace_id: The namespace.
        :param pulumi.Input[Sequence[pulumi.Input['NamespaceAllowedNamespaceArgs']]] allowed_namespaces: The allowed namespaces.
        :param pulumi.Input[builtins.str] description: The namespace friendly description.
        :param pulumi.Input[builtins.str] plugin_defaults: The namespace plugin defaults in yaml string.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] secret_configuration: The secret configuration.
        :param pulumi.Input[builtins.str] secret_type: The secret type.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] storage_configuration: The storage configuration.
        :param pulumi.Input[builtins.str] storage_type: The storage type.
        :param pulumi.Input[builtins.str] variables: The namespace variables in yaml string.
        :param pulumi.Input['NamespaceWorkerGroupArgs'] worker_group: The worker group.
        """
        pulumi.set(__self__, "namespace_id", namespace_id)
        if allowed_namespaces is not None:
            pulumi.set(__self__, "allowed_namespaces", allowed_namespaces)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if kestra_namespace_id is not None:
            pulumi.set(__self__, "kestra_namespace_id", kestra_namespace_id)
        if plugin_defaults is not None:
            pulumi.set(__self__, "plugin_defaults", plugin_defaults)
        if secret_configuration is not None:
            pulumi.set(__self__, "secret_configuration", secret_configuration)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if storage_configuration is not None:
            pulumi.set(__self__, "storage_configuration", storage_configuration)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)
        if worker_group is not None:
            pulumi.set(__self__, "worker_group", worker_group)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Input[builtins.str]:
        """
        The namespace.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="allowedNamespaces")
    def allowed_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceAllowedNamespaceArgs']]]]:
        """
        The allowed namespaces.
        """
        return pulumi.get(self, "allowed_namespaces")

    @allowed_namespaces.setter
    def allowed_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceAllowedNamespaceArgs']]]]):
        pulumi.set(self, "allowed_namespaces", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The namespace friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="kestraNamespaceId")
    def kestra_namespace_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kestra_namespace_id")

    @kestra_namespace_id.setter
    def kestra_namespace_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kestra_namespace_id", value)

    @property
    @pulumi.getter(name="pluginDefaults")
    def plugin_defaults(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The namespace plugin defaults in yaml string.
        """
        return pulumi.get(self, "plugin_defaults")

    @plugin_defaults.setter
    def plugin_defaults(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "plugin_defaults", value)

    @property
    @pulumi.getter(name="secretConfiguration")
    def secret_configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The secret configuration.
        """
        return pulumi.get(self, "secret_configuration")

    @secret_configuration.setter
    def secret_configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "secret_configuration", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The secret type.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_type", value)

    @property
    @pulumi.getter(name="storageConfiguration")
    def storage_configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The storage configuration.
        """
        return pulumi.get(self, "storage_configuration")

    @storage_configuration.setter
    def storage_configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "storage_configuration", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The storage type.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The namespace variables in yaml string.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "variables", value)

    @property
    @pulumi.getter(name="workerGroup")
    def worker_group(self) -> Optional[pulumi.Input['NamespaceWorkerGroupArgs']]:
        """
        The worker group.
        """
        return pulumi.get(self, "worker_group")

    @worker_group.setter
    def worker_group(self, value: Optional[pulumi.Input['NamespaceWorkerGroupArgs']]):
        pulumi.set(self, "worker_group", value)


@pulumi.input_type
class _NamespaceState:
    def __init__(__self__, *,
                 allowed_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceAllowedNamespaceArgs']]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 kestra_namespace_id: Optional[pulumi.Input[builtins.str]] = None,
                 namespace_id: Optional[pulumi.Input[builtins.str]] = None,
                 plugin_defaults: Optional[pulumi.Input[builtins.str]] = None,
                 secret_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 secret_type: Optional[pulumi.Input[builtins.str]] = None,
                 storage_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 storage_type: Optional[pulumi.Input[builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 variables: Optional[pulumi.Input[builtins.str]] = None,
                 worker_group: Optional[pulumi.Input['NamespaceWorkerGroupArgs']] = None):
        """
        Input properties used for looking up and filtering Namespace resources.
        :param pulumi.Input[Sequence[pulumi.Input['NamespaceAllowedNamespaceArgs']]] allowed_namespaces: The allowed namespaces.
        :param pulumi.Input[builtins.str] description: The namespace friendly description.
        :param pulumi.Input[builtins.str] namespace_id: The namespace.
        :param pulumi.Input[builtins.str] plugin_defaults: The namespace plugin defaults in yaml string.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] secret_configuration: The secret configuration.
        :param pulumi.Input[builtins.str] secret_type: The secret type.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] storage_configuration: The storage configuration.
        :param pulumi.Input[builtins.str] storage_type: The storage type.
        :param pulumi.Input[builtins.str] tenant_id: The tenant id.
        :param pulumi.Input[builtins.str] variables: The namespace variables in yaml string.
        :param pulumi.Input['NamespaceWorkerGroupArgs'] worker_group: The worker group.
        """
        if allowed_namespaces is not None:
            pulumi.set(__self__, "allowed_namespaces", allowed_namespaces)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if kestra_namespace_id is not None:
            pulumi.set(__self__, "kestra_namespace_id", kestra_namespace_id)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if plugin_defaults is not None:
            pulumi.set(__self__, "plugin_defaults", plugin_defaults)
        if secret_configuration is not None:
            pulumi.set(__self__, "secret_configuration", secret_configuration)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if storage_configuration is not None:
            pulumi.set(__self__, "storage_configuration", storage_configuration)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)
        if worker_group is not None:
            pulumi.set(__self__, "worker_group", worker_group)

    @property
    @pulumi.getter(name="allowedNamespaces")
    def allowed_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceAllowedNamespaceArgs']]]]:
        """
        The allowed namespaces.
        """
        return pulumi.get(self, "allowed_namespaces")

    @allowed_namespaces.setter
    def allowed_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceAllowedNamespaceArgs']]]]):
        pulumi.set(self, "allowed_namespaces", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The namespace friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="kestraNamespaceId")
    def kestra_namespace_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kestra_namespace_id")

    @kestra_namespace_id.setter
    def kestra_namespace_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kestra_namespace_id", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The namespace.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="pluginDefaults")
    def plugin_defaults(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The namespace plugin defaults in yaml string.
        """
        return pulumi.get(self, "plugin_defaults")

    @plugin_defaults.setter
    def plugin_defaults(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "plugin_defaults", value)

    @property
    @pulumi.getter(name="secretConfiguration")
    def secret_configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The secret configuration.
        """
        return pulumi.get(self, "secret_configuration")

    @secret_configuration.setter
    def secret_configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "secret_configuration", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The secret type.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_type", value)

    @property
    @pulumi.getter(name="storageConfiguration")
    def storage_configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The storage configuration.
        """
        return pulumi.get(self, "storage_configuration")

    @storage_configuration.setter
    def storage_configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "storage_configuration", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The storage type.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The namespace variables in yaml string.
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "variables", value)

    @property
    @pulumi.getter(name="workerGroup")
    def worker_group(self) -> Optional[pulumi.Input['NamespaceWorkerGroupArgs']]:
        """
        The worker group.
        """
        return pulumi.get(self, "worker_group")

    @worker_group.setter
    def worker_group(self, value: Optional[pulumi.Input['NamespaceWorkerGroupArgs']]):
        pulumi.set(self, "worker_group", value)


@pulumi.type_token("kestra:index/namespace:Namespace")
class Namespace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NamespaceAllowedNamespaceArgs', 'NamespaceAllowedNamespaceArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 kestra_namespace_id: Optional[pulumi.Input[builtins.str]] = None,
                 namespace_id: Optional[pulumi.Input[builtins.str]] = None,
                 plugin_defaults: Optional[pulumi.Input[builtins.str]] = None,
                 secret_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 secret_type: Optional[pulumi.Input[builtins.str]] = None,
                 storage_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 storage_type: Optional[pulumi.Input[builtins.str]] = None,
                 variables: Optional[pulumi.Input[builtins.str]] = None,
                 worker_group: Optional[pulumi.Input[Union['NamespaceWorkerGroupArgs', 'NamespaceWorkerGroupArgsDict']]] = None,
                 __props__=None):
        """
        Create a Namespace resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NamespaceAllowedNamespaceArgs', 'NamespaceAllowedNamespaceArgsDict']]]] allowed_namespaces: The allowed namespaces.
        :param pulumi.Input[builtins.str] description: The namespace friendly description.
        :param pulumi.Input[builtins.str] namespace_id: The namespace.
        :param pulumi.Input[builtins.str] plugin_defaults: The namespace plugin defaults in yaml string.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] secret_configuration: The secret configuration.
        :param pulumi.Input[builtins.str] secret_type: The secret type.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] storage_configuration: The storage configuration.
        :param pulumi.Input[builtins.str] storage_type: The storage type.
        :param pulumi.Input[builtins.str] variables: The namespace variables in yaml string.
        :param pulumi.Input[Union['NamespaceWorkerGroupArgs', 'NamespaceWorkerGroupArgsDict']] worker_group: The worker group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NamespaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Namespace resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NamespaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NamespaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NamespaceAllowedNamespaceArgs', 'NamespaceAllowedNamespaceArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 kestra_namespace_id: Optional[pulumi.Input[builtins.str]] = None,
                 namespace_id: Optional[pulumi.Input[builtins.str]] = None,
                 plugin_defaults: Optional[pulumi.Input[builtins.str]] = None,
                 secret_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 secret_type: Optional[pulumi.Input[builtins.str]] = None,
                 storage_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 storage_type: Optional[pulumi.Input[builtins.str]] = None,
                 variables: Optional[pulumi.Input[builtins.str]] = None,
                 worker_group: Optional[pulumi.Input[Union['NamespaceWorkerGroupArgs', 'NamespaceWorkerGroupArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NamespaceArgs.__new__(NamespaceArgs)

            __props__.__dict__["allowed_namespaces"] = allowed_namespaces
            __props__.__dict__["description"] = description
            __props__.__dict__["kestra_namespace_id"] = kestra_namespace_id
            if namespace_id is None and not opts.urn:
                raise TypeError("Missing required property 'namespace_id'")
            __props__.__dict__["namespace_id"] = namespace_id
            __props__.__dict__["plugin_defaults"] = plugin_defaults
            __props__.__dict__["secret_configuration"] = secret_configuration
            __props__.__dict__["secret_type"] = secret_type
            __props__.__dict__["storage_configuration"] = storage_configuration
            __props__.__dict__["storage_type"] = storage_type
            __props__.__dict__["variables"] = variables
            __props__.__dict__["worker_group"] = worker_group
            __props__.__dict__["tenant_id"] = None
        super(Namespace, __self__).__init__(
            'kestra:index/namespace:Namespace',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowed_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NamespaceAllowedNamespaceArgs', 'NamespaceAllowedNamespaceArgsDict']]]]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            kestra_namespace_id: Optional[pulumi.Input[builtins.str]] = None,
            namespace_id: Optional[pulumi.Input[builtins.str]] = None,
            plugin_defaults: Optional[pulumi.Input[builtins.str]] = None,
            secret_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            secret_type: Optional[pulumi.Input[builtins.str]] = None,
            storage_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            storage_type: Optional[pulumi.Input[builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[builtins.str]] = None,
            variables: Optional[pulumi.Input[builtins.str]] = None,
            worker_group: Optional[pulumi.Input[Union['NamespaceWorkerGroupArgs', 'NamespaceWorkerGroupArgsDict']]] = None) -> 'Namespace':
        """
        Get an existing Namespace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NamespaceAllowedNamespaceArgs', 'NamespaceAllowedNamespaceArgsDict']]]] allowed_namespaces: The allowed namespaces.
        :param pulumi.Input[builtins.str] description: The namespace friendly description.
        :param pulumi.Input[builtins.str] namespace_id: The namespace.
        :param pulumi.Input[builtins.str] plugin_defaults: The namespace plugin defaults in yaml string.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] secret_configuration: The secret configuration.
        :param pulumi.Input[builtins.str] secret_type: The secret type.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] storage_configuration: The storage configuration.
        :param pulumi.Input[builtins.str] storage_type: The storage type.
        :param pulumi.Input[builtins.str] tenant_id: The tenant id.
        :param pulumi.Input[builtins.str] variables: The namespace variables in yaml string.
        :param pulumi.Input[Union['NamespaceWorkerGroupArgs', 'NamespaceWorkerGroupArgsDict']] worker_group: The worker group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NamespaceState.__new__(_NamespaceState)

        __props__.__dict__["allowed_namespaces"] = allowed_namespaces
        __props__.__dict__["description"] = description
        __props__.__dict__["kestra_namespace_id"] = kestra_namespace_id
        __props__.__dict__["namespace_id"] = namespace_id
        __props__.__dict__["plugin_defaults"] = plugin_defaults
        __props__.__dict__["secret_configuration"] = secret_configuration
        __props__.__dict__["secret_type"] = secret_type
        __props__.__dict__["storage_configuration"] = storage_configuration
        __props__.__dict__["storage_type"] = storage_type
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["variables"] = variables
        __props__.__dict__["worker_group"] = worker_group
        return Namespace(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowedNamespaces")
    def allowed_namespaces(self) -> pulumi.Output[Optional[Sequence['outputs.NamespaceAllowedNamespace']]]:
        """
        The allowed namespaces.
        """
        return pulumi.get(self, "allowed_namespaces")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The namespace friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="kestraNamespaceId")
    def kestra_namespace_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "kestra_namespace_id")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Output[builtins.str]:
        """
        The namespace.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="pluginDefaults")
    def plugin_defaults(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The namespace plugin defaults in yaml string.
        """
        return pulumi.get(self, "plugin_defaults")

    @property
    @pulumi.getter(name="secretConfiguration")
    def secret_configuration(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        The secret configuration.
        """
        return pulumi.get(self, "secret_configuration")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The secret type.
        """
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter(name="storageConfiguration")
    def storage_configuration(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        The storage configuration.
        """
        return pulumi.get(self, "storage_configuration")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The storage type.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[builtins.str]:
        """
        The tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def variables(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The namespace variables in yaml string.
        """
        return pulumi.get(self, "variables")

    @property
    @pulumi.getter(name="workerGroup")
    def worker_group(self) -> pulumi.Output[Optional['outputs.NamespaceWorkerGroup']]:
        """
        The worker group.
        """
        return pulumi.get(self, "worker_group")

