# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['NamespaceSecretArgs', 'NamespaceSecret']

@pulumi.input_type
class NamespaceSecretArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[builtins.str],
                 secret_key: pulumi.Input[builtins.str],
                 secret_value: pulumi.Input[builtins.str],
                 namespace_secret_id: Optional[pulumi.Input[builtins.str]] = None,
                 secret_description: Optional[pulumi.Input[builtins.str]] = None,
                 secret_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a NamespaceSecret resource.
        :param pulumi.Input[builtins.str] namespace: The namespace.
        :param pulumi.Input[builtins.str] secret_key: The namespace secret key.
        :param pulumi.Input[builtins.str] secret_value: The namespace secret value.
        :param pulumi.Input[builtins.str] secret_description: The namespace secret description.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] secret_tags: The namespace secret description.
        """
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "secret_value", secret_value)
        if namespace_secret_id is not None:
            pulumi.set(__self__, "namespace_secret_id", namespace_secret_id)
        if secret_description is not None:
            pulumi.set(__self__, "secret_description", secret_description)
        if secret_tags is not None:
            pulumi.set(__self__, "secret_tags", secret_tags)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[builtins.str]:
        """
        The namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[builtins.str]:
        """
        The namespace secret key.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> pulumi.Input[builtins.str]:
        """
        The namespace secret value.
        """
        return pulumi.get(self, "secret_value")

    @secret_value.setter
    def secret_value(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "secret_value", value)

    @property
    @pulumi.getter(name="namespaceSecretId")
    def namespace_secret_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "namespace_secret_id")

    @namespace_secret_id.setter
    def namespace_secret_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "namespace_secret_id", value)

    @property
    @pulumi.getter(name="secretDescription")
    def secret_description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The namespace secret description.
        """
        return pulumi.get(self, "secret_description")

    @secret_description.setter
    def secret_description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_description", value)

    @property
    @pulumi.getter(name="secretTags")
    def secret_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The namespace secret description.
        """
        return pulumi.get(self, "secret_tags")

    @secret_tags.setter
    def secret_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "secret_tags", value)


@pulumi.input_type
class _NamespaceSecretState:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 namespace_secret_id: Optional[pulumi.Input[builtins.str]] = None,
                 secret_description: Optional[pulumi.Input[builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[builtins.str]] = None,
                 secret_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 secret_value: Optional[pulumi.Input[builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering NamespaceSecret resources.
        :param pulumi.Input[builtins.str] namespace: The namespace.
        :param pulumi.Input[builtins.str] secret_description: The namespace secret description.
        :param pulumi.Input[builtins.str] secret_key: The namespace secret key.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] secret_tags: The namespace secret description.
        :param pulumi.Input[builtins.str] secret_value: The namespace secret value.
        :param pulumi.Input[builtins.str] tenant_id: The tenant id.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if namespace_secret_id is not None:
            pulumi.set(__self__, "namespace_secret_id", namespace_secret_id)
        if secret_description is not None:
            pulumi.set(__self__, "secret_description", secret_description)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if secret_tags is not None:
            pulumi.set(__self__, "secret_tags", secret_tags)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="namespaceSecretId")
    def namespace_secret_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "namespace_secret_id")

    @namespace_secret_id.setter
    def namespace_secret_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "namespace_secret_id", value)

    @property
    @pulumi.getter(name="secretDescription")
    def secret_description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The namespace secret description.
        """
        return pulumi.get(self, "secret_description")

    @secret_description.setter
    def secret_description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_description", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The namespace secret key.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="secretTags")
    def secret_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The namespace secret description.
        """
        return pulumi.get(self, "secret_tags")

    @secret_tags.setter
    def secret_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "secret_tags", value)

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The namespace secret value.
        """
        return pulumi.get(self, "secret_value")

    @secret_value.setter
    def secret_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_value", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.type_token("kestra:index/namespaceSecret:NamespaceSecret")
class NamespaceSecret(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 namespace_secret_id: Optional[pulumi.Input[builtins.str]] = None,
                 secret_description: Optional[pulumi.Input[builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[builtins.str]] = None,
                 secret_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 secret_value: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a NamespaceSecret resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] namespace: The namespace.
        :param pulumi.Input[builtins.str] secret_description: The namespace secret description.
        :param pulumi.Input[builtins.str] secret_key: The namespace secret key.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] secret_tags: The namespace secret description.
        :param pulumi.Input[builtins.str] secret_value: The namespace secret value.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NamespaceSecretArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NamespaceSecret resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NamespaceSecretArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NamespaceSecretArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 namespace_secret_id: Optional[pulumi.Input[builtins.str]] = None,
                 secret_description: Optional[pulumi.Input[builtins.str]] = None,
                 secret_key: Optional[pulumi.Input[builtins.str]] = None,
                 secret_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 secret_value: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NamespaceSecretArgs.__new__(NamespaceSecretArgs)

            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["namespace_secret_id"] = namespace_secret_id
            __props__.__dict__["secret_description"] = secret_description
            if secret_key is None and not opts.urn:
                raise TypeError("Missing required property 'secret_key'")
            __props__.__dict__["secret_key"] = secret_key
            __props__.__dict__["secret_tags"] = secret_tags
            if secret_value is None and not opts.urn:
                raise TypeError("Missing required property 'secret_value'")
            __props__.__dict__["secret_value"] = None if secret_value is None else pulumi.Output.secret(secret_value)
            __props__.__dict__["tenant_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secretValue"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(NamespaceSecret, __self__).__init__(
            'kestra:index/namespaceSecret:NamespaceSecret',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            namespace: Optional[pulumi.Input[builtins.str]] = None,
            namespace_secret_id: Optional[pulumi.Input[builtins.str]] = None,
            secret_description: Optional[pulumi.Input[builtins.str]] = None,
            secret_key: Optional[pulumi.Input[builtins.str]] = None,
            secret_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            secret_value: Optional[pulumi.Input[builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[builtins.str]] = None) -> 'NamespaceSecret':
        """
        Get an existing NamespaceSecret resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] namespace: The namespace.
        :param pulumi.Input[builtins.str] secret_description: The namespace secret description.
        :param pulumi.Input[builtins.str] secret_key: The namespace secret key.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] secret_tags: The namespace secret description.
        :param pulumi.Input[builtins.str] secret_value: The namespace secret value.
        :param pulumi.Input[builtins.str] tenant_id: The tenant id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NamespaceSecretState.__new__(_NamespaceSecretState)

        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["namespace_secret_id"] = namespace_secret_id
        __props__.__dict__["secret_description"] = secret_description
        __props__.__dict__["secret_key"] = secret_key
        __props__.__dict__["secret_tags"] = secret_tags
        __props__.__dict__["secret_value"] = secret_value
        __props__.__dict__["tenant_id"] = tenant_id
        return NamespaceSecret(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[builtins.str]:
        """
        The namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="namespaceSecretId")
    def namespace_secret_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "namespace_secret_id")

    @property
    @pulumi.getter(name="secretDescription")
    def secret_description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The namespace secret description.
        """
        return pulumi.get(self, "secret_description")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Output[builtins.str]:
        """
        The namespace secret key.
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="secretTags")
    def secret_tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        The namespace secret description.
        """
        return pulumi.get(self, "secret_tags")

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> pulumi.Output[builtins.str]:
        """
        The namespace secret value.
        """
        return pulumi.get(self, "secret_value")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[builtins.str]:
        """
        The tenant id.
        """
        return pulumi.get(self, "tenant_id")

