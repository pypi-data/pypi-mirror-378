# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TenantArgs', 'Tenant']

@pulumi.input_type
class TenantArgs:
    def __init__(__self__, *,
                 tenant_id: pulumi.Input[builtins.str],
                 kestra_tenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 secret_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 secret_type: Optional[pulumi.Input[builtins.str]] = None,
                 storage_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 storage_type: Optional[pulumi.Input[builtins.str]] = None,
                 worker_group: Optional[pulumi.Input['TenantWorkerGroupArgs']] = None):
        """
        The set of arguments for constructing a Tenant resource.
        :param pulumi.Input[builtins.str] tenant_id: The tenant id.
        :param pulumi.Input[builtins.str] name: The tenant name.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] secret_configuration: The secret configuration.
        :param pulumi.Input[builtins.str] secret_type: The secret type.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] storage_configuration: The storage configuration.
        :param pulumi.Input[builtins.str] storage_type: The storage type.
        :param pulumi.Input['TenantWorkerGroupArgs'] worker_group: The worker group.
        """
        pulumi.set(__self__, "tenant_id", tenant_id)
        if kestra_tenant_id is not None:
            pulumi.set(__self__, "kestra_tenant_id", kestra_tenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secret_configuration is not None:
            pulumi.set(__self__, "secret_configuration", secret_configuration)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if storage_configuration is not None:
            pulumi.set(__self__, "storage_configuration", storage_configuration)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if worker_group is not None:
            pulumi.set(__self__, "worker_group", worker_group)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[builtins.str]:
        """
        The tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="kestraTenantId")
    def kestra_tenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kestra_tenant_id")

    @kestra_tenant_id.setter
    def kestra_tenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kestra_tenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The tenant name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretConfiguration")
    def secret_configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The secret configuration.
        """
        return pulumi.get(self, "secret_configuration")

    @secret_configuration.setter
    def secret_configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "secret_configuration", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The secret type.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_type", value)

    @property
    @pulumi.getter(name="storageConfiguration")
    def storage_configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The storage configuration.
        """
        return pulumi.get(self, "storage_configuration")

    @storage_configuration.setter
    def storage_configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "storage_configuration", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The storage type.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="workerGroup")
    def worker_group(self) -> Optional[pulumi.Input['TenantWorkerGroupArgs']]:
        """
        The worker group.
        """
        return pulumi.get(self, "worker_group")

    @worker_group.setter
    def worker_group(self, value: Optional[pulumi.Input['TenantWorkerGroupArgs']]):
        pulumi.set(self, "worker_group", value)


@pulumi.input_type
class _TenantState:
    def __init__(__self__, *,
                 kestra_tenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 secret_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 secret_type: Optional[pulumi.Input[builtins.str]] = None,
                 storage_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 storage_type: Optional[pulumi.Input[builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 worker_group: Optional[pulumi.Input['TenantWorkerGroupArgs']] = None):
        """
        Input properties used for looking up and filtering Tenant resources.
        :param pulumi.Input[builtins.str] name: The tenant name.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] secret_configuration: The secret configuration.
        :param pulumi.Input[builtins.str] secret_type: The secret type.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] storage_configuration: The storage configuration.
        :param pulumi.Input[builtins.str] storage_type: The storage type.
        :param pulumi.Input[builtins.str] tenant_id: The tenant id.
        :param pulumi.Input['TenantWorkerGroupArgs'] worker_group: The worker group.
        """
        if kestra_tenant_id is not None:
            pulumi.set(__self__, "kestra_tenant_id", kestra_tenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secret_configuration is not None:
            pulumi.set(__self__, "secret_configuration", secret_configuration)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if storage_configuration is not None:
            pulumi.set(__self__, "storage_configuration", storage_configuration)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if worker_group is not None:
            pulumi.set(__self__, "worker_group", worker_group)

    @property
    @pulumi.getter(name="kestraTenantId")
    def kestra_tenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kestra_tenant_id")

    @kestra_tenant_id.setter
    def kestra_tenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kestra_tenant_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The tenant name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretConfiguration")
    def secret_configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The secret configuration.
        """
        return pulumi.get(self, "secret_configuration")

    @secret_configuration.setter
    def secret_configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "secret_configuration", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The secret type.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_type", value)

    @property
    @pulumi.getter(name="storageConfiguration")
    def storage_configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The storage configuration.
        """
        return pulumi.get(self, "storage_configuration")

    @storage_configuration.setter
    def storage_configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "storage_configuration", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The storage type.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="workerGroup")
    def worker_group(self) -> Optional[pulumi.Input['TenantWorkerGroupArgs']]:
        """
        The worker group.
        """
        return pulumi.get(self, "worker_group")

    @worker_group.setter
    def worker_group(self, value: Optional[pulumi.Input['TenantWorkerGroupArgs']]):
        pulumi.set(self, "worker_group", value)


@pulumi.type_token("kestra:index/tenant:Tenant")
class Tenant(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 kestra_tenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 secret_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 secret_type: Optional[pulumi.Input[builtins.str]] = None,
                 storage_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 storage_type: Optional[pulumi.Input[builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 worker_group: Optional[pulumi.Input[Union['TenantWorkerGroupArgs', 'TenantWorkerGroupArgsDict']]] = None,
                 __props__=None):
        """
        Create a Tenant resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] name: The tenant name.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] secret_configuration: The secret configuration.
        :param pulumi.Input[builtins.str] secret_type: The secret type.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] storage_configuration: The storage configuration.
        :param pulumi.Input[builtins.str] storage_type: The storage type.
        :param pulumi.Input[builtins.str] tenant_id: The tenant id.
        :param pulumi.Input[Union['TenantWorkerGroupArgs', 'TenantWorkerGroupArgsDict']] worker_group: The worker group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TenantArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Tenant resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TenantArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TenantArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 kestra_tenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 secret_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 secret_type: Optional[pulumi.Input[builtins.str]] = None,
                 storage_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 storage_type: Optional[pulumi.Input[builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 worker_group: Optional[pulumi.Input[Union['TenantWorkerGroupArgs', 'TenantWorkerGroupArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TenantArgs.__new__(TenantArgs)

            __props__.__dict__["kestra_tenant_id"] = kestra_tenant_id
            __props__.__dict__["name"] = name
            __props__.__dict__["secret_configuration"] = secret_configuration
            __props__.__dict__["secret_type"] = secret_type
            __props__.__dict__["storage_configuration"] = storage_configuration
            __props__.__dict__["storage_type"] = storage_type
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["worker_group"] = worker_group
        super(Tenant, __self__).__init__(
            'kestra:index/tenant:Tenant',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            kestra_tenant_id: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            secret_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            secret_type: Optional[pulumi.Input[builtins.str]] = None,
            storage_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            storage_type: Optional[pulumi.Input[builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[builtins.str]] = None,
            worker_group: Optional[pulumi.Input[Union['TenantWorkerGroupArgs', 'TenantWorkerGroupArgsDict']]] = None) -> 'Tenant':
        """
        Get an existing Tenant resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] name: The tenant name.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] secret_configuration: The secret configuration.
        :param pulumi.Input[builtins.str] secret_type: The secret type.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] storage_configuration: The storage configuration.
        :param pulumi.Input[builtins.str] storage_type: The storage type.
        :param pulumi.Input[builtins.str] tenant_id: The tenant id.
        :param pulumi.Input[Union['TenantWorkerGroupArgs', 'TenantWorkerGroupArgsDict']] worker_group: The worker group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TenantState.__new__(_TenantState)

        __props__.__dict__["kestra_tenant_id"] = kestra_tenant_id
        __props__.__dict__["name"] = name
        __props__.__dict__["secret_configuration"] = secret_configuration
        __props__.__dict__["secret_type"] = secret_type
        __props__.__dict__["storage_configuration"] = storage_configuration
        __props__.__dict__["storage_type"] = storage_type
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["worker_group"] = worker_group
        return Tenant(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="kestraTenantId")
    def kestra_tenant_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "kestra_tenant_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The tenant name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secretConfiguration")
    def secret_configuration(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        The secret configuration.
        """
        return pulumi.get(self, "secret_configuration")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The secret type.
        """
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter(name="storageConfiguration")
    def storage_configuration(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        The storage configuration.
        """
        return pulumi.get(self, "storage_configuration")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The storage type.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[builtins.str]:
        """
        The tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="workerGroup")
    def worker_group(self) -> pulumi.Output[Optional['outputs.TenantWorkerGroup']]:
        """
        The worker group.
        """
        return pulumi.get(self, "worker_group")

