# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNamespaceResult',
    'AwaitableGetNamespaceResult',
    'get_namespace',
    'get_namespace_output',
]

@pulumi.output_type
class GetNamespaceResult:
    """
    A collection of values returned by getNamespace.
    """
    def __init__(__self__, description=None, id=None, namespace_id=None, plugin_defaults=None, tenant_id=None, variables=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if namespace_id and not isinstance(namespace_id, str):
            raise TypeError("Expected argument 'namespace_id' to be a str")
        pulumi.set(__self__, "namespace_id", namespace_id)
        if plugin_defaults and not isinstance(plugin_defaults, str):
            raise TypeError("Expected argument 'plugin_defaults' to be a str")
        pulumi.set(__self__, "plugin_defaults", plugin_defaults)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if variables and not isinstance(variables, str):
            raise TypeError("Expected argument 'variables' to be a str")
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> builtins.str:
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="pluginDefaults")
    def plugin_defaults(self) -> builtins.str:
        return pulumi.get(self, "plugin_defaults")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> builtins.str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def variables(self) -> builtins.str:
        return pulumi.get(self, "variables")


class AwaitableGetNamespaceResult(GetNamespaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNamespaceResult(
            description=self.description,
            id=self.id,
            namespace_id=self.namespace_id,
            plugin_defaults=self.plugin_defaults,
            tenant_id=self.tenant_id,
            variables=self.variables)


def get_namespace(id: Optional[builtins.str] = None,
                  namespace_id: Optional[builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNamespaceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['namespaceId'] = namespace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('kestra:index/getNamespace:getNamespace', __args__, opts=opts, typ=GetNamespaceResult, package_ref=_utilities.get_package()).value

    return AwaitableGetNamespaceResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        namespace_id=pulumi.get(__ret__, 'namespace_id'),
        plugin_defaults=pulumi.get(__ret__, 'plugin_defaults'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        variables=pulumi.get(__ret__, 'variables'))
def get_namespace_output(id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                         namespace_id: Optional[pulumi.Input[builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNamespaceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['namespaceId'] = namespace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('kestra:index/getNamespace:getNamespace', __args__, opts=opts, typ=GetNamespaceResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetNamespaceResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        namespace_id=pulumi.get(__response__, 'namespace_id'),
        plugin_defaults=pulumi.get(__response__, 'plugin_defaults'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        variables=pulumi.get(__response__, 'variables')))
