# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['WorkerGroupArgs', 'WorkerGroup']

@pulumi.input_type
class WorkerGroupArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[builtins.str],
                 allowed_tenants: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 worker_group_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a WorkerGroup resource.
        :param pulumi.Input[builtins.str] key: The worker group key.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] allowed_tenants: The list of tenants allowed to use the worker group.
        :param pulumi.Input[builtins.str] description: The worker group description.
        """
        pulumi.set(__self__, "key", key)
        if allowed_tenants is not None:
            pulumi.set(__self__, "allowed_tenants", allowed_tenants)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if worker_group_id is not None:
            pulumi.set(__self__, "worker_group_id", worker_group_id)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[builtins.str]:
        """
        The worker group key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="allowedTenants")
    def allowed_tenants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of tenants allowed to use the worker group.
        """
        return pulumi.get(self, "allowed_tenants")

    @allowed_tenants.setter
    def allowed_tenants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "allowed_tenants", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The worker group description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="workerGroupId")
    def worker_group_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "worker_group_id")

    @worker_group_id.setter
    def worker_group_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "worker_group_id", value)


@pulumi.input_type
class _WorkerGroupState:
    def __init__(__self__, *,
                 allowed_tenants: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 worker_group_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering WorkerGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] allowed_tenants: The list of tenants allowed to use the worker group.
        :param pulumi.Input[builtins.str] description: The worker group description.
        :param pulumi.Input[builtins.str] key: The worker group key.
        """
        if allowed_tenants is not None:
            pulumi.set(__self__, "allowed_tenants", allowed_tenants)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if worker_group_id is not None:
            pulumi.set(__self__, "worker_group_id", worker_group_id)

    @property
    @pulumi.getter(name="allowedTenants")
    def allowed_tenants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of tenants allowed to use the worker group.
        """
        return pulumi.get(self, "allowed_tenants")

    @allowed_tenants.setter
    def allowed_tenants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "allowed_tenants", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The worker group description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The worker group key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="workerGroupId")
    def worker_group_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "worker_group_id")

    @worker_group_id.setter
    def worker_group_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "worker_group_id", value)


@pulumi.type_token("kestra:index/workerGroup:WorkerGroup")
class WorkerGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_tenants: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 worker_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a WorkerGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] allowed_tenants: The list of tenants allowed to use the worker group.
        :param pulumi.Input[builtins.str] description: The worker group description.
        :param pulumi.Input[builtins.str] key: The worker group key.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkerGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WorkerGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WorkerGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkerGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_tenants: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 worker_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkerGroupArgs.__new__(WorkerGroupArgs)

            __props__.__dict__["allowed_tenants"] = allowed_tenants
            __props__.__dict__["description"] = description
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["worker_group_id"] = worker_group_id
        super(WorkerGroup, __self__).__init__(
            'kestra:index/workerGroup:WorkerGroup',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowed_tenants: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            key: Optional[pulumi.Input[builtins.str]] = None,
            worker_group_id: Optional[pulumi.Input[builtins.str]] = None) -> 'WorkerGroup':
        """
        Get an existing WorkerGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] allowed_tenants: The list of tenants allowed to use the worker group.
        :param pulumi.Input[builtins.str] description: The worker group description.
        :param pulumi.Input[builtins.str] key: The worker group key.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkerGroupState.__new__(_WorkerGroupState)

        __props__.__dict__["allowed_tenants"] = allowed_tenants
        __props__.__dict__["description"] = description
        __props__.__dict__["key"] = key
        __props__.__dict__["worker_group_id"] = worker_group_id
        return WorkerGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowedTenants")
    def allowed_tenants(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        The list of tenants allowed to use the worker group.
        """
        return pulumi.get(self, "allowed_tenants")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The worker group description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[builtins.str]:
        """
        The worker group key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="workerGroupId")
    def worker_group_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "worker_group_id")

