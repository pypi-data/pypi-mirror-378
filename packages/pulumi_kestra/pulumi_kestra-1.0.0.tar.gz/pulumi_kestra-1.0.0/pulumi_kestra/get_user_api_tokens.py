# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetUserApiTokensResult',
    'AwaitableGetUserApiTokensResult',
    'get_user_api_tokens',
    'get_user_api_tokens_output',
]

@pulumi.output_type
class GetUserApiTokensResult:
    """
    A collection of values returned by getUserApiTokens.
    """
    def __init__(__self__, api_tokens=None, id=None, user_id=None):
        if api_tokens and not isinstance(api_tokens, list):
            raise TypeError("Expected argument 'api_tokens' to be a list")
        pulumi.set(__self__, "api_tokens", api_tokens)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="apiTokens")
    def api_tokens(self) -> Sequence['outputs.GetUserApiTokensApiTokenResult']:
        return pulumi.get(self, "api_tokens")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> builtins.str:
        return pulumi.get(self, "user_id")


class AwaitableGetUserApiTokensResult(GetUserApiTokensResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserApiTokensResult(
            api_tokens=self.api_tokens,
            id=self.id,
            user_id=self.user_id)


def get_user_api_tokens(id: Optional[builtins.str] = None,
                        user_id: Optional[builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserApiTokensResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['userId'] = user_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('kestra:index/getUserApiTokens:getUserApiTokens', __args__, opts=opts, typ=GetUserApiTokensResult, package_ref=_utilities.get_package()).value

    return AwaitableGetUserApiTokensResult(
        api_tokens=pulumi.get(__ret__, 'api_tokens'),
        id=pulumi.get(__ret__, 'id'),
        user_id=pulumi.get(__ret__, 'user_id'))
def get_user_api_tokens_output(id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                               user_id: Optional[pulumi.Input[builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUserApiTokensResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['userId'] = user_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('kestra:index/getUserApiTokens:getUserApiTokens', __args__, opts=opts, typ=GetUserApiTokensResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetUserApiTokensResult(
        api_tokens=pulumi.get(__response__, 'api_tokens'),
        id=pulumi.get(__response__, 'id'),
        user_id=pulumi.get(__response__, 'user_id')))
