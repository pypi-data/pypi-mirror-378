# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'NamespaceAllowedNamespaceArgs',
    'NamespaceAllowedNamespaceArgsDict',
    'NamespaceWorkerGroupArgs',
    'NamespaceWorkerGroupArgsDict',
    'RolePermissionArgs',
    'RolePermissionArgsDict',
    'ServiceAccountGroupArgs',
    'ServiceAccountGroupArgsDict',
    'TenantWorkerGroupArgs',
    'TenantWorkerGroupArgsDict',
    'GetServiceAccountGroupArgs',
    'GetServiceAccountGroupArgsDict',
]

MYPY = False

if not MYPY:
    class NamespaceAllowedNamespaceArgsDict(TypedDict):
        namespace: pulumi.Input[builtins.str]
        """
        The namespace.
        """
elif False:
    NamespaceAllowedNamespaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NamespaceAllowedNamespaceArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] namespace: The namespace.
        """
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[builtins.str]:
        """
        The namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "namespace", value)


if not MYPY:
    class NamespaceWorkerGroupArgsDict(TypedDict):
        key: pulumi.Input[builtins.str]
        """
        The worker group key.
        """
        fallback: NotRequired[pulumi.Input[builtins.str]]
        """
        The fallback strategy.
        """
elif False:
    NamespaceWorkerGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NamespaceWorkerGroupArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[builtins.str],
                 fallback: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] key: The worker group key.
        :param pulumi.Input[builtins.str] fallback: The fallback strategy.
        """
        pulumi.set(__self__, "key", key)
        if fallback is not None:
            pulumi.set(__self__, "fallback", fallback)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[builtins.str]:
        """
        The worker group key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def fallback(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The fallback strategy.
        """
        return pulumi.get(self, "fallback")

    @fallback.setter
    def fallback(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fallback", value)


if not MYPY:
    class RolePermissionArgsDict(TypedDict):
        permissions: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        The permissions for this type.
        """
        type: pulumi.Input[builtins.str]
        """
        The type of permission.
        """
elif False:
    RolePermissionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RolePermissionArgs:
    def __init__(__self__, *,
                 permissions: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 type: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] permissions: The permissions for this type.
        :param pulumi.Input[builtins.str] type: The type of permission.
        """
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        The permissions for this type.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        The type of permission.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ServiceAccountGroupArgsDict(TypedDict):
        id: pulumi.Input[builtins.str]
        """
        The group id.
        """
elif False:
    ServiceAccountGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceAccountGroupArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] id: The group id.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[builtins.str]:
        """
        The group id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class TenantWorkerGroupArgsDict(TypedDict):
        fallback: pulumi.Input[builtins.str]
        """
        The fallback strategy.
        """
        key: pulumi.Input[builtins.str]
        """
        The worker group key.
        """
elif False:
    TenantWorkerGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TenantWorkerGroupArgs:
    def __init__(__self__, *,
                 fallback: pulumi.Input[builtins.str],
                 key: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] fallback: The fallback strategy.
        :param pulumi.Input[builtins.str] key: The worker group key.
        """
        pulumi.set(__self__, "fallback", fallback)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def fallback(self) -> pulumi.Input[builtins.str]:
        """
        The fallback strategy.
        """
        return pulumi.get(self, "fallback")

    @fallback.setter
    def fallback(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "fallback", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[builtins.str]:
        """
        The worker group key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "key", value)


if not MYPY:
    class GetServiceAccountGroupArgsDict(TypedDict):
        id: builtins.str
        """
        The group id.
        """
elif False:
    GetServiceAccountGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetServiceAccountGroupArgs:
    def __init__(__self__, *,
                 id: builtins.str):
        """
        :param builtins.str id: The group id.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The group id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: builtins.str):
        pulumi.set(self, "id", value)


