# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceAccountArgs', 'ServiceAccount']

@pulumi.input_type
class ServiceAccountArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceAccountGroupArgs']]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 service_account_id: Optional[pulumi.Input[builtins.str]] = None,
                 super_admin: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a ServiceAccount resource.
        :param pulumi.Input[builtins.str] description: The service account description.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceAccountGroupArgs']]] groups: The service account group.
        :param pulumi.Input[builtins.str] name: The service account name.
        :param pulumi.Input[builtins.bool] super_admin: Is the service account a super admin.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if super_admin is not None:
            pulumi.set(__self__, "super_admin", super_admin)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The service account description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceAccountGroupArgs']]]]:
        """
        The service account group.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceAccountGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The service account name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "service_account_id")

    @service_account_id.setter
    def service_account_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_account_id", value)

    @property
    @pulumi.getter(name="superAdmin")
    def super_admin(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Is the service account a super admin.
        """
        return pulumi.get(self, "super_admin")

    @super_admin.setter
    def super_admin(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "super_admin", value)


@pulumi.input_type
class _ServiceAccountState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceAccountGroupArgs']]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 service_account_id: Optional[pulumi.Input[builtins.str]] = None,
                 super_admin: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Input properties used for looking up and filtering ServiceAccount resources.
        :param pulumi.Input[builtins.str] description: The service account description.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceAccountGroupArgs']]] groups: The service account group.
        :param pulumi.Input[builtins.str] name: The service account name.
        :param pulumi.Input[builtins.bool] super_admin: Is the service account a super admin.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if super_admin is not None:
            pulumi.set(__self__, "super_admin", super_admin)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The service account description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceAccountGroupArgs']]]]:
        """
        The service account group.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceAccountGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The service account name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "service_account_id")

    @service_account_id.setter
    def service_account_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_account_id", value)

    @property
    @pulumi.getter(name="superAdmin")
    def super_admin(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Is the service account a super admin.
        """
        return pulumi.get(self, "super_admin")

    @super_admin.setter
    def super_admin(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "super_admin", value)


@pulumi.type_token("kestra:index/serviceAccount:ServiceAccount")
class ServiceAccount(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceAccountGroupArgs', 'ServiceAccountGroupArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 service_account_id: Optional[pulumi.Input[builtins.str]] = None,
                 super_admin: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        Create a ServiceAccount resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: The service account description.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceAccountGroupArgs', 'ServiceAccountGroupArgsDict']]]] groups: The service account group.
        :param pulumi.Input[builtins.str] name: The service account name.
        :param pulumi.Input[builtins.bool] super_admin: Is the service account a super admin.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ServiceAccountArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ServiceAccount resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServiceAccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceAccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceAccountGroupArgs', 'ServiceAccountGroupArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 service_account_id: Optional[pulumi.Input[builtins.str]] = None,
                 super_admin: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceAccountArgs.__new__(ServiceAccountArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["groups"] = groups
            __props__.__dict__["name"] = name
            __props__.__dict__["service_account_id"] = service_account_id
            __props__.__dict__["super_admin"] = super_admin
        super(ServiceAccount, __self__).__init__(
            'kestra:index/serviceAccount:ServiceAccount',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceAccountGroupArgs', 'ServiceAccountGroupArgsDict']]]]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            service_account_id: Optional[pulumi.Input[builtins.str]] = None,
            super_admin: Optional[pulumi.Input[builtins.bool]] = None) -> 'ServiceAccount':
        """
        Get an existing ServiceAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: The service account description.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceAccountGroupArgs', 'ServiceAccountGroupArgsDict']]]] groups: The service account group.
        :param pulumi.Input[builtins.str] name: The service account name.
        :param pulumi.Input[builtins.bool] super_admin: Is the service account a super admin.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceAccountState.__new__(_ServiceAccountState)

        __props__.__dict__["description"] = description
        __props__.__dict__["groups"] = groups
        __props__.__dict__["name"] = name
        __props__.__dict__["service_account_id"] = service_account_id
        __props__.__dict__["super_admin"] = super_admin
        return ServiceAccount(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The service account description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceAccountGroup']]]:
        """
        The service account group.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The service account name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="superAdmin")
    def super_admin(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Is the service account a super admin.
        """
        return pulumi.get(self, "super_admin")

