# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetWorkerGroupResult',
    'AwaitableGetWorkerGroupResult',
    'get_worker_group',
    'get_worker_group_output',
]

@pulumi.output_type
class GetWorkerGroupResult:
    """
    A collection of values returned by getWorkerGroup.
    """
    def __init__(__self__, allowed_tenants=None, description=None, id=None, key=None):
        if allowed_tenants and not isinstance(allowed_tenants, str):
            raise TypeError("Expected argument 'allowed_tenants' to be a str")
        pulumi.set(__self__, "allowed_tenants", allowed_tenants)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="allowedTenants")
    def allowed_tenants(self) -> builtins.str:
        return pulumi.get(self, "allowed_tenants")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")


class AwaitableGetWorkerGroupResult(GetWorkerGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkerGroupResult(
            allowed_tenants=self.allowed_tenants,
            description=self.description,
            id=self.id,
            key=self.key)


def get_worker_group(id: Optional[builtins.str] = None,
                     key: Optional[builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkerGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['key'] = key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('kestra:index/getWorkerGroup:getWorkerGroup', __args__, opts=opts, typ=GetWorkerGroupResult, package_ref=_utilities.get_package()).value

    return AwaitableGetWorkerGroupResult(
        allowed_tenants=pulumi.get(__ret__, 'allowed_tenants'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        key=pulumi.get(__ret__, 'key'))
def get_worker_group_output(id: Optional[pulumi.Input[builtins.str]] = None,
                            key: Optional[pulumi.Input[builtins.str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkerGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['key'] = key
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('kestra:index/getWorkerGroup:getWorkerGroup', __args__, opts=opts, typ=GetWorkerGroupResult, package_ref=_utilities.get_package())
    return __ret__.apply(lambda __response__: GetWorkerGroupResult(
        allowed_tenants=pulumi.get(__response__, 'allowed_tenants'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        key=pulumi.get(__response__, 'key')))
