# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SecurityIntegrationArgs', 'SecurityIntegration']

@pulumi.input_type
class SecurityIntegrationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[builtins.str],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 security_integration_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a SecurityIntegration resource.
        :param pulumi.Input[builtins.str] type: The type of the security integration.
        :param pulumi.Input[builtins.str] description: The description of the security integration.
        :param pulumi.Input[builtins.str] name: The name of the security integration.
        """
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if security_integration_id is not None:
            pulumi.set(__self__, "security_integration_id", security_integration_id)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        The type of the security integration.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The description of the security integration.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the security integration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="securityIntegrationId")
    def security_integration_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "security_integration_id")

    @security_integration_id.setter
    def security_integration_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "security_integration_id", value)


@pulumi.input_type
class _SecurityIntegrationState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 secret_token: Optional[pulumi.Input[builtins.str]] = None,
                 security_integration_id: Optional[pulumi.Input[builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 uid: Optional[pulumi.Input[builtins.str]] = None,
                 uri: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering SecurityIntegration resources.
        :param pulumi.Input[builtins.str] description: The description of the security integration.
        :param pulumi.Input[builtins.str] name: The name of the security integration.
        :param pulumi.Input[builtins.str] secret_token: The secret token of the security integration.
        :param pulumi.Input[builtins.str] tenant_id: The tenant id.
        :param pulumi.Input[builtins.str] type: The type of the security integration.
        :param pulumi.Input[builtins.str] uid: The unique identifier of the security integration.
        :param pulumi.Input[builtins.str] uri: The url of the security integration.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secret_token is not None:
            pulumi.set(__self__, "secret_token", secret_token)
        if security_integration_id is not None:
            pulumi.set(__self__, "security_integration_id", security_integration_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The description of the security integration.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the security integration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The secret token of the security integration.
        """
        return pulumi.get(self, "secret_token")

    @secret_token.setter
    def secret_token(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_token", value)

    @property
    @pulumi.getter(name="securityIntegrationId")
    def security_integration_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "security_integration_id")

    @security_integration_id.setter
    def security_integration_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "security_integration_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of the security integration.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique identifier of the security integration.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The url of the security integration.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uri", value)


@pulumi.type_token("kestra:index/securityIntegration:SecurityIntegration")
class SecurityIntegration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 security_integration_id: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a SecurityIntegration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: The description of the security integration.
        :param pulumi.Input[builtins.str] name: The name of the security integration.
        :param pulumi.Input[builtins.str] type: The type of the security integration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityIntegrationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SecurityIntegration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SecurityIntegrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityIntegrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 security_integration_id: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityIntegrationArgs.__new__(SecurityIntegrationArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["security_integration_id"] = security_integration_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["secret_token"] = None
            __props__.__dict__["tenant_id"] = None
            __props__.__dict__["uid"] = None
            __props__.__dict__["uri"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secretToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SecurityIntegration, __self__).__init__(
            'kestra:index/securityIntegration:SecurityIntegration',
            resource_name,
            __props__,
            opts,
            package_ref=_utilities.get_package())

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            secret_token: Optional[pulumi.Input[builtins.str]] = None,
            security_integration_id: Optional[pulumi.Input[builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            uid: Optional[pulumi.Input[builtins.str]] = None,
            uri: Optional[pulumi.Input[builtins.str]] = None) -> 'SecurityIntegration':
        """
        Get an existing SecurityIntegration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: The description of the security integration.
        :param pulumi.Input[builtins.str] name: The name of the security integration.
        :param pulumi.Input[builtins.str] secret_token: The secret token of the security integration.
        :param pulumi.Input[builtins.str] tenant_id: The tenant id.
        :param pulumi.Input[builtins.str] type: The type of the security integration.
        :param pulumi.Input[builtins.str] uid: The unique identifier of the security integration.
        :param pulumi.Input[builtins.str] uri: The url of the security integration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityIntegrationState.__new__(_SecurityIntegrationState)

        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["secret_token"] = secret_token
        __props__.__dict__["security_integration_id"] = security_integration_id
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["type"] = type
        __props__.__dict__["uid"] = uid
        __props__.__dict__["uri"] = uri
        return SecurityIntegration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The description of the security integration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the security integration.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> pulumi.Output[builtins.str]:
        """
        The secret token of the security integration.
        """
        return pulumi.get(self, "secret_token")

    @property
    @pulumi.getter(name="securityIntegrationId")
    def security_integration_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "security_integration_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[builtins.str]:
        """
        The tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The type of the security integration.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[builtins.str]:
        """
        The unique identifier of the security integration.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Output[builtins.str]:
        """
        The url of the security integration.
        """
        return pulumi.get(self, "uri")

