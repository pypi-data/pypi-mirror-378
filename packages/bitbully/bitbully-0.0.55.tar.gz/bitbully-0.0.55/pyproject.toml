# https://packaging.python.org/en/latest/tutorials/packaging-projects/#creating-pyproject-toml
[project]
name = "bitbully"
version = "0.0.55"
description = "A fast Connect-4 Solver for Python & C++"
authors = [
    { name = "Markus Thill" }
]
maintainers = [
    { name = "Markus Thill" }
]
readme = "README.md"
requires-python = ">=3.10"

license = { file = "LICENSE" }

keywords = ["connect-4", "solver", "perfect-playing", "opening book", "tree-search"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: C++",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = []  # Add Python dependencies required for your project

[project.urls]
Homepage = "https://github.com/MarkusThill/BitBully"
Issues = "https://github.com/MarkusThill/BitBully/issues"

[project.optional-dependencies]
# Specify optional dependency groups
dev = [
    "commitizen", # Required for versioning
    "pre-commit", # For managing Git hooks (optional)
    "build",
    "twine",
    "readme_renderer[md]",
    "keyrings.alt",
    "pre-commit",
    "pydoclint",
    "mkdocs",
    "mkdocstrings[python]",
    "mkdocs-material",
    "mypy",
    "pytest"
]

gui = [
    "matplotlib",
    "ipywidgets",
    "ipympl"
]

ci = [
    "pytest", # For testing
    "ruff", # For linting
]

[build-system]
# TODO: is scikit-build really required???
requires = ["build", "setuptools>=42", "wheel", "cibuildwheel", "cmake>=3.15", "scikit-build", "pybind11"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = { "" = "src" }
include-package-data = true  # Include additional non-Python files (e.g., libraries)

[tool.setuptools.package-data]
"bitbully" = ["assets/*"]

# bitbully = [
#    "*.so",
#    "*.dll"
#    "libs/windows/*.dll",
#    "libs/macos/*.dylib",
#]

# https://cibuildwheel.pypa.io/en/stable/options/#build-skip
[tool.cibuildwheel]
build = "cp310-* cp311-* cp312-* cp313-* pp310-* pp311-*"
enable = ["pypy"]  # <-- required in cibuildwheel 3.x
# build = "cp311-*" # TODO: Change back to above setting
skip = "*win32*" # 14.09.2025:  removed "cp38-macosx_arm64*"
environment = "MACOSX_DEPLOYMENT_TARGET=10.15"
# ----------------------------------------------------------------------------------------------------
# on ubuntu runners, the latest numpy version is built from scratch, taking a lot of time (14.09.2025)
# However, the versions should be updated from time to time.
# ----------------------------------------------------------------------------------------------------
test-requires = ["pytest"] # windows GitHub runners have problems with the following: "numpy<2.3.0"
test-command = "pytest -v -ra {project}/tests"

[tool.setuptools.packages.find]
where = ["src"]  # list of folders that contain the packages (["."] by default)
include = ["bitbully*"]  # package names should match these glob patterns (["*"] by default)
exclude = ["bitbully.tests*"]  # exclude packages matching these glob patterns (empty by default)
namespaces = false  # to disable scanning PEP 420 namespaces (true by default)

[tool.commitizen]
name = "cz_conventional_commits"
version_scheme = "semver"
version = "0.0.55" # Current version managed by Commitizen
version_files = ["pyproject.toml", "src/version.h", "version.txt", "src/bitbully/__init__.py", "setup.py", "Doxyfile"] # if cz can directly bump it
pre_bump_hooks = "./scripts/update_version.sh"
tag_format = "v$version"  # Tag format (e.g., v1.0.0)
changelog_file = "CHANGELOG.md"  # File to store changelog (if needed)
update_changelog_on_bump = true

[tool.pydoclint]
style = "google"
exclude = '\.git'
allow-init-docstring = true

[tool.ruff]
line-length = 120
include = ["pyproject.toml", "src/**/*.py", "scripts/**/*.py", "tests/**/*.py"]
exclude = ["thirdParty/"]

[tool.ruff.format]
docstring-code-format = true
# docstring-code-line-length = 88

[tool.ruff.lint]
preview = true

external = [
    "DOC", # pydoclint
]

select = [
    "A",
    "ANN", # Enforce type hints
    "C", # Flags overly complex functions
    "D", # Encourages proper documentation
    "DOC", # Pydocstyle (docs best practices)
    "E", # Enforces basic style (e.g., indentation, line breaks)
    "F", # Detects undefined variables, imports, syntax errors
    "G", # flake8-logging
    "FURB", # Encourages f-strings (for Python 3.6+)
    "I", # Ensures proper import sorting
    "N", # Enforces consistent function/class naming
    "NPY", # Best practices for NumPy usage (if applicable)
    "PD", # pandas vet
    "PERF",
    "PIE", # Flags unnecessary lambda expressions, etc.
    "PT", # Best practices for testing (if using pytest)
    "PTH", # Encourages pathlib over os.path
    "PGH", # pygrep
    "PYI", # PyPI
    "Q", # quotes
    "RET", # Detects unnecessary return statements & refactors returns
    "RUF", # General Ruff improvements
    "UP", # Encourages modern Python syntax
    "SIM", # Flags redundant expressions & improves readability
    "W", # Enforces basic style (e.g., indentation, line breaks)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
disallow_untyped_defs = true
check_untyped_defs = true
strict_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
files = ["src/bitbully"]
exclude = "tests/.*|thirdParty/.*"
