[build-system]
requires = ["setuptools>=77.0.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.package-data]
"pgrubic" = ["pgrubic.toml"]


[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "semver2"
version_provider = "pep621"
update_changelog_on_bump = true
bump_message = "chore(bump): version $current_version â†’ $new_version"
version_files = [
    "README.md:rev",
    "docs/docs/tutorial.md:rev",
]

[project]
name = "pgrubic"
version = "0.9.0"
description = "PostgreSQL linter and formatter for schema migrations and design best practices"
readme = { file = "README.md", content-type = "text/markdown" }
license = "GPL-3.0-or-later"
license-files = ["LICENSE"]
requires-python = ">=3.12"
authors = [{ name = "Bolaji Wahab", email = "bolajiwahab23@gmail.com" }]
maintainers = [{ name = "Bolaji Wahab", email = "bolajiwahab23@gmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: SQL",
  "Topic :: Database",
  "Topic :: Utilities",
  "Topic :: Software Development :: Quality Assurance"
]
keywords = ["pgrubic", "sql", "postgres", "postgresql", "linter"]
dependencies = [
  "pglast==7.7",
  "case-converter==1.2.0",
  "colorama==0.4.6",
  "toml==0.10.2",
  "click==8.2.1",
  "rich==14.1.0",
  "deepmerge==2.0",
  "msgpack==1.1.1",
  "GitPython==3.1.45",
]

[project.optional-dependencies]
dev = [
  "ruff==0.12.10",
  "mypy==1.17.1",
  "isort==6.0.1",
  "bandit==1.8.6",
  "add-trailing-comma==3.2.0",
  "interrogate==1.7.0",
  "pre-commit==4.3.0",
  "pre-commit-hooks==6.0.0",
  "yamllint==1.37.1",
  "conventional-pre-commit==4.2.0",
  "pytest==8.4.1",
  "coverage==7.10.5",
  "tox==4.28.4",
  "types-PyYAML==6.0.12.20250822",
  "types-toml==0.10.8.20240310",
  "types-colorama==0.4.15.20250801",
  "types-click==7.1.8",
  "msgpack-types==0.5.0",
]

doc = [
  "mkdocs==1.6.1",
  "mkdocs-material==9.6.18",
  "mkdocstrings==0.30.0",
  "mkdocstrings-python==1.17.0",
]

release = [
  "commitizen==4.8.3",
]

[project.urls]
Homepage = "https://github.com/bolajiwahab/pgrubic"
Documentation = "https://github.com/bolajiwahab/pgrubic/blob/main/README.md"
Repository = "https://github.com/bolajiwahab/pgrubic"
"Issue Tracker" = "https://github.com/bolajiwahab/pgrubic/issues"
Changelog = "https://github.com/bolajiwahab/pgrubic/blob/main/CHANGELOG.md"

[project.scripts]
pgrubic = "pgrubic.__main__:cli"

[tool.bandit]
exclude_dirs = [
  "tests"
]

[tool.mypy]
python_version = "3.12"
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
strict = true
strict_equality = true
extra_checks = true
show_error_codes = true
no_implicit_reexport = true
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = ["pglast.*", "caseconverter.*", "pgrubic.*", "deepmerge.*"]
ignore_missing_imports = true

[tool.ruff]
lint.select = ["ALL"]
lint.ignore = ["N802", "ARG002", "ANN401", "D205", "N999", "ISC001", "COM812", "TC006"]
line-length = 90

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.isort]
length-sort = true
combine-as-imports = true
known-first-party = ["pgrubic"]

[tool.ruff.lint.flake8-builtins]
builtins-allowed-modules = ["enum", "select", "typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
  "S101", # asserts allowed in tests...
  "S105", # We are using a variable called "sql_pass"
]
"*formatters/**/*.py" = [
  "PLR0915",
  "PLR0912",
  "C901",
]

[tool.isort]
profile = "black"
length_sort = true
known_first_party = "pgrubic"
combine_as_imports = true

[tool.pytest.ini_options]
pythonpath = ["src"]

[tool.coverage.run]
relative_files = true
source = ["src"]
omit = [
  "tests/*"
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
]

[tool.interrogate]
fail-under = 100
verbose = 1

[tool.tox]
legacy_tox_ini = """
    [tox]
    min_version = 4.0
    env_list =
        isort
        lint
        format
        typing
        tests
        coverage
        docbuild
        prepare-release

    [testenv]
    extras = dev
    deps =
    commands =

    [testenv:dev]

    [testenv:commitlint]
    commands = conventional-pre-commit .git/COMMIT_EDITMSG

    [testenv:prepare-release]
    extras = release
    commands = cz bump

    [testenv:tests]
    setenv = {[testenv:coverage]setenv}
    commands =
        coverage erase
        coverage run -m pytest -vv --color=yes {posargs:tests}

    [testenv:tests-linux]
    platform = linux
    setenv = {[testenv:tests]setenv}
    commands = {[testenv:tests]commands}

    [testenv:tests-windows]
    platform = win32
    setenv = {[testenv:tests]setenv}
    commands = {[testenv:tests]commands}

    [testenv:tests-macos]
    platform = darwin
    setenv = {[testenv:tests]setenv}
    commands = {[testenv:tests]commands}

    [testenv:coverage]
    setenv =
        COVERAGE_FILE = .coverage
    commands =
        {[testenv:tests]commands}
        coverage report --fail-under=100 --show-missing {posargs}

    [testenv:docstrings-coverage]
    commands = interrogate {posargs}

    [testenv:isort]
    commands = isort --check --diff --profile=black {posargs:.}

    [testenv:lint]
    commands =
        ruff check {posargs}
        yamllint --strict {posargs:.}

    [testenv:lint-with-fix]
    commands =
        ruff check {posargs} --fix
        yamllint --strict {posargs:.}

    [testenv:format]
    commands = ruff format {posargs}

    [testenv:typing]
    commands = mypy {posargs:.}

    [testenv:security]
    commands = bandit --severity-level all -r src

    [testenv:docbuild]
    extras =
    commands =
        # We need to build the project in order to generate the docs.
        # Hence it fails with import errors.
        pip install .
        python docs/rule_docs_generator.py
        python docs/settings_doc_generator.py

    [testenv:ensure-docs-up-to-date]
    extras =
    allowlist_externals = ./tools/ensure_up_to_date_docs.sh
    commands =
        {[testenv:docbuild]commands}
        ./tools/ensure_up_to_date_docs.sh

    [testenv:pre-commit]
    commands = pre-commit {posargs:run --hook-stage pre-commit --all-files}

    [testenv:build-dist]
    extras =
    deps = build
    commands = python -m build --sdist --wheel {posargs:{toxinidir}}
"""
