# =============================================================================
# POETRY BUILD SYSTEM CONFIGURATION
# =============================================================================
# This section tells Poetry how to build your package
[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]  # Poetry build backend version
build-backend = "poetry.core.masonry.api"  # Use Poetry's build system

# =============================================================================
# PROJECT METADATA AND CONFIGURATION
# =============================================================================
# All the information about your project that will appear on PyPI
[tool.poetry]
name = "quilt-knit"
version = "1.0.1"
description = "A knit-programming library for modular combination of knitted structures defined by the knitout machine knitting language."
authors = ["Megan Hofmann <m.hofmann@northeastern.edu>", "John 'Jack' Hester <hester.jo@northeastern.edu>"]
maintainers = ["Megan Hofmann <m.hofmann@northeastern.edu>", "John 'Jack' Hester <hester.jo@northeastern.edu>"]
license = "License :: Free for non-commercial use"                     # License type (shows up on PyPI)
readme = "README.md"                # File to use as long description on PyPI
homepage = "https://mhofmann-khoury.github.io/QUILT/"
repository = "https://github.com/mhofmann-Khoury/QUILT"
documentation = "https://mhofmann-khoury.github.io/QUILT/"
keywords = ["machine knitting", "act lab", "Northeastern University", "knitout", "quilt", "knit script"]
classifiers = [                     # PyPI classifiers for categorization
    "Development Status :: 3 - Alpha",
    "Natural Language :: English",                         # Human language
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",                  # Platform support
    "Programming Language :: Python :: 3",                # Python support
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
]

# =============================================================================
# PACKAGE STRUCTURE CONFIGURATION
# =============================================================================
# Tell Poetry where to find your Python packages in your repository
packages = [
    {include = "quilt_knit", from = "src"},
]

# =============================================================================
# FILES TO INCLUDE/EXCLUDE IN DISTRIBUTION
# =============================================================================
# Include additional files when building the package for distribution
include = [
    "README.md",                    # Project description
    "LICENSE",                      # License file
    "docs/**/*",                    # All documentation files
]

# Exclude files from the distribution package (keeps package size down)
exclude = [
    "tests/**/*",                   # Don't include test files in distribution
    "docs/_build/**/*",             # Don't include built documentation
    "*.pyc",                        # No compiled Python files
    "__pycache__/**/*",             # No Python cache directories
    ".coverage",                    # No coverage data files
    "htmlcov/**/*",                 # No coverage HTML reports
    ".git/**/*",                    # No git files
    ".github/**/*",                 # No GitHub workflow files
    ".pytest_cache/**/*",           # No pytest cache
    ".mypy_cache/**/*",             # No MyPy cache
    "*.egg-info/**/*",              # No build artifacts
    "dist/**/*",                    # No distribution files
]

# =============================================================================
# RUNTIME DEPENDENCIES
# =============================================================================
# These are packages your project needs to run in production
[tool.poetry.dependencies]
python = ">=3.11,<3.13"
knit-graphs = ">=0.0.10"
knitout-interpreter = ">=0.0.22"
virtual-knitting-machine = ">=0.0.20"
intervaltree = "^3.1.0"
knitout-to-dat-python = ">=0.0.3"

[tool.poetry.group.dev.dependencies]
importlib-resources = ">=6.5.2"
knit-script = ">=0.1.33"

# -------------------------------------------------------------------------
# TESTING FRAMEWORK AND PLUGINS
# -------------------------------------------------------------------------
coverage = "^7.3.0"                # Coverage measurement for unittest

# -------------------------------------------------------------------------
# CODE QUALITY AND FORMATTING TOOLS
# -------------------------------------------------------------------------
isort = "^5.12.0"                  # Import statement sorter
mypy = "^1.5.0"                    # Static type checker (catches type errors)
pre-commit = "^3.4.0"              # Git hook framework for automated code quality checks

# -------------------------------------------------------------------------
# SECURITY AND PACKAGE VALIDATION
# -------------------------------------------------------------------------
safety = "^2.3.0"                  # Scans dependencies for known security vulnerabilities
twine = "^4.0.0"                   # Tool for uploading packages to PyPI (validates before upload)

# -------------------------------------------------------------------------
# DOCUMENTATION GENERATION
# -------------------------------------------------------------------------
sphinx = "^7.1.0"                  # Documentation generator from docstrings
sphinx-rtd-theme = "^1.3.0"        # Read the Docs theme (professional appearance)
sphinx-autodoc-typehints = "^1.24.0"  # Automatically include type hints in docs
myst-parser = "^2.0.0"             # Allows Markdown files in Sphinx documentation
sphinx-autoapi = "^3.0.0"          # Automatically generates API documentation

# -------------------------------------------------------------------------
# DEVELOPMENT TOOLS AND UTILITIES
# -------------------------------------------------------------------------
tox = "^4.11.0"                    # Test across multiple Python versions locally

# -------------------------------------------------------------------------
# RELEASE AND BUILD TOOLS
# -------------------------------------------------------------------------
build = "^0.10.0"                  # PEP 517 build tool (for creating distributions)

# -------------------------------------------------------------------------
# PLATFORM-SPECIFIC DEPENDENCIES
# -------------------------------------------------------------------------
# Only install on Windows systems (for colored terminal output)
#colorama = {version = "^0.4.6", markers = "sys_platform == 'win32'"}

# =============================================================================
# DOCUMENTATION-SPECIFIC DEPENDENCIES
# =============================================================================
# Separate dependency group for building documentation (allows selective installation)
[tool.poetry.group.docs.dependencies]
sphinx = "^7.1.0"                    # Documentation generator (main tool)
sphinx-rtd-theme = "^1.3.0"         # Professional-looking theme
sphinx-autodoc-typehints = "^1.24.0" # Automatically include type hints in docs
sphinx-autoapi = "^3.0.0"           # Automatically generates API documentation
myst-parser = "^2.0.0"              # Support for Markdown files in documentation

# =============================================================================
# ISORT IMPORT SORTER CONFIGURATION
# =============================================================================
# isort automatically organizes and sorts your import statements
[tool.isort]
profile = "black"                   # Use Black-compatible settings
multi_line_output = 3              # Vertical hanging indent style
line_length = 88                    # Match Black's line length
include_trailing_comma = true       # Add trailing commas (Black-compatible)
force_grid_wrap = 0                 # Don't force wrapping
use_parentheses = true              # Use parentheses for multi-line imports
ensure_newline_before_comments = true  # Clean comment spacing
known_first_party = ["quilt_knit"]  # Your project modules (sorted first)
known_third_party = []              # Third-party modules (auto-detected)

# =============================================================================
# MYPY STATIC TYPE CHECKER CONFIGURATION
# =============================================================================
# MyPy analyzes your code for type errors without running it
[tool.mypy]
python_version = "3.11"             # Update target Python version
warn_return_any = true              # Warn when function returns 'Any' type
warn_unused_configs = true          # Warn about unused MyPy configuration options
disallow_untyped_defs = true        # Require type annotations on all functions
disallow_incomplete_defs = true     # Require complete type annotations
check_untyped_defs = true           # Type-check functions even without annotations
disallow_untyped_decorators = true  # Require type annotations on decorators
no_implicit_optional = true         # Don't automatically make arguments Optional
warn_redundant_casts = true         # Warn about unnecessary type casts
warn_unused_ignores = true          # Warn about unused # type: ignore comments
warn_no_return = false              # Don't warn about functions that don't return
warn_unreachable = true             # Warn about unreachable code
strict_equality = true              # Use strict equality checks
show_error_codes = true             # Show error codes (helpful for targeted ignoring)
ignore_missing_imports = true       # Ignore untyped third-party library imports

# Enhanced settings for better compatibility
allow_redefinition = true           # Allow variables to be redefined with different types
allow_untyped_globals = true        # Allow untyped global variables
allow_subclassing_any = true        # Allow subclassing from Any types
implicit_reexport = true            # Allow implicit re-exports from modules

# Disable specific error codes that can be problematic in template projects
disable_error_code = [
    "attr-defined",                 # Don't error on potentially undefined attributes
    "no-redef",                     # Don't error on redefined attributes/methods
    "misc",                         # Disable miscellaneous errors (includes subclassing Any)
    "type-arg",                     # Disable generic type argument errors
    "valid-type",                   # Disable "not a valid type" errors
    "override",                     # Disable method override signature mismatches
]

# Less strict settings for test files (unittest.TestCase methods)
[[tool.mypy.overrides]]
module = [
    "tests.*",                      # Apply to all test files
    "tests",                        # Apply to tests module
]
disallow_untyped_defs = false       # Allow untyped test methods in unittest.TestCase
disallow_incomplete_defs = false    # Allow incomplete type annotations in tests
check_untyped_defs = false          # Don't type-check untyped test methods
warn_return_any = false             # Don't warn about returning 'Any' in tests
warn_unused_ignores = false         # Don't warn about unused type ignores in tests

# Add overrides for specific third-party libraries that may have type issues
# Example:
# [[tool.mypy.overrides]]
# module = ["problematic_library.*"]
# ignore_errors = true

# =============================================================================
# COVERAGE.PY CONFIGURATION
# =============================================================================
# Configuration for measuring code coverage

# Coverage measurement settings
[tool.coverage.run]
source = ["src/quilt_knit"]
omit = [                           # Files to exclude from coverage measurement
    "*/tests/*",                    # Don't measure coverage of test files
    "*/test_*",                     # Don't measure coverage of test files
    "*/__pycache__/*",              # Ignore Python cache files
    "*/site-packages/*",            # Ignore installed packages
    "*/venv/*",                     # Ignore virtual environment
]
branch = true                       # Enable branch coverage (more comprehensive)

# Coverage reporting settings
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",             # Explicit exclusion comment
    "def __repr__",                 # String representation methods
    "if self.debug:",               # Debug-only code
    "if settings.DEBUG",            # Framework debug code
    "raise AssertionError",         # Should never be reached
    "raise NotImplementedError",    # Abstract method placeholders
    "if 0:",                        # Never-executed debug code
    "if __name__ == .__main__.:",   # Script entry points
    "class .*\\bProtocol\\):",      # Protocol classes (typing)
    "@(abc\\.)?abstractmethod",     # Abstract methods
]
fail_under = 0                     # Set minimum coverage percentage (fail if coverage below this)
show_missing = true                 # Show which lines are missing coverage
skip_covered = false                # Show covered files in report
skip_empty = true                   # Skip empty files in report

# =============================================================================
# WHEEL BUILDING CONFIGURATION
# =============================================================================
# Configuration for building wheel distributions
[tool.wheel]
universal = false                   # Set to true only if your package supports both Python 2 and 3
