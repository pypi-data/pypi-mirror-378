# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import os
import pathlib
import typing

class PyADBServer:
    r"""
    Represent an instance of an ADB Server
    """
    def __new__(cls,address:builtins.str): ...
    def devices(self) -> builtins.list[PyDeviceShort]:
        r"""
        List available devices
        """
        ...

    def get_device(self) -> PyADBServerDevice:
        r"""
        Get a device, assuming that only one is currently connected
        """
        ...

    def get_device_by_name(self, name:builtins.str) -> PyADBServerDevice:
        r"""
        Get a device by its name, as shown in `.devices()` output
        """
        ...


class PyADBServerDevice:
    r"""
    Represent a device connected to the ADB server
    """
    identifier: typing.Optional[builtins.str]
    def shell_command(self, commands:typing.Sequence[builtins.str]) -> builtins.list[builtins.int]:
        r"""
        Run shell commands on device and return the output (stdout + stderr merged)
        """
        ...

    def push(self, input:builtins.str | os.PathLike | pathlib.Path, dest:builtins.str | os.PathLike | pathlib.Path) -> None:
        r"""
        Push a local file from input to dest
        """
        ...

    def pull(self, input:builtins.str | os.PathLike | pathlib.Path, dest:builtins.str | os.PathLike | pathlib.Path) -> None:
        r"""
        Pull a file from device located at input, and drop it to dest
        """
        ...

    def install(self, apk_path:builtins.str | os.PathLike | pathlib.Path) -> None:
        r"""
        Install a package installed on the device
        """
        ...

    def uninstall(self, package:builtins.str) -> None:
        r"""
        Uninstall a package installed on the device
        """
        ...


class PyADBUSBDevice:
    r"""
    Represent a device directly reachable over USB.
    """
    @staticmethod
    def autodetect() -> PyADBUSBDevice:
        r"""
        Autodetect a device reachable over USB.
        This method raises an error if multiple devices or none are connected.
        """
        ...

    def shell_command(self, commands:typing.Sequence[builtins.str]) -> builtins.list[builtins.int]:
        r"""
        Run shell commands on device and return the output (stdout + stderr merged)
        """
        ...

    def push(self, input:builtins.str | os.PathLike | pathlib.Path, dest:builtins.str | os.PathLike | pathlib.Path) -> None:
        r"""
        Push a local file from input to dest
        """
        ...

    def pull(self, input:builtins.str | os.PathLike | pathlib.Path, dest:builtins.str | os.PathLike | pathlib.Path) -> None:
        r"""
        Pull a file from device located at input, and drop it to dest
        """
        ...

    def install(self, apk_path:builtins.str | os.PathLike | pathlib.Path) -> None:
        r"""
        Install a package installed on the device
        """
        ...

    def uninstall(self, package:builtins.str) -> None:
        r"""
        Uninstall a package installed on the device
        """
        ...


class PyDeviceShort:
    r"""
    Represent a device output as shown when running `adb devices`
    """
    identifier: builtins.str
    state: builtins.str

