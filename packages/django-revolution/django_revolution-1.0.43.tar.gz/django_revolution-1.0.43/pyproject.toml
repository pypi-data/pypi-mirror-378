[build-system]
requires = ["setuptools>=61.0", "wheel", "toml"]
build-backend = "setuptools.build_meta"

[project]
name = "django-revolution"
version = "1.0.43"
description = "Zone-based API architecture for Django. Install and go."
readme = "README.md"
requires-python = ">=3.12,<4.0"
license = "MIT"
authors = [
    {name = "ReformsAI", email = "developers@reforms.ai"},
]
maintainers = [
    {name = "ReformsAI", email = "developers@reforms.ai"},
]
keywords = ["django", "api", "openapi", "rest", "zones", "typescript", "python", "client", "generation"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Django",
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4.0",
    "Framework :: Django :: 4.1",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "Django>=3.2",
    "djangorestframework>=3.12.0",
    "drf-spectacular>=0.24.0",
    "Jinja2>=3.0.0",
    "PyYAML>=6.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "questionary>=2.0.0",
    "prompt-toolkit>=3.0.0,<3.0.50",  # Fix compatibility with questionary
    "click>=8.0.0",
    "rich>=13.0.0",
    "openapi-python-generator>=1.2.0",
    "django-filter>=22.0.0",
    "djangorestframework-simplejwt>=5.0.0",
    "toml (>=0.10.2,<0.11.0)",
    "openapi-python-client (>=0.26.1,<0.27.0)",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-django>=4.0",
    "black>=21.0",
    "flake8>=3.9",
    "mypy>=0.800",
    "build>=1.0.0",
    "twine>=4.0.0",
    "questionary>=2.0.0",
    "toml>=0.10.0",
]

# Formatting dependencies for generated clients
formatting = [
    "black>=21.0",  # Python code formatting
    # Note: Prettier is installed via npm (see package.json)
]

[project.urls]
"Homepage" = "https://djangocfg.com"
"Repository" = "https://djangocfg.com"
"Documentation" = "https://djangocfg.com"

[project.scripts]
django-revolution = "django_revolution.cli:main"
generate-requirements = "scripts.generate_requirements:generate_requirements_files"
version-manager = "scripts.version_manager:main"
publisher = "scripts.publisher:main"
dev-cli = "scripts.dev_cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["django_revolution*"]
exclude = [
    "tests*",
    "@*",
    "scripts*",
    "docs*",
    "*.tests",
    "*.tests.*",
    "tests.*",
]

[tool.setuptools.package-data]
django_revolution = ["openapi/templates/*.j2", "openapi/templates/**/*.j2", "**/*.j2"]

[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | openapi
  | generated
)/
'''

[tool.mypy]
python_version = "1.0.43"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true

[tool.poetry.group.dev.dependencies]
build = "^1.2.2.post1"
twine = "^6.1.0"

