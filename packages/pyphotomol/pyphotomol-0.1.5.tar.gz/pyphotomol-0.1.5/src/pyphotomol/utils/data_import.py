"""
Data import utilities for mass photometry analysis.

This module provides functions to import data from various file formats commonly
used in mass photometry experiments, including HDF5 files from Refeyn instruments
and CSV files with custom data formats.

Functions
---------
import_file_h5 : Import data from Refeyn HDF5 files
import_csv : Import data from CSV files
import_movie_h5 : Import movie data from HDF5 files

The import functions automatically handle different data structures and perform
basic preprocessing like NaN removal and calibration conversions.
"""

import numpy  as np
import pandas as pd
import h5py

__all__ = ['import_file_h5', 'import_csv']

from ..utils.helpers import contrasts_to_mass

def verify_masses(masses):
    """
    Convert masses to None, if all values are NaN.
    """
    if masses is not None:
        if np.all(np.isnan(masses)):
            masses = None

    return masses

def import_file_h5(filename):
    """
    Import mass photometry data from HDF5 files generated by Refeyn instruments.
    
    This function reads contrast and mass data from standard Refeyn HDF5 file formats.
    It automatically handles different data structures and performs calibration
    conversions when necessary. NaN values are filtered out automatically.
    
    Parameters
    ----------
    filename : str
        Path to the HDF5 file to import
        
    Returns
    -------
    contrasts : np.ndarray
        Array of contrast values with NaN values removed
    masses_kDa : np.ndarray or None
        Array of mass values in kDa units, or None if not available.
        If masses are not directly available but calibration data exists,
        they will be computed from contrasts using the calibration parameters.
        
    Notes
    -----
    The function searches for data in the following order:
    1. Direct 'contrasts' and 'masses_kDa' datasets
    2. 'calibrated_values' with calibration parameters
    3. 'per_movie_events' for movie-based data
    
    Raises
    ------
    FileNotFoundError
        If the specified file does not exist
    KeyError
        If required datasets are not found in the HDF5 file
    ValueError
        If the file format is not recognized or data is corrupted
        
    Examples
    --------
    Import standard Refeyn data:
    
    >>> contrasts, masses = import_file_h5('experiment.h5')
    >>> print(f"Loaded {len(contrasts)} events")
    >>> if masses is not None:
    ...     print(f"Mass range: {masses.min():.1f} - {masses.max():.1f} kDa")
    """

    data = h5py.File(filename, 'r')

    data_keys = data.keys()

    masses_kDa = None

    # Check if contrasts are present and load them
    if 'contrasts' in data_keys:
        contrasts = np.array(data['contrasts'][:]).squeeze()
        contrasts = contrasts[~np.isnan(contrasts)]

    # Check if masses_kDa are present and load them
    if 'masses_kDa' in data_keys:
        masses_kDa = np.array(data['masses_kDa'][:]).squeeze()

    # If the masses_kDa are not present, search for calibration values and compute them from contrasts
    else:
        if 'calibrated_values' in data_keys:
            gradient = np.array(data['calibration']['gradient'])
            offset = np.array(data['calibration']['offset'])
            masses_kDa = contrasts_to_mass(contrasts, gradient, offset)

    # If the masses_kDa are still None, check per_movie_events for contrasts and calibration data
    if masses_kDa is None and 'per_movie_events' in data_keys:
        all_masses = []
        all_contrasts = []

        for movie in data['per_movie_events'].keys():
            try:
                py_obj = data['per_movie_events'][movie]
                contrasts = np.array(py_obj['contrasts'])
                gradient = np.array(py_obj['calibration']['gradient'])
                offset = np.array(py_obj['calibration']['offset'])
                masses = contrasts_to_mass(contrasts, gradient, offset)
                all_masses.append(masses)
                all_contrasts.append(contrasts)
            except (KeyError, ValueError, TypeError):
                pass
        
        masses_kDa = np.concatenate([arr for arr in all_masses])
        contrasts  = np.concatenate([arr for arr in all_contrasts])

    masses_kDa = verify_masses(masses_kDa)

    return contrasts, masses_kDa

def import_csv(filename):
    """
    Import data from a CSV file generated by a Refeyn instrument.
    
    The CSV file should contain columns 'contrasts' and optionally 'masses_kDa'.
    NaN values are automatically filtered out from the imported data.
    
    Parameters
    ----------
    filename : str
        Path to the CSV file to import
        
    Returns
    -------
    contrasts : np.ndarray
        Array of contrast values with NaN values removed
    masses_kDa : np.ndarray or None
        Array of mass values in kDa, or None if not available in the CSV file
        
    Raises
    ------
    FileNotFoundError
        If the specified file does not exist
    KeyError
        If the required 'contrasts' column is not found in the CSV file
    ValueError
        If the file format is not recognized or data is corrupted
        
    Examples
    --------
    Import CSV data with contrasts only:
    
    >>> contrasts, masses = import_csv('contrasts_only.csv')
    >>> print(f"Loaded {len(contrasts)} contrast measurements")
    >>> print(f"Masses available: {masses is not None}")
    
    Import CSV data with both contrasts and masses:
    
    >>> contrasts, masses = import_csv('full_data.csv')
    >>> if masses is not None:
    ...     print(f"Mass range: {masses.min():.1f} - {masses.max():.1f} kDa")
    """

    data = pd.read_csv(filename)
    
    # Try to access the 'contrasts' column
    if 'contrasts' not in data.columns:
        contrasts = None
    else:
        contrasts  = np.array(data['contrasts']).squeeze()
        contrasts  = contrasts[~np.isnan(contrasts)]

    # Check if masses_kDa or calibrated_values are present and load them
    if 'masses_kDa' in data.columns:

        masses_kDa   = np.array(data['masses_kDa']).squeeze()

    elif 'calibrated_values' in data.columns:

        masses_kDa   = np.array(data['calibrated_values']).squeeze()

    else:

        masses_kDa = None

    masses_kDa = verify_masses(masses_kDa)

    # If no contrasts and no masses_kDa are found, raise an error
    if contrasts is None and masses_kDa is None:
        raise ValueError("No valid data found in the CSV file. Ensure 'contrasts' or 'masses_kDa' columns are present.")

    return contrasts, masses_kDa