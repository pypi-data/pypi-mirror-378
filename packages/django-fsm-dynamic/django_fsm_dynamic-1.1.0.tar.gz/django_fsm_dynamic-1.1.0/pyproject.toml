[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "django-fsm-dynamic"
dynamic = ["version", "readme"]
description = "Dynamic workflow extensions for django-fsm-2"
authors = [
    {name = "LevIT", email = "info@levit.be"},
]
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["django", "fsm", "workflow", "state-machine", "dynamic"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Django",
    "Framework :: Django :: 5.0", 
    "Framework :: Django :: 5.1",
    "Framework :: Django :: 5.2",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "django>=5.0",
    "django-fsm-2>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "build>=1.2.2.post1",
    "coverage",
    "nox",
    "ruff",
    "setuptools>=75.3.2",
    "twine>=6.1.0",
]

[project.urls]
Homepage = "https://gitlab.levitnet.be/levit/django-fsm-dynamic"
Repository = "https://gitlab.levitnet.be/levit/django-fsm-dynamic.git"

[tool.setuptools.dynamic]
version = {attr = "django_fsm_dynamic.__version__.__version__"}
readme = {file = "README.md", content-type = "text/markdown"}

[tool.setuptools.packages.find]
include = ["django_fsm_dynamic*"]


[tool.ruff]
line-length = 120
target-version = "py38"
fix = true

[tool.ruff.lint]
select = ["ALL"]
extend-ignore = [
    "COM812",  # This rule may cause conflicts when used with the formatter
    "D",  # pydocstyle
    "DOC",  # pydoclint
    "B",
    "PTH",
    "ANN",  # Missing type annotation
    "S101",  # Use of `assert` detected
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
    "ARG001",  # Unused function argument
    "ARG002",  # Unused method argument
    "TRY002",  # Create your own exception
    "TRY003",  # Avoid specifying long messages outside the exception class
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "SLF001",  # Private member accessed
    "SIM103",  # Return the condition directly
    "PLR0913",  # Too many arguments in function definition
    # Additional rules based on flake8 configuration preferences
    "PIE790",  # Unnecessary pass/ellipsis in abstract methods
]
fixable = [
    "I",  # isort
    "RUF100",  # Unused `noqa` directive
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/*" = [
    "DJ008",  # Model does not define `__str__` method
    "PT009",  # Use a regular `assert` instead of unittest-style assertions
    "PT027",  # Use `pytest.raises` instead of unittest-style `assertRaises`
    "S105",   # Possible hardcoded password (test settings)
]
"examples/*" = [
    "S105",   # Possible hardcoded password (example settings)
]

[tool.ruff.lint.isort]
force-single-line = true
required-imports = ["from __future__ import annotations"]
