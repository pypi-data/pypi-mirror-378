name: Build extensions
on:
  workflow_dispatch:
  pull_request:
    paths:
      - "src/utils/**"

permissions:
  contents: write          # needed to push the branch with updated descriptor
  pull-requests: write     # needed to call the pulls REST API (create PR)
  id-token: write        # pypi publishing

concurrency:
  group: descriptor-update
  cancel-in-progress: true

jobs:
  build-extensions:
    runs-on: ubuntu-latest
    outputs:
      has-wheels: ${{ steps.build-extensions.outputs.has-wheels }}
      pr-number: ${{ steps.create-pr.outputs.pull-request-number }}
      descriptor-branch: chore/update-descriptor-${{ github.run_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: Install venv
        run: |
          uv venv -p python3.13
          uv pip install -e .[duckdb-ext-dev]
      - name: Run extension generation script
        id: build-extensions
        run: |
          source .venv/bin/activate
          echo "has-wheels=false" >> "$GITHUB_OUTPUT"
          python -m utils.build_extensions
          if ls dist/*.whl 1> /dev/null 2>&1; then
            echo "has-wheels=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Summarise build result
        run: |
          echo "Built wheels:"
          ls -lh dist/*.whl || echo "No wheels built"
          echo "Descriptor file:"
          git diff descriptor.yml || echo "No changes to descriptor.yml"
      - uses: actions/upload-artifact@v4
        if: steps.build-extensions.outputs.has-wheels == 'true'
        with:
          name: dist
          path: dist
      - name: Create PR for updated descriptor
        if: steps.build-extensions.outputs.has-wheels == 'true' && github.ref == 'refs/heads/main'
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: "chore: update descriptor.yml"
          title: "chore: update descriptor.yml"
          body: |
            Automated update of descriptor.yml produced by the build-extensions workflow.
            This PR was created because new wheels were built.
          branch: chore/update-descriptor-${{ github.run_id }}
          add-paths: |
            descriptor.yml
          labels: automated,descriptor
          signoff: false
          delete-branch: true
  publish-to-test-pypi:
    runs-on: ubuntu-latest
    needs: build-extensions
    environment: testpypi
    if: needs.build-extensions.outputs.has-wheels == 'true' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: Publish to PyPI
        run: uv publish --index testpypi
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TEST_API_TOKEN }}
  publish-to-pypi:
    runs-on: ubuntu-latest
    needs: build-extensions
    environment: pypi
    if: needs.build-extensions.outputs.has-wheels == 'true' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: Publish to PyPI
        run: uv publish
        # env:
        #   UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  merge-descriptor-pr:
    name: Merge descriptor update PR
    runs-on: ubuntu-latest
    needs: [publish-to-pypi, build-extensions]
    if: needs.build-extensions.outputs.pr-number != '' && needs.publish-to-pypi.result == 'success'
    steps:
      - name: Merge PR
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ needs.build-extensions.outputs.pr-number }}
          BRANCH_NAME: ${{ needs.build-extensions.outputs.descriptor-branch }}
        with:
          script: |
            const prNumber = parseInt(process.env.PR_NUMBER, 10);
            if (!prNumber) {
              core.info('No PR number found; skipping merge.');
              return;
            }
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash'
              });
              core.info(`PR #${prNumber} merged successfully.`);
            } catch (err) {
              core.setFailed(`Failed to merge PR #${prNumber}: ${err.message}`);
            }
