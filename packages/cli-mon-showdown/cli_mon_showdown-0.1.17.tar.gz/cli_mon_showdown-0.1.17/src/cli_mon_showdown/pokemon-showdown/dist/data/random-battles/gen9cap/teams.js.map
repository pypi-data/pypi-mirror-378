{
  "version": 3,
  "sources": ["../../../../data/random-battles/gen9cap/teams.ts"],
  "sourcesContent": ["import { RandomTeams, type MoveCounter } from \"../gen9/teams\";\n\n/** Pokemon who should never be in the lead slot */\nconst NO_LEAD_POKEMON = [\n\t'Zacian', 'Zamazenta',\n];\n\nexport class RandomCAPTeams extends RandomTeams {\n\tgetCAPAbility(\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tabilities: string[],\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tteraType: string,\n\t\trole: RandomTeamsTypes.Role,\n\t): string {\n\t\t// Hard-code abilities here\n\t\tif (species.id === 'fidgit') return moves.has('tailwind') ? 'Persistent' : 'Frisk';\n\t\tif (species.id === 'tomohawk') return moves.has('haze') ? 'Prankster' : 'Intimidate';\n\t\t// Default to regular ability selection\n\t\treturn this.getAbility(types, moves, abilities, counter, teamDetails, species, isLead, false, teraType, role);\n\t}\n\n\tgetCAPPriorityItem(\n\t\tability: string,\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tteraType: string,\n\t\trole: RandomTeamsTypes.Role,\n\t) {\n\t\tif (ability === 'Mountaineer') return 'Life Orb';\n\t}\n\n\toverride getLevel(\n\t\tspecies: Species,\n\t\tisDoubles: boolean,\n\t): number {\n\t\tif (this.adjustLevel) return this.adjustLevel;\n\t\treturn (species.num > 0 ? this.randomSets[species.id][\"level\"] : this.randomCAPSets[species.id][\"level\"]) || 80;\n\t}\n\n\trandomCAPSet(\n\t\ts: string | Species,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails = {},\n\t\tisLead = false,\n\t\tisDoubles = false\n\t): RandomTeamsTypes.RandomSet {\n\t\tconst species = this.dex.species.get(s);\n\t\t// Generate Non-CAP Pokemon using the regular randomSet() method\n\t\tif (species.num > 0) return this.randomSet(s, teamDetails, isLead, isDoubles);\n\t\tconst forme = this.getForme(species);\n\t\tconst sets = this.randomCAPSets[species.id][\"sets\"];\n\t\tconst possibleSets = [];\n\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\n\n\t\tfor (const set of sets) {\n\t\t\t// Prevent Fast Bulky Setup on lead Paradox Pokemon, since it generates Booster Energy.\n\t\t\tconst abilities = new Set(Object.values(species.abilities));\n\t\t\tif (isLead && (abilities.has('Protosynthesis') || abilities.has('Quark Drive')) && set.role === 'Fast Bulky Setup') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Prevent Tera Blast user if the team already has one, or if Terastallizion is prevented.\n\t\t\tif ((teamDetails.teraBlast || ruleTable.has('terastalclause')) && set.role === 'Tera Blast user') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tpossibleSets.push(set);\n\t\t}\n\t\tconst set = this.sampleIfArray(possibleSets);\n\t\tconst role = set.role;\n\t\tconst movePool: string[] = [];\n\t\tfor (const movename of set.movepool) {\n\t\t\tmovePool.push(this.dex.moves.get(movename).id);\n\t\t}\n\t\tconst teraTypes = set.teraTypes;\n\t\tlet teraType = this.sampleIfArray(teraTypes);\n\n\t\tlet ability = '';\n\t\tlet item = undefined;\n\n\t\tconst evs = { hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85 };\n\t\tconst ivs = { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31 };\n\n\t\tconst types = species.types;\n\t\tconst abilities = set.abilities!;\n\n\t\t// Get moves\n\t\tconst moves = this.randomMoveset(types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType!, role);\n\t\tconst counter = this.queryMoves(moves, species, teraType!, abilities);\n\n\t\t// Get ability\n\t\tability = this.getCAPAbility(types, moves, abilities, counter, teamDetails, species, isLead, teraType!, role);\n\n\t\t// Get items\n\t\t// First, the priority items\n\t\titem = this.getCAPPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, teraType!, role);\n\t\tif (item === undefined) {\n\t\t\titem = this.getPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, isDoubles, teraType!, role);\n\t\t}\n\t\tif (item === undefined) {\n\t\t\titem = this.getItem(ability, types, moves, counter, teamDetails, species, isLead, teraType!, role);\n\t\t}\n\n\t\t// Get level\n\t\tconst level = this.getLevel(species, isDoubles);\n\n\t\t// Prepare optimal HP\n\t\tconst srImmunity = ability === 'Magic Guard' || item === 'Heavy-Duty Boots';\n\t\tlet srWeakness = srImmunity ? 0 : this.dex.getEffectiveness('Rock', species);\n\t\t// Crash damage move users want an odd HP to survive two misses\n\t\tif (['axekick', 'highjumpkick', 'jumpkick'].some(m => moves.has(m))) srWeakness = 2;\n\t\twhile (evs.hp > 1) {\n\t\t\tconst hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\n\t\t\tif ((moves.has('substitute') && ['Sitrus Berry', 'Salac Berry'].includes(item))) {\n\t\t\t\t// Two Substitutes should activate Sitrus Berry\n\t\t\t\tif (hp % 4 === 0) break;\n\t\t\t} else if ((moves.has('bellydrum') || moves.has('filletaway')) && (item === 'Sitrus Berry' || ability === 'Gluttony')) {\n\t\t\t\t// Belly Drum should activate Sitrus Berry\n\t\t\t\tif (hp % 2 === 0) break;\n\t\t\t} else if (moves.has('substitute') && moves.has('endeavor')) {\n\t\t\t\t// Luvdisc should be able to Substitute down to very low HP\n\t\t\t\tif (hp % 4 > 0) break;\n\t\t\t} else {\n\t\t\t\t// Maximize number of Stealth Rock switch-ins\n\t\t\t\tif (srWeakness <= 0 || ability === 'Regenerator' || ['Leftovers', 'Life Orb'].includes(item)) break;\n\t\t\t\tif (item !== 'Sitrus Berry' && hp % (4 / srWeakness) > 0) break;\n\t\t\t\t// Minimise number of Stealth Rock switch-ins to activate Sitrus Berry\n\t\t\t\tif (item === 'Sitrus Berry' && hp % (4 / srWeakness) === 0) break;\n\t\t\t}\n\t\t\tevs.hp -= 4;\n\t\t}\n\n\t\t// Minimize confusion damage\n\t\tconst noAttackStatMoves = [...moves].every(m => {\n\t\t\tconst move = this.dex.moves.get(m);\n\t\t\tif (move.damageCallback || move.damage) return true;\n\t\t\tif (move.id === 'shellsidearm') return false;\n\t\t\t// Magearna and doubles Dragonite, though these can work well as a general rule\n\t\t\tif (move.id === 'terablast' && (\n\t\t\t\tspecies.id === 'porygon2' || moves.has('shiftgear') || species.baseStats.atk > species.baseStats.spa)\n\t\t\t) return false;\n\t\t\treturn move.category !== 'Physical' || move.id === 'bodypress' || move.id === 'foulplay';\n\t\t});\n\t\tif (noAttackStatMoves && !moves.has('transform') && this.format.mod !== 'partnersincrime') {\n\t\t\tevs.atk = 0;\n\t\t\tivs.atk = 0;\n\t\t}\n\n\t\tif (moves.has('gyroball') || moves.has('trickroom')) {\n\t\t\tevs.spe = 0;\n\t\t\tivs.spe = 0;\n\t\t}\n\n\t\t// Enforce Tera Type after all set generation is done to prevent infinite generation\n\t\tif (this.forceTeraType) teraType = this.forceTeraType;\n\n\t\t// shuffle moves to add more randomness to camomons\n\t\tconst shuffledMoves = Array.from(moves);\n\t\tthis.prng.shuffle(shuffledMoves);\n\t\treturn {\n\t\t\tname: species.baseSpecies,\n\t\t\tspecies: forme,\n\t\t\tgender: species.baseSpecies === 'Greninja' ? 'M' : species.gender,\n\t\t\tshiny: this.randomChance(1, 1024),\n\t\t\tlevel,\n\t\t\tmoves: shuffledMoves,\n\t\t\tability,\n\t\t\tevs,\n\t\t\tivs,\n\t\t\titem,\n\t\t\tteraType,\n\t\t\trole,\n\t\t};\n\t}\n\n\trandomCAPSets: { [species: string]: RandomTeamsTypes.RandomSpeciesData } = require('./sets.json');\n\n\toverride randomTeam() {\n\t\tthis.enforceNoDirectCustomBanlistChanges();\n\n\t\tconst seed = this.prng.getSeed();\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\n\n\t\t// For Monotype\n\t\tconst isMonotype = !!this.forceMonotype || ruleTable.has('sametypeclause');\n\t\tconst isDoubles = false;\n\t\tconst typePool = this.dex.types.names().filter(name => name !== \"Stellar\");\n\t\tconst type = this.forceMonotype || this.sample(typePool);\n\n\t\tconst baseFormes: { [k: string]: number } = {};\n\n\t\tconst typeCount: { [k: string]: number } = {};\n\t\tconst typeComboCount: { [k: string]: number } = {};\n\t\tconst typeWeaknesses: { [k: string]: number } = {};\n\t\tconst typeDoubleWeaknesses: { [k: string]: number } = {};\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\n\t\tlet numMaxLevelPokemon = 0;\n\n\t\tconst pokemonList = Object.keys(this.randomSets);\n\t\tconst capPokemonList = Object.keys(this.randomCAPSets);\n\n\t\tconst [pokemonPool, baseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, pokemonList);\n\t\tconst [capPokemonPool, capBaseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, capPokemonList);\n\n\t\tlet leadsRemaining = 1;\n\t\twhile (baseSpeciesPool.length && pokemon.length < this.maxTeamSize) {\n\t\t\tlet baseSpecies, species;\n\t\t\t// Always generate a CAP Pokemon in slot 2; other slots can randomly generate CAP Pokemon.\n\t\t\tif ((pokemon.length === 1 || this.randomChance(1, 5)) && capBaseSpeciesPool.length) {\n\t\t\t\tbaseSpecies = this.sampleNoReplace(capBaseSpeciesPool);\n\t\t\t\tspecies = this.dex.species.get(this.sample(capPokemonPool[baseSpecies]));\n\t\t\t} else {\n\t\t\t\tbaseSpecies = this.sampleNoReplace(baseSpeciesPool);\n\t\t\t\tspecies = this.dex.species.get(this.sample(pokemonPool[baseSpecies]));\n\t\t\t}\n\t\t\tif (!species.exists) continue;\n\n\t\t\t// Limit to one of each species (Species Clause)\n\t\t\tif (baseFormes[species.baseSpecies]) continue;\n\n\t\t\t// Treat Ogerpon formes and Terapagos like the Tera Blast user role; reject if team has one already\n\t\t\tif ((species.baseSpecies === 'Ogerpon' || species.baseSpecies === 'Terapagos') && teamDetails.teraBlast) continue;\n\n\t\t\t// Illusion shouldn't be on the last slot\n\t\t\tif (species.baseSpecies === 'Zoroark' && pokemon.length >= (this.maxTeamSize - 1)) continue;\n\n\t\t\tconst types = species.types;\n\t\t\tconst typeCombo = types.slice().sort().join();\n\t\t\tconst weakToFreezeDry = (\n\t\t\t\tthis.dex.getEffectiveness('Ice', species) > 0 ||\n\t\t\t\t(this.dex.getEffectiveness('Ice', species) > -2 && types.includes('Water'))\n\t\t\t);\n\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\n\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\n\n\t\t\tif (!isMonotype && !this.forceMonotype) {\n\t\t\t\tlet skip = false;\n\n\t\t\t\t// Limit two of any type\n\t\t\t\tfor (const typeName of types) {\n\t\t\t\t\tif (typeCount[typeName] >= 2 * limitFactor) {\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (skip) continue;\n\n\t\t\t\t// Limit three weak to any type, and one double weak to any type\n\t\t\t\tfor (const typeName of this.dex.types.names()) {\n\t\t\t\t\t// it's weak to the type\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\n\t\t\t\t\t\tif (!typeWeaknesses[typeName]) typeWeaknesses[typeName] = 0;\n\t\t\t\t\t\tif (typeWeaknesses[typeName] >= 3 * limitFactor) {\n\t\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 1) {\n\t\t\t\t\t\tif (!typeDoubleWeaknesses[typeName]) typeDoubleWeaknesses[typeName] = 0;\n\t\t\t\t\t\tif (typeDoubleWeaknesses[typeName] >= limitFactor) {\n\t\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (skip) continue;\n\n\t\t\t\t// Count Dry Skin/Fluffy as Fire weaknesses\n\t\t\t\tif (\n\t\t\t\t\tthis.dex.getEffectiveness('Fire', species) === 0 &&\n\t\t\t\t\tObject.values(species.abilities).filter(a => ['Dry Skin', 'Fluffy'].includes(a)).length\n\t\t\t\t) {\n\t\t\t\t\tif (!typeWeaknesses['Fire']) typeWeaknesses['Fire'] = 0;\n\t\t\t\t\tif (typeWeaknesses['Fire'] >= 3 * limitFactor) continue;\n\t\t\t\t}\n\n\t\t\t\t// Limit four weak to Freeze-Dry\n\t\t\t\tif (weakToFreezeDry) {\n\t\t\t\t\tif (!typeWeaknesses['Freeze-Dry']) typeWeaknesses['Freeze-Dry'] = 0;\n\t\t\t\t\tif (typeWeaknesses['Freeze-Dry'] >= 4 * limitFactor) continue;\n\t\t\t\t}\n\n\t\t\t\t// Limit one level 100 Pokemon\n\t\t\t\tif (!this.adjustLevel && (this.getLevel(species, isDoubles) === 100) && numMaxLevelPokemon >= limitFactor) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Limit three of any type combination in Monotype\n\t\t\tif (!this.forceMonotype && isMonotype && (typeComboCount[typeCombo] >= 3 * limitFactor)) continue;\n\n\t\t\tlet set: RandomTeamsTypes.RandomSet;\n\n\t\t\tif (leadsRemaining) {\n\t\t\t\tif (NO_LEAD_POKEMON.includes(species.baseSpecies)) {\n\t\t\t\t\tif (pokemon.length + leadsRemaining === this.maxTeamSize) continue;\n\t\t\t\t\tset = this.randomCAPSet(species, teamDetails, false, isDoubles);\n\t\t\t\t\tpokemon.push(set);\n\t\t\t\t} else {\n\t\t\t\t\tset = this.randomCAPSet(species, teamDetails, true, isDoubles);\n\t\t\t\t\tpokemon.unshift(set);\n\t\t\t\t\tleadsRemaining--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tset = this.randomCAPSet(species, teamDetails, false, isDoubles);\n\t\t\t\tpokemon.push(set);\n\t\t\t}\n\n\t\t\t// Don't bother tracking details for the last Pokemon\n\t\t\tif (pokemon.length === this.maxTeamSize) break;\n\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\n\t\t\tbaseFormes[species.baseSpecies] = 1;\n\n\t\t\t// Increment type counters\n\t\t\tfor (const typeName of types) {\n\t\t\t\tif (typeName in typeCount) {\n\t\t\t\t\ttypeCount[typeName]++;\n\t\t\t\t} else {\n\t\t\t\t\ttypeCount[typeName] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeCombo in typeComboCount) {\n\t\t\t\ttypeComboCount[typeCombo]++;\n\t\t\t} else {\n\t\t\t\ttypeComboCount[typeCombo] = 1;\n\t\t\t}\n\n\t\t\t// Increment weakness counter\n\t\t\tfor (const typeName of this.dex.types.names()) {\n\t\t\t\t// it's weak to the type\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\n\t\t\t\t\ttypeWeaknesses[typeName]++;\n\t\t\t\t}\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 1) {\n\t\t\t\t\ttypeDoubleWeaknesses[typeName]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Count Dry Skin/Fluffy as Fire weaknesses\n\t\t\tif (['Dry Skin', 'Fluffy'].includes(set.ability) && this.dex.getEffectiveness('Fire', species) === 0) {\n\t\t\t\ttypeWeaknesses['Fire']++;\n\t\t\t}\n\t\t\tif (weakToFreezeDry) typeWeaknesses['Freeze-Dry']++;\n\n\t\t\t// Increment level 100 counter\n\t\t\tif (set.level === 100) numMaxLevelPokemon++;\n\n\t\t\t// Track what the team has\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails.rain = 1;\n\t\t\tif (set.ability === 'Drought' || set.ability === 'Orichalcum Pulse' || set.moves.includes('sunnyday')) {\n\t\t\t\tteamDetails.sun = 1;\n\t\t\t}\n\t\t\tif (set.ability === 'Sand Stream') teamDetails.sand = 1;\n\t\t\tif (set.ability === 'Snow Warning' || set.moves.includes('snowscape') || set.moves.includes('chillyreception')) {\n\t\t\t\tteamDetails.snow = 1;\n\t\t\t}\n\t\t\tif (set.moves.includes('healbell')) teamDetails.statusCure = 1;\n\t\t\tif (set.moves.includes('spikes') || set.moves.includes('ceaselessedge')) {\n\t\t\t\tteamDetails.spikes = (teamDetails.spikes || 0) + 1;\n\t\t\t}\n\t\t\tif (set.moves.includes('toxicspikes') || set.ability === 'Toxic Debris') teamDetails.toxicSpikes = 1;\n\t\t\tif (set.moves.includes('stealthrock') || set.moves.includes('stoneaxe')) teamDetails.stealthRock = 1;\n\t\t\tif (set.moves.includes('stickyweb')) teamDetails.stickyWeb = 1;\n\t\t\tif (set.moves.includes('defog')) teamDetails.defog = 1;\n\t\t\tif (set.moves.includes('rapidspin') || set.moves.includes('mortalspin')) teamDetails.rapidSpin = 1;\n\t\t\tif (set.moves.includes('auroraveil') || (set.moves.includes('reflect') && set.moves.includes('lightscreen'))) {\n\t\t\t\tteamDetails.screens = 1;\n\t\t\t}\n\t\t\tif (set.role === 'Tera Blast user' || species.baseSpecies === \"Ogerpon\" || species.baseSpecies === \"Terapagos\") {\n\t\t\t\tteamDetails.teraBlast = 1;\n\t\t\t}\n\t\t}\n\t\tif (pokemon.length < this.maxTeamSize && pokemon.length < 12) { // large teams sometimes cannot be built\n\t\t\tthrow new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\n\t\t}\n\n\t\treturn pokemon;\n\t}\n}\n\nexport default RandomCAPTeams;\n"],
  "mappings": "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",
  "names": ["set", "abilities"]
}
