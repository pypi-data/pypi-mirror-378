{
  "version": 3,
  "sources": ["../../../../data/mods/monkeyspaw/scripts.ts"],
  "sourcesContent": ["export const Scripts: ModdedBattleScriptsData = {\n\tendTurn() {\n\t\tthis.turn++;\n\t\tthis.lastSuccessfulMoveThisTurn = null;\n\n\t\tconst dynamaxEnding: Pokemon[] = [];\n\t\tfor (const pokemon of this.getAllActive()) {\n\t\t\tif (pokemon.volatiles['dynamax']?.turns === 3) {\n\t\t\t\tdynamaxEnding.push(pokemon);\n\t\t\t}\n\t\t}\n\t\tif (dynamaxEnding.length > 1) {\n\t\t\tthis.updateSpeed();\n\t\t\tthis.speedSort(dynamaxEnding);\n\t\t}\n\t\tfor (const pokemon of dynamaxEnding) {\n\t\t\tpokemon.removeVolatile('dynamax');\n\t\t}\n\n\t\t// Gen 1 partial trapping ends when either Pokemon or a switch in faints to residual damage\n\t\tif (this.gen === 1) {\n\t\t\tfor (const pokemon of this.getAllActive()) {\n\t\t\t\tif (pokemon.volatiles['partialtrappinglock']) {\n\t\t\t\t\tconst target = pokemon.volatiles['partialtrappinglock'].locked;\n\t\t\t\t\tif (target.hp <= 0 || !target.volatiles['partiallytrapped']) {\n\t\t\t\t\t\tdelete pokemon.volatiles['partialtrappinglock'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pokemon.volatiles['partiallytrapped']) {\n\t\t\t\t\tconst source = pokemon.volatiles['partiallytrapped'].source;\n\t\t\t\t\tif (source.hp <= 0 || !source.volatiles['partialtrappinglock']) {\n\t\t\t\t\t\tdelete pokemon.volatiles['partiallytrapped'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst trappedBySide: boolean[] = [];\n\t\tconst stalenessBySide: ('internal' | 'external' | undefined)[] = [];\n\t\tfor (const side of this.sides) {\n\t\t\tlet sideTrapped = true;\n\t\t\tlet sideStaleness: 'internal' | 'external' | undefined;\n\t\t\tfor (const pokemon of side.active) {\n\t\t\t\tif (!pokemon) continue;\n\t\t\t\tpokemon.moveThisTurn = '';\n\t\t\t\tpokemon.newlySwitched = false;\n\t\t\t\tpokemon.moveLastTurnResult = pokemon.moveThisTurnResult;\n\t\t\t\tpokemon.moveThisTurnResult = undefined;\n\t\t\t\tif (this.turn !== 1) {\n\t\t\t\t\tpokemon.usedItemThisTurn = false;\n\t\t\t\t\tpokemon.statsRaisedThisTurn = false;\n\t\t\t\t\tpokemon.statsLoweredThisTurn = false;\n\t\t\t\t\t// It shouldn't be possible in a normal battle for a Pokemon to be damaged before turn 1's move selection\n\t\t\t\t\t// However, this could be potentially relevant in certain OMs\n\t\t\t\t\tpokemon.hurtThisTurn = null;\n\t\t\t\t}\n\n\t\t\t\tpokemon.maybeDisabled = false;\n\t\t\t\tpokemon.maybeLocked = false;\n\t\t\t\tfor (const moveSlot of pokemon.moveSlots) {\n\t\t\t\t\tmoveSlot.disabled = false;\n\t\t\t\t\tmoveSlot.disabledSource = '';\n\t\t\t\t}\n\t\t\t\tthis.runEvent('DisableMove', pokemon);\n\t\t\t\tfor (const moveSlot of pokemon.moveSlots) {\n\t\t\t\t\tconst activeMove = this.dex.getActiveMove(moveSlot.id);\n\t\t\t\t\tthis.singleEvent('DisableMove', activeMove, null, pokemon);\n\t\t\t\t\tif (activeMove.flags['cantusetwice'] && pokemon.lastMove?.id === moveSlot.id) {\n\t\t\t\t\t\tpokemon.disableMove(pokemon.lastMove.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If it was an illusion, it's not any more\n\t\t\t\tif (pokemon.getLastAttackedBy() && this.gen >= 7) pokemon.knownType = true;\n\n\t\t\t\tfor (let i = pokemon.attackedBy.length - 1; i >= 0; i--) {\n\t\t\t\t\tconst attack = pokemon.attackedBy[i];\n\t\t\t\t\tif (attack.source.isActive) {\n\t\t\t\t\t\tattack.thisTurn = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpokemon.attackedBy.splice(pokemon.attackedBy.indexOf(attack), 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.gen >= 7 && !pokemon.terastallized) {\n\t\t\t\t\t// In Gen 7, the real type of every Pokemon is visible to all players via the bottom screen while making choices\n\t\t\t\t\tconst seenPokemon = pokemon.illusion || pokemon;\n\t\t\t\t\tconst realTypeString = seenPokemon.getTypes(true).join('/');\n\t\t\t\t\tif (realTypeString !== seenPokemon.apparentType) {\n\t\t\t\t\t\tthis.add('-start', pokemon, 'typechange', realTypeString, '[silent]');\n\t\t\t\t\t\tseenPokemon.apparentType = realTypeString;\n\t\t\t\t\t\tif (pokemon.addedType) {\n\t\t\t\t\t\t\t// The typechange message removes the added type, so put it back\n\t\t\t\t\t\t\tthis.add('-start', pokemon, 'typeadd', pokemon.addedType, '[silent]');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpokemon.trapped = pokemon.maybeTrapped = false;\n\t\t\t\tthis.runEvent('TrapPokemon', pokemon);\n\t\t\t\tif (!pokemon.knownType || this.dex.getImmunity('trapped', pokemon)) {\n\t\t\t\t\tthis.runEvent('MaybeTrapPokemon', pokemon);\n\t\t\t\t}\n\t\t\t\t// canceling switches would leak information\n\t\t\t\t// if a foe might have a trapping ability\n\t\t\t\tif (this.gen > 2) {\n\t\t\t\t\tfor (const source of pokemon.foes()) {\n\t\t\t\t\t\tconst species = (source.illusion || source).species;\n\t\t\t\t\t\tif (!species.abilities) continue;\n\t\t\t\t\t\tfor (const abilitySlot in species.abilities) {\n\t\t\t\t\t\t\tconst abilityName = species.abilities[abilitySlot as keyof Species['abilities']];\n\t\t\t\t\t\t\tif (abilityName === source.ability) {\n\t\t\t\t\t\t\t\t// pokemon event was already run above so we don't need\n\t\t\t\t\t\t\t\t// to run it again.\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst ruleTable = this.ruleTable;\n\t\t\t\t\t\t\tif ((ruleTable.has('+hackmons') || !ruleTable.has('obtainableabilities')) && !this.format.team) {\n\t\t\t\t\t\t\t\t// hackmons format\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t} else if (abilitySlot === 'H' && species.unreleasedHidden) {\n\t\t\t\t\t\t\t\t// unreleased hidden ability\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst ability = this.dex.abilities.get(abilityName);\n\t\t\t\t\t\t\tif (ruleTable.has('-ability:' + ability.id)) continue;\n\t\t\t\t\t\t\tif (pokemon.knownType && !this.dex.getImmunity('trapped', pokemon)) continue;\n\t\t\t\t\t\t\tthis.singleEvent('FoeMaybeTrapPokemon', ability, {}, pokemon, source);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (pokemon.fainted) continue;\n\n\t\t\t\tsideTrapped = sideTrapped && pokemon.trapped;\n\t\t\t\tconst staleness = pokemon.volatileStaleness || pokemon.staleness;\n\t\t\t\tif (staleness) sideStaleness = sideStaleness === 'external' ? sideStaleness : staleness;\n\t\t\t\tpokemon.activeTurns++;\n\t\t\t}\n\t\t\ttrappedBySide.push(sideTrapped);\n\t\t\tstalenessBySide.push(sideStaleness);\n\t\t\tside.faintedLastTurn = side.faintedThisTurn;\n\t\t\tside.faintedThisTurn = null;\n\t\t}\n\n\t\tif (this.maybeTriggerEndlessBattleClause(trappedBySide, stalenessBySide)) return;\n\n\t\tif (this.gameType === 'triples' && this.sides.every(side => side.pokemonLeft === 1)) {\n\t\t\t// If both sides have one Pokemon left in triples and they are not adjacent, they are both moved to the center.\n\t\t\tconst actives = this.getAllActive();\n\t\t\tif (actives.length > 1 && !actives[0].isAdjacent(actives[1])) {\n\t\t\t\tthis.swapPosition(actives[0], 1, '[silent]');\n\t\t\t\tthis.swapPosition(actives[1], 1, '[silent]');\n\t\t\t\tthis.add('-center');\n\t\t\t}\n\t\t}\n\n\t\tthis.add('turn', this.turn);\n\t\tif (this.gameType === 'multi') {\n\t\t\tfor (const side of this.sides) {\n\t\t\t\tif (side.canDynamaxNow()) {\n\t\t\t\t\tif (this.turn === 1) {\n\t\t\t\t\t\tthis.addSplit(side.id, ['-candynamax', side.id]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.add('-candynamax', side.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.gen === 2) this.quickClawRoll = this.randomChance(60, 256);\n\t\tif (this.gen === 3) this.quickClawRoll = this.randomChance(1, 5);\n\n\t\tlet buf = `<div class=\"broadcast-blue\"><details><summary>What does which wish do?</summary>`;\n\t\tbuf += `&bullet; <b>Mega Evolution:</b> <span style=\"font-size: 9px;\">Revive one fainted Pokemon</span><br />`;\n\t\tbuf += `&bullet; <b>Mega Evolution X:</b> <span style=\"font-size: 9px;\">Gain a +2 boost in the current Pokemon's dominant attack and defense stat</span><br />`;\n\t\tbuf += `&bullet; <b>Mega Evolution Y:</b> <span style=\"font-size: 9px;\">Give the current Pokemon innate Serene Grace + Focus Energy for the rest of the game</span><br />`;\n\t\tbuf += `&bullet; <b>Terastallize:</b> <span style=\"font-size: 9px;\">Scout the active Pokemon for one of their moves</span><br />`;\n\t\tbuf += `</details></div>`;\n\t\tthis.add(`raw|${buf}`);\n\n\t\tthis.makeRequest('move');\n\t},\n\trunAction(action) {\n\t\tconst pokemonOriginalHP = action.pokemon?.hp;\n\t\tlet residualPokemon: (readonly [Pokemon, number])[] = [];\n\t\t// returns whether or not we ended in a callback\n\t\tswitch (action.choice) {\n\t\tcase 'start': {\n\t\t\tfor (const side of this.sides) {\n\t\t\t\tif (side.pokemonLeft) side.pokemonLeft = side.pokemon.length;\n\t\t\t\tthis.add('teamsize', side.id, side.pokemon.length);\n\t\t\t}\n\n\t\t\tthis.add('start');\n\n\t\t\t// Change Zacian/Zamazenta into their Crowned formes\n\t\t\tfor (const pokemon of this.getAllPokemon()) {\n\t\t\t\tlet rawSpecies: Species | null = null;\n\t\t\t\tif (pokemon.species.id === 'zacian' && pokemon.item === 'rustedsword') {\n\t\t\t\t\trawSpecies = this.dex.species.get('Zacian-Crowned');\n\t\t\t\t} else if (pokemon.species.id === 'zamazenta' && pokemon.item === 'rustedshield') {\n\t\t\t\t\trawSpecies = this.dex.species.get('Zamazenta-Crowned');\n\t\t\t\t}\n\t\t\t\tif (!rawSpecies) continue;\n\t\t\t\tconst species = pokemon.setSpecies(rawSpecies);\n\t\t\t\tif (!species) continue;\n\t\t\t\tpokemon.baseSpecies = rawSpecies;\n\t\t\t\tpokemon.details = pokemon.getUpdatedDetails();\n\t\t\t\tpokemon.setAbility(species.abilities['0'], null, null, true);\n\t\t\t\tpokemon.baseAbility = pokemon.ability;\n\n\t\t\t\tconst behemothMove: { [k: string]: string } = {\n\t\t\t\t\t'Zacian-Crowned': 'behemothblade', 'Zamazenta-Crowned': 'behemothbash',\n\t\t\t\t};\n\t\t\t\tconst ironHead = pokemon.baseMoves.indexOf('ironhead');\n\t\t\t\tif (ironHead >= 0) {\n\t\t\t\t\tconst move = this.dex.moves.get(behemothMove[rawSpecies.name]);\n\t\t\t\t\tpokemon.baseMoveSlots[ironHead] = {\n\t\t\t\t\t\tmove: move.name,\n\t\t\t\t\t\tid: move.id,\n\t\t\t\t\t\tpp: move.noPPBoosts ? move.pp : move.pp * 8 / 5,\n\t\t\t\t\t\tmaxpp: move.noPPBoosts ? move.pp : move.pp * 8 / 5,\n\t\t\t\t\t\ttarget: move.target,\n\t\t\t\t\t\tdisabled: false,\n\t\t\t\t\t\tdisabledSource: '',\n\t\t\t\t\t\tused: false,\n\t\t\t\t\t};\n\t\t\t\t\tpokemon.moveSlots = pokemon.baseMoveSlots.slice();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.format.onBattleStart?.call(this);\n\t\t\tfor (const rule of this.ruleTable.keys()) {\n\t\t\t\tif ('+*-!'.includes(rule.charAt(0))) continue;\n\t\t\t\tconst subFormat = this.dex.formats.get(rule);\n\t\t\t\tsubFormat.onBattleStart?.call(this);\n\t\t\t}\n\n\t\t\tfor (const side of this.sides) {\n\t\t\t\tfor (let i = 0; i < side.active.length; i++) {\n\t\t\t\t\tif (!side.pokemonLeft) {\n\t\t\t\t\t\t// forfeited before starting\n\t\t\t\t\t\tside.active[i] = side.pokemon[i];\n\t\t\t\t\t\tside.active[i].fainted = true;\n\t\t\t\t\t\tside.active[i].hp = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.actions.switchIn(side.pokemon[i], i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const pokemon of this.getAllPokemon()) {\n\t\t\t\tthis.singleEvent('Start', this.dex.conditions.getByID(pokemon.species.id), pokemon.speciesState, pokemon);\n\t\t\t}\n\t\t\tthis.midTurn = true;\n\t\t\tbreak;\n\t\t}\n\n\t\tcase 'move':\n\t\t\tif (!action.pokemon.isActive) return false;\n\t\t\tif (action.pokemon.fainted) return false;\n\t\t\tthis.actions.runMove(action.move, action.pokemon, action.targetLoc, {\n\t\t\t\tsourceEffect: action.sourceEffect, zMove: action.zmove,\n\t\t\t\tmaxMove: action.maxMove, originalTarget: action.originalTarget,\n\t\t\t});\n\t\t\tbreak;\n\t\tcase 'megaEvo':\n\t\t\tthis.actions.runMegaEvo(action.pokemon);\n\t\t\tbreak;\n\t\tcase 'megaEvoX':\n\t\t\tthis.actions.runMegaEvoX?.(action.pokemon);\n\t\t\tbreak;\n\t\tcase 'megaEvoY':\n\t\t\tthis.actions.runMegaEvoY?.(action.pokemon);\n\t\t\tbreak;\n\t\tcase 'runDynamax':\n\t\t\taction.pokemon.addVolatile('dynamax');\n\t\t\taction.pokemon.side.dynamaxUsed = true;\n\t\t\tif (action.pokemon.side.allySide) action.pokemon.side.allySide.dynamaxUsed = true;\n\t\t\tbreak;\n\t\tcase 'terastallize':\n\t\t\tthis.actions.terastallize(action.pokemon);\n\t\t\tbreak;\n\t\tcase 'beforeTurnMove':\n\t\t\tif (!action.pokemon.isActive) return false;\n\t\t\tif (action.pokemon.fainted) return false;\n\t\t\tthis.debug('before turn callback: ' + action.move.id);\n\t\t\tconst target = this.getTarget(action.pokemon, action.move, action.targetLoc);\n\t\t\tif (!target) return false;\n\t\t\tif (!action.move.beforeTurnCallback) throw new Error(`beforeTurnMove has no beforeTurnCallback`);\n\t\t\taction.move.beforeTurnCallback.call(this, action.pokemon, target);\n\t\t\tbreak;\n\t\tcase 'priorityChargeMove':\n\t\t\tif (!action.pokemon.isActive) return false;\n\t\t\tif (action.pokemon.fainted) return false;\n\t\t\tthis.debug('priority charge callback: ' + action.move.id);\n\t\t\tif (!action.move.priorityChargeCallback) throw new Error(`priorityChargeMove has no priorityChargeCallback`);\n\t\t\taction.move.priorityChargeCallback.call(this, action.pokemon);\n\t\t\tbreak;\n\n\t\tcase 'event':\n\t\t\tthis.runEvent(action.event!, action.pokemon);\n\t\t\tbreak;\n\t\tcase 'team':\n\t\t\tif (action.index === 0) {\n\t\t\t\taction.pokemon.side.pokemon = [];\n\t\t\t}\n\t\t\taction.pokemon.side.pokemon.push(action.pokemon);\n\t\t\taction.pokemon.position = action.index;\n\t\t\t// we return here because the update event would crash since there are no active pokemon yet\n\t\t\treturn;\n\n\t\tcase 'pass':\n\t\t\treturn;\n\t\tcase 'instaswitch':\n\t\tcase 'switch':\n\t\t\tif (action.choice === 'switch' && action.pokemon.status) {\n\t\t\t\tthis.singleEvent('CheckShow', this.dex.abilities.getByID('naturalcure' as ID), null, action.pokemon);\n\t\t\t}\n\t\t\tif (this.actions.switchIn(action.target, action.pokemon.position, action.sourceEffect) === 'pursuitfaint') {\n\t\t\t\t// a pokemon fainted from Pursuit before it could switch\n\t\t\t\tif (this.gen <= 4) {\n\t\t\t\t\t// in gen 2-4, the switch still happens\n\t\t\t\t\tthis.hint(\"Previously chosen switches continue in Gen 2-4 after a Pursuit target faints.\");\n\t\t\t\t\taction.priority = -101;\n\t\t\t\t\tthis.queue.unshift(action);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t// in gen 5+, the switch is cancelled\n\t\t\t\t\tthis.hint(\"A Pokemon can't switch between when it runs out of HP and when it faints\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'revivalblessing':\n\t\t\taction.pokemon.side.pokemonLeft++;\n\t\t\tif (action.target.position < action.pokemon.side.active.length) {\n\t\t\t\tthis.queue.addChoice({\n\t\t\t\t\tchoice: 'instaswitch',\n\t\t\t\t\tpokemon: action.target,\n\t\t\t\t\ttarget: action.target,\n\t\t\t\t});\n\t\t\t}\n\t\t\taction.target.fainted = false;\n\t\t\taction.target.faintQueued = false;\n\t\t\taction.target.subFainted = false;\n\t\t\taction.target.status = '';\n\t\t\taction.target.hp = 1; // Needed so hp functions works\n\t\t\taction.target.sethp(action.target.maxhp / 2);\n\t\t\tif (!action.sourceEffect) action.target.m.revivedByMonkeysPaw = true;\n\t\t\tthis.add('-heal', action.target, action.target.getHealth, '[from] move: Revival Blessing');\n\t\t\taction.pokemon.side.removeSlotCondition(action.pokemon, 'revivalblessing');\n\t\t\tbreak;\n\t\tcase 'runSwitch':\n\t\t\tthis.actions.runSwitch(action.pokemon);\n\t\t\tbreak;\n\t\tcase 'shift':\n\t\t\tif (!action.pokemon.isActive) return false;\n\t\t\tif (action.pokemon.fainted) return false;\n\t\t\tthis.swapPosition(action.pokemon, 1);\n\t\t\tbreak;\n\n\t\tcase 'beforeTurn':\n\t\t\tthis.eachEvent('BeforeTurn');\n\t\t\tbreak;\n\t\tcase 'residual':\n\t\t\tthis.add('');\n\t\t\tthis.clearActiveMove(true);\n\t\t\tthis.updateSpeed();\n\t\t\tresidualPokemon = this.getAllActive().map(pokemon => [pokemon, pokemon.getUndynamaxedHP()] as const);\n\t\t\tthis.fieldEvent('Residual');\n\t\t\tif (!this.ended) this.add('upkeep');\n\t\t\tbreak;\n\t\t}\n\n\t\t// phazing (Roar, etc)\n\t\tfor (const side of this.sides) {\n\t\t\tfor (const pokemon of side.active) {\n\t\t\t\tif (pokemon.forceSwitchFlag) {\n\t\t\t\t\tif (pokemon.hp) this.actions.dragIn(pokemon.side, pokemon.position);\n\t\t\t\t\tpokemon.forceSwitchFlag = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.clearActiveMove();\n\n\t\t// fainting\n\n\t\tthis.faintMessages();\n\t\tif (this.ended) return true;\n\n\t\t// switching (fainted pokemon, U-turn, Baton Pass, etc)\n\n\t\tif (!this.queue.peek() || (this.gen <= 3 && ['move', 'residual'].includes(this.queue.peek()!.choice))) {\n\t\t\t// in gen 3 or earlier, switching in fainted pokemon is done after\n\t\t\t// every move, rather than only at the end of the turn.\n\t\t\tthis.checkFainted();\n\t\t} else if (['megaEvo', 'megaEvoX', 'megaEvoY'].includes(action.choice) && this.gen === 7) {\n\t\t\tthis.eachEvent('Update');\n\t\t\t// In Gen 7, the action order is recalculated for a Pok\u00E9mon that mega evolves.\n\t\t\tfor (const [i, queuedAction] of this.queue.list.entries()) {\n\t\t\t\tif (queuedAction.pokemon === action.pokemon && queuedAction.choice === 'move') {\n\t\t\t\t\tthis.queue.list.splice(i, 1);\n\t\t\t\t\tqueuedAction.mega = 'done';\n\t\t\t\t\tthis.queue.insertChoice(queuedAction, true);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} else if (this.queue.peek()?.choice === 'instaswitch') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.gen >= 5 && action.choice !== 'start') {\n\t\t\tthis.eachEvent('Update');\n\t\t\tfor (const [pokemon, originalHP] of residualPokemon) {\n\t\t\t\tconst maxhp = pokemon.getUndynamaxedHP(pokemon.maxhp);\n\t\t\t\tif (pokemon.hp && pokemon.getUndynamaxedHP() <= maxhp / 2 && originalHP > maxhp / 2) {\n\t\t\t\t\tthis.runEvent('EmergencyExit', pokemon);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (action.choice === 'runSwitch') {\n\t\t\tconst pokemon = action.pokemon;\n\t\t\tif (pokemon.hp && pokemon.hp <= pokemon.maxhp / 2 && pokemonOriginalHP! > pokemon.maxhp / 2) {\n\t\t\t\tthis.runEvent('EmergencyExit', pokemon);\n\t\t\t}\n\t\t}\n\n\t\tconst switches = this.sides.map(\n\t\t\tside => side.active.some(pokemon => pokemon && !!pokemon.switchFlag)\n\t\t);\n\n\t\tfor (let i = 0; i < this.sides.length; i++) {\n\t\t\tlet reviveSwitch = false; // Used to ignore the fake switch for Revival Blessing\n\t\t\tif (switches[i] && !this.canSwitch(this.sides[i])) {\n\t\t\t\tfor (const pokemon of this.sides[i].active) {\n\t\t\t\t\tif (this.sides[i].slotConditions[pokemon.position]['revivalblessing']) {\n\t\t\t\t\t\treviveSwitch = true;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tpokemon.switchFlag = false;\n\t\t\t\t}\n\t\t\t\tif (!reviveSwitch) switches[i] = false;\n\t\t\t} else if (switches[i]) {\n\t\t\t\tfor (const pokemon of this.sides[i].active) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tpokemon.hp && pokemon.switchFlag && pokemon.switchFlag !== 'revivalblessing' &&\n\t\t\t\t\t\t!pokemon.skipBeforeSwitchOutEventFlag\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.runEvent('BeforeSwitchOut', pokemon);\n\t\t\t\t\t\tpokemon.skipBeforeSwitchOutEventFlag = true;\n\t\t\t\t\t\tthis.faintMessages(); // Pokemon may have fainted in BeforeSwitchOut\n\t\t\t\t\t\tif (this.ended) return true;\n\t\t\t\t\t\tif (pokemon.fainted) {\n\t\t\t\t\t\t\tswitches[i] = this.sides[i].active.some(sidePokemon => sidePokemon && !!sidePokemon.switchFlag);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const playerSwitch of switches) {\n\t\t\tif (playerSwitch) {\n\t\t\t\tthis.makeRequest('switch');\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (this.gen < 5) this.eachEvent('Update');\n\n\t\tif (this.gen >= 8 && (this.queue.peek()?.choice === 'move' || this.queue.peek()?.choice === 'runDynamax')) {\n\t\t\t// In gen 8, speed is updated dynamically so update the queue's speed properties and sort it.\n\t\t\tthis.updateSpeed();\n\t\t\tfor (const queueAction of this.queue.list) {\n\t\t\t\tif (queueAction.pokemon) this.getActionSpeed(queueAction);\n\t\t\t}\n\t\t\tthis.queue.sort();\n\t\t}\n\n\t\treturn false;\n\t},\n\tactions: {\n\t\tinherit: true,\n\t\tcanMegaEvo(pokemon) {\n\t\t\t// @ts-expect-error\n\t\t\tif (!pokemon.side.wishesRemaining) return null;\n\t\t\t// @ts-expect-error\n\t\t\tif (!pokemon.side.wishes['life']) return null;\n\t\t\treturn 'yes';\n\t\t},\n\t\tcanMegaEvoX(pokemon) {\n\t\t\t// @ts-expect-error\n\t\t\tif (!pokemon.side.wishesRemaining) return null;\n\t\t\t// @ts-expect-error\n\t\t\tif (!pokemon.side.wishes['power']) return null;\n\t\t\treturn 'yes';\n\t\t},\n\t\tcanMegaEvoY(pokemon) {\n\t\t\t// @ts-expect-error\n\t\t\tif (!pokemon.side.wishesRemaining) return null;\n\t\t\t// @ts-expect-error\n\t\t\tif (!pokemon.side.wishes['luck']) return null;\n\t\t\treturn 'yes';\n\t\t},\n\t\tcanTerastallize(pokemon) {\n\t\t\t// @ts-expect-error\n\t\t\tif (!pokemon.side.wishesRemaining) return null;\n\t\t\t// @ts-expect-error\n\t\t\tif (!pokemon.side.wishes['knowledge']) return null;\n\t\t\treturn 'Stellar';\n\t\t},\n\t\t// wish for life (dead teammate is revived, but that teammate has permanent slow start)\n\t\trunMegaEvo(pokemon) {\n\t\t\tif (!pokemon.canMegaEvo) return false;\n\n\t\t\t// Limit one wish for life per side\n\t\t\tfor (const ally of pokemon.side.pokemon) {\n\t\t\t\tally.canMegaEvo = null;\n\t\t\t}\n\t\t\t// @ts-expect-error\n\t\t\tpokemon.side.wishesRemaining--;\n\t\t\t// @ts-expect-error\n\t\t\tdelete pokemon.side.wishes['life'];\n\n\t\t\tthis.battle.add('message', `The Monkey's Paw curls.`);\n\t\t\tthis.battle.add('-message', `${pokemon.side.name} wishes for Life.`);\n\t\t\tthis.battle.add('-message', `At the cost of great power, the Pokemon revived will move at a slowed pace permanently.`);\n\t\t\t// @ts-expect-error\n\t\t\tthis.battle.add('-message', `They have ${pokemon.side.wishesRemaining} wish${pokemon.side.wishesRemaining === 1 ? '' : 'es'} remaining.`);\n\t\t\tthis.useMove('revivalblessing', pokemon, { sourceEffect: this.dex.getActiveMove('monkeyspaw') });\n\t\t\tthis.battle.runEvent('AfterMega', pokemon);\n\t\t\treturn true;\n\t\t},\n\t\t// wish for power (+2 prominent stat/defense, -2 every other stat)\n\t\trunMegaEvoX(pokemon) {\n\t\t\tif (!pokemon.canMegaEvoX) return false;\n\n\t\t\t// Limit one wish for life per side\n\t\t\tfor (const ally of pokemon.side.pokemon) {\n\t\t\t\tally.canMegaEvoX = null;\n\t\t\t}\n\t\t\t// @ts-expect-error\n\t\t\tpokemon.side.wishesRemaining--;\n\t\t\t// @ts-expect-error\n\t\t\tdelete pokemon.side.wishes['power'];\n\n\t\t\tthis.battle.add('message', `The Monkey's Paw curls.`);\n\t\t\tthis.battle.add('-message', `${pokemon.side.name} wishes for Power.`);\n\t\t\tthis.battle.add('-message', `At the cost of great power, ${pokemon.name} has become very frail.`);\n\t\t\t// @ts-expect-error\n\t\t\tthis.battle.add('-message', `They have ${pokemon.side.wishesRemaining} wish${pokemon.side.wishesRemaining === 1 ? '' : 'es'} remaining.`);\n\n\t\t\tlet positiveBoosts: BoostID[] = ['atk', 'def'];\n\t\t\tif (pokemon.getStat('spa', false, true) > pokemon.getStat('atk', false, true)) positiveBoosts = ['spa', 'spd'];\n\t\t\tconst boostsTable: SparseBoostsTable = {};\n\n\t\t\tlet boost: BoostID;\n\t\t\tfor (boost in pokemon.boosts) {\n\t\t\t\tif (boost === 'accuracy' || boost === 'evasion' || boost === 'spe') continue;\n\t\t\t\tif (positiveBoosts.includes(boost)) {\n\t\t\t\t\tboostsTable[boost] = 2;\n\t\t\t\t} else {\n\t\t\t\t\tboostsTable[boost] = -2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.battle.boost(boostsTable, pokemon);\n\n\t\t\tthis.battle.runEvent('AfterMega', pokemon);\n\t\t\treturn true;\n\t\t},\n\t\t// wish for luck (serene grace + focus energy but confused)\n\t\trunMegaEvoY(pokemon) {\n\t\t\tif (!pokemon.canMegaEvoY) return false;\n\n\t\t\t// Limit one wish for life per side\n\t\t\tfor (const ally of pokemon.side.pokemon) {\n\t\t\t\tally.canMegaEvoY = null;\n\t\t\t}\n\t\t\t// @ts-expect-error\n\t\t\tpokemon.side.wishesRemaining--;\n\t\t\t// @ts-expect-error\n\t\t\tdelete pokemon.side.wishes['luck'];\n\n\t\t\tthis.battle.add('message', `The Monkey's Paw curls.`);\n\t\t\tthis.battle.add('-message', `${pokemon.side.name} wishes for Luck.`);\n\t\t\tthis.battle.add('-message', `At the cost of great power, ${pokemon.name}'s luck becomes double-edged.`);\n\t\t\t// @ts-expect-error\n\t\t\tthis.battle.add('-message', `They have ${pokemon.side.wishesRemaining} wish${pokemon.side.wishesRemaining === 1 ? '' : 'es'} remaining.`);\n\t\t\tpokemon.m.monkeyPawLuck = true;\n\t\t\tpokemon.addVolatile('focusenergy');\n\t\t\tpokemon.addVolatile('confusion', null, this.dex.conditions.get('monkeyspaw'));\n\n\t\t\tthis.battle.runEvent('AfterMega', pokemon);\n\t\t\treturn true;\n\t\t},\n\t\t// wish for knowledge\n\t\tterastallize(pokemon) {\n\t\t\tif (!pokemon.canTerastallize) return;\n\n\t\t\t// limit one wish for knowledge per side\n\t\t\tfor (const ally of pokemon.side.pokemon) {\n\t\t\t\tally.canTerastallize = null;\n\t\t\t}\n\t\t\t// @ts-expect-error\n\t\t\tpokemon.side.wishesRemaining--;\n\t\t\t// @ts-expect-error\n\t\t\tdelete pokemon.side.wishes['knowledge'];\n\n\t\t\tthis.battle.add('message', `The Monkey's Paw curls.`);\n\t\t\tthis.battle.add('-message', `${pokemon.side.name} wishes for Knowledge.`);\n\t\t\tthis.battle.add('-message', `At the cost of great power, the knowledge gained comes with increased threat.`);\n\t\t\t// @ts-expect-error\n\t\t\tthis.battle.add('-message', `They have ${pokemon.side.wishesRemaining} wish${pokemon.side.wishesRemaining === 1 ? '' : 'es'} remaining.`);\n\t\t\tconst foeActive = pokemon.foes()[0];\n\t\t\tif (foeActive) {\n\t\t\t\tconst move = this.dex.getActiveMove(this.battle.sample(foeActive.moveSlots).id);\n\t\t\t\tthis.useMove(move, foeActive,\n\t\t\t\t\t{ target: pokemon, zMove: move.category === 'Status' ? move.name : this.Z_MOVES[move.type] });\n\t\t\t}\n\n\t\t\tthis.battle.runEvent('AfterTerastallization', pokemon);\n\t\t},\n\t\t// one more wish\n\t},\n\tside: {\n\t\t// @ts-expect-error\n\t\twishesRemaining: 4,\n\t\twishes: {\n\t\t\tluck: 1,\n\t\t\tpower: 1,\n\t\t\tlife: 1,\n\t\t\tknowledge: 1,\n\t\t},\n\t},\n};\n"],
  "mappings": "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",
  "names": []
}
