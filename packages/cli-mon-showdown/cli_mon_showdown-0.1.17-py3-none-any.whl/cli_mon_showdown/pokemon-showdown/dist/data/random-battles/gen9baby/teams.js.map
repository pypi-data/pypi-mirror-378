{
  "version": 3,
  "sources": ["../../../../data/random-battles/gen9baby/teams.ts"],
  "sourcesContent": ["import type { PRNG, PRNGSeed } from \"../../../sim/prng\";\nimport { RandomTeams, type MoveCounter } from \"../gen9/teams\";\nimport { Utils } from '../../../lib';\n\n// First, some lists of moves that can be used for rules throughout set generation. Taken from regular gen9.\n\n// Moves that drop stats:\nconst CONTRARY_MOVES = [\n\t'armorcannon', 'closecombat', 'leafstorm', 'makeitrain', 'overheat', 'spinout', 'superpower', 'vcreate',\n];\n\n// Hazard-setting moves\nconst HAZARDS = [\n\t'spikes', 'stealthrock', 'stickyweb', 'toxicspikes',\n];\n\n// Moves that switch the user out\nconst PIVOT_MOVES = [\n\t'chillyreception', 'flipturn', 'partingshot', 'shedtail', 'teleport', 'uturn', 'voltswitch',\n];\n\n// Moves that boost Attack:\nconst PHYSICAL_SETUP = [\n\t'bellydrum', 'bulkup', 'coil', 'curse', 'dragondance', 'honeclaws', 'howl', 'meditate', 'poweruppunch', 'swordsdance', 'tidyup', 'victorydance',\n];\n\n// Moves that restore HP:\nconst RECOVERY_MOVES = [\n\t'healorder', 'milkdrink', 'moonlight', 'morningsun', 'recover', 'roost', 'shoreup', 'slackoff', 'softboiled', 'strengthsap', 'synthesis',\n];\n\n// Setup (stat-boosting) moves\nconst SETUP = [\n\t'acidarmor', 'agility', 'autotomize', 'bellydrum', 'bulkup', 'calmmind', 'clangoroussoul', 'coil', 'cosmicpower', 'curse',\n\t'dragondance', 'flamecharge', 'growth', 'honeclaws', 'howl', 'irondefense', 'meditate', 'nastyplot', 'noretreat', 'poweruppunch',\n\t'quiverdance', 'raindance', 'rockpolish', 'shellsmash', 'shiftgear', 'snowscape', 'sunnyday', 'swordsdance', 'tailglow', 'tidyup',\n\t'trailblaze', 'workup', 'victorydance',\n];\n\n// Some moves that only boost Speed:\nconst SPEED_SETUP = [\n\t'agility', 'autotomize', 'flamecharge', 'rockpolish', 'trailblaze',\n];\n\n// Moves that would want to generate together\nconst MOVE_PAIRS = [\n\t['lightscreen', 'reflect'],\n\t['sleeptalk', 'rest'],\n\t['protect', 'wish'],\n];\n\nexport class RandomBabyTeams extends RandomTeams {\n\tconstructor(format: Format | string, prng: PRNG | PRNGSeed | null) {\n\t\tsuper(format, prng);\n\n\t\t// Overwrite enforcementcheckers where needed here\n\t\tthis.moveEnforcementCheckers['Bug'] = (movePool, moves, abilities, types, counter) => (\n\t\t\t!counter.get('Bug')\n\t\t);\n\t\tthis.moveEnforcementCheckers['Grass'] = (movePool, moves, abilities, types, counter, species) => (\n\t\t\t!counter.get('Grass') && species.id !== 'rowlet'\n\t\t);\n\t}\n\n\toverride cullMovePool(\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tabilities: string[],\n\t\tcounter: MoveCounter,\n\t\tmovePool: string[],\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tteraType: string,\n\t\trole: RandomTeamsTypes.Role,\n\t): void {\n\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t// If we have two unfilled moves and only one unpaired move, cull the unpaired move.\n\t\tif (moves.size === this.maxMoveCount - 2) {\n\t\t\tconst unpairedMoves = [...movePool];\n\t\t\tfor (const pair of MOVE_PAIRS) {\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[0]));\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[1]));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (unpairedMoves.length === 1) {\n\t\t\t\tthis.fastPop(movePool, movePool.indexOf(unpairedMoves[0]));\n\t\t\t}\n\t\t}\n\n\t\t// These moves are paired, and shouldn't appear if there isn't room for both.\n\t\tif (moves.size === this.maxMoveCount - 1) {\n\t\t\tfor (const pair of MOVE_PAIRS) {\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[0]));\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[1]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Create list of all status moves to be used later\n\t\tconst statusMoves = this.cachedStatusMoves;\n\n\t\t// Team-based move culls\n\t\tif (teamDetails.screens && movePool.length >= this.maxMoveCount + 2) {\n\t\t\tif (movePool.includes('reflect')) this.fastPop(movePool, movePool.indexOf('reflect'));\n\t\t\tif (movePool.includes('lightscreen')) this.fastPop(movePool, movePool.indexOf('lightscreen'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\t\tif (teamDetails.stickyWeb) {\n\t\t\tif (movePool.includes('stickyweb')) this.fastPop(movePool, movePool.indexOf('stickyweb'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\t\tif (teamDetails.stealthRock) {\n\t\t\tif (movePool.includes('stealthrock')) this.fastPop(movePool, movePool.indexOf('stealthrock'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\t\tif (teamDetails.defog || teamDetails.rapidSpin) {\n\t\t\tif (movePool.includes('defog')) this.fastPop(movePool, movePool.indexOf('defog'));\n\t\t\tif (movePool.includes('rapidspin')) this.fastPop(movePool, movePool.indexOf('rapidspin'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\t\tif (teamDetails.toxicSpikes) {\n\t\t\tif (movePool.includes('toxicspikes')) this.fastPop(movePool, movePool.indexOf('toxicspikes'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\t\tif (teamDetails.spikes && teamDetails.spikes >= 2) {\n\t\t\tif (movePool.includes('spikes')) this.fastPop(movePool, movePool.indexOf('spikes'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\n\t\t// General incompatibilities\n\t\tconst incompatiblePairs = [\n\t\t\t// These moves don't mesh well with other aspects of the set\n\t\t\t[SETUP, 'defog'],\n\t\t\t[SETUP, PIVOT_MOVES],\n\t\t\t[SETUP, HAZARDS],\n\t\t\t[PHYSICAL_SETUP, PHYSICAL_SETUP],\n\t\t\t[statusMoves, ['destinybond', 'healingwish', 'switcheroo', 'trick']],\n\t\t\t['curse', 'rapidspin'],\n\n\t\t\t// These moves are redundant with each other\n\t\t\t[\n\t\t\t\t['alluringvoice', 'dazzlinggleam', 'drainingkiss', 'moonblast'],\n\t\t\t\t['alluringvoice', 'dazzlinggleam', 'drainingkiss', 'moonblast'],\n\t\t\t],\n\t\t\t[\n\t\t\t\t['bulletseed', 'gigadrain', 'leafstorm', 'powerwhip', 'seedbomb'],\n\t\t\t\t['bulletseed', 'gigadrain', 'leafstorm', 'seedbomb'],\n\t\t\t],\n\t\t\t[['hypnosis', 'thunderwave', 'toxic', 'willowisp', 'yawn'], ['hypnosis', 'thunderwave', 'toxic', 'willowisp', 'yawn']],\n\t\t\t['roar', 'yawn'],\n\t\t\t['dragonclaw', 'outrage'],\n\t\t\t['dracometeor', 'dragonpulse'],\n\t\t\t['toxic', 'toxicspikes'],\n\t\t\t['rockblast', 'stoneedge'],\n\t\t\t['bodyslam', 'doubleedge'],\n\t\t\t['gunkshot', 'poisonjab'],\n\t\t\t[['hydropump', 'liquidation'], 'surf'],\n\t\t\t['psychic', 'psyshock'],\n\t\t];\n\n\t\tfor (const pair of incompatiblePairs) this.incompatibleMoves(moves, movePool, pair[0], pair[1]);\n\t}\n\n\t// Generate random moveset for a given species, role, tera type.\n\toverride randomMoveset(\n\t\ttypes: string[],\n\t\tabilities: string[],\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tmovePool: string[],\n\t\tteraType: string,\n\t\trole: RandomTeamsTypes.Role,\n\t): Set<string> {\n\t\tconst moves = new Set<string>();\n\t\tlet counter = this.queryMoves(moves, species, teraType, abilities);\n\t\tthis.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead, isDoubles, teraType, role);\n\n\t\t// If there are only four moves, add all moves and return early\n\t\tif (movePool.length <= this.maxMoveCount) {\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tmoves.add(moveid);\n\t\t\t}\n\t\t\treturn moves;\n\t\t}\n\n\t\t// Helper function for (STAB-)move enforcement later on\n\t\tconst runEnforcementChecker = (checkerName: string) => {\n\t\t\tif (!this.moveEnforcementCheckers[checkerName]) return false;\n\t\t\treturn this.moveEnforcementCheckers[checkerName](\n\t\t\t\tmovePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles, teraType, role\n\t\t\t);\n\t\t};\n\n\t\tif (role === 'Tera Blast user') {\n\t\t\tcounter = this.addMove('terablast', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\n\t\t// Add required move (e.g. Relic Song for Meloetta-P)\n\t\tif (species.requiredMove) {\n\t\t\tconst move = this.dex.moves.get(species.requiredMove).id;\n\t\t\tcounter = this.addMove(move, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\n\t\t// Add other moves you really want to have, e.g. STAB, recovery, setup.\n\n\t\t// Enforce Facade if Guts is a possible ability\n\t\tif (movePool.includes('facade') && abilities.includes('Guts')) {\n\t\t\tcounter = this.addMove('facade', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\n\t\t// Enforce Sticky Web\n\t\tif (movePool.includes('stickyweb')) {\n\t\t\tcounter = this.addMove('stickyweb', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\n\t\t// Enforce Knock Off on most roles\n\t\tif (movePool.includes('knockoff') && role !== 'Bulky Support') {\n\t\t\tcounter = this.addMove('knockoff', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\n\t\t// Enforce hazard removal on Bulky Support if the team doesn't already have it\n\t\tif (role === 'Bulky Support' && !teamDetails.defog && !teamDetails.rapidSpin) {\n\t\t\tif (movePool.includes('rapidspin')) {\n\t\t\t\tcounter = this.addMove('rapidspin', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t\tif (movePool.includes('defog')) {\n\t\t\t\tcounter = this.addMove('defog', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce Knock Off on pure Normal- and Fighting-types\n\t\tif (types.length === 1 && (types.includes('Normal') || types.includes('Fighting'))) {\n\t\t\tif (movePool.includes('knockoff')) {\n\t\t\t\tcounter = this.addMove('knockoff', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce STAB priority\n\t\tif (role === 'Wallbreaker') {\n\t\t\tconst priorityMoves = [];\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\tif (\n\t\t\t\t\ttypes.includes(moveType) && (move.priority > 0 || (moveid === 'grassyglide' && abilities.includes('Grassy Surge'))) &&\n\t\t\t\t\t(move.basePower || move.basePowerCallback)\n\t\t\t\t) {\n\t\t\t\t\tpriorityMoves.push(moveid);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (priorityMoves.length) {\n\t\t\t\tconst moveid = this.sample(priorityMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce STAB\n\t\tfor (const type of types) {\n\t\t\t// Check if a STAB move of that type should be required\n\t\t\tconst stabMoves = [];\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && type === moveType) {\n\t\t\t\t\tstabMoves.push(moveid);\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (runEnforcementChecker(type)) {\n\t\t\t\tif (!stabMoves.length) break;\n\t\t\t\tconst moveid = this.sampleNoReplace(stabMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce Tera STAB\n\t\tif (!counter.get('stabtera') && role !== 'Bulky Support') {\n\t\t\tconst stabMoves = [];\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && teraType === moveType) {\n\t\t\t\t\tstabMoves.push(moveid);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (stabMoves.length) {\n\t\t\t\tconst moveid = this.sample(stabMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// If no STAB move was added, add a STAB move\n\t\tif (!counter.get('stab')) {\n\t\t\tconst stabMoves = [];\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && types.includes(moveType)) {\n\t\t\t\t\tstabMoves.push(moveid);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (stabMoves.length) {\n\t\t\t\tconst moveid = this.sample(stabMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce contrary moves\n\t\tif (abilities.includes('Contrary')) {\n\t\t\tconst contraryMoves = movePool.filter(moveid => CONTRARY_MOVES.includes(moveid));\n\t\t\tfor (const moveid of contraryMoves) {\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce recovery\n\t\tif (['Bulky Support', 'Bulky Attacker', 'Bulky Setup'].includes(role)) {\n\t\t\tconst recoveryMoves = movePool.filter(moveid => RECOVERY_MOVES.includes(moveid));\n\t\t\tif (recoveryMoves.length) {\n\t\t\t\tconst moveid = this.sample(recoveryMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce setup\n\t\tif (role.includes('Setup') || role === 'Tera Blast user') {\n\t\t\t// First, try to add a non-Speed setup move\n\t\t\tconst nonSpeedSetupMoves = movePool.filter(moveid => SETUP.includes(moveid) && !SPEED_SETUP.includes(moveid));\n\t\t\tif (nonSpeedSetupMoves.length) {\n\t\t\t\tconst moveid = this.sample(nonSpeedSetupMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t} else {\n\t\t\t\t// No non-Speed setup moves, so add any (Speed) setup move\n\t\t\t\tconst setupMoves = movePool.filter(moveid => SETUP.includes(moveid));\n\t\t\t\tif (setupMoves.length) {\n\t\t\t\t\tconst moveid = this.sample(setupMoves);\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\t\tmovePool, teraType, role);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Enforce a move not on the noSTAB list\n\t\tif (!counter.damagingMoves.size) {\n\t\t\t// Choose an attacking move\n\t\t\tconst attackingMoves = [];\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.category !== 'Status')) attackingMoves.push(moveid);\n\t\t\t}\n\t\t\tif (attackingMoves.length) {\n\t\t\t\tconst moveid = this.sample(attackingMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce coverage move\n\t\tif (!['Fast Support', 'Bulky Support'].includes(role) || species.id === 'magnemite') {\n\t\t\tif (counter.damagingMoves.size === 1) {\n\t\t\t\t// Find the type of the current attacking move\n\t\t\t\tconst currentAttackType = counter.damagingMoves.values().next().value!.type;\n\t\t\t\t// Choose an attacking move that is of different type to the current single attack\n\t\t\t\tconst coverageMoves = [];\n\t\t\t\tfor (const moveid of movePool) {\n\t\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback)) {\n\t\t\t\t\t\tif (currentAttackType !== moveType) coverageMoves.push(moveid);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (coverageMoves.length) {\n\t\t\t\t\tconst moveid = this.sample(coverageMoves);\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\t\tmovePool, teraType, role);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add (moves.size < this.maxMoveCount) as a condition if moves is getting larger than 4 moves.\n\t\t// If you want moves to be favored but not required, add something like && this.randomChance(1, 2) to your condition.\n\n\t\t// Choose remaining moves randomly from movepool and add them to moves list:\n\t\twhile (moves.size < this.maxMoveCount && movePool.length) {\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) {\n\t\t\t\tfor (const moveid of movePool) {\n\t\t\t\t\tmoves.add(moveid);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst moveid = this.sample(movePool);\n\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t\tfor (const pair of MOVE_PAIRS) {\n\t\t\t\tif (moveid === pair[0] && movePool.includes(pair[1])) {\n\t\t\t\t\tcounter = this.addMove(pair[1], moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\t\tmovePool, teraType, role);\n\t\t\t\t}\n\t\t\t\tif (moveid === pair[1] && movePool.includes(pair[0])) {\n\t\t\t\t\tcounter = this.addMove(pair[0], moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\t\tmovePool, teraType, role);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn moves;\n\t}\n\n\toverride getAbility(\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tabilities: string[],\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tteraType: string,\n\t\trole: RandomTeamsTypes.Role,\n\t): string {\n\t\tif (abilities.length <= 1) return abilities[0];\n\n\t\t// Hard-code abilities here\n\t\tif (species.id === 'rowlet' && counter.get('Grass')) return 'Overgrow';\n\t\tif (species.id === 'riolu') return moves.has('copycat') ? 'Prankster' : 'Inner Focus';\n\t\tif (species.id === 'pikipek' && counter.get('skilllink')) return 'Skill Link';\n\t\tif (species.id === 'psyduck' && teamDetails.rain) return 'Swift Swim';\n\n\t\tconst abilityAllowed: string[] = [];\n\t\t// Obtain a list of abilities that are allowed (not culled)\n\t\tfor (const ability of abilities) {\n\t\t\tif (!this.shouldCullAbility(\n\t\t\t\tability, types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role\n\t\t\t)) {\n\t\t\t\tabilityAllowed.push(ability);\n\t\t\t}\n\t\t}\n\n\t\t// Pick a random allowed ability\n\t\tif (abilityAllowed.length >= 1) return this.sample(abilityAllowed);\n\n\t\t// If all abilities are rejected, prioritize weather abilities over non-weather abilities\n\t\tif (!abilityAllowed.length) {\n\t\t\tconst weatherAbilities = abilities.filter(\n\t\t\t\ta => ['Chlorophyll', 'Hydration', 'Sand Force', 'Sand Rush', 'Slush Rush', 'Solar Power', 'Swift Swim'].includes(a)\n\t\t\t);\n\t\t\tif (weatherAbilities.length) return this.sample(weatherAbilities);\n\t\t}\n\n\t\t// Pick a random ability\n\t\treturn this.sample(abilities);\n\t}\n\n\toverride getPriorityItem(\n\t\tability: string,\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tteraType: string,\n\t\trole: RandomTeamsTypes.Role,\n\t) {\n\t\tif (species.requiredItems) {\n\t\t\treturn this.sample(species.requiredItems);\n\t\t}\n\n\t\tif (moves.has('focusenergy')) return 'Scope Lens';\n\t\tif (moves.has('thief')) return '';\n\t\tif (moves.has('trick') || moves.has('switcheroo')) return 'Choice Scarf';\n\n\t\tif (moves.has('acrobatics')) return ability === 'Unburden' ? 'Oran Berry' : '';\n\t\tif (moves.has('auroraveil') || moves.has('lightscreen') && moves.has('reflect')) return 'Light Clay';\n\n\t\tif (ability === 'Guts' && moves.has('facade')) return 'Flame Orb';\n\t\tif (ability === 'Quick Feet') return 'Toxic Orb';\n\n\t\tif (['Harvest', 'Ripen', 'Unburden'].includes(ability) || moves.has('bellydrum')) return 'Oran Berry';\n\t}\n\n\toverride getItem(\n\t\tability: string,\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tteraType: string,\n\t\trole: RandomTeamsTypes.Role,\n\t): string {\n\t\tif (role === 'Fast Attacker' && (!counter.get('Status') || (counter.get('Status') === 1 && moves.has('destinybond')))) {\n\t\t\treturn 'Choice Scarf';\n\t\t}\n\t\tif (['Setup Sweeper', 'Wallbreaker'].includes(role)) {\n\t\t\treturn 'Life Orb';\n\t\t}\n\t\treturn 'Eviolite';\n\t}\n\n\toverride getLevel(\n\t\tspecies: Species,\n\t): number {\n\t\tif (this.adjustLevel) return this.adjustLevel;\n\t\t// This should frankly always work, but 10 is the default level in case something bad happens\n\t\treturn this.randomSets[species.id]?.level || 10;\n\t}\n\n\toverride getForme(species: Species): string {\n\t\tif (typeof species.battleOnly === 'string') {\n\t\t\t// Only change the forme. The species has custom moves, and may have different typing and requirements.\n\t\t\treturn species.battleOnly;\n\t\t}\n\t\tif (species.cosmeticFormes) return this.sample([species.name].concat(species.cosmeticFormes));\n\n\t\t// Consolidate mostly-cosmetic formes, at least for the purposes of Random Battles\n\t\tif (['Poltchageist', 'Sinistea'].includes(species.baseSpecies)) {\n\t\t\treturn this.sample([species.name].concat(species.otherFormes!));\n\t\t}\n\t\treturn species.name;\n\t}\n\n\toverride randomSet(\n\t\ts: string | Species,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails = {},\n\t\tisLead = false,\n\t\tisDoubles = false\n\t): RandomTeamsTypes.RandomSet {\n\t\tconst species = this.dex.species.get(s);\n\t\tconst forme = this.getForme(species);\n\t\tconst sets = this.randomSets[species.id][\"sets\"];\n\t\tconst possibleSets = [];\n\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\n\n\t\tfor (const set of sets) {\n\t\t\t// Prevent Tera Blast user if the team already has one, or if Terastallizion is prevented.\n\t\t\tif ((teamDetails.teraBlast || ruleTable.has('terastalclause')) && set.role === 'Tera Blast user') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tpossibleSets.push(set);\n\t\t}\n\t\tconst set = this.sampleIfArray(possibleSets);\n\t\tconst role = set.role;\n\t\tconst movePool: string[] = [];\n\t\tfor (const movename of set.movepool) {\n\t\t\tmovePool.push(this.dex.moves.get(movename).id);\n\t\t}\n\t\tconst teraTypes = set.teraTypes;\n\t\tlet teraType = this.sampleIfArray(teraTypes);\n\n\t\tlet ability = '';\n\t\tlet item = undefined;\n\n\t\tconst evs = { hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85 };\n\t\tconst ivs = { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31 };\n\n\t\tconst types = species.types;\n\t\tconst abilities = set.abilities!;\n\n\t\t// Get moves\n\t\tconst moves = this.randomMoveset(types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType!, role);\n\t\tconst counter = this.queryMoves(moves, species, teraType!, abilities);\n\n\t\t// Get ability\n\t\tability = this.getAbility(types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType!, role);\n\n\t\t// Get items\n\t\t// First, the priority items\n\t\titem = this.getPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, isDoubles, teraType!, role);\n\t\tif (item === undefined) {\n\t\t\titem = this.getItem(ability, types, moves, counter, teamDetails, species, isLead, teraType!, role);\n\t\t}\n\n\t\t// Get level\n\t\tconst level = this.getLevel(species);\n\n\t\t// Prepare optimal HP for Belly Drum and Life Orb\n\t\tlet hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\n\t\tlet targetHP = hp;\n\t\tconst minimumHP = Math.floor(Math.floor(2 * species.baseStats.hp + 100) * level / 100 + 10);\n\t\tif (item === \"Life Orb\") {\n\t\t\ttargetHP = Math.floor(hp / 10) * 10 - 1;\n\t\t} else if (moves.has(\"bellydrum\")) {\n\t\t\ttargetHP = Math.floor(hp / 2) * 2;\n\t\t}\n\t\t// If the difference is too extreme, don't adjust HP\n\t\tif (hp > targetHP && hp - targetHP <= 3 && targetHP >= minimumHP) {\n\t\t\t// If setting evs to 0 is sufficient, decrement evs, otherwise decrement ivs with evs set to 0\n\t\t\tif (Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + 100) * level / 100 + 10) >= targetHP) {\n\t\t\t\tevs.hp = 0;\n\t\t\t\thp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\n\t\t\t\twhile (hp > targetHP) {\n\t\t\t\t\tivs.hp -= 1;\n\t\t\t\t\thp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile (hp > targetHP) {\n\t\t\t\t\tevs.hp -= 4;\n\t\t\t\t\thp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Minimize confusion damage\n\t\tconst noAttackStatMoves = [...moves].every(m => {\n\t\t\tconst move = this.dex.moves.get(m);\n\t\t\tif (move.damageCallback || move.damage) return true;\n\t\t\tif (move.id === 'shellsidearm') return false;\n\t\t\tif (move.id === 'terablast' && (\n\t\t\t\tspecies.id === 'porygon' || species.baseStats.atk > species.baseStats.spa)\n\t\t\t) return false;\n\t\t\treturn move.category !== 'Physical' || move.id === 'bodypress' || move.id === 'foulplay';\n\t\t});\n\n\t\tif (noAttackStatMoves) {\n\t\t\tevs.atk = 0;\n\t\t\tivs.atk = 0;\n\t\t}\n\n\t\tif (moves.has('gyroball') || moves.has('trickroom')) {\n\t\t\tevs.spe = 0;\n\t\t\tivs.spe = 0;\n\t\t}\n\n\t\t// Enforce Tera Type after all set generation is done to prevent infinite generation\n\t\tif (this.forceTeraType) teraType = this.forceTeraType;\n\n\t\t// shuffle moves to add more randomness to camomons\n\t\tconst shuffledMoves = Array.from(moves);\n\t\tthis.prng.shuffle(shuffledMoves);\n\t\treturn {\n\t\t\tname: species.baseSpecies,\n\t\t\tspecies: forme,\n\t\t\tgender: species.gender,\n\t\t\tshiny: this.randomChance(1, 1024),\n\t\t\tlevel,\n\t\t\tmoves: shuffledMoves,\n\t\t\tability,\n\t\t\tevs,\n\t\t\tivs,\n\t\t\titem,\n\t\t\tteraType,\n\t\t\trole,\n\t\t};\n\t}\n\n\toverride randomSets: { [species: string]: RandomTeamsTypes.RandomSpeciesData } = require('./sets.json');\n\n\trandomBabyTeam() {\n\t\tthis.enforceNoDirectCustomBanlistChanges();\n\n\t\tconst seed = this.prng.getSeed();\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\n\n\t\t// For Monotype\n\t\tconst isMonotype = !!this.forceMonotype || ruleTable.has('sametypeclause');\n\t\tconst typePool = this.dex.types.names().filter(name => name !== \"Stellar\");\n\t\tconst type = this.forceMonotype || this.sample(typePool);\n\n\t\tconst baseFormes = new Set<string>();\n\n\t\tconst typeCount = new Utils.Multiset<string>();\n\t\tconst typeComboCount = new Utils.Multiset<string>();\n\t\tconst typeWeaknesses = new Utils.Multiset<string>();\n\t\tconst typeDoubleWeaknesses = new Utils.Multiset<string>();\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\n\n\t\tconst pokemonList = Object.keys(this.randomSets);\n\t\tconst [pokemonPool, baseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, pokemonList);\n\n\t\twhile (baseSpeciesPool.length && pokemon.length < this.maxTeamSize) {\n\t\t\tconst baseSpecies = this.sampleNoReplace(baseSpeciesPool);\n\t\t\tconst species = this.dex.species.get(this.sample(pokemonPool[baseSpecies]));\n\t\t\tif (!species.exists) continue;\n\n\t\t\t// Limit to one of each species (Species Clause)\n\t\t\tif (baseFormes.has(species.baseSpecies)) continue;\n\n\t\t\t// Illusion shouldn't be on the last slot\n\t\t\tif (species.baseSpecies === 'Zorua' && pokemon.length >= (this.maxTeamSize - 1)) continue;\n\n\t\t\tconst types = species.types;\n\t\t\tconst typeCombo = types.slice().sort().join();\n\t\t\tconst weakToFreezeDry = (\n\t\t\t\tthis.dex.getEffectiveness('Ice', species) > 0 ||\n\t\t\t\t(this.dex.getEffectiveness('Ice', species) > -2 && types.includes('Water'))\n\t\t\t);\n\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\n\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\n\n\t\t\tif (!isMonotype && !this.forceMonotype) {\n\t\t\t\tlet skip = false;\n\n\t\t\t\t// Limit two of any type\n\t\t\t\tfor (const typeName of types) {\n\t\t\t\t\tif (typeCount.get(typeName) >= 2 * limitFactor) {\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (skip) continue;\n\n\t\t\t\t// Limit three weak to any type, and one double weak to any type\n\t\t\t\tfor (const typeName of this.dex.types.names()) {\n\t\t\t\t\t// it's weak to the type\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\n\t\t\t\t\t\tif (typeWeaknesses.get(typeName) >= 3 * limitFactor) {\n\t\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 1) {\n\t\t\t\t\t\tif (typeDoubleWeaknesses.get(typeName) >= limitFactor) {\n\t\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (skip) continue;\n\n\t\t\t\t// Count Dry Skin/Fluffy as Fire weaknesses\n\t\t\t\tif (\n\t\t\t\t\tthis.dex.getEffectiveness('Fire', species) === 0 &&\n\t\t\t\t\tObject.values(species.abilities).filter(a => ['Dry Skin', 'Fluffy'].includes(a)).length &&\n\t\t\t\t\ttypeWeaknesses.get('Fire') >= 3 * limitFactor\n\t\t\t\t) continue;\n\n\t\t\t\t// Limit four weak to Freeze-Dry\n\t\t\t\tif (weakToFreezeDry) {\n\t\t\t\t\tif (typeWeaknesses.get('Freeze-Dry') >= 4 * limitFactor) continue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Limit three of any type combination in Monotype\n\t\t\tif (!this.forceMonotype && isMonotype && typeComboCount.get(typeCombo) >= 3 * limitFactor) continue;\n\n\t\t\tconst set: RandomTeamsTypes.RandomSet = this.randomSet(species, teamDetails, false, false);\n\t\t\tpokemon.push(set);\n\n\t\t\t// Don't bother tracking details for the last Pokemon\n\t\t\tif (pokemon.length === this.maxTeamSize) break;\n\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\n\t\t\tbaseFormes.add(species.baseSpecies);\n\n\t\t\t// Increment type counters\n\t\t\tfor (const typeName of types) {\n\t\t\t\ttypeCount.add(typeName);\n\t\t\t}\n\t\t\ttypeComboCount.add(typeCombo);\n\n\t\t\t// Increment weakness counter\n\t\t\tfor (const typeName of this.dex.types.names()) {\n\t\t\t\t// it's weak to the type\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\n\t\t\t\t\ttypeWeaknesses.add(typeName);\n\t\t\t\t}\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 1) {\n\t\t\t\t\ttypeDoubleWeaknesses.add(typeName);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Count Dry Skin/Fluffy as Fire weaknesses\n\t\t\tif (['Dry Skin', 'Fluffy'].includes(set.ability) && this.dex.getEffectiveness('Fire', species) === 0) {\n\t\t\t\ttypeWeaknesses.add('Fire');\n\t\t\t}\n\t\t\tif (weakToFreezeDry) typeWeaknesses.add('Freeze-Dry');\n\n\t\t\t// Track what the team has\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails.rain = 1;\n\t\t\tif (set.ability === 'Drought' || set.moves.includes('sunnyday')) teamDetails.sun = 1;\n\t\t\tif (set.ability === 'Sand Stream') teamDetails.sand = 1;\n\t\t\tif (set.ability === 'Snow Warning' || set.moves.includes('snowscape') || set.moves.includes('chillyreception')) {\n\t\t\t\tteamDetails.snow = 1;\n\t\t\t}\n\t\t\tif (set.moves.includes('spikes')) {\n\t\t\t\tteamDetails.spikes = (teamDetails.spikes || 0) + 1;\n\t\t\t}\n\t\t\tif (set.moves.includes('stealthrock')) teamDetails.stealthRock = 1;\n\t\t\tif (set.moves.includes('stickyweb')) teamDetails.stickyWeb = 1;\n\t\t\tif (set.moves.includes('toxicspikes') || set.ability === 'Toxic Debris') teamDetails.toxicSpikes = 1;\n\t\t\tif (set.moves.includes('defog')) teamDetails.defog = 1;\n\t\t\tif (set.moves.includes('rapidspin') || set.moves.includes('mortalspin')) teamDetails.rapidSpin = 1;\n\t\t\tif (set.moves.includes('auroraveil') || (set.moves.includes('reflect') && set.moves.includes('lightscreen'))) {\n\t\t\t\tteamDetails.screens = 1;\n\t\t\t}\n\t\t\tif (set.role === 'Tera Blast user') {\n\t\t\t\tteamDetails.teraBlast = 1;\n\t\t\t}\n\t\t}\n\t\t// large teams sometimes cannot be built, and monotype is also at user's own risk\n\t\tif (pokemon.length < this.maxTeamSize && pokemon.length < 12 && !isMonotype) {\n\t\t\tthrow new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\n\t\t}\n\n\t\treturn pokemon;\n\t}\n}\n\nexport default RandomBabyTeams;\n"],
  "mappings": "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",
  "names": ["moveid", "set"]
}
