{
  "version": 3,
  "sources": ["../../../../data/random-battles/gen9/teams.ts"],
  "sourcesContent": ["import { Dex, toID } from '../../../sim/dex';\nimport { Utils } from '../../../lib';\nimport { PRNG, type PRNGSeed } from '../../../sim/prng';\nimport { type RuleTable } from '../../../sim/dex-formats';\nimport { Tags } from './../../tags';\nimport { Teams } from '../../../sim/teams';\n\nexport interface TeamData {\n\ttypeCount: { [k: string]: number };\n\ttypeComboCount: { [k: string]: number };\n\tbaseFormes: { [k: string]: number };\n\tmegaCount?: number;\n\tzCount?: number;\n\twantsTeraCount?: number;\n\thas: { [k: string]: number };\n\tforceResult: boolean;\n\tweaknesses: { [k: string]: number };\n\tresistances: { [k: string]: number };\n\tweather?: string;\n\teeveeLimCount?: number;\n\tgigantamax?: boolean;\n}\nexport interface BattleFactorySpecies {\n\tsets: BattleFactorySet[];\n\tweight: number;\n}\ninterface BattleFactorySet {\n\tspecies: string;\n\tweight: number;\n\titem: string[];\n\tability: string[];\n\tnature: string[];\n\tmoves: string[][];\n\tteraType: string[];\n\tgender?: string;\n\twantsTera?: boolean;\n\tevs?: Partial<StatsTable>;\n\tivs?: Partial<StatsTable>;\n\tshiny?: boolean;\n}\ninterface BSSFactorySet {\n\tspecies: string;\n\tweight: number;\n\titem: string[];\n\tability: string;\n\tnature: string;\n\tmoves: string[][];\n\tteraType: string[];\n\tgender?: string;\n\twantsTera?: boolean;\n\tevs: number[];\n\tivs?: number[];\n}\nexport class MoveCounter extends Utils.Multiset<string> {\n\tdamagingMoves: Set<Move>;\n\tbasePowerMoves: Set<Move>;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.damagingMoves = new Set();\n\t\tthis.basePowerMoves = new Set();\n\t}\n}\n\ntype MoveEnforcementChecker = (\n\tmovePool: string[], moves: Set<string>, abilities: string[], types: string[],\n\tcounter: MoveCounter, species: Species, teamDetails: RandomTeamsTypes.TeamDetails,\n\tisLead: boolean, isDoubles: boolean, teraType: string, role: RandomTeamsTypes.Role,\n) => boolean;\n\n// Moves that restore HP:\nconst RECOVERY_MOVES = [\n\t'healorder', 'milkdrink', 'moonlight', 'morningsun', 'recover', 'roost', 'shoreup', 'slackoff', 'softboiled', 'strengthsap', 'synthesis',\n];\n// Moves that drop stats:\nconst CONTRARY_MOVES = [\n\t'armorcannon', 'closecombat', 'leafstorm', 'makeitrain', 'overheat', 'spinout', 'superpower', 'vcreate',\n];\n// Moves that boost Attack:\nconst PHYSICAL_SETUP = [\n\t'bellydrum', 'bulkup', 'coil', 'curse', 'dragondance', 'honeclaws', 'howl', 'meditate', 'poweruppunch', 'swordsdance', 'tidyup', 'victorydance',\n];\n// Moves which boost Special Attack:\nconst SPECIAL_SETUP = [\n\t'calmmind', 'chargebeam', 'geomancy', 'nastyplot', 'quiverdance', 'tailglow', 'takeheart', 'torchsong',\n];\n// Moves that boost Attack AND Special Attack:\nconst MIXED_SETUP = [\n\t'clangoroussoul', 'growth', 'happyhour', 'holdhands', 'noretreat', 'shellsmash', 'workup',\n];\n// Some moves that only boost Speed:\nconst SPEED_SETUP = [\n\t'agility', 'autotomize', 'flamecharge', 'rockpolish', 'snowscape', 'trailblaze',\n];\n// Conglomerate for ease of access\nconst SETUP = [\n\t'acidarmor', 'agility', 'autotomize', 'bellydrum', 'bulkup', 'calmmind', 'clangoroussoul', 'coil', 'cosmicpower', 'curse', 'dragondance',\n\t'flamecharge', 'growth', 'honeclaws', 'howl', 'irondefense', 'meditate', 'nastyplot', 'noretreat', 'poweruppunch', 'quiverdance',\n\t'rockpolish', 'shellsmash', 'shiftgear', 'swordsdance', 'tailglow', 'takeheart', 'tidyup', 'trailblaze', 'workup', 'victorydance',\n];\nconst SPEED_CONTROL = [\n\t'electroweb', 'glare', 'icywind', 'lowsweep', 'nuzzle', 'quash', 'tailwind', 'thunderwave', 'trickroom',\n];\n// Moves that shouldn't be the only STAB moves:\nconst NO_STAB = [\n\t'accelerock', 'aquajet', 'bounce', 'breakingswipe', 'bulletpunch', 'chatter', 'chloroblast', 'clearsmog', 'covet',\n\t'dragontail', 'doomdesire', 'electroweb', 'eruption', 'explosion', 'fakeout', 'feint', 'flamecharge', 'flipturn', 'futuresight',\n\t'grassyglide', 'iceshard', 'icywind', 'incinerate', 'infestation', 'machpunch', 'meteorbeam', 'mortalspin', 'nuzzle', 'pluck', 'pursuit',\n\t'quickattack', 'rapidspin', 'reversal', 'selfdestruct', 'shadowsneak', 'skydrop', 'snarl', 'strugglebug', 'suckerpunch', 'trailblaze',\n\t'uturn', 'vacuumwave', 'voltswitch', 'watershuriken', 'waterspout',\n];\n// Hazard-setting moves\nconst HAZARDS = [\n\t'spikes', 'stealthrock', 'stickyweb', 'toxicspikes',\n];\n// Protect and its variants\nconst PROTECT_MOVES = [\n\t'banefulbunker', 'burningbulwark', 'protect', 'silktrap', 'spikyshield',\n];\n// Moves that switch the user out\nconst PIVOT_MOVES = [\n\t'chillyreception', 'flipturn', 'partingshot', 'shedtail', 'teleport', 'uturn', 'voltswitch',\n];\n\n// Moves that should be paired together when possible\nconst MOVE_PAIRS = [\n\t['lightscreen', 'reflect'],\n\t['sleeptalk', 'rest'],\n\t['protect', 'wish'],\n\t['leechseed', 'protect'],\n\t['leechseed', 'substitute'],\n];\n\n/** Pokemon who always want priority STAB, and are fine with it as its only STAB move of that type */\nconst PRIORITY_POKEMON = [\n\t'breloom', 'brutebonnet', 'cacturne', 'honchkrow', 'mimikyu', 'ragingbolt', 'scizor',\n];\n\n/** Pokemon who should never be in the lead slot */\nconst NO_LEAD_POKEMON = [\n\t'Zacian', 'Zamazenta',\n];\nconst DOUBLES_NO_LEAD_POKEMON = [\n\t'Basculegion', 'Houndstone', 'Iron Bundle', 'Roaring Moon', 'Zacian', 'Zamazenta',\n];\n\nconst DEFENSIVE_TERA_BLAST_USERS = [\n\t'alcremie', 'bellossom', 'comfey', 'fezandipiti', 'florges', 'raikou',\n];\n\nfunction sereneGraceBenefits(move: Move) {\n\treturn move.secondary?.chance && move.secondary.chance > 20 && move.secondary.chance < 100;\n}\n\nexport class RandomTeams {\n\treadonly dex: ModdedDex;\n\tgen: number;\n\tfactoryTier: string;\n\tformat: Format;\n\tprng: PRNG;\n\tnoStab: string[];\n\treadonly maxTeamSize: number;\n\treadonly adjustLevel: number | null;\n\treadonly maxMoveCount: number;\n\treadonly forceMonotype: string | undefined;\n\treadonly forceTeraType: string | undefined;\n\n\t/**\n\t * Checkers for move enforcement based on types or other factors\n\t *\n\t * returns true to try to force the move type, false otherwise.\n\t */\n\tmoveEnforcementCheckers: { [k: string]: MoveEnforcementChecker };\n\n\t/** Used by .getPools() */\n\tprivate poolsCacheKey: [string | undefined, number | undefined, RuleTable | undefined, boolean] | undefined;\n\tprivate cachedPool: number[] | undefined;\n\tprivate cachedSpeciesPool: Species[] | undefined;\n\tprotected cachedStatusMoves: ID[];\n\n\tconstructor(format: Format | string, prng: PRNG | PRNGSeed | null) {\n\t\tformat = Dex.formats.get(format);\n\t\tthis.dex = Dex.forFormat(format);\n\t\tthis.gen = this.dex.gen;\n\t\tthis.noStab = NO_STAB;\n\n\t\tconst ruleTable = Dex.formats.getRuleTable(format);\n\t\tthis.maxTeamSize = ruleTable.maxTeamSize;\n\t\tthis.adjustLevel = ruleTable.adjustLevel;\n\t\tthis.maxMoveCount = ruleTable.maxMoveCount;\n\t\tconst forceMonotype = ruleTable.valueRules.get('forcemonotype');\n\t\tthis.forceMonotype = forceMonotype && this.dex.types.get(forceMonotype).exists ?\n\t\t\tthis.dex.types.get(forceMonotype).name : undefined;\n\t\tconst forceTeraType = ruleTable.valueRules.get('forceteratype');\n\t\tthis.forceTeraType = forceTeraType && this.dex.types.get(forceTeraType).exists ?\n\t\t\tthis.dex.types.get(forceTeraType).name : undefined;\n\n\t\tthis.factoryTier = '';\n\t\tthis.format = format;\n\t\tthis.prng = PRNG.get(prng);\n\n\t\tthis.moveEnforcementCheckers = {\n\t\t\tBug: (movePool, moves, abilities, types, counter) => (\n\t\t\t\tmovePool.includes('megahorn') || movePool.includes('xscissor') ||\n\t\t\t\t(!counter.get('Bug') && (types.includes('Electric') || types.includes('Psychic')))\n\t\t\t),\n\t\t\tDark: (\n\t\t\t\tmovePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles, teraType, role\n\t\t\t) => {\n\t\t\t\tif (\n\t\t\t\t\tcounter.get('Dark') < 2 && PRIORITY_POKEMON.includes(species.id) && role === 'Wallbreaker'\n\t\t\t\t) return true;\n\t\t\t\treturn !counter.get('Dark');\n\t\t\t},\n\t\t\tDragon: (movePool, moves, abilities, types, counter) => !counter.get('Dragon'),\n\t\t\tElectric: (movePool, moves, abilities, types, counter) => !counter.get('Electric'),\n\t\t\tFairy: (movePool, moves, abilities, types, counter) => !counter.get('Fairy'),\n\t\t\tFighting: (movePool, moves, abilities, types, counter) => !counter.get('Fighting'),\n\t\t\tFire: (movePool, moves, abilities, types, counter, species) => !counter.get('Fire'),\n\t\t\tFlying: (movePool, moves, abilities, types, counter) => !counter.get('Flying'),\n\t\t\tGhost: (movePool, moves, abilities, types, counter) => !counter.get('Ghost'),\n\t\t\tGrass: (movePool, moves, abilities, types, counter, species) => (\n\t\t\t\t!counter.get('Grass') && (\n\t\t\t\t\tmovePool.includes('leafstorm') || species.baseStats.atk >= 100 ||\n\t\t\t\t\ttypes.includes('Electric') || abilities.includes('Seed Sower')\n\t\t\t\t)\n\t\t\t),\n\t\t\tGround: (movePool, moves, abilities, types, counter) => !counter.get('Ground'),\n\t\t\tIce: (movePool, moves, abilities, types, counter) => (\n\t\t\t\tmovePool.includes('freezedry') || movePool.includes('blizzard') || !counter.get('Ice')\n\t\t\t),\n\t\t\tNormal: (movePool, moves, types, counter) => (movePool.includes('boomburst') || movePool.includes('hypervoice')),\n\t\t\tPoison: (movePool, moves, abilities, types, counter) => {\n\t\t\t\tif (types.includes('Ground')) return false;\n\t\t\t\treturn !counter.get('Poison');\n\t\t\t},\n\t\t\tPsychic: (movePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles) => {\n\t\t\t\tif ((isDoubles || species.id === 'bruxish') && movePool.includes('psychicfangs')) return true;\n\t\t\t\tif (species.id === 'hoopaunbound' && movePool.includes('psychic')) return true;\n\t\t\t\tif (['Dark', 'Steel', 'Water'].some(m => types.includes(m))) return false;\n\t\t\t\treturn !counter.get('Psychic');\n\t\t\t},\n\t\t\tRock: (movePool, moves, abilities, types, counter, species) => !counter.get('Rock') && species.baseStats.atk >= 80,\n\t\t\tSteel: (movePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles) => (\n\t\t\t\t!counter.get('Steel') &&\n\t\t\t\t(isDoubles || species.baseStats.atk >= 90 || movePool.includes('gigatonhammer') || movePool.includes('makeitrain'))\n\t\t\t),\n\t\t\tWater: (movePool, moves, abilities, types, counter) => (!counter.get('Water') && !types.includes('Ground')),\n\t\t};\n\t\tthis.poolsCacheKey = undefined;\n\t\tthis.cachedPool = undefined;\n\t\tthis.cachedSpeciesPool = undefined;\n\t\tthis.cachedStatusMoves = this.dex.moves.all().filter(move => move.category === 'Status').map(move => move.id);\n\t}\n\n\tsetSeed(prng?: PRNG | PRNGSeed) {\n\t\tthis.prng = PRNG.get(prng);\n\t}\n\n\tgetTeam(options: PlayerOptions | null = null): PokemonSet[] {\n\t\tconst generatorName = (\n\t\t\ttypeof this.format.team === 'string' && this.format.team.startsWith('random')\n\t\t) ? this.format.team + 'Team' : '';\n\t\t// @ts-expect-error property access\n\t\treturn this[generatorName || 'randomTeam'](options);\n\t}\n\n\trandomChance(numerator: number, denominator: number) {\n\t\treturn this.prng.randomChance(numerator, denominator);\n\t}\n\n\tsample<T>(items: readonly T[]): T {\n\t\treturn this.prng.sample(items);\n\t}\n\n\tsampleIfArray<T>(item: T | T[]): T {\n\t\tif (Array.isArray(item)) {\n\t\t\treturn this.sample(item);\n\t\t}\n\t\treturn item;\n\t}\n\n\trandom(m?: number, n?: number) {\n\t\treturn this.prng.random(m, n);\n\t}\n\n\t/**\n\t * Remove an element from an unsorted array significantly faster\n\t * than .splice\n\t */\n\tfastPop(list: any[], index: number) {\n\t\t// If an array doesn't need to be in order, replacing the\n\t\t// element at the given index with the removed element\n\t\t// is much, much faster than using list.splice(index, 1).\n\t\tconst length = list.length;\n\t\tif (index < 0 || index >= list.length) {\n\t\t\t// sanity check\n\t\t\tthrow new Error(`Index ${index} out of bounds for given array`);\n\t\t}\n\n\t\tconst element = list[index];\n\t\tlist[index] = list[length - 1];\n\t\tlist.pop();\n\t\treturn element;\n\t}\n\n\t/**\n\t * Remove a random element from an unsorted array and return it.\n\t * Uses the battle's RNG if in a battle.\n\t */\n\tsampleNoReplace(list: any[]) {\n\t\tconst length = list.length;\n\t\tif (length === 0) return null;\n\t\tconst index = this.random(length);\n\t\treturn this.fastPop(list, index);\n\t}\n\n\t/**\n\t * Removes n random elements from an unsorted array and returns them.\n\t * If n is less than the array's length, randomly removes and returns all the elements\n\t * in the array (so the returned array could have length < n).\n\t */\n\tmultipleSamplesNoReplace<T>(list: T[], n: number): T[] {\n\t\tconst samples = [];\n\t\twhile (samples.length < n && list.length) {\n\t\t\tsamples.push(this.sampleNoReplace(list));\n\t\t}\n\n\t\treturn samples;\n\t}\n\n\t/**\n\t * Check if user has directly tried to ban/unban/restrict things in a custom battle.\n\t * Doesn't count bans nested inside other formats/rules.\n\t */\n\tprivate hasDirectCustomBanlistChanges() {\n\t\tif (this.format.ruleTable?.has('+pokemontag:cap')) return false;\n\t\tif (this.format.banlist.length || this.format.restricted.length || this.format.unbanlist.length) return true;\n\t\tif (!this.format.customRules) return false;\n\t\tfor (const rule of this.format.customRules) {\n\t\t\tfor (const banlistOperator of ['-', '+', '*']) {\n\t\t\t\tif (rule.startsWith(banlistOperator)) return true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Inform user when custom bans are unsupported in a team generator.\n\t */\n\tprotected enforceNoDirectCustomBanlistChanges() {\n\t\tif (this.hasDirectCustomBanlistChanges()) {\n\t\t\tthrow new Error(`Custom bans are not currently supported in ${this.format.name}.`);\n\t\t}\n\t}\n\n\t/**\n\t * Inform user when complex bans are unsupported in a team generator.\n\t */\n\tprotected enforceNoDirectComplexBans() {\n\t\tif (!this.format.customRules) return false;\n\t\tfor (const rule of this.format.customRules) {\n\t\t\tif (rule.includes('+') && !rule.startsWith('+')) {\n\t\t\t\tthrow new Error(`Complex bans are not currently supported in ${this.format.name}.`);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Validate set element pool size is sufficient to support size requirements after simple bans.\n\t */\n\tprivate enforceCustomPoolSizeNoComplexBans(\n\t\teffectTypeName: string,\n\t\tbasicEffectPool: BasicEffect[],\n\t\trequiredCount: number,\n\t\trequiredCountExplanation: string\n\t) {\n\t\tif (basicEffectPool.length >= requiredCount) return;\n\t\tthrow new Error(`Legal ${effectTypeName} count is insufficient to support ${requiredCountExplanation} (${basicEffectPool.length} / ${requiredCount}).`);\n\t}\n\n\tqueryMoves(\n\t\tmoves: Set<string> | null,\n\t\tspecies: Species,\n\t\tteraType: string,\n\t\tabilities: string[],\n\t): MoveCounter {\n\t\t// This is primarily a helper function for random setbuilder functions.\n\t\tconst counter = new MoveCounter();\n\t\tconst types = species.types;\n\t\tif (!moves?.size) return counter;\n\n\t\tconst categories = { Physical: 0, Special: 0, Status: 0 };\n\n\t\t// Iterate through all moves we've chosen so far and keep track of what they do:\n\t\tfor (const moveid of moves) {\n\t\t\tconst move = this.dex.moves.get(moveid);\n\n\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\tif (move.damage || move.damageCallback) {\n\t\t\t\t// Moves that do a set amount of damage:\n\t\t\t\tcounter.add('damage');\n\t\t\t\tcounter.damagingMoves.add(move);\n\t\t\t} else {\n\t\t\t\t// Are Physical/Special/Status moves:\n\t\t\t\tcategories[move.category]++;\n\t\t\t}\n\t\t\t// Moves that have a low base power:\n\t\t\tif (moveid === 'lowkick' || (move.basePower && move.basePower <= 60 && moveid !== 'rapidspin')) {\n\t\t\t\tcounter.add('technician');\n\t\t\t}\n\t\t\t// Moves that hit up to 5 times:\n\t\t\tif (move.multihit && Array.isArray(move.multihit) && move.multihit[1] === 5) counter.add('skilllink');\n\t\t\tif (move.recoil || move.hasCrashDamage) counter.add('recoil');\n\t\t\tif (move.drain) counter.add('drain');\n\t\t\t// Moves which have a base power:\n\t\t\tif (move.basePower || move.basePowerCallback) {\n\t\t\t\tcounter.basePowerMoves.add(move);\n\t\t\t\tif (!this.noStab.includes(moveid) || PRIORITY_POKEMON.includes(species.id) && move.priority > 0) {\n\t\t\t\t\tcounter.add(moveType);\n\t\t\t\t\tif (types.includes(moveType)) counter.add('stab');\n\t\t\t\t\tif (teraType === moveType) counter.add('stabtera');\n\t\t\t\t\tcounter.damagingMoves.add(move);\n\t\t\t\t}\n\t\t\t\tif (move.flags['bite']) counter.add('strongjaw');\n\t\t\t\tif (move.flags['punch']) counter.add('ironfist');\n\t\t\t\tif (move.flags['sound']) counter.add('sound');\n\t\t\t\tif (move.priority > 0 || (moveid === 'grassyglide' && abilities.includes('Grassy Surge'))) {\n\t\t\t\t\tcounter.add('priority');\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Moves with secondary effects:\n\t\t\tif (move.secondary || move.hasSheerForce) {\n\t\t\t\tcounter.add('sheerforce');\n\t\t\t\tif (sereneGraceBenefits(move)) {\n\t\t\t\t\tcounter.add('serenegrace');\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Moves with low accuracy:\n\t\t\tif (move.accuracy && move.accuracy !== true && move.accuracy < 90) counter.add('inaccurate');\n\n\t\t\t// Moves that change stats:\n\t\t\tif (RECOVERY_MOVES.includes(moveid)) counter.add('recovery');\n\t\t\tif (CONTRARY_MOVES.includes(moveid)) counter.add('contrary');\n\t\t\tif (PHYSICAL_SETUP.includes(moveid)) counter.add('physicalsetup');\n\t\t\tif (SPECIAL_SETUP.includes(moveid)) counter.add('specialsetup');\n\t\t\tif (MIXED_SETUP.includes(moveid)) counter.add('mixedsetup');\n\t\t\tif (SPEED_SETUP.includes(moveid)) counter.add('speedsetup');\n\t\t\tif (SPEED_CONTROL.includes(moveid)) counter.add('speedcontrol');\n\t\t\tif (SETUP.includes(moveid)) counter.add('setup');\n\t\t\tif (HAZARDS.includes(moveid)) counter.add('hazards');\n\t\t}\n\n\t\tcounter.set('Physical', Math.floor(categories['Physical']));\n\t\tcounter.set('Special', Math.floor(categories['Special']));\n\t\tcounter.set('Status', categories['Status']);\n\t\treturn counter;\n\t}\n\n\tcullMovePool(\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tabilities: string[],\n\t\tcounter: MoveCounter,\n\t\tmovePool: string[],\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tteraType: string,\n\t\trole: RandomTeamsTypes.Role,\n\t): void {\n\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t// If we have two unfilled moves and only one unpaired move, cull the unpaired move.\n\t\tif (moves.size === this.maxMoveCount - 2) {\n\t\t\tconst unpairedMoves = [...movePool];\n\t\t\tfor (const pair of MOVE_PAIRS) {\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[0]));\n\t\t\t\t\tthis.fastPop(unpairedMoves, unpairedMoves.indexOf(pair[1]));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (unpairedMoves.length === 1) {\n\t\t\t\tthis.fastPop(movePool, movePool.indexOf(unpairedMoves[0]));\n\t\t\t}\n\t\t}\n\n\t\t// These moves are paired, and shouldn't appear if there is not room for them both.\n\t\tif (moves.size === this.maxMoveCount - 1) {\n\t\t\tfor (const pair of MOVE_PAIRS) {\n\t\t\t\tif (movePool.includes(pair[0]) && movePool.includes(pair[1])) {\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[0]));\n\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(pair[1]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Develop additional move lists\n\t\tconst statusMoves = this.cachedStatusMoves;\n\n\t\t// Team-based move culls\n\t\tif (teamDetails.screens) {\n\t\t\tif (movePool.includes('auroraveil')) this.fastPop(movePool, movePool.indexOf('auroraveil'));\n\t\t\tif (movePool.length >= this.maxMoveCount + 2) {\n\t\t\t\tif (movePool.includes('reflect')) this.fastPop(movePool, movePool.indexOf('reflect'));\n\t\t\t\tif (movePool.includes('lightscreen')) this.fastPop(movePool, movePool.indexOf('lightscreen'));\n\t\t\t}\n\t\t}\n\t\tif (teamDetails.stickyWeb) {\n\t\t\tif (movePool.includes('stickyweb')) this.fastPop(movePool, movePool.indexOf('stickyweb'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\t\tif (teamDetails.stealthRock) {\n\t\t\tif (movePool.includes('stealthrock')) this.fastPop(movePool, movePool.indexOf('stealthrock'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\t\tif (teamDetails.defog || teamDetails.rapidSpin) {\n\t\t\tif (movePool.includes('defog')) this.fastPop(movePool, movePool.indexOf('defog'));\n\t\t\tif (movePool.includes('rapidspin')) this.fastPop(movePool, movePool.indexOf('rapidspin'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\t\tif (teamDetails.toxicSpikes) {\n\t\t\tif (movePool.includes('toxicspikes')) this.fastPop(movePool, movePool.indexOf('toxicspikes'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\t\tif (teamDetails.spikes && teamDetails.spikes >= 2) {\n\t\t\tif (movePool.includes('spikes')) this.fastPop(movePool, movePool.indexOf('spikes'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\t\tif (teamDetails.statusCure) {\n\t\t\tif (movePool.includes('healbell')) this.fastPop(movePool, movePool.indexOf('healbell'));\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t}\n\n\t\tif (isDoubles) {\n\t\t\tconst doublesIncompatiblePairs = [\n\t\t\t\t// In order of decreasing generalizability\n\t\t\t\t[SPEED_CONTROL, SPEED_CONTROL],\n\t\t\t\t[HAZARDS, HAZARDS],\n\t\t\t\t['rockslide', 'stoneedge'],\n\t\t\t\t[SETUP, ['fakeout', 'helpinghand']],\n\t\t\t\t[PROTECT_MOVES, 'wideguard'],\n\t\t\t\t[['fierydance', 'fireblast'], 'heatwave'],\n\t\t\t\t['dazzlinggleam', ['fleurcannon', 'moonblast']],\n\t\t\t\t['poisongas', ['toxicspikes', 'willowisp']],\n\t\t\t\t[RECOVERY_MOVES, ['healpulse', 'lifedew']],\n\t\t\t\t['healpulse', 'lifedew'],\n\t\t\t\t['haze', 'icywind'],\n\t\t\t\t[['hydropump', 'muddywater'], ['muddywater', 'scald']],\n\t\t\t\t['disable', 'encore'],\n\t\t\t\t['freezedry', 'icebeam'],\n\t\t\t\t['energyball', 'leafstorm'],\n\t\t\t\t['earthpower', 'sandsearstorm'],\n\t\t\t\t['coaching', ['helpinghand', 'howl']],\n\t\t\t];\n\n\t\t\tfor (const pair of doublesIncompatiblePairs) this.incompatibleMoves(moves, movePool, pair[0], pair[1]);\n\n\t\t\tif (role !== 'Offensive Protect') this.incompatibleMoves(moves, movePool, PROTECT_MOVES, ['flipturn', 'uturn']);\n\t\t}\n\n\t\t// General incompatibilities\n\t\tconst incompatiblePairs = [\n\t\t\t// These moves don't mesh well with other aspects of the set\n\t\t\t[statusMoves, ['healingwish', 'switcheroo', 'trick']],\n\t\t\t[SETUP, PIVOT_MOVES],\n\t\t\t[SETUP, HAZARDS],\n\t\t\t[SETUP, ['defog', 'nuzzle', 'toxic', 'yawn', 'haze']],\n\t\t\t[PHYSICAL_SETUP, PHYSICAL_SETUP],\n\t\t\t[SPECIAL_SETUP, 'thunderwave'],\n\t\t\t['substitute', PIVOT_MOVES],\n\t\t\t[SPEED_SETUP, ['aquajet', 'rest', 'trickroom']],\n\t\t\t['curse', ['irondefense', 'rapidspin']],\n\t\t\t['dragondance', 'dracometeor'],\n\t\t\t['yawn', 'roar'],\n\t\t\t['trick', 'uturn'],\n\n\t\t\t// These attacks are redundant with each other\n\t\t\t[['psychic', 'psychicnoise'], ['psyshock', 'psychicnoise']],\n\t\t\t['surf', 'hydropump'],\n\t\t\t['liquidation', 'wavecrash'],\n\t\t\t['aquajet', 'flipturn'],\n\t\t\t['gigadrain', 'leafstorm'],\n\t\t\t['powerwhip', 'hornleech'],\n\t\t\t['airslash', 'hurricane'],\n\t\t\t['knockoff', 'foulplay'],\n\t\t\t['throatchop', ['crunch', 'lashout']],\n\t\t\t['doubleedge', ['bodyslam', 'headbutt']],\n\t\t\t[['fireblast', 'magmastorm'], ['fierydance', 'flamethrower', 'lavaplume']],\n\t\t\t['thunderpunch', 'wildcharge'],\n\t\t\t['thunderbolt', 'discharge'],\n\t\t\t['gunkshot', ['direclaw', 'poisonjab', 'sludgebomb']],\n\t\t\t['aurasphere', 'focusblast'],\n\t\t\t['closecombat', 'drainpunch'],\n\t\t\t[['dragonpulse', 'spacialrend'], 'dracometeor'],\n\t\t\t['heavyslam', 'flashcannon'],\n\t\t\t['alluringvoice', 'dazzlinggleam'],\n\n\t\t\t// These status moves are redundant with each other\n\t\t\t['taunt', 'disable'],\n\t\t\t[['thunderwave', 'toxic'], ['thunderwave', 'willowisp']],\n\t\t\t[['thunderwave', 'toxic', 'willowisp'], 'toxicspikes'],\n\n\t\t\t// This space reserved for assorted hardcodes that otherwise make little sense out of context\n\t\t\t// Landorus and Thundurus\n\t\t\t['nastyplot', ['rockslide', 'knockoff']],\n\t\t\t// Persian\n\t\t\t['switcheroo', 'fakeout'],\n\t\t\t// Amoonguss, though this can work well as a general rule later\n\t\t\t['toxic', 'clearsmog'],\n\t\t\t// Chansey and Blissey\n\t\t\t['healbell', 'stealthrock'],\n\t\t\t// Araquanid and Magnezone\n\t\t\t['mirrorcoat', ['hydropump', 'bodypress']],\n\t\t];\n\n\t\tfor (const pair of incompatiblePairs) this.incompatibleMoves(moves, movePool, pair[0], pair[1]);\n\n\t\tif (!types.includes('Ice')) this.incompatibleMoves(moves, movePool, 'icebeam', 'icywind');\n\n\t\tif (!isDoubles) this.incompatibleMoves(moves, movePool, 'taunt', 'encore');\n\n\t\tif (!types.includes('Dark') && teraType !== 'Dark') this.incompatibleMoves(moves, movePool, 'knockoff', 'suckerpunch');\n\n\t\tif (!abilities.includes('Prankster')) this.incompatibleMoves(moves, movePool, 'thunderwave', 'yawn');\n\n\t\t// This space reserved for assorted hardcodes that otherwise make little sense out of context:\n\t\t// To force Close Combat on Barraskewda without locking it to Tera Fighting\n\t\tif (species.id === 'barraskewda') {\n\t\t\tthis.incompatibleMoves(moves, movePool, ['psychicfangs', 'throatchop'], ['poisonjab', 'throatchop']);\n\t\t}\n\t\t// To force Toxic on Quagsire\n\t\tif (species.id === 'quagsire') this.incompatibleMoves(moves, movePool, 'spikes', 'icebeam');\n\t\t// Taunt/Knock should be Cyclizar's flex moveslot\n\t\tif (species.id === 'cyclizar') this.incompatibleMoves(moves, movePool, 'taunt', 'knockoff');\n\t\t// To force Stealth Rock on Camerupt\n\t\tif (species.id === 'camerupt') this.incompatibleMoves(moves, movePool, 'roar', 'willowisp');\n\t\t// nothing else rolls these lol\n\t\tif (species.id === 'coalossal') this.incompatibleMoves(moves, movePool, 'flamethrower', 'overheat');\n\t}\n\n\t// Checks for and removes incompatible moves, starting with the first move in movesA.\n\tincompatibleMoves(\n\t\tmoves: Set<string>,\n\t\tmovePool: string[],\n\t\tmovesA: string | string[],\n\t\tmovesB: string | string[],\n\t): void {\n\t\tconst moveArrayA = (Array.isArray(movesA)) ? movesA : [movesA];\n\t\tconst moveArrayB = (Array.isArray(movesB)) ? movesB : [movesB];\n\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\tfor (const moveid1 of moves) {\n\t\t\tif (moveArrayB.includes(moveid1)) {\n\t\t\t\tfor (const moveid2 of moveArrayA) {\n\t\t\t\t\tif (moveid1 !== moveid2 && movePool.includes(moveid2)) {\n\t\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(moveid2));\n\t\t\t\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (moveArrayA.includes(moveid1)) {\n\t\t\t\tfor (const moveid2 of moveArrayB) {\n\t\t\t\t\tif (moveid1 !== moveid2 && movePool.includes(moveid2)) {\n\t\t\t\t\t\tthis.fastPop(movePool, movePool.indexOf(moveid2));\n\t\t\t\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) return;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Adds a move to the moveset, returns the MoveCounter\n\taddMove(\n\t\tmove: string,\n\t\tmoves: Set<string>,\n\t\ttypes: string[],\n\t\tabilities: string[],\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tmovePool: string[],\n\t\tteraType: string,\n\t\trole: RandomTeamsTypes.Role,\n\t): MoveCounter {\n\t\tmoves.add(move);\n\t\tthis.fastPop(movePool, movePool.indexOf(move));\n\t\tconst counter = this.queryMoves(moves, species, teraType, abilities);\n\t\tthis.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead, isDoubles, teraType, role);\n\t\treturn counter;\n\t}\n\n\t// Returns the type of a given move for STAB/coverage enforcement purposes\n\tgetMoveType(move: Move, species: Species, abilities: string[], teraType: string): string {\n\t\tif (move.id === 'terablast') return teraType;\n\t\tif (['judgment', 'revelationdance'].includes(move.id)) return species.types[0];\n\n\t\tif (move.name === \"Raging Bull\" && species.name.startsWith(\"Tauros-Paldea\")) {\n\t\t\tif (species.name.endsWith(\"Combat\")) return \"Fighting\";\n\t\t\tif (species.name.endsWith(\"Blaze\")) return \"Fire\";\n\t\t\tif (species.name.endsWith(\"Aqua\")) return \"Water\";\n\t\t}\n\n\t\tif (move.name === \"Ivy Cudgel\" && species.name.startsWith(\"Ogerpon\")) {\n\t\t\tif (species.name.endsWith(\"Wellspring\")) return \"Water\";\n\t\t\tif (species.name.endsWith(\"Hearthflame\")) return \"Fire\";\n\t\t\tif (species.name.endsWith(\"Cornerstone\")) return \"Rock\";\n\t\t}\n\n\t\tconst moveType = move.type;\n\t\tif (moveType === 'Normal') {\n\t\t\tif (abilities.includes('Aerilate')) return 'Flying';\n\t\t\tif (abilities.includes('Galvanize')) return 'Electric';\n\t\t\tif (abilities.includes('Pixilate')) return 'Fairy';\n\t\t\tif (abilities.includes('Refrigerate')) return 'Ice';\n\t\t}\n\t\treturn moveType;\n\t}\n\n\t// Generate random moveset for a given species, role, tera type.\n\trandomMoveset(\n\t\ttypes: string[],\n\t\tabilities: string[],\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tmovePool: string[],\n\t\tteraType: string,\n\t\trole: RandomTeamsTypes.Role,\n\t): Set<string> {\n\t\tconst moves = new Set<string>();\n\t\tlet counter = this.queryMoves(moves, species, teraType, abilities);\n\t\tthis.cullMovePool(types, moves, abilities, counter, movePool, teamDetails, species, isLead, isDoubles, teraType, role);\n\n\t\t// If there are only four moves, add all moves and return early\n\t\tif (movePool.length <= this.maxMoveCount) {\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tmoves.add(moveid);\n\t\t\t}\n\t\t\treturn moves;\n\t\t}\n\n\t\tconst runEnforcementChecker = (checkerName: string) => {\n\t\t\tif (!this.moveEnforcementCheckers[checkerName]) return false;\n\t\t\treturn this.moveEnforcementCheckers[checkerName](\n\t\t\t\tmovePool, moves, abilities, types, counter, species, teamDetails, isLead, isDoubles, teraType, role\n\t\t\t);\n\t\t};\n\n\t\tif (role === 'Tera Blast user') {\n\t\t\tcounter = this.addMove('terablast', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\t\t// Add required move (e.g. Relic Song for Meloetta-P)\n\t\tif (species.requiredMove) {\n\t\t\tconst move = this.dex.moves.get(species.requiredMove).id;\n\t\t\tcounter = this.addMove(move, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\n\t\t// Add other moves you really want to have, e.g. STAB, recovery, setup.\n\n\t\t// Enforce Facade if Guts is a possible ability\n\t\tif (movePool.includes('facade') && abilities.includes('Guts')) {\n\t\t\tcounter = this.addMove('facade', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\n\t\t// Enforce Night Shade, Revelation Dance, Revival Blessing, and Sticky Web\n\t\tfor (const moveid of ['nightshade', 'revelationdance', 'revivalblessing', 'stickyweb']) {\n\t\t\tif (movePool.includes(moveid)) {\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce Trick Room on Doubles Wallbreaker\n\t\tif (movePool.includes('trickroom') && role === 'Doubles Wallbreaker') {\n\t\t\tcounter = this.addMove('trickroom', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\n\t\t// Enforce hazard removal on Bulky Support if the team doesn't already have it\n\t\tif (role === 'Bulky Support' && !teamDetails.defog && !teamDetails.rapidSpin) {\n\t\t\tif (movePool.includes('rapidspin')) {\n\t\t\t\tcounter = this.addMove('rapidspin', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t\tif (movePool.includes('defog')) {\n\t\t\t\tcounter = this.addMove('defog', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce Aurora Veil if the team doesn't already have screens\n\t\tif (!teamDetails.screens && movePool.includes('auroraveil')) {\n\t\t\tcounter = this.addMove('auroraveil', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t}\n\n\t\t// Enforce Knock Off on pure Normal- and Fighting-types in singles\n\t\tif (!isDoubles && types.length === 1 && (types.includes('Normal') || types.includes('Fighting'))) {\n\t\t\tif (movePool.includes('knockoff')) {\n\t\t\t\tcounter = this.addMove('knockoff', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce Spore on Smeargle\n\t\tif (species.id === 'smeargle') {\n\t\t\tif (movePool.includes('spore')) {\n\t\t\t\tcounter = this.addMove('spore', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce moves in doubles\n\t\tif (isDoubles) {\n\t\t\tconst doublesEnforcedMoves = ['mortalspin', 'spore'];\n\t\t\tfor (const moveid of doublesEnforcedMoves) {\n\t\t\t\tif (movePool.includes(moveid)) {\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\t\tmovePool, teraType, role);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Enforce Fake Out on slow Pokemon\n\t\t\tif (movePool.includes('fakeout') && species.baseStats.spe <= 50) {\n\t\t\t\tcounter = this.addMove('fakeout', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t\t// Enforce Tailwind on Prankster and Gale Wings users\n\t\t\tif (movePool.includes('tailwind') && (abilities.includes('Prankster') || abilities.includes('Gale Wings'))) {\n\t\t\t\tcounter = this.addMove('tailwind', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t\t// Enforce Thunder Wave on Prankster users as well\n\t\t\tif (movePool.includes('thunderwave') && abilities.includes('Prankster')) {\n\t\t\t\tcounter = this.addMove('thunderwave', moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce STAB priority\n\t\tif (\n\t\t\t['Bulky Attacker', 'Bulky Setup', 'Wallbreaker', 'Doubles Wallbreaker'].includes(role) ||\n\t\t\tPRIORITY_POKEMON.includes(species.id)\n\t\t) {\n\t\t\tconst priorityMoves = [];\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\tif (\n\t\t\t\t\ttypes.includes(moveType) && (move.priority > 0 || (moveid === 'grassyglide' && abilities.includes('Grassy Surge'))) &&\n\t\t\t\t\t(move.basePower || move.basePowerCallback)\n\t\t\t\t) {\n\t\t\t\t\tpriorityMoves.push(moveid);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (priorityMoves.length) {\n\t\t\t\tconst moveid = this.sample(priorityMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce STAB\n\t\tfor (const type of types) {\n\t\t\t// Check if a STAB move of that type should be required\n\t\t\tconst stabMoves = [];\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && type === moveType) {\n\t\t\t\t\tstabMoves.push(moveid);\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (runEnforcementChecker(type)) {\n\t\t\t\tif (!stabMoves.length) break;\n\t\t\t\tconst moveid = this.sampleNoReplace(stabMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce Tera STAB\n\t\tif (!counter.get('stabtera') && !['Bulky Support', 'Doubles Support'].includes(role)) {\n\t\t\tconst stabMoves = [];\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && teraType === moveType) {\n\t\t\t\t\tstabMoves.push(moveid);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (stabMoves.length) {\n\t\t\t\tconst moveid = this.sample(stabMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// If no STAB move was added, add a STAB move\n\t\tif (!counter.get('stab')) {\n\t\t\tconst stabMoves = [];\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback) && types.includes(moveType)) {\n\t\t\t\t\tstabMoves.push(moveid);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (stabMoves.length) {\n\t\t\t\tconst moveid = this.sample(stabMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce recovery\n\t\tif (['Bulky Support', 'Bulky Attacker', 'Bulky Setup'].includes(role)) {\n\t\t\tconst recoveryMoves = movePool.filter(moveid => RECOVERY_MOVES.includes(moveid));\n\t\t\tif (recoveryMoves.length) {\n\t\t\t\tconst moveid = this.sample(recoveryMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce pivoting moves on AV Pivot\n\t\tif (role === 'AV Pivot') {\n\t\t\tconst pivotMoves = movePool.filter(moveid => ['uturn', 'voltswitch'].includes(moveid));\n\t\t\tif (pivotMoves.length) {\n\t\t\t\tconst moveid = this.sample(pivotMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce setup\n\t\tif (role.includes('Setup') || role === 'Tera Blast user') {\n\t\t\t// First, try to add a non-Speed setup move\n\t\t\tconst nonSpeedSetupMoves = movePool.filter(moveid => SETUP.includes(moveid) && !SPEED_SETUP.includes(moveid));\n\t\t\tif (nonSpeedSetupMoves.length) {\n\t\t\t\tconst moveid = this.sample(nonSpeedSetupMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t} else {\n\t\t\t\t// No non-Speed setup moves, so add any (Speed) setup move\n\t\t\t\tconst setupMoves = movePool.filter(moveid => SETUP.includes(moveid));\n\t\t\t\tif (setupMoves.length) {\n\t\t\t\t\tconst moveid = this.sample(setupMoves);\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\t\tmovePool, teraType, role);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Enforce redirecting moves and Fake Out on Doubles Support\n\t\tif (role === 'Doubles Support') {\n\t\t\tfor (const moveid of ['fakeout', 'followme', 'ragepowder']) {\n\t\t\t\tif (movePool.includes(moveid)) {\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\t\tmovePool, teraType, role);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst speedControl = movePool.filter(moveid => SPEED_CONTROL.includes(moveid));\n\t\t\tif (speedControl.length) {\n\t\t\t\tconst moveid = this.sample(speedControl);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce Protect\n\t\tif (role.includes('Protect')) {\n\t\t\tconst protectMoves = movePool.filter(moveid => PROTECT_MOVES.includes(moveid));\n\t\t\tif (protectMoves.length) {\n\t\t\t\tconst moveid = this.sample(protectMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce a move not on the noSTAB list\n\t\tif (!counter.damagingMoves.size) {\n\t\t\t// Choose an attacking move\n\t\t\tconst attackingMoves = [];\n\t\t\tfor (const moveid of movePool) {\n\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\tif (!this.noStab.includes(moveid) && (move.category !== 'Status')) attackingMoves.push(moveid);\n\t\t\t}\n\t\t\tif (attackingMoves.length) {\n\t\t\t\tconst moveid = this.sample(attackingMoves);\n\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\tmovePool, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Enforce coverage move\n\t\tif (!['AV Pivot', 'Fast Support', 'Bulky Support', 'Bulky Protect', 'Doubles Support'].includes(role)) {\n\t\t\tif (counter.damagingMoves.size === 1) {\n\t\t\t\t// Find the type of the current attacking move\n\t\t\t\tconst currentAttackType = counter.damagingMoves.values().next().value!.type;\n\t\t\t\t// Choose an attacking move that is of different type to the current single attack\n\t\t\t\tconst coverageMoves = [];\n\t\t\t\tfor (const moveid of movePool) {\n\t\t\t\t\tconst move = this.dex.moves.get(moveid);\n\t\t\t\t\tconst moveType = this.getMoveType(move, species, abilities, teraType);\n\t\t\t\t\tif (!this.noStab.includes(moveid) && (move.basePower || move.basePowerCallback)) {\n\t\t\t\t\t\tif (currentAttackType !== moveType) coverageMoves.push(moveid);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (coverageMoves.length) {\n\t\t\t\t\tconst moveid = this.sample(coverageMoves);\n\t\t\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\t\tmovePool, teraType, role);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add (moves.size < this.maxMoveCount) as a condition if moves is getting larger than 4 moves.\n\t\t// If you want moves to be favored but not required, add something like && this.randomChance(1, 2) to your condition.\n\n\t\t// Choose remaining moves randomly from movepool and add them to moves list:\n\t\twhile (moves.size < this.maxMoveCount && movePool.length) {\n\t\t\tif (moves.size + movePool.length <= this.maxMoveCount) {\n\t\t\t\tfor (const moveid of movePool) {\n\t\t\t\t\tmoves.add(moveid);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst moveid = this.sample(movePool);\n\t\t\tcounter = this.addMove(moveid, moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\tmovePool, teraType, role);\n\t\t\tfor (const pair of MOVE_PAIRS) {\n\t\t\t\tif (moveid === pair[0] && movePool.includes(pair[1])) {\n\t\t\t\t\tcounter = this.addMove(pair[1], moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\t\tmovePool, teraType, role);\n\t\t\t\t}\n\t\t\t\tif (moveid === pair[1] && movePool.includes(pair[0])) {\n\t\t\t\t\tcounter = this.addMove(pair[0], moves, types, abilities, teamDetails, species, isLead, isDoubles,\n\t\t\t\t\t\tmovePool, teraType, role);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn moves;\n\t}\n\n\tshouldCullAbility(\n\t\tability: string,\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tabilities: string[],\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tteraType: string,\n\t\trole: RandomTeamsTypes.Role,\n\t): boolean {\n\t\tswitch (ability) {\n\t\t// Abilities which are primarily useful for certain moves or with team support\n\t\tcase 'Chlorophyll': case 'Solar Power':\n\t\t\treturn !teamDetails.sun;\n\t\tcase 'Defiant':\n\t\t\treturn (species.id === 'thundurus' && !!counter.get('Status'));\n\t\tcase 'Hydration': case 'Swift Swim':\n\t\t\treturn !teamDetails.rain;\n\t\tcase 'Iron Fist': case 'Skill Link':\n\t\t\treturn !counter.get(toID(ability));\n\t\tcase 'Overgrow':\n\t\t\treturn !counter.get('Grass');\n\t\tcase 'Prankster':\n\t\t\treturn !counter.get('Status');\n\t\tcase 'Sand Force': case 'Sand Rush':\n\t\t\treturn !teamDetails.sand;\n\t\tcase 'Slush Rush':\n\t\t\treturn !teamDetails.snow;\n\t\tcase 'Swarm':\n\t\t\treturn !counter.get('Bug');\n\t\tcase 'Torrent':\n\t\t\treturn (!counter.get('Water') && !moves.has('flipturn'));\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tgetAbility(\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tabilities: string[],\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tteraType: string,\n\t\trole: RandomTeamsTypes.Role,\n\t): string {\n\t\tif (abilities.length <= 1) return abilities[0];\n\n\t\t// Hard-code abilities here\n\t\tif (species.id === 'drifblim') return moves.has('defog') ? 'Aftermath' : 'Unburden';\n\t\tif (abilities.includes('Flash Fire') && this.dex.getEffectiveness('Fire', teraType) >= 1) return 'Flash Fire';\n\t\tif (species.id === 'hitmonchan' && counter.get('ironfist')) return 'Iron Fist';\n\t\tif ((species.id === 'thundurus' || species.id === 'tornadus') && !counter.get('Physical')) return 'Prankster';\n\t\tif (species.id === 'swampert' && (counter.get('Water') || moves.has('flipturn'))) return 'Torrent';\n\t\tif (species.id === 'toucannon' && counter.get('skilllink')) return 'Skill Link';\n\t\tif (abilities.includes('Slush Rush') && moves.has('snowscape')) return 'Slush Rush';\n\t\tif (species.id === 'golduck' && teamDetails.rain) return 'Swift Swim';\n\n\t\tconst abilityAllowed: string[] = [];\n\t\t// Obtain a list of abilities that are allowed (not culled)\n\t\tfor (const ability of abilities) {\n\t\t\tif (!this.shouldCullAbility(\n\t\t\t\tability, types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role\n\t\t\t)) {\n\t\t\t\tabilityAllowed.push(ability);\n\t\t\t}\n\t\t}\n\n\t\t// Pick a random allowed ability\n\t\tif (abilityAllowed.length >= 1) return this.sample(abilityAllowed);\n\n\t\t// If all abilities are rejected, prioritize weather abilities over non-weather abilities\n\t\tif (!abilityAllowed.length) {\n\t\t\tconst weatherAbilities = abilities.filter(\n\t\t\t\ta => ['Chlorophyll', 'Hydration', 'Sand Force', 'Sand Rush', 'Slush Rush', 'Solar Power', 'Swift Swim'].includes(a)\n\t\t\t);\n\t\t\tif (weatherAbilities.length) return this.sample(weatherAbilities);\n\t\t}\n\n\t\t// Pick a random ability\n\t\treturn this.sample(abilities);\n\t}\n\n\tgetPriorityItem(\n\t\tability: string,\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tisDoubles: boolean,\n\t\tteraType: string,\n\t\trole: RandomTeamsTypes.Role,\n\t) {\n\t\tif (!isDoubles) {\n\t\t\tif (role === 'Fast Bulky Setup' && (ability === 'Quark Drive' || ability === 'Protosynthesis')) {\n\t\t\t\treturn 'Booster Energy';\n\t\t\t}\n\t\t\tif (species.id === 'lokix') {\n\t\t\t\treturn (role === 'Fast Attacker') ? 'Silver Powder' : 'Life Orb';\n\t\t\t}\n\t\t}\n\t\tif (species.requiredItems) {\n\t\t\t// Z-Crystals aren't available in Gen 9, so require Plates\n\t\t\tif (species.baseSpecies === 'Arceus') {\n\t\t\t\treturn species.requiredItems[0];\n\t\t\t}\n\t\t\treturn this.sample(species.requiredItems);\n\t\t}\n\t\tif (role === 'AV Pivot') return 'Assault Vest';\n\t\tif (species.id === 'pikachu') return 'Light Ball';\n\t\tif (species.id === 'regieleki') return 'Magnet';\n\t\tif (types.includes('Normal') && moves.has('doubleedge') && moves.has('fakeout')) return 'Silk Scarf';\n\t\tif (\n\t\t\tspecies.id === 'froslass' || moves.has('populationbomb') ||\n\t\t\t(ability === 'Hustle' && counter.get('setup') && !isDoubles && this.randomChance(1, 2))\n\t\t) return 'Wide Lens';\n\t\tif (species.id === 'smeargle' && !isDoubles) return 'Focus Sash';\n\t\tif (moves.has('clangoroussoul') || (species.id === 'toxtricity' && moves.has('shiftgear'))) return 'Throat Spray';\n\t\tif (\n\t\t\t(species.baseSpecies === 'Magearna' && role === 'Tera Blast user') ||\n\t\t\tspecies.id === 'necrozmaduskmane' || (species.id === 'calyrexice' && isDoubles)\n\t\t) return 'Weakness Policy';\n\t\tif (['dragonenergy', 'lastrespects', 'waterspout'].some(m => moves.has(m))) return 'Choice Scarf';\n\t\tif (\n\t\t\t!isDoubles && (ability === 'Imposter' || (species.id === 'magnezone' && role === 'Fast Attacker'))\n\t\t) return 'Choice Scarf';\n\t\tif (species.id === 'rampardos' && (role === 'Fast Attacker' || isDoubles)) return 'Choice Scarf';\n\t\tif (species.id === 'palkia' && counter.get('Status')) return 'Lustrous Orb';\n\t\tif (\n\t\t\tmoves.has('courtchange') ||\n\t\t\t!isDoubles && (species.id === 'luvdisc' || (species.id === 'terapagos' && !moves.has('rest')))\n\t\t) return 'Heavy-Duty Boots';\n\t\tif (\n\t\t\t['Cheek Pouch', 'Cud Chew', 'Harvest', 'Ripen'].some(m => ability === m) ||\n\t\t\tmoves.has('bellydrum') || moves.has('filletaway')\n\t\t) {\n\t\t\treturn 'Sitrus Berry';\n\t\t}\n\t\tif (['healingwish', 'switcheroo', 'trick'].some(m => moves.has(m))) {\n\t\t\tif (\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\n\t\t\t\trole !== 'Wallbreaker' && role !== 'Doubles Wallbreaker' && !counter.get('priority')\n\t\t\t) {\n\t\t\t\treturn 'Choice Scarf';\n\t\t\t} else {\n\t\t\t\treturn (counter.get('Physical') > counter.get('Special')) ? 'Choice Band' : 'Choice Specs';\n\t\t\t}\n\t\t}\n\t\tif (counter.get('Status') && (species.name === 'Latias' || species.name === 'Latios')) return 'Soul Dew';\n\t\tif (species.id === 'scyther' && !isDoubles) return (isLead && !moves.has('uturn')) ? 'Eviolite' : 'Heavy-Duty Boots';\n\t\tif (ability === 'Poison Heal' || ability === 'Quick Feet') return 'Toxic Orb';\n\t\tif (species.nfe) return 'Eviolite';\n\t\tif ((ability === 'Guts' || moves.has('facade')) && !moves.has('sleeptalk')) {\n\t\t\treturn (types.includes('Fire') || ability === 'Toxic Boost') ? 'Toxic Orb' : 'Flame Orb';\n\t\t}\n\t\tif (ability === 'Magic Guard' || (ability === 'Sheer Force' && counter.get('sheerforce'))) return 'Life Orb';\n\t\tif (ability === 'Anger Shell') return this.sample(['Rindo Berry', 'Passho Berry', 'Scope Lens', 'Sitrus Berry']);\n\t\tif (moves.has('dragondance') && isDoubles) return 'Clear Amulet';\n\t\tif (counter.get('skilllink') && ability !== 'Skill Link' && species.id !== 'breloom') return 'Loaded Dice';\n\t\tif (ability === 'Unburden') {\n\t\t\treturn (moves.has('closecombat') || moves.has('leafstorm')) ? 'White Herb' : 'Sitrus Berry';\n\t\t}\n\t\tif (moves.has('shellsmash') && ability !== 'Weak Armor') return 'White Herb';\n\t\tif (moves.has('meteorbeam') || (moves.has('electroshot') && !teamDetails.rain)) return 'Power Herb';\n\t\tif (moves.has('acrobatics') && ability !== 'Protosynthesis') return '';\n\t\tif (moves.has('auroraveil') || moves.has('lightscreen') && moves.has('reflect')) return 'Light Clay';\n\t\tif (ability === 'Gluttony') return `${this.sample(['Aguav', 'Figy', 'Iapapa', 'Mago', 'Wiki'])} Berry`;\n\t\tif (species.id === 'giratina' && !isDoubles && moves.has('rest') && !moves.has('sleeptalk')) return 'Leftovers';\n\t\tif (\n\t\t\tmoves.has('rest') && !moves.has('sleeptalk') &&\n\t\t\tability !== 'Natural Cure' && ability !== 'Shed Skin'\n\t\t) {\n\t\t\treturn 'Chesto Berry';\n\t\t}\n\t\tif (\n\t\t\tspecies.id !== 'yanmega' &&\n\t\t\tthis.dex.getEffectiveness('Rock', species) >= 2 && (!types.includes('Flying') || !isDoubles)\n\t\t) return 'Heavy-Duty Boots';\n\t}\n\n\t/** Item generation specific to Random Doubles */\n\tgetDoublesItem(\n\t\tability: string,\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tteraType: string,\n\t\trole: RandomTeamsTypes.Role,\n\t): string {\n\t\tconst scarfReqs = (\n\t\t\t!counter.get('priority') && ability !== 'Speed Boost' && role !== 'Doubles Wallbreaker' &&\n\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\n\t\t\tthis.randomChance(1, 2)\n\t\t);\n\t\tconst offensiveRole = (\n\t\t\t['Doubles Fast Attacker', 'Doubles Wallbreaker', 'Doubles Setup Sweeper', 'Offensive Protect'].some(m => role === m)\n\t\t);\n\n\t\tif (species.id === 'ursalunabloodmoon' && moves.has('protect')) return 'Silk Scarf';\n\t\tif (\n\t\t\tmoves.has('flipturn') && moves.has('protect') && (moves.has('aquajet') || (moves.has('jetpunch')))\n\t\t) return 'Mystic Water';\n\t\tif (counter.get('speedsetup') && role === 'Doubles Bulky Setup') return 'Weakness Policy';\n\t\tif (moves.has('blizzard') && ability !== 'Snow Warning' && !teamDetails.snow) return 'Blunder Policy';\n\n\t\tif (role === 'Choice Item user') {\n\t\t\tif (scarfReqs || moves.has('finalgambit') || species.id === 'jirachi') return 'Choice Scarf';\n\t\t\treturn (counter.get('Physical') > counter.get('Special')) ? 'Choice Band' : 'Choice Specs';\n\t\t}\n\t\tif (counter.get('Physical') >= moves.size &&\n\t\t\t['fakeout', 'feint', 'firstimpression', 'rapidspin', 'suckerpunch'].every(m => !moves.has(m)) &&\n\t\t\t(moves.has('flipturn') || moves.has('uturn') || role === 'Doubles Wallbreaker')\n\t\t) {\n\t\t\treturn (scarfReqs) ? 'Choice Scarf' : 'Choice Band';\n\t\t}\n\t\tif (\n\t\t\t((counter.get('Special') >= moves.size && (moves.has('voltswitch') || role === 'Doubles Wallbreaker')) || (\n\t\t\t\tcounter.get('Special') >= moves.size - 1 && (moves.has('uturn') || moves.has('flipturn'))\n\t\t\t)) && !moves.has('electroweb')\n\t\t) {\n\t\t\treturn (scarfReqs) ? 'Choice Scarf' : 'Choice Specs';\n\t\t}\n\t\tif (\n\t\t\tspecies.baseStats.spe <= 70 && (moves.has('ragepowder') || moves.has('followme'))\n\t\t) return 'Rocky Helmet';\n\t\tif (\n\t\t\tability === 'Intimidate' && this.dex.getEffectiveness('Rock', species) >= 1 &&\n\t\t\t(!types.includes('Flying') || this.dex.getEffectiveness('Rock', species) >= 2)\n\t\t) return 'Heavy-Duty Boots';\n\t\tif (\n\t\t\t(role === 'Bulky Protect' && counter.get('setup')) ||\n\t\t\t['irondefense', 'coil', 'acidarmor', 'wish'].some(m => moves.has(m)) ||\n\t\t\t(counter.get('recovery') && !moves.has('strengthsap') && !counter.get('speedcontrol') && !offensiveRole) ||\n\t\t\tspecies.id === 'regigigas'\n\t\t) return 'Leftovers';\n\t\tif (species.id === 'sylveon') return 'Pixie Plate';\n\t\tif (\n\t\t\t(offensiveRole || (role === 'Tera Blast user' && (species.baseStats.spe >= 80 || moves.has('trickroom')))) &&\n\t\t\t!moves.has('fakeout') &&\n\t\t\t(!moves.has('uturn') || types.includes('Bug') || ability === 'Libero') &&\n\t\t\t((!moves.has('icywind') && !moves.has('electroweb')) || species.id === 'ironbundle')\n\t\t) {\n\t\t\treturn (\n\t\t\t\t(ability === 'Quark Drive' || ability === 'Protosynthesis') && !isLead && species.id !== 'ironvaliant' &&\n\t\t\t\t['dracometeor', 'firstimpression', 'uturn', 'voltswitch'].every(m => !moves.has(m))\n\t\t\t) ? 'Booster Energy' : 'Life Orb';\n\t\t}\n\t\tif (isLead && (species.id === 'glimmora' ||\n\t\t\t(['Doubles Fast Attacker', 'Doubles Wallbreaker', 'Offensive Protect'].includes(role) &&\n\t\t\t\tspecies.baseStats.hp + species.baseStats.def + species.baseStats.spd <= 230))\n\t\t) return 'Focus Sash';\n\t\tif (\n\t\t\t['Doubles Fast Attacker', 'Doubles Wallbreaker', 'Offensive Protect'].includes(role) && moves.has('fakeout')\n\t\t) {\n\t\t\treturn (this.dex.getEffectiveness('Rock', species) >= 1) ? 'Heavy-Duty Boots' : 'Clear Amulet';\n\t\t}\n\t\tif (!counter.get('Status')) return 'Assault Vest';\n\t\treturn 'Sitrus Berry';\n\t}\n\n\tgetItem(\n\t\tability: string,\n\t\ttypes: string[],\n\t\tmoves: Set<string>,\n\t\tcounter: MoveCounter,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails,\n\t\tspecies: Species,\n\t\tisLead: boolean,\n\t\tteraType: string,\n\t\trole: RandomTeamsTypes.Role,\n\t): string {\n\t\tconst lifeOrbReqs = ['flamecharge', 'nuzzle', 'rapidspin', 'trailblaze'].every(m => !moves.has(m));\n\n\t\tif (\n\t\t\tspecies.id !== 'jirachi' && (counter.get('Physical') >= moves.size) &&\n\t\t\t['dragontail', 'fakeout', 'firstimpression', 'flamecharge', 'rapidspin'].every(m => !moves.has(m))\n\t\t) {\n\t\t\tconst scarfReqs = (\n\t\t\t\trole !== 'Wallbreaker' &&\n\t\t\t\t(species.baseStats.atk >= 100 || ability === 'Huge Power' || ability === 'Pure Power') &&\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\n\t\t\t\tability !== 'Speed Boost' && !counter.get('priority') && !moves.has('aquastep')\n\t\t\t);\n\t\t\treturn (scarfReqs && this.randomChance(1, 2)) ? 'Choice Scarf' : 'Choice Band';\n\t\t}\n\t\tif (\n\t\t\t(counter.get('Special') >= moves.size) ||\n\t\t\t(counter.get('Special') >= moves.size - 1 && ['flipturn', 'uturn'].some(m => moves.has(m)))\n\t\t) {\n\t\t\tconst scarfReqs = (\n\t\t\t\trole !== 'Wallbreaker' &&\n\t\t\t\tspecies.baseStats.spa >= 100 &&\n\t\t\t\tspecies.baseStats.spe >= 60 && species.baseStats.spe <= 108 &&\n\t\t\t\tability !== 'Speed Boost' && ability !== 'Tinted Lens' && !moves.has('uturn') && !counter.get('priority')\n\t\t\t);\n\t\t\treturn (scarfReqs && this.randomChance(1, 2)) ? 'Choice Scarf' : 'Choice Specs';\n\t\t}\n\t\tif (counter.get('speedsetup') && role === 'Bulky Setup') return 'Weakness Policy';\n\t\tif (\n\t\t\t!counter.get('Status') &&\n\t\t\t!['Fast Attacker', 'Wallbreaker', 'Tera Blast user'].includes(role)\n\t\t) {\n\t\t\treturn 'Assault Vest';\n\t\t}\n\t\tif (species.id === 'golem') return (counter.get('speedsetup')) ? 'Weakness Policy' : 'Custap Berry';\n\t\tif (moves.has('substitute')) return 'Leftovers';\n\t\tif (\n\t\t\tmoves.has('stickyweb') && isLead &&\n\t\t\t(species.baseStats.hp + species.baseStats.def + species.baseStats.spd) <= 235\n\t\t) return 'Focus Sash';\n\t\tif (this.dex.getEffectiveness('Rock', species) >= 1) return 'Heavy-Duty Boots';\n\t\tif (\n\t\t\t(moves.has('chillyreception') || (\n\t\t\t\trole === 'Fast Support' &&\n\t\t\t\t[...PIVOT_MOVES, 'defog', 'mortalspin', 'rapidspin'].some(m => moves.has(m)) &&\n\t\t\t\t!types.includes('Flying') && ability !== 'Levitate'\n\t\t\t))\n\t\t) return 'Heavy-Duty Boots';\n\n\t\t// Low Priority\n\t\tif (\n\t\t\tability === 'Rough Skin' || (\n\t\t\t\tability === 'Regenerator' && (role === 'Bulky Support' || role === 'Bulky Attacker') &&\n\t\t\t\t(species.baseStats.hp + species.baseStats.def) >= 180 && this.randomChance(1, 2)\n\t\t\t) || (\n\t\t\t\tability !== 'Regenerator' && !counter.get('setup') && counter.get('recovery') &&\n\t\t\t\tthis.dex.getEffectiveness('Fighting', species) < 1 &&\n\t\t\t\t(species.baseStats.hp + species.baseStats.def) > 200 && this.randomChance(1, 2)\n\t\t\t)\n\t\t) return 'Rocky Helmet';\n\t\tif (moves.has('outrage') && counter.get('setup')) return 'Lum Berry';\n\t\tif (moves.has('protect') && ability !== 'Speed Boost') return 'Leftovers';\n\t\tif (\n\t\t\trole === 'Fast Support' && isLead && !counter.get('recovery') && !counter.get('recoil') &&\n\t\t\t(counter.get('hazards') || counter.get('setup')) &&\n\t\t\t(species.baseStats.hp + species.baseStats.def + species.baseStats.spd) < 258\n\t\t) return 'Focus Sash';\n\t\tif (\n\t\t\t!counter.get('setup') && ability !== 'Levitate' && this.dex.getEffectiveness('Ground', species) >= 2\n\t\t) return 'Air Balloon';\n\t\tif (['Bulky Attacker', 'Bulky Support', 'Bulky Setup'].some(m => role === (m))) return 'Leftovers';\n\t\tif (species.id === 'pawmot' && moves.has('nuzzle')) return 'Leppa Berry';\n\t\tif (role === 'Fast Support' || role === 'Fast Bulky Setup') {\n\t\t\treturn (\n\t\t\t\tcounter.get('Physical') + counter.get('Special') > counter.get('Status') && lifeOrbReqs\n\t\t\t) ? 'Life Orb' : 'Leftovers';\n\t\t}\n\t\tif (role === 'Tera Blast user' && DEFENSIVE_TERA_BLAST_USERS.includes(species.id)) return 'Leftovers';\n\t\tif (\n\t\t\tlifeOrbReqs && ['Fast Attacker', 'Setup Sweeper', 'Tera Blast user', 'Wallbreaker'].some(m => role === (m))\n\t\t) return 'Life Orb';\n\t\treturn 'Leftovers';\n\t}\n\n\tgetLevel(\n\t\tspecies: Species,\n\t\tisDoubles: boolean,\n\t): number {\n\t\tif (this.adjustLevel) return this.adjustLevel;\n\t\t// doubles levelling\n\t\tif (isDoubles && this.randomDoublesSets[species.id][\"level\"]) return this.randomDoublesSets[species.id][\"level\"]!;\n\t\tif (!isDoubles && this.randomSets[species.id][\"level\"]) return this.randomSets[species.id][\"level\"]!;\n\t\t// Default to tier-based levelling\n\t\tconst tier = species.tier;\n\t\tconst tierScale: Partial<Record<Species['tier'], number>> = {\n\t\t\tUber: 76,\n\t\t\tOU: 80,\n\t\t\tUUBL: 81,\n\t\t\tUU: 82,\n\t\t\tRUBL: 83,\n\t\t\tRU: 84,\n\t\t\tNUBL: 85,\n\t\t\tNU: 86,\n\t\t\tPUBL: 87,\n\t\t\tPU: 88, \"(PU)\": 88, NFE: 88,\n\t\t};\n\t\treturn tierScale[tier] || 80;\n\t}\n\n\tgetForme(species: Species): string {\n\t\tif (typeof species.battleOnly === 'string') {\n\t\t\t// Only change the forme. The species has custom moves, and may have different typing and requirements.\n\t\t\treturn species.battleOnly;\n\t\t}\n\t\tif (species.cosmeticFormes) return this.sample([species.name].concat(species.cosmeticFormes));\n\n\t\t// Consolidate mostly-cosmetic formes, at least for the purposes of Random Battles\n\t\tif (['Dudunsparce', 'Magearna', 'Maushold', 'Polteageist', 'Sinistcha', 'Zarude'].includes(species.baseSpecies)) {\n\t\t\treturn this.sample([species.name].concat(species.otherFormes!));\n\t\t}\n\t\tif (species.baseSpecies === 'Basculin') return 'Basculin' + this.sample(['', '-Blue-Striped']);\n\t\tif (species.baseSpecies === 'Pikachu') {\n\t\t\treturn 'Pikachu' + this.sample(\n\t\t\t\t['', '-Original', '-Hoenn', '-Sinnoh', '-Unova', '-Kalos', '-Alola', '-Partner', '-World']\n\t\t\t);\n\t\t}\n\t\treturn species.name;\n\t}\n\n\trandomSet(\n\t\ts: string | Species,\n\t\tteamDetails: RandomTeamsTypes.TeamDetails = {},\n\t\tisLead = false,\n\t\tisDoubles = false\n\t): RandomTeamsTypes.RandomSet {\n\t\tconst species = this.dex.species.get(s);\n\t\tconst forme = this.getForme(species);\n\t\tconst sets = this[`random${isDoubles ? 'Doubles' : ''}Sets`][species.id][\"sets\"];\n\t\tconst possibleSets: RandomTeamsTypes.RandomSetData[] = [];\n\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\n\n\t\tfor (const set of sets) {\n\t\t\t// Prevent Fast Bulky Setup on lead Paradox Pokemon, since it generates Booster Energy.\n\t\t\tconst abilities = set.abilities!;\n\t\t\tif (\n\t\t\t\tisLead && (abilities.includes('Protosynthesis') || abilities.includes('Quark Drive')) &&\n\t\t\t\tset.role === 'Fast Bulky Setup'\n\t\t\t) continue;\n\t\t\t// Prevent Tera Blast user if the team already has one, or if Terastallizion is prevented.\n\t\t\tif ((teamDetails.teraBlast || ruleTable.has('terastalclause')) && set.role === 'Tera Blast user') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tpossibleSets.push(set);\n\t\t}\n\t\tconst set = this.sampleIfArray(possibleSets);\n\t\tconst role = set.role;\n\t\tconst movePool: string[] = [];\n\t\tfor (const movename of set.movepool) {\n\t\t\tmovePool.push(this.dex.moves.get(movename).id);\n\t\t}\n\t\tconst teraTypes = set.teraTypes!;\n\t\tlet teraType = this.sampleIfArray(teraTypes);\n\n\t\tlet ability = '';\n\t\tlet item = undefined;\n\n\t\tconst evs = { hp: 85, atk: 85, def: 85, spa: 85, spd: 85, spe: 85 };\n\t\tconst ivs = { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31 };\n\n\t\tconst types = species.types;\n\t\tconst abilities = set.abilities!;\n\n\t\t// Get moves\n\t\tconst moves = this.randomMoveset(types, abilities, teamDetails, species, isLead, isDoubles, movePool, teraType, role);\n\t\tconst counter = this.queryMoves(moves, species, teraType, abilities);\n\n\t\t// Get ability\n\t\tability = this.getAbility(types, moves, abilities, counter, teamDetails, species, isLead, isDoubles, teraType, role);\n\n\t\t// Get items\n\t\t// First, the priority items\n\t\titem = this.getPriorityItem(ability, types, moves, counter, teamDetails, species, isLead, isDoubles, teraType, role);\n\t\tif (item === undefined) {\n\t\t\tif (isDoubles) {\n\t\t\t\titem = this.getDoublesItem(ability, types, moves, counter, teamDetails, species, isLead, teraType, role);\n\t\t\t} else {\n\t\t\t\titem = this.getItem(ability, types, moves, counter, teamDetails, species, isLead, teraType, role);\n\t\t\t}\n\t\t}\n\n\t\t// Get level\n\t\tconst level = this.getLevel(species, isDoubles);\n\n\t\t// Prepare optimal HP\n\t\tconst srImmunity = ability === 'Magic Guard' || item === 'Heavy-Duty Boots';\n\t\tlet srWeakness = srImmunity ? 0 : this.dex.getEffectiveness('Rock', species);\n\t\t// Crash damage move users want an odd HP to survive two misses\n\t\tif (['axekick', 'highjumpkick', 'jumpkick', 'supercellslam'].some(m => moves.has(m))) srWeakness = 2;\n\t\twhile (evs.hp > 1) {\n\t\t\tconst hp = Math.floor(Math.floor(2 * species.baseStats.hp + ivs.hp + Math.floor(evs.hp / 4) + 100) * level / 100 + 10);\n\t\t\tif ((moves.has('substitute') && ['Sitrus Berry'].includes(item)) || species.id === 'minior') {\n\t\t\t\t// Two Substitutes should activate Sitrus Berry. Two switch-ins to Stealth Rock should activate Shields Down on Minior.\n\t\t\t\tif (hp % 4 === 0) break;\n\t\t\t} else if (\n\t\t\t\t(moves.has('bellydrum') || moves.has('filletaway') || moves.has('shedtail')) &&\n\t\t\t\t(item === 'Sitrus Berry' || ability === 'Gluttony')\n\t\t\t) {\n\t\t\t\t// Belly Drum should activate Sitrus Berry\n\t\t\t\tif (hp % 2 === 0) break;\n\t\t\t} else if (moves.has('substitute') && moves.has('endeavor')) {\n\t\t\t\t// Luvdisc should be able to Substitute down to very low HP\n\t\t\t\tif (hp % 4 > 0) break;\n\t\t\t} else {\n\t\t\t\t// Maximize number of Stealth Rock switch-ins in singles\n\t\t\t\tif (isDoubles) break;\n\t\t\t\tif (srWeakness <= 0 || ability === 'Regenerator' || ['Leftovers', 'Life Orb'].includes(item)) break;\n\t\t\t\tif (item !== 'Sitrus Berry' && hp % (4 / srWeakness) > 0) break;\n\t\t\t\t// Minimise number of Stealth Rock switch-ins to activate Sitrus Berry\n\t\t\t\tif (item === 'Sitrus Berry' && hp % (4 / srWeakness) === 0) break;\n\t\t\t}\n\t\t\tevs.hp -= 4;\n\t\t}\n\n\t\t// Minimize confusion damage\n\t\tconst noAttackStatMoves = [...moves].every(m => {\n\t\t\tconst move = this.dex.moves.get(m);\n\t\t\tif (move.damageCallback || move.damage) return true;\n\t\t\tif (move.id === 'shellsidearm') return false;\n\t\t\t// Physical Tera Blast\n\t\t\tif (\n\t\t\t\tmove.id === 'terablast' && (species.id === 'porygon2' || ['Contrary', 'Defiant'].includes(ability) ||\n\t\t\t\t\tmoves.has('shiftgear') || species.baseStats.atk > species.baseStats.spa)\n\t\t\t) return false;\n\t\t\treturn move.category !== 'Physical' || move.id === 'bodypress' || move.id === 'foulplay';\n\t\t});\n\t\tif (noAttackStatMoves && !moves.has('transform') && this.format.mod !== 'partnersincrime') {\n\t\t\tevs.atk = 0;\n\t\t\tivs.atk = 0;\n\t\t}\n\n\t\tif (moves.has('gyroball') || moves.has('trickroom')) {\n\t\t\tevs.spe = 0;\n\t\t\tivs.spe = 0;\n\t\t}\n\n\t\t// Enforce Tera Type after all set generation is done to prevent infinite generation\n\t\tif (this.forceTeraType) teraType = this.forceTeraType;\n\n\t\t// shuffle moves to add more randomness to camomons\n\t\tconst shuffledMoves = Array.from(moves);\n\t\tthis.prng.shuffle(shuffledMoves);\n\t\treturn {\n\t\t\tname: species.baseSpecies,\n\t\t\tspecies: forme,\n\t\t\tgender: species.baseSpecies === 'Greninja' ? 'M' : (species.gender || (this.random(2) ? 'F' : 'M')),\n\t\t\tshiny: this.randomChance(1, 1024),\n\t\t\tlevel,\n\t\t\tmoves: shuffledMoves,\n\t\t\tability,\n\t\t\tevs,\n\t\t\tivs,\n\t\t\titem,\n\t\t\tteraType,\n\t\t\trole,\n\t\t};\n\t}\n\n\tgetPokemonPool(\n\t\ttype: string,\n\t\tpokemonToExclude: RandomTeamsTypes.RandomSet[] = [],\n\t\tisMonotype = false,\n\t\tpokemonList: string[]\n\t): [{ [k: string]: string[] }, string[]] {\n\t\tconst exclude = pokemonToExclude.map(p => toID(p.species));\n\t\tconst pokemonPool: { [k: string]: string[] } = {};\n\t\tconst baseSpeciesPool = [];\n\t\tfor (const pokemon of pokemonList) {\n\t\t\tlet species = this.dex.species.get(pokemon);\n\t\t\tif (exclude.includes(species.id)) continue;\n\t\t\tif (isMonotype) {\n\t\t\t\tif (!species.types.includes(type)) continue;\n\t\t\t\tif (typeof species.battleOnly === 'string') {\n\t\t\t\t\tspecies = this.dex.species.get(species.battleOnly);\n\t\t\t\t\tif (!species.types.includes(type)) continue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (species.baseSpecies in pokemonPool) {\n\t\t\t\tpokemonPool[species.baseSpecies].push(pokemon);\n\t\t\t} else {\n\t\t\t\tpokemonPool[species.baseSpecies] = [pokemon];\n\t\t\t}\n\t\t}\n\t\t// Include base species 1x if 1-3 formes, 2x if 4-6 formes, 3x if 7+ formes\n\t\tfor (const baseSpecies of Object.keys(pokemonPool)) {\n\t\t\t// Squawkabilly has 4 formes, but only 2 functionally different formes, so only include it 1x\n\t\t\tconst weight = (baseSpecies === 'Squawkabilly') ? 1 : Math.min(Math.ceil(pokemonPool[baseSpecies].length / 3), 3);\n\t\t\tfor (let i = 0; i < weight; i++) baseSpeciesPool.push(baseSpecies);\n\t\t}\n\t\treturn [pokemonPool, baseSpeciesPool];\n\t}\n\n\trandomSets: { [species: string]: RandomTeamsTypes.RandomSpeciesData } = require('./sets.json');\n\trandomDoublesSets: { [species: string]: RandomTeamsTypes.RandomSpeciesData } = require('./doubles-sets.json');\n\n\trandomTeam() {\n\t\tthis.enforceNoDirectCustomBanlistChanges();\n\n\t\tconst seed = this.prng.getSeed();\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\n\t\tconst pokemon: RandomTeamsTypes.RandomSet[] = [];\n\n\t\t// For Monotype\n\t\tconst isMonotype = !!this.forceMonotype || ruleTable.has('sametypeclause');\n\t\tconst isDoubles = this.format.gameType !== 'singles';\n\t\tconst typePool = this.dex.types.names().filter(name => name !== \"Stellar\");\n\t\tconst type = this.forceMonotype || this.sample(typePool);\n\n\t\t// PotD stuff\n\t\tconst usePotD = global.Config && Config.potd && ruleTable.has('potd');\n\t\tconst potd = usePotD ? this.dex.species.get(Config.potd) : null;\n\n\t\tconst baseFormes: { [k: string]: number } = {};\n\n\t\tconst typeCount: { [k: string]: number } = {};\n\t\tconst typeComboCount: { [k: string]: number } = {};\n\t\tconst typeWeaknesses: { [k: string]: number } = {};\n\t\tconst typeDoubleWeaknesses: { [k: string]: number } = {};\n\t\tconst teamDetails: RandomTeamsTypes.TeamDetails = {};\n\t\tlet numMaxLevelPokemon = 0;\n\n\t\tconst pokemonList = isDoubles ? Object.keys(this.randomDoublesSets) : Object.keys(this.randomSets);\n\t\tconst [pokemonPool, baseSpeciesPool] = this.getPokemonPool(type, pokemon, isMonotype, pokemonList);\n\n\t\tlet leadsRemaining = this.format.gameType === 'doubles' ? 2 : 1;\n\t\twhile (baseSpeciesPool.length && pokemon.length < this.maxTeamSize) {\n\t\t\tconst baseSpecies = this.sampleNoReplace(baseSpeciesPool);\n\t\t\tlet species = this.dex.species.get(this.sample(pokemonPool[baseSpecies]));\n\t\t\tif (!species.exists) continue;\n\n\t\t\t// Limit to one of each species (Species Clause)\n\t\t\tif (baseFormes[species.baseSpecies]) continue;\n\n\t\t\t// Treat Ogerpon formes and Terapagos like the Tera Blast user role; reject if team has one already\n\t\t\tif (['ogerpon', 'ogerponhearthflame', 'terapagos'].includes(species.id) && teamDetails.teraBlast) continue;\n\n\t\t\t// Illusion shouldn't be on the last slot\n\t\t\tif (species.baseSpecies === 'Zoroark' && pokemon.length >= (this.maxTeamSize - 1)) continue;\n\n\t\t\tconst types = species.types;\n\t\t\tconst typeCombo = types.slice().sort().join();\n\t\t\tconst weakToFreezeDry = (\n\t\t\t\tthis.dex.getEffectiveness('Ice', species) > 0 ||\n\t\t\t\t(this.dex.getEffectiveness('Ice', species) > -2 && types.includes('Water'))\n\t\t\t);\n\t\t\t// Dynamically scale limits for different team sizes. The default and minimum value is 1.\n\t\t\tconst limitFactor = Math.round(this.maxTeamSize / 6) || 1;\n\n\t\t\tif (!isMonotype && !this.forceMonotype) {\n\t\t\t\tlet skip = false;\n\n\t\t\t\t// Limit two of any type\n\t\t\t\tfor (const typeName of types) {\n\t\t\t\t\tif (typeCount[typeName] >= 2 * limitFactor) {\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (skip) continue;\n\n\t\t\t\t// Limit three weak to any type, and one double weak to any type\n\t\t\t\tfor (const typeName of this.dex.types.names()) {\n\t\t\t\t\t// it's weak to the type\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\n\t\t\t\t\t\tif (!typeWeaknesses[typeName]) typeWeaknesses[typeName] = 0;\n\t\t\t\t\t\tif (typeWeaknesses[typeName] >= 3 * limitFactor) {\n\t\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 1) {\n\t\t\t\t\t\tif (!typeDoubleWeaknesses[typeName]) typeDoubleWeaknesses[typeName] = 0;\n\t\t\t\t\t\tif (typeDoubleWeaknesses[typeName] >= limitFactor) {\n\t\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (skip) continue;\n\n\t\t\t\t// Count Dry Skin/Fluffy as Fire weaknesses\n\t\t\t\tif (\n\t\t\t\t\tthis.dex.getEffectiveness('Fire', species) === 0 &&\n\t\t\t\t\tObject.values(species.abilities).filter(a => ['Dry Skin', 'Fluffy'].includes(a)).length\n\t\t\t\t) {\n\t\t\t\t\tif (!typeWeaknesses['Fire']) typeWeaknesses['Fire'] = 0;\n\t\t\t\t\tif (typeWeaknesses['Fire'] >= 3 * limitFactor) continue;\n\t\t\t\t}\n\n\t\t\t\t// Limit four weak to Freeze-Dry\n\t\t\t\tif (weakToFreezeDry) {\n\t\t\t\t\tif (!typeWeaknesses['Freeze-Dry']) typeWeaknesses['Freeze-Dry'] = 0;\n\t\t\t\t\tif (typeWeaknesses['Freeze-Dry'] >= 4 * limitFactor) continue;\n\t\t\t\t}\n\n\t\t\t\t// Limit one level 100 Pokemon\n\t\t\t\tif (!this.adjustLevel && (this.getLevel(species, isDoubles) === 100) && numMaxLevelPokemon >= limitFactor) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Limit three of any type combination in Monotype\n\t\t\tif (!this.forceMonotype && isMonotype && (typeComboCount[typeCombo] >= 3 * limitFactor)) continue;\n\n\t\t\t// The Pokemon of the Day\n\t\t\tif (potd?.exists && (pokemon.length === 1 || this.maxTeamSize === 1)) species = potd;\n\n\t\t\tlet set: RandomTeamsTypes.RandomSet;\n\n\t\t\tif (leadsRemaining) {\n\t\t\t\tif (\n\t\t\t\t\tisDoubles && DOUBLES_NO_LEAD_POKEMON.includes(species.baseSpecies) ||\n\t\t\t\t\t!isDoubles && NO_LEAD_POKEMON.includes(species.baseSpecies)\n\t\t\t\t) {\n\t\t\t\t\tif (pokemon.length + leadsRemaining === this.maxTeamSize) continue;\n\t\t\t\t\tset = this.randomSet(species, teamDetails, false, isDoubles);\n\t\t\t\t\tpokemon.push(set);\n\t\t\t\t} else {\n\t\t\t\t\tset = this.randomSet(species, teamDetails, true, isDoubles);\n\t\t\t\t\tpokemon.unshift(set);\n\t\t\t\t\tleadsRemaining--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tset = this.randomSet(species, teamDetails, false, isDoubles);\n\t\t\t\tpokemon.push(set);\n\t\t\t}\n\n\t\t\t// Don't bother tracking details for the last Pokemon\n\t\t\tif (pokemon.length === this.maxTeamSize) break;\n\n\t\t\t// Now that our Pokemon has passed all checks, we can increment our counters\n\t\t\tbaseFormes[species.baseSpecies] = 1;\n\n\t\t\t// Increment type counters\n\t\t\tfor (const typeName of types) {\n\t\t\t\tif (typeName in typeCount) {\n\t\t\t\t\ttypeCount[typeName]++;\n\t\t\t\t} else {\n\t\t\t\t\ttypeCount[typeName] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeCombo in typeComboCount) {\n\t\t\t\ttypeComboCount[typeCombo]++;\n\t\t\t} else {\n\t\t\t\ttypeComboCount[typeCombo] = 1;\n\t\t\t}\n\n\t\t\t// Increment weakness counter\n\t\t\tfor (const typeName of this.dex.types.names()) {\n\t\t\t\t// it's weak to the type\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0) {\n\t\t\t\t\ttypeWeaknesses[typeName]++;\n\t\t\t\t}\n\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 1) {\n\t\t\t\t\ttypeDoubleWeaknesses[typeName]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Count Dry Skin/Fluffy as Fire weaknesses\n\t\t\tif (['Dry Skin', 'Fluffy'].includes(set.ability) && this.dex.getEffectiveness('Fire', species) === 0) {\n\t\t\t\ttypeWeaknesses['Fire']++;\n\t\t\t}\n\t\t\tif (weakToFreezeDry) typeWeaknesses['Freeze-Dry']++;\n\n\t\t\t// Increment level 100 counter\n\t\t\tif (set.level === 100) numMaxLevelPokemon++;\n\n\t\t\t// Track what the team has\n\t\t\tif (set.ability === 'Drizzle' || set.moves.includes('raindance')) teamDetails.rain = 1;\n\t\t\tif (set.ability === 'Drought' || set.ability === 'Orichalcum Pulse' || set.moves.includes('sunnyday')) {\n\t\t\t\tteamDetails.sun = 1;\n\t\t\t}\n\t\t\tif (set.ability === 'Sand Stream') teamDetails.sand = 1;\n\t\t\tif (set.ability === 'Snow Warning' || set.moves.includes('snowscape') || set.moves.includes('chillyreception')) {\n\t\t\t\tteamDetails.snow = 1;\n\t\t\t}\n\t\t\tif (set.moves.includes('healbell')) teamDetails.statusCure = 1;\n\t\t\tif (set.moves.includes('spikes') || set.moves.includes('ceaselessedge')) {\n\t\t\t\tteamDetails.spikes = (teamDetails.spikes || 0) + 1;\n\t\t\t}\n\t\t\tif (set.moves.includes('toxicspikes') || set.ability === 'Toxic Debris') teamDetails.toxicSpikes = 1;\n\t\t\tif (set.moves.includes('stealthrock') || set.moves.includes('stoneaxe')) teamDetails.stealthRock = 1;\n\t\t\tif (set.moves.includes('stickyweb')) teamDetails.stickyWeb = 1;\n\t\t\tif (set.moves.includes('defog')) teamDetails.defog = 1;\n\t\t\tif (set.moves.includes('rapidspin') || set.moves.includes('mortalspin')) teamDetails.rapidSpin = 1;\n\t\t\tif (set.moves.includes('auroraveil') || (set.moves.includes('reflect') && set.moves.includes('lightscreen'))) {\n\t\t\t\tteamDetails.screens = 1;\n\t\t\t}\n\t\t\tif (set.role === 'Tera Blast user' || ['ogerpon', 'ogerponhearthflame', 'terapagos'].includes(species.id)) {\n\t\t\t\tteamDetails.teraBlast = 1;\n\t\t\t}\n\t\t}\n\t\tif (pokemon.length < this.maxTeamSize && pokemon.length < 12) { // large teams sometimes cannot be built\n\t\t\tthrow new Error(`Could not build a random team for ${this.format} (seed=${seed})`);\n\t\t}\n\n\t\treturn pokemon;\n\t}\n\n\trandomCCTeam(): RandomTeamsTypes.RandomSet[] {\n\t\tthis.enforceNoDirectCustomBanlistChanges();\n\n\t\tconst dex = this.dex;\n\t\tconst team = [];\n\n\t\tconst natures = this.dex.natures.all();\n\t\tconst items = this.dex.items.all();\n\n\t\tconst randomN = this.randomNPokemon(this.maxTeamSize, this.forceMonotype, undefined, undefined, true);\n\n\t\tfor (let forme of randomN) {\n\t\t\tlet species = dex.species.get(forme);\n\t\t\tif (species.isNonstandard) species = dex.species.get(species.baseSpecies);\n\n\t\t\t// Random legal item\n\t\t\tlet item = '';\n\t\t\tlet isIllegalItem;\n\t\t\tlet isBadItem;\n\t\t\tif (this.gen >= 2) {\n\t\t\t\tdo {\n\t\t\t\t\titem = this.sample(items).name;\n\t\t\t\t\tisIllegalItem = this.dex.items.get(item).gen > this.gen || this.dex.items.get(item).isNonstandard;\n\t\t\t\t\tisBadItem = item.startsWith(\"TR\") || this.dex.items.get(item).isPokeball;\n\t\t\t\t} while (isIllegalItem || (isBadItem && this.randomChance(19, 20)));\n\t\t\t}\n\n\t\t\t// Make sure forme is legal\n\t\t\tif (species.battleOnly) {\n\t\t\t\tif (typeof species.battleOnly === 'string') {\n\t\t\t\t\tspecies = dex.species.get(species.battleOnly);\n\t\t\t\t} else {\n\t\t\t\t\tspecies = dex.species.get(this.sample(species.battleOnly));\n\t\t\t\t}\n\t\t\t\tforme = species.name;\n\t\t\t} else if (species.requiredItems && !species.requiredItems.some(req => toID(req) === item)) {\n\t\t\t\tif (!species.changesFrom) throw new Error(`${species.name} needs a changesFrom value`);\n\t\t\t\tspecies = dex.species.get(species.changesFrom);\n\t\t\t\tforme = species.name;\n\t\t\t}\n\n\t\t\t// Make sure that a base forme does not hold any forme-modifier items.\n\t\t\tlet itemData = this.dex.items.get(item);\n\t\t\tif (itemData.forcedForme && forme === this.dex.species.get(itemData.forcedForme).baseSpecies) {\n\t\t\t\tdo {\n\t\t\t\t\titemData = this.sample(items);\n\t\t\t\t\titem = itemData.name;\n\t\t\t\t} while (\n\t\t\t\t\titemData.gen > this.gen ||\n\t\t\t\t\titemData.isNonstandard ||\n\t\t\t\t\t(itemData.forcedForme && forme === this.dex.species.get(itemData.forcedForme).baseSpecies)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Random legal ability\n\t\t\tconst abilities = Object.values(species.abilities).filter(a => this.dex.abilities.get(a).gen <= this.gen);\n\t\t\tconst ability: string = this.gen <= 2 ? 'No Ability' : this.sample(abilities);\n\n\t\t\t// Four random unique moves from the movepool\n\t\t\tlet pool = ['struggle'];\n\t\t\tif (forme === 'Smeargle') {\n\t\t\t\tpool = this.dex.moves.all()\n\t\t\t\t\t.filter(move => !(move.isNonstandard || move.isZ || move.isMax || move.realMove))\n\t\t\t\t\t.map(m => m.id);\n\t\t\t} else {\n\t\t\t\tpool = [...this.dex.species.getMovePool(species.id)];\n\t\t\t}\n\n\t\t\tconst moves = this.multipleSamplesNoReplace(pool, this.maxMoveCount);\n\n\t\t\t// Random EVs\n\t\t\tconst evs: StatsTable = { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0 };\n\t\t\tconst s: StatID[] = [\"hp\", \"atk\", \"def\", \"spa\", \"spd\", \"spe\"];\n\t\t\tlet evpool = 510;\n\t\t\tdo {\n\t\t\t\tconst x = this.sample(s);\n\t\t\t\tconst y = this.random(Math.min(256 - evs[x], evpool + 1));\n\t\t\t\tevs[x] += y;\n\t\t\t\tevpool -= y;\n\t\t\t} while (evpool > 0);\n\n\t\t\t// Random IVs\n\t\t\tconst ivs = {\n\t\t\t\thp: this.random(32),\n\t\t\t\tatk: this.random(32),\n\t\t\t\tdef: this.random(32),\n\t\t\t\tspa: this.random(32),\n\t\t\t\tspd: this.random(32),\n\t\t\t\tspe: this.random(32),\n\t\t\t};\n\n\t\t\t// Random nature\n\t\t\tconst nature = this.sample(natures).name;\n\n\t\t\t// Level balance--calculate directly from stats rather than using some silly lookup table\n\t\t\tconst mbstmin = 1307; // Sunkern has the lowest modified base stat total, and that total is 807\n\n\t\t\tlet stats = species.baseStats;\n\t\t\t// If Wishiwashi, use the school-forme's much higher stats\n\t\t\tif (species.baseSpecies === 'Wishiwashi') stats = Dex.species.get('wishiwashischool').baseStats;\n\t\t\t// If Terapagos, use Terastal-forme's stats\n\t\t\tif (species.baseSpecies === 'Terapagos') stats = Dex.species.get('terapagosterastal').baseStats;\n\n\t\t\t// Modified base stat total assumes 31 IVs, 85 EVs in every stat\n\t\t\tlet mbst = (stats[\"hp\"] * 2 + 31 + 21 + 100) + 10;\n\t\t\tmbst += (stats[\"atk\"] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats[\"def\"] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats[\"spa\"] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats[\"spd\"] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats[\"spe\"] * 2 + 31 + 21 + 100) + 5;\n\n\t\t\tlet level;\n\t\t\tif (this.adjustLevel) {\n\t\t\t\tlevel = this.adjustLevel;\n\t\t\t} else {\n\t\t\t\tlevel = Math.floor(100 * mbstmin / mbst); // Initial level guess will underestimate\n\n\t\t\t\twhile (level < 100) {\n\t\t\t\t\tmbst = Math.floor((stats[\"hp\"] * 2 + 31 + 21 + 100) * level / 100 + 10);\n\t\t\t\t\t// Since damage is roughly proportional to level\n\t\t\t\t\tmbst += Math.floor(((stats[\"atk\"] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\n\t\t\t\t\tmbst += Math.floor((stats[\"def\"] * 2 + 31 + 21 + 100) * level / 100 + 5);\n\t\t\t\t\tmbst += Math.floor(((stats[\"spa\"] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\n\t\t\t\t\tmbst += Math.floor((stats[\"spd\"] * 2 + 31 + 21 + 100) * level / 100 + 5);\n\t\t\t\t\tmbst += Math.floor((stats[\"spe\"] * 2 + 31 + 21 + 100) * level / 100 + 5);\n\n\t\t\t\t\tif (mbst >= mbstmin) break;\n\t\t\t\t\tlevel++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Random happiness\n\t\t\tconst happiness = this.random(256);\n\n\t\t\t// Random shininess\n\t\t\tconst shiny = this.randomChance(1, 1024);\n\n\t\t\tconst set: RandomTeamsTypes.RandomSet = {\n\t\t\t\tname: species.baseSpecies,\n\t\t\t\tspecies: species.name,\n\t\t\t\tgender: species.gender || (this.random(2) ? 'F' : 'M'),\n\t\t\t\titem,\n\t\t\t\tability,\n\t\t\t\tmoves,\n\t\t\t\tevs,\n\t\t\t\tivs,\n\t\t\t\tnature,\n\t\t\t\tlevel,\n\t\t\t\thappiness,\n\t\t\t\tshiny,\n\t\t\t};\n\t\t\tif (this.gen === 9) {\n\t\t\t\tset.teraType = species.requiredTeraType || this.forceTeraType || this.sample(this.dex.types.names());\n\t\t\t}\n\t\t\tteam.push(set);\n\t\t}\n\n\t\treturn team;\n\t}\n\n\tprivate getPools(requiredType?: string, minSourceGen?: number, ruleTable?: RuleTable, requireMoves = false) {\n\t\t// Memoize pool and speciesPool because, at least during tests, they are constructed with the same parameters\n\t\t// hundreds of times and are expensive to compute.\n\t\tconst isNotCustom = !ruleTable;\n\t\tlet pool: number[] = [];\n\t\tlet speciesPool: Species[] = [];\n\t\tconst ck = this.poolsCacheKey;\n\t\tif (ck && this.cachedPool && this.cachedSpeciesPool &&\n\t\t\tck[0] === requiredType && ck[1] === minSourceGen && ck[2] === ruleTable && ck[3] === requireMoves) {\n\t\t\tspeciesPool = this.cachedSpeciesPool.slice();\n\t\t\tpool = this.cachedPool.slice();\n\t\t} else if (isNotCustom) {\n\t\t\tspeciesPool = [...this.dex.species.all()];\n\t\t\tfor (const species of speciesPool) {\n\t\t\t\tif (species.isNonstandard && species.isNonstandard !== 'Unobtainable') continue;\n\t\t\t\tif (requireMoves) {\n\t\t\t\t\tconst hasMovesInCurrentGen = this.dex.species.getMovePool(species.id).size;\n\t\t\t\t\tif (!hasMovesInCurrentGen) continue;\n\t\t\t\t}\n\t\t\t\tif (requiredType && !species.types.includes(requiredType)) continue;\n\t\t\t\tif (minSourceGen && species.gen < minSourceGen) continue;\n\t\t\t\tconst num = species.num;\n\t\t\t\tif (num <= 0 || pool.includes(num)) continue;\n\t\t\t\tpool.push(num);\n\t\t\t}\n\t\t\tthis.poolsCacheKey = [requiredType, minSourceGen, ruleTable, requireMoves];\n\t\t\tthis.cachedPool = pool.slice();\n\t\t\tthis.cachedSpeciesPool = speciesPool.slice();\n\t\t} else {\n\t\t\tconst EXISTENCE_TAG = ['past', 'future', 'lgpe', 'unobtainable', 'cap', 'custom', 'nonexistent'];\n\t\t\tconst nonexistentBanReason = ruleTable.check('nonexistent');\n\t\t\t// Assume tierSpecies does not differ from species here (mega formes can be used without their stone, etc)\n\t\t\tfor (const species of this.dex.species.all()) {\n\t\t\t\tif (requiredType && !species.types.includes(requiredType)) continue;\n\n\t\t\t\tlet banReason = ruleTable.check('pokemon:' + species.id);\n\t\t\t\tif (banReason) continue;\n\t\t\t\tif (banReason !== '') {\n\t\t\t\t\tif (species.isMega && ruleTable.check('pokemontag:mega')) continue;\n\n\t\t\t\t\tbanReason = ruleTable.check('basepokemon:' + toID(species.baseSpecies));\n\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\tif (banReason !== '' || this.dex.species.get(species.baseSpecies).isNonstandard !== species.isNonstandard) {\n\t\t\t\t\t\tconst nonexistentCheck = Tags.nonexistent.genericFilter!(species) && nonexistentBanReason;\n\t\t\t\t\t\tlet tagWhitelisted = false;\n\t\t\t\t\t\tlet tagBlacklisted = false;\n\t\t\t\t\t\tfor (const ruleid of ruleTable.tagRules) {\n\t\t\t\t\t\t\tif (ruleid.startsWith('*')) continue;\n\t\t\t\t\t\t\tconst tagid = ruleid.slice(12) as ID;\n\t\t\t\t\t\t\tconst tag = Tags[tagid];\n\t\t\t\t\t\t\tif ((tag.speciesFilter || tag.genericFilter)!(species)) {\n\t\t\t\t\t\t\t\tconst existenceTag = EXISTENCE_TAG.includes(tagid);\n\t\t\t\t\t\t\t\tif (ruleid.startsWith('+')) {\n\t\t\t\t\t\t\t\t\tif (!existenceTag && nonexistentCheck) continue;\n\t\t\t\t\t\t\t\t\ttagWhitelisted = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttagBlacklisted = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (tagBlacklisted) continue;\n\t\t\t\t\t\tif (!tagWhitelisted) {\n\t\t\t\t\t\t\tif (ruleTable.check('pokemontag:allpokemon')) continue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tspeciesPool.push(species);\n\t\t\t\tconst num = species.num;\n\t\t\t\tif (pool.includes(num)) continue;\n\t\t\t\tpool.push(num);\n\t\t\t}\n\t\t\tthis.poolsCacheKey = [requiredType, minSourceGen, ruleTable, requireMoves];\n\t\t\tthis.cachedPool = pool.slice();\n\t\t\tthis.cachedSpeciesPool = speciesPool.slice();\n\t\t}\n\t\treturn { pool, speciesPool };\n\t}\n\n\trandomNPokemon(n: number, requiredType?: string, minSourceGen?: number, ruleTable?: RuleTable, requireMoves = false) {\n\t\t// Picks `n` random pokemon--no repeats, even among formes\n\t\t// Also need to either normalize for formes or select formes at random\n\t\t// Unreleased are okay but no CAP\n\t\tif (requiredType && !this.dex.types.get(requiredType).exists) {\n\t\t\tthrow new Error(`\"${requiredType}\" is not a valid type.`);\n\t\t}\n\n\t\tconst { pool, speciesPool } = this.getPools(requiredType, minSourceGen, ruleTable, requireMoves);\n\t\tconst isNotCustom = !ruleTable;\n\n\t\tconst hasDexNumber: { [k: string]: number } = {};\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst num = this.sampleNoReplace(pool);\n\t\t\thasDexNumber[num] = i;\n\t\t}\n\n\t\tconst formes: string[][] = [];\n\t\tfor (const species of speciesPool) {\n\t\t\tif (!(species.num in hasDexNumber)) continue;\n\t\t\tif (isNotCustom && (species.gen > this.gen ||\n\t\t\t\t(species.isNonstandard && species.isNonstandard !== 'Unobtainable'))) continue;\n\t\t\tif (requiredType && !species.types.includes(requiredType)) continue;\n\t\t\tif (!formes[hasDexNumber[species.num]]) formes[hasDexNumber[species.num]] = [];\n\t\t\tformes[hasDexNumber[species.num]].push(species.name);\n\t\t}\n\n\t\tif (formes.length < n) {\n\t\t\tthrow new Error(`Legal Pokemon forme count insufficient to support Max Team Size: (${formes.length} / ${n}).`);\n\t\t}\n\n\t\tconst nPokemon = [];\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tif (!formes[i].length) {\n\t\t\t\tthrow new Error(`Invalid pokemon gen ${this.gen}: ${JSON.stringify(formes)} numbers ${JSON.stringify(hasDexNumber)}`);\n\t\t\t}\n\t\t\tnPokemon.push(this.sample(formes[i]));\n\t\t}\n\t\treturn nPokemon;\n\t}\n\n\trandomHCTeam(): PokemonSet[] {\n\t\tconst hasCustomBans = this.hasDirectCustomBanlistChanges();\n\t\tconst ruleTable = this.dex.formats.getRuleTable(this.format);\n\t\tconst hasNonexistentBan = hasCustomBans && ruleTable.check('nonexistent');\n\t\tconst hasNonexistentWhitelist = hasCustomBans && (hasNonexistentBan === '');\n\n\t\tif (hasCustomBans) {\n\t\t\tthis.enforceNoDirectComplexBans();\n\t\t}\n\n\t\t// Item Pool\n\t\tconst doItemsExist = this.gen > 1;\n\t\tlet itemPool: Item[] = [];\n\t\tif (doItemsExist) {\n\t\t\tif (!hasCustomBans) {\n\t\t\t\titemPool = [...this.dex.items.all()].filter(item => (item.gen <= this.gen && !item.isNonstandard));\n\t\t\t} else {\n\t\t\t\tconst hasAllItemsBan = ruleTable.check('pokemontag:allitems');\n\t\t\t\tfor (const item of this.dex.items.all()) {\n\t\t\t\t\tlet banReason = ruleTable.check('item:' + item.id);\n\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\tif (banReason !== '' && item.id) {\n\t\t\t\t\t\tif (hasAllItemsBan) continue;\n\t\t\t\t\t\tif (item.isNonstandard) {\n\t\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(item.isNonstandard));\n\t\t\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\t\t\tif (banReason !== '' && item.isNonstandard !== 'Unobtainable') {\n\t\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\n\t\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\titemPool.push(item);\n\t\t\t\t}\n\t\t\t\tif (ruleTable.check('item:noitem')) {\n\t\t\t\t\tthis.enforceCustomPoolSizeNoComplexBans('item', itemPool, this.maxTeamSize, 'Max Team Size');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ability Pool\n\t\tconst doAbilitiesExist = (this.gen > 2) && (this.dex.currentMod !== 'gen7letsgo');\n\t\tlet abilityPool: Ability[] = [];\n\t\tif (doAbilitiesExist) {\n\t\t\tif (!hasCustomBans) {\n\t\t\t\tabilityPool = [...this.dex.abilities.all()].filter(ability => (ability.gen <= this.gen && !ability.isNonstandard));\n\t\t\t} else {\n\t\t\t\tconst hasAllAbilitiesBan = ruleTable.check('pokemontag:allabilities');\n\t\t\t\tfor (const ability of this.dex.abilities.all()) {\n\t\t\t\t\tlet banReason = ruleTable.check('ability:' + ability.id);\n\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\tif (banReason !== '') {\n\t\t\t\t\t\tif (hasAllAbilitiesBan) continue;\n\t\t\t\t\t\tif (ability.isNonstandard) {\n\t\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(ability.isNonstandard));\n\t\t\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\t\t\tif (banReason !== '') {\n\t\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\n\t\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tabilityPool.push(ability);\n\t\t\t\t}\n\t\t\t\tif (ruleTable.check('ability:noability')) {\n\t\t\t\t\tthis.enforceCustomPoolSizeNoComplexBans('ability', abilityPool, this.maxTeamSize, 'Max Team Size');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Move Pool\n\t\tconst setMoveCount = ruleTable.maxMoveCount;\n\t\tlet movePool: Move[] = [];\n\t\tif (!hasCustomBans) {\n\t\t\tmovePool = [...this.dex.moves.all()].filter(move =>\n\t\t\t\t(move.gen <= this.gen && !move.isNonstandard));\n\t\t} else {\n\t\t\tconst hasAllMovesBan = ruleTable.check('pokemontag:allmoves');\n\t\t\tfor (const move of this.dex.moves.all()) {\n\t\t\t\tlet banReason = ruleTable.check('move:' + move.id);\n\t\t\t\tif (banReason) continue;\n\t\t\t\tif (banReason !== '') {\n\t\t\t\t\tif (hasAllMovesBan) continue;\n\t\t\t\t\tif (move.isNonstandard) {\n\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(move.isNonstandard));\n\t\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\t\tif (banReason !== '' && move.isNonstandard !== 'Unobtainable') {\n\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\n\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmovePool.push(move);\n\t\t\t}\n\t\t\tthis.enforceCustomPoolSizeNoComplexBans('move', movePool, this.maxTeamSize * setMoveCount, 'Max Team Size * Max Move Count');\n\t\t}\n\n\t\t// Nature Pool\n\t\tconst doNaturesExist = this.gen > 2;\n\t\tlet naturePool: Nature[] = [];\n\t\tif (doNaturesExist) {\n\t\t\tif (!hasCustomBans) {\n\t\t\t\tnaturePool = [...this.dex.natures.all()];\n\t\t\t} else {\n\t\t\t\tconst hasAllNaturesBan = ruleTable.check('pokemontag:allnatures');\n\t\t\t\tfor (const nature of this.dex.natures.all()) {\n\t\t\t\t\tlet banReason = ruleTable.check('nature:' + nature.id);\n\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\tif (banReason !== '' && nature.id) {\n\t\t\t\t\t\tif (hasAllNaturesBan) continue;\n\t\t\t\t\t\tif (nature.isNonstandard) {\n\t\t\t\t\t\t\tbanReason = ruleTable.check('pokemontag:' + toID(nature.isNonstandard));\n\t\t\t\t\t\t\tif (banReason) continue;\n\t\t\t\t\t\t\tif (banReason !== '' && nature.isNonstandard !== 'Unobtainable') {\n\t\t\t\t\t\t\t\tif (hasNonexistentBan) continue;\n\t\t\t\t\t\t\t\tif (!hasNonexistentWhitelist) continue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tnaturePool.push(nature);\n\t\t\t\t}\n\t\t\t\t// There is no 'nature:nonature' rule so do not constrain pool size\n\t\t\t}\n\t\t}\n\n\t\tconst randomN = this.randomNPokemon(this.maxTeamSize, this.forceMonotype, undefined,\n\t\t\thasCustomBans ? ruleTable : undefined);\n\n\t\tconst team = [];\n\t\tfor (const forme of randomN) {\n\t\t\t// Choose forme\n\t\t\tconst species = this.dex.species.get(forme);\n\n\t\t\t// Random unique item\n\t\t\tlet item = '';\n\t\t\tlet itemData;\n\t\t\tlet isBadItem;\n\t\t\tif (doItemsExist) {\n\t\t\t\t// We discard TRs and Balls with 95% probability because of their otherwise overwhelming presence\n\t\t\t\tdo {\n\t\t\t\t\titemData = this.sampleNoReplace(itemPool);\n\t\t\t\t\titem = itemData?.name;\n\t\t\t\t\tisBadItem = item.startsWith(\"TR\") || itemData.isPokeball;\n\t\t\t\t} while (isBadItem && this.randomChance(19, 20) && itemPool.length > this.maxTeamSize);\n\t\t\t}\n\n\t\t\t// Random unique ability\n\t\t\tlet ability = 'No Ability';\n\t\t\tlet abilityData;\n\t\t\tif (doAbilitiesExist) {\n\t\t\t\tabilityData = this.sampleNoReplace(abilityPool);\n\t\t\t\tability = abilityData?.name;\n\t\t\t}\n\n\t\t\t// Random unique moves\n\t\t\tconst m = [];\n\t\t\tdo {\n\t\t\t\tconst move = this.sampleNoReplace(movePool);\n\t\t\t\tm.push(move.id);\n\t\t\t} while (m.length < setMoveCount);\n\n\t\t\t// Random EVs\n\t\t\tconst evs = { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0 };\n\t\t\tif (this.gen === 6) {\n\t\t\t\tlet evpool = 510;\n\t\t\t\tdo {\n\t\t\t\t\tconst x = this.sample(Dex.stats.ids());\n\t\t\t\t\tconst y = this.random(Math.min(256 - evs[x], evpool + 1));\n\t\t\t\t\tevs[x] += y;\n\t\t\t\t\tevpool -= y;\n\t\t\t\t} while (evpool > 0);\n\t\t\t} else {\n\t\t\t\tfor (const x of Dex.stats.ids()) {\n\t\t\t\t\tevs[x] = this.random(256);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Random IVs\n\t\t\tconst ivs: StatsTable = {\n\t\t\t\thp: this.random(32),\n\t\t\t\tatk: this.random(32),\n\t\t\t\tdef: this.random(32),\n\t\t\t\tspa: this.random(32),\n\t\t\t\tspd: this.random(32),\n\t\t\t\tspe: this.random(32),\n\t\t\t};\n\n\t\t\t// Random nature\n\t\t\tlet nature = '';\n\t\t\tif (doNaturesExist && (naturePool.length > 0)) {\n\t\t\t\tnature = this.sample(naturePool).name;\n\t\t\t}\n\n\t\t\t// Level balance\n\t\t\tconst mbstmin = 1307;\n\t\t\tconst stats = species.baseStats;\n\t\t\tlet mbst = (stats['hp'] * 2 + 31 + 21 + 100) + 10;\n\t\t\tmbst += (stats['atk'] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats['def'] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats['spa'] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats['spd'] * 2 + 31 + 21 + 100) + 5;\n\t\t\tmbst += (stats['spe'] * 2 + 31 + 21 + 100) + 5;\n\n\t\t\tlet level;\n\t\t\tif (this.adjustLevel) {\n\t\t\t\tlevel = this.adjustLevel;\n\t\t\t} else {\n\t\t\t\tlevel = Math.floor(100 * mbstmin / mbst);\n\t\t\t\twhile (level < 100) {\n\t\t\t\t\tmbst = Math.floor((stats['hp'] * 2 + 31 + 21 + 100) * level / 100 + 10);\n\t\t\t\t\tmbst += Math.floor(((stats['atk'] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\n\t\t\t\t\tmbst += Math.floor((stats['def'] * 2 + 31 + 21 + 100) * level / 100 + 5);\n\t\t\t\t\tmbst += Math.floor(((stats['spa'] * 2 + 31 + 21 + 100) * level / 100 + 5) * level / 100);\n\t\t\t\t\tmbst += Math.floor((stats['spd'] * 2 + 31 + 21 + 100) * level / 100 + 5);\n\t\t\t\t\tmbst += Math.floor((stats['spe'] * 2 + 31 + 21 + 100) * level / 100 + 5);\n\t\t\t\t\tif (mbst >= mbstmin) break;\n\t\t\t\t\tlevel++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Random happiness\n\t\t\tconst happiness = this.random(256);\n\n\t\t\t// Random shininess\n\t\t\tconst shiny = this.randomChance(1, 1024);\n\n\t\t\tconst set: PokemonSet = {\n\t\t\t\tname: species.baseSpecies,\n\t\t\t\tspecies: species.name,\n\t\t\t\tgender: species.gender || (this.random(2) ? 'F' : 'M'),\n\t\t\t\titem,\n\t\t\t\tability,\n\t\t\t\tmoves: m,\n\t\t\t\tevs,\n\t\t\t\tivs,\n\t\t\t\tnature,\n\t\t\t\tlevel,\n\t\t\t\thappiness,\n\t\t\t\tshiny,\n\t\t\t};\n\t\t\tif (this.gen === 9) {\n\t\t\t\t// Random Tera type\n\t\t\t\tif (this.forceTeraType) {\n\t\t\t\t\tset.teraType = this.forceTeraType;\n\t\t\t\t} else {\n\t\t\t\t\tset.teraType = this.sample(this.dex.types.names());\n\t\t\t\t}\n\t\t\t}\n\t\t\tteam.push(set);\n\t\t}\n\n\t\treturn team;\n\t}\n\n\trandomFactorySets: { [format: string]: { [species: string]: BattleFactorySpecies } } = require('./factory-sets.json');\n\n\trandomFactorySet(\n\t\tspecies: Species, teamData: RandomTeamsTypes.FactoryTeamDetails, tier: string\n\t): RandomTeamsTypes.RandomFactorySet | null {\n\t\tconst id = toID(species.name);\n\t\tconst setList = this.randomFactorySets[tier][id].sets;\n\n\t\tconst itemsLimited = ['choicespecs', 'choiceband', 'choicescarf'];\n\t\tconst movesLimited: { [k: string]: string } = {\n\t\t\tstealthrock: 'stealthRock',\n\t\t\tstoneaxe: 'stealthRock',\n\t\t\tspikes: 'spikes',\n\t\t\tceaselessedge: 'spikes',\n\t\t\ttoxicspikes: 'toxicSpikes',\n\t\t\trapidspin: 'hazardClear',\n\t\t\tdefog: 'hazardClear',\n\t\t};\n\t\tconst abilitiesLimited: { [k: string]: string } = {\n\t\t\ttoxicdebris: 'toxicSpikes',\n\t\t};\n\n\t\t// Build a pool of eligible sets, given the team partners\n\t\t// Also keep track of moves and items limited to one per team\n\t\tconst effectivePool: {\n\t\t\tset: BattleFactorySet, moves?: string[], item?: string,\n\t\t}[] = [];\n\n\t\tfor (const set of setList) {\n\t\t\tlet reject = false;\n\n\t\t\t// limit to 1 dedicated tera user per team\n\t\t\tif (set.wantsTera && teamData.wantsTeraCount) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// reject disallowed items, specifically a second of any given choice item\n\t\t\tconst allowedItems: string[] = [];\n\t\t\tfor (const itemString of set.item) {\n\t\t\t\tconst itemId = toID(itemString);\n\t\t\t\tif (itemsLimited.includes(itemId) && teamData.has[itemId]) continue;\n\t\t\t\tallowedItems.push(itemString);\n\t\t\t}\n\t\t\tif (!allowedItems.length) continue;\n\t\t\tconst item = this.sample(allowedItems);\n\n\t\t\tconst abilityId = toID(this.sample(set.ability));\n\n\t\t\tif (abilitiesLimited[abilityId] && teamData.has[abilitiesLimited[abilityId]]) continue;\n\n\t\t\tconst moves: string[] = [];\n\t\t\tfor (const move of set.moves) {\n\t\t\t\tconst allowedMoves: string[] = [];\n\t\t\t\tfor (const m of move) {\n\t\t\t\t\tconst moveId = toID(m);\n\t\t\t\t\tif (movesLimited[moveId] && teamData.has[movesLimited[moveId]]) continue;\n\t\t\t\t\tallowedMoves.push(m);\n\t\t\t\t}\n\t\t\t\tif (!allowedMoves.length) {\n\t\t\t\t\treject = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tmoves.push(this.sample(allowedMoves));\n\t\t\t}\n\t\t\tif (reject) continue;\n\t\t\teffectivePool.push({ set, moves, item });\n\t\t}\n\n\t\tif (!effectivePool.length) {\n\t\t\tif (!teamData.forceResult) return null;\n\t\t\tfor (const set of setList) {\n\t\t\t\teffectivePool.push({ set });\n\t\t\t}\n\t\t}\n\n\t\t// Sets have individual weight, choose one with weighted random selection\n\n\t\tlet setData = this.sample(effectivePool); // Init with unweighted random set as fallback\n\n\t\tconst total = effectivePool.reduce((a, b) => a + b.set.weight, 0);\n\t\tconst setRand = this.random(total);\n\n\t\tlet cur = 0;\n\t\tfor (const set of effectivePool) {\n\t\t\tcur += set.set.weight;\n\t\t\tif (cur > setRand) {\n\t\t\t\tsetData = set; // Bingo!\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tconst moves = [];\n\t\tfor (const [i, moveSlot] of setData.set.moves.entries()) {\n\t\t\tmoves.push(setData.moves ? setData.moves[i] : this.sample(moveSlot));\n\t\t}\n\n\t\tconst item = setData.item || this.sample(setData.set.item);\n\n\t\treturn {\n\t\t\tname: species.baseSpecies,\n\t\t\tspecies: (typeof species.battleOnly === 'string') ? species.battleOnly : species.name,\n\t\t\tteraType: this.sample(setData.set.teraType),\n\t\t\tgender:\tsetData.set.gender || species.gender || (tier === 'OU' ? 'F' : ''), // F for Cute Charm Enamorus\n\t\t\titem,\n\t\t\tability: this.sample(setData.set.ability),\n\t\t\tshiny: setData.set.shiny || this.randomChance(1, 1024),\n\t\t\tlevel: this.adjustLevel || (tier === \"LC\" ? 5 : 100),\n\t\t\thappiness: 255,\n\t\t\tevs: { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0, ...setData.set.evs },\n\t\t\tivs: { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31, ...setData.set.ivs },\n\t\t\tnature: this.sample(setData.set.nature) || \"Serious\",\n\t\t\tmoves,\n\t\t\twantsTera: setData.set.wantsTera,\n\t\t};\n\t}\n\n\trandomFactoryTeam(side: PlayerOptions, depth = 0): RandomTeamsTypes.RandomFactorySet[] {\n\t\tthis.enforceNoDirectCustomBanlistChanges();\n\n\t\tconst forceResult = depth >= 12;\n\n\t\tif (!this.factoryTier) {\n\t\t\t// this.factoryTier = this.sample(['Uber', 'OU', 'UU', 'RU', 'NU', 'PU', 'LC']);\n\t\t\tthis.factoryTier = this.sample(['Uber', 'OU', 'UU', 'RU', 'NU', 'PU']);\n\t\t}\n\n\t\tconst tierValues: { [k: string]: number } = {\n\t\t\tUber: 5,\n\t\t\tOU: 4, UUBL: 4,\n\t\t\tUU: 3, RUBL: 3,\n\t\t\tRU: 2, NUBL: 2,\n\t\t\tNU: 1, PUBL: 1,\n\t\t\tPU: 0,\n\t\t};\n\n\t\tconst pokemon = [];\n\t\tconst pokemonPool = Object.keys(this.randomFactorySets[this.factoryTier]);\n\n\t\tconst teamData: TeamData = {\n\t\t\ttypeCount: {},\n\t\t\ttypeComboCount: {},\n\t\t\tbaseFormes: {},\n\t\t\thas: {},\n\t\t\twantsTeraCount: 0,\n\t\t\tforceResult,\n\t\t\tweaknesses: {},\n\t\t\tresistances: {},\n\t\t};\n\t\tconst resistanceAbilities: { [k: string]: string[] } = {\n\t\t\tdryskin: ['Water'], waterabsorb: ['Water'], stormdrain: ['Water'],\n\t\t\tflashfire: ['Fire'], heatproof: ['Fire'], waterbubble: ['Fire'], wellbakedbody: ['Fire'],\n\t\t\tlightningrod: ['Electric'], motordrive: ['Electric'], voltabsorb: ['Electric'],\n\t\t\tsapsipper: ['Grass'],\n\t\t\tthickfat: ['Ice', 'Fire'],\n\t\t\teartheater: ['Ground'], levitate: ['Ground'],\n\t\t};\n\t\tconst movesLimited: { [k: string]: string } = {\n\t\t\tstealthrock: 'stealthRock',\n\t\t\tstoneaxe: 'stealthRock',\n\t\t\tspikes: 'spikes',\n\t\t\tceaselessedge: 'spikes',\n\t\t\ttoxicspikes: 'toxicSpikes',\n\t\t\trapidspin: 'hazardClear',\n\t\t\tdefog: 'hazardClear',\n\t\t};\n\t\tconst abilitiesLimited: { [k: string]: string } = {\n\t\t\ttoxicdebris: 'toxicSpikes',\n\t\t};\n\t\tconst limitFactor = Math.ceil(this.maxTeamSize / 6);\n\t\t/**\n\t\t * Weighted random shuffle\n\t\t * Uses the fact that for two uniform variables x1 and x2, x1^(1/w1) is larger than x2^(1/w2)\n\t\t * with probability equal to w1/(w1+w2), which is what we want. See e.g. here https://arxiv.org/pdf/1012.0256.pdf,\n\t\t * original paper is behind a paywall.\n\t\t */\n\t\tconst shuffledSpecies = [];\n\t\tfor (const speciesName of pokemonPool) {\n\t\t\tconst sortObject = {\n\t\t\t\tspeciesName,\n\t\t\t\tscore: this.prng.random() ** (1 / this.randomFactorySets[this.factoryTier][speciesName].weight),\n\t\t\t};\n\t\t\tshuffledSpecies.push(sortObject);\n\t\t}\n\t\tshuffledSpecies.sort((a, b) => a.score - b.score);\n\n\t\twhile (shuffledSpecies.length && pokemon.length < this.maxTeamSize) {\n\t\t\t// repeated popping from weighted shuffle is equivalent to repeated weighted sampling without replacement\n\t\t\tconst species = this.dex.species.get(shuffledSpecies.pop()!.speciesName);\n\t\t\tif (!species.exists) continue;\n\n\t\t\t// Lessen the need of deleting sets of Pokemon after tier shifts\n\t\t\tif (\n\t\t\t\tthis.factoryTier in tierValues && species.tier in tierValues &&\n\t\t\t\ttierValues[species.tier] > tierValues[this.factoryTier]\n\t\t\t) continue;\n\n\t\t\tif (this.forceMonotype && !species.types.includes(this.forceMonotype)) continue;\n\n\t\t\t// Limit to one of each species (Species Clause)\n\t\t\tif (teamData.baseFormes[species.baseSpecies]) continue;\n\n\t\t\t// Limit 2 of any type (most of the time)\n\t\t\tconst types = species.types;\n\t\t\tlet skip = false;\n\t\t\tif (!this.forceMonotype) {\n\t\t\t\tfor (const type of types) {\n\t\t\t\t\tif (teamData.typeCount[type] >= 2 * limitFactor && this.randomChance(4, 5)) {\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (skip) continue;\n\n\t\t\tif (!teamData.forceResult && !this.forceMonotype) {\n\t\t\t\t// Limit 3 of any weakness\n\t\t\t\tfor (const typeName of this.dex.types.names()) {\n\t\t\t\t\t// it's weak to the type\n\t\t\t\t\tif (this.dex.getEffectiveness(typeName, species) > 0 && this.dex.getImmunity(typeName, types)) {\n\t\t\t\t\t\tif (teamData.weaknesses[typeName] >= 3 * limitFactor) {\n\t\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (skip) continue;\n\n\t\t\tconst set = this.randomFactorySet(species, teamData, this.factoryTier);\n\t\t\tif (!set) continue;\n\n\t\t\t// Limit 1 of any type combination\n\t\t\tlet typeCombo = types.slice().sort().join();\n\t\t\tif (set.ability === \"Drought\" || set.ability === \"Drizzle\") {\n\t\t\t\t// Drought and Drizzle don't count towards the type combo limit\n\t\t\t\ttypeCombo = set.ability;\n\t\t\t}\n\t\t\tif (!this.forceMonotype && teamData.typeComboCount[typeCombo] >= limitFactor) continue;\n\n\t\t\t// Okay, the set passes, add it to our team\n\t\t\tpokemon.push(set);\n\n\t\t\t// Now that our Pokemon has passed all checks, we can update team data:\n\t\t\tfor (const type of types) {\n\t\t\t\tif (type in teamData.typeCount) {\n\t\t\t\t\tteamData.typeCount[type]++;\n\t\t\t\t} else {\n\t\t\t\t\tteamData.typeCount[type] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeCombo in teamData.typeComboCount) {\n\t\t\t\tteamData.typeComboCount[typeCombo]++;\n\t\t\t} else {\n\t\t\t\tteamData.typeComboCount[typeCombo] = 1;\n\t\t\t}\n\n\t\t\tteamData.baseFormes[species.baseSpecies] = 1;\n\n\t\t\tteamData.has[toID(set.item)] = 1;\n\n\t\t\tif (set.wantsTera) {\n\t\t\t\tif (!teamData.wantsTeraCount) teamData.wantsTeraCount = 0;\n\t\t\t\tteamData.wantsTeraCount++;\n\t\t\t}\n\n\t\t\tfor (const move of set.moves) {\n\t\t\t\tconst moveId = toID(move);\n\t\t\t\tif (movesLimited[moveId]) {\n\t\t\t\t\tteamData.has[movesLimited[moveId]] = 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst ability = this.dex.abilities.get(set.ability);\n\t\t\tif (abilitiesLimited[ability.id]) {\n\t\t\t\tteamData.has[abilitiesLimited[ability.id]] = 1;\n\t\t\t}\n\n\t\t\tfor (const typeName of this.dex.types.names()) {\n\t\t\t\tconst typeMod = this.dex.getEffectiveness(typeName, types);\n\t\t\t\t// Track resistances because we will require it for triple weaknesses\n\t\t\t\tif (\n\t\t\t\t\ttypeMod < 0 ||\n\t\t\t\t\tresistanceAbilities[ability.id]?.includes(typeName) ||\n\t\t\t\t\t!this.dex.getImmunity(typeName, types)\n\t\t\t\t) {\n\t\t\t\t\t// We don't care about the number of resistances, so just set to 1\n\t\t\t\t\tteamData.resistances[typeName] = 1;\n\t\t\t\t// Track weaknesses\n\t\t\t\t} else if (typeMod > 0) {\n\t\t\t\t\tteamData.weaknesses[typeName] = (teamData.weaknesses[typeName] || 0) + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!teamData.forceResult && pokemon.length < this.maxTeamSize) return this.randomFactoryTeam(side, ++depth);\n\n\t\t// Quality control we cannot afford for monotype\n\t\tif (!teamData.forceResult && !this.forceMonotype) {\n\t\t\tfor (const type in teamData.weaknesses) {\n\t\t\t\t// We reject if our team is triple weak to any type without having a resist\n\t\t\t\tif (teamData.resistances[type]) continue;\n\t\t\t\tif (teamData.weaknesses[type] >= 3 * limitFactor) return this.randomFactoryTeam(side, ++depth);\n\t\t\t}\n\t\t\t// Try to force Stealth Rock on non-Uber teams\n\t\t\tif (!teamData.has['stealthRock'] && this.factoryTier !== 'Uber') return this.randomFactoryTeam(side, ++depth);\n\t\t}\n\t\treturn pokemon;\n\t}\n\n\trandomBSSFactorySets: AnyObject = require(\"./bss-factory-sets.json\");\n\n\trandomBSSFactorySet(\n\t\tspecies: Species, teamData: RandomTeamsTypes.FactoryTeamDetails\n\t): RandomTeamsTypes.RandomFactorySet | null {\n\t\tconst id = toID(species.name);\n\t\tconst setList = this.randomBSSFactorySets[id].sets;\n\n\t\tconst movesMax: { [k: string]: number } = {\n\t\t\tbatonpass: 1,\n\t\t\tstealthrock: 1,\n\t\t\ttoxicspikes: 1,\n\t\t\ttrickroom: 1,\n\t\t\tauroraveil: 1,\n\t\t};\n\t\tconst weatherAbilities = ['drizzle', 'drought', 'snowwarning', 'sandstream'];\n\t\tconst terrainAbilities: { [k: string]: string } = {\n\t\t\telectricsurge: \"electric\",\n\t\t\tpsychicsurge: \"psychic\",\n\t\t\tgrassysurge: \"grassy\",\n\t\t\tseedsower: \"grassy\",\n\t\t\tmistysurge: \"misty\",\n\t\t};\n\t\tconst terrainItemsRequire: { [k: string]: string } = {\n\t\t\telectricseed: \"electric\",\n\t\t\tpsychicseed: \"psychic\",\n\t\t\tgrassyseed: \"grassy\",\n\t\t\tmistyseed: \"misty\",\n\t\t};\n\n\t\tconst maxWantsTera = 2;\n\n\t\t// Build a pool of eligible sets, given the team partners\n\t\t// Also keep track of sets with moves the team requires\n\t\tconst effectivePool: {\n\t\t\tset: BSSFactorySet, moveVariants?: number[], itemVariants?: number, abilityVariants?: number,\n\t\t}[] = [];\n\n\t\tfor (const curSet of setList) {\n\t\t\tlet reject = false;\n\n\t\t\t// limit to 2 dedicated tera users per team\n\t\t\tif (curSet.wantsTera && teamData.wantsTeraCount && teamData.wantsTeraCount >= maxWantsTera) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// reject 2+ weather setters\n\t\t\tif (teamData.weather && weatherAbilities.includes(curSet.ability)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (terrainAbilities[curSet.ability]) {\n\t\t\t\tif (!teamData.terrain) teamData.terrain = [];\n\t\t\t\tteamData.terrain.push(terrainAbilities[curSet.ability]);\n\t\t\t}\n\n\t\t\tfor (const item of curSet.item) {\n\t\t\t\tif (terrainItemsRequire[item] && !teamData.terrain?.includes(terrainItemsRequire[item])) {\n\t\t\t\t\treject = true; // reject any sets with a seed item possible and no terrain setter to activate it\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst curSetMoveVariants = [];\n\t\t\tfor (const move of curSet.moves) {\n\t\t\t\tconst variantIndex = this.random(move.length);\n\t\t\t\tconst moveId = toID(move[variantIndex]);\n\t\t\t\tif (movesMax[moveId] && teamData.has[moveId] >= movesMax[moveId]) {\n\t\t\t\t\treject = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcurSetMoveVariants.push(variantIndex);\n\t\t\t}\n\t\t\tif (reject) continue;\n\t\t\tconst set = { set: curSet, moveVariants: curSetMoveVariants };\n\t\t\teffectivePool.push(set);\n\t\t}\n\n\t\tif (!effectivePool.length) {\n\t\t\tif (!teamData.forceResult) return null;\n\t\t\tfor (const curSet of setList) {\n\t\t\t\teffectivePool.push({ set: curSet });\n\t\t\t}\n\t\t}\n\n\t\t// Sets have individual weight, choose one with weighted random selection\n\n\t\tlet setData = this.sample(effectivePool); // Init with unweighted random set as fallback\n\n\t\tconst total = effectivePool.reduce((a, b) => a + b.set.weight, 0);\n\t\tconst setRand = this.random(total);\n\n\t\tlet cur = 0;\n\t\tfor (const set of effectivePool) {\n\t\t\tcur += set.set.weight;\n\t\t\tif (cur > setRand) {\n\t\t\t\tsetData = set; // Bingo!\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tconst moves = [];\n\t\tfor (const [i, moveSlot] of setData.set.moves.entries()) {\n\t\t\tmoves.push(setData.moveVariants ? moveSlot[setData.moveVariants[i]] : this.sample(moveSlot));\n\t\t}\n\n\t\treturn {\n\t\t\tname: setData.set.species || species.baseSpecies,\n\t\t\tspecies: setData.set.species,\n\t\t\tteraType: (this.sampleIfArray(setData.set.teraType)),\n\t\t\tgender:\tsetData.set.gender || species.gender || (this.randomChance(1, 2) ? \"M\" : \"F\"),\n\t\t\titem: this.sampleIfArray(setData.set.item) || \"\",\n\t\t\tability: this.sampleIfArray(setData.set.ability),\n\t\t\tshiny: this.randomChance(1, 1024),\n\t\t\tlevel: 50,\n\t\t\thappiness: 255,\n\t\t\tevs: { hp: 0, atk: 0, def: 0, spa: 0, spd: 0, spe: 0, ...setData.set.evs },\n\t\t\tivs: { hp: 31, atk: 31, def: 31, spa: 31, spd: 31, spe: 31, ...setData.set.ivs },\n\t\t\tnature: setData.set.nature || \"Serious\",\n\t\t\tmoves,\n\t\t\twantsTera: setData.set.wantsTera,\n\t\t};\n\t}\n\n\trandomBSSFactoryTeam(side: PlayerOptions, depth = 0): RandomTeamsTypes.RandomFactorySet[] {\n\t\tthis.enforceNoDirectCustomBanlistChanges();\n\n\t\tconst forceResult = depth >= 4;\n\n\t\tconst pokemon = [];\n\n\t\tconst pokemonPool = Object.keys(this.randomBSSFactorySets);\n\n\t\tconst teamData: TeamData = {\n\t\t\ttypeCount: {},\n\t\t\ttypeComboCount: {},\n\t\t\tbaseFormes: {},\n\t\t\thas: {},\n\t\t\twantsTeraCount: 0,\n\t\t\tforceResult,\n\t\t\tweaknesses: {},\n\t\t\tresistances: {},\n\t\t};\n\t\tconst weatherAbilitiesSet: { [k: string]: string } = {\n\t\t\tdrizzle: \"raindance\",\n\t\t\tdrought: \"sunnyday\",\n\t\t\tsnowwarning: \"hail\",\n\t\t\tsandstream: \"sandstorm\",\n\t\t};\n\t\tconst resistanceAbilities: { [k: string]: string[] } = {\n\t\t\twaterabsorb: [\"Water\"],\n\t\t\tflashfire: [\"Fire\"],\n\t\t\tlightningrod: [\"Electric\"],\n\t\t\tvoltabsorb: [\"Electric\"],\n\t\t\tthickfat: [\"Ice\", \"Fire\"],\n\t\t\tlevitate: [\"Ground\"],\n\t\t};\n\t\tconst limitFactor = Math.ceil(this.maxTeamSize / 6);\n\t\t/**\n\t\t * Weighted random shuffle\n\t\t * Uses the fact that for two uniform variables x1 and x2, x1^(1/w1) is larger than x2^(1/w2)\n\t\t * with probability equal to w1/(w1+w2), which is what we want. See e.g. here https://arxiv.org/pdf/1012.0256.pdf,\n\t\t * original paper is behind a paywall.\n\t\t */\n\t\tconst shuffledSpecies = [];\n\t\tfor (const speciesName of pokemonPool) {\n\t\t\tconst sortObject = {\n\t\t\t\tspeciesName,\n\t\t\t\tscore: this.prng.random() ** (1 / this.randomBSSFactorySets[speciesName].weight),\n\t\t\t};\n\t\t\tshuffledSpecies.push(sortObject);\n\t\t}\n\t\tshuffledSpecies.sort((a, b) => a.score - b.score);\n\n\t\twhile (shuffledSpecies.length && pokemon.length < this.maxTeamSize) {\n\t\t\t// repeated popping from weighted shuffle is equivalent to repeated weighted sampling without replacement\n\t\t\tconst species = this.dex.species.get(shuffledSpecies.pop()!.speciesName);\n\t\t\tif (!species.exists) continue;\n\n\t\t\tif (this.forceMonotype && !species.types.includes(this.forceMonotype)) continue;\n\n\t\t\t// Limit to one of each species (Species Clause)\n\t\t\tif (teamData.baseFormes[species.baseSpecies]) continue;\n\n\t\t\t// Limit 2 of any type (most of the time)\n\t\t\tconst types = species.types;\n\t\t\tlet skip = false;\n\t\t\tif (!this.forceMonotype) {\n\t\t\t\tfor (const type of types) {\n\t\t\t\t\tif (teamData.typeCount[type] >= 2 * limitFactor && this.randomChance(4, 5)) {\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (skip) continue;\n\n\t\t\tconst set = this.randomBSSFactorySet(species, teamData);\n\t\t\tif (!set) continue;\n\n\t\t\t// Limit 1 of any type combination\n\t\t\tlet typeCombo = types.slice().sort().join();\n\t\t\tif (set.ability === \"Drought\" || set.ability === \"Drizzle\") {\n\t\t\t\t// Drought and Drizzle don't count towards the type combo limit\n\t\t\t\ttypeCombo = set.ability;\n\t\t\t}\n\t\t\tif (!this.forceMonotype && teamData.typeComboCount[typeCombo] >= limitFactor) continue;\n\n\t\t\tconst itemData = this.dex.items.get(set.item);\n\t\t\tif (teamData.has[itemData.id]) continue; // Item Clause\n\n\t\t\t// Okay, the set passes, add it to our team\n\t\t\tpokemon.push(set);\n\n\t\t\t// Now that our Pokemon has passed all checks, we can update team data:\n\t\t\tfor (const type of types) {\n\t\t\t\tif (type in teamData.typeCount) {\n\t\t\t\t\tteamData.typeCount[type]++;\n\t\t\t\t} else {\n\t\t\t\t\tteamData.typeCount[type] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeCombo in teamData.typeComboCount) {\n\t\t\t\tteamData.typeComboCount[typeCombo]++;\n\t\t\t} else {\n\t\t\t\tteamData.typeComboCount[typeCombo] = 1;\n\t\t\t}\n\n\t\t\tteamData.baseFormes[species.baseSpecies] = 1;\n\n\t\t\tteamData.has[itemData.id] = 1;\n\n\t\t\tif (set.wantsTera) {\n\t\t\t\tif (!teamData.wantsTeraCount) teamData.wantsTeraCount = 0;\n\t\t\t\tteamData.wantsTeraCount++;\n\t\t\t}\n\n\t\t\tconst abilityState = this.dex.abilities.get(set.ability);\n\t\t\tif (abilityState.id in weatherAbilitiesSet) {\n\t\t\t\tteamData.weather = weatherAbilitiesSet[abilityState.id];\n\t\t\t}\n\n\t\t\tfor (const move of set.moves) {\n\t\t\t\tconst moveId = toID(move);\n\t\t\t\tif (moveId in teamData.has) {\n\t\t\t\t\tteamData.has[moveId]++;\n\t\t\t\t} else {\n\t\t\t\t\tteamData.has[moveId] = 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const typeName of this.dex.types.names()) {\n\t\t\t\t// Cover any major weakness (3+) with at least one resistance\n\t\t\t\tif (teamData.resistances[typeName] >= 1) continue;\n\t\t\t\tif (resistanceAbilities[abilityState.id]?.includes(typeName) ||\t!this.dex.getImmunity(typeName, types)) {\n\t\t\t\t\t// Heuristic: assume that Pok\u00E9mon with these abilities don't have (too) negative typing.\n\t\t\t\t\tteamData.resistances[typeName] = (teamData.resistances[typeName] || 0) + 1;\n\t\t\t\t\tif (teamData.resistances[typeName] >= 1) teamData.weaknesses[typeName] = 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst typeMod = this.dex.getEffectiveness(typeName, types);\n\t\t\t\tif (typeMod < 0) {\n\t\t\t\t\tteamData.resistances[typeName] = (teamData.resistances[typeName] || 0) + 1;\n\t\t\t\t\tif (teamData.resistances[typeName] >= 1) teamData.weaknesses[typeName] = 0;\n\t\t\t\t} else if (typeMod > 0) {\n\t\t\t\t\tteamData.weaknesses[typeName] = (teamData.weaknesses[typeName] || 0) + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!teamData.forceResult && pokemon.length < this.maxTeamSize) return this.randomBSSFactoryTeam(side, ++depth);\n\n\t\t// Quality control we cannot afford for monotype\n\t\tif (!teamData.forceResult && !this.forceMonotype) {\n\t\t\tfor (const type in teamData.weaknesses) {\n\t\t\t\tif (teamData.weaknesses[type] >= 3 * limitFactor) return this.randomBSSFactoryTeam(side, ++depth);\n\t\t\t}\n\t\t}\n\n\t\treturn pokemon;\n\t}\n\n\trandomDraftFactoryMatchups: AnyObject = require(\"./draft-factory-matchups.json\").matchups;\n\trdfMatchupIndex = -1;\n\trdfMatchupSide = -1;\n\n\trandomDraftFactoryTeam(side: PlayerOptions): RandomTeamsTypes.RandomDraftFactorySet[] {\n\t\tthis.enforceNoDirectCustomBanlistChanges();\n\n\t\tif (this.rdfMatchupIndex === -1) this.rdfMatchupIndex = this.random(0, this.randomDraftFactoryMatchups.length);\n\t\tif (this.rdfMatchupSide === -1) this.rdfMatchupSide = this.random(0, 2);\n\n\t\tconst matchup = this.randomDraftFactoryMatchups[this.rdfMatchupIndex];\n\t\tconst team = Teams.unpack(matchup[this.rdfMatchupSide]);\n\t\tif (!team) throw new Error(`Invalid team for draft factory matchup ${this.rdfMatchupIndex}`);\n\t\tthis.rdfMatchupSide = 1 - this.rdfMatchupSide;\n\t\treturn team.map(set => {\n\t\t\tlet species = this.dex.species.get(set.species);\n\t\t\tif (species.battleOnly) {\n\t\t\t\tif (typeof species.battleOnly !== 'string') {\n\t\t\t\t\tthrow new Error(`Invalid species ${species.name} for draft factory matchup ${this.rdfMatchupIndex} team ${this.rdfMatchupSide}`);\n\t\t\t\t}\n\t\t\t\tspecies = this.dex.species.get(species.battleOnly);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tname: species.baseSpecies,\n\t\t\t\tspecies: species.name,\n\t\t\t\tgender: set.gender,\n\t\t\t\tmoves: set.moves,\n\t\t\t\tability: set.ability,\n\t\t\t\tevs: set.evs,\n\t\t\t\tivs: set.ivs,\n\t\t\t\titem: set.item,\n\t\t\t\tlevel: this.adjustLevel || set.level,\n\t\t\t\tshiny: !!set.shiny,\n\t\t\t\tnature: set.nature,\n\t\t\t\tteraType: set.teraType,\n\t\t\t\tteraCaptain: set.name === 'Tera Captain',\n\t\t\t};\n\t\t});\n\t}\n}\n\nexport default RandomTeams;\n"],
  "mappings": "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",
  "names": ["moveid", "set", "abilities", "item", "moves"]
}
