name: Run Unit Tests

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  # trigger on pull requests
  pull_request:

  # trigger on all commits to trunk branches
  push:
    branches:
      - "main"

  # trigger on request
  workflow_dispatch:

jobs:
  run_tests:
    name: Unit test [py${{ matrix.python }} ${{ matrix.os }}]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        python: ['310', '311', '312', '313']
        include:
          - os: 'macos-14'
            python: '313'
          - os: 'windows-2025'
            python: '313'

    steps:
      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.13"
      - name: Set up Python environment
        uses: glotzerlab/workflows/setup-uv@1fe577d5430222a9793694a14cdb316cf8f720e1 # 0.9.0
        with:
          lockfile: ".github/workflows/requirements-test.txt"
      - name: Build and Install
        run: |
          uv pip install . --no-build-isolation --no-deps --system -v
      - name: Run Tests (Unix/macOS)
        if: runner.os != 'Windows'
        run: pytest tests/ -v
      - name: Run Tests (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # run tests and emit junit xml
          pytest tests/ -v --junitxml pytest-report.xml
          # if pytest returned non-zero, check if it was only due to flakies
          if ($LASTEXITCODE -ne 0) {
            [xml]$j = Get-Content pytest-report.xml
            $failures = [int]$j.testsuite.failures
            $errors   = [int]$j.testsuite.errors
            if ($failures -eq 0 -and $errors -eq 0) {
              Write-Host "Only flaky reruns occurred; forcing success."
              exit 0
            } else {
              exit $LASTEXITCODE
            }
          } else {
            exit 0
          }

  tests_complete:
    name: All tests
    if: always()
    needs: [run_tests]
    runs-on: ubuntu-latest

    steps:
    - run: jq --exit-status 'all(.result == "success")' <<< '${{ toJson(needs) }}'
    - name: Done
      run: echo "Done."
