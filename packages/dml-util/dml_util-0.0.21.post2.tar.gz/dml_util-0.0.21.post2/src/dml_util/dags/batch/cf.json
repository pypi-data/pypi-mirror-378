{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Stack for AWS Lambda with Batch Integration",
  "Parameters": {
    "VpcCidr": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "CIDR block for the VPC",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/([8-9]|1[0-9]|2[0-9]|3[0-2])$",
      "ConstraintDescription": "Must be a valid CIDR block (e.g., 10.0.0.0/16)."
    },
    "Bucket": {
      "Type": "String",
      "Description": "What bucket to use"
    },
    "Prefix": {
      "Type": "String",
      "Default": "jobs",
      "Description": "What prefix to use"
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": { "Ref": "VpcCidr" },
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${AWS::StackName}-vpc"
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Fn::GetAtt": ["VPC", "VpcId"]
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Fn::GetAtt": ["VPC", "VpcId"] },
        "CidrBlock": {
          "Fn::Select": [0, { "Fn::Cidr": [{ "Ref": "VpcCidr" }, 4, 13] }]
        },
        "AvailabilityZone": {
          "Fn::Select": [0, { "Fn::GetAZs": "" }]
        },
        "MapPublicIpOnLaunch": true
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Fn::GetAtt": ["VPC", "VpcId"] },
        "CidrBlock": {
          "Fn::Select": [1, { "Fn::Cidr": [{ "Ref": "VpcCidr" }, 4, 13] }]
        },
        "AvailabilityZone": {
          "Fn::Select": [1, { "Fn::GetAZs": "" }]
        },
        "MapPublicIpOnLaunch": true
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Fn::GetAtt": ["VPC", "VpcId"]
        }
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "JobTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": {
          "Fn::Sub": "${AWS::StackName}-job"
        },
        "AttributeDefinitions": [
          {
            "AttributeName": "cache_key",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "cache_key",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": { "Fn::Sub": "${AWS::StackName}-ecs-cluster" },
        "ClusterSettings": [
          {
            "Name": "containerInsights",
            "Value": "enabled"
          }
        ]
      }
    },
    "LaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateData": {
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "MIME-Version: 1.0\n",
                  "Content-Type: multipart/mixed; boundary=\"==MYBOUNDARY==\"\n",
                  "\n",
                  "--==MYBOUNDARY==\n",
                  "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                  "Content-Transfer-Encoding: 7bit\n",
                  "\n",
                  "#!/bin/bash\n",
                  "echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config\n",
                  "\n",
                  "--==MYBOUNDARY==--\n"
                ]
              ]
            }
          }
        }
      }
    },
    "BatchServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "batch.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole"
        ]
      }
    },
    "BatchInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        ]
      }
    },
    "BatchInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "BatchInstanceRole"
          }
        ]
      }
    },
    "BatchTaskRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": { "Fn::Sub": "${AWS::StackName}-S3Access" },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["s3:*"],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${Bucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${Bucket}/"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${Bucket}"
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": { "Fn::Sub": "${AWS::StackName}-logs" },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:CreateLogGroup",
                    "logs:DescribeLogGroups"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:dml:*"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": { "Fn::Sub": "${AWS::StackName}-BatchAndS3Access" },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "batch:SubmitJob",
                    "batch:DescribeJobs",
                    "batch:RegisterJobDefinition",
                    "batch:DeregisterJobDefinition"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": ["s3:*"],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${Bucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${Bucket}/"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${Bucket}"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": {
                    "Fn::GetAtt": ["JobTable", "Arn"]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": ["iam:PassRole"],
                  "Resource": {
                    "Fn::GetAtt": ["BatchTaskRole", "Arn"]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "BatchSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for Batch compute environment",
        "VpcId": {
          "Fn::GetAtt": ["VPC", "VpcId"]
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": -1,
            "FromPort": -1,
            "ToPort": -1,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "CpuComputeEnvironment": {
      "Type": "AWS::Batch::ComputeEnvironment",
      "Properties": {
        "Type": "MANAGED",
        "ServiceRole": {
          "Fn::GetAtt": ["BatchServiceRole", "Arn"]
        },
        "ComputeEnvironmentName": {
          "Fn::Sub": "${AWS::StackName}-cpu"
        },
        "ComputeResources": {
          "Type": "EC2",
          "MinvCpus": 0,
          "MaxvCpus": 256,
          "DesiredvCpus": 0,
          "InstanceTypes": ["optimal"],
          "Subnets": [
            {
              "Ref": "PublicSubnet1"
            },
            {
              "Ref": "PublicSubnet2"
            }
          ],
          "SecurityGroupIds": [
            {
              "Ref": "BatchSecurityGroup"
            }
          ],
          "InstanceRole": {
            "Ref": "BatchInstanceProfile"
          },
          "LaunchTemplate": {
            "LaunchTemplateId": { "Ref": "LaunchTemplate" },
            "Version": "$Latest"
          },
          "AllocationStrategy": "BEST_FIT_PROGRESSIVE"
        }
      }
    },
    "GpuComputeEnvironment": {
      "Type": "AWS::Batch::ComputeEnvironment",
      "Properties": {
        "Type": "MANAGED",
        "ServiceRole": {
          "Fn::GetAtt": ["BatchServiceRole", "Arn"]
        },
        "ComputeEnvironmentName": {
          "Fn::Sub": "${AWS::StackName}-gpu"
        },
        "ComputeResources": {
          "Type": "EC2",
          "MinvCpus": 0,
          "MaxvCpus": 256,
          "DesiredvCpus": 0,
          "InstanceTypes": [
            "g4dn.xlarge",
            "g4dn.2xlarge",
            "g4dn.4xlarge",
            "g5.xlarge",
            "g5.2xlarge",
            "g5.4xlarge",
            "g5.8xlarge",
            "p3.2xlarge"
          ],
          "Subnets": [
            {
              "Ref": "PublicSubnet1"
            },
            {
              "Ref": "PublicSubnet2"
            }
          ],
          "SecurityGroupIds": [
            {
              "Ref": "BatchSecurityGroup"
            }
          ],
          "InstanceRole": {
            "Ref": "BatchInstanceProfile"
          },
          "LaunchTemplate": {
            "LaunchTemplateId": { "Ref": "LaunchTemplate" },
            "Version": "$Latest"
          },
          "AllocationStrategy": "BEST_FIT_PROGRESSIVE"
        }
      }
    },
    "CpuJobQueue": {
      "Type": "AWS::Batch::JobQueue",
      "Properties": {
        "JobQueueName": { "Fn::Sub": "${AWS::StackName}-cpu" },
        "Priority": 1,
        "ComputeEnvironmentOrder": [
          {
            "ComputeEnvironment": {
              "Ref": "CpuComputeEnvironment"
            },
            "Order": 1
          }
        ]
      }
    },
    "GpuJobQueue": {
      "Type": "AWS::Batch::JobQueue",
      "Properties": {
        "JobQueueName": { "Fn::Sub": "${AWS::StackName}-gpu" },
        "Priority": 1,
        "ComputeEnvironmentOrder": [
          {
            "ComputeEnvironment": {
              "Ref": "GpuComputeEnvironment"
            },
            "Order": 1
          }
        ]
      }
    },
    "Fn": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": { "Fn::Sub": "${AWS::StackName}-executor" },
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"] },
        "Code": null,
        "Runtime": "python3.12",
        "Timeout": 60,
        "MemorySize": 128,
        "Environment": {
          "Variables": {
            "GPU_QUEUE": { "Ref": "GpuJobQueue" },
            "CPU_QUEUE": { "Ref": "CpuJobQueue" },
            "DYNAMODB_TABLE": { "Ref": "JobTable" },
            "BATCH_TASK_ROLE_ARN": { "Fn::GetAtt": ["BatchTaskRole", "Arn"] },
            "DELETE_DYNAMO_ON_FAIL": "1"
          }
        }
      }
    }
  },
  "Outputs": {
    "LambdaFunctionArn": {
      "Description": "ARN of the Lambda function",
      "Value": {
        "Fn::GetAtt": ["Fn", "Arn"]
      }
    },
    "CpuJobQueueArn": {
      "Description": "ARN of the standard (CPU only) job queue",
      "Value": {
        "Ref": "CpuJobQueue"
      }
    },
    "GpuJobQueueArn": {
      "Description": "ARN of the GPU job queue",
      "Value": {
        "Ref": "GpuJobQueue"
      }
    },
    "DynamoDBTable": {
      "Description": "Name of the DynamoDB table",
      "Value": {
        "Ref": "JobTable"
      }
    }
  }
}
