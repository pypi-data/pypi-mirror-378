---
Transform: AWS::Serverless-2016-10-31
Description: OMBU Alarms / Account / Cost / Alarm

# Stack to alert if this week's AWS costs exceed last week's by more than 50%
# of a baseline monthly cost.

Parameters:

  BaselineCost:
    Description: Expected monthly baseline AWS cost.
    Type: Number

  ThresholdCost:
    Description: Threshold cost about 25% of baseline cost.
    Type: Number

  ScheduleExpression:
    Description: The UTC time that EventBridge will run the refresh lambda.
    Default: '0 9 * * ? *'
    Type: String

  NotificationArn:
    Description: The ARN of the SNS topic to send notifications to.
    Type: String

  LogRetention:
    Description: How long to keep logs for in days.
    Default: 30
    Type: Number

  HasLambdaAlarms:
    Description: Turn on error lambda alarms for compliance.
    Default: false
    Type: String
    AllowedValues:
      - true
      - false

  AlarmEmailEndpoint:
    Description: Email address to receive alarm notifications.
    Default: analytics+lambdaalarm@ombuweb.com
    Type: String

  ErrorThreshold:
    Description: The threshold for Lambda function errors to trigger the alarm.
    Default: 1
    Type: Number

  EvaluationPeriods:
    Description: >
      The number of periods over which data is compared to the threshold.
    Default: 1
    Type: Number

  Period:
    Description: The period in seconds over which the statistic is applied.
    Default: 60
    Type: Number

Conditions:

  HasLambdaAlarms: !Equals [!Ref HasLambdaAlarms, true]

Resources:

  LambdaErrorAlarmTopic:
    Type: AWS::SNS::Topic
    Condition: HasLambdaAlarms
    Properties:
      DisplayName: Lambda Error Alarms
      TopicName: !Sub "${AWS::StackName}-LambdaErrorAlarms"

  LambdaErrorAlarmSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasLambdaAlarms
    Properties:
      Protocol: email
      Endpoint: !Ref AlarmEmailEndpoint
      TopicArn: !Ref LambdaErrorAlarmTopic

  AccountCostRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-AllowLogging"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:\
                          log-group:/aws/lambda/*"
        - PolicyName: !Sub "${AWS::StackName}-CostEstimates"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ce:GetCostForecast
                Resource: '*'
        - PolicyName: !Sub "${AWS::StackName}-Cloudwatch"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'

  AccountCostGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AccountCost}"
      RetentionInDays: !Ref LogRetention

  AccountCost:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../scripts/account_cost
      Handler: account_cost.handler
      Role: !GetAtt AccountCostRole.Arn
      Runtime: python3.12
      Timeout: 600
      MemorySize: 128
      ReservedConcurrentExecutions: 1
      Description: Look up the estimated monthly costs of an account.
      Environment:
        Variables:
          AWS_ACCOUNT: !Ref AWS::AccountId

  AccountCostErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasLambdaAlarms
    Properties:
      AlarmName: !Sub "${AccountCost}-ErrorAlarm"
      AlarmDescription: Alarm for Lambda function errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: !Ref Period
      EvaluationPeriods: !Ref EvaluationPeriods
      Threshold: !Ref ErrorThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Ref AccountCost
      AlarmActions:
        - !Ref LambdaErrorAlarmTopic
      OKActions:
        - !Ref LambdaErrorAlarmTopic

  AccountCostAsyncConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref AccountCost
      MaximumRetryAttempts: 0
      Qualifier: $LATEST

  ScheduledAccountCost:
    Type: AWS::Events::Rule
    Properties:
      Description: Runs to see what the estimated costs for the month are.
      State: ENABLED
      ScheduleExpression: !Sub "cron(${ScheduleExpression})"
      Targets:
        - Id: get-estimated-account-costs
          Arn:
            Fn::GetAtt:
              - AccountCost
              - Arn

  ScheduledAccountCostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AccountCost
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - ScheduledAccountCost
          - Arn

  CostExceedsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "cost-alarm-for-${AWS::AccountId}"
      Namespace: Billing
      Dimensions:
        - Name: Account
          Value: !Ref AWS::AccountId
      MetricName: MonthlyForecastCost
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Threshold: !Ref ThresholdCost
      Period: 86400
      EvaluationPeriods: 1
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref NotificationArn
      AlarmDescription:
        !Sub "Estimated account costs for ${AWS::AccountId} is currently \
              $<currentvalue>, exceeding the alarm threshold \
              of $${ThresholdCost}."
