# pyproject.toml - GLIMPS Malware Admin Client Project Configuration

[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gmadmin"
version = "0.1.0"
description = "Python client library and CLI for GLIMPS Malware Admin API"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "GLIMPS Dev Core Team", email = "contact@glimps.re"},
]
maintainers = [
    {name = "GLIMPS Dev Core Team", email = "contact@glimps.re"},
]
keywords = [
    "glimps",
    "admin",
    "api",
    "cli",
    "malware",
    "analysis",
    "security",
    "management",
    "rbac",
    "user-management",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Security",
    "Topic :: Utilities",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    "click>=8.0,<9.0",
    "click-default-group>=1.2,<2.0",
    "requests>=2.32,<3.0",
    "rich>=13.0,<14.0",
    "certifi>=2023.0.0",
    "urllib3>=2.0.0,<3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-timeout>=2.1.0",
    "pytest-asyncio>=0.21.0",
    "responses>=0.23.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "types-requests>=2.28.0",
    "tox>=4.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-timeout>=2.1.0",
    "responses>=0.23.0",
]
lint = [
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "types-requests>=2.28.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-click>=4.0.0",
    "sphinx-autodoc-typehints>=1.19.0",
]
all = [
    "gmadmin[dev,test,lint,docs]",
]

[project.urls]
Homepage = "https://github.com/GLIMPS/gmadmin"
Documentation = "https://docs.glimps.re/gmadmin"
Repository = "https://github.com/GLIMPS/gmadmin.git"
Issues = "https://github.com/GLIMPS/gmadmin/issues"
Changelog = "https://github.com/GLIMPS/gmadmin/blob/main/CHANGELOG.md"

[project.scripts]
gmadmin = "gmadmin.cli:gcli"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["gmadmin*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
gmadmin = [
    "py.typed",
    "*.json",
    "*.yml",
    "*.yaml",
]

[tool.ruff]
# Ruff configuration for linting and formatting

# Exclude commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "virtualenv",
]

# Same as Black
line-length = 119
indent-width = 4

# Target Python 3.8+
target-version = "py38"

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",     # pycodestyle errors
    "F",     # Pyflakes
    "W",     # pycodestyle warnings
    "C90",   # mccabe complexity
    "I",     # isort
    "N",     # pep8-naming
    "D",     # pydocstyle
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "PL",    # Pylint
    "TRY",   # tryceratops
    "NPY",   # NumPy-specific rules
    "RUF",   # Ruff-specific rules
]

# Ignore specific rules
ignore = [
    "D203",   # one-blank-line-before-class
    "D212",   # multi-line-summary-first-line
    "D213",   # multi-line-summary-second-line
    "ANN401", # dynamically-typed-expression
    "S101",   # assert-used (needed for tests)
    "S105",   # hardcoded-password-string (false positives)
    "S106",   # hardcoded-password-func-arg (false positives)
    "PLR0913", # too-many-arguments
    "TRY003", # Avoid specifying long message outside the exception class
    "BLE001", # Do not catch blind exception
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Ignore specific rules in specific files
"tests/*" = [
    "S101",   # assert-used
    "ARG",    # unused-arguments
    "FBT",    # boolean-trap
    "PLR2004", # magic-value-comparison
    "S106",   # hardcoded-password-func-arg
]
"examples/*" = [
    "INP001", # implicit-namespace-package
    "T201",   # print-found
]
"docs/*" = [
    "INP001", # implicit-namespace-package
]

[tool.ruff.lint.mccabe]
# Maximum complexity
max-complexity = 10

[tool.ruff.lint.isort]
# Import sorting configuration
known-first-party = ["gmadmin"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings
convention = "google"

[tool.ruff.format]
# Formatting configuration
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 88

[tool.black]
# Black formatting configuration
line-length = 119
target-version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
(
    /(
        \.eggs
      | \.git
      | \.hg
      | \.mypy_cache
      | \.tox
      | \.venv
      | _build
      | buck-out
      | build
      | dist
    )/
)
'''

[tool.mypy]
# MyPy type checking configuration
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "click.*",
    "rich.*",
    "responses.*",
]
ignore_missing_imports = true

[tool.coverage.run]
# Coverage configuration
source = ["src/gmadmin"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
# Coverage reporting
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
    "except ImportError",
    "except KeyError",
    "pass",
    "\\.\\.\\.",
]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.pytest.ini_options]
# Pytest configuration (alternative to pytest.ini)
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=gmadmin",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.tox]
# Tox configuration
legacy_tox_ini = """
[tox]
envlist = py{38,39,310,311,312,313},lint,coverage
isolated_build = True
"""