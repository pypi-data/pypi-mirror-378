# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuavo_msgs/footPose6DTargetTrajectoriesSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kuavo_msgs.msg

class footPose6DTargetTrajectoriesSrvRequest(genpy.Message):
  _md5sum = "6d873f4e0d16d5d896abb148084864c7"
  _type = "kuavo_msgs/footPose6DTargetTrajectoriesSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """footPose6DTargetTrajectories foot_pose_target_trajectories

================================================================================
MSG: kuavo_msgs/footPose6DTargetTrajectories
float64[]    timeTrajectory
int32[]      footIndexTrajectory
footPose6D[]   footPoseTrajectory
footPoses6D[]  additionalFootPoseTrajectory  # 可选字段，用于存储额外的轨迹点规划值
float64[]    swingHeightTrajectory # 可选字段，用于存储swing高度轨迹
float64      insertTime # 可选字段，用于存储连续上楼梯时新插入指令的时间点
================================================================================
MSG: kuavo_msgs/footPose6D
float64[6] footPose6D # x, y, z, yaw
float64[6] torsoPose6D # x, y, z, yaw

================================================================================
MSG: kuavo_msgs/footPoses6D
footPose6D[] data
"""
  __slots__ = ['foot_pose_target_trajectories']
  _slot_types = ['kuavo_msgs/footPose6DTargetTrajectories']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       foot_pose_target_trajectories

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(footPose6DTargetTrajectoriesSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.foot_pose_target_trajectories is None:
        self.foot_pose_target_trajectories = kuavo_msgs.msg.footPose6DTargetTrajectories()
    else:
      self.foot_pose_target_trajectories = kuavo_msgs.msg.footPose6DTargetTrajectories()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.foot_pose_target_trajectories.timeTrajectory)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.foot_pose_target_trajectories.timeTrajectory))
      length = len(self.foot_pose_target_trajectories.footIndexTrajectory)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.foot_pose_target_trajectories.footIndexTrajectory))
      length = len(self.foot_pose_target_trajectories.footPoseTrajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.foot_pose_target_trajectories.footPoseTrajectory:
        buff.write(_get_struct_6d().pack(*val1.footPose6D))
        buff.write(_get_struct_6d().pack(*val1.torsoPose6D))
      length = len(self.foot_pose_target_trajectories.additionalFootPoseTrajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.foot_pose_target_trajectories.additionalFootPoseTrajectory:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        for val2 in val1.data:
          buff.write(_get_struct_6d().pack(*val2.footPose6D))
          buff.write(_get_struct_6d().pack(*val2.torsoPose6D))
      length = len(self.foot_pose_target_trajectories.swingHeightTrajectory)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.foot_pose_target_trajectories.swingHeightTrajectory))
      _x = self.foot_pose_target_trajectories.insertTime
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.foot_pose_target_trajectories is None:
        self.foot_pose_target_trajectories = kuavo_msgs.msg.footPose6DTargetTrajectories()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.foot_pose_target_trajectories.timeTrajectory = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.foot_pose_target_trajectories.footIndexTrajectory = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.foot_pose_target_trajectories.footPoseTrajectory = []
      for i in range(0, length):
        val1 = kuavo_msgs.msg.footPose6D()
        start = end
        end += 48
        val1.footPose6D = _get_struct_6d().unpack(str[start:end])
        start = end
        end += 48
        val1.torsoPose6D = _get_struct_6d().unpack(str[start:end])
        self.foot_pose_target_trajectories.footPoseTrajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.foot_pose_target_trajectories.additionalFootPoseTrajectory = []
      for i in range(0, length):
        val1 = kuavo_msgs.msg.footPoses6D()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.data = []
        for i in range(0, length):
          val2 = kuavo_msgs.msg.footPose6D()
          start = end
          end += 48
          val2.footPose6D = _get_struct_6d().unpack(str[start:end])
          start = end
          end += 48
          val2.torsoPose6D = _get_struct_6d().unpack(str[start:end])
          val1.data.append(val2)
        self.foot_pose_target_trajectories.additionalFootPoseTrajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.foot_pose_target_trajectories.swingHeightTrajectory = s.unpack(str[start:end])
      start = end
      end += 8
      (self.foot_pose_target_trajectories.insertTime,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.foot_pose_target_trajectories.timeTrajectory)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.foot_pose_target_trajectories.timeTrajectory.tostring())
      length = len(self.foot_pose_target_trajectories.footIndexTrajectory)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.foot_pose_target_trajectories.footIndexTrajectory.tostring())
      length = len(self.foot_pose_target_trajectories.footPoseTrajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.foot_pose_target_trajectories.footPoseTrajectory:
        buff.write(val1.footPose6D.tostring())
        buff.write(val1.torsoPose6D.tostring())
      length = len(self.foot_pose_target_trajectories.additionalFootPoseTrajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.foot_pose_target_trajectories.additionalFootPoseTrajectory:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        for val2 in val1.data:
          buff.write(val2.footPose6D.tostring())
          buff.write(val2.torsoPose6D.tostring())
      length = len(self.foot_pose_target_trajectories.swingHeightTrajectory)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.foot_pose_target_trajectories.swingHeightTrajectory.tostring())
      _x = self.foot_pose_target_trajectories.insertTime
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.foot_pose_target_trajectories is None:
        self.foot_pose_target_trajectories = kuavo_msgs.msg.footPose6DTargetTrajectories()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.foot_pose_target_trajectories.timeTrajectory = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.foot_pose_target_trajectories.footIndexTrajectory = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.foot_pose_target_trajectories.footPoseTrajectory = []
      for i in range(0, length):
        val1 = kuavo_msgs.msg.footPose6D()
        start = end
        end += 48
        val1.footPose6D = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
        start = end
        end += 48
        val1.torsoPose6D = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
        self.foot_pose_target_trajectories.footPoseTrajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.foot_pose_target_trajectories.additionalFootPoseTrajectory = []
      for i in range(0, length):
        val1 = kuavo_msgs.msg.footPoses6D()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.data = []
        for i in range(0, length):
          val2 = kuavo_msgs.msg.footPose6D()
          start = end
          end += 48
          val2.footPose6D = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
          start = end
          end += 48
          val2.torsoPose6D = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
          val1.data.append(val2)
        self.foot_pose_target_trajectories.additionalFootPoseTrajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.foot_pose_target_trajectories.swingHeightTrajectory = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 8
      (self.foot_pose_target_trajectories.insertTime,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuavo_msgs/footPose6DTargetTrajectoriesSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class footPose6DTargetTrajectoriesSrvResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "kuavo_msgs/footPose6DTargetTrajectoriesSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success 

"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(footPose6DTargetTrajectoriesSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class footPose6DTargetTrajectoriesSrv(object):
  _type          = 'kuavo_msgs/footPose6DTargetTrajectoriesSrv'
  _md5sum = 'ea30c7da602ab653fad7d6d5b8256866'
  _request_class  = footPose6DTargetTrajectoriesSrvRequest
  _response_class = footPose6DTargetTrajectoriesSrvResponse
