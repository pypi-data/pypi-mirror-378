# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuavo_msgs/picoPoseInfoList.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import kuavo_msgs.msg

class picoPoseInfoList(genpy.Message):
  _md5sum = "f56d5e4df1c0e38a423ead4bde9414b3"
  _type = "kuavo_msgs/picoPoseInfoList"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 timestamp_ms
bool is_high_confidence
bool is_hand_tracking
picoPoseInfo[] poses 
================================================================================
MSG: kuavo_msgs/picoPoseInfo
geometry_msgs/Point position
geometry_msgs/Quaternion orientation 
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['timestamp_ms','is_high_confidence','is_hand_tracking','poses']
  _slot_types = ['int64','bool','bool','kuavo_msgs/picoPoseInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp_ms,is_high_confidence,is_hand_tracking,poses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(picoPoseInfoList, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp_ms is None:
        self.timestamp_ms = 0
      if self.is_high_confidence is None:
        self.is_high_confidence = False
      if self.is_hand_tracking is None:
        self.is_hand_tracking = False
      if self.poses is None:
        self.poses = []
    else:
      self.timestamp_ms = 0
      self.is_high_confidence = False
      self.is_hand_tracking = False
      self.poses = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q2B().pack(_x.timestamp_ms, _x.is_high_confidence, _x.is_hand_tracking))
      length = len(self.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.poses:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.poses is None:
        self.poses = None
      end = 0
      _x = self
      start = end
      end += 10
      (_x.timestamp_ms, _x.is_high_confidence, _x.is_hand_tracking,) = _get_struct_q2B().unpack(str[start:end])
      self.is_high_confidence = bool(self.is_high_confidence)
      self.is_hand_tracking = bool(self.is_hand_tracking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poses = []
      for i in range(0, length):
        val1 = kuavo_msgs.msg.picoPoseInfo()
        _v3 = val1.position
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v4 = val1.orientation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q2B().pack(_x.timestamp_ms, _x.is_high_confidence, _x.is_hand_tracking))
      length = len(self.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.poses:
        _v5 = val1.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.poses is None:
        self.poses = None
      end = 0
      _x = self
      start = end
      end += 10
      (_x.timestamp_ms, _x.is_high_confidence, _x.is_hand_tracking,) = _get_struct_q2B().unpack(str[start:end])
      self.is_high_confidence = bool(self.is_high_confidence)
      self.is_hand_tracking = bool(self.is_hand_tracking)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poses = []
      for i in range(0, length):
        val1 = kuavo_msgs.msg.picoPoseInfo()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_q2B = None
def _get_struct_q2B():
    global _struct_q2B
    if _struct_q2B is None:
        _struct_q2B = struct.Struct("<q2B")
    return _struct_q2B
