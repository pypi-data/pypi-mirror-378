# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuavo_msgs/dexhandTouchState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kuavo_msgs.msg
import std_msgs.msg

class dexhandTouchState(genpy.Message):
  _md5sum = "ce777577e1167705dca90d1f63037a05"
  _type = "kuavo_msgs/dexhandTouchState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
kuavo_msgs/touchSensorStatus[5] left_hand
kuavo_msgs/touchSensorStatus[5] right_hand

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: kuavo_msgs/touchSensorStatus
uint16 normal_force1  # 法向力1
uint16 normal_force2  # 法向力2
uint16 normal_force3  # 法向力3
uint16 tangential_force1  # 切向力1
uint16 tangential_force2  # 切向力2
uint16 tangential_force3  # 切向力3
uint16 tangential_direction1  # 切向力方向1
uint16 tangential_direction2  # 切向力方向2
uint16 tangential_direction3  # 切向力方向3
uint32 self_proximity1  # 自电容接近传感器1
uint32 self_proximity2  # 自电容接近传感器2
uint32 mutual_proximity  # 互电容接近传感器
uint16 status  # 传感器状态"""
  __slots__ = ['header','left_hand','right_hand']
  _slot_types = ['std_msgs/Header','kuavo_msgs/touchSensorStatus[5]','kuavo_msgs/touchSensorStatus[5]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,left_hand,right_hand

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(dexhandTouchState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_hand is None:
        self.left_hand = [kuavo_msgs.msg.touchSensorStatus() for _ in range(5)]
      if self.right_hand is None:
        self.right_hand = [kuavo_msgs.msg.touchSensorStatus() for _ in range(5)]
    else:
      self.header = std_msgs.msg.Header()
      self.left_hand = [kuavo_msgs.msg.touchSensorStatus() for _ in range(5)]
      self.right_hand = [kuavo_msgs.msg.touchSensorStatus() for _ in range(5)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      if len(self.left_hand) != 5:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (5, len(self.left_hand), 'self.left_hand')))
      for val1 in self.left_hand:
        _x = val1
        buff.write(_get_struct_9H3IH().pack(_x.normal_force1, _x.normal_force2, _x.normal_force3, _x.tangential_force1, _x.tangential_force2, _x.tangential_force3, _x.tangential_direction1, _x.tangential_direction2, _x.tangential_direction3, _x.self_proximity1, _x.self_proximity2, _x.mutual_proximity, _x.status))
      if len(self.right_hand) != 5:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (5, len(self.right_hand), 'self.right_hand')))
      for val1 in self.right_hand:
        _x = val1
        buff.write(_get_struct_9H3IH().pack(_x.normal_force1, _x.normal_force2, _x.normal_force3, _x.tangential_force1, _x.tangential_force2, _x.tangential_force3, _x.tangential_direction1, _x.tangential_direction2, _x.tangential_direction3, _x.self_proximity1, _x.self_proximity2, _x.mutual_proximity, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_hand is None:
        self.left_hand = None
      if self.right_hand is None:
        self.right_hand = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      self.left_hand = []
      for i in range(0, 5):
        val1 = kuavo_msgs.msg.touchSensorStatus()
        _x = val1
        start = end
        end += 32
        (_x.normal_force1, _x.normal_force2, _x.normal_force3, _x.tangential_force1, _x.tangential_force2, _x.tangential_force3, _x.tangential_direction1, _x.tangential_direction2, _x.tangential_direction3, _x.self_proximity1, _x.self_proximity2, _x.mutual_proximity, _x.status,) = _get_struct_9H3IH().unpack(str[start:end])
        self.left_hand.append(val1)
      self.right_hand = []
      for i in range(0, 5):
        val1 = kuavo_msgs.msg.touchSensorStatus()
        _x = val1
        start = end
        end += 32
        (_x.normal_force1, _x.normal_force2, _x.normal_force3, _x.tangential_force1, _x.tangential_force2, _x.tangential_force3, _x.tangential_direction1, _x.tangential_direction2, _x.tangential_direction3, _x.self_proximity1, _x.self_proximity2, _x.mutual_proximity, _x.status,) = _get_struct_9H3IH().unpack(str[start:end])
        self.right_hand.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      if len(self.left_hand) != 5:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (5, len(self.left_hand), 'self.left_hand')))
      for val1 in self.left_hand:
        _x = val1
        buff.write(_get_struct_9H3IH().pack(_x.normal_force1, _x.normal_force2, _x.normal_force3, _x.tangential_force1, _x.tangential_force2, _x.tangential_force3, _x.tangential_direction1, _x.tangential_direction2, _x.tangential_direction3, _x.self_proximity1, _x.self_proximity2, _x.mutual_proximity, _x.status))
      if len(self.right_hand) != 5:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (5, len(self.right_hand), 'self.right_hand')))
      for val1 in self.right_hand:
        _x = val1
        buff.write(_get_struct_9H3IH().pack(_x.normal_force1, _x.normal_force2, _x.normal_force3, _x.tangential_force1, _x.tangential_force2, _x.tangential_force3, _x.tangential_direction1, _x.tangential_direction2, _x.tangential_direction3, _x.self_proximity1, _x.self_proximity2, _x.mutual_proximity, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_hand is None:
        self.left_hand = None
      if self.right_hand is None:
        self.right_hand = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      self.left_hand = []
      for i in range(0, 5):
        val1 = kuavo_msgs.msg.touchSensorStatus()
        _x = val1
        start = end
        end += 32
        (_x.normal_force1, _x.normal_force2, _x.normal_force3, _x.tangential_force1, _x.tangential_force2, _x.tangential_force3, _x.tangential_direction1, _x.tangential_direction2, _x.tangential_direction3, _x.self_proximity1, _x.self_proximity2, _x.mutual_proximity, _x.status,) = _get_struct_9H3IH().unpack(str[start:end])
        self.left_hand.append(val1)
      self.right_hand = []
      for i in range(0, 5):
        val1 = kuavo_msgs.msg.touchSensorStatus()
        _x = val1
        start = end
        end += 32
        (_x.normal_force1, _x.normal_force2, _x.normal_force3, _x.tangential_force1, _x.tangential_force2, _x.tangential_force3, _x.tangential_direction1, _x.tangential_direction2, _x.tangential_direction3, _x.self_proximity1, _x.self_proximity2, _x.mutual_proximity, _x.status,) = _get_struct_9H3IH().unpack(str[start:end])
        self.right_hand.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_9H3IH = None
def _get_struct_9H3IH():
    global _struct_9H3IH
    if _struct_9H3IH is None:
        _struct_9H3IH = struct.Struct("<9H3IH")
    return _struct_9H3IH
