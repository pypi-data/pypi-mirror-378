# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuavo_msgs/fkSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class fkSrvRequest(genpy.Message):
  _md5sum = "ab94b9bcaaa12f74def43e4b33992df1"
  _type = "kuavo_msgs/fkSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[] q # 广义关节角度，如果是虚拟关节ik，则前4维度为躯干虚拟关节的角度，后14维度为手臂关节的角度
"""
  __slots__ = ['q']
  _slot_types = ['float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       q

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(fkSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.q is None:
        self.q = []
    else:
      self.q = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.q)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.q))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.q = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.q)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.q.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.q = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuavo_msgs/fkSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kuavo_msgs.msg
import std_msgs.msg

class fkSrvResponse(genpy.Message):
  _md5sum = "0989ef9ed6b7b2e5e8a37c79ae6916d9"
  _type = "kuavo_msgs/fkSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
twoArmHandPose  hand_poses

================================================================================
MSG: kuavo_msgs/twoArmHandPose
Header header
armHandPose  left_pose
armHandPose  right_pose
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: kuavo_msgs/armHandPose
float64[3] pos_xyz
float64[4] quat_xyzw

float64[3] elbow_pos_xyz

float64[7] joint_angles"""
  __slots__ = ['success','hand_poses']
  _slot_types = ['bool','kuavo_msgs/twoArmHandPose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,hand_poses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(fkSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.hand_poses is None:
        self.hand_poses = kuavo_msgs.msg.twoArmHandPose()
    else:
      self.success = False
      self.hand_poses = kuavo_msgs.msg.twoArmHandPose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3I().pack(_x.success, _x.hand_poses.header.seq, _x.hand_poses.header.stamp.secs, _x.hand_poses.header.stamp.nsecs))
      _x = self.hand_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_3d().pack(*self.hand_poses.left_pose.pos_xyz))
      buff.write(_get_struct_4d().pack(*self.hand_poses.left_pose.quat_xyzw))
      buff.write(_get_struct_3d().pack(*self.hand_poses.left_pose.elbow_pos_xyz))
      buff.write(_get_struct_7d().pack(*self.hand_poses.left_pose.joint_angles))
      buff.write(_get_struct_3d().pack(*self.hand_poses.right_pose.pos_xyz))
      buff.write(_get_struct_4d().pack(*self.hand_poses.right_pose.quat_xyzw))
      buff.write(_get_struct_3d().pack(*self.hand_poses.right_pose.elbow_pos_xyz))
      buff.write(_get_struct_7d().pack(*self.hand_poses.right_pose.joint_angles))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.hand_poses is None:
        self.hand_poses = kuavo_msgs.msg.twoArmHandPose()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.success, _x.hand_poses.header.seq, _x.hand_poses.header.stamp.secs, _x.hand_poses.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hand_poses.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hand_poses.header.frame_id = str[start:end]
      start = end
      end += 24
      self.hand_poses.left_pose.pos_xyz = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 32
      self.hand_poses.left_pose.quat_xyzw = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 24
      self.hand_poses.left_pose.elbow_pos_xyz = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 56
      self.hand_poses.left_pose.joint_angles = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 24
      self.hand_poses.right_pose.pos_xyz = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 32
      self.hand_poses.right_pose.quat_xyzw = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 24
      self.hand_poses.right_pose.elbow_pos_xyz = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 56
      self.hand_poses.right_pose.joint_angles = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3I().pack(_x.success, _x.hand_poses.header.seq, _x.hand_poses.header.stamp.secs, _x.hand_poses.header.stamp.nsecs))
      _x = self.hand_poses.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.hand_poses.left_pose.pos_xyz.tostring())
      buff.write(self.hand_poses.left_pose.quat_xyzw.tostring())
      buff.write(self.hand_poses.left_pose.elbow_pos_xyz.tostring())
      buff.write(self.hand_poses.left_pose.joint_angles.tostring())
      buff.write(self.hand_poses.right_pose.pos_xyz.tostring())
      buff.write(self.hand_poses.right_pose.quat_xyzw.tostring())
      buff.write(self.hand_poses.right_pose.elbow_pos_xyz.tostring())
      buff.write(self.hand_poses.right_pose.joint_angles.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.hand_poses is None:
        self.hand_poses = kuavo_msgs.msg.twoArmHandPose()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.success, _x.hand_poses.header.seq, _x.hand_poses.header.stamp.secs, _x.hand_poses.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hand_poses.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hand_poses.header.frame_id = str[start:end]
      start = end
      end += 24
      self.hand_poses.left_pose.pos_xyz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 32
      self.hand_poses.left_pose.quat_xyzw = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 24
      self.hand_poses.left_pose.elbow_pos_xyz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 56
      self.hand_poses.left_pose.joint_angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      start = end
      end += 24
      self.hand_poses.right_pose.pos_xyz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 32
      self.hand_poses.right_pose.quat_xyzw = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 24
      self.hand_poses.right_pose.elbow_pos_xyz = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 56
      self.hand_poses.right_pose.joint_angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
class fkSrv(object):
  _type          = 'kuavo_msgs/fkSrv'
  _md5sum = 'b89cc987a02b6d1c2a1588d5659bf064'
  _request_class  = fkSrvRequest
  _response_class = fkSrvResponse
