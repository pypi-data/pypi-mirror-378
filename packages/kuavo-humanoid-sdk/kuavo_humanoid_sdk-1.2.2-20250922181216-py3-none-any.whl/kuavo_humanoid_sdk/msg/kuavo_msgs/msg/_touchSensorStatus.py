# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuavo_msgs/touchSensorStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class touchSensorStatus(genpy.Message):
  _md5sum = "08cd59dc396363cba4d4f01df99ec86c"
  _type = "kuavo_msgs/touchSensorStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 normal_force1  # 法向力1
uint16 normal_force2  # 法向力2
uint16 normal_force3  # 法向力3
uint16 tangential_force1  # 切向力1
uint16 tangential_force2  # 切向力2
uint16 tangential_force3  # 切向力3
uint16 tangential_direction1  # 切向力方向1
uint16 tangential_direction2  # 切向力方向2
uint16 tangential_direction3  # 切向力方向3
uint32 self_proximity1  # 自电容接近传感器1
uint32 self_proximity2  # 自电容接近传感器2
uint32 mutual_proximity  # 互电容接近传感器
uint16 status  # 传感器状态"""
  __slots__ = ['normal_force1','normal_force2','normal_force3','tangential_force1','tangential_force2','tangential_force3','tangential_direction1','tangential_direction2','tangential_direction3','self_proximity1','self_proximity2','mutual_proximity','status']
  _slot_types = ['uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint32','uint32','uint32','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       normal_force1,normal_force2,normal_force3,tangential_force1,tangential_force2,tangential_force3,tangential_direction1,tangential_direction2,tangential_direction3,self_proximity1,self_proximity2,mutual_proximity,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(touchSensorStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.normal_force1 is None:
        self.normal_force1 = 0
      if self.normal_force2 is None:
        self.normal_force2 = 0
      if self.normal_force3 is None:
        self.normal_force3 = 0
      if self.tangential_force1 is None:
        self.tangential_force1 = 0
      if self.tangential_force2 is None:
        self.tangential_force2 = 0
      if self.tangential_force3 is None:
        self.tangential_force3 = 0
      if self.tangential_direction1 is None:
        self.tangential_direction1 = 0
      if self.tangential_direction2 is None:
        self.tangential_direction2 = 0
      if self.tangential_direction3 is None:
        self.tangential_direction3 = 0
      if self.self_proximity1 is None:
        self.self_proximity1 = 0
      if self.self_proximity2 is None:
        self.self_proximity2 = 0
      if self.mutual_proximity is None:
        self.mutual_proximity = 0
      if self.status is None:
        self.status = 0
    else:
      self.normal_force1 = 0
      self.normal_force2 = 0
      self.normal_force3 = 0
      self.tangential_force1 = 0
      self.tangential_force2 = 0
      self.tangential_force3 = 0
      self.tangential_direction1 = 0
      self.tangential_direction2 = 0
      self.tangential_direction3 = 0
      self.self_proximity1 = 0
      self.self_proximity2 = 0
      self.mutual_proximity = 0
      self.status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9H3IH().pack(_x.normal_force1, _x.normal_force2, _x.normal_force3, _x.tangential_force1, _x.tangential_force2, _x.tangential_force3, _x.tangential_direction1, _x.tangential_direction2, _x.tangential_direction3, _x.self_proximity1, _x.self_proximity2, _x.mutual_proximity, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.normal_force1, _x.normal_force2, _x.normal_force3, _x.tangential_force1, _x.tangential_force2, _x.tangential_force3, _x.tangential_direction1, _x.tangential_direction2, _x.tangential_direction3, _x.self_proximity1, _x.self_proximity2, _x.mutual_proximity, _x.status,) = _get_struct_9H3IH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9H3IH().pack(_x.normal_force1, _x.normal_force2, _x.normal_force3, _x.tangential_force1, _x.tangential_force2, _x.tangential_force3, _x.tangential_direction1, _x.tangential_direction2, _x.tangential_direction3, _x.self_proximity1, _x.self_proximity2, _x.mutual_proximity, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.normal_force1, _x.normal_force2, _x.normal_force3, _x.tangential_force1, _x.tangential_force2, _x.tangential_force3, _x.tangential_direction1, _x.tangential_direction2, _x.tangential_direction3, _x.self_proximity1, _x.self_proximity2, _x.mutual_proximity, _x.status,) = _get_struct_9H3IH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9H3IH = None
def _get_struct_9H3IH():
    global _struct_9H3IH
    if _struct_9H3IH is None:
        _struct_9H3IH = struct.Struct("<9H3IH")
    return _struct_9H3IH
