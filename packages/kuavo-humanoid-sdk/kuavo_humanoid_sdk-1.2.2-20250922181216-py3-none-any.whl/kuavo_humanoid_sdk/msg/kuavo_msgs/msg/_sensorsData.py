# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuavo_msgs/sensorsData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import kuavo_msgs.msg
import std_msgs.msg

class sensorsData(genpy.Message):
  _md5sum = "35fff741b8e115992c1ac46e99c1084f"
  _type = "kuavo_msgs/sensorsData"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
time sensor_time
kuavo_msgs/jointData joint_data
kuavo_msgs/imuData imu_data
kuavo_msgs/endEffectorData end_effector_data

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: kuavo_msgs/jointData
float64[] joint_q  
float64[] joint_v  
float64[] joint_vd    
float64[] joint_torque  

================================================================================
MSG: kuavo_msgs/imuData
geometry_msgs/Vector3 gyro    #陀螺仪数据
geometry_msgs/Vector3 acc     #加速计数据
geometry_msgs/Vector3 free_acc    #无重力加速度数据
geometry_msgs/Quaternion quat    #四元数数据

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: kuavo_msgs/endEffectorData
string[] name  
float64[] position
float64[] velocity  
float64[] effort
"""
  __slots__ = ['header','sensor_time','joint_data','imu_data','end_effector_data']
  _slot_types = ['std_msgs/Header','time','kuavo_msgs/jointData','kuavo_msgs/imuData','kuavo_msgs/endEffectorData']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,sensor_time,joint_data,imu_data,end_effector_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sensorsData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sensor_time is None:
        self.sensor_time = genpy.Time()
      if self.joint_data is None:
        self.joint_data = kuavo_msgs.msg.jointData()
      if self.imu_data is None:
        self.imu_data = kuavo_msgs.msg.imuData()
      if self.end_effector_data is None:
        self.end_effector_data = kuavo_msgs.msg.endEffectorData()
    else:
      self.header = std_msgs.msg.Header()
      self.sensor_time = genpy.Time()
      self.joint_data = kuavo_msgs.msg.jointData()
      self.imu_data = kuavo_msgs.msg.imuData()
      self.end_effector_data = kuavo_msgs.msg.endEffectorData()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.sensor_time.secs, _x.sensor_time.nsecs))
      length = len(self.joint_data.joint_q)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint_data.joint_q))
      length = len(self.joint_data.joint_v)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint_data.joint_v))
      length = len(self.joint_data.joint_vd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint_data.joint_vd))
      length = len(self.joint_data.joint_torque)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint_data.joint_torque))
      _x = self
      buff.write(_get_struct_13d().pack(_x.imu_data.gyro.x, _x.imu_data.gyro.y, _x.imu_data.gyro.z, _x.imu_data.acc.x, _x.imu_data.acc.y, _x.imu_data.acc.z, _x.imu_data.free_acc.x, _x.imu_data.free_acc.y, _x.imu_data.free_acc.z, _x.imu_data.quat.x, _x.imu_data.quat.y, _x.imu_data.quat.z, _x.imu_data.quat.w))
      length = len(self.end_effector_data.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.end_effector_data.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.end_effector_data.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.end_effector_data.position))
      length = len(self.end_effector_data.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.end_effector_data.velocity))
      length = len(self.end_effector_data.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.end_effector_data.effort))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sensor_time is None:
        self.sensor_time = genpy.Time()
      if self.joint_data is None:
        self.joint_data = kuavo_msgs.msg.jointData()
      if self.imu_data is None:
        self.imu_data = kuavo_msgs.msg.imuData()
      if self.end_effector_data is None:
        self.end_effector_data = kuavo_msgs.msg.endEffectorData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.sensor_time.secs, _x.sensor_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_data.joint_q = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_data.joint_v = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_data.joint_vd = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_data.joint_torque = s.unpack(str[start:end])
      _x = self
      start = end
      end += 104
      (_x.imu_data.gyro.x, _x.imu_data.gyro.y, _x.imu_data.gyro.z, _x.imu_data.acc.x, _x.imu_data.acc.y, _x.imu_data.acc.z, _x.imu_data.free_acc.x, _x.imu_data.free_acc.y, _x.imu_data.free_acc.z, _x.imu_data.quat.x, _x.imu_data.quat.y, _x.imu_data.quat.z, _x.imu_data.quat.w,) = _get_struct_13d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.end_effector_data.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.end_effector_data.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.end_effector_data.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.end_effector_data.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.end_effector_data.effort = s.unpack(str[start:end])
      self.sensor_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.sensor_time.secs, _x.sensor_time.nsecs))
      length = len(self.joint_data.joint_q)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_data.joint_q.tostring())
      length = len(self.joint_data.joint_v)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_data.joint_v.tostring())
      length = len(self.joint_data.joint_vd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_data.joint_vd.tostring())
      length = len(self.joint_data.joint_torque)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_data.joint_torque.tostring())
      _x = self
      buff.write(_get_struct_13d().pack(_x.imu_data.gyro.x, _x.imu_data.gyro.y, _x.imu_data.gyro.z, _x.imu_data.acc.x, _x.imu_data.acc.y, _x.imu_data.acc.z, _x.imu_data.free_acc.x, _x.imu_data.free_acc.y, _x.imu_data.free_acc.z, _x.imu_data.quat.x, _x.imu_data.quat.y, _x.imu_data.quat.z, _x.imu_data.quat.w))
      length = len(self.end_effector_data.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.end_effector_data.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.end_effector_data.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.end_effector_data.position.tostring())
      length = len(self.end_effector_data.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.end_effector_data.velocity.tostring())
      length = len(self.end_effector_data.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.end_effector_data.effort.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sensor_time is None:
        self.sensor_time = genpy.Time()
      if self.joint_data is None:
        self.joint_data = kuavo_msgs.msg.jointData()
      if self.imu_data is None:
        self.imu_data = kuavo_msgs.msg.imuData()
      if self.end_effector_data is None:
        self.end_effector_data = kuavo_msgs.msg.endEffectorData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.sensor_time.secs, _x.sensor_time.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_data.joint_q = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_data.joint_v = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_data.joint_vd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_data.joint_torque = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 104
      (_x.imu_data.gyro.x, _x.imu_data.gyro.y, _x.imu_data.gyro.z, _x.imu_data.acc.x, _x.imu_data.acc.y, _x.imu_data.acc.z, _x.imu_data.free_acc.x, _x.imu_data.free_acc.y, _x.imu_data.free_acc.z, _x.imu_data.quat.x, _x.imu_data.quat.y, _x.imu_data.quat.z, _x.imu_data.quat.w,) = _get_struct_13d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.end_effector_data.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.end_effector_data.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.end_effector_data.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.end_effector_data.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.end_effector_data.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      self.sensor_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13d = None
def _get_struct_13d():
    global _struct_13d
    if _struct_13d is None:
        _struct_13d = struct.Struct("<13d")
    return _struct_13d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
