# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuavo_msgs/footPoseTargetTrajectories.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kuavo_msgs.msg

class footPoseTargetTrajectories(genpy.Message):
  _md5sum = "1ead1f233650869a3c090250fbdd7b77"
  _type = "kuavo_msgs/footPoseTargetTrajectories"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[]    timeTrajectory
int32[]      footIndexTrajectory
footPose[]   footPoseTrajectory
footPoses[]  additionalFootPoseTrajectory  # 可选字段，用于存储额外的轨迹点规划值
float64[]    swingHeightTrajectory # 可选字段，用于存储swing高度轨迹

================================================================================
MSG: kuavo_msgs/footPose
float64[4] footPose # x, y, z, yaw
float64[4] torsoPose # x, y, z, yaw

================================================================================
MSG: kuavo_msgs/footPoses
footPose[] data
"""
  __slots__ = ['timeTrajectory','footIndexTrajectory','footPoseTrajectory','additionalFootPoseTrajectory','swingHeightTrajectory']
  _slot_types = ['float64[]','int32[]','kuavo_msgs/footPose[]','kuavo_msgs/footPoses[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timeTrajectory,footIndexTrajectory,footPoseTrajectory,additionalFootPoseTrajectory,swingHeightTrajectory

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(footPoseTargetTrajectories, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timeTrajectory is None:
        self.timeTrajectory = []
      if self.footIndexTrajectory is None:
        self.footIndexTrajectory = []
      if self.footPoseTrajectory is None:
        self.footPoseTrajectory = []
      if self.additionalFootPoseTrajectory is None:
        self.additionalFootPoseTrajectory = []
      if self.swingHeightTrajectory is None:
        self.swingHeightTrajectory = []
    else:
      self.timeTrajectory = []
      self.footIndexTrajectory = []
      self.footPoseTrajectory = []
      self.additionalFootPoseTrajectory = []
      self.swingHeightTrajectory = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.timeTrajectory)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.timeTrajectory))
      length = len(self.footIndexTrajectory)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.footIndexTrajectory))
      length = len(self.footPoseTrajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.footPoseTrajectory:
        buff.write(_get_struct_4d().pack(*val1.footPose))
        buff.write(_get_struct_4d().pack(*val1.torsoPose))
      length = len(self.additionalFootPoseTrajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.additionalFootPoseTrajectory:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        for val2 in val1.data:
          buff.write(_get_struct_4d().pack(*val2.footPose))
          buff.write(_get_struct_4d().pack(*val2.torsoPose))
      length = len(self.swingHeightTrajectory)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.swingHeightTrajectory))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.footPoseTrajectory is None:
        self.footPoseTrajectory = None
      if self.additionalFootPoseTrajectory is None:
        self.additionalFootPoseTrajectory = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.timeTrajectory = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.footIndexTrajectory = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.footPoseTrajectory = []
      for i in range(0, length):
        val1 = kuavo_msgs.msg.footPose()
        start = end
        end += 32
        val1.footPose = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 32
        val1.torsoPose = _get_struct_4d().unpack(str[start:end])
        self.footPoseTrajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.additionalFootPoseTrajectory = []
      for i in range(0, length):
        val1 = kuavo_msgs.msg.footPoses()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.data = []
        for i in range(0, length):
          val2 = kuavo_msgs.msg.footPose()
          start = end
          end += 32
          val2.footPose = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 32
          val2.torsoPose = _get_struct_4d().unpack(str[start:end])
          val1.data.append(val2)
        self.additionalFootPoseTrajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.swingHeightTrajectory = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.timeTrajectory)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.timeTrajectory.tostring())
      length = len(self.footIndexTrajectory)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.footIndexTrajectory.tostring())
      length = len(self.footPoseTrajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.footPoseTrajectory:
        buff.write(val1.footPose.tostring())
        buff.write(val1.torsoPose.tostring())
      length = len(self.additionalFootPoseTrajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.additionalFootPoseTrajectory:
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        for val2 in val1.data:
          buff.write(val2.footPose.tostring())
          buff.write(val2.torsoPose.tostring())
      length = len(self.swingHeightTrajectory)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.swingHeightTrajectory.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.footPoseTrajectory is None:
        self.footPoseTrajectory = None
      if self.additionalFootPoseTrajectory is None:
        self.additionalFootPoseTrajectory = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.timeTrajectory = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.footIndexTrajectory = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.footPoseTrajectory = []
      for i in range(0, length):
        val1 = kuavo_msgs.msg.footPose()
        start = end
        end += 32
        val1.footPose = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
        start = end
        end += 32
        val1.torsoPose = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
        self.footPoseTrajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.additionalFootPoseTrajectory = []
      for i in range(0, length):
        val1 = kuavo_msgs.msg.footPoses()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.data = []
        for i in range(0, length):
          val2 = kuavo_msgs.msg.footPose()
          start = end
          end += 32
          val2.footPose = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          start = end
          end += 32
          val2.torsoPose = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          val1.data.append(val2)
        self.additionalFootPoseTrajectory.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.swingHeightTrajectory = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
