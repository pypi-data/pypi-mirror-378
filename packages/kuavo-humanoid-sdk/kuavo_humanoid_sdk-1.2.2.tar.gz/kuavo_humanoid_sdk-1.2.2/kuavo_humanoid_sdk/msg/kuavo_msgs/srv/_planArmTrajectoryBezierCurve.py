# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuavo_msgs/planArmTrajectoryBezierCurveRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kuavo_msgs.msg

class planArmTrajectoryBezierCurveRequest(genpy.Message):
  _md5sum = "fd4c2b9f2a4883680ef63a437da922a8"
  _type = "kuavo_msgs/planArmTrajectoryBezierCurveRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """kuavo_msgs/jointBezierTrajectory[] multi_joint_bezier_trajectory
float64 start_frame_time
float64 end_frame_time
string[] joint_names

================================================================================
MSG: kuavo_msgs/jointBezierTrajectory
kuavo_msgs/bezierCurveCubicPoint[] bezier_curve_points

================================================================================
MSG: kuavo_msgs/bezierCurveCubicPoint
# [x, y] x is time, y is value

float64[] end_point
float64[] left_control_point
float64[] right_control_point"""
  __slots__ = ['multi_joint_bezier_trajectory','start_frame_time','end_frame_time','joint_names']
  _slot_types = ['kuavo_msgs/jointBezierTrajectory[]','float64','float64','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       multi_joint_bezier_trajectory,start_frame_time,end_frame_time,joint_names

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(planArmTrajectoryBezierCurveRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.multi_joint_bezier_trajectory is None:
        self.multi_joint_bezier_trajectory = []
      if self.start_frame_time is None:
        self.start_frame_time = 0.
      if self.end_frame_time is None:
        self.end_frame_time = 0.
      if self.joint_names is None:
        self.joint_names = []
    else:
      self.multi_joint_bezier_trajectory = []
      self.start_frame_time = 0.
      self.end_frame_time = 0.
      self.joint_names = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.multi_joint_bezier_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.multi_joint_bezier_trajectory:
        length = len(val1.bezier_curve_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.bezier_curve_points:
          length = len(val2.end_point)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.end_point))
          length = len(val2.left_control_point)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.left_control_point))
          length = len(val2.right_control_point)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.right_control_point))
      _x = self
      buff.write(_get_struct_2d().pack(_x.start_frame_time, _x.end_frame_time))
      length = len(self.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.multi_joint_bezier_trajectory is None:
        self.multi_joint_bezier_trajectory = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.multi_joint_bezier_trajectory = []
      for i in range(0, length):
        val1 = kuavo_msgs.msg.jointBezierTrajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.bezier_curve_points = []
        for i in range(0, length):
          val2 = kuavo_msgs.msg.bezierCurveCubicPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.end_point = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.left_control_point = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.right_control_point = s.unpack(str[start:end])
          val1.bezier_curve_points.append(val2)
        self.multi_joint_bezier_trajectory.append(val1)
      _x = self
      start = end
      end += 16
      (_x.start_frame_time, _x.end_frame_time,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.joint_names.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.multi_joint_bezier_trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.multi_joint_bezier_trajectory:
        length = len(val1.bezier_curve_points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.bezier_curve_points:
          length = len(val2.end_point)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.end_point.tostring())
          length = len(val2.left_control_point)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.left_control_point.tostring())
          length = len(val2.right_control_point)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.right_control_point.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.start_frame_time, _x.end_frame_time))
      length = len(self.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.multi_joint_bezier_trajectory is None:
        self.multi_joint_bezier_trajectory = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.multi_joint_bezier_trajectory = []
      for i in range(0, length):
        val1 = kuavo_msgs.msg.jointBezierTrajectory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.bezier_curve_points = []
        for i in range(0, length):
          val2 = kuavo_msgs.msg.bezierCurveCubicPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.end_point = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.left_control_point = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.right_control_point = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          val1.bezier_curve_points.append(val2)
        self.multi_joint_bezier_trajectory.append(val1)
      _x = self
      start = end
      end += 16
      (_x.start_frame_time, _x.end_frame_time,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.joint_names.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuavo_msgs/planArmTrajectoryBezierCurveResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class planArmTrajectoryBezierCurveResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "kuavo_msgs/planArmTrajectoryBezierCurveResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(planArmTrajectoryBezierCurveResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class planArmTrajectoryBezierCurve(object):
  _type          = 'kuavo_msgs/planArmTrajectoryBezierCurve'
  _md5sum = '4dbc940608d7275f775b6fdef47eb369'
  _request_class  = planArmTrajectoryBezierCurveRequest
  _response_class = planArmTrajectoryBezierCurveResponse
