# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kuavo_msgs/questJoySticks.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class questJoySticks(genpy.Message):
  _md5sum = "c686b65cdd180a9046db651d6492ec65"
  _type = "kuavo_msgs/questJoySticks"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 left_x
float32 left_y
float32 left_trigger
float32 left_grip
bool left_first_button_pressed
bool left_second_button_pressed
bool left_first_button_touched
bool left_second_button_touched
float32 right_x
float32 right_y
float32 right_trigger
float32 right_grip
bool right_first_button_pressed
bool right_second_button_pressed
bool right_first_button_touched
bool right_second_button_touched
"""
  __slots__ = ['left_x','left_y','left_trigger','left_grip','left_first_button_pressed','left_second_button_pressed','left_first_button_touched','left_second_button_touched','right_x','right_y','right_trigger','right_grip','right_first_button_pressed','right_second_button_pressed','right_first_button_touched','right_second_button_touched']
  _slot_types = ['float32','float32','float32','float32','bool','bool','bool','bool','float32','float32','float32','float32','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_x,left_y,left_trigger,left_grip,left_first_button_pressed,left_second_button_pressed,left_first_button_touched,left_second_button_touched,right_x,right_y,right_trigger,right_grip,right_first_button_pressed,right_second_button_pressed,right_first_button_touched,right_second_button_touched

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(questJoySticks, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.left_x is None:
        self.left_x = 0.
      if self.left_y is None:
        self.left_y = 0.
      if self.left_trigger is None:
        self.left_trigger = 0.
      if self.left_grip is None:
        self.left_grip = 0.
      if self.left_first_button_pressed is None:
        self.left_first_button_pressed = False
      if self.left_second_button_pressed is None:
        self.left_second_button_pressed = False
      if self.left_first_button_touched is None:
        self.left_first_button_touched = False
      if self.left_second_button_touched is None:
        self.left_second_button_touched = False
      if self.right_x is None:
        self.right_x = 0.
      if self.right_y is None:
        self.right_y = 0.
      if self.right_trigger is None:
        self.right_trigger = 0.
      if self.right_grip is None:
        self.right_grip = 0.
      if self.right_first_button_pressed is None:
        self.right_first_button_pressed = False
      if self.right_second_button_pressed is None:
        self.right_second_button_pressed = False
      if self.right_first_button_touched is None:
        self.right_first_button_touched = False
      if self.right_second_button_touched is None:
        self.right_second_button_touched = False
    else:
      self.left_x = 0.
      self.left_y = 0.
      self.left_trigger = 0.
      self.left_grip = 0.
      self.left_first_button_pressed = False
      self.left_second_button_pressed = False
      self.left_first_button_touched = False
      self.left_second_button_touched = False
      self.right_x = 0.
      self.right_y = 0.
      self.right_trigger = 0.
      self.right_grip = 0.
      self.right_first_button_pressed = False
      self.right_second_button_pressed = False
      self.right_first_button_touched = False
      self.right_second_button_touched = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4f4B4f4B().pack(_x.left_x, _x.left_y, _x.left_trigger, _x.left_grip, _x.left_first_button_pressed, _x.left_second_button_pressed, _x.left_first_button_touched, _x.left_second_button_touched, _x.right_x, _x.right_y, _x.right_trigger, _x.right_grip, _x.right_first_button_pressed, _x.right_second_button_pressed, _x.right_first_button_touched, _x.right_second_button_touched))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.left_x, _x.left_y, _x.left_trigger, _x.left_grip, _x.left_first_button_pressed, _x.left_second_button_pressed, _x.left_first_button_touched, _x.left_second_button_touched, _x.right_x, _x.right_y, _x.right_trigger, _x.right_grip, _x.right_first_button_pressed, _x.right_second_button_pressed, _x.right_first_button_touched, _x.right_second_button_touched,) = _get_struct_4f4B4f4B().unpack(str[start:end])
      self.left_first_button_pressed = bool(self.left_first_button_pressed)
      self.left_second_button_pressed = bool(self.left_second_button_pressed)
      self.left_first_button_touched = bool(self.left_first_button_touched)
      self.left_second_button_touched = bool(self.left_second_button_touched)
      self.right_first_button_pressed = bool(self.right_first_button_pressed)
      self.right_second_button_pressed = bool(self.right_second_button_pressed)
      self.right_first_button_touched = bool(self.right_first_button_touched)
      self.right_second_button_touched = bool(self.right_second_button_touched)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4f4B4f4B().pack(_x.left_x, _x.left_y, _x.left_trigger, _x.left_grip, _x.left_first_button_pressed, _x.left_second_button_pressed, _x.left_first_button_touched, _x.left_second_button_touched, _x.right_x, _x.right_y, _x.right_trigger, _x.right_grip, _x.right_first_button_pressed, _x.right_second_button_pressed, _x.right_first_button_touched, _x.right_second_button_touched))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.left_x, _x.left_y, _x.left_trigger, _x.left_grip, _x.left_first_button_pressed, _x.left_second_button_pressed, _x.left_first_button_touched, _x.left_second_button_touched, _x.right_x, _x.right_y, _x.right_trigger, _x.right_grip, _x.right_first_button_pressed, _x.right_second_button_pressed, _x.right_first_button_touched, _x.right_second_button_touched,) = _get_struct_4f4B4f4B().unpack(str[start:end])
      self.left_first_button_pressed = bool(self.left_first_button_pressed)
      self.left_second_button_pressed = bool(self.left_second_button_pressed)
      self.left_first_button_touched = bool(self.left_first_button_touched)
      self.left_second_button_touched = bool(self.left_second_button_touched)
      self.right_first_button_pressed = bool(self.right_first_button_pressed)
      self.right_second_button_pressed = bool(self.right_second_button_pressed)
      self.right_first_button_touched = bool(self.right_first_button_touched)
      self.right_second_button_touched = bool(self.right_second_button_touched)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f4B4f4B = None
def _get_struct_4f4B4f4B():
    global _struct_4f4B4f4B
    if _struct_4f4B4f4B is None:
        _struct_4f4B4f4B = struct.Struct("<4f4B4f4B")
    return _struct_4f4B4f4B
