Metadata-Version: 2.1
Name: redun
Version: 0.32.0
Summary: Yet another redundant workflow engine.
Home-page: https://github.com/insitro/redun/
Author: Matt Rasmussen
Author-email: rasmus@insitro.com
License: UNKNOWN
Description: 
        redun aims to be a more expressive and efficient workflow framework, built on
        top of the popular Python programming language. It takes the somewhat contrarian
        view that writing dataflows directly is unnecessarily restrictive, and by doing
        so we lose abstractions we have come to rely on in most modern high-level
        languages (control flow, compositiblity, recursion, high order functions, etc).
        redun's key insight is that workflows can be expressed as lazy expressions, that
        are then evaluated by a scheduler which performs automatic parallelization,
        caching, and data provenance logging.
        
        redun's key features are:
        
        - Workflows are defined by lazy expressions that when evaluated emit dynamic directed acyclic
          graphs (DAGs), enabling complex data flows.
        - Incremental computation that is reactive to both data changes as well as code changes.
        - Workflow tasks can be executed on a variety of compute backend (threads, processes, AWS batch
          jobs, Spark jobs, etc).
        - Data changes are detected for in memory values as well as external data sources such as files
          and object stores using file hashing.
        - Code changes are detected by hashing individual Python functions and comparing against
          historical call graph recordings.
        - Past intermediate results are cached centrally and reused across workflows.
        - Past call graphs can be used as a data lineage record and can be queried for debugging and
          auditing.
            
Platform: UNKNOWN
Requires-Python: >= 3.8
Provides-Extra: glue
Provides-Extra: k8s
Provides-Extra: viz
Provides-Extra: google-batch
Provides-Extra: azure
Provides-Extra: postgres
