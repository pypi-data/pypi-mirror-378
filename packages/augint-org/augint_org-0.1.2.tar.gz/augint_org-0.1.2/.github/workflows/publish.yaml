name: 🐍 Library Publishing

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'src/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/publish.yaml'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"
  UV_SYSTEM_PYTHON: 1

permissions:
  contents: read

jobs:
  # ============================================
  # Pre-commit Checks
  # ============================================
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: latest

      - name: Install dependencies
        run: make install

      - name: Run pre-commit checks
        run: make pre-commit

  # ============================================
  # Run Tests Before Release
  # ============================================
  test-before-release:
    name: Pre-release Testing
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: latest

      - name: Install dependencies
        run: make install

      - name: Run quality checks
        run: make pre-commit

      - name: Run tests with coverage
        run: make test-coverage

      - name: Check package build
        run: |
          uv build
          ls -la dist/

  # ============================================
  # Semantic Release
  # ============================================
  semantic-release:
    name: Semantic Version Release
    needs: [test-before-release, pre-commit]
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Force branch to workflow sha
        run: |
          git reset --hard ${{ github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: latest

      - name: Install dependencies
        run: |
          make install
          uv pip install python-semantic-release

      - name: Verify upstream unchanged
        shell: bash
        run: |
          set +o pipefail
          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | cut -d' ' -f2 | grep -E '\.{3}' | cut -d'.' -f4)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"
          set -o pipefail

          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
              exit 1
          fi

          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"

          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
              exit 1
          fi

          HEAD_SHA="$(git rev-parse HEAD)"

          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
              printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
              printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
              exit 1
          fi

          printf '%s\n' "Verified upstream branch has not changed"

      - name: Run Semantic Release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # Configure git for semantic-release
          git config user.name "semantic-release"
          git config user.email "semantic-release@users.noreply.github.com"

          # Let semantic-release handle everything: version, commit, tag, push
          uv run semantic-release version

          # Check if a release was made by examining the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            echo "No release created"
            echo "released=false" >> $GITHUB_OUTPUT
          else
            echo "Released version: $LATEST_TAG"
            echo "released=true" >> $GITHUB_OUTPUT
            echo "version=${LATEST_TAG#v}" >> $GITHUB_OUTPUT
            echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Upload artifacts
        if: steps.release.outputs.released == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: distribution-artifacts
          path: dist/
          if-no-files-found: error

  # ============================================
  # Generate Documentation
  # ============================================
  generate-docs:
    name: Generate Documentation
    needs: [semantic-release]
    if: needs.semantic-release.outputs.released == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.semantic-release.outputs.tag }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: latest

      - name: Install dependencies
        run: |
          make install
          uv pip install pdoc

      - name: Generate API documentation
        run: |
          uv run pdoc --output-dir pdoc --template-directory resources/pdoc-templates ai_org

      - name: Create index page
        run: |
          cat > pdoc/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>augint-org Documentation</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, sans-serif;
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 2rem;
                      background: #0d1117;
                      color: #c9d1d9;
                  }
                  h1 { color: #58a6ff; }
                  h2 { color: #79c0ff; margin-top: 2rem; }
                  a { color: #58a6ff; text-decoration: none; }
                  a:hover { text-decoration: underline; }
                  .section {
                      background: #161b22;
                      padding: 1.5rem;
                      border-radius: 8px;
                      margin: 1rem 0;
                      border: 1px solid #30363d;
                  }
                  .grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                      gap: 1rem;
                  }
                  .badge {
                      display: inline-block;
                      padding: 0.25rem 0.5rem;
                      background: #1f6feb;
                      color: white;
                      border-radius: 4px;
                      font-size: 0.875rem;
                      margin-right: 0.5rem;
                  }
              </style>
          </head>
          <body>
              <h1>📚 augint-org Documentation</h1>
              <div class="section">
                  <h2>Overview</h2>
                  <p>CLI tool for managing AWS Organization accounts with Control Tower integration.</p>
                  <p>
                      <span class="badge">Version: ${{ needs.semantic-release.outputs.version }}</span>
                      <span class="badge">Python: 3.9+</span>
                      <span class="badge">License: MIT</span>
                  </p>
              </div>

              <div class="section">
                  <h2>📖 Documentation</h2>
                  <div class="grid">
                      <div>
                          <h3>API Reference</h3>
                          <ul>
                              <li><a href="cli.html">CLI Module</a></li>
                              <li><a href="commands.html">Commands</a></li>
                              <li><a href="core.html">Core Managers</a></li>
                              <li><a href="utils.html">Utilities</a></li>
                          </ul>
                      </div>
                      <div>
                          <h3>Resources</h3>
                          <ul>
                              <li><a href="https://github.com/${{ github.repository }}">GitHub Repository</a></li>
                              <li><a href="https://github.com/${{ github.repository }}/blob/main/README.md">README</a></li>
                              <li><a href="https://github.com/${{ github.repository }}/blob/main/MIGRATION_PLAN.md">Migration Plan</a></li>
                              <li><a href="https://pypi.org/project/augint-org/">PyPI Package</a></li>
                          </ul>
                      </div>
                  </div>
              </div>

              <div class="section">
                  <h2>🚀 Quick Start</h2>
                  <pre><code># Install the package
                  pip install augint-org

                  # Or with uv (recommended)
                  uv pip install augint-org

                  # Configure AWS credentials
                  export AWS_PROFILE=your-profile

                  # List accounts
                  ai-org account list

                  # Create a new account
                  ai-org account create --name "MyApp-Staging" --email "myapp-staging@example.com" --ou "Staging"</code></pre>
              </div>

              <div class="section">
                  <h2>📊 Test Reports</h2>
                  <p>Latest test results and coverage reports:</p>
                  <ul>
                      <li><a href="unit-test-report.html">Unit Test Report</a></li>
                      <li><a href="htmlcov/index.html">Coverage Report</a></li>
                      <li><a href="security-reports.html">Security Scan Results</a></li>
                  </ul>
              </div>
          </body>
          </html>
          EOF

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: unit-test-results
          path: pdoc/
        continue-on-error: true

      - name: Download security artifacts
        uses: actions/download-artifact@v4
        with:
          name: security-scan-results
          path: pdoc/
        continue-on-error: true

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          publish_dir: ./pdoc
          publish_branch: gh-pages

  # ============================================
  # Publish to PyPI
  # ============================================
  publish-pypi:
    name: Publish to PyPI
    needs: [semantic-release]
    if: needs.semantic-release.outputs.released == 'true'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'pypi' || 'pypi-test' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://pypi.org/project/augint-org' || 'https://test.pypi.org/project/augint-org' }}
    permissions:
      id-token: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: distribution-artifacts
          path: dist/

      - name: Publish to Test PyPI
        if: github.ref == 'refs/heads/dev'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

      - name: Publish to PyPI
        if: github.ref == 'refs/heads/main'
        uses: pypa/gh-action-pypi-publish@release/v1
