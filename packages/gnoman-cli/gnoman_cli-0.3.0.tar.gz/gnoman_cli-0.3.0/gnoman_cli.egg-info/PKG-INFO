Metadata-Version: 2.4
Name: gnoman-cli
Version: 0.3.0
Summary: GNOMAN mission control CLI for Safes, secrets, and guard rails
Author-email: Christopher Hirschauer <c.hirschauer@gmail.com>
License: Copyright (c) 2025 Christopher Hirschauer
        All rights reserved.
        GNOMAN License
        Version 1.0 — August 2025
        
        # GNOMAN LICENSE AGREEMENT
        
        This License Agreement (“Agreement”) is entered into by and between the Licensor and the undersigned Licensee. By executing this Agreement, Licensee acknowledges and accepts the following binding terms and conditions:
        
        ---
        
        ### 1. Form of Execution
        
        This Agreement is valid **only** when signed in handwritten ink by both Licensor and Licensee **on physical paper in the presence of a notary public**.
        
        Electronic signatures, scanned copies, PDF acknowledgments, facsimiles, or any other digital substitutes are expressly rejected as invalid. No license is created by purchase receipt, digital acknowledgment, or possession of GNOMAN software unless and until a signed physical copy of this Agreement has been executed.
        
        ---
        
        ### 2. Definitions
        
        * **“GNOMAN System”** means the proprietary toolkit, methods, persistence hierarchies, custodial safeguards, and cryptographic processes developed by Licensor.
        * **“Outputs”** means any scripts, signed transactions, audit logs, or results generated by the GNOMAN System.
        
        ---
        
        ### 3. Grant of License
        
        Licensor grants Licensee a limited, non-exclusive, non-transferable license to use GNOMAN **only if Licensee holds an original paper copy of this Agreement bearing Licensor’s handwritten signature.**
        
        No person, entity, or organization may use, copy, execute, or distribute GNOMAN without possession of such signed Agreement.
        
        ---
        
        ### 4. Proprietary Rights and Restrictions
        
        * Title and ownership of GNOMAN remain vested exclusively in Licensor at all times.
        * Licensee may not:
          (i) copy, distribute, modify, or reverse engineer GNOMAN;
          (ii) sublicense, rent, lease, or resell GNOMAN;
          (iii) remove or alter any branding, signatures, or forensic markers embedded by Licensor.
        * Any derivative works or improvements created by Licensee automatically belong to Licensor.
        
        ---
        
        ### 5. Conditions of Use
        
        Licenses are granted **individually**. Each Licensee must hold their own signed paper agreement. Possession of GNOMAN without such an agreement constitutes willful infringement and theft.
        
        ---
        
        ### 6. Revocability
        
        Licensor may revoke this license upon breach of any term. Upon revocation, Licensee must immediately cease all use and destroy all copies of GNOMAN.
        
        ---
        
        ### 7. Audit and Verification
        
        Licensor retains the right to demand production of the original signed license at any time. Failure to produce it upon request is prima facie evidence of infringement.
        
        ---
        
        ### 8. Governing Law and Venue
        
        This Agreement shall be governed by and construed under the laws of the State of **Iowa**, with venue exclusively in Woodbury County, Iowa, or the Northern District of Iowa.
        
        ---
        
        ### 9. Entire Agreement
        
        This Agreement represents the full and exclusive license terms. No oral promises, digital acknowledgments, or electronic agreements have any effect.
        
        ---
        
        ### 10. Forfeiture
        
        Any unauthorized use of GNOMAN voids all rights and forfeits any benefits, results, or profits obtained from such use.
        
        ---
        
        This Agreement embodies GNOMAN’s spirit: **ancient, deliberate, notarized, and absolute. Only a signed sheet of paper with real ink creates rights. Without it, you have nothing.**
        
Project-URL: Homepage, https://github.com/74Thirsty/gnoman-cli
Project-URL: Source, https://github.com/74Thirsty/gnoman-cli
Project-URL: Issues, https://github.com/74Thirsty/gnoman-cli/issues
Classifier: Programming Language :: Python :: 3
Classifier: Environment :: Console
Classifier: Topic :: Security :: Cryptography
Classifier: Topic :: Internet :: WWW/HTTP
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE.md
License-File: LICENSEE.md
Requires-Dist: eth-account>=0.9.0
Requires-Dist: web3>=6.0.0
Requires-Dist: eth-abi>=4.0.0
Requires-Dist: keyring>=24.0.0
Requires-Dist: python-dotenv>=1.0.1
Dynamic: license-file

GNOMAN: Guardian of Safes, Master of Keys


⸻

✨ What is GNOMAN?

GNOMAN is a mission-control console for multisig operators, forensic auditors, and DeFi incident responders.
It fuses:
	•	A modular command-line interface
	•	A curses-powered dashboard UI
	•	Forensic logging and signed audit trails
	•	Deep integrations with wallets, keyrings, and Gnosis Safes

GNOMAN replaces a zoo of fragile scripts with a single god-tier control deck.

⸻

🚀 Core Features

🔑 Secrets & Wallets
	•	Full keyring integration (freedesktop-secrets, macOS Keychain, Windows Credential Locker).
	•	.env / .env.secure drift detection and reconciliation.
	•	HD wallet support with:
	•	Hidden derivation trees
	•	Custom derivation paths
	•	Vanity address generation
	•	Cold wallet / hot executor separation.
	•	Wallet monitoring with real-time balance and nonce tracking.

🏛️ Safe Orchestration
	•	Deploy new Gnosis Safes with arbitrary owner sets & thresholds.
	•	Add/remove owners, rotate keys, and patch Safe configs live.
	•	Automatic Safe ABI syncing (via ABISchemaManager).
	•	Submit, batch, and simulate transactions across multiple Safes.

🧰 Contract Toolkit
	•	ABI loading, schema enforcement, and method resolution.
	•	Transaction builder with type-safe argument validation.
	•	Ephemeral executors for flash execution (EIP-6780 friendly).
	•	Gas calibration and automatic fee bumpers.

📊 Forensic Audit Mode
	•	Crawl wallets, Safes, and secrets into a signed report (JSON/PDF).
	•	Includes:
	•	Wallet balance snapshots
	•	Safe threshold configs
	•	Expiring secrets
	•	Last access timestamps
	•	Reports cryptographically signed with GNOMAN’s audit key.

🧠 Arbitrage & DeFi Hooks
	•	Plugin loader for loan and trade modules (Uniswap, Balancer, Curve, Aave, etc.).
	•	Canonical schema enforcement for graph + execution steps.
	•	RPZE pathfinding validator integration.
	•	ExecutionManager hooks for cycle watching, memory attach, and readiness checks.

📡 Sync & Drift Detection
	•	gnoman sync: reconcile secrets across keyring, .env, .env.secure, and remote vaults.
	•	Detect drift and resolve conflicts interactively.

📟 Dashboard UI
	•	Curses-powered neon cockpit.
	•	Views: diffs, branches, GitHub status, Safe states, audit logs.
	•	Keyboard-driven interactive ops (submit tx, rotate key, reconcile secrets).

⸻

🔧 Installation

From PyPI:

pip install gnoman-cli

From DockerHub:

docker pull gadgetsaavy/gnoman:latest
docker run -it gadgetsaavy/gnoman

From Source:

git clone https://github.com/74Thirsty/gnoman-cli.git
cd gnoman-cli
pip install -e .


⸻

🕹️ Usage

CLI

gnoman safe deploy --owners 0xA.. 0xB.. 0xC.. --threshold 2
gnoman wallet derive --path "m/44'/60'/0'/0/1337"
gnoman sync
gnoman audit --output report.pdf

Dashboard

gnoman tui

Navigate with arrow keys. q to quit.

⸻

🔒 Security Posture
	•	All secrets loaded from keyring-first (never plaintext by default).
	•	Forensic logs signed with GNOMAN’s audit key.
	•	Ephemeral execution to prevent key leakage.
	•	Multisig-first design: never trust a single key.

⸻

🛠️ Roadmap
	•	Remote vault sync (Hashicorp Vault, AWS Secrets Manager).
	•	ML-based anomaly detection in audit mode.
	•	zk-proof attestation of audit reports.
	•	Direct Flashbots bundle submission from dashboard.

⸻

🧑‍💻 Authors

Built with obsession by Christopher Hirschauer (74Thirsty).

⸻
