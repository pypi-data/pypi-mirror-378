# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import e4ting_pb2 as e4ting__pb2


class E4tingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/e4ting.E4ting/Ping',
                request_serializer=e4ting__pb2.Request.SerializeToString,
                response_deserializer=e4ting__pb2.UpdateResponse.FromString,
                )
        self.ListType = channel.unary_unary(
                '/e4ting.E4ting/ListType',
                request_serializer=e4ting__pb2.SearchRequest.SerializeToString,
                response_deserializer=e4ting__pb2.ManyTypeRes.FromString,
                )
        self.NewType = channel.unary_unary(
                '/e4ting.E4ting/NewType',
                request_serializer=e4ting__pb2.NewTypeReq.SerializeToString,
                response_deserializer=e4ting__pb2.OneTypeRes.FromString,
                )
        self.UpdateType = channel.unary_unary(
                '/e4ting.E4ting/UpdateType',
                request_serializer=e4ting__pb2.UpdateTypeReq.SerializeToString,
                response_deserializer=e4ting__pb2.UpdateResponse.FromString,
                )
        self.GetType = channel.unary_unary(
                '/e4ting.E4ting/GetType',
                request_serializer=e4ting__pb2.ID.SerializeToString,
                response_deserializer=e4ting__pb2.OneTypeRes.FromString,
                )
        self.DeleteType = channel.unary_unary(
                '/e4ting.E4ting/DeleteType',
                request_serializer=e4ting__pb2.ID.SerializeToString,
                response_deserializer=e4ting__pb2.UpdateResponse.FromString,
                )
        self.EnableType = channel.unary_unary(
                '/e4ting.E4ting/EnableType',
                request_serializer=e4ting__pb2.ID.SerializeToString,
                response_deserializer=e4ting__pb2.UpdateResponse.FromString,
                )
        self.DisableType = channel.unary_unary(
                '/e4ting.E4ting/DisableType',
                request_serializer=e4ting__pb2.ID.SerializeToString,
                response_deserializer=e4ting__pb2.UpdateResponse.FromString,
                )
        self.ListAccount = channel.unary_unary(
                '/e4ting.E4ting/ListAccount',
                request_serializer=e4ting__pb2.SearchRequest.SerializeToString,
                response_deserializer=e4ting__pb2.ManyAccountRes.FromString,
                )
        self.NewAccount = channel.unary_unary(
                '/e4ting.E4ting/NewAccount',
                request_serializer=e4ting__pb2.NewAccountReq.SerializeToString,
                response_deserializer=e4ting__pb2.OneAccountRes.FromString,
                )
        self.UpdateAccount = channel.unary_unary(
                '/e4ting.E4ting/UpdateAccount',
                request_serializer=e4ting__pb2.UpdateAccountReq.SerializeToString,
                response_deserializer=e4ting__pb2.UpdateResponse.FromString,
                )
        self.GetAccount = channel.unary_unary(
                '/e4ting.E4ting/GetAccount',
                request_serializer=e4ting__pb2.ID.SerializeToString,
                response_deserializer=e4ting__pb2.OneAccountRes.FromString,
                )
        self.DeleteAccount = channel.unary_unary(
                '/e4ting.E4ting/DeleteAccount',
                request_serializer=e4ting__pb2.ID.SerializeToString,
                response_deserializer=e4ting__pb2.UpdateResponse.FromString,
                )
        self.EnableAccount = channel.unary_unary(
                '/e4ting.E4ting/EnableAccount',
                request_serializer=e4ting__pb2.ID.SerializeToString,
                response_deserializer=e4ting__pb2.UpdateResponse.FromString,
                )
        self.DisableAccount = channel.unary_unary(
                '/e4ting.E4ting/DisableAccount',
                request_serializer=e4ting__pb2.ID.SerializeToString,
                response_deserializer=e4ting__pb2.UpdateResponse.FromString,
                )
        self.GetUTXO = channel.unary_unary(
                '/e4ting.E4ting/GetUTXO',
                request_serializer=e4ting__pb2.ListReq.SerializeToString,
                response_deserializer=e4ting__pb2.ManyUtxoRes.FromString,
                )
        self.AccountOut = channel.unary_unary(
                '/e4ting.E4ting/AccountOut',
                request_serializer=e4ting__pb2.BillingReq.SerializeToString,
                response_deserializer=e4ting__pb2.UpdateResponse.FromString,
                )
        self.AccountIn = channel.unary_unary(
                '/e4ting.E4ting/AccountIn',
                request_serializer=e4ting__pb2.BillingReq.SerializeToString,
                response_deserializer=e4ting__pb2.UpdateResponse.FromString,
                )
        self.ListAccountDay = channel.unary_unary(
                '/e4ting.E4ting/ListAccountDay',
                request_serializer=e4ting__pb2.ListReq.SerializeToString,
                response_deserializer=e4ting__pb2.ManyHistoryRes.FromString,
                )
        self.ListAccountMon = channel.unary_unary(
                '/e4ting.E4ting/ListAccountMon',
                request_serializer=e4ting__pb2.ListReq.SerializeToString,
                response_deserializer=e4ting__pb2.ManyHistoryRes.FromString,
                )


class E4tingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListType(self, request, context):
        """rpc GetAllTypes(SearchRequest) returns(ManyTypeRes);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewType(self, request, context):
        """rpc GetTypeByName(ID) returns(OneTypeRes);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUTXO(self, request, context):
        """UTXO 放在这里
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AccountOut(self, request, context):
        """出账
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AccountIn(self, request, context):
        """入账
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAccountDay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAccountMon(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_E4tingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=e4ting__pb2.Request.FromString,
                    response_serializer=e4ting__pb2.UpdateResponse.SerializeToString,
            ),
            'ListType': grpc.unary_unary_rpc_method_handler(
                    servicer.ListType,
                    request_deserializer=e4ting__pb2.SearchRequest.FromString,
                    response_serializer=e4ting__pb2.ManyTypeRes.SerializeToString,
            ),
            'NewType': grpc.unary_unary_rpc_method_handler(
                    servicer.NewType,
                    request_deserializer=e4ting__pb2.NewTypeReq.FromString,
                    response_serializer=e4ting__pb2.OneTypeRes.SerializeToString,
            ),
            'UpdateType': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateType,
                    request_deserializer=e4ting__pb2.UpdateTypeReq.FromString,
                    response_serializer=e4ting__pb2.UpdateResponse.SerializeToString,
            ),
            'GetType': grpc.unary_unary_rpc_method_handler(
                    servicer.GetType,
                    request_deserializer=e4ting__pb2.ID.FromString,
                    response_serializer=e4ting__pb2.OneTypeRes.SerializeToString,
            ),
            'DeleteType': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteType,
                    request_deserializer=e4ting__pb2.ID.FromString,
                    response_serializer=e4ting__pb2.UpdateResponse.SerializeToString,
            ),
            'EnableType': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableType,
                    request_deserializer=e4ting__pb2.ID.FromString,
                    response_serializer=e4ting__pb2.UpdateResponse.SerializeToString,
            ),
            'DisableType': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableType,
                    request_deserializer=e4ting__pb2.ID.FromString,
                    response_serializer=e4ting__pb2.UpdateResponse.SerializeToString,
            ),
            'ListAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccount,
                    request_deserializer=e4ting__pb2.SearchRequest.FromString,
                    response_serializer=e4ting__pb2.ManyAccountRes.SerializeToString,
            ),
            'NewAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.NewAccount,
                    request_deserializer=e4ting__pb2.NewAccountReq.FromString,
                    response_serializer=e4ting__pb2.OneAccountRes.SerializeToString,
            ),
            'UpdateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAccount,
                    request_deserializer=e4ting__pb2.UpdateAccountReq.FromString,
                    response_serializer=e4ting__pb2.UpdateResponse.SerializeToString,
            ),
            'GetAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccount,
                    request_deserializer=e4ting__pb2.ID.FromString,
                    response_serializer=e4ting__pb2.OneAccountRes.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=e4ting__pb2.ID.FromString,
                    response_serializer=e4ting__pb2.UpdateResponse.SerializeToString,
            ),
            'EnableAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableAccount,
                    request_deserializer=e4ting__pb2.ID.FromString,
                    response_serializer=e4ting__pb2.UpdateResponse.SerializeToString,
            ),
            'DisableAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableAccount,
                    request_deserializer=e4ting__pb2.ID.FromString,
                    response_serializer=e4ting__pb2.UpdateResponse.SerializeToString,
            ),
            'GetUTXO': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUTXO,
                    request_deserializer=e4ting__pb2.ListReq.FromString,
                    response_serializer=e4ting__pb2.ManyUtxoRes.SerializeToString,
            ),
            'AccountOut': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountOut,
                    request_deserializer=e4ting__pb2.BillingReq.FromString,
                    response_serializer=e4ting__pb2.UpdateResponse.SerializeToString,
            ),
            'AccountIn': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountIn,
                    request_deserializer=e4ting__pb2.BillingReq.FromString,
                    response_serializer=e4ting__pb2.UpdateResponse.SerializeToString,
            ),
            'ListAccountDay': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccountDay,
                    request_deserializer=e4ting__pb2.ListReq.FromString,
                    response_serializer=e4ting__pb2.ManyHistoryRes.SerializeToString,
            ),
            'ListAccountMon': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccountMon,
                    request_deserializer=e4ting__pb2.ListReq.FromString,
                    response_serializer=e4ting__pb2.ManyHistoryRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'e4ting.E4ting', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class E4ting(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/Ping',
            e4ting__pb2.Request.SerializeToString,
            e4ting__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/ListType',
            e4ting__pb2.SearchRequest.SerializeToString,
            e4ting__pb2.ManyTypeRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/NewType',
            e4ting__pb2.NewTypeReq.SerializeToString,
            e4ting__pb2.OneTypeRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/UpdateType',
            e4ting__pb2.UpdateTypeReq.SerializeToString,
            e4ting__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/GetType',
            e4ting__pb2.ID.SerializeToString,
            e4ting__pb2.OneTypeRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/DeleteType',
            e4ting__pb2.ID.SerializeToString,
            e4ting__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnableType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/EnableType',
            e4ting__pb2.ID.SerializeToString,
            e4ting__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/DisableType',
            e4ting__pb2.ID.SerializeToString,
            e4ting__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/ListAccount',
            e4ting__pb2.SearchRequest.SerializeToString,
            e4ting__pb2.ManyAccountRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/NewAccount',
            e4ting__pb2.NewAccountReq.SerializeToString,
            e4ting__pb2.OneAccountRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/UpdateAccount',
            e4ting__pb2.UpdateAccountReq.SerializeToString,
            e4ting__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/GetAccount',
            e4ting__pb2.ID.SerializeToString,
            e4ting__pb2.OneAccountRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/DeleteAccount',
            e4ting__pb2.ID.SerializeToString,
            e4ting__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnableAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/EnableAccount',
            e4ting__pb2.ID.SerializeToString,
            e4ting__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/DisableAccount',
            e4ting__pb2.ID.SerializeToString,
            e4ting__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUTXO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/GetUTXO',
            e4ting__pb2.ListReq.SerializeToString,
            e4ting__pb2.ManyUtxoRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AccountOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/AccountOut',
            e4ting__pb2.BillingReq.SerializeToString,
            e4ting__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AccountIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/AccountIn',
            e4ting__pb2.BillingReq.SerializeToString,
            e4ting__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAccountDay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/ListAccountDay',
            e4ting__pb2.ListReq.SerializeToString,
            e4ting__pb2.ManyHistoryRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAccountMon(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/e4ting.E4ting/ListAccountMon',
            e4ting__pb2.ListReq.SerializeToString,
            e4ting__pb2.ManyHistoryRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
