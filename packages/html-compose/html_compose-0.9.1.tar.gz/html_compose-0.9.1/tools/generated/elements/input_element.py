from typing import Union, Literal, Optional

from ..attributes import GlobalAttrs, AnchorAttrs, AreaAttrs, AudioAttrs, BaseAttrs, BlockquoteAttrs, BodyAttrs, ButtonAttrs, CanvasAttrs, ColAttrs, ColgroupAttrs, DataAttrs, DelAttrs, DetailsAttrs, DialogAttrs, EmbedAttrs, FieldsetAttrs, FormAttrs, IframeAttrs, ImgAttrs, InputAttrs, InsAttrs, LabelAttrs, LiAttrs, LinkAttrs, MapAttrs, MetaAttrs, MeterAttrs, ObjectAttrs, OlAttrs, OptgroupAttrs, OptionAttrs, OutputAttrs, ProgressAttrs, QAttrs, ScriptAttrs, SelectAttrs, SlotAttrs, SourceAttrs, StyleAttrs, TdAttrs, TemplateAttrs, TextareaAttrs, ThAttrs, TimeAttrs, TrackAttrs, VideoAttrs
from ..base_attribute import BaseAttribute
from ..base_element import BaseElement

# This file is generated by tools/generate_elements.py



class input(BaseElement): # type: ignore[misc]
    """
    The 'input' element.  
    Description: Form control  
    Categories: flow phrasing interactive* listed labelable submittable resettable form-associated palpable*  
    Parents: phrasing  
    Children: empty  
    Interface: HTMLInputElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input  
    """ # fmt: skip
    tag = 'input'
    categories = ['flow', 'phrasing', 'interactive*', 'listed', 'labelable', 'submittable', 'resettable', 'form-associated', 'palpable*']
    class hint(GlobalAttrs, InputAttrs):
        """
        Type hints for "input" attrs  
        This class holds functions which return BaseAttributes  
        Which you can add to your element attrs  
        """ # fmt: skip
        pass
    _ = hint
    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[str] = None,
        class_: Optional[Union[str, list, dict]] = None,
        accept: Optional[str] = None,
        alpha: Optional[Union[str, bool]] = None,
        alt: Optional[str] = None,
        autocomplete: Optional[str] = None,
        checked: Optional[Union[str, bool]] = None,
        colorspace: Optional[Union[str, Literal['limited-srgb', 'display-p3']]] = None,
        dirname: Optional[str] = None,
        disabled: Optional[Union[str, bool]] = None,
        form: Optional[str] = None,
        formaction: Optional[str] = None,
        formenctype: Optional[Union[str, Literal['application/x-www-form-urlencoded', 'multipart/form-data', 'text/plain']]] = None,
        formmethod: Optional[Union[str, Literal['GET', 'POST', 'dialog']]] = None,
        formnovalidate: Optional[Union[str, bool]] = None,
        formtarget: Optional[str] = None,
        height: Optional[Union[str, int]] = None,
        list: Optional[str] = None,
        max: Optional[str] = None,
        maxlength: Optional[Union[str, int]] = None,
        min: Optional[str] = None,
        minlength: Optional[Union[str, int]] = None,
        multiple: Optional[Union[str, bool]] = None,
        name: Optional[str] = None,
        pattern: Optional[str] = None,
        placeholder: Optional[str] = None,
        popovertarget: Optional[str] = None,
        popovertargetaction: Optional[Union[str, Literal['toggle', 'show', 'hide']]] = None,
        readonly: Optional[Union[str, bool]] = None,
        required: Optional[Union[str, bool]] = None,
        size: Optional[str] = None,
        src: Optional[str] = None,
        step: Optional[Union[str, float]] = None,
        title: Optional[str] = None,
        type: Optional[str] = None,
        value: Optional[str] = None,
        width: Optional[Union[str, int]] = None,
        accesskey: Optional[Union[str, list]] = None,
        autocapitalize: Optional[Union[str, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, bool]] = None,
        contenteditable: Optional[Union[str, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, bool]] = None,
        inputmode: Optional[Union[str, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[str] = None,
        itemid: Optional[str] = None,
        itemprop: Optional[Union[str, list]] = None,
        itemref: Optional[Union[str, list]] = None,
        itemscope: Optional[Union[str, bool]] = None,
        itemtype: Optional[Union[str, list]] = None,
        lang: Optional[str] = None,
        nonce: Optional[str] = None,
        popover: Optional[Union[str, Literal['auto', 'manual']]] = None,
        slot: Optional[str] = None,
        spellcheck: Optional[Union[str, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, list, dict]] = None,
        tabindex: Optional[Union[str, int]] = None,
        translate: Optional[Union[str, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'input' (Form control) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input

        Parameters
        ----------
        `attrs`: 
            A list or dictionary of attributes for the element
        
        `id` :
            The element's ID
        
        `class_` :
            Classes to which the element belongs
        
        `accept` :
            Hint for expected file type in file upload controls  
            Set of comma-separated tokens* consisting of valid MIME type strings with no parameters or audio/*, video/*, or image/*
        
        `alpha` :
            Allow the color's alpha component to be set
        
        `alt` :
            Replacement text for use when images are not available
        
        `autocomplete` :
            Hint for form autofill feature  
            Autofill field name and related tokens*
        
        `checked` :
            Whether the control is checked
        
        `colorspace` :
            The color space of the serialized color
        
        `dirname` :
            Name of form control to use for sending the element's directionality in form submission
        
        `disabled` :
            Whether the form control is disabled
        
        `form` :
            Associates the element with a form element  
            ID*
        
        `formaction` :
            URL to use for form submission  
            Valid non-empty URL potentially surrounded by spaces
        
        `formenctype` :
            Entry list encoding type to use for form submission
        
        `formmethod` :
            Variant to use for form submission
        
        `formnovalidate` :
            Bypass form control validation for form submission
        
        `formtarget` :
            Navigable for form submission  
            Valid navigable target name or keyword
        
        `height` :
            Vertical dimension
        
        `list` :
            List of autocomplete options  
            ID*
        
        `max` :
            Maximum value  
            Varies*
        
        `maxlength` :
            Maximum length of value
        
        `min` :
            Minimum value  
            Varies*
        
        `minlength` :
            Minimum length of value
        
        `multiple` :
            Whether to allow multiple values
        
        `name` :
            Name of the element to use for form submission and in the form.elements API
        
        `pattern` :
            Pattern to be matched by the form control's value  
            Regular expression matching the JavaScript Pattern production
        
        `placeholder` :
            User-visible label to be placed within the form control
        
        `popovertarget` :
            Targets a popover element to toggle, show, or hide  
            ID*
        
        `popovertargetaction` :
            Indicates whether a targeted popover element is to be toggled, shown, or hidden
        
        `readonly` :
            Whether to allow the value to be edited by the user
        
        `required` :
            Whether the control is required for form submission
        
        `size` :
            Size of the control  
            Valid non-negative integer greater than zero
        
        `src` :
            Address of the resource  
            Valid non-empty URL potentially surrounded by spaces
        
        `step` :
            Granularity to be matched by the form control's value
        
        `title` :
            Description of pattern (when used with pattern attribute)
        
        `type` :
            Type of form control  
            input type keyword
        
        `value` :
            Value of the form control  
            Varies*
        
        `width` :
            Horizontal dimension
        
        `accesskey` :
            Keyboard shortcut to activate or focus element
        
        `autocapitalize` :
            Recommended autocapitalization behavior (for supported input methods)
        
        `autocorrect` :
            Recommended autocorrection behavior (for supported input methods)
        
        `autofocus` :
            Automatically focus the element when the page is loaded
        
        `contenteditable` :
            Whether the element is editable
        
        `dir` :
            The text directionality of the element
        
        `draggable` :
            Whether the element is draggable
        
        `enterkeyhint` :
            Hint for selecting an enter key action
        
        `hidden` :
            Whether the element is relevant
        
        `inert` :
            Whether the element is inert.
        
        `inputmode` :
            Hint for selecting an input modality
        
        `is_` :
            Creates a customized built-in element  
            Valid custom element name of a defined customized built-in element
        
        `itemid` :
            Global identifier for a microdata item  
            Valid URL potentially surrounded by spaces
        
        `itemprop` :
            Property names of a microdata item
        
        `itemref` :
            Referenced elements
        
        `itemscope` :
            Introduces a microdata item
        
        `itemtype` :
            Item types of a microdata item
        
        `lang` :
            Language of the element  
            Valid BCP 47 language tag or the empty string
        
        `nonce` :
            Cryptographic nonce used in Content Security Policy checks [CSP]
        
        `popover` :
            Makes the element a popover element
        
        `slot` :
            The element's desired slot
        
        `spellcheck` :
            Whether the element is to have its spelling and grammar checked
        
        `style` :
            Presentational and formatting instructions  
            CSS declarations*
        
        `tabindex` :
            Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        
        `translate` :
            Whether the element is to be translated when the page is localized
        
        `writingsuggestions` :
            Whether the element can offer writing suggestions or not.
        
        """ #fmt: skip
        super().__init__(
            "input",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (accept is None or accept is False):
            self._process_attr("accept", accept)
        if not (alpha is None or alpha is False):
            self._process_attr("alpha", alpha)
        if not (alt is None or alt is False):
            self._process_attr("alt", alt)
        if not (autocomplete is None or autocomplete is False):
            self._process_attr("autocomplete", autocomplete)
        if not (checked is None or checked is False):
            self._process_attr("checked", checked)
        if not (colorspace is None or colorspace is False):
            self._process_attr("colorspace", colorspace)
        if not (dirname is None or dirname is False):
            self._process_attr("dirname", dirname)
        if not (disabled is None or disabled is False):
            self._process_attr("disabled", disabled)
        if not (form is None or form is False):
            self._process_attr("form", form)
        if not (formaction is None or formaction is False):
            self._process_attr("formaction", formaction)
        if not (formenctype is None or formenctype is False):
            self._process_attr("formenctype", formenctype)
        if not (formmethod is None or formmethod is False):
            self._process_attr("formmethod", formmethod)
        if not (formnovalidate is None or formnovalidate is False):
            self._process_attr("formnovalidate", formnovalidate)
        if not (formtarget is None or formtarget is False):
            self._process_attr("formtarget", formtarget)
        if not (height is None or height is False):
            self._process_attr("height", height)
        if not (list is None or list is False):
            self._process_attr("list", list)
        if not (max is None or max is False):
            self._process_attr("max", max)
        if not (maxlength is None or maxlength is False):
            self._process_attr("maxlength", maxlength)
        if not (min is None or min is False):
            self._process_attr("min", min)
        if not (minlength is None or minlength is False):
            self._process_attr("minlength", minlength)
        if not (multiple is None or multiple is False):
            self._process_attr("multiple", multiple)
        if not (name is None or name is False):
            self._process_attr("name", name)
        if not (pattern is None or pattern is False):
            self._process_attr("pattern", pattern)
        if not (placeholder is None or placeholder is False):
            self._process_attr("placeholder", placeholder)
        if not (popovertarget is None or popovertarget is False):
            self._process_attr("popovertarget", popovertarget)
        if not (popovertargetaction is None or popovertargetaction is False):
            self._process_attr("popovertargetaction", popovertargetaction)
        if not (readonly is None or readonly is False):
            self._process_attr("readonly", readonly)
        if not (required is None or required is False):
            self._process_attr("required", required)
        if not (size is None or size is False):
            self._process_attr("size", size)
        if not (src is None or src is False):
            self._process_attr("src", src)
        if not (step is None or step is False):
            self._process_attr("step", step)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (type is None or type is False):
            self._process_attr("type", type)
        if not (value is None or value is False):
            self._process_attr("value", value)
        if not (width is None or width is False):
            self._process_attr("width", width)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)