from typing import Union, Literal, Optional

from ..attributes import GlobalAttrs, AnchorAttrs, AreaAttrs, AudioAttrs, BaseAttrs, BlockquoteAttrs, BodyAttrs, ButtonAttrs, CanvasAttrs, ColAttrs, ColgroupAttrs, DataAttrs, DelAttrs, DetailsAttrs, DialogAttrs, EmbedAttrs, FieldsetAttrs, FormAttrs, IframeAttrs, ImgAttrs, InputAttrs, InsAttrs, LabelAttrs, LiAttrs, LinkAttrs, MapAttrs, MetaAttrs, MeterAttrs, ObjectAttrs, OlAttrs, OptgroupAttrs, OptionAttrs, OutputAttrs, ProgressAttrs, QAttrs, ScriptAttrs, SelectAttrs, SlotAttrs, SourceAttrs, StyleAttrs, TdAttrs, TemplateAttrs, TextareaAttrs, ThAttrs, TimeAttrs, TrackAttrs, VideoAttrs
from ..base_attribute import BaseAttribute
from ..base_element import BaseElement

# This file is generated by tools/generate_elements.py



class link(BaseElement): # type: ignore[misc]
    """
    The 'link' element.  
    Description: Link metadata  
    Categories: metadata flow* phrasing*  
    Parents: head noscript* phrasing*  
    Children: empty  
    Interface: HTMLLinkElement  
    Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link  
    """ # fmt: skip
    tag = 'link'
    categories = ['metadata', 'flow*', 'phrasing*']
    class hint(GlobalAttrs, LinkAttrs):
        """
        Type hints for "link" attrs  
        This class holds functions which return BaseAttributes  
        Which you can add to your element attrs  
        """ # fmt: skip
        pass
    _ = hint
    def __init__(
        self,
        attrs: Optional[Union[dict[str, Union[str, dict, list]], list[BaseAttribute]]] = None,
        id: Optional[str] = None,
        class_: Optional[Union[str, list, dict]] = None,
        as_: Optional[str] = None,
        blocking: Optional[Union[str, list]] = None,
        color: Optional[str] = None,
        crossorigin: Optional[Union[str, Literal['anonymous', 'use-credentials']]] = None,
        disabled: Optional[Union[str, bool]] = None,
        fetchpriority: Optional[Union[str, Literal['auto', 'high', 'low']]] = None,
        href: Optional[str] = None,
        hreflang: Optional[str] = None,
        imagesizes: Optional[str] = None,
        imagesrcset: Optional[str] = None,
        integrity: Optional[str] = None,
        media: Optional[str] = None,
        referrerpolicy: Optional[str] = None,
        rel: Optional[Union[str, list]] = None,
        sizes: Optional[Union[str, list]] = None,
        title: Optional[str] = None,
        type: Optional[str] = None,
        accesskey: Optional[Union[str, list]] = None,
        autocapitalize: Optional[Union[str, Literal['on', 'off', 'none', 'sentences', 'words', 'characters']]] = None,
        autocorrect: Optional[Union[str, Literal['on', 'off']]] = None,
        autofocus: Optional[Union[str, bool]] = None,
        contenteditable: Optional[Union[str, Literal['true', 'plaintext-only', 'false']]] = None,
        dir: Optional[Union[str, Literal['ltr', 'rtl', 'auto']]] = None,
        draggable: Optional[Union[str, Literal['true', 'false']]] = None,
        enterkeyhint: Optional[Union[str, Literal['enter', 'done', 'go', 'next', 'previous', 'search', 'send']]] = None,
        hidden: Optional[Union[str, Literal['until-found', 'hidden', '']]] = None,
        inert: Optional[Union[str, bool]] = None,
        inputmode: Optional[Union[str, Literal['none', 'text', 'tel', 'email', 'url', 'numeric', 'decimal', 'search']]] = None,
        is_: Optional[str] = None,
        itemid: Optional[str] = None,
        itemprop: Optional[Union[str, list]] = None,
        itemref: Optional[Union[str, list]] = None,
        itemscope: Optional[Union[str, bool]] = None,
        itemtype: Optional[Union[str, list]] = None,
        lang: Optional[str] = None,
        nonce: Optional[str] = None,
        popover: Optional[Union[str, Literal['auto', 'manual']]] = None,
        slot: Optional[str] = None,
        spellcheck: Optional[Union[str, Literal['true', 'false', '']]] = None,
        style: Optional[Union[str, list, dict]] = None,
        tabindex: Optional[Union[str, int]] = None,
        translate: Optional[Union[str, Literal['yes', 'no']]] = None,
        writingsuggestions: Optional[Union[str, Literal['true', 'false', '']]] = None,
        children: Optional[list] = None
    ) -> None:
        """
        Initialize 'link' (Link metadata) element.  
        Documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link

        Parameters
        ----------
        `attrs`: 
            A list or dictionary of attributes for the element
        
        `id` :
            The element's ID
        
        `class_` :
            Classes to which the element belongs
        
        `as_` :
            Potential destination for a preload request (for rel="preload" and rel="modulepreload")  
            Potential destination, for rel="preload"; script-like destination, for rel="modulepreload"
        
        `blocking` :
            Whether the element is potentially render-blocking
        
        `color` :
            Color to use when customizing a site's icon (for rel="mask-icon")  
            CSS <color>
        
        `crossorigin` :
            How the element handles crossorigin requests
        
        `disabled` :
            Whether the link is disabled
        
        `fetchpriority` :
            Sets the priority for fetches initiated by the element
        
        `href` :
            Address of the hyperlink  
            Valid non-empty URL potentially surrounded by spaces
        
        `hreflang` :
            Language of the linked resource  
            Valid BCP 47 language tag
        
        `imagesizes` :
            Image sizes for different page layouts (for rel="preload")  
            Valid source size list
        
        `imagesrcset` :
            Images to use in different situations, e.g., high-resolution displays, small monitors, etc. (for rel="preload")  
            Comma-separated list of image candidate strings
        
        `integrity` :
            Integrity metadata used in Subresource Integrity checks [SRI]
        
        `media` :
            Applicable media  
            Valid media query list
        
        `referrerpolicy` :
            Referrer policy for fetches initiated by the element  
            Referrer policy
        
        `rel` :
            Relationship between the document containing the hyperlink and the destination resource
        
        `sizes` :
            Sizes of the icons (for rel="icon")
        
        `title` :
            CSS style sheet set name
        `title` :
            Title of the link
        
        `type` :
            Hint for the type of the referenced resource  
            Valid MIME type string
        
        `accesskey` :
            Keyboard shortcut to activate or focus element
        
        `autocapitalize` :
            Recommended autocapitalization behavior (for supported input methods)
        
        `autocorrect` :
            Recommended autocorrection behavior (for supported input methods)
        
        `autofocus` :
            Automatically focus the element when the page is loaded
        
        `contenteditable` :
            Whether the element is editable
        
        `dir` :
            The text directionality of the element
        
        `draggable` :
            Whether the element is draggable
        
        `enterkeyhint` :
            Hint for selecting an enter key action
        
        `hidden` :
            Whether the element is relevant
        
        `inert` :
            Whether the element is inert.
        
        `inputmode` :
            Hint for selecting an input modality
        
        `is_` :
            Creates a customized built-in element  
            Valid custom element name of a defined customized built-in element
        
        `itemid` :
            Global identifier for a microdata item  
            Valid URL potentially surrounded by spaces
        
        `itemprop` :
            Property names of a microdata item
        
        `itemref` :
            Referenced elements
        
        `itemscope` :
            Introduces a microdata item
        
        `itemtype` :
            Item types of a microdata item
        
        `lang` :
            Language of the element  
            Valid BCP 47 language tag or the empty string
        
        `nonce` :
            Cryptographic nonce used in Content Security Policy checks [CSP]
        
        `popover` :
            Makes the element a popover element
        
        `slot` :
            The element's desired slot
        
        `spellcheck` :
            Whether the element is to have its spelling and grammar checked
        
        `style` :
            Presentational and formatting instructions  
            CSS declarations*
        
        `tabindex` :
            Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation
        
        `translate` :
            Whether the element is to be translated when the page is localized
        
        `writingsuggestions` :
            Whether the element can offer writing suggestions or not.
        
        """ #fmt: skip
        super().__init__(
            "link",
            void_element=True,
            attrs=attrs,
            children=children
        )
        if not (id is None or id is False):
            self._process_attr("id", id)
        if not (class_ is None or class_ is False):
            self._process_attr("class", class_)
        if not (as_ is None or as_ is False):
            self._process_attr("as", as_)
        if not (blocking is None or blocking is False):
            self._process_attr("blocking", blocking)
        if not (color is None or color is False):
            self._process_attr("color", color)
        if not (crossorigin is None or crossorigin is False):
            self._process_attr("crossorigin", crossorigin)
        if not (disabled is None or disabled is False):
            self._process_attr("disabled", disabled)
        if not (fetchpriority is None or fetchpriority is False):
            self._process_attr("fetchpriority", fetchpriority)
        if not (href is None or href is False):
            self._process_attr("href", href)
        if not (hreflang is None or hreflang is False):
            self._process_attr("hreflang", hreflang)
        if not (imagesizes is None or imagesizes is False):
            self._process_attr("imagesizes", imagesizes)
        if not (imagesrcset is None or imagesrcset is False):
            self._process_attr("imagesrcset", imagesrcset)
        if not (integrity is None or integrity is False):
            self._process_attr("integrity", integrity)
        if not (media is None or media is False):
            self._process_attr("media", media)
        if not (referrerpolicy is None or referrerpolicy is False):
            self._process_attr("referrerpolicy", referrerpolicy)
        if not (rel is None or rel is False):
            self._process_attr("rel", rel)
        if not (sizes is None or sizes is False):
            self._process_attr("sizes", sizes)
        if not (title is None or title is False):
            self._process_attr("title", title)
        if not (type is None or type is False):
            self._process_attr("type", type)
        if not (accesskey is None or accesskey is False):
            self._process_attr("accesskey", accesskey)
        if not (autocapitalize is None or autocapitalize is False):
            self._process_attr("autocapitalize", autocapitalize)
        if not (autocorrect is None or autocorrect is False):
            self._process_attr("autocorrect", autocorrect)
        if not (autofocus is None or autofocus is False):
            self._process_attr("autofocus", autofocus)
        if not (contenteditable is None or contenteditable is False):
            self._process_attr("contenteditable", contenteditable)
        if not (dir is None or dir is False):
            self._process_attr("dir", dir)
        if not (draggable is None or draggable is False):
            self._process_attr("draggable", draggable)
        if not (enterkeyhint is None or enterkeyhint is False):
            self._process_attr("enterkeyhint", enterkeyhint)
        if not (hidden is None or hidden is False):
            self._process_attr("hidden", hidden)
        if not (inert is None or inert is False):
            self._process_attr("inert", inert)
        if not (inputmode is None or inputmode is False):
            self._process_attr("inputmode", inputmode)
        if not (is_ is None or is_ is False):
            self._process_attr("is", is_)
        if not (itemid is None or itemid is False):
            self._process_attr("itemid", itemid)
        if not (itemprop is None or itemprop is False):
            self._process_attr("itemprop", itemprop)
        if not (itemref is None or itemref is False):
            self._process_attr("itemref", itemref)
        if not (itemscope is None or itemscope is False):
            self._process_attr("itemscope", itemscope)
        if not (itemtype is None or itemtype is False):
            self._process_attr("itemtype", itemtype)
        if not (lang is None or lang is False):
            self._process_attr("lang", lang)
        if not (nonce is None or nonce is False):
            self._process_attr("nonce", nonce)
        if not (popover is None or popover is False):
            self._process_attr("popover", popover)
        if not (slot is None or slot is False):
            self._process_attr("slot", slot)
        if not (spellcheck is None or spellcheck is False):
            self._process_attr("spellcheck", spellcheck)
        if not (style is None or style is False):
            self._process_attr("style", style)
        if not (tabindex is None or tabindex is False):
            self._process_attr("tabindex", tabindex)
        if not (translate is None or translate is False):
            self._process_attr("translate", translate)
        if not (writingsuggestions is None or writingsuggestions is False):
            self._process_attr("writingsuggestions", writingsuggestions)