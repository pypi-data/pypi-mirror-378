[project]
name = "json-tabulate"
dynamic = ["version"]
description = "Python library and CLI app that translates arbitrarily-nested JSON into CSV"
readme = "README.md"
authors = []
requires-python = ">=3.9"
dependencies = [
    # We use Typer as the CLI application framework.
    "typer>=0.9.0",
    # We depend on the `typing-extensions` package's `Annotated` class,
    # which we use to define metadata on CLI arguments/options.
    "typing-extensions>=4.15.0",
]

[dependency-groups]
dev = [
    # We use `mypy` for static type checking.
    "mypy>=1.18.1",
    # We use `ptpython` as a developer-friendly REPL.
    # Docs: https://github.com/prompt-toolkit/ptpython
    "ptpython>=3.0.31",
    # We use `pytest` as a test runner.
    "pytest>=7.0.0",
    # We use `pytest-cov` to report test coverage.
    "pytest-cov>=4.0.0",
    # We use `ruff` as a code formatter and linter.
    "ruff>=0.13.0",
]

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

# Note: We use dynamic versioning.
#       You can preview the version number by running: `$ uvx uv-dynamic-versioning`
# Docs: https://github.com/ninoseki/uv-dynamic-versioning/blob/main/docs/version_source.md
[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"  # can use "pep440" (default) or "semver"

[project.urls]
Homepage = "https://github.com/eecavanna/json-tabulate"
Repository = "https://github.com/eecavanna/json-tabulate"

[project.scripts]
# Tell package installers to install a CLI program named `json-tabulate`.
# Reference: https://typer.tiangolo.com/tutorial/package/#add-a-script
json-tabulate = "json_tabulate.cli:app"

# Configure pytest to run doctests, and to not display a code coverage report if a test fails.
# Docs: https://docs.pytest.org/en/stable/reference/customize.html#pyproject-toml
[tool.pytest.ini_options]
addopts = "--doctest-modules --no-cov-on-fail"

# Configure pytest-cov to measure coverage only for the `src/` directory.
# Docs: https://pytest-cov.readthedocs.io/en/latest/config.html
[tool.coverage.run]
source = ["src"]

# Configure mypy to perform type checking within the `src/` and `tests/` directories.
# Docs: https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
[tool.mypy]
files = ["src", "tests"]

# Configure mypy to ignore missing types for third-party modules that don't provide type stubs.
# Docs: https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-library-stubs-or-py-typed-marker
[[tool.mypy.overrides]]
module = ""  # can add module name globs to this list
ignore_missing_imports = true

[tool.ruff]
line-length = 120
# Refrain from formatting or linting the dynamically-generated `src/version.py` file
# generated by the `uv-dynamic-versioning` tool (it lacks a required trailing newline).
extend-exclude = ["src/version.py"]

[tool.ruff.lint]
# Specify which linting rules will be used when someone runs `$ uv run ruff check`.
# Note: The default rules are `["E4", "E7", "E9", "F"]`.
# References:
# - https://docs.astral.sh/ruff/rules/ (the list of rules)
# - https://docs.astral.sh/ruff/rules/#pydocstyle-d (the "D" rules below)
# - https://docs.astral.sh/ruff/settings/#lint_select (the `select` setting)
select = ["E4", "E7", "E9", "F", "D101", "D102", "D103", "I"]

# Configure ruff to _not_ apply certain linter rules to certain files.
[tool.ruff.lint.per-file-ignores]
"tests/test_*.py" = ["D"]
