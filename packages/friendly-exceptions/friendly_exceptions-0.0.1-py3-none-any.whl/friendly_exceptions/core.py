"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
Core module for intercepting and handling exceptions
"""

import sys
import traceback
import time
from typing import Optional, Dict, Any
from .handlers import BaseHandler, get_handler_for_exception
from .config import get_config, set_config, get_config_value
from .logging import setup_logging, get_logger, log_exception, log_handler_performance, log_language_switch

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging()
logger = get_logger()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —è–∑—ã–∫–∞
_CURRENT_LANGUAGE = "ru"


class FriendlyException(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    
    def __init__(self, original_exception: Exception, friendly_message: str):
        self.original_exception = original_exception
        self.friendly_message = friendly_message
        super().__init__(friendly_message)


def explain() -> None:
    """
    –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –≤ —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
    Intercepts the last exception and displays it in human-readable format
    """
    exc_type, exc_value, exc_traceback = sys.exc_info()
    
    if exc_type is None:
        if _CURRENT_LANGUAGE == "ru":
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è")
        else:
            print("‚ùå No active exceptions to explain")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    handler = get_handler_for_exception(exc_type)
    
    if handler:
        try:
            friendly_message = handler.explain(exc_value, exc_traceback)
            print(f"üîç {friendly_message}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if _CURRENT_LANGUAGE == "ru":
                print("\nüìã –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:")
            else:
                print("\nüìã Original error:")
            traceback.print_exception(exc_type, exc_value, exc_traceback)
            
        except Exception as e:
            if _CURRENT_LANGUAGE == "ru":
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {e}")
            else:
                print(f"‚ùå Error processing exception: {e}")
            traceback.print_exception(exc_type, exc_value, exc_traceback)
    else:
        if _CURRENT_LANGUAGE == "ru":
            print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {exc_type.__name__}")
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {exc_value}")
        else:
            print(f"‚ùì Unknown exception type: {exc_type.__name__}")
            print(f"üí¨ Message: {exc_value}")
        traceback.print_exception(exc_type, exc_value, exc_traceback)


def explain_exception(exception: Exception) -> str:
    """
    –û–±—ä—è—Å–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    Explains the given exception and returns a human-readable message
    
    Args:
        exception: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è / Exception to explain
        
    Returns:
        –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ / Human-readable error message
    """
    handler = get_handler_for_exception(type(exception))
    
    if handler:
        return handler.explain(exception, None)
    else:
        if _CURRENT_LANGUAGE == "ru":
            return f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {type(exception).__name__}: {exception}"
        else:
            return f"‚ùì Unknown error: {type(exception).__name__}: {exception}"


def _setup_global_handler() -> None:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
    Automatically sets up global exception handler on import
    """
    def friendly_excepthook(exc_type, exc_value, exc_traceback):
        if exc_type is not None:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            log_exception(exc_value)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π traceback, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if get_config_value("show_original_traceback", True):
                traceback.print_exception(exc_type, exc_value, exc_traceback)
            
            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            handler = get_handler_for_exception(exc_type)
            if handler:
                try:
                    start_time = time.time()
                    friendly_message = handler.explain(exc_value, exc_traceback)
                    execution_time = time.time() - start_time
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
                    log_handler_performance(handler.__class__.__name__, execution_time)
                    
                    if _CURRENT_LANGUAGE == "ru":
                        print(f"\nüí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {friendly_message}")
                    else:
                        print(f"\nüí° Explanation: {friendly_message}")
                except Exception as e:
                    logger.error(f"Error in handler {handler.__class__.__name__}: {e}")
                    if _CURRENT_LANGUAGE == "ru":
                        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è: {e}")
                    else:
                        print(f"\n‚ùå Error creating explanation: {e}")
            else:
                logger.warning(f"No handler found for exception type: {exc_type.__name__}")
                if _CURRENT_LANGUAGE == "ru":
                    print(f"\n‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {exc_type.__name__}")
                else:
                    print(f"\n‚ùì Unknown exception type: {exc_type.__name__}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π excepthook –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    _original_excepthook = sys.excepthook
    sys.excepthook = friendly_excepthook


def set_global_handler() -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    Sets up global exception handler (for compatibility)
    """
    _setup_global_handler()


def set_language(language: str) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
    Sets the language for error messages
    
    Args:
        language: –Ø–∑—ã–∫ ('ru' –∏–ª–∏ 'en') / Language ('ru' or 'en')
    """
    global _CURRENT_LANGUAGE
    
    if language.lower() in ['ru', 'en']:
        old_language = _CURRENT_LANGUAGE
        _CURRENT_LANGUAGE = language.lower()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        set_config("language", _CURRENT_LANGUAGE)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        log_language_switch(old_language, _CURRENT_LANGUAGE)
        
        if language.lower() == "ru":
            print("üá∑üá∫ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π")
        else:
            print("üá∫üá∏ Language set: English")
    else:
        if _CURRENT_LANGUAGE == "ru":
            print("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: 'ru', 'en'")
        else:
            print("‚ùå Supported languages: 'ru', 'en'")


def get_language() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
    Returns current language
    
    Returns:
        –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ / Current language
    """
    return _CURRENT_LANGUAGE
