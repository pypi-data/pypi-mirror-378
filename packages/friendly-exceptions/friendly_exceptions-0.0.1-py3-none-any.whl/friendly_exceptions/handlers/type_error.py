"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è TypeError
TypeError handler
"""

from typing import Optional, Any
from .base import BaseHandler


class TypeErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è TypeError - –æ—à–∏–±–æ–∫ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤
    Handler for TypeError - type incompatibility errors"""
    
    def explain(self, exception: TypeError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç TypeError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        
        Args:
            exception: TypeError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        """
        error_message = str(exception)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        context = self.get_context_info(traceback_obj)
        locals_dict = context.get('locals', {})
        
        if self._get_language() == "ru":
            explanation = f"üîß –û—à–∏–±–∫–∞ —Ç–∏–ø–∞: {error_message}"
        else:
            explanation = f"üîß Type error: {error_message}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
        if "unsupported operand type(s)" in error_message:
            explanation = self._explain_unsupported_operand(error_message, locals_dict)
        elif "object is not callable" in error_message:
            explanation = self._explain_not_callable(error_message, locals_dict)
        elif "object is not iterable" in error_message:
            explanation = self._explain_not_iterable(error_message, locals_dict)
        elif "missing" in error_message and "required positional argument" in error_message:
            explanation = self._explain_missing_argument(error_message, locals_dict)
        elif "takes" in error_message and "positional argument" in error_message:
            explanation = self._explain_too_many_arguments(error_message, locals_dict)
        elif "unexpected keyword argument" in error_message:
            explanation = self._explain_unexpected_keyword(error_message, locals_dict)
        elif "missing" in error_message and "required keyword-only argument" in error_message:
            explanation = self._explain_missing_keyword_argument(error_message, locals_dict)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _explain_unsupported_operand(self, error_message: str, locals_dict: dict) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –æ–ø–µ—Ä–∞–Ω–¥–æ–≤"""
        # "unsupported operand type(s) for +: 'int' and 'str'"
        if "for +:" in error_message:
            return "‚ûï –ù–µ–ª—å–∑—è —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å —á–∏—Å–ª–∞ –∏ —Å—Ç—Ä–æ–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ str() –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É"
        elif "for -:" in error_message:
            return "‚ûñ –ù–µ–ª—å–∑—è –≤—ã—á–∏—Ç–∞—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞–Ω–¥–æ–≤"
        elif "for *:" in error_message:
            return "‚úñÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è. –î–ª—è —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ, –¥–ª—è —á–∏—Å–µ–ª - —É–º–Ω–æ–∂–µ–Ω–∏–µ"
        elif "for /:" in error_message:
            return "‚ûó –ù–µ–ª—å–∑—è –¥–µ–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–±–∞ –æ–ø–µ—Ä–∞–Ω–¥–∞ - —á–∏—Å–ª–∞"
        else:
            return "üîß –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞–Ω–¥–æ–≤"
    
    def _explain_not_callable(self, error_message: str, locals_dict: dict) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ –≤—ã–∑–æ–≤–∞ –Ω–µ-—Ñ—É–Ω–∫—Ü–∏–π"""
        # "object is not callable"
        return "üìû –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–∑–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ () —Ç–æ–ª—å–∫–æ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏"
    
    def _explain_not_iterable(self, error_message: str, locals_dict: dict) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –Ω–µ-–∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º –æ–±—ä–µ–∫—Ç–∞–º"""
        # "object is not iterable"
        return "üîÑ –û–±—ä–µ–∫—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ü–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ for —Ç–æ–ª—å–∫–æ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏, —Å–ª–æ–≤–∞—Ä—è–º–∏, —Å—Ç—Ä–æ–∫–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏"
    
    def _explain_missing_argument(self, error_message: str, locals_dict: dict) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        # "missing 1 required positional argument: 'x'"
        return "üìù –§—É–Ω–∫—Ü–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
    
    def _explain_too_many_arguments(self, error_message: str, locals_dict: dict) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        # "takes 2 positional arguments but 3 were given"
        return "üìù –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–µ–Ω—å—à–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —á–µ–º –≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
    
    def _explain_unexpected_keyword(self, error_message: str, locals_dict: dict) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        # "unexpected keyword argument 'x'"
        return "üè∑Ô∏è –§—É–Ω–∫—Ü–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"
    
    def _explain_missing_keyword_argument(self, error_message: str, locals_dict: dict) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        # "missing 1 required keyword-only argument: 'x'"
        return "üè∑Ô∏è –§—É–Ω–∫—Ü–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ —è–≤–Ω–æ: func(arg=value)"
    
    def get_suggestions(self, exception: TypeError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é TypeError / Returns suggestions for fixing TypeError"""
        error_message = str(exception)
        
        if "unsupported operand type(s)" in error_message:
            if self._get_language() == "ru":
                return [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞–Ω–¥–æ–≤ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤: str(), int(), float()",
                    "–î–ª—è —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ + –¥–ª—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏, * –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è",
                    "–î–ª—è —á–∏—Å–µ–ª –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ +, -, *, / –¥–ª—è –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
                ]
            else:
                return [
                    "Check operand types before operation",
                    "Use explicit type conversion: str(), int(), float()",
                    "For strings use + for concatenation, * for repetition",
                    "For numbers use +, -, *, / for arithmetic operations"
                ]
        elif "object is not callable" in error_message:
            if self._get_language() == "ru":
                return [
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∞ –Ω–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –∑–∞–±—ã–ª–∏ —Å–∫–æ–±–∫–∏ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ type() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞"
                ]
            else:
                return [
                    "Make sure the variable contains a function, not a value",
                    "Check that you didn't forget parentheses when defining the function",
                    "Use type() to check object type"
                ]
        elif "object is not iterable" in error_message:
            if self._get_language() == "ru":
                return [
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ for —Ç–æ–ª—å–∫–æ —Å –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ (—Å–ø–∏—Å–∫–∏, —Å—Ç—Ä–æ–∫–∏, —Å–ª–æ–≤–∞—Ä–∏)",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –∏—Ç–µ—Ä–∞—Ü–∏–µ–π",
                    "–î–ª—è —á–∏—Å–µ–ª –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ range() –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
                ]
            else:
                return [
                    "Use for only with iterable objects (lists, strings, dictionaries)",
                    "Check object type before iteration",
                    "For numbers use range() to create a sequence"
                ]
        elif "missing" in error_message or "takes" in error_message:
            if self._get_language() == "ru":
                return [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏: help(function_name)",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏"
                ]
            else:
                return [
                    "Check function signature: help(function_name)",
                    "Make sure you're passing the correct number of arguments",
                    "Check that all required arguments are passed",
                    "Use named arguments for clarity"
                ]
        else:
            if self._get_language() == "ru":
                return [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–ø—ã –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±—ä–µ–∫—Ç—ã –∏–º–µ—é—Ç –Ω—É–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ –∞—Ç—Ä–∏–±—É—Ç—ã",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ isinstance() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤",
                    "–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º"
                ]
            else:
                return [
                    "Check types of all variables",
                    "Make sure objects have the required methods and attributes",
                    "Use isinstance() to check types",
                    "Read documentation for the functions you're using"
                ]
