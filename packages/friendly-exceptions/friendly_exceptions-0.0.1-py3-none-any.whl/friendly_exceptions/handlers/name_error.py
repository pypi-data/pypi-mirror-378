"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è NameError
NameError handler
"""

import difflib
from typing import Optional, Any
from .base import BaseHandler


class NameErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è NameError - –æ—à–∏–±–æ–∫ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    Handler for NameError - undefined variable errors"""
    
    def explain(self, exception: NameError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç NameError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        Explains NameError in simple terms
        
        Args:
            exception: NameError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è / NameError to explain
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ / Traceback object
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ / Human-readable explanation
        """
        error_message = str(exception)
        
        if self._get_language() == "ru":
            explanation = f"üè∑Ô∏è –û—à–∏–±–∫–∞ –∏–º–µ–Ω–∏: {error_message}"
        else:
            explanation = f"üè∑Ô∏è Name error: {error_message}"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        variable_name = self._extract_variable_name(error_message)
        if variable_name:
            if self._get_language() == "ru":
                explanation += f"\nüîç –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: '{variable_name}'"
            else:
                explanation += f"\nüîç Undefined variable: '{variable_name}'"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = self.get_context_info(traceback_obj)
        locals_dict = context.get('locals', {})
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        similar_variables = self._find_similar_variables(variable_name, locals_dict)
        if similar_variables:
            if self._get_language() == "ru":
                explanation += f"\nüí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: {similar_variables}"
            else:
                explanation += f"\nüí° Perhaps you meant: {similar_variables}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if "is not defined" in error_message:
            explanation = self._explain_not_defined(error_message, variable_name)
        elif "is not defined in this scope" in error_message:
            explanation = self._explain_scope_error(error_message, variable_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        if self._get_language() == "ru":
            explanation += "\n\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces"
        else:
            explanation += "\n\nüìö Documentation: https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            if self._get_language() == "ru":
                explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            else:
                explanation += "\n\nüîß How to fix:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _extract_variable_name(self, error_message: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ / Extracts variable name from error message"""
        # "name 'variable_name' is not defined"
        if "'" in error_message:
            parts = error_message.split("'")
            if len(parts) >= 2:
                return parts[1]
        return None
    
    def _find_similar_variables(self, target_name: str, locals_dict: dict) -> list[str]:
        """–ò—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ / Finds similar variables in context"""
        if not target_name:
            return []
        
        available_names = []
        for var_name in locals_dict.keys():
            if not var_name.startswith('__'):
                available_names.append(var_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –º–æ–¥—É–ª–∏
        import builtins
        available_names.extend(dir(builtins))
        
        similar = difflib.get_close_matches(target_name, available_names, n=3, cutoff=0.6)
        return similar
    
    def _explain_not_defined(self, error_message: str, variable_name: Optional[str]) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞' / Explains 'not defined' error"""
        if self._get_language() == "ru":
            return f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{variable_name}' –Ω–µ –±—ã–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º"
        else:
            return f"‚ùå Variable '{variable_name}' was not defined before use"
    
    def _explain_scope_error(self, error_message: str, variable_name: Optional[str]) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ / Explains scope error"""
        if self._get_language() == "ru":
            return f"üîç –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{variable_name}' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏"
        else:
            return f"üîç Variable '{variable_name}' is not defined in the current scope"
    
    def get_suggestions(self, exception: NameError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é NameError / Returns suggestions for fixing NameError"""
        if self._get_language() == "ru":
            return [
                "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º: variable_name = value",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ global –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dir() –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é del"
            ]
        else:
            return [
                "Define the variable before using it: variable_name = value",
                "Check the spelling of the variable name",
                "Make sure the variable is defined in the correct scope",
                "Use global to access global variables",
                "Check that you imported the necessary modules",
                "Use dir() to view available variables",
                "Check that the variable wasn't deleted with del"
            ]
