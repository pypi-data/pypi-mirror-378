"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è AssertionError
AssertionError handler
"""

from typing import Optional, Any
from .base import BaseHandler


class AssertionErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è AssertionError - –æ—à–∏–±–æ–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
    Handler for AssertionError - assertion errors"""
    
    def explain(self, exception: AssertionError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç AssertionError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        Explains AssertionError in simple terms
        
        Args:
            exception: AssertionError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è / AssertionError to explain
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ / Traceback object
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ / Human-readable explanation
        """
        error_message = str(exception)
        
        if self._get_language() == "ru":
            explanation = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {error_message}"
        else:
            explanation = f"‚ö†Ô∏è Assertion error: {error_message}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = self.get_context_info(traceback_obj)
        locals_dict = context.get('locals', {})
        
        # –ò—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ assert
        assert_vars = self._find_assert_variables(locals_dict)
        if assert_vars:
            if self._get_language() == "ru":
                explanation += f"\nüìä –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {assert_vars}"
            else:
                explanation += f"\nüìä Variables in assertion: {assert_vars}"
        
        # –û–±—ä—è—Å–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º—É
        if self._get_language() == "ru":
            explanation += "\nüí° –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (assert) –≤–µ—Ä–Ω—É–ª–æ False, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
        else:
            explanation += "\nüí° The assertion (assert) returned False, indicating an unexpected program state"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Ç–∞–∫–æ–µ assert
        if self._get_language() == "ru":
            explanation += "\n\nüìù assert –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–º–∏"
        else:
            explanation += "\n\nüìù assert is used to check conditions that should be true"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        if self._get_language() == "ru":
            explanation += "\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.python.org/3/reference/simple_stmts.html#assert"
        else:
            explanation += "\nüìö Documentation: https://docs.python.org/3/reference/simple_stmts.html#assert"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            if self._get_language() == "ru":
                explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            else:
                explanation += "\n\nüîß How to fix:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _find_assert_variables(self, locals_dict: dict) -> list[str]:
        """–ò—â–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å assert / Finds variables related to assert"""
        assert_vars = []
        
        for var_name, var_value in locals_dict.items():
            if not var_name.startswith('__'):
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å assert
                if isinstance(var_value, (int, float, str, bool, list, dict, tuple)):
                    assert_vars.append(f"{var_name}={var_value}")
        
        return assert_vars[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    def get_suggestions(self, exception: AssertionError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é AssertionError / Returns suggestions for fixing AssertionError"""
        if self._get_language() == "ru":
            return [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É —É—Å–ª–æ–≤–∏—è –≤ assert",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ assert –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏ –∏–º–µ—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
                "–î–æ–±–∞–≤—å—Ç–µ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: assert condition, f'Debug info: {variable}'",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º",
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ try-except –≤–º–µ—Å—Ç–æ assert –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ assert —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –Ω–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ assert –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω —Ñ–ª–∞–≥–æ–º -O"
            ]
        else:
            return [
                "Check the logic of the condition in assert",
                "Make sure all variables in assert are defined and have expected values",
                "Add debug information: assert condition, f'Debug info: {variable}'",
                "Check that input data meets expectations",
                "Consider using try-except instead of assert for error handling",
                "Use assert only for debugging, not for error handling in production",
                "Check that assert is not disabled by -O flag"
            ]
