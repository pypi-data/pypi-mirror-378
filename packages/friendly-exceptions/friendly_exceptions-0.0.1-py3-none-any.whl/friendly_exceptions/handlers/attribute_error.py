"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è AttributeError
AttributeError handler
"""

import difflib
from typing import Optional, Any
from .base import BaseHandler


class AttributeErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è AttributeError - –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞—Ç—Ä–∏–±—É—Ç–∞–º
    Handler for AttributeError - errors accessing non-existent attributes"""
    
    def explain(self, exception: AttributeError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç AttributeError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        
        Args:
            exception: AttributeError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        """
        error_message = str(exception)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        context = self.get_context_info(traceback_obj)
        locals_dict = context.get('locals', {})
        
        if self._get_language() == "ru":
            explanation = f"üîç {error_message}"
        else:
            explanation = f"üîç {error_message}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if "'" in error_message and "has no attribute" in error_message:
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞ "'Test' object has no attribute 'nmae'"
            parts = error_message.split("'")
            if len(parts) >= 4:
                # parts[0] = –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                # parts[1] = 'Test' (—Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞)
                # parts[2] = ' object has no attribute '
                # parts[3] = 'nmae' (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç)
                object_type = parts[1]
                missing_attribute = parts[3]
                
                # –ò—â–µ–º –æ–±—ä–µ–∫—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                variable_name = self._find_object_in_locals(object_type, locals_dict)
                
                if variable_name:
                    if self._get_language() == "ru":
                        explanation = f"üîç –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{variable_name}' (—Ç–∏–ø '{object_type}') –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ '{missing_attribute}'"
                    else:
                        explanation = f"üîç Variable '{variable_name}' (type '{object_type}') has no attribute '{missing_attribute}'"
                else:
                    if self._get_language() == "ru":
                        explanation = f"üîç –û–±—ä–µ–∫—Ç —Ç–∏–ø–∞ '{object_type}' –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ '{missing_attribute}'"
                    else:
                        explanation = f"üîç Object of type '{object_type}' has no attribute '{missing_attribute}'"
                
                # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                similar_attributes = self._find_similar_attributes(missing_attribute, object_type, locals_dict)
                if similar_attributes:
                    if self._get_language() == "ru":
                        explanation += f"\nüí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: {similar_attributes}"
                    else:
                        explanation += f"\nüí° Perhaps you meant: {similar_attributes}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –æ–±—ä–µ–∫—Ç–∞
                if self._get_language() == "ru":
                    explanation += f"\nüìã –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: {object_type}"
                else:
                    explanation += f"\nüìã Object type: {object_type}"
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                if self._get_language() == "ru":
                    explanation = f"üîç {error_message}"
                else:
                    explanation = f"üîç {error_message}"
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            if self._get_language() == "ru":
                explanation = f"üîç {error_message}"
            else:
                explanation = f"üîç {error_message}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            if self._get_language() == "ru":
                explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            else:
                explanation += "\n\nüîß How to fix:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _find_object_in_locals(self, object_type: str, locals_dict: dict) -> Optional[str]:
        """
        –ò—â–µ—Ç –æ–±—ä–µ–∫—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        
        Args:
            object_type: –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            locals_dict: –°–ª–æ–≤–∞—Ä—å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            
        Returns:
            –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        for var_name, var_value in locals_dict.items():
            if hasattr(var_value, '__class__') and var_value.__class__.__name__ == object_type:
                return var_name
        return None
    
    def _find_similar_attributes(self, target_attribute: str, object_type: str, locals_dict: dict = None) -> list[str]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∞—Ç—Ä–∏–±—É—Ç—ã, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π
        
        Args:
            target_attribute: –ò—Å–∫–æ–º—ã–π –∞—Ç—Ä–∏–±—É—Ç
            object_type: –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞
            locals_dict: –°–ª–æ–≤–∞—Ä—å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if locals_dict:
            for var_name, var_value in locals_dict.items():
                if hasattr(var_value, '__class__') and var_value.__class__.__name__ == object_type:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –æ–±—ä–µ–∫—Ç–∞
                    try:
                        real_attributes = dir(var_value)
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º difflib –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                        similar = difflib.get_close_matches(target_attribute, real_attributes, n=3, cutoff=0.6)
                        if similar:
                            return similar
                    except Exception:
                        pass
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        common_attributes = {
            'str': ['upper', 'lower', 'strip', 'split', 'replace', 'find', 'index', 'count', 'startswith', 'endswith'],
            'list': ['append', 'extend', 'insert', 'remove', 'pop', 'index', 'count', 'sort', 'reverse', 'clear'],
            'dict': ['keys', 'values', 'items', 'get', 'pop', 'update', 'clear', 'copy'],
            'int': ['bit_length', 'to_bytes', 'from_bytes'],
            'float': ['is_integer', 'as_integer_ratio', 'hex', 'fromhex'],
            'tuple': ['index', 'count'],
            'set': ['add', 'remove', 'discard', 'pop', 'clear', 'copy', 'union', 'intersection', 'difference'],
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        possible_attributes = common_attributes.get(object_type.lower(), [])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º difflib –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        similar = difflib.get_close_matches(target_attribute, possible_attributes, n=3, cutoff=0.6)
        
        if not similar:
            # –ï—Å–ª–∏ difflib –Ω–µ –Ω–∞—à–µ–ª –ø–æ—Ö–æ–∂–∏—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            similar = []
            target_lower = target_attribute.lower()
            
            for attr in possible_attributes:
                attr_lower = attr.lower()
                
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Ä–∞–∑–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä)
                if attr_lower == target_lower and attr != target_attribute:
                    similar.append(attr)
                # –°–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª–µ–≤–æ–π –∞—Ç—Ä–∏–±—É—Ç
                elif target_lower in attr_lower or attr_lower in target_lower:
                    similar.append(attr)
                # –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–æ–≥–æ –∂–µ
                elif attr_lower.startswith(target_lower[:3]) or target_lower.startswith(attr_lower[:3]):
                    similar.append(attr)
        
        return similar[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –ø–æ—Ö–æ–∂–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–∞
    
    def get_suggestions(self, exception: AttributeError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é AttributeError / Returns suggestions for fixing AttributeError"""
        error_message = str(exception)
        
        if "'" in error_message and "has no attribute" in error_message:
            if self._get_language() == "ru":
                return [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∞—Ç—Ä–∏–±—É—Ç–∞",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±—ä–µ–∫—Ç –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç: hasattr(obj, 'attr')",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dir(obj) –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–±—ä–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞"
                ]
            else:
                return [
                    "Check the spelling of the attribute name",
                    "Make sure the object has the required attribute: hasattr(obj, 'attr')",
                    "Use dir(obj) to view all available attributes",
                    "Check that the object is properly initialized",
                    "Make sure you're using the correct object type"
                ]
        else:
            if self._get_language() == "ru":
                return [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞—Ç—Ä–∏–±—É—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getattr() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–º—É –∫–ª–∞—Å—Å—É –∏–ª–∏ –º–æ–¥—É–ª—é"
                ]
            else:
                return [
                    "Check that the object exists and is initialized",
                    "Make sure the attribute is available for this object type",
                    "Use getattr() for safe attribute access",
                    "Check the documentation for the class or module you're using"
                ]
