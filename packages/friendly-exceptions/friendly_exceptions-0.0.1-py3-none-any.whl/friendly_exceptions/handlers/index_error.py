"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è IndexError
IndexError handler
"""

from typing import Optional, Any
from .base import BaseHandler


class IndexErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è IndexError - –æ—à–∏–±–æ–∫ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω–¥–µ–∫—Å–∞
    Handler for IndexError - index out of range errors"""
    
    def explain(self, exception: IndexError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç IndexError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        
        Args:
            exception: IndexError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        """
        error_message = str(exception)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        context = self.get_context_info(traceback_obj)
        locals_dict = context.get('locals', {})
        
        if self._get_language() == "ru":
            explanation = f"üìä {error_message}"
        else:
            explanation = f"üìä {error_message}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if "list index out of range" in error_message:
            explanation = self._explain_list_index_error(locals_dict)
        elif "string index out of range" in error_message:
            explanation = self._explain_string_index_error(locals_dict)
        elif "tuple index out of range" in error_message:
            explanation = self._explain_tuple_index_error(locals_dict)
        else:
            explanation = f"üìä –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω–¥–µ–∫—Å–∞: {error_message}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _explain_list_index_error(self, locals_dict: dict) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ / Explains list indexing errors"""
        # –ò—â–µ–º —Å–ø–∏—Å–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        lists_info = []
        for var_name, var_value in locals_dict.items():
            if isinstance(var_value, list):
                lists_info.append({
                    'name': var_name,
                    'length': len(var_value),
                    'items': var_value[:5]  # –ü–µ—Ä–≤—ã–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                })
        
        if lists_info:
            most_likely_list = lists_info[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫
            if self._get_language() == "ru":
                explanation = f"üìä –°–ø–∏—Å–æ–∫ '{most_likely_list['name']}' —Å–æ–¥–µ—Ä–∂–∏—Ç {most_likely_list['length']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
                if most_likely_list['items']:
                    explanation += f"\nüìã –ü–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {most_likely_list['items']}"
                explanation += "\nüí° –ò–Ω–¥–µ–∫—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ " + str(most_likely_list['length'] - 1)
            else:
                explanation = f"üìä List '{most_likely_list['name']}' contains {most_likely_list['length']} elements"
                if most_likely_list['items']:
                    explanation += f"\nüìã First elements: {most_likely_list['items']}"
                explanation += "\nüí° Indices should be from 0 to " + str(most_likely_list['length'] - 1)
        else:
            if self._get_language() == "ru":
                explanation = "üìä –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É"
            else:
                explanation = "üìä Attempt to access list element with non-existent index"
        
        return explanation
    
    def _explain_string_index_error(self, locals_dict: dict) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏"""
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        strings_info = []
        for var_name, var_value in locals_dict.items():
            if isinstance(var_value, str):
                strings_info.append({
                    'name': var_name,
                    'length': len(var_value),
                    'preview': var_value[:20] + "..." if len(var_value) > 20 else var_value
                })
        
        if strings_info:
            most_likely_string = strings_info[0]
            explanation = f"üìù –°—Ç—Ä–æ–∫–∞ '{most_likely_string['name']}' —Å–æ–¥–µ—Ä–∂–∏—Ç {most_likely_string['length']} —Å–∏–º–≤–æ–ª–æ–≤"
            explanation += f"\nüìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: '{most_likely_string['preview']}'"
            explanation += "\nüí° –ò–Ω–¥–µ–∫—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ " + str(most_likely_string['length'] - 1)
        else:
            explanation = "üìù –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–∏–º–≤–æ–ª—É —Å—Ç—Ä–æ–∫–∏ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É"
        
        return explanation
    
    def _explain_tuple_index_error(self, locals_dict: dict) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∫–æ—Ä—Ç–µ–∂–∞"""
        # –ò—â–µ–º –∫–æ—Ä—Ç–µ–∂–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        tuples_info = []
        for var_name, var_value in locals_dict.items():
            if isinstance(var_value, tuple):
                tuples_info.append({
                    'name': var_name,
                    'length': len(var_value),
                    'items': var_value[:5]  # –ü–µ—Ä–≤—ã–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                })
        
        if tuples_info:
            most_likely_tuple = tuples_info[0]
            explanation = f"üì¶ –ö–æ—Ä—Ç–µ–∂ '{most_likely_tuple['name']}' —Å–æ–¥–µ—Ä–∂–∏—Ç {most_likely_tuple['length']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
            if most_likely_tuple['items']:
                explanation += f"\nüìã –≠–ª–µ–º–µ–Ω—Ç—ã: {most_likely_tuple['items']}"
            explanation += "\nüí° –ò–Ω–¥–µ–∫—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ " + str(most_likely_tuple['length'] - 1)
        else:
            explanation = "üì¶ –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —ç–ª–µ–º–µ–Ω—Ç—É –∫–æ—Ä—Ç–µ–∂–∞ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É"
        
        return explanation
    
    def get_suggestions(self, exception: IndexError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é IndexError / Returns suggestions for fixing IndexError"""
        if self._get_language() == "ru":
            return [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–ª–∏–Ω—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É: len(sequence)",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø: sequence[i] if i < len(sequence) else default_value",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–ª–∏–Ω—É",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ try-except –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏",
                "–î–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .append() –≤–º–µ—Å—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –ø—É—Å—Ç–∞—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º"
            ]
        else:
            return [
                "Check sequence length before accessing element: len(sequence)",
                "Use safe access: sequence[i] if i < len(sequence) else default_value",
                "Check that index is not negative and doesn't exceed length",
                "Use try-except to handle indexing errors",
                "For lists use .append() instead of accessing non-existent index",
                "Check that sequence is not empty before accessing elements"
            ]
