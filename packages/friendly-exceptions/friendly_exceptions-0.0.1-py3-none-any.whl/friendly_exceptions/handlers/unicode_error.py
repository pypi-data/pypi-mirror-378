"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è UnicodeError
UnicodeError handler
"""

from typing import Optional, Any
from .base import BaseHandler


class UnicodeErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è UnicodeError - –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ Unicode
    Handler for UnicodeError - Unicode encoding errors"""
    
    def explain(self, exception: UnicodeError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç UnicodeError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        Explains UnicodeError in simple terms
        
        Args:
            exception: UnicodeError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è / UnicodeError to explain
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ / Traceback object
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ / Human-readable explanation
        """
        error_message = str(exception)
        
        if self._get_language() == "ru":
            explanation = f"üî§ –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ Unicode: {error_message}"
        else:
            explanation = f"üî§ Unicode encoding error: {error_message}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if "UnicodeDecodeError" in str(type(exception)):
            explanation = self._explain_decode_error(exception)
        elif "UnicodeEncodeError" in str(type(exception)):
            explanation = self._explain_encode_error(exception)
        elif "UnicodeTranslateError" in str(type(exception)):
            explanation = self._explain_translate_error(exception)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
        if hasattr(exception, 'start') and hasattr(exception, 'end'):
            start, end = exception.start, exception.end
            if self._get_language() == "ru":
                explanation += f"\nüìç –ü–æ–∑–∏—Ü–∏—è –æ—à–∏–±–∫–∏: —Å–∏–º–≤–æ–ª—ã {start}-{end}"
            else:
                explanation += f"\nüìç Error position: characters {start}-{end}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            if self._get_language() == "ru":
                explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            else:
                explanation += "\n\nüîß How to fix:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _explain_decode_error(self, exception: UnicodeError) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è / Explains decode error"""
        if self._get_language() == "ru":
            return "üì• –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –±–∞–π—Ç—ã –≤ —Ç–µ–∫—Å—Ç Unicode"
        else:
            return "üì• Decode error: could not convert bytes to Unicode text"
    
    def _explain_encode_error(self, exception: UnicodeError) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è / Explains encode error"""
        if self._get_language() == "ru":
            return "üì§ –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç Unicode –≤ –±–∞–π—Ç—ã"
        else:
            return "üì§ Encode error: could not convert Unicode text to bytes"
    
    def _explain_translate_error(self, exception: UnicodeError) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ / Explains translate error"""
        if self._get_language() == "ru":
            return "üîÑ –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã Unicode"
        else:
            return "üîÑ Translate error: could not convert Unicode characters"
    
    def get_suggestions(self, exception: UnicodeError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é UnicodeError / Returns suggestions for fixing UnicodeError"""
        if "UnicodeDecodeError" in str(type(exception)):
            if self._get_language() == "ru":
                return [
                    "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: encoding='utf-8'",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ errors='ignore' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ errors='replace' –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ",
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: 'latin-1', 'cp1251', 'iso-8859-1'"
                ]
            else:
                return [
                    "Specify the correct encoding when opening the file: encoding='utf-8'",
                    "Use errors='ignore' to skip problematic characters",
                    "Use errors='replace' to replace problematic characters",
                    "Check that the file is actually in the specified encoding",
                    "Try other encodings: 'latin-1', 'cp1251', 'iso-8859-1'"
                ]
        elif "UnicodeEncodeError" in str(type(exception)):
            if self._get_language() == "ru":
                return [
                    "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: encoding='utf-8'",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ errors='ignore' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ errors='replace' –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ü–µ–ª–µ–≤–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π",
                    "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ UTF-8 –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"
                ]
            else:
                return [
                    "Specify the correct encoding when writing the file: encoding='utf-8'",
                    "Use errors='ignore' to skip problematic characters",
                    "Use errors='replace' to replace problematic characters",
                    "Check that all characters are supported by the target encoding",
                    "Consider using UTF-8 for maximum compatibility"
                ]
        else:
            if self._get_language() == "ru":
                return [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UTF-8 –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
                    "–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—à–∏–±–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ errors"
                ]
            else:
                return [
                    "Check the encoding of input data",
                    "Make sure the correct encoding is used",
                    "Use UTF-8 for maximum compatibility",
                    "Handle encoding errors with the errors parameter"
                ]
