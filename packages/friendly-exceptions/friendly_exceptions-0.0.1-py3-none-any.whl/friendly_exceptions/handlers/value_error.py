"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ValueError
ValueError handler
"""

from typing import Optional, Any
from .base import BaseHandler


class ValueErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ValueError - –æ—à–∏–±–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
    Handler for ValueError - value errors"""
    
    def explain(self, exception: ValueError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç ValueError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        Explains ValueError in simple terms
        
        Args:
            exception: ValueError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è / ValueError to explain
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ / Traceback object
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ / Human-readable explanation
        """
        error_message = str(exception)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        context = self.get_context_info(traceback_obj)
        locals_dict = context.get('locals', {})
        
        if self._get_language() == "ru":
            explanation = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è: {error_message}"
        else:
            explanation = f"‚ö†Ô∏è Value error: {error_message}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
        if "invalid literal" in error_message:
            explanation = self._explain_invalid_literal(error_message, locals_dict)
        elif "could not convert" in error_message:
            explanation = self._explain_conversion_error(error_message, locals_dict)
        elif "invalid format" in error_message:
            explanation = self._explain_format_error(error_message, locals_dict)
        elif "not enough values" in error_message:
            explanation = self._explain_unpacking_error(error_message, locals_dict)
        elif "too many values" in error_message:
            explanation = self._explain_unpacking_error(error_message, locals_dict)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            if self._get_language() == "ru":
                explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            else:
                explanation += "\n\nüîß How to fix:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _explain_invalid_literal(self, error_message: str, locals_dict: dict) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ª–∏—Ç–µ—Ä–∞–ª–∞ / Explains invalid literal errors"""
        if self._get_language() == "ru":
            return "üî¢ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞."
        else:
            return "üî¢ Could not convert string to number. Check the number format."
    
    def _explain_conversion_error(self, error_message: str, locals_dict: dict) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è / Explains conversion errors"""
        if self._get_language() == "ru":
            return "üîÑ –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –Ω—É–∂–Ω—ã–π —Ç–∏–ø."
        else:
            return "üîÑ Type conversion error. Make sure the value can be converted to the target type."
    
    def _explain_format_error(self, error_message: str, locals_dict: dict) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ / Explains format errors"""
        if self._get_language() == "ru":
            return "üìù –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        else:
            return "üìù Invalid string format. Check the formatting syntax."
    
    def _explain_unpacking_error(self, error_message: str, locals_dict: dict) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ / Explains unpacking errors"""
        if self._get_language() == "ru":
            return "üì¶ –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–Ω–∞—á–µ–Ω–∏–π."
        else:
            return "üì¶ Unpacking error. Number of variables doesn't match number of values."
    
    def get_suggestions(self, exception: ValueError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é ValueError / Returns suggestions for fixing ValueError"""
        error_message = str(exception)
        
        if "invalid literal" in error_message:
            if self._get_language() == "ru":
                return [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫—É",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ —Å–∏–º–≤–æ–ª–æ–≤",
                    "–î–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É, –∞ –Ω–µ –∑–∞–ø—è—Ç—É—é",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ int() –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, float() –¥–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö"
                ]
            else:
                return [
                    "Check that the string contains only digits and a dot",
                    "Make sure there are no extra spaces or characters",
                    "For decimal numbers use a dot, not a comma",
                    "Use int() for integers, float() for decimals"
                ]
        elif "could not convert" in error_message:
            if self._get_language() == "ru":
                return [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –Ω—É–∂–Ω—ã–π —Ç–∏–ø",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ isinstance() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –ø–µ—Ä–µ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º",
                    "–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é try-except",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"
                ]
            else:
                return [
                    "Check that the value can be converted to the target type",
                    "Use isinstance() to check type before conversion",
                    "Handle the exception with try-except",
                    "Check the conversion function documentation"
                ]
        elif "invalid format" in error_message:
            if self._get_language() == "ru":
                return [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ f-—Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å—Ç—Ä–æ–∫"
                ]
            else:
                return [
                    "Check the string formatting syntax",
                    "Make sure the number of placeholders matches the arguments",
                    "Use f-strings for simple formatting",
                    "Check string formatting documentation"
                ]
        else:
            if self._get_language() == "ru":
                return [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"
                ]
            else:
                return [
                    "Check the correctness of input data",
                    "Make sure the value is within the valid range",
                    "Use data validation before processing",
                    "Check the documentation for the function you're using"
                ]