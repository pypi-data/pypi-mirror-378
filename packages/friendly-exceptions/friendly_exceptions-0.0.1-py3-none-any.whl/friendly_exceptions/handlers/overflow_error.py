"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è OverflowError
OverflowError handler
"""

from typing import Optional, Any
from .base import BaseHandler


class OverflowErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è OverflowError - –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
    Handler for OverflowError - overflow errors"""
    
    def explain(self, exception: OverflowError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç OverflowError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        Explains OverflowError in simple terms
        
        Args:
            exception: OverflowError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è / OverflowError to explain
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ / Traceback object
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ / Human-readable explanation
        """
        error_message = str(exception)
        
        if self._get_language() == "ru":
            explanation = f"üî¢ –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è: {error_message}"
        else:
            explanation = f"üî¢ Overflow error: {error_message}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = self.get_context_info(traceback_obj)
        locals_dict = context.get('locals', {})
        
        # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        numbers_info = self._analyze_numbers_context(locals_dict)
        if numbers_info:
            if self._get_language() == "ru":
                explanation += f"\nüìä –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —á–∏—Å–ª–∞: {numbers_info}"
            else:
                explanation += f"\nüìä Problematic numbers: {numbers_info}"
        
        # –û–±—ä—è—Å–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º—É
        if self._get_language() == "ru":
            explanation += "\nüí° –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        else:
            explanation += "\nüí° The calculation result exceeds the maximum allowed value"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            if self._get_language() == "ru":
                explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            else:
                explanation += "\n\nüîß How to fix:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _analyze_numbers_context(self, locals_dict: dict) -> Optional[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∏—Å–µ–ª / Analyzes numbers context"""
        numbers = []
        
        for var_name, var_value in locals_dict.items():
            if isinstance(var_value, (int, float)):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
                if abs(var_value) > 1e10:
                    numbers.append(f"{var_name}={var_value}")
        
        return ", ".join(numbers) if numbers else None
    
    def get_suggestions(self, exception: OverflowError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é OverflowError / Returns suggestions for fixing OverflowError"""
        if self._get_language() == "ru":
            return [
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å decimal –¥–ª—è —Ç–æ—á–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å fractions –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥—Ä–æ–±—è–º–∏",
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ numpy –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏",
                "–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ try-except –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è"
            ]
        else:
            return [
                "Use the decimal module for precise calculations with large numbers",
                "Check input data for reasonableness",
                "Use the fractions module for working with fractions",
                "Consider using numpy for working with large numbers",
                "Add overflow checks before calculations",
                "Use try-except to handle overflow"
            ]
