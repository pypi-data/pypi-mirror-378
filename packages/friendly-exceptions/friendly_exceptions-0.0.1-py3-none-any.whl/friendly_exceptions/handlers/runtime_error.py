"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è RuntimeError
RuntimeError handler
"""

from typing import Optional, Any
from .base import BaseHandler


class RuntimeErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è RuntimeError - –æ—à–∏–±–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    Handler for RuntimeError - runtime errors"""
    
    def explain(self, exception: RuntimeError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç RuntimeError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        Explains RuntimeError in simple terms
        
        Args:
            exception: RuntimeError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è / RuntimeError to explain
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ / Traceback object
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ / Human-readable explanation
        """
        error_message = str(exception)
        
        if self._get_language() == "ru":
            explanation = f"‚ö° –û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {error_message}"
        else:
            explanation = f"‚ö° Runtime error: {error_message}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = self.get_context_info(traceback_obj)
        locals_dict = context.get('locals', {})
        
        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        state_info = self._analyze_program_state(locals_dict)
        if state_info:
            if self._get_language() == "ru":
                explanation += f"\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {state_info}"
            else:
                explanation += f"\nüìä Program state: {state_info}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if "maximum recursion depth exceeded" in error_message.lower():
            explanation = self._explain_recursion_depth(error_message)
        elif "cannot be used in a constant expression" in error_message.lower():
            explanation = self._explain_constant_expression(error_message)
        elif "generator didn't stop" in error_message.lower():
            explanation = self._explain_generator_error(error_message)
        elif "cannot be used in a constant expression" in error_message.lower():
            explanation = self._explain_constant_expression(error_message)
        
        # –û–±—ä—è—Å–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º—É
        if self._get_language() == "ru":
            explanation += "\nüí° –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"
        else:
            explanation += "\nüí° An error occurred during program execution"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        if self._get_language() == "ru":
            explanation += "\n\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.python.org/3/library/exceptions.html#RuntimeError"
        else:
            explanation += "\n\nüìö Documentation: https://docs.python.org/3/library/exceptions.html#RuntimeError"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            if self._get_language() == "ru":
                explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            else:
                explanation += "\n\nüîß How to fix:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _analyze_program_state(self, locals_dict: dict) -> Optional[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã / Analyzes program state"""
        state_info = []
        
        for var_name, var_value in locals_dict.items():
            if not var_name.startswith('__'):
                if isinstance(var_value, (int, float, str, bool)):
                    state_info.append(f"{var_name}={var_value}")
                elif hasattr(var_value, '__len__'):
                    state_info.append(f"{var_name}(len={len(var_value)})")
        
        return ", ".join(state_info[:3]) if state_info else None
    
    def _explain_recursion_depth(self, error_message: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É –≥–ª—É–±–∏–Ω—ã —Ä–µ–∫—É—Ä—Å–∏–∏ / Explains recursion depth error"""
        if self._get_language() == "ru":
            return "üîÑ –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏. –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç —Å–∞–º–∞ —Å–µ–±—è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑"
        else:
            return "üîÑ Maximum recursion depth exceeded. Function calls itself too many times"
    
    def _explain_constant_expression(self, error_message: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è / Explains constant expression error"""
        if self._get_language() == "ru":
            return "üìù –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π"
        else:
            return "üìù Cannot be used in a constant expression. Variable must be a constant"
    
    def _explain_generator_error(self, error_message: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ / Explains generator error"""
        if self._get_language() == "ru":
            return "üîÑ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è. –í–æ–∑–º–æ–∂–Ω–æ, –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ"
        else:
            return "üîÑ Generator didn't stop. Possible infinite loop in generator"
    
    def get_suggestions(self, exception: RuntimeError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é RuntimeError / Returns suggestions for fixing RuntimeError"""
        error_message = str(exception)
        
        if "maximum recursion depth exceeded" in error_message.lower():
            if self._get_language() == "ru":
                return [
                    "–î–æ–±–∞–≤—å—Ç–µ –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∫—É—Ä—Å–∏–∏",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤–º–µ—Å—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–∏",
                    "–£–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç —Ä–µ–∫—É—Ä—Å–∏–∏: sys.setrecursionlimit(2000)",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ –±–∞–∑–æ–≤–æ–º—É —Å–ª—É—á–∞—é"
                ]
            else:
                return [
                    "Add a base case to stop recursion",
                    "Use iterative approach instead of recursion",
                    "Increase recursion limit: sys.setrecursionlimit(2000)",
                    "Check that recursive call approaches the base case"
                ]
        else:
            if self._get_language() == "ru":
                return [
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –º–µ—Å—Ç–µ –æ—à–∏–±–∫–∏",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–ª–∞–¥–∫—É –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
                ]
            else:
                return [
                    "Check program logic at the error location",
                    "Make sure all variables are defined",
                    "Check input data for correctness",
                    "Use debugging for step-by-step execution",
                    "Check that there are no infinite loops",
                    "Make sure resources are properly released"
                ]
