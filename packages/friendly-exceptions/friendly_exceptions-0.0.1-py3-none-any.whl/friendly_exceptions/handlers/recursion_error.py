"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è RecursionError
RecursionError handler
"""

from typing import Optional, Any
from .base import BaseHandler


class RecursionErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è RecursionError - –æ—à–∏–±–æ–∫ —Ä–µ–∫—É—Ä—Å–∏–∏
    Handler for RecursionError - recursion errors"""
    
    def explain(self, exception: RecursionError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç RecursionError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        Explains RecursionError in simple terms
        
        Args:
            exception: RecursionError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è / RecursionError to explain
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ / Traceback object
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ / Human-readable explanation
        """
        error_message = str(exception)
        
        if self._get_language() == "ru":
            explanation = f"üîÑ –û—à–∏–±–∫–∞ —Ä–µ–∫—É—Ä—Å–∏–∏: {error_message}"
        else:
            explanation = f"üîÑ Recursion error: {error_message}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = self.get_context_info(traceback_obj)
        locals_dict = context.get('locals', {})
        
        # –ò—â–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        function_info = self._find_recursive_function(locals_dict)
        if function_info:
            if self._get_language() == "ru":
                explanation += f"\nüîç –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {function_info}"
            else:
                explanation += f"\nüîç Recursive function: {function_info}"
        
        # –û–±—ä—è—Å–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º—É
        if self._get_language() == "ru":
            explanation += "\nüí° –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç —Å–∞–º–∞ —Å–µ–±—è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑"
        else:
            explanation += "\nüí° The function calls itself too many times"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–µ–∫–µ
        if self._get_language() == "ru":
            explanation += "\nüìö –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω (–æ–±—ã—á–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω ~1000 –≤—ã–∑–æ–≤–æ–≤)"
        else:
            explanation += "\nüìö Call stack is overflowed (usually limited to ~1000 calls)"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            if self._get_language() == "ru":
                explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            else:
                explanation += "\n\nüîß How to fix:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _find_recursive_function(self, locals_dict: dict) -> Optional[str]:
        """–ò—â–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ / Finds recursive function in context"""
        # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        for var_name, var_value in locals_dict.items():
            if callable(var_value):
                return var_name
        return None
    
    def get_suggestions(self, exception: RecursionError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é RecursionError / Returns suggestions for fixing RecursionError"""
        if self._get_language() == "ru":
            return [
                "–î–æ–±–∞–≤—å—Ç–µ –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∫—É—Ä—Å–∏–∏",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ –±–∞–∑–æ–≤–æ–º—É —Å–ª—É—á–∞—é",
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–∏",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sys.setrecursionlimit() –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)",
                "–î–æ–±–∞–≤—å—Ç–µ —Å—á–µ—Ç—á–∏–∫ –≥–ª—É–±–∏–Ω—ã —Ä–µ–∫—É—Ä—Å–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏"
            ]
        else:
            return [
                "Add a base case to stop the recursion",
                "Check that the recursive call approaches the base case",
                "Consider using an iterative approach instead of recursion",
                "Use sys.setrecursionlimit() to increase the limit (carefully!)",
                "Add a recursion depth counter for debugging",
                "Check that there's no infinite recursion"
            ]
