"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è FileNotFoundError
FileNotFoundError handler
"""

import os
from typing import Optional, Any
from .base import BaseHandler


class FileNotFoundErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è FileNotFoundError - –æ—à–∏–±–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–æ–≤
    Handler for FileNotFoundError - file not found errors"""
    
    def explain(self, exception: FileNotFoundError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç FileNotFoundError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        Explains FileNotFoundError in simple terms
        
        Args:
            exception: FileNotFoundError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è / FileNotFoundError to explain
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ / Traceback object
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ / Human-readable explanation
        """
        error_message = str(exception)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        context = self.get_context_info(traceback_obj)
        locals_dict = context.get('locals', {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        filename = self._extract_filename(error_message)
        
        if self._get_language() == "ru":
            explanation = f"üìÅ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}"
        else:
            explanation = f"üìÅ File not found: {filename}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if filename:
            current_dir_files = self._get_current_directory_files()
            similar_files = self._find_similar_files(filename, current_dir_files)
            
            if similar_files:
                if self._get_language() == "ru":
                    explanation += f"\nü§î –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: {', '.join(similar_files[:3])}"
                else:
                    explanation += f"\nü§î Perhaps you meant: {', '.join(similar_files[:3])}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
            if not os.path.exists(filename):
                suggestions = self._get_file_suggestions(filename)
                if suggestions:
                    if self._get_language() == "ru":
                        explanation += f"\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:"
                    else:
                        explanation += f"\nüí° Possible solutions:"
                    for suggestion in suggestions:
                        explanation += f"\n  ‚Ä¢ {suggestion}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            if self._get_language() == "ru":
                explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            else:
                explanation += "\n\nüîß How to fix:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _extract_filename(self, error_message: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ / Extracts filename from error message"""
        # "No such file or directory: 'filename'"
        if "'" in error_message:
            parts = error_message.split("'")
            if len(parts) >= 2:
                return parts[1]
        return "unknown"
    
    def _get_current_directory_files(self) -> list[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ / Gets list of files in current directory"""
        try:
            return os.listdir(".")
        except Exception:
            return []
    
    def _find_similar_files(self, target_filename: str, files: list[str]) -> list[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ —Ñ–∞–π–ª—ã / Finds similar files"""
        import difflib
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã (–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
        file_list = [f for f in files if os.path.isfile(f)]
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        similar = difflib.get_close_matches(target_filename, file_list, n=3, cutoff=0.6)
        
        return similar
    
    def _get_file_suggestions(self, filename: str) -> list[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ñ–∞–π–ª—É / Gets file suggestions"""
        suggestions = []
        
        if self._get_language() == "ru":
            if not filename.startswith("/") and not ":" in filename:
                suggestions.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
                suggestions.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
            
            if filename.endswith(".py"):
                suggestions.append("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥—É–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install module_name")
            
            suggestions.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É")
            suggestions.append("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –±—ã–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω")
        else:
            if not filename.startswith("/") and not ":" in filename:
                suggestions.append("Check that the file is in the correct directory")
                suggestions.append("Use absolute path to the file")
            
            if filename.endswith(".py"):
                suggestions.append("Make sure the module is installed: pip install module_name")
            
            suggestions.append("Check file permissions")
            suggestions.append("Make sure the file wasn't moved or deleted")
        
        return suggestions
    
    def get_suggestions(self, exception: FileNotFoundError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é FileNotFoundError / Returns suggestions for fixing FileNotFoundError"""
        if self._get_language() == "ru":
            return [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: os.path.exists('filename')",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –≤–º–µ—Å—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ",
                "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –±—ã–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω"
            ]
        else:
            return [
                "Check the file path is correct",
                "Make sure the file exists: os.path.exists('filename')",
                "Check file and directory permissions",
                "Use absolute path instead of relative",
                "Create the file if it should exist",
                "Check that the file wasn't moved or renamed"
            ]