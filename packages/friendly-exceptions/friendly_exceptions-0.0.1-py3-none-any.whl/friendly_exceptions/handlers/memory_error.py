"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è MemoryError
MemoryError handler
"""

from typing import Optional, Any
from .base import BaseHandler


class MemoryErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è MemoryError - –æ—à–∏–±–æ–∫ –ø–∞–º—è—Ç–∏
    Handler for MemoryError - memory errors"""
    
    def explain(self, exception: MemoryError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç MemoryError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        Explains MemoryError in simple terms
        
        Args:
            exception: MemoryError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è / MemoryError to explain
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ / Traceback object
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ / Human-readable explanation
        """
        error_message = str(exception)
        
        if self._get_language() == "ru":
            explanation = f"üíæ –û—à–∏–±–∫–∞ –ø–∞–º—è—Ç–∏: {error_message}"
        else:
            explanation = f"üíæ Memory error: {error_message}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = self.get_context_info(traceback_obj)
        locals_dict = context.get('locals', {})
        
        # –ò—â–µ–º –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        large_objects = self._find_large_objects(locals_dict)
        if large_objects:
            if self._get_language() == "ru":
                explanation += f"\nüìä –ë–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã: {large_objects}"
            else:
                explanation += f"\nüìä Large objects: {large_objects}"
        
        # –û–±—ä—è—Å–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º—É
        if self._get_language() == "ru":
            explanation += "\nüí° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"
        else:
            explanation += "\nüí° Not enough RAM to perform the operation"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            if self._get_language() == "ru":
                explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            else:
                explanation += "\n\nüîß How to fix:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _find_large_objects(self, locals_dict: dict) -> Optional[str]:
        """–ò—â–µ—Ç –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ / Finds large objects in context"""
        large_objects = []
        
        for var_name, var_value in locals_dict.items():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞
                size = len(var_value) if hasattr(var_value, '__len__') else 0
                if size > 1000000:  # –ë–æ–ª—å—à–µ 1 –º–∏–ª–ª–∏–æ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    large_objects.append(f"{var_name}({size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
            except:
                pass
        
        return ", ".join(large_objects) if large_objects else None
    
    def get_suggestions(self, exception: MemoryError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é MemoryError / Returns suggestions for fixing MemoryError"""
        if self._get_language() == "ru":
            return [
                "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å—Ç—è–º (chunking)",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
                "–£–¥–∞–ª—è–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: del variable_name",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ numpy –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏",
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
                "–£–≤–µ–ª–∏—á—å—Ç–µ –æ–±—ä–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞: gc.collect()"
            ]
        else:
            return [
                "Process data in chunks",
                "Use generators instead of lists for large data",
                "Delete unnecessary variables: del variable_name",
                "Use numpy for efficient array operations",
                "Consider using a database for large data",
                "Increase RAM capacity",
                "Use garbage collector: gc.collect()"
            ]
