"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ZeroDivisionError
ZeroDivisionError handler
"""

from typing import Optional, Any
from .base import BaseHandler


class ZeroDivisionErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ZeroDivisionError - –æ—à–∏–±–æ–∫ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    Handler for ZeroDivisionError - division by zero errors"""
    
    def explain(self, exception: ZeroDivisionError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç ZeroDivisionError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        Explains ZeroDivisionError in simple terms
        
        Args:
            exception: ZeroDivisionError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è / ZeroDivisionError to explain
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ / Traceback object
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ / Human-readable explanation
        """
        error_message = str(exception)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        context = self.get_context_info(traceback_obj)
        locals_dict = context.get('locals', {})
        
        if self._get_language() == "ru":
            explanation = "üö´ –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"
        else:
            explanation = "üö´ Division by zero is not allowed"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        division_info = self._analyze_division_context(locals_dict)
        if division_info:
            if self._get_language() == "ru":
                explanation += f"\nüìä –í—ã –ø—ã—Ç–∞–ª–∏—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å {division_info['dividend']} –Ω–∞ {division_info['divisor']}"
            else:
                explanation += f"\nüìä You tried to divide {division_info['dividend']} by {division_info['divisor']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        if self._get_language() == "ru":
            explanation += "\nüßÆ –í –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
        else:
            explanation += "\nüßÆ In mathematics, division by zero is undefined"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            if self._get_language() == "ru":
                explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            else:
                explanation += "\n\nüîß How to fix:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _analyze_division_context(self, locals_dict: dict) -> Optional[dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–µ–ª–µ–Ω–∏—è / Analyzes division context"""
        # –ò—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –¥–µ–ª–µ–Ω–∏–µ–º
        for var_name, var_value in locals_dict.items():
            if isinstance(var_value, (int, float)) and var_value == 0:
                # –ò—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é-–¥–µ–ª–∏–º–æ–µ
                for other_var_name, other_var_value in locals_dict.items():
                    if (other_var_name != var_name and 
                        isinstance(other_var_value, (int, float)) and 
                        other_var_value != 0):
                        return {
                            'dividend': f"{other_var_name} ({other_var_value})",
                            'divisor': f"{var_name} ({var_value})"
                        }
        
        return None
    
    def get_suggestions(self, exception: ZeroDivisionError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é ZeroDivisionError / Returns suggestions for fixing ZeroDivisionError"""
        if self._get_language() == "ru":
            return [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ —Ä–∞–≤–µ–Ω –Ω—É–ª—é –ø–µ—Ä–µ–¥ –¥–µ–ª–µ–Ω–∏–µ–º",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—Å–ª–æ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É: if divisor != 0: result = dividend / divisor",
                "–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: try-except ZeroDivisionError",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ math.isclose() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–æ–ª—å —Å —É—á–µ—Ç–æ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ: dividend / divisor if divisor != 0 else 0"
            ]
        else:
            return [
                "Check that the divisor is not zero before dividing",
                "Use conditional check: if divisor != 0: result = dividend / divisor",
                "Handle the exception: try-except ZeroDivisionError",
                "Use math.isclose() to check for zero with tolerance",
                "Validate input data for correctness",
                "Use safe division: dividend / divisor if divisor != 0 else 0"
            ]