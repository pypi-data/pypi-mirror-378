"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è JSONDecodeError
JSONDecodeError handler
"""

import json
from typing import Optional, Any
from .base import BaseHandler


class JSONDecodeErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è JSONDecodeError - –æ—à–∏–±–æ–∫ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON
    Handler for JSONDecodeError - JSON decoding errors"""
    
    def explain(self, exception: json.JSONDecodeError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç JSONDecodeError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        Explains JSONDecodeError in simple terms
        
        Args:
            exception: JSONDecodeError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è / JSONDecodeError to explain
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ / Traceback object
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ / Human-readable explanation
        """
        error_message = str(exception)
        
        if self._get_language() == "ru":
            explanation = f"üìÑ –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {error_message}"
        else:
            explanation = f"üìÑ JSON decoding error: {error_message}"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –æ—à–∏–±–∫–∏
        if hasattr(exception, 'pos'):
            pos = exception.pos
            if self._get_language() == "ru":
                explanation += f"\nüìç –ü–æ–∑–∏—Ü–∏—è –æ—à–∏–±–∫–∏: —Å–∏–º–≤–æ–ª {pos}"
            else:
                explanation += f"\nüìç Error position: character {pos}"
        
        if hasattr(exception, 'lineno'):
            lineno = exception.lineno
            if self._get_language() == "ru":
                explanation += f"\nüìè –°—Ç—Ä–æ–∫–∞: {lineno}"
            else:
                explanation += f"\nüìè Line: {lineno}"
        
        if hasattr(exception, 'colno'):
            colno = exception.colno
            if self._get_language() == "ru":
                explanation += f"\nüìê –°—Ç–æ–ª–±–µ—Ü: {colno}"
            else:
                explanation += f"\nüìê Column: {colno}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if "Expecting" in error_message:
            explanation = self._explain_expecting_error(error_message)
        elif "Invalid" in error_message:
            explanation = self._explain_invalid_error(error_message)
        elif "Unterminated" in error_message:
            explanation = self._explain_unterminated_error(error_message)
        elif "Extra data" in error_message:
            explanation = self._explain_extra_data_error(error_message)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            if self._get_language() == "ru":
                explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            else:
                explanation += "\n\nüîß How to fix:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _explain_expecting_error(self, error_message: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É '–æ–∂–∏–¥–∞–µ—Ç—Å—è' / Explains 'expecting' error"""
        if self._get_language() == "ru":
            return "üîç JSON —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É. –û–∂–∏–¥–∞–µ—Ç—Å—è –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª"
        else:
            return "üîç JSON contains a syntax error. A different character is expected"
    
    def _explain_invalid_error(self, error_message: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É '–Ω–µ–≤–µ—Ä–Ω—ã–π' / Explains 'invalid' error"""
        if self._get_language() == "ru":
            return "‚ùå JSON —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É"
        else:
            return "‚ùå JSON contains an invalid character or structure"
    
    def _explain_unterminated_error(self, error_message: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É '–Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π' / Explains 'unterminated' error"""
        if self._get_language() == "ru":
            return "üîö JSON —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –∏–ª–∏ –∫–∞–≤—ã—á–∫–∞)"
        else:
            return "üîö JSON contains an unterminated structure (missing closing bracket or quote)"
    
    def _explain_extra_data_error(self, error_message: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É '–ª–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ' / Explains 'extra data' error"""
        if self._get_language() == "ru":
            return "‚ûï JSON —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"
        else:
            return "‚ûï JSON contains extra data after the end of the object"
    
    def get_suggestions(self, exception: json.JSONDecodeError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é JSONDecodeError / Returns suggestions for fixing JSONDecodeError"""
        if self._get_language() == "ru":
            return [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JSON –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–∫–æ–±–∫–∏ –∏ –∫–∞–≤—ã—á–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö –∑–∞–ø—è—Ç—ã—Ö",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSON –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å UTF-8)",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"
            ]
        else:
            return [
                "Check JSON syntax for validity",
                "Make sure all brackets and quotes are closed",
                "Check for extra commas",
                "Use a JSON validator to check",
                "Check file encoding (should be UTF-8)",
                "Make sure the data is actually in JSON format"
            ]
