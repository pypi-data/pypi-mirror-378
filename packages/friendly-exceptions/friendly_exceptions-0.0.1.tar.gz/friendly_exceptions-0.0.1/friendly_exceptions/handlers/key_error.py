"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è KeyError
KeyError handler
"""

from typing import Optional, Any
from .base import BaseHandler


class KeyErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è KeyError - –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–ª—é—á–∞–º —Å–ª–æ–≤–∞—Ä—è
    Handler for KeyError - errors accessing non-existent dictionary keys"""
    
    def explain(self, exception: KeyError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç KeyError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        
        Args:
            exception: KeyError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        """
        missing_key = str(exception)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        context = self.get_context_info(traceback_obj)
        locals_dict = context.get('locals', {})
        
        # –ò—â–µ–º —Å–ª–æ–≤–∞—Ä–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–∏—Å–∫–ª—é—á–∞—è —Å–ª—É–∂–µ–±–Ω—ã–µ)
        dicts_info = []
        for var_name, var_value in locals_dict.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Python
            if var_name.startswith('__') and var_name.endswith('__'):
                continue
            
            if isinstance(var_value, dict):
                dicts_info.append({
                    'name': var_name,
                    'keys': list(var_value.keys()),
                    'size': len(var_value)
                })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        if self._get_language() == "ru":
            explanation = f"üîë –°–ª–æ–≤–∞—Ä—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á '{missing_key}'"
        else:
            explanation = f"üîë Dictionary does not contain key '{missing_key}'"
        
        if dicts_info:
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
            most_likely_dict = None
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å–ª–æ–≤–∞—Ä–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∫–ª—é—á–∞–º–∏
            for dict_info in dicts_info:
                if missing_key in dict_info['keys']:
                    continue  # –ö–ª—é—á –µ—Å—Ç—å, —ç—Ç–æ –Ω–µ —Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ—Ö–æ–∂–∏–µ –∫–ª—é—á–∏
                similar_keys = self._find_similar_keys(missing_key, dict_info['keys'])
                if similar_keys:
                    most_likely_dict = dict_info
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∫–ª—é—á–∞–º–∏, –±–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Å–ª–æ–≤–∞—Ä—å
            if not most_likely_dict and dicts_info:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–±–æ–ª—å—à–∏–µ —Å–ª–æ–≤–∞—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ)
                dicts_info.sort(key=lambda x: x['size'], reverse=True)
                most_likely_dict = dicts_info[0]
            
            if most_likely_dict:
                if self._get_language() == "ru":
                    explanation += f"\nüìã –í —Å–ª–æ–≤–∞—Ä–µ '{most_likely_dict['name']}' –¥–æ—Å—Ç—É–ø–Ω—ã –∫–ª—é—á–∏: {most_likely_dict['keys']}"
                else:
                    explanation += f"\nüìã Dictionary '{most_likely_dict['name']}' contains keys: {most_likely_dict['keys']}"
                
                # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–ª—é—á–∏
                similar_keys = self._find_similar_keys(missing_key, most_likely_dict['keys'])
                if similar_keys:
                    if self._get_language() == "ru":
                        explanation += f"\nüí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: {similar_keys}"
                    else:
                        explanation += f"\nüí° Perhaps you meant: {similar_keys}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            if self._get_language() == "ru":
                explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            else:
                explanation += "\n\nüîß How to fix:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def get_suggestions(self, exception: KeyError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é KeyError / Returns suggestions for fixing KeyError"""
        if self._get_language() == "ru":
            return [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–ª—é—á–∞",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ .get() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: dict.get('key', default_value)",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–ª–æ–≤–∞—Ä—å –Ω–µ –ø—É—Å—Ç–æ–π: if dict: ...",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'key' in dict –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞"
            ]
        else:
            return [
                "Check the spelling of the key",
                "Make sure the key exists in the dictionary before accessing it",
                "Use .get() method for safe access: dict.get('key', default_value)",
                "Check that the dictionary is not empty: if dict: ...",
                "Use 'key' in dict to check if key exists"
            ]
    
    def _find_similar_keys(self, target_key: str, available_keys: list[str]) -> list[str]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∫–ª—é—á–∏, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π
        
        Args:
            target_key: –ò—Å–∫–æ–º—ã–π –∫–ª—é—á
            available_keys: –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –∫–ª—é—á–µ–π
        """
        similar = []
        target_lower = target_key.lower()
        
        for key in available_keys:
            key_lower = key.lower()
            
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Ä–∞–∑–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä)
            if key_lower == target_lower and key != target_key:
                similar.append(key)
            # –°–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª–µ–≤–æ–π –∫–ª—é—á
            elif target_lower in key_lower or key_lower in target_lower:
                similar.append(key)
            # –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–æ–≥–æ –∂–µ
            elif key_lower.startswith(target_lower[:3]) or target_lower.startswith(key_lower[:3]):
                similar.append(key)
        
        return similar[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –ø–æ—Ö–æ–∂–∏—Ö –∫–ª—é—á–∞
