"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è SyntaxError
SyntaxError handler
"""

from typing import Optional, Any
from .base import BaseHandler


class SyntaxErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è SyntaxError - –æ—à–∏–±–æ–∫ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    Handler for SyntaxError - syntax errors"""
    
    def explain(self, exception: SyntaxError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç SyntaxError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        Explains SyntaxError in simple terms
        
        Args:
            exception: SyntaxError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è / SyntaxError to explain
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ / Traceback object
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ / Human-readable explanation
        """
        error_message = str(exception)
        
        if self._get_language() == "ru":
            explanation = f"üìù –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {error_message}"
        else:
            explanation = f"üìù Syntax error: {error_message}"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –æ—à–∏–±–∫–∏
        if hasattr(exception, 'lineno') and exception.lineno:
            if self._get_language() == "ru":
                explanation += f"\nüìç –°—Ç—Ä–æ–∫–∞: {exception.lineno}"
            else:
                explanation += f"\nüìç Line: {exception.lineno}"
        
        if hasattr(exception, 'offset') and exception.offset:
            if self._get_language() == "ru":
                explanation += f"\nüìê –ü–æ–∑–∏—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–µ: {exception.offset}"
            else:
                explanation += f"\nüìê Position in line: {exception.offset}"
        
        if hasattr(exception, 'text') and exception.text:
            if self._get_language() == "ru":
                explanation += f"\nüìÑ –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {exception.text.strip()}"
            else:
                explanation += f"\nüìÑ Problematic line: {exception.text.strip()}"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
        if "invalid syntax" in error_message.lower():
            explanation = self._explain_invalid_syntax(error_message)
        elif "unexpected EOF" in error_message.lower():
            explanation = self._explain_unexpected_eof(error_message)
        elif "unexpected indent" in error_message.lower():
            explanation = self._explain_unexpected_indent(error_message)
        elif "unindent does not match" in error_message.lower():
            explanation = self._explain_unindent_mismatch(error_message)
        elif "invalid character" in error_message.lower():
            explanation = self._explain_invalid_character(error_message)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        if self._get_language() == "ru":
            explanation += "\n\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.python.org/3/reference/lexical_analysis.html"
        else:
            explanation += "\n\nüìö Documentation: https://docs.python.org/3/reference/lexical_analysis.html"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            if self._get_language() == "ru":
                explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            else:
                explanation += "\n\nüîß How to fix:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _explain_invalid_syntax(self, error_message: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É '–Ω–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å' / Explains 'invalid syntax' error"""
        if self._get_language() == "ru":
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"
        else:
            return "‚ùå Invalid Python syntax. Check the correctness of command writing"
    
    def _explain_unexpected_eof(self, error_message: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É '–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞' / Explains 'unexpected EOF' error"""
        if self._get_language() == "ru":
            return "üîö –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ —Å–∫–æ–±–∫–∞, –∫–∞–≤—ã—á–∫–∞ –∏–ª–∏ –±–ª–æ–∫ –∫–æ–¥–∞"
        else:
            return "üîö Unexpected end of file. Possibly unclosed bracket, quote, or code block"
    
    def _explain_unexpected_indent(self, error_message: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É '–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø' / Explains 'unexpected indent' error"""
        if self._get_language() == "ru":
            return "üìè –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç—Å—Ç—É–ø–æ–≤ –≤ –∫–æ–¥–µ"
        else:
            return "üìè Unexpected indent. Check the correctness of indentation in code"
    
    def _explain_unindent_mismatch(self, error_message: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É '–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤' / Explains 'unindent mismatch' error"""
        if self._get_language() == "ru":
            return "üìê –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤. –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –±–ª–æ–∫–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –æ—Ç—Å—Ç—É–ø"
        else:
            return "üìê Indent mismatch. All lines in a block must have the same indentation"
    
    def _explain_invalid_character(self, error_message: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É '–Ω–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª' / Explains 'invalid character' error"""
        if self._get_language() == "ru":
            return "üî§ –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª –≤ –∫–æ–¥–µ. –£–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"
        else:
            return "üî§ Invalid character in code. Remove or replace invalid characters"
    
    def get_suggestions(self, exception: SyntaxError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é SyntaxError / Returns suggestions for fixing SyntaxError"""
        if self._get_language() == "ru":
            return [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ Python",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–∫–æ–±–∫–∏ (), [], {} –∑–∞–∫—Ä—ã—Ç—ã",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç—Å—Ç—É–ø–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 4 –ø—Ä–æ–±–µ–ª–∞)",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–ª—é—á–µ–Ω—ã –≤ –∫–∞–≤—ã—á–∫–∏",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–≤–æ–µ—Ç–æ—á–∏–µ : —Å—Ç–æ–∏—Ç –ø–æ—Å–ª–µ if, for, while, def, class",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ IDE —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–µ—Ç —Å–º–µ—à–∏–≤–∞–Ω–∏—è —Ç–∞–±–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤"
            ]
        else:
            return [
                "Check the spelling of Python keywords",
                "Make sure all brackets (), [], {} are closed",
                "Check indentation correctness (use 4 spaces)",
                "Make sure all strings are enclosed in quotes",
                "Check that colon : is after if, for, while, def, class",
                "Use an IDE with syntax highlighting for checking",
                "Check that there's no mixing of tabs and spaces"
            ]
