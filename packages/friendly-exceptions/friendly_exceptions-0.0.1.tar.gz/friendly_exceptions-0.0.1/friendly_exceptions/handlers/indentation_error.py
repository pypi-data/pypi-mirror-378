"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è IndentationError
IndentationError handler
"""

from typing import Optional, Any
from .base import BaseHandler


class IndentationErrorHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è IndentationError - –æ—à–∏–±–æ–∫ –æ—Ç—Å—Ç—É–ø–æ–≤
    Handler for IndentationError - indentation errors"""
    
    def explain(self, exception: IndentationError, traceback_obj: Optional[Any] = None) -> str:
        """
        –û–±—ä—è—Å–Ω—è–µ—Ç IndentationError –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        Explains IndentationError in simple terms
        
        Args:
            exception: IndentationError –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è / IndentationError to explain
            traceback_obj: –û–±—ä–µ–∫—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ / Traceback object
            
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ / Human-readable explanation
        """
        error_message = str(exception)
        
        if self._get_language() == "ru":
            explanation = f"üìè –û—à–∏–±–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤: {error_message}"
        else:
            explanation = f"üìè Indentation error: {error_message}"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ –æ—à–∏–±–∫–∏
        if hasattr(exception, 'lineno') and exception.lineno:
            if self._get_language() == "ru":
                explanation += f"\nüìç –°—Ç—Ä–æ–∫–∞: {exception.lineno}"
            else:
                explanation += f"\nüìç Line: {exception.lineno}"
        
        if hasattr(exception, 'text') and exception.text:
            if self._get_language() == "ru":
                explanation += f"\nüìÑ –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: '{exception.text.strip()}'"
            else:
                explanation += f"\nüìÑ Problematic line: '{exception.text.strip()}'"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –æ—Ç—Å—Ç—É–ø–æ–≤
        if "unexpected indent" in error_message.lower():
            explanation = self._explain_unexpected_indent(error_message)
        elif "unindent does not match" in error_message.lower():
            explanation = self._explain_unindent_mismatch(error_message)
        elif "expected an indented block" in error_message.lower():
            explanation = self._explain_expected_indented_block(error_message)
        
        # –û–±—ä—è—Å–Ω—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –æ—Ç—Å—Ç—É–ø–æ–≤ –≤ Python
        if self._get_language() == "ru":
            explanation += "\n\nüí° –í Python –æ—Ç—Å—Ç—É–ø—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–¥–∞ (–±–ª–æ–∫–∏ if, for, while, def, class)"
        else:
            explanation += "\n\nüí° In Python, indentation defines code structure (if, for, while, def, class blocks)"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        if self._get_language() == "ru":
            explanation += "\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.python.org/3/reference/lexical_analysis.html#indentation"
        else:
            explanation += "\nüìö Documentation: https://docs.python.org/3/reference/lexical_analysis.html#indentation"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions = self.get_suggestions(exception)
        if suggestions:
            if self._get_language() == "ru":
                explanation += "\n\nüîß –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:"
            else:
                explanation += "\n\nüîß How to fix:"
            for i, suggestion in enumerate(suggestions, 1):
                explanation += f"\n{i}. {suggestion}"
        
        return explanation
    
    def _explain_unexpected_indent(self, error_message: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É '–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø' / Explains 'unexpected indent' error"""
        if self._get_language() == "ru":
            return "üìè –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø. –°—Ç—Ä–æ–∫–∞ –∏–º–µ–µ—Ç –æ—Ç—Å—Ç—É–ø, –Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–∞ –µ–≥–æ –∏–º–µ—Ç—å"
        else:
            return "üìè Unexpected indent. Line has indentation but shouldn't"
    
    def _explain_unindent_mismatch(self, error_message: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É '–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤' / Explains 'unindent mismatch' error"""
        if self._get_language() == "ru":
            return "üìê –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤. –û—Ç—Å—Ç—É–ø –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—Ä–æ–≤–Ω—é"
        else:
            return "üìê Indent mismatch. Indentation doesn't match previous level"
    
    def _explain_expected_indented_block(self, error_message: str) -> str:
        """–û–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É '–æ–∂–∏–¥–∞–µ—Ç—Å—è –±–ª–æ–∫ —Å –æ—Ç—Å—Ç—É–ø–æ–º' / Explains 'expected indented block' error"""
        if self._get_language() == "ru":
            return "üì¶ –û–∂–∏–¥–∞–µ—Ç—Å—è –±–ª–æ–∫ –∫–æ–¥–∞ —Å –æ—Ç—Å—Ç—É–ø–æ–º –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è (:)"
        else:
            return "üì¶ Expected indented block after colon (:)"
    
    def get_suggestions(self, exception: IndentationError) -> list[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é IndentationError / Returns suggestions for fixing IndentationError"""
        if self._get_language() == "ru":
            return [
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 4 –ø—Ä–æ–±–µ–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Ç—Å—Ç—É–ø–∞",
                "–ù–µ —Å–º–µ—à–∏–≤–∞–π—Ç–µ —Ç–∞–±—ã –∏ –ø—Ä–æ–±–µ–ª—ã - –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –±–ª–æ–∫–µ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –æ—Ç—Å—Ç—É–ø",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è (:) –µ—Å—Ç—å –æ—Ç—Å—Ç—É–ø",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ IDE —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–∞",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'python -m py_compile file.py' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"
            ]
        else:
            return [
                "Use 4 spaces for each indentation level",
                "Don't mix tabs and spaces - choose one option",
                "Check that all lines in a block have the same indentation",
                "Make sure there's indentation after colon (:)",
                "Use an IDE with automatic code formatting",
                "Check that there are no extra spaces at the beginning of the line",
                "Use 'python -m py_compile file.py' command to check syntax"
            ]
