#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è friendly_exceptions
Tests for friendly_exceptions core module
"""

import pytest
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from friendly_exceptions.core import (
    set_language,
    get_language,
    explain_exception,
    FriendlyException
)


class TestLanguageSwitching:
    """–¢–µ—Å—Ç—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤"""
    
    def test_set_language_valid(self):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–π
        set_language("ru")
        assert get_language() == "ru"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        set_language("en")
        assert get_language() == "en"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
        set_language("RU")
        assert get_language() == "ru"
        
        set_language("EN")
        assert get_language() == "en"
    
    def test_set_language_invalid(self):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
        original_language = get_language()
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —è–∑—ã–∫
        set_language("invalid")
        
        # –Ø–∑—ã–∫ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –ø—Ä–µ–∂–Ω–∏–º
        assert get_language() == original_language
    
    def test_get_language(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞"""
        language = get_language()
        assert language in ["ru", "en"]


class TestExplainException:
    """–¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ explain_exception"""
    
    def test_explain_attribute_error(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è AttributeError"""
        exception = AttributeError("'Test' object has no attribute 'nmae'")
        result = explain_exception(exception)
        
        assert isinstance(result, str)
        assert len(result) > 0
        assert "üîç" in result
    
    def test_explain_key_error(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è KeyError"""
        exception = KeyError("user_id")
        result = explain_exception(exception)
        
        assert isinstance(result, str)
        assert len(result) > 0
        assert "üîë" in result
    
    def test_explain_unknown_error(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –æ—à–∏–±–∫–∏"""
        class CustomError(Exception):
            pass
        
        exception = CustomError("Custom error message")
        result = explain_exception(exception)
        
        assert isinstance(result, str)
        assert len(result) > 0
        assert "‚ùì" in result


class TestFriendlyException:
    """–¢–µ—Å—Ç—ã –∫–ª–∞—Å—Å–∞ FriendlyException"""
    
    def test_friendly_exception_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è FriendlyException"""
        original = AttributeError("test")
        friendly = FriendlyException(original, "Friendly message")
        
        assert friendly.original_exception == original
        assert friendly.friendly_message == "Friendly message"
        assert str(friendly) == "Friendly message"
    
    def test_friendly_exception_inheritance(self):
        """–¢–µ—Å—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è FriendlyException"""
        original = ValueError("test")
        friendly = FriendlyException(original, "Friendly message")
        
        assert isinstance(friendly, Exception)
        assert isinstance(friendly, FriendlyException)


if __name__ == "__main__":
    pytest.main([__file__])
