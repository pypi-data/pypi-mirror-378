"""
–¢–µ—Å—Ç—ã –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ friendly_exceptions
"""

import pytest
import sys
from io import StringIO
from contextlib import redirect_stdout

from friendly_exceptions import explain, explain_exception, set_global_handler
from friendly_exceptions.handlers import (
    KeyErrorHandler,
    ValueErrorHandler,
    TypeErrorHandler,
    AttributeErrorHandler,
    IndexErrorHandler,
    FileNotFoundErrorHandler,
    ImportErrorHandler,
    ZeroDivisionErrorHandler
)


class TestKeyErrorHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è KeyErrorHandler"""
    
    def test_explain_key_error(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è KeyError"""
        handler = KeyErrorHandler()
        error = KeyError('user_id')
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
        class MockFrame:
            def __init__(self):
                self.f_locals = {'user_data': {'name': '–ò–≤–∞–Ω', 'age': 25}}
                self.f_code = type('Code', (), {'co_filename': 'test.py', 'co_name': 'test_func'})()
                self.tb_lineno = 10
        
        class MockTraceback:
            def __init__(self):
                self.tb_frame = MockFrame()
                self.tb_next = None
        
        traceback_obj = MockTraceback()
        result = handler.explain(error, traceback_obj)
        
        assert "–°–ª–æ–≤–∞—Ä—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á 'user_id'" in result
        assert "user_data" in result
        assert "name" in result
        assert "age" in result
    
    def test_find_similar_keys(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–ª—é—á–µ–π"""
        handler = KeyErrorHandler()
        available_keys = ['name', 'age', 'email', 'phone']
        
        # –¢–µ—Å—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (—Ä–∞–∑–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä)
        similar = handler._find_similar_keys('NAME', available_keys)
        assert 'name' in similar
        
        # –¢–µ—Å—Ç —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        similar = handler._find_similar_keys('user', available_keys)
        assert len(similar) == 0  # –ù–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö –∫–ª—é—á–µ–π
        
        # –¢–µ—Å—Ç —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∫–ª—é—á–∞–º–∏
        similar = handler._find_similar_keys('mail', available_keys)
        assert 'email' in similar


class TestValueErrorHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è ValueErrorHandler"""
    
    def test_explain_int_conversion_error(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ int"""
        handler = ValueErrorHandler()
        error = ValueError("invalid literal for int() with base 10: 'abc'")
        
        result = handler.explain(error, None)
        
        assert "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å 'abc' –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ" in result
        assert "üî¢" in result
    
    def test_explain_float_conversion_error(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ float"""
        handler = ValueErrorHandler()
        error = ValueError("could not convert string to float: 'xyz'")
        
        result = handler.explain(error, None)
        
        assert "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É 'xyz' –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π" in result
    
    def test_explain_unpacking_error(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏"""
        handler = ValueErrorHandler()
        error = ValueError("too many values to unpack (expected 2)")
        
        result = handler.explain(error, None)
        
        assert "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏" in result


class TestTypeErrorHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è TypeErrorHandler"""
    
    def test_explain_unsupported_operand(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –æ–ø–µ—Ä–∞–Ω–¥–æ–≤"""
        handler = TypeErrorHandler()
        error = TypeError("unsupported operand type(s) for +: 'int' and 'str'")
        
        result = handler.explain(error, None)
        
        assert "–ù–µ–ª—å–∑—è —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å —á–∏—Å–ª–∞ –∏ —Å—Ç—Ä–æ–∫–∏" in result
        assert "str()" in result
    
    def test_explain_not_callable(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –≤—ã–∑–æ–≤–∞ –Ω–µ-—Ñ—É–Ω–∫—Ü–∏–∏"""
        handler = TypeErrorHandler()
        error = TypeError("'int' object is not callable")
        
        result = handler.explain(error, None)
        
        assert "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–∑–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π" in result
    
    def test_explain_not_iterable(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏"""
        handler = TypeErrorHandler()
        error = TypeError("'int' object is not iterable")
        
        result = handler.explain(error, None)
        
        assert "–û–±—ä–µ–∫—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ü–∏—é" in result


class TestAttributeErrorHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è AttributeErrorHandler"""
    
    def test_explain_attribute_error(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è AttributeError"""
        handler = AttributeErrorHandler()
        error = AttributeError("'str' object has no attribute 'uppercase'")
        
        result = handler.explain(error, None)
        
        assert "str' –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'uppercase'" in result
        assert "–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: str" in result
    
    def test_find_similar_attributes(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤"""
        handler = AttributeErrorHandler()
        
        # –¢–µ—Å—Ç –¥–ª—è —Å—Ç—Ä–æ–∫–∏
        similar = handler._find_similar_attributes('uppercase', 'str')
        assert 'upper' in similar
        
        # –¢–µ—Å—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞
        similar = handler._find_similar_attributes('appendd', 'list')
        assert 'append' in similar


class TestIndexErrorHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è IndexErrorHandler"""
    
    def test_explain_list_index_error(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞"""
        handler = IndexErrorHandler()
        error = IndexError("list index out of range")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
        class MockFrame:
            def __init__(self):
                self.f_locals = {'numbers': [1, 2, 3]}
                self.f_code = type('Code', (), {'co_filename': 'test.py', 'co_name': 'test_func'})()
                self.tb_lineno = 10
        
        class MockTraceback:
            def __init__(self):
                self.tb_frame = MockFrame()
                self.tb_next = None
        
        traceback_obj = MockTraceback()
        result = handler.explain(error, traceback_obj)
        
        assert "–°–ø–∏—Å–æ–∫ 'numbers' —Å–æ–¥–µ—Ä–∂–∏—Ç 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤" in result
        assert "–ò–Ω–¥–µ–∫—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 2" in result


class TestFileNotFoundErrorHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è FileNotFoundErrorHandler"""
    
    def test_explain_file_not_found_error(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è FileNotFoundError"""
        handler = FileNotFoundErrorHandler()
        error = FileNotFoundError("[Errno 2] No such file or directory: 'test.txt'")
        
        result = handler.explain(error, None)
        
        assert "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: test.txt" in result
        assert "–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:" in result
    
    def test_extract_filename(self):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        handler = FileNotFoundErrorHandler()
        
        error_msg = "[Errno 2] No such file or directory: 'test.txt'"
        filename = handler._extract_filename(error_msg)
        assert filename == "test.txt"


class TestImportErrorHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è ImportErrorHandler"""
    
    def test_explain_no_module(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–æ–¥—É–ª—è"""
        handler = ImportErrorHandler()
        error = ImportError("No module named 'nonexistent'")
        
        result = handler.explain(error, None)
        
        assert "–ú–æ–¥—É–ª—å 'nonexistent' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" in result
    
    def test_explain_cannot_import_name(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –∏–º–µ–Ω–∏"""
        handler = ImportErrorHandler()
        error = ImportError("cannot import name 'function' from 'module'")
        
        result = handler.explain(error, None)
        
        assert "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å 'function' –∏–∑ –º–æ–¥—É–ª—è 'module'" in result


class TestZeroDivisionErrorHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è ZeroDivisionErrorHandler"""
    
    def test_explain_zero_division_error(self):
        """–¢–µ—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è ZeroDivisionError"""
        handler = ZeroDivisionErrorHandler()
        error = ZeroDivisionError("division by zero")
        
        result = handler.explain(error, None)
        
        assert "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ" in result
        assert "–í –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ" in result


class TestCoreFunctions:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def test_explain_exception(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ explain_exception"""
        error = KeyError('test_key')
        result = explain_exception(error)
        
        assert isinstance(result, str)
        assert "–°–ª–æ–≤–∞—Ä—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á 'test_key'" in result
    
    def test_explain_with_context(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ explain —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–ª–æ–∂–Ω–µ–µ, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        pass


if __name__ == "__main__":
    pytest.main([__file__])
