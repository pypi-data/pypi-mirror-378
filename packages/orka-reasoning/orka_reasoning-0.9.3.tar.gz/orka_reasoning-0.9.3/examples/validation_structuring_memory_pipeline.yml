orchestrator:
  id: orka-ui
  strategy: decision-tree
  queue: orka:generated
  agents:
    - memory-reader
    - memory-check
    - router
    - memory-writer
agents:
  - id: memory-reader
    type: memory
    memory_preset: "semantic"  # Facts and knowledge base (30 days)
    queue: orka:memory-reader
    config:
      operation: read
      memory_category_filter: stored
    namespace: landmarks
    prompt: Retrieve any stored memories about {{ get_input() }}. Return "NONE" if nothing matches.
  - id: memory-check
    type: local_llm
    model: gpt-oss:20b
    model_url: http://localhost:11434/api/generate
    provider: ollama
    temperature: 0.1
    queue: orka:memory-check
    prompt: |
      'Check if the following memory data is relevant to the question and has high confidence. Question: {{ get_input() }} Memory: {{ get_agent_response(''memory-reader'') }} Return true if: 1) The memory contains relevant information about the question; 2) The memory has a confidence score higher than 0.89; 3) The memory is not "NONE". Return false otherwise. Answer with exactly ''true'' or ''false'' only.'
  - id: router
    type: router
    params:
      decision_key: memory-check
      routing_map:
        "true":
          - memory-path
          - memory-writer
        "false":
          - context-collector
          - answer-builder
          - validation-guard
          - memory-writer
    depends_on:
      - memory-check
  - id: memory-path
    type: local_llm
    model: gpt-oss:20b
    model_url: http://localhost:11434/api/generate
    provider: ollama
    temperature: 0.3
    queue: orka:memory-path
    prompt: Format the stored memory information about the {{ get_input() }} into a clear answer:{{ get_agent_response('memory-reader') if get_agent_response('memory-reader') else 'NONE' }}. Provide a well-structured response.
    depends_on:
      - router
  - id: context-collector
    type: local_llm
    model: gpt-oss:20b
    model_url: http://localhost:11434/api/generate
    provider: ollama
    temperature: 0.5
    queue: orka:context-collector
    prompt: Based on the question "{{ get_input() }}", collect relevant context and background information. Focus on gathering factual information that will help validate the answer. If no specific information is available, explain what type of information would be needed and suggest research directions. Do not return just "NONE" - provide a meaningful response about the information availability.
    depends_on:
      - router
  - id: answer-builder
    type: local_llm
    model: gpt-oss:20b
    model_url: http://localhost:11434/api/generate
    provider: ollama
    temperature: 0.7
    queue: orka:answer-builder
    prompt: "Using the context: {{ get_agent_response('context-collector') }} Provide a detailed answer to: {{ get_input() }}. If the context indicates no information is available, explain what is known and what would need to be researched. Do not return just 'NONE'. Be comprehensive and helpful."
    depends_on:
      - context-collector
  - id: validation-guard
    type: validate_and_structure
    queue: orka:validation-guard
    prompt: "Validate the answer and structure it into a memory format. Question: {{ get_input() }} Answer to validate: {{ get_agent_response('answer-builder') }}"
    depends_on:
      - answer-builder
      - context-collector
    store_structure: '{  "fact": "string",  "reason": "string",  "confidence": "number",  "source": "string"}'
  - id: memory-writer
    type: memory
    memory_preset: "semantic"  # Facts and knowledge base (30 days)
    queue: orka:memory-writer
    config:
      operation: write
    namespace: landmarks
    prompt: "{{ previous_outputs['validation-guard'].result.memory_object.fact if previous_outputs.get('validation-guard') and previous_outputs['validation-guard'].result.valid else 'NONE' }}"
    metadata:
      source: validation-guard
      confidence: "{{ previous_outputs['validation-guard'].result.memory_object.confidence if previous_outputs.get('validation-guard') and previous_outputs['validation-guard'].result.valid else 0 }}"
      reason: "{{ previous_outputs['validation-guard'].result.reason if previous_outputs.get('validation-guard') and previous_outputs['validation-guard'].result.valid else 'unknown' }}"
      fact: "{{ previous_outputs['validation-guard'].result.memory_object.fact if previous_outputs.get('validation-guard') and previous_outputs['validation-guard'].result.valid else 'unknown' }}"
      category: "stored"
    key_template: "{{ get_input() }}"
