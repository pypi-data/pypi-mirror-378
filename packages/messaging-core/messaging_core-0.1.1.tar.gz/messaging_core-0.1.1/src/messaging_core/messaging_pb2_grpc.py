# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import messaging_core.messaging_pb2 as messaging__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in messaging_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MessagingServiceStub(object):
    """MessagingService provides the core messaging functionality for the application.
    It handles sending, receiving, and managing messages in real-time.

    MessagingService handles all message-related operations including sending messages,
    retrieving message history, and real-time message streaming.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMessage = channel.unary_unary(
                '/proto.MessagingService/SendMessage',
                request_serializer=messaging__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=messaging__pb2.SendMessageResponse.FromString,
                _registered_method=True)
        self.GetConversationMessages = channel.unary_unary(
                '/proto.MessagingService/GetConversationMessages',
                request_serializer=messaging__pb2.GetConversationMessagesRequest.SerializeToString,
                response_deserializer=messaging__pb2.GetConversationMessagesResponse.FromString,
                _registered_method=True)
        self.SubscribeMessages = channel.unary_stream(
                '/proto.MessagingService/SubscribeMessages',
                request_serializer=messaging__pb2.SubscribeMessagesRequest.SerializeToString,
                response_deserializer=messaging__pb2.StreamMessageResponse.FromString,
                _registered_method=True)
        self.UpdateMessageStatus = channel.unary_unary(
                '/proto.MessagingService/UpdateMessageStatus',
                request_serializer=messaging__pb2.UpdateMessageStatusRequest.SerializeToString,
                response_deserializer=messaging__pb2.UpdateMessageStatusResponse.FromString,
                _registered_method=True)
        self.BulkUpdateMessageStatus = channel.unary_unary(
                '/proto.MessagingService/BulkUpdateMessageStatus',
                request_serializer=messaging__pb2.BulkUpdateMessageStatusRequest.SerializeToString,
                response_deserializer=messaging__pb2.BulkUpdateMessageStatusResponse.FromString,
                _registered_method=True)


class MessagingServiceServicer(object):
    """MessagingService provides the core messaging functionality for the application.
    It handles sending, receiving, and managing messages in real-time.

    MessagingService handles all message-related operations including sending messages,
    retrieving message history, and real-time message streaming.
    """

    def SendMessage(self, request, context):
        """SendMessage sends a new message to a conversation.
        It supports different message types including text, media, and files.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConversationMessages(self, request, context):
        """GetConversationMessages retrieves a paginated list of messages for a specific conversation.
        It supports filtering and pagination to efficiently load message history.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeMessages(self, request, context):
        """SubscribeMessages establishes a real-time message stream for receiving new messages.
        The connection remains open, and messages are pushed as they arrive.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMessageStatus(self, request, context):
        """UpdateMessageStatus updates the status of a specific message.
        Used to track message delivery, read receipts, and other status changes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BulkUpdateMessageStatus(self, request, context):
        """BulkUpdateMessageStatus efficiently updates the status of multiple messages in a single request.
        This is optimized for batch operations like marking multiple messages as read.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessagingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=messaging__pb2.SendMessageRequest.FromString,
                    response_serializer=messaging__pb2.SendMessageResponse.SerializeToString,
            ),
            'GetConversationMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConversationMessages,
                    request_deserializer=messaging__pb2.GetConversationMessagesRequest.FromString,
                    response_serializer=messaging__pb2.GetConversationMessagesResponse.SerializeToString,
            ),
            'SubscribeMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeMessages,
                    request_deserializer=messaging__pb2.SubscribeMessagesRequest.FromString,
                    response_serializer=messaging__pb2.StreamMessageResponse.SerializeToString,
            ),
            'UpdateMessageStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMessageStatus,
                    request_deserializer=messaging__pb2.UpdateMessageStatusRequest.FromString,
                    response_serializer=messaging__pb2.UpdateMessageStatusResponse.SerializeToString,
            ),
            'BulkUpdateMessageStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.BulkUpdateMessageStatus,
                    request_deserializer=messaging__pb2.BulkUpdateMessageStatusRequest.FromString,
                    response_serializer=messaging__pb2.BulkUpdateMessageStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.MessagingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.MessagingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MessagingService(object):
    """MessagingService provides the core messaging functionality for the application.
    It handles sending, receiving, and managing messages in real-time.

    MessagingService handles all message-related operations including sending messages,
    retrieving message history, and real-time message streaming.
    """

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.MessagingService/SendMessage',
            messaging__pb2.SendMessageRequest.SerializeToString,
            messaging__pb2.SendMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetConversationMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.MessagingService/GetConversationMessages',
            messaging__pb2.GetConversationMessagesRequest.SerializeToString,
            messaging__pb2.GetConversationMessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/proto.MessagingService/SubscribeMessages',
            messaging__pb2.SubscribeMessagesRequest.SerializeToString,
            messaging__pb2.StreamMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateMessageStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.MessagingService/UpdateMessageStatus',
            messaging__pb2.UpdateMessageStatusRequest.SerializeToString,
            messaging__pb2.UpdateMessageStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BulkUpdateMessageStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.MessagingService/BulkUpdateMessageStatus',
            messaging__pb2.BulkUpdateMessageStatusRequest.SerializeToString,
            messaging__pb2.BulkUpdateMessageStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
