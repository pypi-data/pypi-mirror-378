Metadata-Version: 2.4
Name: payra_sdk
Version: 1.1.3
Summary: Python SDK for Payra payment signature generation (backend)
Author: Your Name
Author-email: Wraith <contact@payra.cash>
License: MIT License
        
        Copyright (c) 2025 Wraith
        
        Permission is hereby granted, free of charge, to any person obtaining a copy...
        
Project-URL: Homepage, https://github.com/payracash
Project-URL: Source, https://github.com/payracash/payra-sdk-python
Project-URL: Issues, https://github.com/payracash/payra-sdk-python/issues
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: web3>=6.0.0
Requires-Dist: eth-abi>=4.0.0
Requires-Dist: eth-account>=0.10.0
Requires-Dist: python-dotenv>=1.0.0
Dynamic: license-file



# Payra Python SDK (Backend Signature and Check Order Status)

This Python SDK provides backend functionality to **generate and verify payment signatures** and **checking the on-chain status of orders** for the [Payra](https://payra.cash) on-chain payment system.  

This SDK provides:  
- Secure generation of **ECDSA signatures** compatible with the Payra smart contract (used for payment verification).  
- Easy integration for **checking the on-chain status of orders** to confirm whether payments have been completed.  
-

## How It Works

Typical flow for sign transaction:

1. The **frontend** prepares all required payment parameters:
   - Network (name: e.g. Polygon, Linea, etc.)
   - Token address
   - Order ID
   - Amount (already in smallest unit — e.g., wei or 10⁶)
   - Timestamp
   - Payer wallet address
3. The frontend sends these parameters to your backend.
4. The **backend** uses this SDK to generate a cryptographic signature using its private key (offline).
5. The signature is returned to the frontend.
6. The frontend calls the Payra smart contract (`payOrder`) using those parameters + the signature.

This ensures full compatibility between your backend and Payra’s on-chain logic.

---

## Features

- ABI encoding of parameters (token, merchantId, orderId, amount, timestamp, payer)
- Keccak256 hashing (same as `ethers.utils.keccak256`)
- Ethereum ECDSA signing of raw hashes (no prefixing)
- Offline signature verification (recover signer address)
- Supports **multiple networks** via dynamic `.env` configuration
- Order status verification directly against the blockchain  
- Secure backend integration with merchant private keys

---

## SETUP

Before installing this package, make sure you have an active Payra account:

- [https://payra.cash](https://payra.cash)

You will need your merchantID and a dedicated account (private key) to generate valid payment signatures.

---

## Installation

Installing via PyPI (Python Package Index)

```bash
pip install payra-sdk
```

Clone and install locally (editable mode for development):

```bash
git clone https://github.com/payracash/payra-sdk-python.git
cd payra-sdk-python

python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate

pip install -e .
```

## Environment Configuration

Create a `.env` file in your project root:

```bash
cp .env.example .env
```

Additionally, you must create a free account at [QuickNode](https://www.quicknode.com/) to obtain an API key.  This key is required for sending RPC requests to the blockchain in order to verify the on-chain status of orders.

```bash
QUICK_NODE_RPC_API_KEY= your api key
```

Edit the `.env` file and add credentials for each supported network. Example for Polygon:

```bash
PAYRA_POLYGON_PRIVATE_KEY=0xabc123...your_private_key
PAYRA_POLYGON_MERCHANT_ID=3652
```

You can define other networks similarly:

```bash
PAYRA_LINEA_PRIVATE_KEY=0xabc...
PAYRA_LINEA_MERCHANT_ID=999
```

**DO NOT commit your  `.env`  to version control.**

---

## Usage Example

#### Here’s how to generate and verify a Payra signature in your backend:

```python
from payra_sdk import PayraSignatureGenerator, PayraSDKException

PAYMENT_DATA = {
    "network": "polygon",
    "tokenAddress": "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",  # USDT on Polygon
    "orderId": "ORDER-1753824905006-301-322",
    "amount": 4000000,  # e.g., 4 USDT with 6 decimals
    "timestamp": 1753826059,  # current Unix time (in seconds)
    "payerAddress": "0xe6c961D6ad9a27Ea8e5d99e40abaC365DE9Cc162"
}

try:
    # Initialize the signer
    payra_signer = PayraSignatureGenerator()

    # Generate signature
    signature = payra_signer.generate_signature(
        network=PAYMENT_DATA["network"],
        token_address=PAYMENT_DATA["tokenAddress"],
        order_id=PAYMENT_DATA["orderId"],
        amount=PAYMENT_DATA["amount"],
        timestamp=PAYMENT_DATA["timestamp"],
        payer_address=PAYMENT_DATA["payerAddress"]
    )

    print(f"Generated signature: {signature}")

except PayraSDKException as e:
    print(f"Payra SDK error: {e}")
except Exception as e:
    print(f"Unexpected error: {e}")
```

#### Here’s how to check order status:

```python
from payra_sdk import PayraOrderVerification, PayraSDKException

ORDER_ID = "your-real-order-id"

def run_example():
    try:
        verifier = PayraOrderVerification("polygon") #select network
        result = verifier.is_order_paid(ORDER_ID)

        print("\nChecking order status...")
        print("Order ID:", ORDER_ID)
        print("Result:", result)

        if result["success"] and result["paid"]:
            print("Order is PAID")
        elif result["success"]:
            print("Order is NOT paid yet")
        else:
            print("Error:", result["error"])

    except PayraSDKException as e:
        print(f"SDK error: {e}")
    except Exception as e:
        print(f"Unexpected error: {e}")

if __name__ == "__main__":
    run_example()
```


## Testing
You can run the included `examples` to test signing and verification:

```python
python3 example_signature.py
python3 example_order_verification.py
```

Make sure your `.env` file contains correct values for the `network` being used.

---

## Projects

-   [GitHub / Home](https://github.com/payracash)
-   [GitHub / Source](https://github.com/payracash/payra-sdk-python)
-   [GitHub / Issues](https://github.com/payracash/payra-sdk-python/issues)

---

## Project

-   [https://payra.cash](https://payra.cash)
-   [https://payra.tech](https://payra.tech)
-   [https://payra.xyz](https://payra.xyz)
-   [https://payra.eth](https://payra.eth)

---

## Social Media

- [Telegram Payra Group](https://t.me/+GhTyJJrd4SMyMDA0)
- [Telegram Announcements](https://t.me/payracash)
- [Twix (X)](https://x.com/PayraCash)
- [Hashnode](https://payra.hashnode.dev)

---

##  License

MIT © [Payra](https://github.com/payracash)
