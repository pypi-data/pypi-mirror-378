"""
    Delphix DCT API

    Delphix DCT API  # noqa: E501

    The version of the OpenAPI document: 3.24.0
    Contact: support@delphix.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from delphix.api.gateway.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from delphix.api.gateway.exceptions import ApiAttributeError


def lazy_import():
    from delphix.api.gateway.model.generate_data_attribute import GenerateDataAttribute
    globals()['GenerateDataAttribute'] = GenerateDataAttribute


class GenerateDataOperation(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('status',): {
            'PENDING': "PENDING",
            'STARTED': "STARTED",
            'FAILED': "FAILED",
            'COMPLETED': "COMPLETED",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'data_type': (str,),  # noqa: E501
            'attributes': ([GenerateDataAttribute],),  # noqa: E501
            'max_value_length': (int,),  # noqa: E501
            'requested_count': (int,),  # noqa: E501
            'generated_count': (int,),  # noqa: E501
            'filter_characters': (str,),  # noqa: E501
            'allow_duplicates': (bool,),  # noqa: E501
            'trim_values': (bool,),  # noqa: E501
            'multiline_values': (bool,),  # noqa: E501
            'account_id': (str,),  # noqa: E501
            'submit_time': (datetime,),  # noqa: E501
            'start_time': (datetime,),  # noqa: E501
            'end_time': (datetime,),  # noqa: E501
            'expiration_time': (datetime,),  # noqa: E501
            'error_tolerance': (int,),  # noqa: E501
            'ai_orchestrator_id': (str,),  # noqa: E501
            'llm_model_name': (str,),  # noqa: E501
            'priority': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'name': 'name',  # noqa: E501
        'description': 'description',  # noqa: E501
        'status': 'status',  # noqa: E501
        'data_type': 'data_type',  # noqa: E501
        'attributes': 'attributes',  # noqa: E501
        'max_value_length': 'max_value_length',  # noqa: E501
        'requested_count': 'requested_count',  # noqa: E501
        'generated_count': 'generated_count',  # noqa: E501
        'filter_characters': 'filter_characters',  # noqa: E501
        'allow_duplicates': 'allow_duplicates',  # noqa: E501
        'trim_values': 'trim_values',  # noqa: E501
        'multiline_values': 'multiline_values',  # noqa: E501
        'account_id': 'account_id',  # noqa: E501
        'submit_time': 'submit_time',  # noqa: E501
        'start_time': 'start_time',  # noqa: E501
        'end_time': 'end_time',  # noqa: E501
        'expiration_time': 'expiration_time',  # noqa: E501
        'error_tolerance': 'error_tolerance',  # noqa: E501
        'ai_orchestrator_id': 'ai_orchestrator_id',  # noqa: E501
        'llm_model_name': 'llm_model_name',  # noqa: E501
        'priority': 'priority',  # noqa: E501
    }

    read_only_vars = {
        'id',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """GenerateDataOperation - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): The id of this data generation request.. [optional]  # noqa: E501
            name (str): A name for this data generation request. This name will be used for the generated file, if requested.. [optional]  # noqa: E501
            description (str): A description of this data generation request. [optional]  # noqa: E501
            status (str): The status of this data generation request. [optional]  # noqa: E501
            data_type (str): The type of data to generate. [optional]  # noqa: E501
            attributes ([GenerateDataAttribute]): Attributes to use when generating some values. Generation will iterate over each attribute, so each attribute will apply to a subset of the generated values. [optional]  # noqa: E501
            max_value_length (int): The maximum length in characters for each generated value. Generated values which are too long are discarded.. [optional]  # noqa: E501
            requested_count (int): The number of values to generate.. [optional]  # noqa: E501
            generated_count (int): The number of values actually generated.. [optional]  # noqa: E501
            filter_characters (str): A Java regular expression that matches each character to filter from the generated values.. [optional]  # noqa: E501
            allow_duplicates (bool): Whether to allow duplicate values in the generated value list.. [optional]  # noqa: E501
            trim_values (bool): Whether to trim leading and trailing whitespace from generated values.. [optional]  # noqa: E501
            multiline_values (bool): Whether to allow generation of multiline values. Values generated with this setting true cannot be exported to secure lookup files. When this value is false, multiline values are rejected.. [optional]  # noqa: E501
            account_id (str): The ID of the account who created this data generate operation.. [optional]  # noqa: E501
            submit_time (datetime): The date and time this data generate request was created.. [optional]  # noqa: E501
            start_time (datetime): The date and time this data generate request began processing.. [optional]  # noqa: E501
            end_time (datetime): The date and time this data generate request was completed.. [optional]  # noqa: E501
            expiration_time (datetime): The time after which the generated values and associated operation record will be automatically deleted. No value means the data will be retained indefinitely.. [optional]  # noqa: E501
            error_tolerance (int): The error tolerance value specified during value generation. [optional]  # noqa: E501
            ai_orchestrator_id (str): The id of the AI orchestrator that processed this generate operation.. [optional]  # noqa: E501
            llm_model_name (str): The full name of the LLM model used.. [optional]  # noqa: E501
            priority (int): The request priority, where higher values mean higher priority.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """GenerateDataOperation - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): The id of this data generation request.. [optional]  # noqa: E501
            name (str): A name for this data generation request. This name will be used for the generated file, if requested.. [optional]  # noqa: E501
            description (str): A description of this data generation request. [optional]  # noqa: E501
            status (str): The status of this data generation request. [optional]  # noqa: E501
            data_type (str): The type of data to generate. [optional]  # noqa: E501
            attributes ([GenerateDataAttribute]): Attributes to use when generating some values. Generation will iterate over each attribute, so each attribute will apply to a subset of the generated values. [optional]  # noqa: E501
            max_value_length (int): The maximum length in characters for each generated value. Generated values which are too long are discarded.. [optional]  # noqa: E501
            requested_count (int): The number of values to generate.. [optional]  # noqa: E501
            generated_count (int): The number of values actually generated.. [optional]  # noqa: E501
            filter_characters (str): A Java regular expression that matches each character to filter from the generated values.. [optional]  # noqa: E501
            allow_duplicates (bool): Whether to allow duplicate values in the generated value list.. [optional]  # noqa: E501
            trim_values (bool): Whether to trim leading and trailing whitespace from generated values.. [optional]  # noqa: E501
            multiline_values (bool): Whether to allow generation of multiline values. Values generated with this setting true cannot be exported to secure lookup files. When this value is false, multiline values are rejected.. [optional]  # noqa: E501
            account_id (str): The ID of the account who created this data generate operation.. [optional]  # noqa: E501
            submit_time (datetime): The date and time this data generate request was created.. [optional]  # noqa: E501
            start_time (datetime): The date and time this data generate request began processing.. [optional]  # noqa: E501
            end_time (datetime): The date and time this data generate request was completed.. [optional]  # noqa: E501
            expiration_time (datetime): The time after which the generated values and associated operation record will be automatically deleted. No value means the data will be retained indefinitely.. [optional]  # noqa: E501
            error_tolerance (int): The error tolerance value specified during value generation. [optional]  # noqa: E501
            ai_orchestrator_id (str): The id of the AI orchestrator that processed this generate operation.. [optional]  # noqa: E501
            llm_model_name (str): The full name of the LLM model used.. [optional]  # noqa: E501
            priority (int): The request priority, where higher values mean higher priority.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
