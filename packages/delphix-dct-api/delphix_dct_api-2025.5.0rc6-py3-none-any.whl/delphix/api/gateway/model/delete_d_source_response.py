"""
    Delphix DCT API

    Delphix DCT API  # noqa: E501

    The version of the OpenAPI document: 3.24.0
    Contact: support@delphix.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from delphix.api.gateway.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from delphix.api.gateway.exceptions import ApiAttributeError


def lazy_import():
    from delphix.api.gateway.model.delete_d_source_response_all_of import DeleteDSourceResponseAllOf
    from delphix.api.gateway.model.engine import Engine
    from delphix.api.gateway.model.job import Job
    from delphix.api.gateway.model.job_task import JobTask
    from delphix.api.gateway.model.tag import Tag
    from delphix.api.gateway.model.virtualization_task import VirtualizationTask
    globals()['DeleteDSourceResponseAllOf'] = DeleteDSourceResponseAllOf
    globals()['Engine'] = Engine
    globals()['Job'] = Job
    globals()['JobTask'] = JobTask
    globals()['Tag'] = Tag
    globals()['VirtualizationTask'] = VirtualizationTask


class DeleteDSourceResponse(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('status',): {
            'PENDING': "PENDING",
            'STARTED': "STARTED",
            'TIMEDOUT': "TIMEDOUT",
            'RUNNING': "RUNNING",
            'CANCELED': "CANCELED",
            'FAILED': "FAILED",
            'SUSPENDED': "SUSPENDED",
            'WAITING': "WAITING",
            'COMPLETED': "COMPLETED",
            'ABANDONED': "ABANDONED",
        },
    }

    validations = {
        ('percent_complete',): {
            'inclusive_maximum': 100,
            'inclusive_minimum': 0,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'is_waiting_for_telemetry': (bool,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'localized_type': (str,),  # noqa: E501
            'error_details': (str,),  # noqa: E501
            'warning_message': (str,),  # noqa: E501
            'target_id': (str,),  # noqa: E501
            'target_name': (str,),  # noqa: E501
            'start_time': (datetime,),  # noqa: E501
            'update_time': (datetime,),  # noqa: E501
            'trace_id': (str,),  # noqa: E501
            'engine_ids': ([str],),  # noqa: E501
            'tags': ([Tag],),  # noqa: E501
            'engines': ([Engine],),  # noqa: E501
            'account_id': (int,),  # noqa: E501
            'account_name': (str,),  # noqa: E501
            'percent_complete': (int,),  # noqa: E501
            'virtualization_tasks': ([VirtualizationTask],),  # noqa: E501
            'tasks': ([JobTask],),  # noqa: E501
            'execution_id': (str, none_type,),  # noqa: E501
            'result_type': (str,),  # noqa: E501
            'result': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'job': (Job,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'status': 'status',  # noqa: E501
        'is_waiting_for_telemetry': 'is_waiting_for_telemetry',  # noqa: E501
        'type': 'type',  # noqa: E501
        'localized_type': 'localized_type',  # noqa: E501
        'error_details': 'error_details',  # noqa: E501
        'warning_message': 'warning_message',  # noqa: E501
        'target_id': 'target_id',  # noqa: E501
        'target_name': 'target_name',  # noqa: E501
        'start_time': 'start_time',  # noqa: E501
        'update_time': 'update_time',  # noqa: E501
        'trace_id': 'trace_id',  # noqa: E501
        'engine_ids': 'engine_ids',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'engines': 'engines',  # noqa: E501
        'account_id': 'account_id',  # noqa: E501
        'account_name': 'account_name',  # noqa: E501
        'percent_complete': 'percent_complete',  # noqa: E501
        'virtualization_tasks': 'virtualization_tasks',  # noqa: E501
        'tasks': 'tasks',  # noqa: E501
        'execution_id': 'execution_id',  # noqa: E501
        'result_type': 'result_type',  # noqa: E501
        'result': 'result',  # noqa: E501
        'job': 'job',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """DeleteDSourceResponse - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): The Job entity ID.. [optional]  # noqa: E501
            status (str): The status of the job.. [optional]  # noqa: E501
            is_waiting_for_telemetry (bool): Indicates that the operations performed by this Job have completed successfully, but the object changes are not yet reflected. This is only set when when the JOB is in STARTED status, with the guarantee that the job will not transition to the FAILED status. Note that this flag will likely be replaced with a new status in future API versions and be deprecated.. [optional]  # noqa: E501
            type (str): The type of job being done.. [optional]  # noqa: E501
            localized_type (str): The i18n translated type of job being done.. [optional]  # noqa: E501
            error_details (str): Details about the failure for FAILED jobs.. [optional]  # noqa: E501
            warning_message (str): Warnings for the job.. [optional]  # noqa: E501
            target_id (str): A reference to the job's target.. [optional]  # noqa: E501
            target_name (str): A reference to the job's target name.. [optional]  # noqa: E501
            start_time (datetime): The time the job started executing.. [optional]  # noqa: E501
            update_time (datetime): The time the job was last updated.. [optional]  # noqa: E501
            trace_id (str): traceId of the request which created this Job. [optional]  # noqa: E501
            engine_ids ([str]): IDs of the engines this Job is executing on.. [optional]  # noqa: E501
            tags ([Tag]): [optional]  # noqa: E501
            engines ([Engine]): [optional]  # noqa: E501
            account_id (int): The ID of the account who initiated this job.. [optional]  # noqa: E501
            account_name (str): The account name which initiated this job. It can be either firstname and lastname combination or firstname or lastname or username or email address or Account-<id>.. [optional]  # noqa: E501
            percent_complete (int): Completion percentage of the Job.. [optional]  # noqa: E501
            virtualization_tasks ([VirtualizationTask]): [optional]  # noqa: E501
            tasks ([JobTask]): [optional]  # noqa: E501
            execution_id (str, none_type): The ID of the associated masking execution, if any.. [optional]  # noqa: E501
            result_type (str): The type of the job result. This is the type of the object present in the result.. [optional]  # noqa: E501
            result ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The result of the job execution. This is JSON serialized string of the result object whose type is specified by result_type property.. [optional]  # noqa: E501
            job (Job): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """DeleteDSourceResponse - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): The Job entity ID.. [optional]  # noqa: E501
            status (str): The status of the job.. [optional]  # noqa: E501
            is_waiting_for_telemetry (bool): Indicates that the operations performed by this Job have completed successfully, but the object changes are not yet reflected. This is only set when when the JOB is in STARTED status, with the guarantee that the job will not transition to the FAILED status. Note that this flag will likely be replaced with a new status in future API versions and be deprecated.. [optional]  # noqa: E501
            type (str): The type of job being done.. [optional]  # noqa: E501
            localized_type (str): The i18n translated type of job being done.. [optional]  # noqa: E501
            error_details (str): Details about the failure for FAILED jobs.. [optional]  # noqa: E501
            warning_message (str): Warnings for the job.. [optional]  # noqa: E501
            target_id (str): A reference to the job's target.. [optional]  # noqa: E501
            target_name (str): A reference to the job's target name.. [optional]  # noqa: E501
            start_time (datetime): The time the job started executing.. [optional]  # noqa: E501
            update_time (datetime): The time the job was last updated.. [optional]  # noqa: E501
            trace_id (str): traceId of the request which created this Job. [optional]  # noqa: E501
            engine_ids ([str]): IDs of the engines this Job is executing on.. [optional]  # noqa: E501
            tags ([Tag]): [optional]  # noqa: E501
            engines ([Engine]): [optional]  # noqa: E501
            account_id (int): The ID of the account who initiated this job.. [optional]  # noqa: E501
            account_name (str): The account name which initiated this job. It can be either firstname and lastname combination or firstname or lastname or username or email address or Account-<id>.. [optional]  # noqa: E501
            percent_complete (int): Completion percentage of the Job.. [optional]  # noqa: E501
            virtualization_tasks ([VirtualizationTask]): [optional]  # noqa: E501
            tasks ([JobTask]): [optional]  # noqa: E501
            execution_id (str, none_type): The ID of the associated masking execution, if any.. [optional]  # noqa: E501
            result_type (str): The type of the job result. This is the type of the object present in the result.. [optional]  # noqa: E501
            result ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The result of the job execution. This is JSON serialized string of the result object whose type is specified by result_type property.. [optional]  # noqa: E501
            job (Job): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error beause the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              DeleteDSourceResponseAllOf,
              Job,
          ],
          'oneOf': [
          ],
        }
