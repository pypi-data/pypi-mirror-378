"""
    Delphix DCT API

    Delphix DCT API  # noqa: E501

    The version of the OpenAPI document: 3.24.0
    Contact: support@delphix.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from delphix.api.gateway.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from delphix.api.gateway.exceptions import ApiAttributeError


def lazy_import():
    from delphix.api.gateway.model.containerization_state_enum import ContainerizationStateEnum
    from delphix.api.gateway.model.nfs_version_reason_enum import NfsVersionReasonEnum
    from delphix.api.gateway.model.oracle_active_instance import OracleActiveInstance
    from delphix.api.gateway.model.oracle_custom_env_var import OracleCustomEnvVar
    from delphix.api.gateway.model.oracle_rac_database_instance import OracleRACDatabaseInstance
    from delphix.api.gateway.model.oracle_service import OracleService
    from delphix.api.gateway.model.oracle_tde_keystore_config_type_enum import OracleTdeKeystoreConfigTypeEnum
    from delphix.api.gateway.model.tag import Tag
    globals()['ContainerizationStateEnum'] = ContainerizationStateEnum
    globals()['NfsVersionReasonEnum'] = NfsVersionReasonEnum
    globals()['OracleActiveInstance'] = OracleActiveInstance
    globals()['OracleCustomEnvVar'] = OracleCustomEnvVar
    globals()['OracleRACDatabaseInstance'] = OracleRACDatabaseInstance
    globals()['OracleService'] = OracleService
    globals()['OracleTdeKeystoreConfigTypeEnum'] = OracleTdeKeystoreConfigTypeEnum
    globals()['Tag'] = Tag


class VCDB(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'name': (str, none_type,),  # noqa: E501
            'database_name': (str,),  # noqa: E501
            'namespace_id': (str, none_type,),  # noqa: E501
            'namespace_name': (str, none_type,),  # noqa: E501
            'is_replica': (bool, none_type,),  # noqa: E501
            'database_version': (str, none_type,),  # noqa: E501
            'environment_id': (str, none_type,),  # noqa: E501
            'size': (int, none_type,),  # noqa: E501
            'engine_id': (str,),  # noqa: E501
            'status': (str, none_type,),  # noqa: E501
            'parent_id': (str,),  # noqa: E501
            'creation_date': (datetime, none_type,),  # noqa: E501
            'group_name': (str, none_type,),  # noqa: E501
            'enabled': (bool,),  # noqa: E501
            'content_type': (str, none_type,),  # noqa: E501
            'vcdb_restart': (bool,),  # noqa: E501
            'tags': ([Tag],),  # noqa: E501
            'invoke_datapatch': (bool,),  # noqa: E501
            'node_listeners': ([str],),  # noqa: E501
            'instance_name': (str,),  # noqa: E501
            'instance_number': (int,),  # noqa: E501
            'instances': ([OracleRACDatabaseInstance],),  # noqa: E501
            'oracle_services': ([OracleService],),  # noqa: E501
            'repository_id': (str,),  # noqa: E501
            'containerization_state': (ContainerizationStateEnum,),  # noqa: E501
            'tde_key_identifier': (str,),  # noqa: E501
            'tde_keystore_config_type': (OracleTdeKeystoreConfigTypeEnum,),  # noqa: E501
            'is_tde_keystore_password_set': (bool,),  # noqa: E501
            'database_unique_name': (str,),  # noqa: E501
            'db_username': (str,),  # noqa: E501
            'redo_log_groups': (int,),  # noqa: E501
            'redo_log_size_in_mb': (int,),  # noqa: E501
            'config_params': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'custom_env_vars': ([OracleCustomEnvVar],),  # noqa: E501
            'active_instances': ([OracleActiveInstance],),  # noqa: E501
            'nfs_version': (int,),  # noqa: E501
            'nfs_version_reason': (NfsVersionReasonEnum,),  # noqa: E501
            'nfs_encryption_enabled': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'name': 'name',  # noqa: E501
        'database_name': 'database_name',  # noqa: E501
        'namespace_id': 'namespace_id',  # noqa: E501
        'namespace_name': 'namespace_name',  # noqa: E501
        'is_replica': 'is_replica',  # noqa: E501
        'database_version': 'database_version',  # noqa: E501
        'environment_id': 'environment_id',  # noqa: E501
        'size': 'size',  # noqa: E501
        'engine_id': 'engine_id',  # noqa: E501
        'status': 'status',  # noqa: E501
        'parent_id': 'parent_id',  # noqa: E501
        'creation_date': 'creation_date',  # noqa: E501
        'group_name': 'group_name',  # noqa: E501
        'enabled': 'enabled',  # noqa: E501
        'content_type': 'content_type',  # noqa: E501
        'vcdb_restart': 'vcdb_restart',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'invoke_datapatch': 'invoke_datapatch',  # noqa: E501
        'node_listeners': 'node_listeners',  # noqa: E501
        'instance_name': 'instance_name',  # noqa: E501
        'instance_number': 'instance_number',  # noqa: E501
        'instances': 'instances',  # noqa: E501
        'oracle_services': 'oracle_services',  # noqa: E501
        'repository_id': 'repository_id',  # noqa: E501
        'containerization_state': 'containerization_state',  # noqa: E501
        'tde_key_identifier': 'tde_key_identifier',  # noqa: E501
        'tde_keystore_config_type': 'tde_keystore_config_type',  # noqa: E501
        'is_tde_keystore_password_set': 'is_tde_keystore_password_set',  # noqa: E501
        'database_unique_name': 'database_unique_name',  # noqa: E501
        'db_username': 'db_username',  # noqa: E501
        'redo_log_groups': 'redo_log_groups',  # noqa: E501
        'redo_log_size_in_mb': 'redo_log_size_in_mb',  # noqa: E501
        'config_params': 'config_params',  # noqa: E501
        'custom_env_vars': 'custom_env_vars',  # noqa: E501
        'active_instances': 'active_instances',  # noqa: E501
        'nfs_version': 'nfs_version',  # noqa: E501
        'nfs_version_reason': 'nfs_version_reason',  # noqa: E501
        'nfs_encryption_enabled': 'nfs_encryption_enabled',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """VCDB - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): The vCDB object entity ID.. [optional]  # noqa: E501
            name (str, none_type): The name of this vCDB.. [optional]  # noqa: E501
            database_name (str): The name of the container database in the Oracle DBMS.. [optional]  # noqa: E501
            namespace_id (str, none_type): The namespace id of this vCDB.. [optional]  # noqa: E501
            namespace_name (str, none_type): The namespace name of this vCDB.. [optional]  # noqa: E501
            is_replica (bool, none_type): Is this a replicated object.. [optional]  # noqa: E501
            database_version (str, none_type): The version of this vCDB.. [optional]  # noqa: E501
            environment_id (str, none_type): A reference to the Environment that hosts this vCDB.. [optional]  # noqa: E501
            size (int, none_type): The total size of the data files used by this vCDB, in bytes.. [optional]  # noqa: E501
            engine_id (str): A reference to the Engine that this vCDB belongs to.. [optional]  # noqa: E501
            status (str, none_type): The runtime status of the vCDB.. [optional]  # noqa: E501
            parent_id (str): A reference to the parent CDB of this vCDB.. [optional]  # noqa: E501
            creation_date (datetime, none_type): The date this vCDB was created.. [optional]  # noqa: E501
            group_name (str, none_type): The name of the group containing this vCDB.. [optional]  # noqa: E501
            enabled (bool): Whether the vCDB is enabled or not.. [optional]  # noqa: E501
            content_type (str, none_type): The content type of the vcdb.. [optional]  # noqa: E501
            vcdb_restart (bool): Indicates whether the Engine should automatically restart this vcdb when target host reboot is detected.. [optional]  # noqa: E501
            tags ([Tag]): [optional]  # noqa: E501
            invoke_datapatch (bool): Indicates whether datapatch should be invoked.. [optional]  # noqa: E501
            node_listeners ([str]): The list of node listeners for this VCDB.. [optional]  # noqa: E501
            instance_name (str): The instance name of this single instance VCDB.. [optional]  # noqa: E501
            instance_number (int): The instance number of this single instance VCDB.. [optional]  # noqa: E501
            instances ([OracleRACDatabaseInstance]): [optional]  # noqa: E501
            oracle_services ([OracleService]): [optional]  # noqa: E501
            repository_id (str): The repository id of this Virtual CDB.. [optional]  # noqa: E501
            containerization_state (ContainerizationStateEnum): [optional]  # noqa: E501
            tde_key_identifier (str): ID of the key created by Delphix, as recorded in v$encryption_keys.key_id.. [optional]  # noqa: E501
            tde_keystore_config_type (OracleTdeKeystoreConfigTypeEnum): [optional]  # noqa: E501
            is_tde_keystore_password_set (bool): True if TDE keystore password is set for this container database.. [optional]  # noqa: E501
            database_unique_name (str): The unique name of the database.. [optional]  # noqa: E501
            db_username (str): The user name of the database.. [optional]  # noqa: E501
            redo_log_groups (int): Number of Online Redo Log Groups.. [optional]  # noqa: E501
            redo_log_size_in_mb (int): Online Redo Log size in MB.. [optional]  # noqa: E501
            config_params ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Database configuration parameter overrides.. [optional]  # noqa: E501
            custom_env_vars ([OracleCustomEnvVar]): [optional]  # noqa: E501
            active_instances ([OracleActiveInstance]): [optional]  # noqa: E501
            nfs_version (int): The NFS version that was last used to mount this source.\". [optional]  # noqa: E501
            nfs_version_reason (NfsVersionReasonEnum): [optional]  # noqa: E501
            nfs_encryption_enabled (bool): Flag indicating whether the data transfer is encrypted or not.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """VCDB - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): The vCDB object entity ID.. [optional]  # noqa: E501
            name (str, none_type): The name of this vCDB.. [optional]  # noqa: E501
            database_name (str): The name of the container database in the Oracle DBMS.. [optional]  # noqa: E501
            namespace_id (str, none_type): The namespace id of this vCDB.. [optional]  # noqa: E501
            namespace_name (str, none_type): The namespace name of this vCDB.. [optional]  # noqa: E501
            is_replica (bool, none_type): Is this a replicated object.. [optional]  # noqa: E501
            database_version (str, none_type): The version of this vCDB.. [optional]  # noqa: E501
            environment_id (str, none_type): A reference to the Environment that hosts this vCDB.. [optional]  # noqa: E501
            size (int, none_type): The total size of the data files used by this vCDB, in bytes.. [optional]  # noqa: E501
            engine_id (str): A reference to the Engine that this vCDB belongs to.. [optional]  # noqa: E501
            status (str, none_type): The runtime status of the vCDB.. [optional]  # noqa: E501
            parent_id (str): A reference to the parent CDB of this vCDB.. [optional]  # noqa: E501
            creation_date (datetime, none_type): The date this vCDB was created.. [optional]  # noqa: E501
            group_name (str, none_type): The name of the group containing this vCDB.. [optional]  # noqa: E501
            enabled (bool): Whether the vCDB is enabled or not.. [optional]  # noqa: E501
            content_type (str, none_type): The content type of the vcdb.. [optional]  # noqa: E501
            vcdb_restart (bool): Indicates whether the Engine should automatically restart this vcdb when target host reboot is detected.. [optional]  # noqa: E501
            tags ([Tag]): [optional]  # noqa: E501
            invoke_datapatch (bool): Indicates whether datapatch should be invoked.. [optional]  # noqa: E501
            node_listeners ([str]): The list of node listeners for this VCDB.. [optional]  # noqa: E501
            instance_name (str): The instance name of this single instance VCDB.. [optional]  # noqa: E501
            instance_number (int): The instance number of this single instance VCDB.. [optional]  # noqa: E501
            instances ([OracleRACDatabaseInstance]): [optional]  # noqa: E501
            oracle_services ([OracleService]): [optional]  # noqa: E501
            repository_id (str): The repository id of this Virtual CDB.. [optional]  # noqa: E501
            containerization_state (ContainerizationStateEnum): [optional]  # noqa: E501
            tde_key_identifier (str): ID of the key created by Delphix, as recorded in v$encryption_keys.key_id.. [optional]  # noqa: E501
            tde_keystore_config_type (OracleTdeKeystoreConfigTypeEnum): [optional]  # noqa: E501
            is_tde_keystore_password_set (bool): True if TDE keystore password is set for this container database.. [optional]  # noqa: E501
            database_unique_name (str): The unique name of the database.. [optional]  # noqa: E501
            db_username (str): The user name of the database.. [optional]  # noqa: E501
            redo_log_groups (int): Number of Online Redo Log Groups.. [optional]  # noqa: E501
            redo_log_size_in_mb (int): Online Redo Log size in MB.. [optional]  # noqa: E501
            config_params ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Database configuration parameter overrides.. [optional]  # noqa: E501
            custom_env_vars ([OracleCustomEnvVar]): [optional]  # noqa: E501
            active_instances ([OracleActiveInstance]): [optional]  # noqa: E501
            nfs_version (int): The NFS version that was last used to mount this source.\". [optional]  # noqa: E501
            nfs_version_reason (NfsVersionReasonEnum): [optional]  # noqa: E501
            nfs_encryption_enabled (bool): Flag indicating whether the data transfer is encrypted or not.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
