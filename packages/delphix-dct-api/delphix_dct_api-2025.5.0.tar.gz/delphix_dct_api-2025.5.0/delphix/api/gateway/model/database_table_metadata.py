"""
    Delphix DCT API

    Delphix DCT API  # noqa: E501

    The version of the OpenAPI document: 3.24.0
    Contact: support@delphix.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from delphix.api.gateway.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from delphix.api.gateway.exceptions import ApiAttributeError



class DatabaseTableMetadata(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('id',): {
            'min_length': 1,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'id': (str,),  # noqa: E501
            'table_name': (str,),  # noqa: E501
            'rule_set_id': (str,),  # noqa: E501
            'rule_set_name': (str,),  # noqa: E501
            'custom_sql': (str,),  # noqa: E501
            'where_clause': (str,),  # noqa: E501
            'having_clause': (str,),  # noqa: E501
            'key_column': (str,),  # noqa: E501
            'is_sensitive': (bool,),  # noqa: E501
            'row_count': (int,),  # noqa: E501
            'last_refresh_time': (datetime,),  # noqa: E501
            'last_row_count_time': (datetime,),  # noqa: E501
            'engine_id': (str,),  # noqa: E501
            'engine_name': (str,),  # noqa: E501
            'dct_managed': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'table_name': 'table_name',  # noqa: E501
        'rule_set_id': 'rule_set_id',  # noqa: E501
        'rule_set_name': 'rule_set_name',  # noqa: E501
        'custom_sql': 'custom_sql',  # noqa: E501
        'where_clause': 'where_clause',  # noqa: E501
        'having_clause': 'having_clause',  # noqa: E501
        'key_column': 'key_column',  # noqa: E501
        'is_sensitive': 'is_sensitive',  # noqa: E501
        'row_count': 'row_count',  # noqa: E501
        'last_refresh_time': 'last_refresh_time',  # noqa: E501
        'last_row_count_time': 'last_row_count_time',  # noqa: E501
        'engine_id': 'engine_id',  # noqa: E501
        'engine_name': 'engine_name',  # noqa: E501
        'dct_managed': 'dct_managed',  # noqa: E501
    }

    read_only_vars = {
        'dct_managed',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """DatabaseTableMetadata - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): The id of this table metadata.. [optional]  # noqa: E501
            table_name (str): The name of the table.. [optional]  # noqa: E501
            rule_set_id (str): The id of the rule set that this table metadata belongs to.. [optional]  # noqa: E501
            rule_set_name (str): The name of the rule set that this table metadata belongs to.. [optional]  # noqa: E501
            custom_sql (str): Custom SQL for the table.. [optional]  # noqa: E501
            where_clause (str): SQL where clause for the table.. [optional]  # noqa: E501
            having_clause (str): SQL having clause for the table.. [optional]  # noqa: E501
            key_column (str): Key Column for the table.. [optional]  # noqa: E501
            is_sensitive (bool): This field indicates whether or not a table has sensitive data. This field is assigned by DCT to true or false based on whether the table is assigned an algorithm and domain.. [optional]  # noqa: E501
            row_count (int): [optional]  # noqa: E501
            last_refresh_time (datetime): [optional]  # noqa: E501
            last_row_count_time (datetime): [optional]  # noqa: E501
            engine_id (str): The id of the engine associated with this column.. [optional]  # noqa: E501
            engine_name (str): The name of the engine associated with this column.. [optional]  # noqa: E501
            dct_managed (bool): Whether this data class is managed by DCT or not.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """DatabaseTableMetadata - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): The id of this table metadata.. [optional]  # noqa: E501
            table_name (str): The name of the table.. [optional]  # noqa: E501
            rule_set_id (str): The id of the rule set that this table metadata belongs to.. [optional]  # noqa: E501
            rule_set_name (str): The name of the rule set that this table metadata belongs to.. [optional]  # noqa: E501
            custom_sql (str): Custom SQL for the table.. [optional]  # noqa: E501
            where_clause (str): SQL where clause for the table.. [optional]  # noqa: E501
            having_clause (str): SQL having clause for the table.. [optional]  # noqa: E501
            key_column (str): Key Column for the table.. [optional]  # noqa: E501
            is_sensitive (bool): This field indicates whether or not a table has sensitive data. This field is assigned by DCT to true or false based on whether the table is assigned an algorithm and domain.. [optional]  # noqa: E501
            row_count (int): [optional]  # noqa: E501
            last_refresh_time (datetime): [optional]  # noqa: E501
            last_row_count_time (datetime): [optional]  # noqa: E501
            engine_id (str): The id of the engine associated with this column.. [optional]  # noqa: E501
            engine_name (str): The name of the engine associated with this column.. [optional]  # noqa: E501
            dct_managed (bool): Whether this data class is managed by DCT or not.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
