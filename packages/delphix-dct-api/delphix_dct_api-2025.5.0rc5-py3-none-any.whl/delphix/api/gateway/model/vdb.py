"""
    Delphix DCT API

    Delphix DCT API  # noqa: E501

    The version of the OpenAPI document: 3.24.0
    Contact: support@delphix.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from delphix.api.gateway.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from delphix.api.gateway.exceptions import ApiAttributeError


def lazy_import():
    from delphix.api.gateway.model.additional_mount_point import AdditionalMountPoint
    from delphix.api.gateway.model.containerization_state_enum import ContainerizationStateEnum
    from delphix.api.gateway.model.mssql_ag_replica import MssqlAgReplica
    from delphix.api.gateway.model.nfs_version_reason_enum import NfsVersionReasonEnum
    from delphix.api.gateway.model.oracle_active_instance import OracleActiveInstance
    from delphix.api.gateway.model.oracle_custom_env_var import OracleCustomEnvVar
    from delphix.api.gateway.model.oracle_rac_database_instance import OracleRACDatabaseInstance
    from delphix.api.gateway.model.oracle_service import OracleService
    from delphix.api.gateway.model.replica import Replica
    from delphix.api.gateway.model.tag import Tag
    from delphix.api.gateway.model.virtual_dataset_hooks import VirtualDatasetHooks
    globals()['AdditionalMountPoint'] = AdditionalMountPoint
    globals()['ContainerizationStateEnum'] = ContainerizationStateEnum
    globals()['MssqlAgReplica'] = MssqlAgReplica
    globals()['NfsVersionReasonEnum'] = NfsVersionReasonEnum
    globals()['OracleActiveInstance'] = OracleActiveInstance
    globals()['OracleCustomEnvVar'] = OracleCustomEnvVar
    globals()['OracleRACDatabaseInstance'] = OracleRACDatabaseInstance
    globals()['OracleService'] = OracleService
    globals()['Replica'] = Replica
    globals()['Tag'] = Tag
    globals()['VirtualDatasetHooks'] = VirtualDatasetHooks


class VDB(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'database_type': (str, none_type,),  # noqa: E501
            'name': (str, none_type,),  # noqa: E501
            'database_name': (str,),  # noqa: E501
            'namespace_id': (str,),  # noqa: E501
            'namespace_name': (str,),  # noqa: E501
            'is_replica': (bool,),  # noqa: E501
            'is_locked': (bool,),  # noqa: E501
            'locked_by': (int,),  # noqa: E501
            'locked_by_name': (str,),  # noqa: E501
            'database_version': (str, none_type,),  # noqa: E501
            'jdbc_connection_string': (str,),  # noqa: E501
            'size': (int, none_type,),  # noqa: E501
            'storage_size': (int, none_type,),  # noqa: E501
            'unvirtualized_space': (int,),  # noqa: E501
            'engine_id': (str,),  # noqa: E501
            'status': (str, none_type,),  # noqa: E501
            'masked': (bool, none_type,),  # noqa: E501
            'content_type': (str, none_type,),  # noqa: E501
            'parent_timeflow_timestamp': (datetime, none_type,),  # noqa: E501
            'parent_timeflow_timezone': (str, none_type,),  # noqa: E501
            'environment_id': (str, none_type,),  # noqa: E501
            'ip_address': (str, none_type,),  # noqa: E501
            'fqdn': (str, none_type,),  # noqa: E501
            'parent_id': (str, none_type,),  # noqa: E501
            'parent_dsource_id': (str, none_type,),  # noqa: E501
            'root_parent_id': (str, none_type,),  # noqa: E501
            'group_name': (str, none_type,),  # noqa: E501
            'engine_name': (str, none_type,),  # noqa: E501
            'cdb_id': (str, none_type,),  # noqa: E501
            'tags': ([Tag],),  # noqa: E501
            'creation_date': (datetime, none_type,),  # noqa: E501
            'hooks': (VirtualDatasetHooks,),  # noqa: E501
            'appdata_source_params': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'template_id': (str, none_type,),  # noqa: E501
            'template_name': (str, none_type,),  # noqa: E501
            'config_params': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'environment_user_ref': (str,),  # noqa: E501
            'additional_mount_points': ([AdditionalMountPoint], none_type,),  # noqa: E501
            'appdata_config_params': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
            'mount_point': (str,),  # noqa: E501
            'current_timeflow_id': (str,),  # noqa: E501
            'previous_timeflow_id': (str,),  # noqa: E501
            'last_refreshed_date': (datetime, none_type,),  # noqa: E501
            'vdb_restart': (bool,),  # noqa: E501
            'is_appdata': (bool,),  # noqa: E501
            'exported_data_directory': (str,),  # noqa: E501
            'vcdb_exported_data_directory': (str,),  # noqa: E501
            'toolkit_id': (str,),  # noqa: E501
            'plugin_version': (str, none_type,),  # noqa: E501
            'primary_object_id': (str,),  # noqa: E501
            'primary_engine_id': (str,),  # noqa: E501
            'primary_engine_name': (str,),  # noqa: E501
            'replicas': ([Replica],),  # noqa: E501
            'invoke_datapatch': (bool,),  # noqa: E501
            'enabled': (bool,),  # noqa: E501
            'node_listeners': ([str],),  # noqa: E501
            'instance_name': (str,),  # noqa: E501
            'instance_number': (int,),  # noqa: E501
            'instances': ([OracleRACDatabaseInstance],),  # noqa: E501
            'oracle_services': ([OracleService],),  # noqa: E501
            'repository_id': (str,),  # noqa: E501
            'containerization_state': (ContainerizationStateEnum,),  # noqa: E501
            'parent_tde_keystore_path': (str,),  # noqa: E501
            'target_vcdb_tde_keystore_path': (str,),  # noqa: E501
            'tde_key_identifier': (str,),  # noqa: E501
            'parent_pdb_tde_keystore_path': (str,),  # noqa: E501
            'target_pdb_tde_keystore_path': (str,),  # noqa: E501
            'recovery_model': (str,),  # noqa: E501
            'cdc_on_provision': (bool,),  # noqa: E501
            'data_connection_id': (str,),  # noqa: E501
            'mssql_ag_backup_location': (str,),  # noqa: E501
            'mssql_ag_backup_based': (bool,),  # noqa: E501
            'mssql_ag_replicas': ([MssqlAgReplica],),  # noqa: E501
            'database_unique_name': (str,),  # noqa: E501
            'db_username': (str,),  # noqa: E501
            'new_db_id': (bool,),  # noqa: E501
            'redo_log_groups': (int,),  # noqa: E501
            'redo_log_size_in_mb': (int,),  # noqa: E501
            'custom_env_vars': ([OracleCustomEnvVar],),  # noqa: E501
            'active_instances': ([OracleActiveInstance],),  # noqa: E501
            'nfs_version': (int,),  # noqa: E501
            'nfs_version_reason': (NfsVersionReasonEnum,),  # noqa: E501
            'nfs_encryption_enabled': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'database_type': 'database_type',  # noqa: E501
        'name': 'name',  # noqa: E501
        'database_name': 'database_name',  # noqa: E501
        'namespace_id': 'namespace_id',  # noqa: E501
        'namespace_name': 'namespace_name',  # noqa: E501
        'is_replica': 'is_replica',  # noqa: E501
        'is_locked': 'is_locked',  # noqa: E501
        'locked_by': 'locked_by',  # noqa: E501
        'locked_by_name': 'locked_by_name',  # noqa: E501
        'database_version': 'database_version',  # noqa: E501
        'jdbc_connection_string': 'jdbc_connection_string',  # noqa: E501
        'size': 'size',  # noqa: E501
        'storage_size': 'storage_size',  # noqa: E501
        'unvirtualized_space': 'unvirtualized_space',  # noqa: E501
        'engine_id': 'engine_id',  # noqa: E501
        'status': 'status',  # noqa: E501
        'masked': 'masked',  # noqa: E501
        'content_type': 'content_type',  # noqa: E501
        'parent_timeflow_timestamp': 'parent_timeflow_timestamp',  # noqa: E501
        'parent_timeflow_timezone': 'parent_timeflow_timezone',  # noqa: E501
        'environment_id': 'environment_id',  # noqa: E501
        'ip_address': 'ip_address',  # noqa: E501
        'fqdn': 'fqdn',  # noqa: E501
        'parent_id': 'parent_id',  # noqa: E501
        'parent_dsource_id': 'parent_dsource_id',  # noqa: E501
        'root_parent_id': 'root_parent_id',  # noqa: E501
        'group_name': 'group_name',  # noqa: E501
        'engine_name': 'engine_name',  # noqa: E501
        'cdb_id': 'cdb_id',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'creation_date': 'creation_date',  # noqa: E501
        'hooks': 'hooks',  # noqa: E501
        'appdata_source_params': 'appdata_source_params',  # noqa: E501
        'template_id': 'template_id',  # noqa: E501
        'template_name': 'template_name',  # noqa: E501
        'config_params': 'config_params',  # noqa: E501
        'environment_user_ref': 'environment_user_ref',  # noqa: E501
        'additional_mount_points': 'additional_mount_points',  # noqa: E501
        'appdata_config_params': 'appdata_config_params',  # noqa: E501
        'mount_point': 'mount_point',  # noqa: E501
        'current_timeflow_id': 'current_timeflow_id',  # noqa: E501
        'previous_timeflow_id': 'previous_timeflow_id',  # noqa: E501
        'last_refreshed_date': 'last_refreshed_date',  # noqa: E501
        'vdb_restart': 'vdb_restart',  # noqa: E501
        'is_appdata': 'is_appdata',  # noqa: E501
        'exported_data_directory': 'exported_data_directory',  # noqa: E501
        'vcdb_exported_data_directory': 'vcdb_exported_data_directory',  # noqa: E501
        'toolkit_id': 'toolkit_id',  # noqa: E501
        'plugin_version': 'plugin_version',  # noqa: E501
        'primary_object_id': 'primary_object_id',  # noqa: E501
        'primary_engine_id': 'primary_engine_id',  # noqa: E501
        'primary_engine_name': 'primary_engine_name',  # noqa: E501
        'replicas': 'replicas',  # noqa: E501
        'invoke_datapatch': 'invoke_datapatch',  # noqa: E501
        'enabled': 'enabled',  # noqa: E501
        'node_listeners': 'node_listeners',  # noqa: E501
        'instance_name': 'instance_name',  # noqa: E501
        'instance_number': 'instance_number',  # noqa: E501
        'instances': 'instances',  # noqa: E501
        'oracle_services': 'oracle_services',  # noqa: E501
        'repository_id': 'repository_id',  # noqa: E501
        'containerization_state': 'containerization_state',  # noqa: E501
        'parent_tde_keystore_path': 'parent_tde_keystore_path',  # noqa: E501
        'target_vcdb_tde_keystore_path': 'target_vcdb_tde_keystore_path',  # noqa: E501
        'tde_key_identifier': 'tde_key_identifier',  # noqa: E501
        'parent_pdb_tde_keystore_path': 'parent_pdb_tde_keystore_path',  # noqa: E501
        'target_pdb_tde_keystore_path': 'target_pdb_tde_keystore_path',  # noqa: E501
        'recovery_model': 'recovery_model',  # noqa: E501
        'cdc_on_provision': 'cdc_on_provision',  # noqa: E501
        'data_connection_id': 'data_connection_id',  # noqa: E501
        'mssql_ag_backup_location': 'mssql_ag_backup_location',  # noqa: E501
        'mssql_ag_backup_based': 'mssql_ag_backup_based',  # noqa: E501
        'mssql_ag_replicas': 'mssql_ag_replicas',  # noqa: E501
        'database_unique_name': 'database_unique_name',  # noqa: E501
        'db_username': 'db_username',  # noqa: E501
        'new_db_id': 'new_db_id',  # noqa: E501
        'redo_log_groups': 'redo_log_groups',  # noqa: E501
        'redo_log_size_in_mb': 'redo_log_size_in_mb',  # noqa: E501
        'custom_env_vars': 'custom_env_vars',  # noqa: E501
        'active_instances': 'active_instances',  # noqa: E501
        'nfs_version': 'nfs_version',  # noqa: E501
        'nfs_version_reason': 'nfs_version_reason',  # noqa: E501
        'nfs_encryption_enabled': 'nfs_encryption_enabled',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """VDB - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): The VDB object entity ID.. [optional]  # noqa: E501
            database_type (str, none_type): The database type of this VDB.. [optional]  # noqa: E501
            name (str, none_type): The logical name of this VDB.. [optional]  # noqa: E501
            database_name (str): The name of the database on the target environment or in the database management system.. [optional]  # noqa: E501
            namespace_id (str): The namespace id of this VDB.. [optional]  # noqa: E501
            namespace_name (str): The namespace name of this VDB.. [optional]  # noqa: E501
            is_replica (bool): Is this a replicated object.. [optional]  # noqa: E501
            is_locked (bool): Is this VDB locked.. [optional]  # noqa: E501
            locked_by (int): The ID of the account that locked this VDB.. [optional]  # noqa: E501
            locked_by_name (str): The name of the account that locked this VDB.. [optional]  # noqa: E501
            database_version (str, none_type): The database version of this VDB.. [optional]  # noqa: E501
            jdbc_connection_string (str): The JDBC connection URL for this VDB.. [optional]  # noqa: E501
            size (int, none_type): The total size of this VDB, in bytes.. [optional]  # noqa: E501
            storage_size (int, none_type): The actual space used by this VDB, in bytes.. [optional]  # noqa: E501
            unvirtualized_space (int): The disk space, in bytes, that it would take to store the VDB without Delphix.. [optional]  # noqa: E501
            engine_id (str): A reference to the Engine that this VDB belongs to.. [optional]  # noqa: E501
            status (str, none_type): The runtime status of the VDB. 'Unknown' if all attempts to connect to the dataset failed.. [optional]  # noqa: E501
            masked (bool, none_type): The VDB is masked or not.. [optional]  # noqa: E501
            content_type (str, none_type): The content type of the vdb.. [optional]  # noqa: E501
            parent_timeflow_timestamp (datetime, none_type): The timestamp for parent timeflow.. [optional]  # noqa: E501
            parent_timeflow_timezone (str, none_type): The timezone for parent timeflow.. [optional]  # noqa: E501
            environment_id (str, none_type): A reference to the Environment that hosts this VDB.. [optional]  # noqa: E501
            ip_address (str, none_type): The IP address of the VDB's host.. [optional]  # noqa: E501
            fqdn (str, none_type): The FQDN of the VDB's host.. [optional]  # noqa: E501
            parent_id (str, none_type): A reference to the parent dataset of this VDB.. [optional]  # noqa: E501
            parent_dsource_id (str, none_type): A reference to the parent dSource of this VDB.. [optional]  # noqa: E501
            root_parent_id (str, none_type): A reference to the root parent dataset of this VDB which could be a VDB or a dSource.. [optional]  # noqa: E501
            group_name (str, none_type): The name of the group containing this VDB.. [optional]  # noqa: E501
            engine_name (str, none_type): Name of the Engine where this VDB is hosted. [optional]  # noqa: E501
            cdb_id (str, none_type): A reference to the CDB or VCDB associated with this VDB.. [optional]  # noqa: E501
            tags ([Tag]): [optional]  # noqa: E501
            creation_date (datetime, none_type): The date this VDB was created.. [optional]  # noqa: E501
            hooks (VirtualDatasetHooks): [optional]  # noqa: E501
            appdata_source_params ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): The JSON payload conforming to the DraftV4 schema based on the type of application data being manipulated.. [optional]  # noqa: E501
            template_id (str, none_type): A reference to the Database Template.. [optional]  # noqa: E501
            template_name (str, none_type): Name of the Database Template.. [optional]  # noqa: E501
            config_params ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Database configuration parameter overrides.. [optional]  # noqa: E501
            environment_user_ref (str): The environment user reference.. [optional]  # noqa: E501
            additional_mount_points ([AdditionalMountPoint], none_type): Specifies additional locations on which to mount a subdirectory of an AppData container. Can only be updated while the VDB is disabled.. [optional]  # noqa: E501
            appdata_config_params ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): The parameters specified by the source config schema in the toolkit. [optional]  # noqa: E501
            mount_point (str): Mount point for the VDB (Oracle, ASE, AppData).. [optional]  # noqa: E501
            current_timeflow_id (str): A reference to the currently active timeflow for this VDB.. [optional]  # noqa: E501
            previous_timeflow_id (str): A reference to the previous timeflow for this VDB.. [optional]  # noqa: E501
            last_refreshed_date (datetime, none_type): The date this VDB was last refreshed.. [optional]  # noqa: E501
            vdb_restart (bool): Indicates whether the Engine should automatically restart this vdb when target host reboot is detected.. [optional]  # noqa: E501
            is_appdata (bool): Indicates whether this VDB has an AppData database.. [optional]  # noqa: E501
            exported_data_directory (str): ZFS exported data directory path.. [optional]  # noqa: E501
            vcdb_exported_data_directory (str): ZFS exported data directory path of the virtual CDB container (vCDB).. [optional]  # noqa: E501
            toolkit_id (str): The ID of the toolkit associated with this VDB.. [optional]  # noqa: E501
            plugin_version (str, none_type): The version of the plugin associated with this VDB.. [optional]  # noqa: E501
            primary_object_id (str): The ID of the parent object from which replication was done.. [optional]  # noqa: E501
            primary_engine_id (str): The ID of the parent engine from which replication was done.. [optional]  # noqa: E501
            primary_engine_name (str): The name of the parent engine from which replication was done.. [optional]  # noqa: E501
            replicas ([Replica]): The list of replicas replicated from this object.. [optional]  # noqa: E501
            invoke_datapatch (bool): Indicates whether datapatch should be invoked.. [optional]  # noqa: E501
            enabled (bool): True if VDB is enabled false if VDB is disabled.. [optional]  # noqa: E501
            node_listeners ([str]): The list of node listeners for this VDB.. [optional]  # noqa: E501
            instance_name (str): The instance name name of this single instance VDB.. [optional]  # noqa: E501
            instance_number (int): The instance number of this single instance VDB.. [optional]  # noqa: E501
            instances ([OracleRACDatabaseInstance]): [optional]  # noqa: E501
            oracle_services ([OracleService]): [optional]  # noqa: E501
            repository_id (str): The repository id of this VDB.. [optional]  # noqa: E501
            containerization_state (ContainerizationStateEnum): [optional]  # noqa: E501
            parent_tde_keystore_path (str): Path to a copy of the parent's Oracle transparent data encryption keystore on the target host. Required to provision from snapshots containing encrypted database files.. [optional]  # noqa: E501
            target_vcdb_tde_keystore_path (str): Path to the keystore of the target vCDB.. [optional]  # noqa: E501
            tde_key_identifier (str): ID of the key created by Delphix, as recorded in v$encryption_keys.key_id.. [optional]  # noqa: E501
            parent_pdb_tde_keystore_path (str): Path to a copy of the parent PDB's Oracle transparent data encryption keystore on the target host. Required to provision from snapshots of PDB containing encrypted database files with isolated mode keystore. . [optional]  # noqa: E501
            target_pdb_tde_keystore_path (str): Path of the virtual PDB's Oracle transparent data encryption keystore on the target host.. [optional]  # noqa: E501
            recovery_model (str): Recovery model of the vdb database.. [optional]  # noqa: E501
            cdc_on_provision (bool): Whether to enable CDC on provision for MSSql.. [optional]  # noqa: E501
            data_connection_id (str): The ID of the associated DataConnection.. [optional]  # noqa: E501
            mssql_ag_backup_location (str): Shared backup location to be used for VDB provision on AG Cluster.. [optional]  # noqa: E501
            mssql_ag_backup_based (bool): Indicates whether to do fast operations for VDB on AG which will use a healthy secondary replica to recreate the AG or backup based operations which will use the primary replica to recreate the AG using backup and restore process.. [optional]  # noqa: E501
            mssql_ag_replicas ([MssqlAgReplica]): Indicates the mssql replica sources constitutes in MSSQL AG virtual source.. [optional]  # noqa: E501
            database_unique_name (str): The unique name of the database.. [optional]  # noqa: E501
            db_username (str): The user name of the database.. [optional]  # noqa: E501
            new_db_id (bool): Indicates whether Delphix will generate a new DBID during VDB provision or refresh.. [optional]  # noqa: E501
            redo_log_groups (int): Number of Online Redo Log Groups.. [optional]  # noqa: E501
            redo_log_size_in_mb (int): Online Redo Log size in MB.. [optional]  # noqa: E501
            custom_env_vars ([OracleCustomEnvVar]): [optional]  # noqa: E501
            active_instances ([OracleActiveInstance]): [optional]  # noqa: E501
            nfs_version (int): The NFS version that was last used to mount this source.\". [optional]  # noqa: E501
            nfs_version_reason (NfsVersionReasonEnum): [optional]  # noqa: E501
            nfs_encryption_enabled (bool): Flag indicating whether the data transfer is encrypted or not.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """VDB - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): The VDB object entity ID.. [optional]  # noqa: E501
            database_type (str, none_type): The database type of this VDB.. [optional]  # noqa: E501
            name (str, none_type): The logical name of this VDB.. [optional]  # noqa: E501
            database_name (str): The name of the database on the target environment or in the database management system.. [optional]  # noqa: E501
            namespace_id (str): The namespace id of this VDB.. [optional]  # noqa: E501
            namespace_name (str): The namespace name of this VDB.. [optional]  # noqa: E501
            is_replica (bool): Is this a replicated object.. [optional]  # noqa: E501
            is_locked (bool): Is this VDB locked.. [optional]  # noqa: E501
            locked_by (int): The ID of the account that locked this VDB.. [optional]  # noqa: E501
            locked_by_name (str): The name of the account that locked this VDB.. [optional]  # noqa: E501
            database_version (str, none_type): The database version of this VDB.. [optional]  # noqa: E501
            jdbc_connection_string (str): The JDBC connection URL for this VDB.. [optional]  # noqa: E501
            size (int, none_type): The total size of this VDB, in bytes.. [optional]  # noqa: E501
            storage_size (int, none_type): The actual space used by this VDB, in bytes.. [optional]  # noqa: E501
            unvirtualized_space (int): The disk space, in bytes, that it would take to store the VDB without Delphix.. [optional]  # noqa: E501
            engine_id (str): A reference to the Engine that this VDB belongs to.. [optional]  # noqa: E501
            status (str, none_type): The runtime status of the VDB. 'Unknown' if all attempts to connect to the dataset failed.. [optional]  # noqa: E501
            masked (bool, none_type): The VDB is masked or not.. [optional]  # noqa: E501
            content_type (str, none_type): The content type of the vdb.. [optional]  # noqa: E501
            parent_timeflow_timestamp (datetime, none_type): The timestamp for parent timeflow.. [optional]  # noqa: E501
            parent_timeflow_timezone (str, none_type): The timezone for parent timeflow.. [optional]  # noqa: E501
            environment_id (str, none_type): A reference to the Environment that hosts this VDB.. [optional]  # noqa: E501
            ip_address (str, none_type): The IP address of the VDB's host.. [optional]  # noqa: E501
            fqdn (str, none_type): The FQDN of the VDB's host.. [optional]  # noqa: E501
            parent_id (str, none_type): A reference to the parent dataset of this VDB.. [optional]  # noqa: E501
            parent_dsource_id (str, none_type): A reference to the parent dSource of this VDB.. [optional]  # noqa: E501
            root_parent_id (str, none_type): A reference to the root parent dataset of this VDB which could be a VDB or a dSource.. [optional]  # noqa: E501
            group_name (str, none_type): The name of the group containing this VDB.. [optional]  # noqa: E501
            engine_name (str, none_type): Name of the Engine where this VDB is hosted. [optional]  # noqa: E501
            cdb_id (str, none_type): A reference to the CDB or VCDB associated with this VDB.. [optional]  # noqa: E501
            tags ([Tag]): [optional]  # noqa: E501
            creation_date (datetime, none_type): The date this VDB was created.. [optional]  # noqa: E501
            hooks (VirtualDatasetHooks): [optional]  # noqa: E501
            appdata_source_params ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): The JSON payload conforming to the DraftV4 schema based on the type of application data being manipulated.. [optional]  # noqa: E501
            template_id (str, none_type): A reference to the Database Template.. [optional]  # noqa: E501
            template_name (str, none_type): Name of the Database Template.. [optional]  # noqa: E501
            config_params ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Database configuration parameter overrides.. [optional]  # noqa: E501
            environment_user_ref (str): The environment user reference.. [optional]  # noqa: E501
            additional_mount_points ([AdditionalMountPoint], none_type): Specifies additional locations on which to mount a subdirectory of an AppData container. Can only be updated while the VDB is disabled.. [optional]  # noqa: E501
            appdata_config_params ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): The parameters specified by the source config schema in the toolkit. [optional]  # noqa: E501
            mount_point (str): Mount point for the VDB (Oracle, ASE, AppData).. [optional]  # noqa: E501
            current_timeflow_id (str): A reference to the currently active timeflow for this VDB.. [optional]  # noqa: E501
            previous_timeflow_id (str): A reference to the previous timeflow for this VDB.. [optional]  # noqa: E501
            last_refreshed_date (datetime, none_type): The date this VDB was last refreshed.. [optional]  # noqa: E501
            vdb_restart (bool): Indicates whether the Engine should automatically restart this vdb when target host reboot is detected.. [optional]  # noqa: E501
            is_appdata (bool): Indicates whether this VDB has an AppData database.. [optional]  # noqa: E501
            exported_data_directory (str): ZFS exported data directory path.. [optional]  # noqa: E501
            vcdb_exported_data_directory (str): ZFS exported data directory path of the virtual CDB container (vCDB).. [optional]  # noqa: E501
            toolkit_id (str): The ID of the toolkit associated with this VDB.. [optional]  # noqa: E501
            plugin_version (str, none_type): The version of the plugin associated with this VDB.. [optional]  # noqa: E501
            primary_object_id (str): The ID of the parent object from which replication was done.. [optional]  # noqa: E501
            primary_engine_id (str): The ID of the parent engine from which replication was done.. [optional]  # noqa: E501
            primary_engine_name (str): The name of the parent engine from which replication was done.. [optional]  # noqa: E501
            replicas ([Replica]): The list of replicas replicated from this object.. [optional]  # noqa: E501
            invoke_datapatch (bool): Indicates whether datapatch should be invoked.. [optional]  # noqa: E501
            enabled (bool): True if VDB is enabled false if VDB is disabled.. [optional]  # noqa: E501
            node_listeners ([str]): The list of node listeners for this VDB.. [optional]  # noqa: E501
            instance_name (str): The instance name name of this single instance VDB.. [optional]  # noqa: E501
            instance_number (int): The instance number of this single instance VDB.. [optional]  # noqa: E501
            instances ([OracleRACDatabaseInstance]): [optional]  # noqa: E501
            oracle_services ([OracleService]): [optional]  # noqa: E501
            repository_id (str): The repository id of this VDB.. [optional]  # noqa: E501
            containerization_state (ContainerizationStateEnum): [optional]  # noqa: E501
            parent_tde_keystore_path (str): Path to a copy of the parent's Oracle transparent data encryption keystore on the target host. Required to provision from snapshots containing encrypted database files.. [optional]  # noqa: E501
            target_vcdb_tde_keystore_path (str): Path to the keystore of the target vCDB.. [optional]  # noqa: E501
            tde_key_identifier (str): ID of the key created by Delphix, as recorded in v$encryption_keys.key_id.. [optional]  # noqa: E501
            parent_pdb_tde_keystore_path (str): Path to a copy of the parent PDB's Oracle transparent data encryption keystore on the target host. Required to provision from snapshots of PDB containing encrypted database files with isolated mode keystore. . [optional]  # noqa: E501
            target_pdb_tde_keystore_path (str): Path of the virtual PDB's Oracle transparent data encryption keystore on the target host.. [optional]  # noqa: E501
            recovery_model (str): Recovery model of the vdb database.. [optional]  # noqa: E501
            cdc_on_provision (bool): Whether to enable CDC on provision for MSSql.. [optional]  # noqa: E501
            data_connection_id (str): The ID of the associated DataConnection.. [optional]  # noqa: E501
            mssql_ag_backup_location (str): Shared backup location to be used for VDB provision on AG Cluster.. [optional]  # noqa: E501
            mssql_ag_backup_based (bool): Indicates whether to do fast operations for VDB on AG which will use a healthy secondary replica to recreate the AG or backup based operations which will use the primary replica to recreate the AG using backup and restore process.. [optional]  # noqa: E501
            mssql_ag_replicas ([MssqlAgReplica]): Indicates the mssql replica sources constitutes in MSSQL AG virtual source.. [optional]  # noqa: E501
            database_unique_name (str): The unique name of the database.. [optional]  # noqa: E501
            db_username (str): The user name of the database.. [optional]  # noqa: E501
            new_db_id (bool): Indicates whether Delphix will generate a new DBID during VDB provision or refresh.. [optional]  # noqa: E501
            redo_log_groups (int): Number of Online Redo Log Groups.. [optional]  # noqa: E501
            redo_log_size_in_mb (int): Online Redo Log size in MB.. [optional]  # noqa: E501
            custom_env_vars ([OracleCustomEnvVar]): [optional]  # noqa: E501
            active_instances ([OracleActiveInstance]): [optional]  # noqa: E501
            nfs_version (int): The NFS version that was last used to mount this source.\". [optional]  # noqa: E501
            nfs_version_reason (NfsVersionReasonEnum): [optional]  # noqa: E501
            nfs_encryption_enabled (bool): Flag indicating whether the data transfer is encrypted or not.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
