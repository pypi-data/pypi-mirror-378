"""
    Delphix DCT API

    Delphix DCT API  # noqa: E501

    The version of the OpenAPI document: 3.24.0
    Contact: support@delphix.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from delphix.api.gateway.api_client import ApiClient, Endpoint as _Endpoint
from delphix.api.gateway.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from delphix.api.gateway.model.delete_snapshot_parameters import DeleteSnapshotParameters
from delphix.api.gateway.model.delete_snapshot_response import DeleteSnapshotResponse
from delphix.api.gateway.model.delete_tag import DeleteTag
from delphix.api.gateway.model.find_by_location_response import FindByLocationResponse
from delphix.api.gateway.model.find_by_timestamp_response import FindByTimestampResponse
from delphix.api.gateway.model.get_snapshot_deletion_dependencies_response import GetSnapshotDeletionDependenciesResponse
from delphix.api.gateway.model.list_snapshots_response import ListSnapshotsResponse
from delphix.api.gateway.model.search_body import SearchBody
from delphix.api.gateway.model.search_snapshots_response import SearchSnapshotsResponse
from delphix.api.gateway.model.shared_snapshot_space_response import SharedSnapshotSpaceResponse
from delphix.api.gateway.model.snapshot import Snapshot
from delphix.api.gateway.model.snapshot_capacity_response import SnapshotCapacityResponse
from delphix.api.gateway.model.snapshot_runtime import SnapshotRuntime
from delphix.api.gateway.model.tags_request import TagsRequest
from delphix.api.gateway.model.tags_response import TagsResponse
from delphix.api.gateway.model.timeflow_range import TimeflowRange
from delphix.api.gateway.model.unset_snapshot_retention_response import UnsetSnapshotRetentionResponse
from delphix.api.gateway.model.update_snapshot_parameters import UpdateSnapshotParameters
from delphix.api.gateway.model.update_snapshot_response import UpdateSnapshotResponse


class SnapshotsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_snapshot_tags(
            self,
            snapshot_id,
            tags_request,
            **kwargs
        ):
            """Create tags for a Snapshot.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_snapshot_tags(snapshot_id, tags_request, async_req=True)
            >>> result = thread.get()

            Args:
                snapshot_id (str): The ID of the snapshot.
                tags_request (TagsRequest): Tags information for Snapshot.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TagsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['snapshot_id'] = \
                snapshot_id
            kwargs['tags_request'] = \
                tags_request
            return self.call_with_http_info(**kwargs)

        self.create_snapshot_tags = _Endpoint(
            settings={
                'response_type': (TagsResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/{snapshotId}/tags',
                'operation_id': 'create_snapshot_tags',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'snapshot_id',
                    'tags_request',
                ],
                'required': [
                    'snapshot_id',
                    'tags_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'snapshot_id',
                ]
            },
            root_map={
                'validations': {
                    ('snapshot_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'snapshot_id':
                        (str,),
                    'tags_request':
                        (TagsRequest,),
                },
                'attribute_map': {
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'snapshot_id': 'path',
                    'tags_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__create_snapshot_tags
        )

        def __delete_snapshot(
            self,
            snapshot_id,
            **kwargs
        ):
            """Delete a Snapshot.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_snapshot(snapshot_id, async_req=True)
            >>> result = thread.get()

            Args:
                snapshot_id (str): The ID of the snapshot.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DeleteSnapshotResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['snapshot_id'] = \
                snapshot_id
            return self.call_with_http_info(**kwargs)

        self.delete_snapshot = _Endpoint(
            settings={
                'response_type': (DeleteSnapshotResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/{snapshotId}',
                'operation_id': 'delete_snapshot',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'snapshot_id',
                ],
                'required': [
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'snapshot_id',
                ]
            },
            root_map={
                'validations': {
                    ('snapshot_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'snapshot_id':
                        (str,),
                },
                'attribute_map': {
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'snapshot_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_snapshot
        )

        def __delete_snapshot_by_id(
            self,
            snapshot_id,
            **kwargs
        ):
            """Delete a Snapshot.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_snapshot_by_id(snapshot_id, async_req=True)
            >>> result = thread.get()

            Args:
                snapshot_id (str): The ID of the snapshot.

            Keyword Args:
                delete_snapshot_parameters (DeleteSnapshotParameters): The parameters to delete a Snapshot.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DeleteSnapshotResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['snapshot_id'] = \
                snapshot_id
            return self.call_with_http_info(**kwargs)

        self.delete_snapshot_by_id = _Endpoint(
            settings={
                'response_type': (DeleteSnapshotResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/{snapshotId}/delete',
                'operation_id': 'delete_snapshot_by_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'snapshot_id',
                    'delete_snapshot_parameters',
                ],
                'required': [
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'snapshot_id',
                ]
            },
            root_map={
                'validations': {
                    ('snapshot_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'snapshot_id':
                        (str,),
                    'delete_snapshot_parameters':
                        (DeleteSnapshotParameters,),
                },
                'attribute_map': {
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'snapshot_id': 'path',
                    'delete_snapshot_parameters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__delete_snapshot_by_id
        )

        def __delete_snapshot_tags(
            self,
            snapshot_id,
            **kwargs
        ):
            """Delete tags for a Snapshot.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_snapshot_tags(snapshot_id, async_req=True)
            >>> result = thread.get()

            Args:
                snapshot_id (str): The ID of the snapshot.

            Keyword Args:
                delete_tag (DeleteTag): The parameters to delete tags. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['snapshot_id'] = \
                snapshot_id
            return self.call_with_http_info(**kwargs)

        self.delete_snapshot_tags = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/{snapshotId}/tags/delete',
                'operation_id': 'delete_snapshot_tags',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'snapshot_id',
                    'delete_tag',
                ],
                'required': [
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'snapshot_id',
                ]
            },
            root_map={
                'validations': {
                    ('snapshot_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'snapshot_id':
                        (str,),
                    'delete_tag':
                        (DeleteTag,),
                },
                'attribute_map': {
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'snapshot_id': 'path',
                    'delete_tag': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__delete_snapshot_tags
        )

        def __find_by_location(
            self,
            dataset_id,
            location,
            **kwargs
        ):
            """Get the snapshots at this location for a dataset.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.find_by_location(dataset_id, location, async_req=True)
            >>> result = thread.get()

            Args:
                dataset_id (str): The ID of the dSource or VDB.
                location (str): The location

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FindByLocationResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['dataset_id'] = \
                dataset_id
            kwargs['location'] = \
                location
            return self.call_with_http_info(**kwargs)

        self.find_by_location = _Endpoint(
            settings={
                'response_type': (FindByLocationResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/find_by_location',
                'operation_id': 'find_by_location',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset_id',
                    'location',
                ],
                'required': [
                    'dataset_id',
                    'location',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dataset_id',
                    'location',
                ]
            },
            root_map={
                'validations': {
                    ('dataset_id',): {

                        'min_length': 1,
                    },
                    ('location',): {
                        'max_length': 256,
                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dataset_id':
                        (str,),
                    'location':
                        (str,),
                },
                'attribute_map': {
                    'dataset_id': 'dataset_id',
                    'location': 'location',
                },
                'location_map': {
                    'dataset_id': 'query',
                    'location': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__find_by_location
        )

        def __find_by_timestamp(
            self,
            dataset_id,
            timestamp,
            **kwargs
        ):
            """Get the snapshots at this timestamp for a dataset.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.find_by_timestamp(dataset_id, timestamp, async_req=True)
            >>> result = thread.get()

            Args:
                dataset_id (str): The ID of the dSource or VDB.
                timestamp (datetime): The desired point in time.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FindByTimestampResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['dataset_id'] = \
                dataset_id
            kwargs['timestamp'] = \
                timestamp
            return self.call_with_http_info(**kwargs)

        self.find_by_timestamp = _Endpoint(
            settings={
                'response_type': (FindByTimestampResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/find_by_timestamp',
                'operation_id': 'find_by_timestamp',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset_id',
                    'timestamp',
                ],
                'required': [
                    'dataset_id',
                    'timestamp',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dataset_id',
                ]
            },
            root_map={
                'validations': {
                    ('dataset_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dataset_id':
                        (str,),
                    'timestamp':
                        (datetime,),
                },
                'attribute_map': {
                    'dataset_id': 'dataset_id',
                    'timestamp': 'timestamp',
                },
                'location_map': {
                    'dataset_id': 'query',
                    'timestamp': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__find_by_timestamp
        )

        def __get_shared_snapshot_space(
            self,
            dataset_id,
            **kwargs
        ):
            """API to fetch the shared snapshot space.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_shared_snapshot_space(dataset_id, async_req=True)
            >>> result = thread.get()

            Args:
                dataset_id (str): The ID of the dSource or VDB.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SharedSnapshotSpaceResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['dataset_id'] = \
                dataset_id
            return self.call_with_http_info(**kwargs)

        self.get_shared_snapshot_space = _Endpoint(
            settings={
                'response_type': (SharedSnapshotSpaceResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/shared-space',
                'operation_id': 'get_shared_snapshot_space',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dataset_id',
                ],
                'required': [
                    'dataset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dataset_id',
                ]
            },
            root_map={
                'validations': {
                    ('dataset_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dataset_id':
                        (str,),
                },
                'attribute_map': {
                    'dataset_id': 'dataset_id',
                },
                'location_map': {
                    'dataset_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_shared_snapshot_space
        )

        def __get_snapshot_by_id(
            self,
            snapshot_id,
            **kwargs
        ):
            """Get a Snapshot by ID.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_snapshot_by_id(snapshot_id, async_req=True)
            >>> result = thread.get()

            Args:
                snapshot_id (str): The ID of the snapshot.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Snapshot
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['snapshot_id'] = \
                snapshot_id
            return self.call_with_http_info(**kwargs)

        self.get_snapshot_by_id = _Endpoint(
            settings={
                'response_type': (Snapshot,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/{snapshotId}',
                'operation_id': 'get_snapshot_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'snapshot_id',
                ],
                'required': [
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'snapshot_id',
                ]
            },
            root_map={
                'validations': {
                    ('snapshot_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'snapshot_id':
                        (str,),
                },
                'attribute_map': {
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'snapshot_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_snapshot_by_id
        )

        def __get_snapshot_deletion_dependencies(
            self,
            snapshot_id,
            **kwargs
        ):
            """Get deletion dependencies for a snapshot.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_snapshot_deletion_dependencies(snapshot_id, async_req=True)
            >>> result = thread.get()

            Args:
                snapshot_id (str): The ID of the snapshot.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GetSnapshotDeletionDependenciesResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['snapshot_id'] = \
                snapshot_id
            return self.call_with_http_info(**kwargs)

        self.get_snapshot_deletion_dependencies = _Endpoint(
            settings={
                'response_type': (GetSnapshotDeletionDependenciesResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/{snapshotId}/deletion-dependencies',
                'operation_id': 'get_snapshot_deletion_dependencies',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'snapshot_id',
                ],
                'required': [
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'snapshot_id',
                ]
            },
            root_map={
                'validations': {
                    ('snapshot_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'snapshot_id':
                        (str,),
                },
                'attribute_map': {
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'snapshot_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_snapshot_deletion_dependencies
        )

        def __get_snapshot_runtime_by_id(
            self,
            snapshot_id,
            **kwargs
        ):
            """Get a runtime object of a snapshot by id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_snapshot_runtime_by_id(snapshot_id, async_req=True)
            >>> result = thread.get()

            Args:
                snapshot_id (str): The ID of the snapshot.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SnapshotRuntime
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['snapshot_id'] = \
                snapshot_id
            return self.call_with_http_info(**kwargs)

        self.get_snapshot_runtime_by_id = _Endpoint(
            settings={
                'response_type': (SnapshotRuntime,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/{snapshotId}/runtime',
                'operation_id': 'get_snapshot_runtime_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'snapshot_id',
                ],
                'required': [
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'snapshot_id',
                ]
            },
            root_map={
                'validations': {
                    ('snapshot_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'snapshot_id':
                        (str,),
                },
                'attribute_map': {
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'snapshot_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_snapshot_runtime_by_id
        )

        def __get_snapshot_tags(
            self,
            snapshot_id,
            **kwargs
        ):
            """Get tags for a Snapshot.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_snapshot_tags(snapshot_id, async_req=True)
            >>> result = thread.get()

            Args:
                snapshot_id (str): The ID of the snapshot.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TagsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['snapshot_id'] = \
                snapshot_id
            return self.call_with_http_info(**kwargs)

        self.get_snapshot_tags = _Endpoint(
            settings={
                'response_type': (TagsResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/{snapshotId}/tags',
                'operation_id': 'get_snapshot_tags',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'snapshot_id',
                ],
                'required': [
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'snapshot_id',
                ]
            },
            root_map={
                'validations': {
                    ('snapshot_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'snapshot_id':
                        (str,),
                },
                'attribute_map': {
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'snapshot_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_snapshot_tags
        )

        def __get_snapshot_timeflow_range(
            self,
            snapshot_id,
            **kwargs
        ):
            """Return the provisionable timeflow range based on a specific snapshot.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_snapshot_timeflow_range(snapshot_id, async_req=True)
            >>> result = thread.get()

            Args:
                snapshot_id (str): The ID of the snapshot.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TimeflowRange
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['snapshot_id'] = \
                snapshot_id
            return self.call_with_http_info(**kwargs)

        self.get_snapshot_timeflow_range = _Endpoint(
            settings={
                'response_type': (TimeflowRange,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/{snapshotId}/timeflow_range',
                'operation_id': 'get_snapshot_timeflow_range',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'snapshot_id',
                ],
                'required': [
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'snapshot_id',
                ]
            },
            root_map={
                'validations': {
                    ('snapshot_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'snapshot_id':
                        (str,),
                },
                'attribute_map': {
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'snapshot_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_snapshot_timeflow_range
        )

        def __get_snapshots(
            self,
            **kwargs
        ):
            """Retrieve the list of snapshots.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_snapshots(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100.. [optional] if omitted the server will use the default value of 100
                cursor (str): Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints.. [optional]
                sort (str, none_type): The field to sort results by. A property name with a prepended '-' signifies descending order.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ListSnapshotsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_snapshots = _Endpoint(
            settings={
                'response_type': (ListSnapshotsResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots',
                'operation_id': 'get_snapshots',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'cursor',
                    'sort',
                ],
                'required': [],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'sort',
                ],
                'validation': [
                    'limit',
                    'cursor',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                    ('cursor',): {
                        'max_length': 4096,
                        'min_length': 1,
                    },
                },
                'allowed_values': {
                    ('sort',): {
                        'None': None,
                        "ID": "id",
                        "-ID": "-id",
                        "ENGINE_ID": "engine_id",
                        "-ENGINE_ID": "-engine_id",
                        "NAMESPACE": "namespace",
                        "-NAMESPACE": "-namespace",
                        "NAME": "name",
                        "-NAME": "-name",
                        "CONSISTENCY": "consistency",
                        "-CONSISTENCY": "-consistency",
                        "MISSING_NON_LOGGED_DATA": "missing_non_logged_data",
                        "-MISSING_NON_LOGGED_DATA": "-missing_non_logged_data",
                        "DATASET_ID": "dataset_id",
                        "-DATASET_ID": "-dataset_id",
                        "CREATION_TIME": "creation_time",
                        "-CREATION_TIME": "-creation_time",
                        "START_TIMESTAMP": "start_timestamp",
                        "-START_TIMESTAMP": "-start_timestamp",
                        "START_LOCATION": "start_location",
                        "-START_LOCATION": "-start_location",
                        "TIMESTAMP": "timestamp",
                        "-TIMESTAMP": "-timestamp",
                        "LOCATION": "location",
                        "-LOCATION": "-location",
                        "EXPIRATION": "expiration",
                        "-EXPIRATION": "-expiration",
                        "RETAIN_FOREVER": "retain_forever",
                        "-RETAIN_FOREVER": "-retain_forever",
                        "EFFECTIVE_EXPIRATION": "effective_expiration",
                        "-EFFECTIVE_EXPIRATION": "-effective_expiration",
                        "EFFECTIVE_RETAIN_FOREVER": "effective_retain_forever",
                        "-EFFECTIVE_RETAIN_FOREVER": "-effective_retain_forever",
                        "TIMEFLOW_ID": "timeflow_id",
                        "-TIMEFLOW_ID": "-timeflow_id",
                        "TIMEZONE": "timezone",
                        "-TIMEZONE": "-timezone",
                        "VERSION": "version",
                        "-VERSION": "-version",
                        "TEMPORARY": "temporary",
                        "-TEMPORARY": "-temporary",
                        "APPDATA_TOOLKIT": "appdata_toolkit",
                        "-APPDATA_TOOLKIT": "-appdata_toolkit",
                        "APPDATA_METADATA": "appdata_metadata",
                        "-APPDATA_METADATA": "-appdata_metadata",
                        "ASE_DB_ENCRYPTION_KEY": "ase_db_encryption_key",
                        "-ASE_DB_ENCRYPTION_KEY": "-ase_db_encryption_key",
                        "MSSQL_INTERNAL_VERSION": "mssql_internal_version",
                        "-MSSQL_INTERNAL_VERSION": "-mssql_internal_version",
                        "MSSQL_BACKUP_SET_UUID": "mssql_backup_set_uuid",
                        "-MSSQL_BACKUP_SET_UUID": "-mssql_backup_set_uuid",
                        "MSSQL_BACKUP_SOFTWARE_TYPE": "mssql_backup_software_type",
                        "-MSSQL_BACKUP_SOFTWARE_TYPE": "-mssql_backup_software_type",
                        "MSSQL_BACKUP_LOCATION_TYPE": "mssql_backup_location_type",
                        "-MSSQL_BACKUP_LOCATION_TYPE": "-mssql_backup_location_type",
                        "MSSQL_EMPTY_SNAPSHOT": "mssql_empty_snapshot",
                        "-MSSQL_EMPTY_SNAPSHOT": "-mssql_empty_snapshot",
                        "ORACLE_FROM_PHYSICAL_STANDBY_VDB": "oracle_from_physical_standby_vdb",
                        "-ORACLE_FROM_PHYSICAL_STANDBY_VDB": "-oracle_from_physical_standby_vdb",
                        "ORACLE_REDO_LOG_SIZE_IN_BYTES": "oracle_redo_log_size_in_bytes",
                        "-ORACLE_REDO_LOG_SIZE_IN_BYTES": "-oracle_redo_log_size_in_bytes"
                    },
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'cursor':
                        (str,),
                    'sort':
                        (str, none_type,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'cursor': 'cursor',
                    'sort': 'sort',
                },
                'location_map': {
                    'limit': 'query',
                    'cursor': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_snapshots
        )

        def __get_snapshots_capacity_data(
            self,
            engine_id,
            **kwargs
        ):
            """Lists capacity metrics for all snapshots of dataset or the engine.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_snapshots_capacity_data(engine_id, async_req=True)
            >>> result = thread.get()

            Args:
                engine_id (str): ID of a registered engine.

            Keyword Args:
                dataset_id (str): The ID of the dSource or VDB.. [optional]
                limit (int): Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100.. [optional] if omitted the server will use the default value of 100
                cursor (str): Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SnapshotCapacityResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['engine_id'] = \
                engine_id
            return self.call_with_http_info(**kwargs)

        self.get_snapshots_capacity_data = _Endpoint(
            settings={
                'response_type': (SnapshotCapacityResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/capacity',
                'operation_id': 'get_snapshots_capacity_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'engine_id',
                    'dataset_id',
                    'limit',
                    'cursor',
                ],
                'required': [
                    'engine_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'engine_id',
                    'dataset_id',
                    'limit',
                    'cursor',
                ]
            },
            root_map={
                'validations': {
                    ('engine_id',): {

                        'min_length': 1,
                    },
                    ('dataset_id',): {

                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                    ('cursor',): {
                        'max_length': 4096,
                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'engine_id':
                        (str,),
                    'dataset_id':
                        (str,),
                    'limit':
                        (int,),
                    'cursor':
                        (str,),
                },
                'attribute_map': {
                    'engine_id': 'engine_id',
                    'dataset_id': 'dataset_id',
                    'limit': 'limit',
                    'cursor': 'cursor',
                },
                'location_map': {
                    'engine_id': 'query',
                    'dataset_id': 'query',
                    'limit': 'query',
                    'cursor': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_snapshots_capacity_data
        )

        def __search_snapshots(
            self,
            **kwargs
        ):
            """Search snapshots.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search_snapshots(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100.. [optional] if omitted the server will use the default value of 100
                cursor (str): Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints.. [optional]
                sort (str, none_type): The field to sort results by. A property name with a prepended '-' signifies descending order.. [optional]
                search_body (SearchBody): A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS 'foobar', field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN ['Goku', 'Vegeta'] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically `SEARCH '12'` would match an item with an attribute with an integer value of `123`.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ 'Goku' | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ 'Goku' |  ## Grouping Parenthesis `()` can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS 'foo')  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \"foo\", \"bar\", \"foo bar\", 'foo', 'bar', 'foo bar' | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], ['foo', \"bar\"] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SearchSnapshotsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.search_snapshots = _Endpoint(
            settings={
                'response_type': (SearchSnapshotsResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/search',
                'operation_id': 'search_snapshots',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'cursor',
                    'sort',
                    'search_body',
                ],
                'required': [],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'sort',
                ],
                'validation': [
                    'limit',
                    'cursor',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                    ('cursor',): {
                        'max_length': 4096,
                        'min_length': 1,
                    },
                },
                'allowed_values': {
                    ('sort',): {
                        'None': None,
                        "ID": "id",
                        "-ID": "-id",
                        "ENGINE_ID": "engine_id",
                        "-ENGINE_ID": "-engine_id",
                        "NAMESPACE": "namespace",
                        "-NAMESPACE": "-namespace",
                        "NAME": "name",
                        "-NAME": "-name",
                        "CONSISTENCY": "consistency",
                        "-CONSISTENCY": "-consistency",
                        "MISSING_NON_LOGGED_DATA": "missing_non_logged_data",
                        "-MISSING_NON_LOGGED_DATA": "-missing_non_logged_data",
                        "DATASET_ID": "dataset_id",
                        "-DATASET_ID": "-dataset_id",
                        "CREATION_TIME": "creation_time",
                        "-CREATION_TIME": "-creation_time",
                        "START_TIMESTAMP": "start_timestamp",
                        "-START_TIMESTAMP": "-start_timestamp",
                        "START_LOCATION": "start_location",
                        "-START_LOCATION": "-start_location",
                        "TIMESTAMP": "timestamp",
                        "-TIMESTAMP": "-timestamp",
                        "LOCATION": "location",
                        "-LOCATION": "-location",
                        "EXPIRATION": "expiration",
                        "-EXPIRATION": "-expiration",
                        "RETAIN_FOREVER": "retain_forever",
                        "-RETAIN_FOREVER": "-retain_forever",
                        "EFFECTIVE_EXPIRATION": "effective_expiration",
                        "-EFFECTIVE_EXPIRATION": "-effective_expiration",
                        "EFFECTIVE_RETAIN_FOREVER": "effective_retain_forever",
                        "-EFFECTIVE_RETAIN_FOREVER": "-effective_retain_forever",
                        "TIMEFLOW_ID": "timeflow_id",
                        "-TIMEFLOW_ID": "-timeflow_id",
                        "TIMEZONE": "timezone",
                        "-TIMEZONE": "-timezone",
                        "VERSION": "version",
                        "-VERSION": "-version",
                        "TEMPORARY": "temporary",
                        "-TEMPORARY": "-temporary",
                        "APPDATA_TOOLKIT": "appdata_toolkit",
                        "-APPDATA_TOOLKIT": "-appdata_toolkit",
                        "APPDATA_METADATA": "appdata_metadata",
                        "-APPDATA_METADATA": "-appdata_metadata",
                        "ASE_DB_ENCRYPTION_KEY": "ase_db_encryption_key",
                        "-ASE_DB_ENCRYPTION_KEY": "-ase_db_encryption_key",
                        "MSSQL_INTERNAL_VERSION": "mssql_internal_version",
                        "-MSSQL_INTERNAL_VERSION": "-mssql_internal_version",
                        "MSSQL_BACKUP_SET_UUID": "mssql_backup_set_uuid",
                        "-MSSQL_BACKUP_SET_UUID": "-mssql_backup_set_uuid",
                        "MSSQL_BACKUP_SOFTWARE_TYPE": "mssql_backup_software_type",
                        "-MSSQL_BACKUP_SOFTWARE_TYPE": "-mssql_backup_software_type",
                        "MSSQL_BACKUP_LOCATION_TYPE": "mssql_backup_location_type",
                        "-MSSQL_BACKUP_LOCATION_TYPE": "-mssql_backup_location_type",
                        "MSSQL_EMPTY_SNAPSHOT": "mssql_empty_snapshot",
                        "-MSSQL_EMPTY_SNAPSHOT": "-mssql_empty_snapshot",
                        "ORACLE_FROM_PHYSICAL_STANDBY_VDB": "oracle_from_physical_standby_vdb",
                        "-ORACLE_FROM_PHYSICAL_STANDBY_VDB": "-oracle_from_physical_standby_vdb",
                        "ORACLE_REDO_LOG_SIZE_IN_BYTES": "oracle_redo_log_size_in_bytes",
                        "-ORACLE_REDO_LOG_SIZE_IN_BYTES": "-oracle_redo_log_size_in_bytes"
                    },
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'cursor':
                        (str,),
                    'sort':
                        (str, none_type,),
                    'search_body':
                        (SearchBody,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'cursor': 'cursor',
                    'sort': 'sort',
                },
                'location_map': {
                    'limit': 'query',
                    'cursor': 'query',
                    'sort': 'query',
                    'search_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__search_snapshots
        )

        def __unset_snapshot_retention(
            self,
            snapshot_id,
            **kwargs
        ):
            """Unset a Snapshot's expiration, removing expiration and retain_forever values for the snapshot.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.unset_snapshot_retention(snapshot_id, async_req=True)
            >>> result = thread.get()

            Args:
                snapshot_id (str): The ID of the snapshot.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UnsetSnapshotRetentionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['snapshot_id'] = \
                snapshot_id
            return self.call_with_http_info(**kwargs)

        self.unset_snapshot_retention = _Endpoint(
            settings={
                'response_type': (UnsetSnapshotRetentionResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/{snapshotId}/unset_expiration',
                'operation_id': 'unset_snapshot_retention',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'snapshot_id',
                ],
                'required': [
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'snapshot_id',
                ]
            },
            root_map={
                'validations': {
                    ('snapshot_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'snapshot_id':
                        (str,),
                },
                'attribute_map': {
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'snapshot_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__unset_snapshot_retention
        )

        def __update_snapshot(
            self,
            snapshot_id,
            **kwargs
        ):
            """Update values of a Snapshot.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_snapshot(snapshot_id, async_req=True)
            >>> result = thread.get()

            Args:
                snapshot_id (str): The ID of the snapshot.

            Keyword Args:
                update_snapshot_parameters (UpdateSnapshotParameters): The new data to update a Snapshot.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UpdateSnapshotResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['snapshot_id'] = \
                snapshot_id
            return self.call_with_http_info(**kwargs)

        self.update_snapshot = _Endpoint(
            settings={
                'response_type': (UpdateSnapshotResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/snapshots/{snapshotId}',
                'operation_id': 'update_snapshot',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'snapshot_id',
                    'update_snapshot_parameters',
                ],
                'required': [
                    'snapshot_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'snapshot_id',
                ]
            },
            root_map={
                'validations': {
                    ('snapshot_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'snapshot_id':
                        (str,),
                    'update_snapshot_parameters':
                        (UpdateSnapshotParameters,),
                },
                'attribute_map': {
                    'snapshot_id': 'snapshotId',
                },
                'location_map': {
                    'snapshot_id': 'path',
                    'update_snapshot_parameters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_snapshot
        )
