"""
    Delphix DCT API

    Delphix DCT API  # noqa: E501

    The version of the OpenAPI document: 3.24.0
    Contact: support@delphix.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from delphix.api.gateway.api_client import ApiClient, Endpoint as _Endpoint
from delphix.api.gateway.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from delphix.api.gateway.model.cleanup_execution_response import CleanupExecutionResponse
from delphix.api.gateway.model.execution import Execution
from delphix.api.gateway.model.execution_cancel_parameters import ExecutionCancelParameters
from delphix.api.gateway.model.execution_component import ExecutionComponent
from delphix.api.gateway.model.execution_component_log import ExecutionComponentLog
from delphix.api.gateway.model.execution_components_list_response import ExecutionComponentsListResponse
from delphix.api.gateway.model.execution_components_search_response import ExecutionComponentsSearchResponse
from delphix.api.gateway.model.execution_log import ExecutionLog
from delphix.api.gateway.model.list_discovery_results_response import ListDiscoveryResultsResponse
from delphix.api.gateway.model.list_execution_events_response import ListExecutionEventsResponse
from delphix.api.gateway.model.list_executions_response import ListExecutionsResponse
from delphix.api.gateway.model.restart_execution_response import RestartExecutionResponse
from delphix.api.gateway.model.search_body import SearchBody
from delphix.api.gateway.model.search_discovery_results_response import SearchDiscoveryResultsResponse
from delphix.api.gateway.model.search_execution_events_response import SearchExecutionEventsResponse
from delphix.api.gateway.model.search_executions_response import SearchExecutionsResponse


class ExecutionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __cancel_execution(
            self,
            execution_id,
            **kwargs
        ):
            """Cancel an Execution.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cancel_execution(execution_id, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): The ID of the Execution.

            Keyword Args:
                execution_cancel_parameters (ExecutionCancelParameters): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['execution_id'] = \
                execution_id
            return self.call_with_http_info(**kwargs)

        self.cancel_execution = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/executions/{executionId}/cancel',
                'operation_id': 'cancel_execution',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'execution_id',
                    'execution_cancel_parameters',
                ],
                'required': [
                    'execution_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'execution_id',
                ]
            },
            root_map={
                'validations': {
                    ('execution_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                    'execution_cancel_parameters':
                        (ExecutionCancelParameters,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                },
                'location_map': {
                    'execution_id': 'path',
                    'execution_cancel_parameters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__cancel_execution
        )

        def __cleanup_execution(
            self,
            execution_id,
            **kwargs
        ):
            """Cleanup an Execution (Hyperscale only).  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cleanup_execution(execution_id, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): The ID of the Execution.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CleanupExecutionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['execution_id'] = \
                execution_id
            return self.call_with_http_info(**kwargs)

        self.cleanup_execution = _Endpoint(
            settings={
                'response_type': (CleanupExecutionResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/executions/{executionId}/cleanup',
                'operation_id': 'cleanup_execution',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'execution_id',
                ],
                'required': [
                    'execution_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'execution_id',
                ]
            },
            root_map={
                'validations': {
                    ('execution_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                },
                'location_map': {
                    'execution_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__cleanup_execution
        )

        def __get_discovery_results(
            self,
            execution_id,
            **kwargs
        ):
            """Retrieve the list of discovery results for a masking execution.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_discovery_results(execution_id, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): The ID of the Execution.

            Keyword Args:
                limit (int): Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100.. [optional] if omitted the server will use the default value of 100
                cursor (str): Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints.. [optional]
                sort (str, none_type): The field to sort results by. A property name with a prepended '-' signifies a descending order.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ListDiscoveryResultsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['execution_id'] = \
                execution_id
            return self.call_with_http_info(**kwargs)

        self.get_discovery_results = _Endpoint(
            settings={
                'response_type': (ListDiscoveryResultsResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/executions/{executionId}/discovery-results',
                'operation_id': 'get_discovery_results',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'execution_id',
                    'limit',
                    'cursor',
                    'sort',
                ],
                'required': [
                    'execution_id',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'sort',
                ],
                'validation': [
                    'execution_id',
                    'limit',
                    'cursor',
                ]
            },
            root_map={
                'validations': {
                    ('execution_id',): {

                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                    ('cursor',): {
                        'max_length': 4096,
                        'min_length': 1,
                    },
                },
                'allowed_values': {
                    ('sort',): {
                        'None': None,
                        "ID": "id",
                        "-ID": "-id",
                        "TABLE_NAME": "table_name",
                        "-TABLE_NAME": "-table_name",
                        "FILE_NAME": "file_name",
                        "-FILE_NAME": "-file_name",
                        "COLUMN_NAME": "column_name",
                        "-COLUMN_NAME": "-column_name",
                        "FIELD_NAME": "field_name",
                        "-FIELD_NAME": "-field_name",
                        "DATA_CLASS_NAME": "data_class_name",
                        "-DATA_CLASS_NAME": "-data_class_name",
                        "ALGORITHM_NAME": "algorithm_name",
                        "-ALGORITHM_NAME": "-algorithm_name",
                        "DATA_TYPE": "data_type",
                        "-DATA_TYPE": "-data_type",
                        "CONFIDENCE": "confidence",
                        "-CONFIDENCE": "-confidence",
                        "IS_PROFILER_WRITABLE": "is_profiler_writable",
                        "-IS_PROFILER_WRITABLE": "-is_profiler_writable"
                    },
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                    'limit':
                        (int,),
                    'cursor':
                        (str,),
                    'sort':
                        (str, none_type,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                    'limit': 'limit',
                    'cursor': 'cursor',
                    'sort': 'sort',
                },
                'location_map': {
                    'execution_id': 'path',
                    'limit': 'query',
                    'cursor': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_discovery_results
        )

        def __get_execution_by_id(
            self,
            execution_id,
            **kwargs
        ):
            """Retrieve an Execution by ID.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_execution_by_id(execution_id, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): The ID of the Execution.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Execution
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['execution_id'] = \
                execution_id
            return self.call_with_http_info(**kwargs)

        self.get_execution_by_id = _Endpoint(
            settings={
                'response_type': (Execution,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/executions/{executionId}',
                'operation_id': 'get_execution_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'execution_id',
                ],
                'required': [
                    'execution_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'execution_id',
                ]
            },
            root_map={
                'validations': {
                    ('execution_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                },
                'location_map': {
                    'execution_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_execution_by_id
        )

        def __get_execution_component_by_id(
            self,
            execution_id,
            execution_component_id,
            **kwargs
        ):
            """Get an execution component by ID.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_execution_component_by_id(execution_id, execution_component_id, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): The ID of the Execution.
                execution_component_id (str): The ID of the Execution Component.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExecutionComponent
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['execution_id'] = \
                execution_id
            kwargs['execution_component_id'] = \
                execution_component_id
            return self.call_with_http_info(**kwargs)

        self.get_execution_component_by_id = _Endpoint(
            settings={
                'response_type': (ExecutionComponent,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/executions/{executionId}/execution-components/{executionComponentId}',
                'operation_id': 'get_execution_component_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'execution_id',
                    'execution_component_id',
                ],
                'required': [
                    'execution_id',
                    'execution_component_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'execution_id',
                ]
            },
            root_map={
                'validations': {
                    ('execution_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                    'execution_component_id':
                        (str,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                    'execution_component_id': 'executionComponentId',
                },
                'location_map': {
                    'execution_id': 'path',
                    'execution_component_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_execution_component_by_id
        )

        def __get_execution_component_log(
            self,
            execution_id,
            execution_component_id,
            **kwargs
        ):
            """Get an execution component log.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_execution_component_log(execution_id, execution_component_id, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): The ID of the Execution.
                execution_component_id (str): The ID of the Execution Component.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExecutionComponentLog
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['execution_id'] = \
                execution_id
            kwargs['execution_component_id'] = \
                execution_component_id
            return self.call_with_http_info(**kwargs)

        self.get_execution_component_log = _Endpoint(
            settings={
                'response_type': (ExecutionComponentLog,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/executions/{executionId}/execution-components/{executionComponentId}/log',
                'operation_id': 'get_execution_component_log',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'execution_id',
                    'execution_component_id',
                ],
                'required': [
                    'execution_id',
                    'execution_component_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'execution_id',
                ]
            },
            root_map={
                'validations': {
                    ('execution_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                    'execution_component_id':
                        (str,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                    'execution_component_id': 'executionComponentId',
                },
                'location_map': {
                    'execution_id': 'path',
                    'execution_component_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_execution_component_log
        )

        def __get_execution_components(
            self,
            execution_id,
            **kwargs
        ):
            """Get execution components for an execution.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_execution_components(execution_id, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): The ID of the Execution.

            Keyword Args:
                limit (int): Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100.. [optional] if omitted the server will use the default value of 100
                cursor (str): Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints.. [optional]
                sort (str, none_type): The field to sort results by. A property name with a prepended '-' signifies a descending order.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExecutionComponentsListResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['execution_id'] = \
                execution_id
            return self.call_with_http_info(**kwargs)

        self.get_execution_components = _Endpoint(
            settings={
                'response_type': (ExecutionComponentsListResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/executions/{executionId}/execution-components',
                'operation_id': 'get_execution_components',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'execution_id',
                    'limit',
                    'cursor',
                    'sort',
                ],
                'required': [
                    'execution_id',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'sort',
                ],
                'validation': [
                    'execution_id',
                    'limit',
                    'cursor',
                ]
            },
            root_map={
                'validations': {
                    ('execution_id',): {

                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                    ('cursor',): {
                        'max_length': 4096,
                        'min_length': 1,
                    },
                },
                'allowed_values': {
                    ('sort',): {
                        'None': None,
                        "ID": "id",
                        "-ID": "-id",
                        "NAME": "name",
                        "-NAME": "-name",
                        "EXECUTION_ID": "execution_id",
                        "-EXECUTION_ID": "-execution_id",
                        "STATUS": "status",
                        "-STATUS": "-status",
                        "ROWS_MASKED": "rows_masked",
                        "-ROWS_MASKED": "-rows_masked",
                        "ROWS_TOTAL": "rows_total",
                        "-ROWS_TOTAL": "-rows_total",
                        "BYTES_PROCESSED": "bytes_processed",
                        "-BYTES_PROCESSED": "-bytes_processed",
                        "BYTES_TOTAL": "bytes_total",
                        "-BYTES_TOTAL": "-bytes_total",
                        "START_TIME": "start_time",
                        "-START_TIME": "-start_time",
                        "END_TIME": "end_time",
                        "-END_TIME": "-end_time",
                        "NON_CONFORMING_DATA_COUNT": "non_conforming_data_count",
                        "-NON_CONFORMING_DATA_COUNT": "-non_conforming_data_count"
                    },
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                    'limit':
                        (int,),
                    'cursor':
                        (str,),
                    'sort':
                        (str, none_type,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                    'limit': 'limit',
                    'cursor': 'cursor',
                    'sort': 'sort',
                },
                'location_map': {
                    'execution_id': 'path',
                    'limit': 'query',
                    'cursor': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_execution_components
        )

        def __get_execution_events(
            self,
            execution_id,
            **kwargs
        ):
            """Retrieve the list of events for a masking execution.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_execution_events(execution_id, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): The ID of the Execution.

            Keyword Args:
                limit (int): Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100.. [optional] if omitted the server will use the default value of 100
                cursor (str): Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints.. [optional]
                sort (str, none_type): The field to sort results by. A property name with a prepended '-' signifies a descending order.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ListExecutionEventsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['execution_id'] = \
                execution_id
            return self.call_with_http_info(**kwargs)

        self.get_execution_events = _Endpoint(
            settings={
                'response_type': (ListExecutionEventsResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/executions/{executionId}/events',
                'operation_id': 'get_execution_events',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'execution_id',
                    'limit',
                    'cursor',
                    'sort',
                ],
                'required': [
                    'execution_id',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'sort',
                ],
                'validation': [
                    'execution_id',
                    'limit',
                    'cursor',
                ]
            },
            root_map={
                'validations': {
                    ('execution_id',): {

                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                    ('cursor',): {
                        'max_length': 4096,
                        'min_length': 1,
                    },
                },
                'allowed_values': {
                    ('sort',): {
                        'None': None,
                        "ID": "id",
                        "-ID": "-id",
                        "EXECUTION_ID": "execution_id",
                        "-EXECUTION_ID": "-execution_id",
                        "EXECUTION_COMPONENT_ID": "execution_component_id",
                        "-EXECUTION_COMPONENT_ID": "-execution_component_id",
                        "EVENT_TYPE": "event_type",
                        "-EVENT_TYPE": "-event_type",
                        "SEVERITY": "severity",
                        "-SEVERITY": "-severity",
                        "CAUSE": "cause",
                        "-CAUSE": "-cause",
                        "COUNT": "count",
                        "-COUNT": "-count",
                        "TIMESTAMP": "timestamp",
                        "-TIMESTAMP": "-timestamp",
                        "MASKED_OBJECT_NAME": "masked_object_name",
                        "-MASKED_OBJECT_NAME": "-masked_object_name",
                        "ALGORITHM_NAME": "algorithm_name",
                        "-ALGORITHM_NAME": "-algorithm_name",
                        "EXCEPTION_TYPE": "exception_type",
                        "-EXCEPTION_TYPE": "-exception_type",
                        "EXCEPTION_DETAIL": "exception_detail",
                        "-EXCEPTION_DETAIL": "-exception_detail"
                    },
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                    'limit':
                        (int,),
                    'cursor':
                        (str,),
                    'sort':
                        (str, none_type,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                    'limit': 'limit',
                    'cursor': 'cursor',
                    'sort': 'sort',
                },
                'location_map': {
                    'execution_id': 'path',
                    'limit': 'query',
                    'cursor': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_execution_events
        )

        def __get_execution_log(
            self,
            execution_id,
            **kwargs
        ):
            """Retrieve the masking execution log.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_execution_log(execution_id, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): The ID of the Execution.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExecutionLog
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['execution_id'] = \
                execution_id
            return self.call_with_http_info(**kwargs)

        self.get_execution_log = _Endpoint(
            settings={
                'response_type': (ExecutionLog,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/executions/{executionId}/log',
                'operation_id': 'get_execution_log',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'execution_id',
                ],
                'required': [
                    'execution_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'execution_id',
                ]
            },
            root_map={
                'validations': {
                    ('execution_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                },
                'location_map': {
                    'execution_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_execution_log
        )

        def __get_executions(
            self,
            **kwargs
        ):
            """Retrieve the list of masking executions.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_executions(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100.. [optional] if omitted the server will use the default value of 100
                cursor (str): Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints.. [optional]
                sort (str, none_type): The field to sort results by. A property name with a prepended '-' signifies a descending order.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ListExecutionsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_executions = _Endpoint(
            settings={
                'response_type': (ListExecutionsResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/executions',
                'operation_id': 'get_executions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'cursor',
                    'sort',
                ],
                'required': [],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'sort',
                ],
                'validation': [
                    'limit',
                    'cursor',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                    ('cursor',): {
                        'max_length': 4096,
                        'min_length': 1,
                    },
                },
                'allowed_values': {
                    ('sort',): {
                        'None': None,
                        "ID": "id",
                        "-ID": "-id",
                        "ENGINE_ID": "engine_id",
                        "-ENGINE_ID": "-engine_id",
                        "ENGINE_NAME": "engine_name",
                        "-ENGINE_NAME": "-engine_name",
                        "JOB_ORCHESTRATOR_ID": "job_orchestrator_id",
                        "-JOB_ORCHESTRATOR_ID": "-job_orchestrator_id",
                        "JOB_ORCHESTRATOR_NAME": "job_orchestrator_name",
                        "-JOB_ORCHESTRATOR_NAME": "-job_orchestrator_name",
                        "MASKING_JOB_ID": "masking_job_id",
                        "-MASKING_JOB_ID": "-masking_job_id",
                        "MASKING_JOB_NAME": "masking_job_name",
                        "-MASKING_JOB_NAME": "-masking_job_name",
                        "DCT_MANAGED": "dct_managed",
                        "-DCT_MANAGED": "-dct_managed",
                        "SOURCE_CONNECTOR_ID": "source_connector_id",
                        "-SOURCE_CONNECTOR_ID": "-source_connector_id",
                        "TARGET_CONNECTOR_ID": "target_connector_id",
                        "-TARGET_CONNECTOR_ID": "-target_connector_id",
                        "STATUS": "status",
                        "-STATUS": "-status",
                        "ROWS_MASKED": "rows_masked",
                        "-ROWS_MASKED": "-rows_masked",
                        "ROWS_TOTAL": "rows_total",
                        "-ROWS_TOTAL": "-rows_total",
                        "BYTES_PROCESSED": "bytes_processed",
                        "-BYTES_PROCESSED": "-bytes_processed",
                        "BYTES_TOTAL": "bytes_total",
                        "-BYTES_TOTAL": "-bytes_total",
                        "START_TIME": "start_time",
                        "-START_TIME": "-start_time",
                        "END_TIME": "end_time",
                        "-END_TIME": "-end_time",
                        "SUBMIT_TIME": "submit_time",
                        "-SUBMIT_TIME": "-submit_time",
                        "RUN_DURATION": "run_duration",
                        "-RUN_DURATION": "-run_duration",
                        "QUEUE_DURATION": "queue_duration",
                        "-QUEUE_DURATION": "-queue_duration",
                        "TOTAL_DURATION": "total_duration",
                        "-TOTAL_DURATION": "-total_duration",
                        "ACCOUNT_ID": "account_id",
                        "-ACCOUNT_ID": "-account_id",
                        "ACCOUNT_NAME": "account_name",
                        "-ACCOUNT_NAME": "-account_name"
                    },
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'cursor':
                        (str,),
                    'sort':
                        (str, none_type,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'cursor': 'cursor',
                    'sort': 'sort',
                },
                'location_map': {
                    'limit': 'query',
                    'cursor': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_executions
        )

        def __restart_execution(
            self,
            execution_id,
            **kwargs
        ):
            """Restart an Execution (Hyperscale only).  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.restart_execution(execution_id, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): The ID of the Execution.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RestartExecutionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['execution_id'] = \
                execution_id
            return self.call_with_http_info(**kwargs)

        self.restart_execution = _Endpoint(
            settings={
                'response_type': (RestartExecutionResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/executions/{executionId}/restart',
                'operation_id': 'restart_execution',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'execution_id',
                ],
                'required': [
                    'execution_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'execution_id',
                ]
            },
            root_map={
                'validations': {
                    ('execution_id',): {

                        'min_length': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                },
                'location_map': {
                    'execution_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__restart_execution
        )

        def __search_discovery_results(
            self,
            execution_id,
            **kwargs
        ):
            """Search discovery results associated with execution of a discovery job  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search_discovery_results(execution_id, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): The ID of the Execution.

            Keyword Args:
                limit (int): Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100.. [optional] if omitted the server will use the default value of 100
                cursor (str): Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints.. [optional]
                sort (str, none_type): The field to sort results by. A property name with a prepended '-' signifies a descending order.. [optional]
                search_body (SearchBody): A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS 'foobar', field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN ['Goku', 'Vegeta'] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically `SEARCH '12'` would match an item with an attribute with an integer value of `123`.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ 'Goku' | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ 'Goku' |  ## Grouping Parenthesis `()` can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS 'foo')  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \"foo\", \"bar\", \"foo bar\", 'foo', 'bar', 'foo bar' | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], ['foo', \"bar\"] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SearchDiscoveryResultsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['execution_id'] = \
                execution_id
            return self.call_with_http_info(**kwargs)

        self.search_discovery_results = _Endpoint(
            settings={
                'response_type': (SearchDiscoveryResultsResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/executions/{executionId}/discovery-results/search',
                'operation_id': 'search_discovery_results',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'execution_id',
                    'limit',
                    'cursor',
                    'sort',
                    'search_body',
                ],
                'required': [
                    'execution_id',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'sort',
                ],
                'validation': [
                    'execution_id',
                    'limit',
                    'cursor',
                ]
            },
            root_map={
                'validations': {
                    ('execution_id',): {

                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                    ('cursor',): {
                        'max_length': 4096,
                        'min_length': 1,
                    },
                },
                'allowed_values': {
                    ('sort',): {
                        'None': None,
                        "ID": "id",
                        "-ID": "-id",
                        "TABLE_NAME": "table_name",
                        "-TABLE_NAME": "-table_name",
                        "FILE_NAME": "file_name",
                        "-FILE_NAME": "-file_name",
                        "COLUMN_NAME": "column_name",
                        "-COLUMN_NAME": "-column_name",
                        "FIELD_NAME": "field_name",
                        "-FIELD_NAME": "-field_name",
                        "DATA_CLASS_NAME": "data_class_name",
                        "-DATA_CLASS_NAME": "-data_class_name",
                        "ALGORITHM_NAME": "algorithm_name",
                        "-ALGORITHM_NAME": "-algorithm_name",
                        "DATA_TYPE": "data_type",
                        "-DATA_TYPE": "-data_type",
                        "CONFIDENCE": "confidence",
                        "-CONFIDENCE": "-confidence",
                        "IS_PROFILER_WRITABLE": "is_profiler_writable",
                        "-IS_PROFILER_WRITABLE": "-is_profiler_writable"
                    },
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                    'limit':
                        (int,),
                    'cursor':
                        (str,),
                    'sort':
                        (str, none_type,),
                    'search_body':
                        (SearchBody,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                    'limit': 'limit',
                    'cursor': 'cursor',
                    'sort': 'sort',
                },
                'location_map': {
                    'execution_id': 'path',
                    'limit': 'query',
                    'cursor': 'query',
                    'sort': 'query',
                    'search_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__search_discovery_results
        )

        def __search_execution_components(
            self,
            execution_id,
            **kwargs
        ):
            """Search execution components for an execution.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search_execution_components(execution_id, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): The ID of the Execution.

            Keyword Args:
                limit (int): Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100.. [optional] if omitted the server will use the default value of 100
                cursor (str): Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints.. [optional]
                sort (str, none_type): The field to sort results by. A property name with a prepended '-' signifies a descending order.. [optional]
                search_body (SearchBody): A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS 'foobar', field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN ['Goku', 'Vegeta'] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically `SEARCH '12'` would match an item with an attribute with an integer value of `123`.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ 'Goku' | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ 'Goku' |  ## Grouping Parenthesis `()` can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS 'foo')  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \"foo\", \"bar\", \"foo bar\", 'foo', 'bar', 'foo bar' | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], ['foo', \"bar\"] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExecutionComponentsSearchResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['execution_id'] = \
                execution_id
            return self.call_with_http_info(**kwargs)

        self.search_execution_components = _Endpoint(
            settings={
                'response_type': (ExecutionComponentsSearchResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/executions/{executionId}/execution-components/search',
                'operation_id': 'search_execution_components',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'execution_id',
                    'limit',
                    'cursor',
                    'sort',
                    'search_body',
                ],
                'required': [
                    'execution_id',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'sort',
                ],
                'validation': [
                    'execution_id',
                    'limit',
                    'cursor',
                ]
            },
            root_map={
                'validations': {
                    ('execution_id',): {

                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                    ('cursor',): {
                        'max_length': 4096,
                        'min_length': 1,
                    },
                },
                'allowed_values': {
                    ('sort',): {
                        'None': None,
                        "ID": "id",
                        "-ID": "-id",
                        "NAME": "name",
                        "-NAME": "-name",
                        "EXECUTION_ID": "execution_id",
                        "-EXECUTION_ID": "-execution_id",
                        "STATUS": "status",
                        "-STATUS": "-status",
                        "ROWS_MASKED": "rows_masked",
                        "-ROWS_MASKED": "-rows_masked",
                        "ROWS_TOTAL": "rows_total",
                        "-ROWS_TOTAL": "-rows_total",
                        "BYTES_PROCESSED": "bytes_processed",
                        "-BYTES_PROCESSED": "-bytes_processed",
                        "BYTES_TOTAL": "bytes_total",
                        "-BYTES_TOTAL": "-bytes_total",
                        "START_TIME": "start_time",
                        "-START_TIME": "-start_time",
                        "END_TIME": "end_time",
                        "-END_TIME": "-end_time",
                        "NON_CONFORMING_DATA_COUNT": "non_conforming_data_count",
                        "-NON_CONFORMING_DATA_COUNT": "-non_conforming_data_count"
                    },
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                    'limit':
                        (int,),
                    'cursor':
                        (str,),
                    'sort':
                        (str, none_type,),
                    'search_body':
                        (SearchBody,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                    'limit': 'limit',
                    'cursor': 'cursor',
                    'sort': 'sort',
                },
                'location_map': {
                    'execution_id': 'path',
                    'limit': 'query',
                    'cursor': 'query',
                    'sort': 'query',
                    'search_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__search_execution_components
        )

        def __search_execution_events(
            self,
            execution_id,
            **kwargs
        ):
            """Search masking executions events.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search_execution_events(execution_id, async_req=True)
            >>> result = thread.get()

            Args:
                execution_id (str): The ID of the Execution.

            Keyword Args:
                limit (int): Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100.. [optional] if omitted the server will use the default value of 100
                cursor (str): Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints.. [optional]
                sort (str, none_type): The field to sort results by. A property name with a prepended '-' signifies a descending order.. [optional]
                search_body (SearchBody): A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS 'foobar', field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN ['Goku', 'Vegeta'] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically `SEARCH '12'` would match an item with an attribute with an integer value of `123`.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ 'Goku' | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ 'Goku' |  ## Grouping Parenthesis `()` can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS 'foo')  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \"foo\", \"bar\", \"foo bar\", 'foo', 'bar', 'foo bar' | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], ['foo', \"bar\"] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SearchExecutionEventsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['execution_id'] = \
                execution_id
            return self.call_with_http_info(**kwargs)

        self.search_execution_events = _Endpoint(
            settings={
                'response_type': (SearchExecutionEventsResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/executions/{executionId}/events/search',
                'operation_id': 'search_execution_events',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'execution_id',
                    'limit',
                    'cursor',
                    'sort',
                    'search_body',
                ],
                'required': [
                    'execution_id',
                ],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'sort',
                ],
                'validation': [
                    'execution_id',
                    'limit',
                    'cursor',
                ]
            },
            root_map={
                'validations': {
                    ('execution_id',): {

                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                    ('cursor',): {
                        'max_length': 4096,
                        'min_length': 1,
                    },
                },
                'allowed_values': {
                    ('sort',): {
                        'None': None,
                        "ID": "id",
                        "-ID": "-id",
                        "EXECUTION_ID": "execution_id",
                        "-EXECUTION_ID": "-execution_id",
                        "EXECUTION_COMPONENT_ID": "execution_component_id",
                        "-EXECUTION_COMPONENT_ID": "-execution_component_id",
                        "EVENT_TYPE": "event_type",
                        "-EVENT_TYPE": "-event_type",
                        "SEVERITY": "severity",
                        "-SEVERITY": "-severity",
                        "CAUSE": "cause",
                        "-CAUSE": "-cause",
                        "COUNT": "count",
                        "-COUNT": "-count",
                        "TIMESTAMP": "timestamp",
                        "-TIMESTAMP": "-timestamp",
                        "MASKED_OBJECT_NAME": "masked_object_name",
                        "-MASKED_OBJECT_NAME": "-masked_object_name",
                        "ALGORITHM_NAME": "algorithm_name",
                        "-ALGORITHM_NAME": "-algorithm_name",
                        "EXCEPTION_TYPE": "exception_type",
                        "-EXCEPTION_TYPE": "-exception_type",
                        "EXCEPTION_DETAIL": "exception_detail",
                        "-EXCEPTION_DETAIL": "-exception_detail"
                    },
                },
                'openapi_types': {
                    'execution_id':
                        (str,),
                    'limit':
                        (int,),
                    'cursor':
                        (str,),
                    'sort':
                        (str, none_type,),
                    'search_body':
                        (SearchBody,),
                },
                'attribute_map': {
                    'execution_id': 'executionId',
                    'limit': 'limit',
                    'cursor': 'cursor',
                    'sort': 'sort',
                },
                'location_map': {
                    'execution_id': 'path',
                    'limit': 'query',
                    'cursor': 'query',
                    'sort': 'query',
                    'search_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__search_execution_events
        )

        def __search_executions(
            self,
            **kwargs
        ):
            """Search masking executions.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.search_executions(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100.. [optional] if omitted the server will use the default value of 100
                cursor (str): Cursor to fetch the next or previous page of results. The value of this property must be extracted from the 'prev_cursor' or 'next_cursor' property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints.. [optional]
                sort (str, none_type): The field to sort results by. A property name with a prepended '-' signifies a descending order.. [optional]
                search_body (SearchBody): A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS 'foobar', field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN ['Goku', 'Vegeta'] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically `SEARCH '12'` would match an item with an attribute with an integer value of `123`.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ 'Goku' | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ 'Goku' |  ## Grouping Parenthesis `()` can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS 'foo')  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \"foo\", \"bar\", \"foo bar\", 'foo', 'bar', 'foo bar' | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], ['foo', \"bar\"] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SearchExecutionsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.search_executions = _Endpoint(
            settings={
                'response_type': (SearchExecutionsResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/executions/search',
                'operation_id': 'search_executions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'cursor',
                    'sort',
                    'search_body',
                ],
                'required': [],
                'nullable': [
                    'sort',
                ],
                'enum': [
                    'sort',
                ],
                'validation': [
                    'limit',
                    'cursor',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                    ('cursor',): {
                        'max_length': 4096,
                        'min_length': 1,
                    },
                },
                'allowed_values': {
                    ('sort',): {
                        'None': None,
                        "ID": "id",
                        "-ID": "-id",
                        "ENGINE_ID": "engine_id",
                        "-ENGINE_ID": "-engine_id",
                        "ENGINE_NAME": "engine_name",
                        "-ENGINE_NAME": "-engine_name",
                        "JOB_ORCHESTRATOR_ID": "job_orchestrator_id",
                        "-JOB_ORCHESTRATOR_ID": "-job_orchestrator_id",
                        "JOB_ORCHESTRATOR_NAME": "job_orchestrator_name",
                        "-JOB_ORCHESTRATOR_NAME": "-job_orchestrator_name",
                        "MASKING_JOB_ID": "masking_job_id",
                        "-MASKING_JOB_ID": "-masking_job_id",
                        "MASKING_JOB_NAME": "masking_job_name",
                        "-MASKING_JOB_NAME": "-masking_job_name",
                        "DCT_MANAGED": "dct_managed",
                        "-DCT_MANAGED": "-dct_managed",
                        "SOURCE_CONNECTOR_ID": "source_connector_id",
                        "-SOURCE_CONNECTOR_ID": "-source_connector_id",
                        "TARGET_CONNECTOR_ID": "target_connector_id",
                        "-TARGET_CONNECTOR_ID": "-target_connector_id",
                        "STATUS": "status",
                        "-STATUS": "-status",
                        "ROWS_MASKED": "rows_masked",
                        "-ROWS_MASKED": "-rows_masked",
                        "ROWS_TOTAL": "rows_total",
                        "-ROWS_TOTAL": "-rows_total",
                        "BYTES_PROCESSED": "bytes_processed",
                        "-BYTES_PROCESSED": "-bytes_processed",
                        "BYTES_TOTAL": "bytes_total",
                        "-BYTES_TOTAL": "-bytes_total",
                        "START_TIME": "start_time",
                        "-START_TIME": "-start_time",
                        "END_TIME": "end_time",
                        "-END_TIME": "-end_time",
                        "SUBMIT_TIME": "submit_time",
                        "-SUBMIT_TIME": "-submit_time",
                        "RUN_DURATION": "run_duration",
                        "-RUN_DURATION": "-run_duration",
                        "QUEUE_DURATION": "queue_duration",
                        "-QUEUE_DURATION": "-queue_duration",
                        "TOTAL_DURATION": "total_duration",
                        "-TOTAL_DURATION": "-total_duration",
                        "ACCOUNT_ID": "account_id",
                        "-ACCOUNT_ID": "-account_id",
                        "ACCOUNT_NAME": "account_name",
                        "-ACCOUNT_NAME": "-account_name"
                    },
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'cursor':
                        (str,),
                    'sort':
                        (str, none_type,),
                    'search_body':
                        (SearchBody,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'cursor': 'cursor',
                    'sort': 'sort',
                },
                'location_map': {
                    'limit': 'query',
                    'cursor': 'query',
                    'sort': 'query',
                    'search_body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__search_executions
        )
