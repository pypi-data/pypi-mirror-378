"""
    Delphix DCT API

    Delphix DCT API  # noqa: E501

    The version of the OpenAPI document: 3.24.0
    Contact: support@delphix.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from delphix.api.gateway.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from delphix.api.gateway.exceptions import ApiAttributeError


def lazy_import():
    from delphix.api.gateway.model.execution_status import ExecutionStatus
    from delphix.api.gateway.model.hyperscale_task_event import HyperscaleTaskEvent
    from delphix.api.gateway.model.task_event import TaskEvent
    globals()['ExecutionStatus'] = ExecutionStatus
    globals()['HyperscaleTaskEvent'] = HyperscaleTaskEvent
    globals()['TaskEvent'] = TaskEvent


class Execution(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'engine_id': (str,),  # noqa: E501
            'hyperscale_instance_id': (str,),  # noqa: E501
            'engine_name': (str,),  # noqa: E501
            'job_orchestrator_id': (str,),  # noqa: E501
            'job_orchestrator_name': (str,),  # noqa: E501
            'masking_job_id': (str,),  # noqa: E501
            'masking_job_name': (str,),  # noqa: E501
            'dct_managed': (bool,),  # noqa: E501
            'source_connector_id': (str,),  # noqa: E501
            'target_connector_id': (str,),  # noqa: E501
            'status': (ExecutionStatus,),  # noqa: E501
            'rows_masked': (int,),  # noqa: E501
            'rows_total': (int,),  # noqa: E501
            'bytes_processed': (int,),  # noqa: E501
            'bytes_total': (int,),  # noqa: E501
            'start_time': (datetime,),  # noqa: E501
            'submit_time': (datetime,),  # noqa: E501
            'end_time': (datetime,),  # noqa: E501
            'run_duration': (int,),  # noqa: E501
            'queue_duration': (int,),  # noqa: E501
            'total_duration': (int,),  # noqa: E501
            'account_id': (int,),  # noqa: E501
            'account_name': (str,),  # noqa: E501
            'task_events': ([TaskEvent],),  # noqa: E501
            'hyperscale_task_events': ([HyperscaleTaskEvent],),  # noqa: E501
            'progress': (float,),  # noqa: E501
            'execution_components_total': (int,),  # noqa: E501
            'execution_components_processed': (int,),  # noqa: E501
            'collection_execution_id': (str,),  # noqa: E501
            'data_collection_complete': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'engine_id': 'engine_id',  # noqa: E501
        'hyperscale_instance_id': 'hyperscale_instance_id',  # noqa: E501
        'engine_name': 'engine_name',  # noqa: E501
        'job_orchestrator_id': 'job_orchestrator_id',  # noqa: E501
        'job_orchestrator_name': 'job_orchestrator_name',  # noqa: E501
        'masking_job_id': 'masking_job_id',  # noqa: E501
        'masking_job_name': 'masking_job_name',  # noqa: E501
        'dct_managed': 'dct_managed',  # noqa: E501
        'source_connector_id': 'source_connector_id',  # noqa: E501
        'target_connector_id': 'target_connector_id',  # noqa: E501
        'status': 'status',  # noqa: E501
        'rows_masked': 'rows_masked',  # noqa: E501
        'rows_total': 'rows_total',  # noqa: E501
        'bytes_processed': 'bytes_processed',  # noqa: E501
        'bytes_total': 'bytes_total',  # noqa: E501
        'start_time': 'start_time',  # noqa: E501
        'submit_time': 'submit_time',  # noqa: E501
        'end_time': 'end_time',  # noqa: E501
        'run_duration': 'run_duration',  # noqa: E501
        'queue_duration': 'queue_duration',  # noqa: E501
        'total_duration': 'total_duration',  # noqa: E501
        'account_id': 'account_id',  # noqa: E501
        'account_name': 'account_name',  # noqa: E501
        'task_events': 'task_events',  # noqa: E501
        'hyperscale_task_events': 'hyperscale_task_events',  # noqa: E501
        'progress': 'progress',  # noqa: E501
        'execution_components_total': 'execution_components_total',  # noqa: E501
        'execution_components_processed': 'execution_components_processed',  # noqa: E501
        'collection_execution_id': 'collection_execution_id',  # noqa: E501
        'data_collection_complete': 'data_collection_complete',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Execution - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): The Execution entity ID.. [optional]  # noqa: E501
            engine_id (str): The ID of the engine where this execution ran.. [optional]  # noqa: E501
            hyperscale_instance_id (str): [optional]  # noqa: E501
            engine_name (str): The name of the engine where this execution ran.. [optional]  # noqa: E501
            job_orchestrator_id (str): The ID of the job orchestrator that is associated with this execution.. [optional]  # noqa: E501
            job_orchestrator_name (str): The name of the job orchestrator that is associated with this execution.. [optional]  # noqa: E501
            masking_job_id (str): The ID of the masking job that is being executed.. [optional]  # noqa: E501
            masking_job_name (str): The name of the masking job that is being executed.. [optional]  # noqa: E501
            dct_managed (bool): Indicates whether this execution is for a DCT-managed masking job.. [optional]  # noqa: E501
            source_connector_id (str): The ID of the source connector. This field is only used for multi-tenant jobs that are also on-the-fly.. [optional]  # noqa: E501
            target_connector_id (str): The ID of the target connector. This field is only used for multi-tenant jobs.. [optional]  # noqa: E501
            status (ExecutionStatus): [optional]  # noqa: E501
            rows_masked (int): The number of rows masked or profiled so far by this execution. This is not applicable for JSON file type.. [optional]  # noqa: E501
            rows_total (int): The total number of rows that this execution should mask. This value is set to -1 while the total row count is being calculated. This is not applicable for JSON file type.. [optional]  # noqa: E501
            bytes_processed (int): The number of bytes masked so far by this execution. This is only applicable for JSON file type.. [optional]  # noqa: E501
            bytes_total (int): The total number of bytes that this execution should mask. This value is set to -1 while the total byte count is being calculated. This is only applicable for JSON file type.. [optional]  # noqa: E501
            start_time (datetime): The date and time that this execution was started.. [optional]  # noqa: E501
            submit_time (datetime): The date and time that this execution was submitted.. [optional]  # noqa: E501
            end_time (datetime): The date and time that this execution completed.. [optional]  # noqa: E501
            run_duration (int): The time this execution spent running, in milliseconds.. [optional]  # noqa: E501
            queue_duration (int): The time this execution spent in the queue, in milliseconds.. [optional]  # noqa: E501
            total_duration (int): The total time this execution took, in milliseconds.. [optional]  # noqa: E501
            account_id (int): The account id of the DCT user who started this execution.. [optional]  # noqa: E501
            account_name (str): The account name of the DCT user who started this execution.. [optional]  # noqa: E501
            task_events ([TaskEvent]): The progression of steps or events performed by this execution. Only available for executions on masking engines that are version 6.0.14.0 and higher.. [optional]  # noqa: E501
            hyperscale_task_events ([HyperscaleTaskEvent]): [optional]  # noqa: E501
            progress (float): Progress of the task (value between 0 and 1, Hyperscale executions only). [optional]  # noqa: E501
            execution_components_total (int): The total number of execution components in this execution.. [optional]  # noqa: E501
            execution_components_processed (int): The number of execution components processed so far in this execution.. [optional]  # noqa: E501
            collection_execution_id (str): The id of the compliance job collection execution this execution is part of, if any. [optional]  # noqa: E501
            data_collection_complete (bool): Indicates whether all peripheral information associated with the execution, including execution components, execution events, logs and discovery results, has been fully collected and finalized.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Execution - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): The Execution entity ID.. [optional]  # noqa: E501
            engine_id (str): The ID of the engine where this execution ran.. [optional]  # noqa: E501
            hyperscale_instance_id (str): [optional]  # noqa: E501
            engine_name (str): The name of the engine where this execution ran.. [optional]  # noqa: E501
            job_orchestrator_id (str): The ID of the job orchestrator that is associated with this execution.. [optional]  # noqa: E501
            job_orchestrator_name (str): The name of the job orchestrator that is associated with this execution.. [optional]  # noqa: E501
            masking_job_id (str): The ID of the masking job that is being executed.. [optional]  # noqa: E501
            masking_job_name (str): The name of the masking job that is being executed.. [optional]  # noqa: E501
            dct_managed (bool): Indicates whether this execution is for a DCT-managed masking job.. [optional]  # noqa: E501
            source_connector_id (str): The ID of the source connector. This field is only used for multi-tenant jobs that are also on-the-fly.. [optional]  # noqa: E501
            target_connector_id (str): The ID of the target connector. This field is only used for multi-tenant jobs.. [optional]  # noqa: E501
            status (ExecutionStatus): [optional]  # noqa: E501
            rows_masked (int): The number of rows masked or profiled so far by this execution. This is not applicable for JSON file type.. [optional]  # noqa: E501
            rows_total (int): The total number of rows that this execution should mask. This value is set to -1 while the total row count is being calculated. This is not applicable for JSON file type.. [optional]  # noqa: E501
            bytes_processed (int): The number of bytes masked so far by this execution. This is only applicable for JSON file type.. [optional]  # noqa: E501
            bytes_total (int): The total number of bytes that this execution should mask. This value is set to -1 while the total byte count is being calculated. This is only applicable for JSON file type.. [optional]  # noqa: E501
            start_time (datetime): The date and time that this execution was started.. [optional]  # noqa: E501
            submit_time (datetime): The date and time that this execution was submitted.. [optional]  # noqa: E501
            end_time (datetime): The date and time that this execution completed.. [optional]  # noqa: E501
            run_duration (int): The time this execution spent running, in milliseconds.. [optional]  # noqa: E501
            queue_duration (int): The time this execution spent in the queue, in milliseconds.. [optional]  # noqa: E501
            total_duration (int): The total time this execution took, in milliseconds.. [optional]  # noqa: E501
            account_id (int): The account id of the DCT user who started this execution.. [optional]  # noqa: E501
            account_name (str): The account name of the DCT user who started this execution.. [optional]  # noqa: E501
            task_events ([TaskEvent]): The progression of steps or events performed by this execution. Only available for executions on masking engines that are version 6.0.14.0 and higher.. [optional]  # noqa: E501
            hyperscale_task_events ([HyperscaleTaskEvent]): [optional]  # noqa: E501
            progress (float): Progress of the task (value between 0 and 1, Hyperscale executions only). [optional]  # noqa: E501
            execution_components_total (int): The total number of execution components in this execution.. [optional]  # noqa: E501
            execution_components_processed (int): The number of execution components processed so far in this execution.. [optional]  # noqa: E501
            collection_execution_id (str): The id of the compliance job collection execution this execution is part of, if any. [optional]  # noqa: E501
            data_collection_complete (bool): Indicates whether all peripheral information associated with the execution, including execution components, execution events, logs and discovery results, has been fully collected and finalized.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
