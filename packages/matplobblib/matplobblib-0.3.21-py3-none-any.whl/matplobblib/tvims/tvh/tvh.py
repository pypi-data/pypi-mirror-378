from ...forall import *
#######################################################################################################################
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑ –æ –∑–Ω–∞—á–µ–Ω–∏–∏ –¥–∏—Å–ø–µ—Ä—Å–∏–∏
#######################################################################################################################
def TVH_1(text,mu0,sigma_0,sigma_1,alpha,splitter = ';',locale = 'rus') -> tuple:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã –æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ –ì–ï–ù–ï–†–ê–õ–¨–ù–û–ô –î–ò–°–ü–ï–†–°–ò–ò –ü–†–ò –ò–ó–í–ï–°–¢–ù–û–ú –ì–ï–ù–ï–†–ê–õ–¨–ù–û–ú –°–†–ï–î–ù–ï–ú (ùúá) –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ ùú∂.
    –ü—É—Å—Ç—å X- =(x1,‚Ä¶,x_n) - —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏ X =(X1,‚Ä¶,X_n)
    –∏–∑ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è N(`mu0`;œÉ2).
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ Œ± = `alpha`
    –≥–∏–ø–æ—Ç–µ–∑–∞ H0: œÉ = `sigma_0` –ø—Ä–æ—Ç–∏–≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã
    H1: œÉ ‚â† `sigma_0` —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –≤–∏–¥–∞
    KŒ± = (0; A) ‚à™ (B; +‚àû). 
    - –ù–∞–π–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è. 
    - –ù–∞–π–¥–∏—Ç–µ –≥—Ä–∞–Ω–∏—Ü—ã –ê –∏ –í –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–∏–ø–æ—Ç–µ–∑—É H0. 
    - –ù–∞–π–¥–∏—Ç–µ P-–∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è. 
    - –ù–∞–π–¥–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Ä–æ–¥–∞ Œ≤ –¥–ª—è œÉ1 = `sigma_1`
    
    
    –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: X- = `text`


    ## Args:
        text (str): –°—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–∏—Å–µ–ª, –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ X-
        mu_0 (numerical): –ó–Ω–∞—á–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è X
        sigma_0 (numerical): –ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –≥–∏–ø–æ—Ç–µ–∑—ã H0
        sigma_1 (numerical): –ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Ä–æ–¥–∞
        alpha (numerical): –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
        splitter (str, optional): –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ `text`. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ —Ä–∞–≤–Ω–æ =  ';'.
        locale (str, optional): –õ–æ–∫–∞–ª–∏–∑—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö - –µ—Å–ª–∏ —Ü–µ–ª–∞—è –∏ –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞ –∏–∑ `text —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –Ω–µ –∑–∞–ø—è—Ç–æ–π, —Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ —Ä–∞–≤–Ω–æ =  'rus'.

    ## Prints
        `answer` –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.<br>C –∑–∞–ø—è—Ç–æ–π –≤–º–µ—Å—Ç–æ —Ç–æ—á–∫–∏ –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –¥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤.

    ## Returns:
        `answer` (tuple): –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    """
    from scipy.stats import chi2



    # –í–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    if locale== 'rus':
            x = np.array(text.replace(',','.').split(splitter)).astype(float)
    else:
            x = np.array(text.split(splitter)).astype(float)

    # –í—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏
    n = x.size

    # –í—ã—á–∏—Å–ª–∏—Ç—å –Ω–∞–±–ª—é–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è chi2
    chi2_obs = sum((x-mu0)**2)/sigma_0**2

    # –í—ã—á–∏—Å–ª–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è chi2
    chi2_crit_1 =  chi2.ppf(alpha/2,n)
    chi2_crit_2 =  chi2.isf(alpha/2,n)

    p_value = 2 *min(chi2.cdf((chi2_obs), df=n),chi2.sf((chi2_obs), df=n) )

    # –í—ã—á–∏—Å–ª–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Ä–æ–¥–∞
    lambda_ = (sigma_1 / sigma_0)**2
    beta = chi2.cdf(chi2_crit_2 / lambda_, df=n) - chi2.cdf(chi2_crit_1 / lambda_, df=n)


    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("–ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è = " + (one_rrstr(chi2_obs,3)) )
    print('\n–ì—Ä–∞–Ω–∏—Ü—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞:')
    print("–ì—Ä–∞–Ω–∏—Ü–∞ A = "+ (one_rrstr(chi2_crit_1,3)))
    print("–ì—Ä–∞–Ω–∏—Ü–∞ B = "+ (one_rrstr(chi2_crit_2,3)))
    print("\nP-–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞: "+ (one_rrstr(p_value,3)))
    print("\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Ä–æ–¥–∞ = " + one_rrstr(beta,3))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã
    if alpha > p_value:
        print("\n–û—Ç–≤–µ—Ä–≥–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É H0 –≤ –ø–æ–ª—å–∑—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π H_1.")
    else:
        print("\n–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω–∏–π –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç—å –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É H_0.   ")

    return (chi2_obs, chi2_crit_1, chi2_crit_2,p_value,beta )
#######################################################################################################################
def TVH_2(text,sigma_0,sigma_1,alpha,splitter = ';',locale = 'rus') -> tuple:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã –æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ –ì–ï–ù–ï–†–ê–õ–¨–ù–û–ô –î–ò–°–ü–ï–†–°–ò–ò –ü–†–ò –ù–ï–ò–ó–í–ï–°–¢–ù–û–ú –ì–ï–ù–ï–†–ê–õ–¨–ù–û–ú –°–†–ï–î–ù–ï–ú (ùúá) –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ ùú∂.
    –ü—É—Å—Ç—å X- =(x1,‚Ä¶,x_n) - —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏ X =(X1,‚Ä¶,X_n)
    –∏–∑ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è N(Œº;œÉ2).
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ Œ± = `alpha`
    –≥–∏–ø–æ—Ç–µ–∑–∞ H0: œÉ = `sigma_0` –ø—Ä–æ—Ç–∏–≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã
    H1: œÉ ‚â† `sigma_0` —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –≤–∏–¥–∞
    KŒ± = (0; A) ‚à™ (B; +‚àû). 
    - –ù–∞–π–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è. 
    - –ù–∞–π–¥–∏—Ç–µ –≥—Ä–∞–Ω–∏—Ü—ã –ê –∏ –í –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–∏–ø–æ—Ç–µ–∑—É H0. 
    - –ù–∞–π–¥–∏—Ç–µ P-–∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è. 
    - –ù–∞–π–¥–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Ä–æ–¥–∞ Œ≤ –¥–ª—è œÉ1 = `sigma_1`
    
    
    –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: X- = `text`


    ## Args:
        text (str): –°—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–∏—Å–µ–ª, –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ X-
        sigma_0 (numerical): –ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –≥–∏–ø–æ—Ç–µ–∑—ã H0
        sigma_1 (numerical): –ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Ä–æ–¥–∞
        alpha (numerical): –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
        splitter (str, optional): –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ `text`. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ —Ä–∞–≤–Ω–æ =  ';'.
        locale (str, optional): –õ–æ–∫–∞–ª–∏–∑—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö - –µ—Å–ª–∏ —Ü–µ–ª–∞—è –∏ –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —á–∏—Å–ª–∞ –∏–∑ `text —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –Ω–µ –∑–∞–ø—è—Ç–æ–π, —Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ —Ä–∞–≤–Ω–æ =  'rus'.

    ## Prints
        `answer` –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.<br>C –∑–∞–ø—è—Ç–æ–π –≤–º–µ—Å—Ç–æ —Ç–æ—á–∫–∏ –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –¥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤.

    ## Returns:
        `answer` (tuple): –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    """
    from scipy.stats import chi2



    # –í–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    if locale== 'rus':
            x = np.array(text.replace(',','.').split(splitter)).astype(float)
    else:
            x = np.array(text.split(splitter)).astype(float)

    # –í—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏
    n = x.size

    # –í—ã—á–∏—Å–ª–∏—Ç—å –Ω–∞–±–ª—é–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è chi2
    chi2_obs = sum((x-x.mean())**2)/sigma_0**2

    # –í—ã—á–∏—Å–ª–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è chi2
    chi2_crit_1 =  chi2.ppf(alpha/2,n-1)
    chi2_crit_2 =  chi2.isf(alpha/2,n-1)

    p_value = 2 *min(chi2.cdf((chi2_obs), df=n-1),chi2.sf((chi2_obs), df=n-1) )

    # –í—ã—á–∏—Å–ª–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Ä–æ–¥–∞
    lambda_ = (sigma_1 / sigma_0)**2
    beta = chi2.cdf(chi2_crit_2 / lambda_, df=n-1) - chi2.cdf(chi2_crit_1 / lambda_, df=n-1)


    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("–ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è = " + (one_rrstr(chi2_obs,3)) )
    print('\n–ì—Ä–∞–Ω–∏—Ü—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞:')
    print("–ì—Ä–∞–Ω–∏—Ü–∞ A = "+ (one_rrstr(chi2_crit_1,3)))
    print("–ì—Ä–∞–Ω–∏—Ü–∞ B = "+ (one_rrstr(chi2_crit_2,3)))
    print("\nP-–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞: "+ (one_rrstr(p_value,3)))
    print("\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ —Ä–æ–¥–∞ = " + one_rrstr(beta,3))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã
    if alpha > p_value:
        print("\n–û—Ç–≤–µ—Ä–≥–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É H0 –≤ –ø–æ–ª—å–∑—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π H_1.")
    else:
        print("\n–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω–∏–π –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç—å –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É H_0.   ")

    return (chi2_obs, chi2_crit_1, chi2_crit_2,p_value,beta )
#######################################################################################################################
TVH = [TVH_1,TVH_2]