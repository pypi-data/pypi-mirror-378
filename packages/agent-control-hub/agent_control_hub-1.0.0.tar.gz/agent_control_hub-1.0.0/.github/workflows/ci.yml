name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: '${{ matrix.python-version }}'
        cache: 'pip'
    
    - name: Verify Python version
      run: |
        python --version
        python -c "import sys; print(f'Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}')"
    
    - name: Create necessary directories
      run: |
        mkdir -p logs
        mkdir -p workspace/projects
        mkdir -p workspace/debug_sandbox
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Run basic tests
      run: |
        # Set PYTHONPATH to include the project root
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        python -m pytest tests/test_basic.py -v
      env:
        GOOGLE_API_KEY: "dummy_key_for_testing"
        LLM_PROVIDER: "gemini"
    
    - name: Run linting
      run: |
        # Run flake8 with basic checks only
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        # Run black check (non-strict)
        black --check . || echo "Black formatting issues found, but continuing..."

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run security checks
      run: |
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*