[build-system]
requires = [
    "setuptools>=69",
]
build-backend = "setuptools.build_meta"

[project]
readme = "README.md"
authors = [
    { name = "German Human Genome Phenome Archive (GHGA)", email = "contact@ghga.de" },
]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 1 - Planning",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: Apache Software License",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries",
    "Intended Audience :: Developers",
]
name = "ghga_service_commons"
version = "5.1.0"
description = "A library that contains common functionality used in services of GHGA"
dependencies = [
    "pydantic >=2, <3",
]

[project.license]
text = "Apache 2.0"

[project.optional-dependencies]
api = [
    "fastapi>=0.115.4, <0.118",
    "uvicorn[standard]>=0.35, <0.37",
    "ghga-service-commons[http,objectstorage]",
]
http = [
    "httpx>=0.27, <0.29",
]
auth = [
    "jwcrypto>=1.5.6, <2",
    "pydantic[email]>=2, <3",
]
crypt = [
    "pynacl>=1.5, <2",
    "crypt4gh>=1.6, <2",
]
dev = [
    "requests>=2.31, <3",
]
objectstorage = [
    "hexkit>=6",
]
all = [
    "ghga-service-commons[api,auth,crypt,dev,http,objectstorage]",
]

[project.urls]
Repository = "https://github.com/ghga-de/ghga-service-commons"

[tool.setuptools.packages.find]
where = [
    "src",
]

[tool.ruff]
exclude = [
    ".git",
    ".devcontainer",
    "__pycache__",
    "build",
    "dist",
]
line-length = 88
src = [
    "src",
    "tests",
    "examples",
    "scripts",
]
target-version = "py310"

[tool.ruff.lint]
fixable = [
    "UP",
    "I",
    "D",
    "RUF022",
]
ignore = [
    "E111",
    "E114",
    "E116",
    "PLW",
    "RUF001",
    "RUF010",
    "RUF012",
    "N818",
    "B008",
    "PLR2004",
    "D205",
    "D400",
    "D401",
    "D107",
    "D206",
    "D300",
    "UP040",
    "PLC0206",
]
select = [
    "C90",
    "F",
    "I",
    "S",
    "B",
    "N",
    "UP",
    "PL",
    "RUF",
    "SIM",
    "D",
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"scripts/*" = [
    "PL",
    "S",
    "SIM",
    "D",
]
"tests/*" = [
    "S",
    "SIM",
    "PLR",
    "B011",
]
".devcontainer/*" = [
    "S",
    "SIM",
    "D",
]
"examples/*" = [
    "S",
    "D",
]
"__init__.py" = [
    "D",
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.mypy]
disable_error_code = "import"
show_error_codes = true
exclude = [
    "build/lib/",
]
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
no_site_packages = false

[tool.pytest.ini_options]
minversion = "8.0"
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"

[tool.tox]
legacy_tox_ini = "    [tox]\n    env_list = py3{10,11,12,13}\n\n    [gh-actions]\n    python =\n        3.10: py310\n        3.11: py311\n        3.12: py312\n        3.13: py313\n\n    [testenv]\n    pass_env =\n        TC_HOST\n        DOCKER_HOST\n    deps =\n        --no-deps -r ./lock/requirements-dev.txt\n    commands =\n        py3{9,10}: pip install --no-deps backports.asyncio.runner==1.2.0 exceptiongroup==1.3.0\n        pytest {posargs}\n"
