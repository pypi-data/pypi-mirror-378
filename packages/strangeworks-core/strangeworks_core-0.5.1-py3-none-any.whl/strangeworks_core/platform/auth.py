"""auth.py."""

import time
from functools import lru_cache
from typing import Protocol
from urllib.parse import urljoin

import requests
from requests.exceptions import RequestException

from strangeworks_core.errors.error import StrangeworksError

SDK_AUTH_URL = "users/token"
PRODUCT_AUTH_URL = "product/token"


@lru_cache
def _get_token(url: str, api_key: str, ttl_hash: any) -> str:
    """Obtain a bearer token using an API key.

    Uses Python's LRU cache in order to reduce calls to the platform.

    The ttl_hash parameter is only used for how Python's LRU cache identifies
    a request and maps it to a return value. The value for the ttl_hash parameter
    should be generated by the _get_ttl_hash function below. That function will give a
    key based on current time which will not change for the amount of time the function
    was called with.

    Lets use an example to clarify how this works. For this example, we want this
    method to return the cached value of the auth token for up to 60 seconds after the
    first call for a given url and api key.

    Each time the caller wants the auth token for a url and api key, it calls this
    function with that url and api and the current result of calling _get_ttl_hash (see
    below) with a value of 60 secs _get_ttl_hash(secs=60). The _get_ttl_hash method
    method will return a value which will stay the same for the 60 seconds after the
    first call (see implementation below for details).

    Since LRU cache uses the parameters to check whether there is a result value in the
    cache for the given parameters, it will return the same cached value for the url
    and api key and ttl_hash as long as they do not change. For our example, the first
    call will result in a cache miss and the function will call the platform to
    generate an auth token to return. All calls with the same url and api key (and
    ttl_hash=_get_ttl_hash(secs=60)) after the first call will return the cached
    value for 60 seconds after the first call. Once a call is made more than 60 seconds
    after the first call, the value generated by _get_ttl_value(secs=60) will change
    causing a cache miss and a call to the platform for a new auth token.

    Parameters
    ----------
    url: str
        The full URL to the auth endpoint on the platform.
    api_key: str
        User/product key.
    ttl_hash
        Used as a part of the caching key to allow features such as limiting the time
        for when a token is alive.

    Return
    ------
    :str
        An auth token to use for authorization for calls made to the platform.
    """
    try:
        res = requests.post(url, json={"key": api_key})
        res.raise_for_status()

        payload = res.json()
        auth_token = payload.get("accessToken")
        return auth_token

    except RequestException as err:
        raise StrangeworksError.authentication_error(
            message="Unable to obtain bearer token using api key."
        ) from err


def _get_ttl_hash(secs: int = 30):
    """Generate time-to-live (ttl) hash value.

    Returns a value whose value will stay the same for the amount of seconds passed in
    as the secs parameter from the first call to this function.

    Parameters
    ----------
    secs: int
        An integer value denoting number of seconds.
    """
    return round(time.time() / secs)


class Authenticator(Protocol):
    def __call__(self, api_key: str) -> str:
        """Auth"""
        pass


def get_token(api_key: str, base_url: str, auth_url: str) -> str:
    """Obtain a bearer token using an API key."""
    auth_url = urljoin(base_url, auth_url)
    return _get_token(url=auth_url, api_key=api_key, ttl_hash=_get_ttl_hash())


def get_sdk_authenticator(base_url: str) -> Authenticator:
    """Generate authenticator for SDK."""
    return get_authenticator(base_url=base_url, auth_url=SDK_AUTH_URL)


def get_product_authenticator(base_url: str) -> Authenticator:
    """Generate authenticator for Products/Services."""
    return get_authenticator(base_url=base_url, auth_url=PRODUCT_AUTH_URL)


def get_authenticator(
    base_url: str,
    auth_url: str,
) -> Authenticator:
    """Generate a user authenticator function.

    Returns a Callable which is configured to use the given url to exchange api keys
    for user authentication tokens from the platform.

    Parameters
    ----------
    base_url: str
        URL for the Strangeworks platform.

    Return
    ------
    str
        The JWT token
    """
    url = urljoin(base_url, auth_url)

    def auth_fn(api_key: str) -> str:
        return _get_token(url=url, api_key=api_key, ttl_hash=_get_ttl_hash())

    return auth_fn
