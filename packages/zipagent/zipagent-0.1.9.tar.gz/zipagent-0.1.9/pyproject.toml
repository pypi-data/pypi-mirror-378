[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "zipagent"
version = "0.1.9"
description = "轻量级的 AI Agent 框架"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Jiayu Xu", email = "420249001@qq.com"},
]
maintainers = [
    {name = "Jiayu Xu", email = "420249001@qq.com"},
]
keywords = ["ai", "agent", "llm", "framework", "assistant"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.10"
dependencies = [
    "mcp>=1.12.4",
    "nest-asyncio>=1.6.0",
    "openai>=1.0.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "matplotlib>=3.10.5",
    "pyright>=1.1.350",
    "ruff>=0.1.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.3",
]
all = [
    "python-dotenv>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/JiayuXu0/ZipAgent"
Repository = "https://github.com/JiayuXu0/ZipAgent.git"
Issues = "https://github.com/JiayuXu0/ZipAgent/issues"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["src/zipagent"]

[tool.pyright]
include = ["src", "tests"]
exclude = ["**/node_modules", "**/__pycache__", "build", "dist"]
pythonVersion = "3.10"
pythonPlatform = "All"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportOptionalMemberAccess = false
reportGeneralTypeIssues = true
reportOptionalCall = false

[tool.ruff]
target-version = "py310"
line-length = 79  # 设置为79字符换行
indent-width = 4

[tool.ruff.lint]
select = [
    "E",      # pycodestyle 错误
    "F",      # pyflakes
    "W",      # pycodestyle 警告
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "RUF",    # Ruff 特定规则
]
ignore = [
    "B008",   # 函数调用中的可变参数默认值
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
# 启用自动换行
docstring-code-format = true
docstring-code-line-length = 79

[tool.ruff.lint.isort]
known-first-party = ["zipagent"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=src/zipagent",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: 标记为慢速测试",
    "integration: 集成测试",
    "unit: 单元测试",
]

[tool.coverage.run]
source = ["src/zipagent"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.uv.sources]
zipagent = { workspace = true }


[dependency-groups]
dev = [
    "build>=1.3.0",
    "zipagent",
    "mypy>=1.14.1",
    "pyright>=1.1.403",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.12.8",
    "twine>=6.1.0",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.3",
]
