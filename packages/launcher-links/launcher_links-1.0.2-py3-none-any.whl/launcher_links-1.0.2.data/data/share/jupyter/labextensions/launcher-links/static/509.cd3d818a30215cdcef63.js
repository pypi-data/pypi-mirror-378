"use strict";(self.webpackChunklauncher_links=self.webpackChunklauncher_links||[]).push([[509],{509:(e,n,o)=>{o.r(n),o.d(n,{default:()=>l});var c=o(10),t=o(771),a=o(760);function s(e){return e?e.charAt(0).toUpperCase()+e.slice(1):""}const i={id:"launcher-links:plugin",description:"Add arbitrary launcher icons based on settings.",autoStart:!0,optional:[c.ISettingRegistry],requires:[t.ILauncher],activate:(e,n,o)=>{console.log("JupyterLab extension launcher-links is activated!");let c=[],t=[];const l=["Notebook","Console","Other"],r=o=>{c.forEach((e=>e.dispose())),c=[],t.forEach((e=>e.dispose())),t=[];const r=o.get("launchers").composite||[];console.log("Updating launchers with:",r);const d=new Set;r.forEach((o=>{const r=s(o.category)||"Other";if(!l.includes(r)&&!d.has(r)){d.add(r);const o=`${i.id}:sentinel-${r.toLowerCase()}`,s=e.commands.addCommand(o,{label:r,caption:`sentinel-item:${r}`,icon:a.LabIcon.resolve({icon:"ui-components:folder"}),execute:()=>{}});c.push(s);const l=n.add({command:o,category:r,rank:-1/0});t.push(l)}})),r.forEach((o=>{const l=`${i.id}:${o.id}`,r=o.icon||"ui-components:launch";let d;try{if(!r.trim().startsWith("<svg")&&r.includes(":"))d=a.LabIcon.resolve({icon:r});else{const e=`${i.id}-icon:${o.id}`,n=function(e,n){const o=`${n}-cls-`;return(e=e.replace(/\.cls-(\d+)\s*{([^}]+)}/g,`.${o}$1{$2}`)).replace(/class="cls-(\d+)"/g,`class="${o}$1"`)}(r,o.id);d=new a.LabIcon({name:e,svgstr:n})}}catch(e){console.warn(`Could not resolve or create icon for ${l}. Icon string: '${r.substring(0,70)}...'. Using default. Error:`,e),d=a.LabIcon.resolve({icon:"ui-components:launch"})}if(d)try{const a=e.commands.addCommand(l,{label:o.label,caption:`Open ${o.label}`,icon:d,execute:()=>{window.open(o.url,"_blank")}});c.push(a);const i=n.add({command:l,category:s(o.category)||"Other",rank:o.rank||1});t.push(i)}catch(e){console.error(`Failed to add launcher item '${o.label}':`,e)}else console.error(`Failed to obtain any icon instance for ${l}. Skipping item.`)}))};o?o.load(i.id).then((e=>{console.log("launcher-links settings loaded:",e.composite),r(e),e.changed.connect(r)})).catch((e=>{console.error("Failed to load settings for launcher-links.",e)})):console.warn("ISettingRegistry not available. Cannot load custom launchers.")}},l=i}}]);