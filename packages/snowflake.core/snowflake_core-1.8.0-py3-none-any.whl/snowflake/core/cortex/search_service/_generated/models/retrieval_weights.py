"""
Cortex Search REST API.

OpenAPI 3.0 specification for the Cortex Search REST API  # noqa: E501

The version of the OpenAPI document: 0.1.0
Contact: support@snowflake.com
Generated by: https://openapi-generator.tech

Do not edit this file manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from typing import Any, Optional, Union

from pydantic import BaseModel, StrictFloat, StrictInt


class RetrievalWeights(BaseModel):
    """A model object representing the RetrievalWeights resource.

    Constructs an object of type RetrievalWeights with the provided properties.

    Parameters
    __________
    texts : float, optional
        Multiplier for text-based scoring in retrieval.
    vectors : float, optional
        Multiplier for vector-based scoring in retrieval.
    """

    texts: Optional[Union[StrictFloat, StrictInt]] = None

    vectors: Optional[Union[StrictFloat, StrictInt]] = None

    __properties = ["texts", "vectors"]

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RetrievalWeights:
        """Create an instance of RetrievalWeights from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(
        self,
        hide_readonly_properties: bool = False,
    ) -> dict[str, Any]:
        """Returns the dictionary representation of the model using alias."""
        exclude_properties = set()

        if hide_readonly_properties:
            exclude_properties.update({})

        _dict = dict(self._iter(to_dict=True, by_alias=True, exclude=exclude_properties, exclude_none=True))

        return _dict

    def to_dict_without_readonly_properties(self) -> dict[str, Any]:
        """Return the dictionary representation of the model without readonly properties."""
        return self.to_dict(hide_readonly_properties=True)

    @classmethod
    def from_dict(cls, obj: dict) -> RetrievalWeights:
        """Create an instance of RetrievalWeights from a dict."""
        if obj is None:
            return None

        if type(obj) is not dict:
            return RetrievalWeights.parse_obj(obj)

        _obj = RetrievalWeights.parse_obj(
            {
                "texts": obj.get("texts"),
                "vectors": obj.get("vectors"),
            }
        )

        return _obj


class RetrievalWeightsModel:
    def __init__(
        self,  # optional properties
        texts: Optional[float] = None,
        vectors: Optional[float] = None,
    ):
        """A model object representing the RetrievalWeights resource.

        Constructs an object of type RetrievalWeights with the provided properties.

        Parameters
        __________
        texts : float, optional
            Multiplier for text-based scoring in retrieval.
        vectors : float, optional
            Multiplier for vector-based scoring in retrieval.
        """
        self.texts = texts
        self.vectors = vectors

    __properties = ["texts", "vectors"]

    def __repr__(self) -> str:
        return repr(self._to_model())

    def _to_model(self):
        return RetrievalWeights(
            texts=self.texts,
            vectors=self.vectors,
        )

    @classmethod
    def _from_model(cls, model) -> RetrievalWeightsModel:
        return RetrievalWeightsModel(
            texts=model.texts,
            vectors=model.vectors,
        )

    def to_dict(self):
        """Create a dictionary of the properties from a RetrievalWeights.

        This method constructs a dictionary with the key-value entries corresponding to the properties of the RetrievalWeights object.

        Returns
        _______
        dict
            A dictionary object created using the input model.
        """
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> RetrievalWeightsModel:
        """Create an instance of RetrievalWeights from a dict.

        This method constructs a RetrievalWeights object from a dictionary with the key-value pairs of its properties.

        Parameters
        ----------
        obj : dict
            A dictionary whose keys and values correspond to the properties of the resource object.

        Returns
        _______
        RetrievalWeights
            A RetrievalWeights object created using the input dictionary; this will fail if the required properties are missing.
        """
        return cls._from_model(RetrievalWeights.from_dict(obj))


RetrievalWeights._model_class = RetrievalWeightsModel
