from jsweb import (
    Blueprint,
    render,
    redirect,
    login_user,
    logout_user,
    __VERSION__,
    url_for
)
from jsweb.database import db_session
import models
from forms import RegistrationForm, LoginForm

# A dedicated blueprint for authentication
auth_bp = Blueprint('auth')

@auth_bp.route("/register", methods=["GET", "POST"], endpoint="register")
def register(req):
    from app import app
    form = RegistrationForm(req.form)
    if req.method == "POST" and form.validate():
        if models.User.query.filter_by(username=form.username.data).first():
            form.username.errors.append("Username already taken.")
        elif models.User.query.filter_by(email=form.email.data).first():
            form.email.errors.append("Email address already registered.")
        else:
            new_user = models.User(username=form.username.data, email=form.email.data)
            new_user.set_password(form.password.data)
            db_session.add(new_user)
            db_session.commit()
            return redirect(url_for(req, 'auth.login'))

    return render(req, "register.html", {"form": form, "req": req, "app": app, "library_version": __VERSION__})

@auth_bp.route("/login", methods=["GET", "POST"], endpoint="login")
def login(req):
    from app import app
    form = LoginForm(req.form)
    if req.method == "POST" and form.validate():
        user = models.User.query.filter_by(username=form.username.data).first()
        if user and user.check_password(form.password.data):
            response = redirect(url_for(req, 'views.profile'))
            login_user(response, user)
            return response
        else:
            form.username.errors.append("Invalid username or password.")

    return render(req, "login.html", {"form": form, "req": req, "app": app, "library_version": __VERSION__})

@auth_bp.route("/logout", endpoint="logout")
def logout(req):
    response = redirect(url_for(req, 'views.home'))
    logout_user(response)
    return response
