name: Version Bump and Tag

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main]

jobs:
  version-bump:
    name: Version Bump
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semver

      - name: Get current version
        id: current_version
        run: |
          # Extract version from pyproject.toml
          VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Determine version bump type
        id: bump_type
        run: |
          # Analyze commit messages to determine bump type
          COMMITS=$(git log --oneline --since="1 day ago")
          if echo "$COMMITS" | grep -q "BREAKING CHANGE\|major"; then
            BUMP_TYPE="major"
          elif echo "$COMMITS" | grep -q "feat\|feature"; then
            BUMP_TYPE="minor"
          else
            BUMP_TYPE="patch"
          fi
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION=${{ steps.current_version.outputs.current_version }}
          BUMP_TYPE=${{ steps.bump_type.outputs.bump_type }}

          # Parse current version
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          # Bump version based on type
          case $BUMP_TYPE in
            "major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor")
              minor=$((minor + 1))
              patch=0
              ;;
            "patch")
              patch=$((patch + 1))
              ;;
          esac

          NEW_VERSION="$major.$minor.$patch"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.new_version.outputs.new_version }}" -m "Release v${{ steps.new_version.outputs.new_version }}"
          git push origin "v${{ steps.new_version.outputs.new_version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.new_version.outputs.new_version }}"
          release_name: "Release v${{ steps.new_version.outputs.new_version }}"
          body: |
            ## What's Changed

            This release includes:
            - Bug fixes and improvements
            - Performance optimizations
            - New features

            ## Installation

            ```bash
            pip install validatelite==${{ steps.new_version.outputs.new_version }}
            ```

            ## Changelog

            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
          draft: false
          prerelease: false
