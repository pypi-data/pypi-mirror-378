name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'core/**'
      - 'cli/**'
      - 'shared/**'
      - 'tests/**'
      - 'scripts/**'
      - 'requirements*.txt'
      - 'setup.py'
      - 'pyproject.toml'
      - '.github/workflows/ci-cd.yml'
      - '!docs/**'
      - '!*.md'
      - '!LICENSE'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'core/**'
      - 'cli/**'
      - 'shared/**'
      - 'tests/**'
      - 'scripts/**'
      - 'requirements*.txt'
      - 'setup.py'
      - 'pyproject.toml'
      - '.github/workflows/ci-cd.yml'
      - '!docs/**'
      - '!*.md'
      - '!LICENSE'
  release:
    types: [released]
  workflow_dispatch:
    inputs:
      tag_to_release:
        description: 'The git tag to build and release (e.g., 0.3.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.11"

jobs:
  pre-commit:
    name: Pre-commit Checks
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Install pre-commit hooks
        run: |
          pre-commit install

      - name: Run pre-commit
        run: |
          pre-commit run --all-files

  test:
    name: Test with Both Databases
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      # Database URLs for testing (using environment variables for security)
      MYSQL_DB_URL: ${{ secrets.MYSQL_DB_URL }}
      POSTGRESQL_DB_URL: ${{ secrets.POSTGRESQL_DB_URL }}
      # Database passwords for service containers
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h localhost -u root -p$MYSQL_ROOT_PASSWORD"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 10
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -h localhost -p 5432 -U postgres"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y default-libmysqlclient-dev libpq-dev build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Wait for databases to be ready
        run: |
          echo "Waiting for MySQL to be ready..."
          timeout 60 bash -c 'until mysqladmin ping -h"127.0.0.1" -P"3306" -u"root" -p"${{ env.MYSQL_ROOT_PASSWORD }}" --silent; do sleep 2; done' || exit 1
          echo "MySQL is ready!"

          echo "Waiting for PostgreSQL to be ready..."
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 2; done' || exit 1
          echo "PostgreSQL is ready!!!"

      - name: Verify database connectivity
        run: |
          echo "Testing MySQL connection..."
          mysql -h 127.0.0.1 -P 3306 -u root -p"${{ env.MYSQL_ROOT_PASSWORD }}" -e "SELECT 1;" test_db
          echo "MySQL connection successful!"

          echo "Testing PostgreSQL connection..."
          PGPASSWORD="${{ env.POSTGRES_PASSWORD }}" psql -h localhost -p 5432 -U postgres -d test_db -c "SELECT 1;"
          echo "PostgreSQL connection successful!!!"

      - name: Generate test data
        run: |
          PYTHONPATH=${{ github.workspace }} python scripts/sql/generate_test_data.py

      - name: Run unit tests
        run: |
          PYTHONPATH=${{ github.workspace }} pytest tests/unit/ -v --cov=core --cov=shared --cov-report=xml --cov-report=html

      - name: Run integration tests
        run: |
          PYTHONPATH=${{ github.workspace }} pytest tests/integration/ -v --cov=core --cov=shared --cov-report=xml --cov-report=html

      - name: Run E2E tests
        run: |
          PYTHONPATH=${{ github.workspace }} pytest tests/e2e/ -v --cov=core --cov=shared --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: both-databases
          name: both-databases-coverage

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            htmlcov/
            coverage.xml
            .pytest_cache/

  security-scan:
    name: Security Scan
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-security-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r core/ shared/ cli/ -f json -o bandit-report.json || true

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build:
    name: Build Package
    needs: [pre-commit, test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || (github.event_name == 'release' && github.event.action == 'released') || (github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag_to_release || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-build-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-build-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Test package installation
        run: |
          pip install dist/*.whl

  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    if: (github.event_name == 'release' && github.event.action == 'released') || (github.event_name == 'workflow_dispatch')
    environment: pypi-publish

    permissions:
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag_to_release || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install minimal dependencies for release
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Quick build for release
        run: |
          echo "Building package for release..."
          python -m build

      - name: Verify package contents
        run: |
          echo "Verifying package contents..."
          twine check dist/*

      - name: Deploy to PyPI
        run: |
          echo "Deploying to PyPI using Trusted Publisher..."
          twine upload dist/*
