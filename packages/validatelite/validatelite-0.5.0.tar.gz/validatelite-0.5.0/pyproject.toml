[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "validatelite"
version = "0.5.0"
description = "A flexible, extensible command-line tool for automated data quality validation"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = ["data-quality", "validation", "cli", "database", "data-engineering"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "click>=8.0.0",
    "pandas>=2.0.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",
    "aiomysql>=0.2.0",
    "asyncpg>=0.29.0",
    "aiosqlite>=0.19.0",
    "mysqlclient>=2.2.0",
    "psycopg2-binary>=2.9.0",
    "python-dateutil>=2.8.0",
    "pytz>=2024.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=24.2.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "hypothesis>=6.88.0",
    "openpyxl>=3.1.0",
    "pandas-stubs>=2.2.0",
    "pylint>=2.17.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "psutil>=5.9.0",
    "sqlalchemy-stubs>=0.4",
    "types-psutil>=6.9.0",
    "types-python-dateutil>=2.8.19",
    "types-pytz>=2023.3.1",
    "types-PyYAML>=6.0.12",
    "types-requests>=2.31.0",
    "types-setuptools>=68.1.0",
    "types-six>=1.16.21",
    "types-toml>=0.10.8",
]

[project.urls]
Homepage = "https://github.com/litedatum/validatelite"
Documentation = "https://github.com/litedatum/validatelite#readme"
Repository = "https://github.com/litedatum/validatelite.git"
"Bug Tracker" = "https://github.com/litedatum/validatelite/issues"
"Release Notes" = "https://github.com/litedatum/validatelite/blob/main/CHANGELOG.md"

[project.scripts]
vlite = "cli.app:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["cli*", "core*", "shared*"]
exclude = ["tests*", "docs*", "scripts*", "examples*"]

[tool.setuptools.package-data]
"*" = ["*.toml", "*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["cli", "core", "shared"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "click.*",
    "pandas.*",
    "sqlalchemy.*",
    "pydantic.*",
    "rich.*",
    "aiomysql.*",
    "asyncpg.*",
    "aiosqlite.*",
    "mysqlclient.*",
    "psycopg2.*",
    "python_dateutil.*",
    "pytz.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["cli", "core", "shared"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
