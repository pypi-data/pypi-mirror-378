{
  "parser_name": "PixArt_Sigma_ComfyUI",
  "priority": 107,
  "description": "Parses ComfyUI workflows using the PixArt Sigma architecture. Aligned with current engine capabilities.",
  "version": "1.0-engine-aligned",
  "maintainer": "Ktiseos Nyx & AI Co-pilot",
  "target_file_types": [
    "PNG",
    "JPEG",
    "WEBP"
  ],
  "detection_rules": [
    {
      "comment": "Must be ComfyUI workflow AND contain PixArt checkpoint loader",
      "operator": "AND",
      "rules": [
        {
          "comment": "Rule 1: Must be a valid ComfyUI workflow JSON in 'prompt' or 'workflow' keys",
          "condition": "OR",
          "rules": [
            {
              "source_type": "pil_info_key",
              "source_key": "workflow",
              "operator": "is_valid_json"
            },
            {
              "source_type": "pil_info_key",
              "source_key": "prompt",
              "operator": "is_valid_json"
            }
          ]
        },
        {
          "comment": "Rule 2: The workflow MUST contain PixArt checkpoint loader",
          "condition": "OR",
          "rules": [
            {
              "source_type": "pil_info_key",
              "source_key": "workflow",
              "operator": "contains",
              "value": "PixArtCheckpointLoader"
            },
            {
              "source_type": "pil_info_key",
              "source_key": "prompt",
              "operator": "contains",
              "value": "PixArtCheckpointLoader"
            }
          ]
        }
      ]
    }
  ],
  "parsing_instructions": {
    "input_data": {
      "comment": "Engine will try to find a workflow JSON in 'workflow' first, then 'prompt'.",
      "source_options": [
        {
          "source_type": "pil_info_key",
          "source_key": "workflow"
        },
        {
          "source_type": "pil_info_key",
          "source_key": "prompt"
        }
      ],
      "transformations": [
        {
          "type": "json_decode_string_itself"
        }
      ]
    },
    "fields": [
      {
        "comment": "ENGINE LIMITATION NOTE: The current engine cannot reliably parse ComfyUI graphs. The following are BEST-EFFORT extractions. The most reliable method is to extract the entire workflow as a string.",
        "target_key": "raw_workflow_json",
        "method": "direct_input_data_as_string",
        "value_type": "string"
      },
      {
        "comment": "We assume the positive prompt is connected to a node that has 'positive' in its title.",
        "target_key": "prompt",
        "method": "regex_on_input_data_string",
        "pattern": "\"title\": \"Positive Prompt.*?\"text\": \"(.*?)\"",
        "value_type": "string",
        "fallback": "Could not extract prompt via regex"
      },
      {
        "comment": "Attempting to find a seed widget, assuming it's near 'KSampler'. This is very fragile.",
        "target_key": "parameters.seed",
        "method": "regex_on_input_data_string",
        "pattern": "\"widget_name\": \"seed\".*?\"value\": (\\d+)",
        "value_type": "integer",
        "fallback": -1
      },
      {
        "comment": "ðŸŽ¯ TIPO AI Prompt Enhancement Detection",
        "target_key": "tipo_enhancement",
        "method": "comfyui_detect_tipo_enhancement"
      },
      {
        "comment": "ðŸ“Š Workflow Complexity Analysis",
        "target_key": "workflow_complexity",
        "method": "comfyui_calculate_workflow_complexity"
      },
      {
        "comment": "ðŸš€ Advanced Upscaling Detection",
        "target_key": "advanced_upscaling",
        "method": "comfyui_detect_advanced_upscaling"
      },
      {
        "comment": "ðŸŽ¨ Multi-Stage Conditioning Detection",
        "target_key": "multi_stage_conditioning",
        "method": "comfyui_detect_multi_stage_conditioning"
      },
      {
        "comment": "âœ¨ Post-Processing Effects Detection",
        "target_key": "post_processing_effects",
        "method": "comfyui_detect_post_processing_effects"
      },
      {
        "comment": "ðŸ”Œ Custom Node Ecosystem Detection",
        "target_key": "custom_node_ecosystems",
        "method": "comfyui_detect_custom_node_ecosystems"
      },
      {
        "comment": "ðŸŽ¯ High-Level Workflow Techniques",
        "target_key": "workflow_techniques",
        "method": "comfyui_extract_workflow_techniques"
      }
    ],
    "output_template": {
      "tool": "ComfyUI",
      "workflow_type": "PixArt Sigma",
      "parser": "PixArt_Sigma_ComfyUI v1.0",
      "confidence": "High (detected PixArtCheckpointLoader)",
      "prompt": "$prompt",
      "parameters": {
        "seed": "$parameters.seed"
      },
      "notes": [
        "This is a best-effort parse. The full workflow is in 'raw_workflow_json'.",
        "The engine currently lacks ComfyUI graph-traversal capabilities."
      ],
      "raw_workflow_json": "$raw_workflow_json"
    }
  },
  "notes": [
    "This version has been aligned with the capabilities of the current engine.py.",
    "It uses simple string searching and regex instead of graph traversal.",
    "Full, reliable parsing requires new methods in the Python engine code."
  ],
  "enhanced_with_node_discovery": true,
  "enhancement_date": "2025-07-08"
}