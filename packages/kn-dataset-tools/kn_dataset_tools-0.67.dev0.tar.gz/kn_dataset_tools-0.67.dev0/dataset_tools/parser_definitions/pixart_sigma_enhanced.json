{
  "parser_name": "PixArt Alpha/Sigma",
  "priority": 155,
  "description": "Detects PixArt-Alpha and PixArt-Sigma model architectures with T5-XXL text encoding",
  "version": "1.0",
  "maintainer": "Ktiseos Nyx",
  "target_file_types": [
    "PNG"
  ],
  "detection_rules": [
    {
      "comment": "Rule 1: Must be a valid ComfyUI workflow",
      "condition": "OR",
      "rules": [
        {
          "source_type": "pil_info_key",
          "source_key": "workflow",
          "operator": "is_valid_json"
        },
        {
          "source_type": "pil_info_key",
          "source_key": "prompt",
          "operator": "is_valid_json"
        }
      ]
    },
    {
      "comment": "Rule 2: Must contain PixArt-specific nodes",
      "source_type": "pil_info_key",
      "source_key_options": [
        "workflow",
        "prompt"
      ],
      "json_query_type": "has_any_node_class_type",
      "operator": "is_true",
      "class_types_to_check": [
        "PixArtCheckpointLoader",
        "PixArtTextEncode",
        "PixArtSampler",
        "PixArtAlphaTextEncode",
        "PixArtSigmaTextEncode"
      ]
    },
    {
      "comment": "Rule 3: Model name contains PixArt indicators",
      "source_type": "pil_info_key",
      "source_key_options": [
        "workflow",
        "prompt"
      ],
      "json_query_type": "workflow_contains_model_pattern",
      "operator": "is_true",
      "patterns": [
        "pixart",
        "alpha",
        "sigma"
      ]
    }
  ],
  "parsing_instructions": {
    "input_data": {
      "source_options": [
        {
          "source_type": "pil_info_key",
          "source_key": "workflow"
        },
        {
          "source_type": "pil_info_key",
          "source_key": "prompt"
        }
      ],
      "transformations": [
        {
          "type": "json_decode_string_itself"
        }
      ]
    },
    "fields": [
      {
        "target_key": "prompt",
        "method": "comfy_find_text_from_main_sampler_input",
        "sampler_node_types": [
          "PixArtSampler",
          "KSampler",
          "KSamplerAdvanced"
        ],
        "positive_input_name": "positive",
        "text_input_name_in_encoder": "text",
        "text_encoder_node_types": [
          "PixArtTextEncode",
          "PixArtAlphaTextEncode",
          "PixArtSigmaTextEncode",
          "T5TextEncode"
        ]
      },
      {
        "target_key": "negative_prompt",
        "method": "comfy_find_text_from_main_sampler_input",
        "sampler_node_types": [
          "PixArtSampler",
          "KSampler",
          "KSamplerAdvanced"
        ],
        "negative_input_name": "negative",
        "text_input_name_in_encoder": "text",
        "text_encoder_node_types": [
          "PixArtTextEncode",
          "PixArtAlphaTextEncode",
          "PixArtSigmaTextEncode",
          "T5TextEncode"
        ],
        "optional": true
      },
      {
        "target_key": "parameters.model",
        "method": "comfy_get_node_by_class",
        "class_type": "PixArtCheckpointLoader",
        "field_name": "ckpt_name",
        "optional": true
      },
      {
        "target_key": "parameters.steps",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "PixArtSampler",
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "steps",
        "value_type": "integer"
      },
      {
        "target_key": "parameters.cfg_scale",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "PixArtSampler",
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "cfg",
        "value_type": "float"
      },
      {
        "target_key": "parameters.seed",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "PixArtSampler",
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "seed",
        "value_type": "integer"
      },
      {
        "target_key": "parameters.sampler_name",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "PixArtSampler",
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "sampler_name",
        "value_type": "string"
      },
      {
        "target_key": "parameters.scheduler",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "PixArtSampler",
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "scheduler",
        "value_type": "string"
      },
      {
        "target_key": "parameters.width",
        "method": "comfy_get_node_by_class",
        "class_type": "EmptyLatentImage",
        "field_name": "width",
        "value_type": "integer",
        "optional": true
      },
      {
        "target_key": "parameters.height",
        "method": "comfy_get_node_by_class",
        "class_type": "EmptyLatentImage",
        "field_name": "height",
        "value_type": "integer",
        "optional": true
      },
      {
        "comment": "ðŸŽ¯ TIPO AI Prompt Enhancement Detection",
        "target_key": "tipo_enhancement",
        "method": "comfyui_detect_tipo_enhancement"
      },
      {
        "comment": "ðŸ“Š Workflow Complexity Analysis",
        "target_key": "workflow_complexity",
        "method": "comfyui_calculate_workflow_complexity"
      },
      {
        "comment": "ðŸš€ Advanced Upscaling Detection",
        "target_key": "advanced_upscaling",
        "method": "comfyui_detect_advanced_upscaling"
      },
      {
        "comment": "ðŸŽ¨ Multi-Stage Conditioning Detection",
        "target_key": "multi_stage_conditioning",
        "method": "comfyui_detect_multi_stage_conditioning"
      },
      {
        "comment": "âœ¨ Post-Processing Effects Detection",
        "target_key": "post_processing_effects",
        "method": "comfyui_detect_post_processing_effects"
      },
      {
        "comment": "ðŸ”Œ Custom Node Ecosystem Detection",
        "target_key": "custom_node_ecosystems",
        "method": "comfyui_detect_custom_node_ecosystems"
      },
      {
        "comment": "ðŸŽ¯ High-Level Workflow Techniques",
        "target_key": "workflow_techniques",
        "method": "comfyui_extract_workflow_techniques"
      }
    ],
    "output_template": {
      "tool": "ComfyUI (PixArt)",
      "prompt": "$prompt",
      "negative_prompt": "$negative_prompt",
      "parameters": {
        "model": "$parameters.model",
        "steps": "$parameters.steps",
        "cfg_scale": "$parameters.cfg_scale",
        "seed": "$parameters.seed",
        "sampler_name": "$parameters.sampler_name",
        "scheduler": "$parameters.scheduler",
        "width": "$parameters.width",
        "height": "$parameters.height"
      },
      "architecture_info": {
        "detected_as": "PixArt architecture",
        "text_encoder": "T5-XXL",
        "efficient_attention": true,
        "beta_schedule": "sqrt_linear",
        "memory_optimized": true
      },
      "raw_metadata": "$INPUT_JSON_OBJECT_AS_STRING",
      "_metadata": {
        "processed_at": "$CURRENT_TIMESTAMP",
        "processor": "MetadataEngine",
        "template_processed": true
      }
    }
  },
  "notes": [
    "Detects PixArt-Alpha and PixArt-Sigma model architectures",
    "Uses T5-XXL text encoder for enhanced text understanding",
    "Memory-efficient architecture with efficient attention mechanisms",
    "Supports both dedicated PixArt nodes and fallback to standard ComfyUI nodes"
  ],
  "enhanced_with_node_discovery": true,
  "enhancement_date": "2025-07-08"
}