{
  "parser_name": "ComfyUI (Flux/GGUF Style)",
  "priority": 152,
  "target_file_types": [
    "PNG"
  ],
  "detection_rules": [
    {
      "comment": "Rule 1: Must have prompt PNG chunk with valid JSON (primary ComfyUI format)",
      "source_type": "pil_info_key",
      "source_key": "prompt",
      "operator": "is_valid_json"
    },
    {
      "comment": "Rule 2: Must contain Flux GGUF signatures",
      "source_type": "pil_info_key",
      "source_key": "prompt",
      "operator": "contains",
      "value": "DualCLIPLoaderGGUF"
    }
  ],
  "parsing_instructions": {
    "input_data": {
      "source_options": [
        {
          "source_type": "pil_info_key",
          "source_key": "workflow"
        },
        {
          "source_type": "pil_info_key",
          "source_key": "prompt"
        }
      ],
      "transformations": [
        {
          "type": "json_decode_string_itself"
        }
      ]
    },
    "fields": [
      {
        "comment": "Extract prompt from CLIPTextEncode node",
        "target_key": "prompt",
        "method": "comfy_get_node_by_class",
        "class_type": "CLIPTextEncode",
        "field_name": "text"
      },
      {
        "comment": "Extract FLUX model name",
        "target_key": "parameters.model",
        "method": "comfy_get_node_by_class",
        "class_type": "UnetLoaderGGUF",
        "field_name": "unet_name"
      },
      {
        "comment": "Extract sampler name from KSamplerSelect",
        "target_key": "parameters.sampler_name",
        "method": "comfy_get_node_by_class",
        "class_type": "KSamplerSelect",
        "field_name": "sampler_name"
      },
      {
        "comment": "Extract T5 model from DualCLIPLoaderGGUF",
        "target_key": "parameters.t5_model",
        "method": "comfy_get_node_by_class",
        "class_type": "DualCLIPLoaderGGUF",
        "field_name": "clip_name1",
        "optional": true
      },
      {
        "comment": "Extract CLIP model from DualCLIPLoaderGGUF",
        "target_key": "parameters.clip_model",
        "method": "comfy_get_node_by_class",
        "class_type": "DualCLIPLoaderGGUF",
        "field_name": "clip_name2",
        "optional": true
      },
      {
        "comment": "Extract guidance scale from BasicGuider",
        "target_key": "parameters.guidance_scale",
        "method": "comfy_get_node_by_class",
        "class_type": "BasicGuider",
        "field_name": "guidance_scale",
        "optional": true
      },
      {
        "comment": "Extract steps from SamplerCustomAdvanced",
        "target_key": "parameters.steps",
        "method": "comfy_get_node_by_class",
        "class_type": "SamplerCustomAdvanced",
        "field_name": "steps",
        "optional": true
      },
      {
        "comment": "Extract seed from SamplerCustomAdvanced",
        "target_key": "parameters.seed",
        "method": "comfy_get_node_by_class",
        "class_type": "SamplerCustomAdvanced",
        "field_name": "seed",
        "optional": true
      },
      {
        "comment": "ðŸŽ¯ TIPO AI Prompt Enhancement Detection",
        "target_key": "tipo_enhancement",
        "method": "comfyui_detect_tipo_enhancement"
      },
      {
        "comment": "ðŸ“Š Workflow Complexity Analysis",
        "target_key": "workflow_complexity",
        "method": "comfyui_calculate_workflow_complexity"
      },
      {
        "comment": "ðŸš€ Advanced Upscaling Detection",
        "target_key": "advanced_upscaling",
        "method": "comfyui_detect_advanced_upscaling"
      },
      {
        "comment": "ðŸŽ¨ Multi-Stage Conditioning Detection",
        "target_key": "multi_stage_conditioning",
        "method": "comfyui_detect_multi_stage_conditioning"
      },
      {
        "comment": "âœ¨ Post-Processing Effects Detection",
        "target_key": "post_processing_effects",
        "method": "comfyui_detect_post_processing_effects"
      },
      {
        "comment": "ðŸ”Œ Custom Node Ecosystem Detection",
        "target_key": "custom_node_ecosystems",
        "method": "comfyui_detect_custom_node_ecosystems"
      },
      {
        "comment": "ðŸŽ¯ High-Level Workflow Techniques",
        "target_key": "workflow_techniques",
        "method": "comfyui_extract_workflow_techniques"
      }
    ],
    "output_template": {
      "tool": "ComfyUI FLUX GGUF",
      "parser_version": "flux_specific_enhanced",
      "prompt": "$prompt",
      "parameters": {
        "model": "$parameters.model",
        "sampler_name": "$parameters.sampler_name",
        "t5_model": "$parameters.t5_model",
        "clip_model": "$parameters.clip_model",
        "guidance_scale": "$parameters.guidance_scale",
        "steps": "$parameters.steps",
        "seed": "$parameters.seed"
      },
      "workflow_info": {
        "detected_as": "FLUX workflow",
        "uses_gguf": true,
        "dual_clip": true,
        "t5_enabled": true
      },
      "raw_metadata": "$INPUT_JSON_OBJECT_AS_STRING",
      "_metadata": {
        "processed_at": "$CURRENT_TIMESTAMP",
        "processor": "MetadataEngine",
        "template_processed": true
      }
    }
  },
  "enhanced_with_node_discovery": true,
  "enhancement_date": "2025-07-08"
}