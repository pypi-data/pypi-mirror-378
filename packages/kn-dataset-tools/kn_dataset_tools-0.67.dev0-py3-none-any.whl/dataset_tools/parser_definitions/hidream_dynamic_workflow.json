{
  "parser_name": "HiDream Dynamic Workflow",
  "priority": 165,
  "description": "Detects HiDream workflows with dynamic prompt generation and advanced conditioning",
  "version": "1.0",
  "maintainer": "Ktiseos Nyx",
  "target_file_types": [
    "PNG", "JPG", "JPEG"
  ],
  "detection_rules": [
    {
      "comment": "Rule 1: Must be a valid ComfyUI workflow with JSON structure",
      "operator": "AND",
      "rules": [
        {
          "condition": "OR",
          "rules": [
            {
              "source_type": "pil_info_key",
              "source_key": "workflow",
              "operator": "is_valid_json"
            },
            {
              "source_type": "pil_info_key",
              "source_key": "prompt",
              "operator": "is_valid_json"
            }
          ]
        },
        {
          "comment": "Rule 2: Must contain DPRandomGenerator for dynamic prompts",
          "condition": "OR",
          "rules": [
            {
              "source_type": "pil_info_key",
              "source_key": "workflow",
              "operator": "contains",
              "value": "DPRandomGenerator"
            },
            {
              "source_type": "pil_info_key",
              "source_key": "prompt",
              "operator": "contains",
              "value": "DPRandomGenerator"
            }
          ]
        },
        {
          "comment": "Rule 3: Must contain ConDelta conditioning nodes", 
          "condition": "OR",
          "rules": [
            {
              "source_type": "pil_info_key",
              "source_key": "workflow",
              "operator": "regex_match",
              "value": "ConditioningSubtract|ConditioningAddConDelta|QuickConDelta|CFGlessNegativePrompt"
            },
            {
              "source_type": "pil_info_key",
              "source_key": "prompt",
              "operator": "regex_match",
              "value": "ConditioningSubtract|ConditioningAddConDelta|QuickConDelta|CFGlessNegativePrompt"
            }
          ]
        }
      ]
    }
  ],
  "parsing_instructions": {
    "input_data": {
      "source_options": [
        {
          "source_type": "pil_info_key",
          "source_key": "workflow"
        },
        {
          "source_type": "pil_info_key",
          "source_key": "prompt"
        }
      ],
      "transformations": [
        {
          "type": "json_decode_string_itself"
        }
      ]
    },
    "fields": [
      {
        "target_key": "prompt",
        "method": "comfyui_extract_dynamic_prompt_from_workflow"
      },
      {
        "target_key": "negative_prompt",
        "method": "comfy_find_text_from_main_sampler_input",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced", 
          "SamplerCustom"
        ],
        "negative_input_name": "negative",
        "text_input_name_in_encoder": "text",
        "text_encoder_node_types": [
          "CLIPTextEncode"
        ]
      },
      {
        "target_key": "parameters.model",
        "method": "comfy_find_input_of_node_type",
        "node_types": [
          "UNETLoader",
          "CheckpointLoaderSimple"
        ],
        "input_field": "unet_name",
        "data_type": "string",
        "fallback": "Unknown HiDream Model"
      },
      {
        "target_key": "parameters.steps",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "SamplerCustom"
        ],
        "input_key": "steps",
        "value_type": "integer",
        "fallback": 28
      },
      {
        "target_key": "parameters.cfg_scale",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "SamplerCustom"
        ],
        "input_key": "cfg",
        "value_type": "float",
        "fallback": 1.0
      },
      {
        "target_key": "parameters.seed",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "SamplerCustom"
        ],
        "input_key": "seed",
        "value_type": "integer",
        "fallback": -1
      },
      {
        "target_key": "parameters.sampler_name",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "SamplerCustom"
        ],
        "input_key": "sampler_name",
        "value_type": "string",
        "fallback": "lcm"
      },
      {
        "target_key": "parameters.scheduler",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "SamplerCustom"
        ],
        "input_key": "scheduler",
        "value_type": "string",
        "fallback": "beta57"
      },
      {
        "target_key": "parameters.width",
        "method": "comfy_find_input_of_node_type",
        "node_types": [
          "EmptySD3LatentImage",
          "EmptyLatentImage"
        ],
        "input_field": "width",
        "data_type": "integer",
        "fallback": 800
      },
      {
        "target_key": "parameters.height",
        "method": "comfy_find_input_of_node_type",
        "node_types": [
          "EmptySD3LatentImage",
          "EmptyLatentImage"
        ],
        "input_field": "height",
        "data_type": "integer",
        "fallback": 1200
      },
      {
        "comment": "ðŸŽ¯ TIPO AI Prompt Enhancement Detection",
        "target_key": "tipo_enhancement",
        "method": "comfyui_detect_tipo_enhancement"
      },
      {
        "comment": "ðŸ“Š Workflow Complexity Analysis",
        "target_key": "workflow_complexity",
        "method": "comfyui_calculate_workflow_complexity"
      },
      {
        "comment": "ðŸš€ Advanced Upscaling Detection",
        "target_key": "advanced_upscaling",
        "method": "comfyui_detect_advanced_upscaling"
      },
      {
        "comment": "ðŸŽ¨ Multi-Stage Conditioning Detection",
        "target_key": "multi_stage_conditioning",
        "method": "comfyui_detect_multi_stage_conditioning"
      },
      {
        "comment": "âœ¨ Post-Processing Effects Detection",
        "target_key": "post_processing_effects",
        "method": "comfyui_detect_post_processing_effects"
      },
      {
        "comment": "ðŸ”Œ Custom Node Ecosystem Detection",
        "target_key": "custom_node_ecosystems",
        "method": "comfyui_detect_custom_node_ecosystems"
      },
      {
        "comment": "ðŸŽ¯ High-Level Workflow Techniques",
        "target_key": "workflow_techniques",
        "method": "comfyui_extract_workflow_techniques"
      }
    ],
    "output_template": {
      "parser_name_from_engine": "HiDream Dynamic Workflow",
      "tool": "ComfyUI (HiDream)",
      "format": "HiDream Dynamic Conditioning Workflow",
      "prompt": "$prompt",
      "negative_prompt": "$negative_prompt",
      "parameters": {
        "model": "$parameters.model",
        "steps": "$parameters.steps",
        "cfg_scale": "$parameters.cfg_scale",
        "seed": "$parameters.seed",
        "sampler_name": "$parameters.sampler_name",
        "scheduler": "$parameters.scheduler",
        "width": "$parameters.width",
        "height": "$parameters.height"
      },
      "architecture_info": {
        "detected_as": "HiDream architecture",
        "conditioning_type": "Advanced ConDelta Mathematics",
        "prompt_generation": "Dynamic Prompts",
        "sampling_method": "CFGless/LCM Hybrid",
        "memory_optimized": true
      },
      "workflow_metadata": {
        "source": "ComfyUI workflow",
        "parser_priority": 165,
        "confidence": "high",
        "dynamic_prompts": true,
        "advanced_conditioning": true
      }
    }
  },
  "error_handling": {
    "on_parse_failure": "return_partial_data",
    "log_errors": true,
    "validation_level": "strict"
  },
  "notes": [
    "Specifically designed for HiDream workflows with dynamic prompt generation",
    "Uses advanced prompt extraction to follow DPRandomGenerator chains",
    "Detects ConDelta conditioning mathematics and CFGless sampling",
    "Priority 165 puts it above general ComfyUI parsers to catch HiDream first",
    "Includes comprehensive advanced metadata extraction",
    "Handles complex multi-stage conditioning workflows"
  ],
  "test_cases": [
    {
      "description": "HiDream workflow with DPRandomGenerator",
      "expected_fields": [
        "prompt",
        "multi_stage_conditioning",
        "workflow_complexity",
        "custom_node_ecosystems"
      ]
    }
  ],
  "enhanced_with_node_discovery": true,
  "enhancement_date": "2025-07-08"
}