{
  "parser_name": "Complex Wildcard Workflow",
  "priority": 150,
  "description": "Detects complex ComfyUI workflows that use advanced wildcard processing and string merging",
  "version": "1.0",
  "maintainer": "Ktiseos Nyx",
  "target_file_types": [
    "PNG", "JPG", "JPEG"
  ],
  "detection_rules": [
    {
      "comment": "Rule 1: Must be a valid ComfyUI workflow",
      "condition": "OR",
      "rules": [
        {
          "source_type": "pil_info_key",
          "source_key": "workflow",
          "operator": "is_valid_json"
        },
        {
          "source_type": "pil_info_key",
          "source_key": "prompt",
          "operator": "is_valid_json"
        }
      ]
    },
    {
      "comment": "Rule 2: Must contain wildcard processing nodes",
      "source_type": "pil_info_key",
      "source_key_options": [
        "workflow",
        "prompt"
      ],
      "json_query_type": "has_any_node_class_type",
      "operator": "is_true",
      "class_types_to_check": [
        "Wildcard Processor",
        "Wildcards",
        "WildcardProcessor"
      ]
    },
    {
      "comment": "Rule 3: Must contain string merging or processing nodes",
      "source_type": "pil_info_key",
      "source_key_options": [
        "workflow",
        "prompt"
      ],
      "json_query_type": "has_any_node_class_type",
      "operator": "is_true",
      "class_types_to_check": [
        "Merge Strings",
        "ShowText|pysssss",
        "easy showAnything"
      ]
    },
    {
      "comment": "Rule 4: Must contain advanced LoRA stacking",
      "source_type": "pil_info_key",
      "source_key_options": [
        "workflow",
        "prompt"
      ],
      "json_query_type": "has_any_node_class_type",
      "operator": "is_true",
      "class_types_to_check": [
        "LoraLoaderStackedAdvanced",
        "LoRA Stack to String converter"
      ]
    }
  ],
  "parsing_instructions": {
    "input_data": {
      "source_options": [
        {
          "source_type": "pil_info_key",
          "source_key": "workflow"
        },
        {
          "source_type": "pil_info_key",
          "source_key": "prompt"
        }
      ],
      "transformations": [
        {
          "type": "json_decode_string_itself"
        }
      ]
    },
    "fields": [
      {
        "target_key": "prompt",
        "method": "comfyui_extract_wildcard_processed_prompt"
      },
      {
        "target_key": "negative_prompt",
        "method": "comfy_find_text_from_main_sampler_input",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced"
        ],
        "negative_input_name": "negative",
        "text_input_name_in_encoder": "text",
        "text_encoder_node_types": [
          "CLIPTextEncode"
        ]
      },
      {
        "target_key": "parameters.model",
        "method": "comfy_find_input_of_node_type",
        "node_types": [
          "CheckpointLoaderSimple",
          "Checkpoint Loader with Name"
        ],
        "input_field": "ckpt_name",
        "data_type": "string",
        "fallback": "Unknown Model"
      },
      {
        "target_key": "parameters.steps",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "steps",
        "value_type": "integer",
        "fallback": 30
      },
      {
        "target_key": "parameters.cfg_scale",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "cfg",
        "value_type": "float",
        "fallback": 6.0
      },
      {
        "target_key": "parameters.seed",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "seed",
        "value_type": "integer",
        "fallback": -1
      },
      {
        "target_key": "parameters.sampler_name",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "sampler_name",
        "value_type": "string",
        "fallback": "euler"
      },
      {
        "target_key": "parameters.scheduler",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_key": "scheduler",
        "value_type": "string",
        "fallback": "normal"
      },
      {
        "target_key": "parameters.width",
        "method": "comfy_find_input_of_node_type",
        "node_types": [
          "EmptyLatentImage",
          "mxSlider2D"
        ],
        "input_field": "width",
        "data_type": "integer",
        "fallback": 1024
      },
      {
        "target_key": "parameters.height",
        "method": "comfy_find_input_of_node_type",
        "node_types": [
          "EmptyLatentImage",
          "mxSlider2D"
        ],
        "input_field": "height",
        "data_type": "integer",
        "fallback": 1024
      },
      {
        "target_key": "loras",
        "method": "comfyui_extract_lora_stack_info"
      },
      {
        "comment": "ðŸŽ¯ TIPO AI Prompt Enhancement Detection",
        "target_key": "tipo_enhancement",
        "method": "comfyui_detect_tipo_enhancement"
      },
      {
        "comment": "ðŸ“Š Workflow Complexity Analysis",
        "target_key": "workflow_complexity",
        "method": "comfyui_calculate_workflow_complexity"
      },
      {
        "comment": "ðŸš€ Advanced Upscaling Detection",
        "target_key": "advanced_upscaling",
        "method": "comfyui_detect_advanced_upscaling"
      },
      {
        "comment": "ðŸŽ¨ Multi-Stage Conditioning Detection",
        "target_key": "multi_stage_conditioning",
        "method": "comfyui_detect_multi_stage_conditioning"
      },
      {
        "comment": "âœ¨ Post-Processing Effects Detection",
        "target_key": "post_processing_effects",
        "method": "comfyui_detect_post_processing_effects"
      },
      {
        "comment": "ðŸ”Œ Custom Node Ecosystem Detection",
        "target_key": "custom_node_ecosystems",
        "method": "comfyui_detect_custom_node_ecosystems"
      },
      {
        "comment": "ðŸŽ¯ High-Level Workflow Techniques",
        "target_key": "workflow_techniques",
        "method": "comfyui_extract_workflow_techniques"
      }
    ],
    "output_template": {
      "parser_name_from_engine": "Complex Wildcard Workflow",
      "tool": "ComfyUI (Advanced Wildcards)",
      "format": "Complex Wildcard Processing Workflow",
      "prompt": "$prompt",
      "negative_prompt": "$negative_prompt",
      "parameters": {
        "model": "$parameters.model",
        "steps": "$parameters.steps",
        "cfg_scale": "$parameters.cfg_scale",
        "seed": "$parameters.seed",
        "sampler_name": "$parameters.sampler_name",
        "scheduler": "$parameters.scheduler",
        "width": "$parameters.width",
        "height": "$parameters.height"
      },
      "loras": "$loras",
      "architecture_info": {
        "detected_as": "Advanced Wildcard Workflow",
        "prompt_processing": "Dynamic Wildcards + String Merging",
        "lora_system": "Advanced Stacked LoRAs",
        "automation_level": "High",
        "complexity": "Expert"
      },
      "workflow_metadata": {
        "source": "ComfyUI workflow",
        "parser_priority": 150,
        "confidence": "high",
        "wildcard_processing": true,
        "advanced_automation": true
      }
    }
  },
  "error_handling": {
    "on_parse_failure": "return_partial_data",
    "log_errors": true,
    "validation_level": "strict"
  },
  "notes": [
    "Specifically designed for complex workflows using multiple Wildcard Processor nodes",
    "Handles Merge Strings (RvTools) and advanced string manipulation",
    "Extracts LoRA stack information from LoraLoaderStackedAdvanced nodes",
    "Uses ShowText|pysssss nodes to find final processed prompts",
    "Priority 150 puts it above general ComfyUI parsers to catch complex wildcard workflows",
    "Includes comprehensive advanced metadata extraction and complexity analysis"
  ],
  "test_cases": [
    {
      "description": "Complex wildcard workflow with multiple LoRA stacks",
      "expected_fields": [
        "prompt",
        "negative_prompt",
        "loras",
        "workflow_complexity",
        "custom_node_ecosystems"
      ]
    }
  ],
  "enhanced_with_node_discovery": true,
  "enhancement_date": "2025-07-08"
}