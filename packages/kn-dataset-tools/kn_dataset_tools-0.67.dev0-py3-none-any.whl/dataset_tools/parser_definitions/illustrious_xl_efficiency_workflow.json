{
  "parser_name": "IllustriousXL Efficiency Workflow",
  "priority": 155,
  "description": "Detects IllustriousXL workflows using Efficiency Nodes (Efficient Loader, KSampler Efficient)",
  "version": "1.0",
  "maintainer": "Ktiseos Nyx",
  "target_file_types": [
    "PNG", "JPG", "JPEG"
  ],
  "detection_rules": [
    {
      "comment": "Rule 1: Must be a valid ComfyUI workflow",
      "condition": "OR",
      "rules": [
        {
          "source_type": "pil_info_key",
          "source_key": "workflow",
          "operator": "is_valid_json"
        },
        {
          "source_type": "pil_info_key",
          "source_key": "prompt",
          "operator": "is_valid_json"
        }
      ]
    },
    {
      "comment": "Rule 2: Must contain Efficiency Nodes",
      "source_type": "pil_info_key",
      "source_key_options": [
        "workflow",
        "prompt"
      ],
      "json_query_type": "has_any_node_class_type",
      "operator": "is_true",
      "class_types_to_check": [
        "Efficient Loader",
        "KSampler (Efficient)",
        "Eff. Loader SDXL"
      ]
    },
    {
      "comment": "Rule 3: Must contain IllustriousXL or similar model indication",
      "condition": "OR",
      "rules": [
        {
          "source_type": "pil_info_key",
          "source_key_options": [
            "workflow",
            "prompt"
          ],
          "json_query_type": "contains_text_in_node_inputs",
          "operator": "is_true",
          "text_to_search": "plantMilk"
        },
        {
          "source_type": "pil_info_key",
          "source_key_options": [
            "workflow",
            "prompt"
          ],
          "json_query_type": "contains_text_in_node_inputs",
          "operator": "is_true",
          "text_to_search": "illustrious"
        }
      ]
    },
    {
      "comment": "Rule 4: Must contain LoRA Stacker or similar advanced nodes",
      "source_type": "pil_info_key",
      "source_key_options": [
        "workflow",
        "prompt"
      ],
      "json_query_type": "has_any_node_class_type",
      "operator": "is_true",
      "class_types_to_check": [
        "LoRA Stacker",
        "FaceDetailer",
        "UltralyticsDetectorProvider"
      ]
    }
  ],
  "parsing_instructions": {
    "input_data": {
      "source_options": [
        {
          "source_type": "pil_info_key",
          "source_key": "workflow"
        },
        {
          "source_type": "pil_info_key",
          "source_key": "prompt"
        }
      ],
      "transformations": [
        {
          "type": "json_decode_string_itself"
        }
      ]
    },
    "fields": [
      {
        "target_key": "prompt",
        "method": "comfyui_extract_illustrious_xl_positive_prompt"
      },
      {
        "target_key": "negative_prompt",
        "method": "comfyui_extract_illustrious_xl_negative_prompt"
      },
      {
        "target_key": "parameters.model",
        "method": "comfyui_extract_illustrious_xl_model_name"
      },
      {
        "target_key": "parameters.steps",
        "method": "comfy_find_input_of_node_type",
        "node_types": [
          "KSampler (Efficient)",
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_field": "steps",
        "data_type": "integer",
        "fallback": 28
      },
      {
        "target_key": "parameters.cfg_scale",
        "method": "comfy_find_input_of_node_type",
        "node_types": [
          "KSampler (Efficient)",
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_field": "cfg",
        "data_type": "float",
        "fallback": 5.0
      },
      {
        "target_key": "parameters.seed",
        "method": "comfy_find_input_of_node_type",
        "node_types": [
          "KSampler (Efficient)",
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_field": "seed",
        "data_type": "integer",
        "fallback": -1
      },
      {
        "target_key": "parameters.sampler_name",
        "method": "comfy_find_input_of_node_type",
        "node_types": [
          "KSampler (Efficient)",
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_field": "sampler_name",
        "data_type": "string",
        "fallback": "euler"
      },
      {
        "target_key": "parameters.scheduler",
        "method": "comfy_find_input_of_node_type",
        "node_types": [
          "KSampler (Efficient)",
          "KSampler",
          "KSamplerAdvanced"
        ],
        "input_field": "scheduler",
        "data_type": "string",
        "fallback": "normal"
      },
      {
        "target_key": "parameters.width",
        "method": "comfy_find_input_of_node_type",
        "node_types": [
          "Empty Latent Image",
          "EmptyLatentImage"
        ],
        "input_field": "width",
        "data_type": "integer",
        "fallback": 1024
      },
      {
        "target_key": "parameters.height",
        "method": "comfy_find_input_of_node_type",
        "node_types": [
          "Empty Latent Image",
          "EmptyLatentImage"
        ],
        "input_field": "height",
        "data_type": "integer",
        "fallback": 1024
      },
      {
        "target_key": "loras",
        "method": "comfyui_extract_illustrious_xl_lora_stack"
      },
      {
        "target_key": "face_detection",
        "method": "comfyui_extract_face_detailer_settings"
      },
      {
        "comment": "ðŸŽ¯ TIPO AI Prompt Enhancement Detection",
        "target_key": "tipo_enhancement",
        "method": "comfyui_detect_tipo_enhancement"
      },
      {
        "comment": "ðŸ“Š Workflow Complexity Analysis",
        "target_key": "workflow_complexity",
        "method": "comfyui_calculate_workflow_complexity"
      },
      {
        "comment": "ðŸš€ Advanced Upscaling Detection",
        "target_key": "advanced_upscaling",
        "method": "comfyui_detect_advanced_upscaling"
      },
      {
        "comment": "ðŸŽ¨ Multi-Stage Conditioning Detection",
        "target_key": "multi_stage_conditioning",
        "method": "comfyui_detect_multi_stage_conditioning"
      },
      {
        "comment": "âœ¨ Post-Processing Effects Detection",
        "target_key": "post_processing_effects",
        "method": "comfyui_detect_post_processing_effects"
      },
      {
        "comment": "ðŸ”Œ Custom Node Ecosystem Detection",
        "target_key": "custom_node_ecosystems",
        "method": "comfyui_detect_custom_node_ecosystems"
      },
      {
        "comment": "ðŸŽ¯ High-Level Workflow Techniques",
        "target_key": "workflow_techniques",
        "method": "comfyui_extract_workflow_techniques"
      }
    ],
    "output_template": {
      "parser_name_from_engine": "IllustriousXL Efficiency Workflow",
      "tool": "ComfyUI (IllustriousXL + Efficiency Nodes)",
      "format": "IllustriousXL Efficiency Workflow",
      "prompt": "$prompt",
      "negative_prompt": "$negative_prompt",
      "parameters": {
        "model": "$parameters.model",
        "steps": "$parameters.steps",
        "cfg_scale": "$parameters.cfg_scale",
        "seed": "$parameters.seed",
        "sampler_name": "$parameters.sampler_name",
        "scheduler": "$parameters.scheduler",
        "width": "$parameters.width",
        "height": "$parameters.height"
      },
      "loras": "$loras",
      "face_detection": "$face_detection",
      "architecture_info": {
        "detected_as": "IllustriousXL + Efficiency Nodes",
        "model_architecture": "SDXL-based IllustriousXL",
        "efficiency_optimization": true,
        "face_enhancement": true,
        "memory_optimized": true
      },
      "workflow_metadata": {
        "source": "ComfyUI workflow",
        "parser_priority": 155,
        "confidence": "high",
        "efficiency_nodes": true,
        "illustrious_xl": true,
        "advanced_face_processing": true
      }
    }
  },
  "error_handling": {
    "on_parse_failure": "return_partial_data",
    "log_errors": true,
    "validation_level": "strict"
  },
  "notes": [
    "Specifically designed for IllustriousXL workflows using Efficiency Nodes",
    "Detects plantMilk_almond.safetensors and similar IllustriousXL models",
    "Handles Efficient Loader and KSampler (Efficient) node types",
    "Extracts LoRA Stacker configurations and FaceDetailer settings",
    "Priority 155 puts it above general SDXL parsers but below specialized wildcards",
    "Includes comprehensive advanced metadata extraction and face processing detection"
  ],
  "test_cases": [
    {
      "description": "IllustriousXL workflow with Efficiency Nodes and FaceDetailer",
      "expected_fields": [
        "prompt",
        "negative_prompt",
        "parameters.model",
        "loras",
        "face_detection",
        "workflow_complexity"
      ]
    }
  ],
  "enhanced_with_node_discovery": true,
  "enhancement_date": "2025-07-08"
}