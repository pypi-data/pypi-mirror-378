"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from que_media import errors, models, utils
from que_media._hooks import HookContext
from que_media.types import OptionalNullable, UNSET
from que_media.utils import get_security_from_env
from que_media.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, Mapping, Optional


class AssetManagement(BaseSDK):
    r"""Helper endpoints for handling asset uploads."""

    def get_presigned_url(
        self,
        *,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetPresignedURLResponse:
        r"""Get an S3 presigned URL for secure uploads

        Generates a temporary, cryptographically signed URL that allows secure direct upload of assets to S3 without exposing AWS credentials.

        This is the recommended approach for uploading assets, especially large files, as it:
        - Avoids sending large payloads through the API server
        - Provides secure, time-limited access to S3
        - Enables resumable uploads for better reliability
        - Reduces API server memory usage and network overhead

        Use the returned URL to make a PUT request with your asset file, then use the returned key for subsequent sign/verify operations.


        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)
        req = self._build_request(
            method="POST",
            path="/v1/assets/presign",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getPresignedUrl",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "403", "429", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return models.GetPresignedURLResponse(
                result=unmarshal_json_response(models.PresignResponse, http_res),
                headers={},
            )
        if utils.match_response(http_res, ["401", "403"], "application/problem+json"):
            response_data = unmarshal_json_response(
                errors.ProblemResponseErrorData, http_res
            )
            raise errors.ProblemResponseError(response_data, http_res)
        if utils.match_response(http_res, "429", "application/problem+json"):
            response_data = unmarshal_json_response(
                errors.ProblemResponseErrorData, http_res
            )
            raise errors.ProblemResponseError(response_data, http_res)
        if utils.match_response(http_res, "500", "application/problem+json"):
            response_data = unmarshal_json_response(
                errors.ProblemResponseErrorData, http_res
            )
            raise errors.ProblemResponseError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.QueDefaultError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.QueDefaultError("API error occurred", http_res, http_res_text)

        raise errors.QueDefaultError("Unexpected response received", http_res)

    async def get_presigned_url_async(
        self,
        *,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetPresignedURLResponse:
        r"""Get an S3 presigned URL for secure uploads

        Generates a temporary, cryptographically signed URL that allows secure direct upload of assets to S3 without exposing AWS credentials.

        This is the recommended approach for uploading assets, especially large files, as it:
        - Avoids sending large payloads through the API server
        - Provides secure, time-limited access to S3
        - Enables resumable uploads for better reliability
        - Reduces API server memory usage and network overhead

        Use the returned URL to make a PUT request with your asset file, then use the returned key for subsequent sign/verify operations.


        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)
        req = self._build_request_async(
            method="POST",
            path="/v1/assets/presign",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getPresignedUrl",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "403", "429", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return models.GetPresignedURLResponse(
                result=unmarshal_json_response(models.PresignResponse, http_res),
                headers={},
            )
        if utils.match_response(http_res, ["401", "403"], "application/problem+json"):
            response_data = unmarshal_json_response(
                errors.ProblemResponseErrorData, http_res
            )
            raise errors.ProblemResponseError(response_data, http_res)
        if utils.match_response(http_res, "429", "application/problem+json"):
            response_data = unmarshal_json_response(
                errors.ProblemResponseErrorData, http_res
            )
            raise errors.ProblemResponseError(response_data, http_res)
        if utils.match_response(http_res, "500", "application/problem+json"):
            response_data = unmarshal_json_response(
                errors.ProblemResponseErrorData, http_res
            )
            raise errors.ProblemResponseError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.QueDefaultError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.QueDefaultError("API error occurred", http_res, http_res_text)

        raise errors.QueDefaultError("Unexpected response received", http_res)
