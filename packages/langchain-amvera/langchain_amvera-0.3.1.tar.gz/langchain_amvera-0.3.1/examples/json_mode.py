#!/usr/bin/env python3
"""–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è JSON —Ä–µ–∂–∏–º–∞ —Å langchain-amvera."""

import json
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_amvera import AmveraLLM


def basic_json_example():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä JSON —Ä–µ–∂–∏–º–∞."""
    print("üìù –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤—ã–π JSON —Ä–µ–∂–∏–º\n")
    
    llm = AmveraLLM(
        model="llama70b",
        temperature=0.3,
        json_mode=True,  # –í–∫–ª—é—á–∞–µ–º JSON —Ä–µ–∂–∏–º
        verbose=True
    )
    
    messages = [
        SystemMessage(content="""
–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
–í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON –æ–±—ä–µ–∫—Ç–∞.
        """),
        HumanMessage(content="–†–∞—Å—Å–∫–∞–∂–∏ –æ Python –≤ 3-—Ö –ø—É–Ω–∫—Ç–∞—Ö")
    ]
    
    try:
        result = llm.invoke(messages)
        print(f"ü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ (—Å—Ç—Ä–æ–∫–∞):\n{result.content}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            json_data = json.loads(result.content)
            print(f"\n‚úÖ –í–∞–ª–∏–¥–Ω—ã–π JSON –ø–æ–ª—É—á–µ–Ω:")
            print(json.dumps(json_data, indent=2, ensure_ascii=False))
        except json.JSONDecodeError:
            print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def structured_json_example():
    """–ü—Ä–∏–º–µ—Ä —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º JSON –æ—Ç–≤–µ—Ç–æ–º."""
    print("\nüìù –ü—Ä–∏–º–µ—Ä 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–æ–π\n")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    json_schema = {
        "type": "object",
        "properties": {
            "summary": {
                "type": "string",
                "description": "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ"
            },
            "details": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "title": {"type": "string"},
                        "description": {"type": "string"},
                        "importance": {"type": "integer", "minimum": 1, "maximum": 5}
                    },
                    "required": ["title", "description", "importance"]
                }
            },
            "recommendation": {
                "type": "string"
            }
        },
        "required": ["summary", "details", "recommendation"]
    }
    
    llm = AmveraLLM(
        model="llama70b",
        temperature=0.2,
        json_mode=True,
        json_schema=json_schema,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ö–µ–º—É
        verbose=True
    )
    
    messages = [
        SystemMessage(content=f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ:

{json.dumps(json_schema, indent=2)}

–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ details –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å title, description –∏ importance (–æ—Ç 1 –¥–æ 5).
        """),
        HumanMessage(content="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è React –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    ]
    
    try:
        result = llm.invoke(messages)
        print(f"ü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n{result.content}")
        
        # –ü–∞—Ä—Å–∏–º –∏ –∫—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏–º JSON
        try:
            data = json.loads(result.content)
            print(f"\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:")
            print(f"üìã –†–µ–∑—é–º–µ: {data.get('summary', 'N/A')}")
            
            details = data.get('details', [])
            print(f"\nüìä –î–µ—Ç–∞–ª–∏ ({len(details)} –ø—É–Ω–∫—Ç–æ–≤):")
            for i, detail in enumerate(details, 1):
                title = detail.get('title', 'N/A')
                desc = detail.get('description', 'N/A')
                imp = detail.get('importance', 0)
                print(f"  {i}. {title} (–≤–∞–∂–Ω–æ—Å—Ç—å: {imp}/5)")
                print(f"     {desc}")
            
            rec = data.get('recommendation', 'N/A')
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {rec}")
            
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def data_extraction_example():
    """–ü—Ä–∏–º–µ—Ä –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."""
    print("\nüìù –ü—Ä–∏–º–µ—Ä 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ JSON\n")
    
    llm = AmveraLLM(
        model="llama8b",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å
        temperature=0.1,
        json_mode=True
    )
    
    # –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    sample_text = """
    –ö–æ–º–ø–∞–Ω–∏—è TechCorp –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –≤ 2020 –≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ. 
    CEO –∫–æ–º–ø–∞–Ω–∏–∏ - –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, CTO - –ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞. 
    –ö–æ–º–ø–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤.
    –í —à—Ç–∞—Ç–µ —Ä–∞–±–æ—Ç–∞–µ—Ç 150 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –ì–æ–¥–æ–≤–æ–π –æ–±–æ—Ä–æ—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 50 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ä—É–±–ª–µ–π.
    –û—Ñ–∏—Å—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ú–æ—Å–∫–≤–µ, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ –∏ –ö–∞–∑–∞–Ω–∏.
    """
    
    messages = [
        SystemMessage(content="""
–ò–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–µ—Ä–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å:
- company_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
- founded_year: –≥–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è  
- location: –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
- leadership: –º–∞—Å—Å–∏–≤ —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏ (name, position)
- business_focus: —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- employees_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
- annual_revenue: –≥–æ–¥–æ–≤–æ–π –æ–±–æ—Ä–æ—Ç
- offices: –º–∞—Å—Å–∏–≤ —Å –æ—Ñ–∏—Å–∞–º–∏

–ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–π null.
        """),
        HumanMessage(content=f"–ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞:\n\n{sample_text}")
    ]
    
    try:
        result = llm.invoke(messages)
        print(f"ü§ñ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{result.content}")
        
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            data = json.loads(result.content)
            print(f"\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏:")
            print(f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('company_name', 'N/A')}")
            print(f"üìÖ –û—Å–Ω–æ–≤–∞–Ω–∞: {data.get('founded_year', 'N/A')}")
            print(f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {data.get('location', 'N/A')}")
            
            leadership = data.get('leadership', [])
            if leadership:
                print(f"üë• –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ:")
                for person in leadership:
                    name = person.get('name', 'N/A')
                    pos = person.get('position', 'N/A')
                    print(f"   - {name}: {pos}")
            
            print(f"üéØ –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data.get('business_focus', 'N/A')}")
            print(f"üë®‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {data.get('employees_count', 'N/A')}")
            print(f"üí∞ –û–±–æ—Ä–æ—Ç: {data.get('annual_revenue', 'N/A')}")
            
            offices = data.get('offices', [])
            if offices:
                print(f"üè¢ –û—Ñ–∏—Å—ã: {', '.join(offices)}")
                
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ JSON —Ä–µ–∂–∏–º–∞."""
    print("üîß –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è JSON —Ä–µ–∂–∏–º–∞ —Å Amvera LLM")
    print("="*60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    basic_json_example()
    structured_json_example()
    data_extraction_example()
    
    print("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã JSON —Ä–µ–∂–∏–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüí° JSON —Ä–µ–∂–∏–º –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è:")
    print("   - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    print("   - –ò–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤")


if __name__ == "__main__":
    main()