#!/usr/bin/env python3
"""–ü—Ä–∏–º–µ—Ä Function Calling —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º @tool –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –∏ bind_tools()."""

import json
from datetime import datetime
from typing import Dict, Any, List
from pydantic import BaseModel, Field

from langchain_core.tools import tool
from langchain_core.messages import HumanMessage, SystemMessage, AIMessage, ToolMessage
from langchain_amvera import AmveraLLM


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—ã –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
class WeatherArgs(BaseModel):
    """–°—Ö–µ–º–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã."""
    location: str = Field(
        description="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 'Moscow' –∏–ª–∏ 'London'")
    unit: str = Field(
        default="celsius", description="–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: celsius –∏–ª–∏ fahrenheit")


class DistanceArgs(BaseModel):
    """–°—Ö–µ–º–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è."""
    city1: str = Field(description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞")
    city2: str = Field(description="–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –≥–æ—Ä–æ–¥–∞")


# –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º @tool
@tool("get_current_weather", args_schema=WeatherArgs)
def get_current_weather(location: str, unit: str = "celsius") -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è."""
    # –ò–º–∏—Ç–∞—Ü–∏—è API –ø–æ–≥–æ–¥—ã
    weather_data = {
        "moscow": {"temperature": -2, "condition": "snow", "humidity": 80},
        "london": {"temperature": 8, "condition": "rainy", "humidity": 75},
        "tokyo": {"temperature": 15, "condition": "cloudy", "humidity": 60},
        "new york": {"temperature": 12, "condition": "sunny", "humidity": 45},
    }

    location_lower = location.lower()
    if location_lower in weather_data:
        data = weather_data[location_lower]
        temp = data["temperature"]

        if unit == "fahrenheit":
            temp = temp * 9/5 + 32
            unit_symbol = "¬∞F"
        else:
            unit_symbol = "¬∞C"

        return json.dumps({
            "location": location,
            "temperature": f"{temp}{unit_symbol}",
            "condition": data["condition"],
            "humidity": f"{data['humidity']}%",
            "timestamp": datetime.now().isoformat()
        })
    else:
        return json.dumps({
            "error": f"–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {location} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        })


@tool("calculate_distance", args_schema=DistanceArgs)
def calculate_distance(city1: str, city2: str) -> str:
    """–í—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏."""
    # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    distances = {
        ("moscow", "london"): 2500,
        ("–º–æ—Å–∫–≤–∞", "–ª–æ–Ω–¥–æ–Ω"): 2500,
        ("moscow", "tokyo"): 7400,
        ("–º–æ—Å–∫–≤–∞", "—Ç–æ–∫–∏–æ"): 7400,
        ("london", "tokyo"): 9600,
        ("–ª–æ–Ω–¥–æ–Ω", "—Ç–æ–∫–∏–æ"): 9600,
        ("moscow", "new york"): 7500,
        ("–º–æ—Å–∫–≤–∞", "–Ω—å—é-–π–æ—Ä–∫"): 7500,
        ("london", "new york"): 5500,
        ("–ª–æ–Ω–¥–æ–Ω", "–Ω—å—é-–π–æ—Ä–∫"): 5500,
        ("tokyo", "new york"): 10800,
        ("—Ç–æ–∫–∏–æ", "–Ω—å—é-–π–æ—Ä–∫"): 10800,
    }

    key1 = (city1.lower(), city2.lower())
    key2 = (city2.lower(), city1.lower())

    distance = distances.get(key1) or distances.get(key2)

    if distance:
        return json.dumps({
            "from": city1,
            "to": city2,
            "distance_km": distance,
            "distance_miles": round(distance * 0.621371, 1)
        })
    else:
        return json.dumps({
            "error": f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É {city1} –∏ {city2} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        })


def handle_tool_calls(message: AIMessage, tools_dict: Dict[str, Any]) -> List[ToolMessage]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏."""
    tool_messages = []

    if hasattr(message, 'tool_calls') and message.tool_calls:
        for tool_call in message.tool_calls:
            tool_name = tool_call.get("name")
            tool_args = tool_call.get("args", {})

            print(f"üîß –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool_name}({tool_args})")

            if tool_name in tools_dict:
                try:
                    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                    result = tools_dict[tool_name].invoke(tool_args)
                    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

                    # –°–æ–∑–¥–∞–µ–º ToolMessage –¥–ª—è —Ü–µ–ø–æ—á–∫–∏
                    tool_message = ToolMessage(
                        content=result,
                        tool_call_id=tool_call.get("id", "unknown")
                    )
                    tool_messages.append(tool_message)

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ {tool_name}: {e}")
                    tool_message = ToolMessage(
                        content=f"–û—à–∏–±–∫–∞: {str(e)}",
                        tool_call_id=tool_call.get("id", "unknown")
                    )
                    tool_messages.append(tool_message)
            else:
                print(f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return tool_messages


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Function Calling."""
    print("üõ†Ô∏è  –ü—Ä–∏–º–µ—Ä Function Calling —Å bind_tools()\n")

    # –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    tools = [get_current_weather, calculate_distance]

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
    tools_dict = {tool.name: tool for tool in tools}

    # –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å
    base_llm = AmveraLLM(
        model="llama70b",
        temperature=0.3,
        verbose=True
    )

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫ –º–æ–¥–µ–ª–∏
    llm_with_tools = base_llm.bind_tools(tools)

    print("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –º–æ–¥–µ–ª–∏")

    # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    test_queries = [
        "–ö–∞–∫–∞—è —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?",
        "–°–∫–æ–ª—å–∫–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –æ—Ç –õ–æ–Ω–¥–æ–Ω–∞ –¥–æ –¢–æ–∫–∏–æ?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –ù—å—é-–ô–æ—Ä–∫–µ –∏ –∫–∞–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ú–æ—Å–∫–≤—ã –¥–æ –ù—å—é-–ô–æ—Ä–∫–∞"
    ]

    for i, query in enumerate(test_queries, 1):
        print(f"\nüìù –ó–∞–ø—Ä–æ—Å {i}: {query}")
        print("-" * 50)

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [
            SystemMessage(content="""
–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π.

–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –ø–æ–≥–æ–¥–µ –∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.
–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–æ—Ä–º–∞—Ç–µ.
            """.strip()),
            HumanMessage(content=query)
        ]

        try:
            # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏
            print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏...")
            ai_message = llm_with_tools.invoke(messages)

            print(f"ü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {ai_message.content}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            tool_messages = handle_tool_calls(ai_message, tools_dict)

            if tool_messages:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                messages.extend([ai_message] + tool_messages)

                # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                print("\nüîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...")
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –±–µ–∑ tools
                    final_response = base_llm.invoke(messages)
                    print(f"‚ú® –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {final_response.content}")
                except Exception as final_error:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {final_error}")
                    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
                    for i, msg in enumerate(tool_messages, 1):
                        print(f"   {i}. {msg.content}")

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
            usage = llm_with_tools.get_token_usage(ai_message)
            if usage:
                print(
                    f"\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {usage.get('totalTokens', 'N/A')}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            import traceback
            traceback.print_exc()

        print("\n" + "="*60)


if __name__ == "__main__":
    main()
