#!/usr/bin/env python3
"""–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–º–µ—Ä Function Calling —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º."""

import json
from datetime import datetime
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_amvera import AmveraLLM


def get_current_weather(location: str, unit: str = "celsius") -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è."""
    # –ò–º–∏—Ç–∞—Ü–∏—è API –ø–æ–≥–æ–¥—ã
    weather_data = {
        "moscow": {"temperature": -2, "condition": "snow", "humidity": 80},
        "london": {"temperature": 8, "condition": "rainy", "humidity": 75},
        "tokyo": {"temperature": 15, "condition": "cloudy", "humidity": 60},
        "new york": {"temperature": 12, "condition": "sunny", "humidity": 45},
    }
    
    location_lower = location.lower()
    if location_lower in weather_data:
        data = weather_data[location_lower]
        temp = data["temperature"]
        
        if unit == "fahrenheit":
            temp = temp * 9/5 + 32
            unit_symbol = "¬∞F"
        else:
            unit_symbol = "¬∞C"
        
        return json.dumps({
            "location": location,
            "temperature": f"{temp}{unit_symbol}",
            "condition": data["condition"],
            "humidity": f"{data['humidity']}%",
            "timestamp": datetime.now().isoformat()
        })
    else:
        return json.dumps({
            "error": f"–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {location} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        })


def main():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Function Calling."""
    print("üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø—Ä–∏–º–µ—Ä Function Calling —Å Amvera LLM\n")
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    tools = [
        {
            "type": "function",
            "function": {
                "name": "get_current_weather",
                "description": "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"
                        },
                        "unit": {
                            "type": "string",
                            "enum": ["celsius", "fahrenheit"],
                            "default": "celsius"
                        }
                    },
                    "required": ["location"]
                }
            }
        }
    ]
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å –æ—Ç–ª–∞–¥–∫–æ–π
    llm = AmveraLLM(
        model="llama70b",
        temperature=0.3,
        tools=tools,
        verbose=True  # –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    )
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    query = "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?"
    
    print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {query}")
    print("-" * 50)
    
    messages = [
        SystemMessage(content="–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–≥–æ–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é get_current_weather –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."),
        HumanMessage(content=query)
    ]
    
    try:
        print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        result = llm.invoke(messages)
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω")
        print(f"üìÑ –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
        print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {result.content}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"\nüîç –ê—Ç—Ä–∏–±—É—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
        for attr in dir(result):
            if not attr.startswith('_'):
                try:
                    value = getattr(result, attr)
                    if not callable(value):
                        print(f"  - {attr}: {value}")
                except:
                    print(f"  - {attr}: <–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å>")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
        if hasattr(result, 'response_metadata'):
            print(f"\nüìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: {result.response_metadata}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º tool calls
        if hasattr(result, 'tool_calls'):
            print(f"\nüîß Tool calls: {result.tool_calls}")
        else:
            print(f"\n‚ùå –ê—Ç—Ä–∏–±—É—Ç tool_calls –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        import traceback
        print("üìã –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:")
        traceback.print_exc()


if __name__ == "__main__":
    main()