#!/usr/bin/env python3
"""–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è langchain-amvera."""

import os
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_amvera import AmveraLLM


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AmveraLLM."""
    
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è AMVERA_API_TOKEN
    # –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —è–≤–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏
    
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Amvera LLM...")
    
    # –°–ø–æ—Å–æ–± 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è AMVERA_API_TOKEN
    llm = AmveraLLM(
        model="llama70b",
        temperature=0.7,
        max_tokens=200,
        verbose=True  # –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    )
    
    # –°–ø–æ—Å–æ–± 2: –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞ —è–≤–Ω–æ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    # llm = AmveraLLM(
    #     model="llama70b",
    #     temperature=0.7,
    #     max_tokens=200,
    #     api_token="your-amvera-api-token-here"
    # )
    
    print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {llm.model} —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π {llm.temperature}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = [
        SystemMessage(content="–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."),
        HumanMessage(content="–†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤")
    ]
    
    print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Amvera API...")
    
    try:
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        result = llm.invoke(messages)
        
        print(f"\nü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n{result.content}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        usage = llm.get_token_usage(result)
        if usage:
            print(f"\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:")
            print(f"  - –í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {usage.get('inputTextTokens', 'N/A')}")
            print(f"  - –¢–æ–∫–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞: {usage.get('completionTokens', 'N/A')}")
            print(f"  - –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {usage.get('totalTokens', 'N/A')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏
        model_version = llm.get_model_version(result)
        if model_version:
            print(f"üì¶ –í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏: {model_version}")
            
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API: {e}")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è AMVERA_API_TOKEN")
        print("2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API —Ç–æ–∫–µ–Ω–∞")
        print("3. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()