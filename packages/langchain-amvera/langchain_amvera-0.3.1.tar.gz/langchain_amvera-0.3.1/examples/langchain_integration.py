#!/usr/bin/env python3
"""–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ langchain-amvera —Å —ç–∫–æ—Å–∏—Å—Ç–µ–º–æ–π LangChain."""

from langchain_core.messages import HumanMessage, SystemMessage
from langchain_core.prompts import ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_amvera import AmveraLLM


def basic_chain_example():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ —Å AmveraLLM."""
    print("üîó –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–∞—è —Ü–µ–ø–æ—á–∫–∞ LangChain\n")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    llm = AmveraLLM(
        model="llama70b",
        temperature=0.7,
        max_tokens=200
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω
    prompt = ChatPromptTemplate.from_messages([
        SystemMessagePromptTemplate.from_template(
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ {domain}. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ."
        ),
        HumanMessagePromptTemplate.from_template("{question}")
    ])
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    output_parser = StrOutputParser()
    
    # –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É
    chain = prompt | llm | output_parser
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ø–æ—á–∫—É
        result = chain.invoke({
            "domain": "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏?"
        })
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ü–µ–ø–æ—á–∫–∏:\n{result}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–µ–ø–æ—á–∫–µ: {e}")


def conversation_chain_example():
    """–ü—Ä–∏–º–µ—Ä —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
    print("\nüîó –ü—Ä–∏–º–µ—Ä 2: –¶–µ–ø–æ—á–∫–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞\n")
    
    llm = AmveraLLM(
        model="llama70b",
        temperature=0.8,
        max_tokens=150
    )
    
    # –®–∞–±–ª–æ–Ω –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
    conversation_prompt = ChatPromptTemplate.from_messages([
        SystemMessage(content="""
–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –í–µ–¥–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥.
–ó–∞–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –æ—Ç–≤–µ—á–∞–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
        """),
        HumanMessagePromptTemplate.from_template("{user_input}")
    ])
    
    chain = conversation_prompt | llm | StrOutputParser()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
    conversation_steps = [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        "–ú–æ–∂–µ—à—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Ö–æ—Ä–æ—à—É—é –∫–Ω–∏–≥—É –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é?",
        "–ê —á—Ç–æ –¥—É–º–∞–µ—à—å –æ Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö?",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≤–µ—Ç! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è."
    ]
    
    try:
        for i, user_message in enumerate(conversation_steps, 1):
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")
            
            response = chain.invoke({"user_input": user_message})
            print(f"ü§ñ –ü–æ–º–æ—â–Ω–∏–∫: {response}")
            
            if i < len(conversation_steps):
                print("-" * 40)
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–µ: {e}")


def multi_step_chain_example():
    """–ü—Ä–∏–º–µ—Ä –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–π —Ü–µ–ø–æ—á–∫–∏."""
    print("\nüîó –ü—Ä–∏–º–µ—Ä 3: –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤–∞—è —Ü–µ–ø–æ—á–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n")
    
    llm = AmveraLLM(
        model="llama8b",
        temperature=0.5,
        max_tokens=100
    )
    
    # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Ç–µ–º—ã
    analysis_prompt = ChatPromptTemplate.from_messages([
        SystemMessage(content="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–º—É –∏ –≤—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏."),
        HumanMessagePromptTemplate.from_template("–¢–µ–º–∞: {topic}")
    ])
    
    # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π
    ideas_prompt = ChatPromptTemplate.from_messages([
        SystemMessage(content="–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–ª–æ–∂–∏ 3 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–¥–µ–∏."),
        HumanMessagePromptTemplate.from_template("–ê–Ω–∞–ª–∏–∑: {analysis}")
    ])
    
    # –®–∞–≥ 3: –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations_prompt = ChatPromptTemplate.from_messages([
        SystemMessage(content="–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–¥–µ–π."),
        HumanMessagePromptTemplate.from_template("–ò–¥–µ–∏: {ideas}")
    ])
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏
    analysis_chain = analysis_prompt | llm | StrOutputParser()
    ideas_chain = ideas_prompt | llm | StrOutputParser()
    recommendations_chain = recommendations_prompt | llm | StrOutputParser()
    
    topic = "–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ"
    
    try:
        print(f"üìã –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–µ–º–∞: {topic}")
        print("\nüîç –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Ç–µ–º—ã...")
        
        # –®–∞–≥ 1
        analysis = analysis_chain.invoke({"topic": topic})
        print(f"üìä –ê–Ω–∞–ª–∏–∑: {analysis}")
        
        print("\nüí° –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π...")
        
        # –®–∞–≥ 2  
        ideas = ideas_chain.invoke({"analysis": analysis})
        print(f"‚ú® –ò–¥–µ–∏: {ideas}")
        
        print("\nüéØ –®–∞–≥ 3: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
        
        # –®–∞–≥ 3
        recommendations = recommendations_chain.invoke({"ideas": ideas})
        print(f"üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendations}")
        
        print(f"\n‚úÖ –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º—ã '{topic}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–π —Ü–µ–ø–æ—á–∫–µ: {e}")


def custom_output_parser_example():
    """–ü—Ä–∏–º–µ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüîó –ü—Ä–∏–º–µ—Ä 4: –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n")
    
    from langchain_core.output_parsers import BaseOutputParser
    from typing import List
    import re
    
    class ListOutputParser(BaseOutputParser[List[str]]):
        """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞."""
        
        def parse(self, text: str) -> List[str]:
            # –ò—â–µ–º –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
            patterns = [
                r'^\d+\.\s*(.+)$',  # 1. item
                r'^-\s*(.+)$',      # - item  
                r'^\*\s*(.+)$',     # * item
                r'^\‚Ä¢\s*(.+)$',     # ‚Ä¢ item
            ]
            
            items = []
            lines = text.strip().split('\n')
            
            for line in lines:
                line = line.strip()
                for pattern in patterns:
                    match = re.match(pattern, line, re.MULTILINE)
                    if match:
                        items.append(match.group(1).strip())
                        break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
            if not items:
                sentences = [s.strip() for s in text.split('.') if s.strip()]
                items = sentences[:5]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            
            return items
    
    llm = AmveraLLM(
        model="llama70b", 
        temperature=0.6,
        max_tokens=200
    )
    
    prompt = ChatPromptTemplate.from_messages([
        SystemMessage(content="–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –º–∞—Ä–∫–µ—Ä—ã."),
        HumanMessagePromptTemplate.from_template("{request}")
    ])
    
    list_parser = ListOutputParser()
    
    chain = prompt | llm | list_parser
    
    try:
        result = chain.invoke({
            "request": "–î–∞–π 5 —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∏–∑—É—á–µ–Ω–∏—é –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
        })
        
        print("üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ç–æ–≤:")
        for i, item in enumerate(result, 1):
            print(f"  {i}. {item}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ LangChain."""
    print("üîó –ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Amvera LLM —Å —ç–∫–æ—Å–∏—Å—Ç–µ–º–æ–π LangChain")
    print("="*70)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    basic_chain_example()
    conversation_chain_example() 
    multi_step_chain_example()
    custom_output_parser_example()
    
    print(f"\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ LangChain –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print(f"\nüí° AmveraLLM –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º —Å:")
    print("   - –ü—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω–∞–º–∏ LangChain")
    print("   - –¶–µ–ø–æ—á–∫–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("   - –ü–∞—Ä—Å–µ—Ä–∞–º–∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("   - –°–∏—Å—Ç–µ–º–æ–π callbacks")


if __name__ == "__main__":
    main()